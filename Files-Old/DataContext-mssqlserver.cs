using System;
using Microsoft.EntityFrameworkCore;
using Domain;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using System.Linq;


namespace Persistence;

public class DataContext : IdentityDbContext<AppUserLogin, ApplicationRole, string,
        ApplicationUserClaim, ApplicationUserRole, ApplicationUserLogin,
        ApplicationRoleClaim, ApplicationUserToken>
{

    public DataContext()
    {
    }
    
    public DataContext(DbContextOptions<DataContext> options) : base(options)
    {
        this.ChangeTracker.LazyLoadingEnabled = false;
    }
    
    
        public DbSet<GlAccountHierarchyView> GlAccountHierarchyView { get; set; }
        public DbSet<PartyView> PartyView { get; set; }
        public DbSet<Photo> Photos { get; set; }
        public DbSet<AccommodationClass> AccommodationClasses { get; set; } = null!;
        public DbSet<AccommodationMap> AccommodationMaps { get; set; } = null!;
        public DbSet<AccommodationMapType> AccommodationMapTypes { get; set; } = null!;
        public DbSet<AccommodationSpot> AccommodationSpots { get; set; } = null!;
        public DbSet<AcctgTran> AcctgTrans { get; set; } = null!;
        public DbSet<AcctgTransAttribute> AcctgTransAttributes { get; set; } = null!;
        public DbSet<AcctgTransEntry> AcctgTransEntries { get; set; } = null!;
        public DbSet<AcctgTransEntryType> AcctgTransEntryTypes { get; set; } = null!;
        public DbSet<AcctgTransType> AcctgTransTypes { get; set; } = null!;
        public DbSet<AcctgTransTypeAttr> AcctgTransTypeAttrs { get; set; } = null!;
        public DbSet<Addendum> Addenda { get; set; } = null!;
        public DbSet<AddressMatchMap> AddressMatchMaps { get; set; } = null!;
        public DbSet<Affiliate> Affiliates { get; set; } = null!;
        public DbSet<Agreement> Agreements { get; set; } = null!;
        public DbSet<AgreementAttribute> AgreementAttributes { get; set; } = null!;
        public DbSet<AgreementContent> AgreementContents { get; set; } = null!;
        public DbSet<AgreementContentType> AgreementContentTypes { get; set; } = null!;
        public DbSet<AgreementEmploymentAppl> AgreementEmploymentAppls { get; set; } = null!;
        public DbSet<AgreementFacilityAppl> AgreementFacilityAppls { get; set; } = null!;
        public DbSet<AgreementGeographicalApplic> AgreementGeographicalApplics { get; set; } = null!;
        public DbSet<AgreementItem> AgreementItems { get; set; } = null!;
        public DbSet<AgreementItemAttribute> AgreementItemAttributes { get; set; } = null!;
        public DbSet<AgreementItemType> AgreementItemTypes { get; set; } = null!;
        public DbSet<AgreementItemTypeAttr> AgreementItemTypeAttrs { get; set; } = null!;
        public DbSet<AgreementPartyApplic> AgreementPartyApplics { get; set; } = null!;
        public DbSet<AgreementProductAppl> AgreementProductAppls { get; set; } = null!;
        public DbSet<AgreementPromoAppl> AgreementPromoAppls { get; set; } = null!;
        public DbSet<AgreementRole> AgreementRoles { get; set; } = null!;
        public DbSet<AgreementStatus> AgreementStatuses { get; set; } = null!;
        public DbSet<AgreementTerm> AgreementTerms { get; set; } = null!;
        public DbSet<AgreementTermAttribute> AgreementTermAttributes { get; set; } = null!;
        public DbSet<AgreementType> AgreementTypes { get; set; } = null!;
        public DbSet<AgreementTypeAttr> AgreementTypeAttrs { get; set; } = null!;
        public DbSet<AgreementWorkEffortApplic> AgreementWorkEffortApplics { get; set; } = null!;
        public DbSet<AllocationPlanHeader> AllocationPlanHeaders { get; set; } = null!;
        public DbSet<AllocationPlanItem> AllocationPlanItems { get; set; } = null!;
        public DbSet<AllocationPlanType> AllocationPlanTypes { get; set; } = null!;
        public DbSet<ApplicationSandbox> ApplicationSandboxes { get; set; } = null!;
        public DbSet<AudioDataResource> AudioDataResources { get; set; } = null!;
        public DbSet<BenefitType> BenefitTypes { get; set; } = null!;
        public DbSet<BillingAccount> BillingAccounts { get; set; } = null!;
        public DbSet<BillingAccountRole> BillingAccountRoles { get; set; } = null!;
        public DbSet<BillingAccountTerm> BillingAccountTerms { get; set; } = null!;
        public DbSet<BillingAccountTermAttr> BillingAccountTermAttrs { get; set; } = null!;
        public DbSet<BrowserType> BrowserTypes { get; set; } = null!;
        public DbSet<Budget> Budgets { get; set; } = null!;
        public DbSet<BudgetAttribute> BudgetAttributes { get; set; } = null!;
        public DbSet<BudgetItem> BudgetItems { get; set; } = null!;
        public DbSet<BudgetItemAttribute> BudgetItemAttributes { get; set; } = null!;
        public DbSet<BudgetItemType> BudgetItemTypes { get; set; } = null!;
        public DbSet<BudgetItemTypeAttr> BudgetItemTypeAttrs { get; set; } = null!;
        public DbSet<BudgetReview> BudgetReviews { get; set; } = null!;
        public DbSet<BudgetReviewResultType> BudgetReviewResultTypes { get; set; } = null!;
        public DbSet<BudgetRevision> BudgetRevisions { get; set; } = null!;
        public DbSet<BudgetRevisionImpact> BudgetRevisionImpacts { get; set; } = null!;
        public DbSet<BudgetRole> BudgetRoles { get; set; } = null!;
        public DbSet<BudgetScenario> BudgetScenarios { get; set; } = null!;
        public DbSet<BudgetScenarioApplication> BudgetScenarioApplications { get; set; } = null!;
        public DbSet<BudgetScenarioRule> BudgetScenarioRules { get; set; } = null!;
        public DbSet<BudgetStatus> BudgetStatuses { get; set; } = null!;
        public DbSet<BudgetType> BudgetTypes { get; set; } = null!;
        public DbSet<BudgetTypeAttr> BudgetTypeAttrs { get; set; } = null!;
        public DbSet<CarrierShipmentBoxType> CarrierShipmentBoxTypes { get; set; } = null!;
        public DbSet<CarrierShipmentMethod> CarrierShipmentMethods { get; set; } = null!;
        public DbSet<CartAbandonedLine> CartAbandonedLines { get; set; } = null!;
        public DbSet<CatalinaSession> CatalinaSessions { get; set; } = null!;
        public DbSet<CharacterSet> CharacterSets { get; set; } = null!;
        public DbSet<CheckAccount> CheckAccounts { get; set; } = null!;
        public DbSet<CommContentAssocType> CommContentAssocTypes { get; set; } = null!;
        public DbSet<CommEventContentAssoc> CommEventContentAssocs { get; set; } = null!;
        public DbSet<CommunicationEvent> CommunicationEvents { get; set; } = null!;
        public DbSet<CommunicationEventOrder> CommunicationEventOrders { get; set; } = null!;
        public DbSet<CommunicationEventProduct> CommunicationEventProducts { get; set; } = null!;
        public DbSet<CommunicationEventPrpTyp> CommunicationEventPrpTyps { get; set; } = null!;
        public DbSet<CommunicationEventPurpose> CommunicationEventPurposes { get; set; } = null!;
        public DbSet<CommunicationEventReturn> CommunicationEventReturns { get; set; } = null!;
        public DbSet<CommunicationEventRole> CommunicationEventRoles { get; set; } = null!;
        public DbSet<CommunicationEventType> CommunicationEventTypes { get; set; } = null!;
        public DbSet<CommunicationEventWorkEff> CommunicationEventWorkEffs { get; set; } = null!;
        public DbSet<Component> Components { get; set; } = null!;
        public DbSet<ConfigOptionProductOption> ConfigOptionProductOptions { get; set; } = null!;
        public DbSet<ContactList> ContactLists { get; set; } = null!;
        public DbSet<ContactListCommStatus> ContactListCommStatuses { get; set; } = null!;
        public DbSet<ContactListParty> ContactListParties { get; set; } = null!;
        public DbSet<ContactListPartyStatus> ContactListPartyStatuses { get; set; } = null!;
        public DbSet<ContactListType> ContactListTypes { get; set; } = null!;
        public DbSet<ContactMech> ContactMeches { get; set; } = null!;
        public DbSet<ContactMechAttribute> ContactMechAttributes { get; set; } = null!;
        public DbSet<ContactMechLink> ContactMechLinks { get; set; } = null!;
        public DbSet<ContactMechPurposeType> ContactMechPurposeTypes { get; set; } = null!;
        public DbSet<ContactMechType> ContactMechTypes { get; set; } = null!;
        public DbSet<ContactMechTypeAttr> ContactMechTypeAttrs { get; set; } = null!;
        public DbSet<ContactMechTypePurpose> ContactMechTypePurposes { get; set; } = null!;
        public DbSet<Container> Containers { get; set; } = null!;
        public DbSet<ContainerGeoPoint> ContainerGeoPoints { get; set; } = null!;
        public DbSet<ContainerType> ContainerTypes { get; set; } = null!;
        public DbSet<Content> Contents { get; set; } = null!;
        public DbSet<ContentApproval> ContentApprovals { get; set; } = null!;
        public DbSet<ContentAssoc> ContentAssocs { get; set; } = null!;
        public DbSet<ContentAssocPredicate> ContentAssocPredicates { get; set; } = null!;
        public DbSet<ContentAssocType> ContentAssocTypes { get; set; } = null!;
        public DbSet<ContentAttribute> ContentAttributes { get; set; } = null!;
        public DbSet<ContentKeyword> ContentKeywords { get; set; } = null!;
        public DbSet<ContentMetaDatum> ContentMetaData { get; set; } = null!;
        public DbSet<ContentOperation> ContentOperations { get; set; } = null!;
        public DbSet<ContentPurpose> ContentPurposes { get; set; } = null!;
        public DbSet<ContentPurposeOperation> ContentPurposeOperations { get; set; } = null!;
        public DbSet<ContentPurposeType> ContentPurposeTypes { get; set; } = null!;
        public DbSet<ContentRevision> ContentRevisions { get; set; } = null!;
        public DbSet<ContentRevisionItem> ContentRevisionItems { get; set; } = null!;
        public DbSet<ContentRole> ContentRoles { get; set; } = null!;
        public DbSet<ContentSearchConstraint> ContentSearchConstraints { get; set; } = null!;
        public DbSet<ContentSearchResult> ContentSearchResults { get; set; } = null!;
        public DbSet<ContentType> ContentTypes { get; set; } = null!;
        public DbSet<ContentTypeAttr> ContentTypeAttrs { get; set; } = null!;
        public DbSet<CostComponent> CostComponents { get; set; } = null!;
        public DbSet<CostComponentAttribute> CostComponentAttributes { get; set; } = null!;
        public DbSet<CostComponentCalc> CostComponentCalcs { get; set; } = null!;
        public DbSet<CostComponentType> CostComponentTypes { get; set; } = null!;
        public DbSet<CostComponentTypeAttr> CostComponentTypeAttrs { get; set; } = null!;
        public DbSet<CountryAddressFormat> CountryAddressFormats { get; set; } = null!;
        public DbSet<CountryCapital> CountryCapitals { get; set; } = null!;
        public DbSet<CountryCode> CountryCodes { get; set; } = null!;
        public DbSet<CountryTeleCode> CountryTeleCodes { get; set; } = null!;
        public DbSet<CreditCard> CreditCards { get; set; } = null!;
        public DbSet<CreditCardTypeGlAccount> CreditCardTypeGlAccounts { get; set; } = null!;
        public DbSet<CustRequest> CustRequests { get; set; } = null!;
        public DbSet<CustRequestAttribute> CustRequestAttributes { get; set; } = null!;
        public DbSet<CustRequestCategory> CustRequestCategories { get; set; } = null!;
        public DbSet<CustRequestCommEvent> CustRequestCommEvents { get; set; } = null!;
        public DbSet<CustRequestContent> CustRequestContents { get; set; } = null!;
        public DbSet<CustRequestItem> CustRequestItems { get; set; } = null!;
        public DbSet<CustRequestItemNote> CustRequestItemNotes { get; set; } = null!;
        public DbSet<CustRequestItemWorkEffort> CustRequestItemWorkEfforts { get; set; } = null!;
        public DbSet<CustRequestNote> CustRequestNotes { get; set; } = null!;
        public DbSet<CustRequestParty> CustRequestParties { get; set; } = null!;
        public DbSet<CustRequestResolution> CustRequestResolutions { get; set; } = null!;
        public DbSet<CustRequestStatus> CustRequestStatuses { get; set; } = null!;
        public DbSet<CustRequestType> CustRequestTypes { get; set; } = null!;
        public DbSet<CustRequestTypeAttr> CustRequestTypeAttrs { get; set; } = null!;
        public DbSet<CustRequestWorkEffort> CustRequestWorkEfforts { get; set; } = null!;
        public DbSet<CustomMethod> CustomMethods { get; set; } = null!;
        public DbSet<CustomMethodType> CustomMethodTypes { get; set; } = null!;
        public DbSet<CustomScreen> CustomScreens { get; set; } = null!;
        public DbSet<CustomScreenType> CustomScreenTypes { get; set; } = null!;
        public DbSet<CustomTimePeriod> CustomTimePeriods { get; set; } = null!;
        public DbSet<DataCategory> DataCategories { get; set; } = null!;
        public DbSet<DataResource> DataResources { get; set; } = null!;
        public DbSet<DataResourceAttribute> DataResourceAttributes { get; set; } = null!;
        public DbSet<DataResourceMetaDatum> DataResourceMetaData { get; set; } = null!;
        public DbSet<DataResourcePurpose> DataResourcePurposes { get; set; } = null!;
        public DbSet<DataResourceRole> DataResourceRoles { get; set; } = null!;
        public DbSet<DataResourceType> DataResourceTypes { get; set; } = null!;
        public DbSet<DataResourceTypeAttr> DataResourceTypeAttrs { get; set; } = null!;
        public DbSet<DataSource> DataSources { get; set; } = null!;
        public DbSet<DataSourceType> DataSourceTypes { get; set; } = null!;
        public DbSet<DataTemplateType> DataTemplateTypes { get; set; } = null!;
        public DbSet<Deduction> Deductions { get; set; } = null!;
        public DbSet<DeductionType> DeductionTypes { get; set; } = null!;
        public DbSet<Deliverable> Deliverables { get; set; } = null!;
        public DbSet<DeliverableType> DeliverableTypes { get; set; } = null!;
        public DbSet<Delivery> Deliveries { get; set; } = null!;
        public DbSet<DesiredFeature> DesiredFeatures { get; set; } = null!;
        public DbSet<Document> Documents { get; set; } = null!;
        public DbSet<DocumentAttribute> DocumentAttributes { get; set; } = null!;
        public DbSet<DocumentType> DocumentTypes { get; set; } = null!;
        public DbSet<DocumentTypeAttr> DocumentTypeAttrs { get; set; } = null!;
        public DbSet<EftAccount> EftAccounts { get; set; } = null!;
        public DbSet<ElectronicText> ElectronicTexts { get; set; } = null!;
        public DbSet<EmailAddressVerification> EmailAddressVerifications { get; set; } = null!;
        public DbSet<EmailTemplateSetting> EmailTemplateSettings { get; set; } = null!;
        public DbSet<EmplLeave> EmplLeaves { get; set; } = null!;
        public DbSet<EmplLeaveReasonType> EmplLeaveReasonTypes { get; set; } = null!;
        public DbSet<EmplLeaveType> EmplLeaveTypes { get; set; } = null!;
        public DbSet<EmplPosition> EmplPositions { get; set; } = null!;
        public DbSet<EmplPositionClassType> EmplPositionClassTypes { get; set; } = null!;
        public DbSet<EmplPositionFulfillment> EmplPositionFulfillments { get; set; } = null!;
        public DbSet<EmplPositionReportingStruct> EmplPositionReportingStructs { get; set; } = null!;
        public DbSet<EmplPositionResponsibility> EmplPositionResponsibilities { get; set; } = null!;
        public DbSet<EmplPositionType> EmplPositionTypes { get; set; } = null!;
        public DbSet<EmplPositionTypeClass> EmplPositionTypeClasses { get; set; } = null!;
        public DbSet<EmplPositionTypeRateNew> EmplPositionTypeRateNews { get; set; } = null!;
        public DbSet<Employment> Employments { get; set; } = null!;
        public DbSet<EmploymentApp> EmploymentApps { get; set; } = null!;
        public DbSet<EmploymentAppSourceType> EmploymentAppSourceTypes { get; set; } = null!;
        public DbSet<EntityAuditLog> EntityAuditLogs { get; set; } = null!;
        public DbSet<EntityGroup> EntityGroups { get; set; } = null!;
        public DbSet<EntityGroupEntry> EntityGroupEntries { get; set; } = null!;
        public DbSet<EntityKeyStore> EntityKeyStores { get; set; } = null!;
        public DbSet<EntitySync> EntitySyncs { get; set; } = null!;
        public DbSet<EntitySyncHistory> EntitySyncHistories { get; set; } = null!;
        public DbSet<EntitySyncInclude> EntitySyncIncludes { get; set; } = null!;
        public DbSet<EntitySyncIncludeGroup> EntitySyncIncludeGroups { get; set; } = null!;
        public DbSet<EntitySyncRemove> EntitySyncRemoves { get; set; } = null!;
        public DbSet<Enumeration> Enumerations { get; set; } = null!;
        public DbSet<EnumerationType> EnumerationTypes { get; set; } = null!;
        public DbSet<Facility> Facilities { get; set; } = null!;
        public DbSet<FacilityAssocType> FacilityAssocTypes { get; set; } = null!;
        public DbSet<FacilityAttribute> FacilityAttributes { get; set; } = null!;
        public DbSet<FacilityCalendar> FacilityCalendars { get; set; } = null!;
        public DbSet<FacilityCalendarType> FacilityCalendarTypes { get; set; } = null!;
        public DbSet<FacilityCarrierShipment> FacilityCarrierShipments { get; set; } = null!;
        public DbSet<FacilityContactMech> FacilityContactMeches { get; set; } = null!;
        public DbSet<FacilityContactMechPurpose> FacilityContactMechPurposes { get; set; } = null!;
        public DbSet<FacilityContent> FacilityContents { get; set; } = null!;
        public DbSet<FacilityGroup> FacilityGroups { get; set; } = null!;
        public DbSet<FacilityGroupMember> FacilityGroupMembers { get; set; } = null!;
        public DbSet<FacilityGroupRole> FacilityGroupRoles { get; set; } = null!;
        public DbSet<FacilityGroupRollup> FacilityGroupRollups { get; set; } = null!;
        public DbSet<FacilityGroupType> FacilityGroupTypes { get; set; } = null!;
        public DbSet<FacilityLocation> FacilityLocations { get; set; } = null!;
        public DbSet<FacilityLocationGeoPoint> FacilityLocationGeoPoints { get; set; } = null!;
        public DbSet<FacilityParty> FacilityParties { get; set; } = null!;
        public DbSet<FacilityType> FacilityTypes { get; set; } = null!;
        public DbSet<FacilityTypeAttr> FacilityTypeAttrs { get; set; } = null!;
        public DbSet<FileExtension> FileExtensions { get; set; } = null!;
        public DbSet<FinAccount> FinAccounts { get; set; } = null!;
        public DbSet<FinAccountAttribute> FinAccountAttributes { get; set; } = null!;
        public DbSet<FinAccountAuth> FinAccountAuths { get; set; } = null!;
        public DbSet<FinAccountRole> FinAccountRoles { get; set; } = null!;
        public DbSet<FinAccountStatus> FinAccountStatuses { get; set; } = null!;
        public DbSet<FinAccountTran> FinAccountTrans { get; set; } = null!;
        public DbSet<FinAccountTransAttribute> FinAccountTransAttributes { get; set; } = null!;
        public DbSet<FinAccountTransType> FinAccountTransTypes { get; set; } = null!;
        public DbSet<FinAccountTransTypeAttr> FinAccountTransTypeAttrs { get; set; } = null!;
        public DbSet<FinAccountType> FinAccountTypes { get; set; } = null!;
        public DbSet<FinAccountTypeAttr> FinAccountTypeAttrs { get; set; } = null!;
        public DbSet<FinAccountTypeGlAccount> FinAccountTypeGlAccounts { get; set; } = null!;
        public DbSet<FixedAsset> FixedAssets { get; set; } = null!;
        public DbSet<FixedAssetAttribute> FixedAssetAttributes { get; set; } = null!;
        public DbSet<FixedAssetDepMethod> FixedAssetDepMethods { get; set; } = null!;
        public DbSet<FixedAssetGeoPoint> FixedAssetGeoPoints { get; set; } = null!;
        public DbSet<FixedAssetIdent> FixedAssetIdents { get; set; } = null!;
        public DbSet<FixedAssetIdentType> FixedAssetIdentTypes { get; set; } = null!;
        public DbSet<FixedAssetMaint> FixedAssetMaints { get; set; } = null!;
        public DbSet<FixedAssetMaintOrder> FixedAssetMaintOrders { get; set; } = null!;
        public DbSet<FixedAssetMeter> FixedAssetMeters { get; set; } = null!;
        public DbSet<FixedAssetProduct> FixedAssetProducts { get; set; } = null!;
        public DbSet<FixedAssetProductType> FixedAssetProductTypes { get; set; } = null!;
        public DbSet<FixedAssetRegistration> FixedAssetRegistrations { get; set; } = null!;
        public DbSet<FixedAssetStdCost> FixedAssetStdCosts { get; set; } = null!;
        public DbSet<FixedAssetStdCostType> FixedAssetStdCostTypes { get; set; } = null!;
        public DbSet<FixedAssetType> FixedAssetTypes { get; set; } = null!;
        public DbSet<FixedAssetTypeAttr> FixedAssetTypeAttrs { get; set; } = null!;
        public DbSet<FixedAssetTypeGlAccount> FixedAssetTypeGlAccounts { get; set; } = null!;
        public DbSet<FtpAddress> FtpAddresses { get; set; } = null!;
        public DbSet<Geo> Geos { get; set; } = null!;
        public DbSet<GeoAssoc> GeoAssocs { get; set; } = null!;
        public DbSet<GeoAssocType> GeoAssocTypes { get; set; } = null!;
        public DbSet<GeoPoint> GeoPoints { get; set; } = null!;
        public DbSet<GeoType> GeoTypes { get; set; } = null!;
        public DbSet<GiftCard> GiftCards { get; set; } = null!;
        public DbSet<GiftCardFulfillment> GiftCardFulfillments { get; set; } = null!;
        public DbSet<GlAccount> GlAccounts { get; set; } = null!;
        public DbSet<GlAccountCategory> GlAccountCategories { get; set; } = null!;
        public DbSet<GlAccountCategoryMember> GlAccountCategoryMembers { get; set; } = null!;
        public DbSet<GlAccountCategoryType> GlAccountCategoryTypes { get; set; } = null!;
        public DbSet<GlAccountClass> GlAccountClasses { get; set; } = null!;
        public DbSet<GlAccountGroup> GlAccountGroups { get; set; } = null!;
        public DbSet<GlAccountGroupMember> GlAccountGroupMembers { get; set; } = null!;
        public DbSet<GlAccountGroupType> GlAccountGroupTypes { get; set; } = null!;
        public DbSet<GlAccountHistory> GlAccountHistories { get; set; } = null!;
        public DbSet<GlAccountOrganization> GlAccountOrganizations { get; set; } = null!;
        public DbSet<GlAccountRole> GlAccountRoles { get; set; } = null!;
        public DbSet<GlAccountType> GlAccountTypes { get; set; } = null!;
        public DbSet<GlAccountTypeDefault> GlAccountTypeDefaults { get; set; } = null!;
        public DbSet<GlBudgetXref> GlBudgetXrefs { get; set; } = null!;
        public DbSet<GlFiscalType> GlFiscalTypes { get; set; } = null!;
        public DbSet<GlJournal> GlJournals { get; set; } = null!;
        public DbSet<GlReconciliation> GlReconciliations { get; set; } = null!;
        public DbSet<GlReconciliationEntry> GlReconciliationEntries { get; set; } = null!;
        public DbSet<GlResourceType> GlResourceTypes { get; set; } = null!;
        public DbSet<GlXbrlClass> GlXbrlClasses { get; set; } = null!;
        public DbSet<GoodIdentification> GoodIdentifications { get; set; } = null!;
        public DbSet<GoodIdentificationType> GoodIdentificationTypes { get; set; } = null!;
        public DbSet<ImageDataResource> ImageDataResources { get; set; } = null!;
        public DbSet<InventoryItem> InventoryItems { get; set; } = null!;
        public DbSet<InventoryItemAttribute> InventoryItemAttributes { get; set; } = null!;
        public DbSet<InventoryItemDetail> InventoryItemDetails { get; set; } = null!;
        public DbSet<InventoryItemLabel> InventoryItemLabels { get; set; } = null!;
        public DbSet<InventoryItemLabelAppl> InventoryItemLabelAppls { get; set; } = null!;
        public DbSet<InventoryItemLabelType> InventoryItemLabelTypes { get; set; } = null!;
        public DbSet<InventoryItemStatus> InventoryItemStatuses { get; set; } = null!;
        public DbSet<InventoryItemTempRe> InventoryItemTempRes { get; set; } = null!;
        public DbSet<InventoryItemType> InventoryItemTypes { get; set; } = null!;
        public DbSet<InventoryItemTypeAttr> InventoryItemTypeAttrs { get; set; } = null!;
        public DbSet<InventoryItemVariance> InventoryItemVariances { get; set; } = null!;
        public DbSet<InventoryTransfer> InventoryTransfers { get; set; } = null!;
        public DbSet<Invoice> Invoices { get; set; } = null!;
        public DbSet<InvoiceAttribute> InvoiceAttributes { get; set; } = null!;
        public DbSet<InvoiceContactMech> InvoiceContactMeches { get; set; } = null!;
        public DbSet<InvoiceContent> InvoiceContents { get; set; } = null!;
        public DbSet<InvoiceContentType> InvoiceContentTypes { get; set; } = null!;
        public DbSet<InvoiceItem> InvoiceItems { get; set; } = null!;
        public DbSet<InvoiceItemAssoc> InvoiceItemAssocs { get; set; } = null!;
        public DbSet<InvoiceItemAssocType> InvoiceItemAssocTypes { get; set; } = null!;
        public DbSet<InvoiceItemAttribute> InvoiceItemAttributes { get; set; } = null!;
        public DbSet<InvoiceItemType> InvoiceItemTypes { get; set; } = null!;
        public DbSet<InvoiceItemTypeAttr> InvoiceItemTypeAttrs { get; set; } = null!;
        public DbSet<InvoiceItemTypeGlAccount> InvoiceItemTypeGlAccounts { get; set; } = null!;
        public DbSet<InvoiceItemTypeMap> InvoiceItemTypeMaps { get; set; } = null!;
        public DbSet<InvoiceNote> InvoiceNotes { get; set; } = null!;
        public DbSet<InvoiceRole> InvoiceRoles { get; set; } = null!;
        public DbSet<InvoiceStatus> InvoiceStatuses { get; set; } = null!;
        public DbSet<InvoiceTerm> InvoiceTerms { get; set; } = null!;
        public DbSet<InvoiceTermAttribute> InvoiceTermAttributes { get; set; } = null!;
        public DbSet<InvoiceType> InvoiceTypes { get; set; } = null!;
        public DbSet<InvoiceTypeAttr> InvoiceTypeAttrs { get; set; } = null!;
        public DbSet<ItemIssuance> ItemIssuances { get; set; } = null!;
        public DbSet<ItemIssuanceRole> ItemIssuanceRoles { get; set; } = null!;
        public DbSet<JavaResource> JavaResources { get; set; } = null!;
        public DbSet<JobInterview> JobInterviews { get; set; } = null!;
        public DbSet<JobInterviewType> JobInterviewTypes { get; set; } = null!;
        public DbSet<JobManagerLock> JobManagerLocks { get; set; } = null!;
        public DbSet<JobRequisition> JobRequisitions { get; set; } = null!;
        public DbSet<JobSandbox> JobSandboxes { get; set; } = null!;
        public DbSet<KeywordThesauru> KeywordThesaurus { get; set; } = null!;
        public DbSet<Lot> Lots { get; set; } = null!;
        public DbSet<MarketInterest> MarketInterests { get; set; } = null!;
        public DbSet<MarketingCampaign> MarketingCampaigns { get; set; } = null!;
        public DbSet<MarketingCampaignNote> MarketingCampaignNotes { get; set; } = null!;
        public DbSet<MarketingCampaignPrice> MarketingCampaignPrices { get; set; } = null!;
        public DbSet<MarketingCampaignPromo> MarketingCampaignPromos { get; set; } = null!;
        public DbSet<MarketingCampaignRole> MarketingCampaignRoles { get; set; } = null!;
        public DbSet<MetaDataPredicate> MetaDataPredicates { get; set; } = null!;
        public DbSet<MimeType> MimeTypes { get; set; } = null!;
        public DbSet<MimeTypeHtmlTemplate> MimeTypeHtmlTemplates { get; set; } = null!;
        public DbSet<MrpEvent> MrpEvents { get; set; } = null!;
        public DbSet<MrpEventType> MrpEventTypes { get; set; } = null!;
        public DbSet<NeedType> NeedTypes { get; set; } = null!;
        public DbSet<NoteDatum> NoteData { get; set; } = null!;
        public DbSet<OrderAdjustment> OrderAdjustments { get; set; } = null!;
        public DbSet<OrderAdjustmentAttribute> OrderAdjustmentAttributes { get; set; } = null!;
        public DbSet<OrderAdjustmentBilling> OrderAdjustmentBillings { get; set; } = null!;
        public DbSet<OrderAdjustmentType> OrderAdjustmentTypes { get; set; } = null!;
        public DbSet<OrderAdjustmentTypeAttr> OrderAdjustmentTypeAttrs { get; set; } = null!;
        public DbSet<OrderAttribute> OrderAttributes { get; set; } = null!;
        public DbSet<OrderBlacklist> OrderBlacklists { get; set; } = null!;
        public DbSet<OrderBlacklistType> OrderBlacklistTypes { get; set; } = null!;
        public DbSet<OrderContactMech> OrderContactMeches { get; set; } = null!;
        public DbSet<OrderContent> OrderContents { get; set; } = null!;
        public DbSet<OrderContentType> OrderContentTypes { get; set; } = null!;
        public DbSet<OrderDeliverySchedule> OrderDeliverySchedules { get; set; } = null!;
        public DbSet<OrderDenylist> OrderDenylists { get; set; } = null!;
        public DbSet<OrderDenylistType> OrderDenylistTypes { get; set; } = null!;
        public DbSet<OrderHeader> OrderHeaders { get; set; } = null!;
        public DbSet<OrderHeaderNote> OrderHeaderNotes { get; set; } = null!;
        public DbSet<OrderHeaderWorkEffort> OrderHeaderWorkEfforts { get; set; } = null!;
        public DbSet<OrderItem> OrderItems { get; set; } = null!;
        public DbSet<OrderItemAssoc> OrderItemAssocs { get; set; } = null!;
        public DbSet<OrderItemAssocType> OrderItemAssocTypes { get; set; } = null!;
        public DbSet<OrderItemAttribute> OrderItemAttributes { get; set; } = null!;
        public DbSet<OrderItemBilling> OrderItemBillings { get; set; } = null!;
        public DbSet<OrderItemChange> OrderItemChanges { get; set; } = null!;
        public DbSet<OrderItemContactMech> OrderItemContactMeches { get; set; } = null!;
        public DbSet<OrderItemGroup> OrderItemGroups { get; set; } = null!;
        public DbSet<OrderItemGroupOrder> OrderItemGroupOrders { get; set; } = null!;
        public DbSet<OrderItemPriceInfo> OrderItemPriceInfos { get; set; } = null!;
        public DbSet<OrderItemRole> OrderItemRoles { get; set; } = null!;
        public DbSet<OrderItemShipGroup> OrderItemShipGroups { get; set; } = null!;
        public DbSet<OrderItemShipGroupAssoc> OrderItemShipGroupAssocs { get; set; } = null!;
        public DbSet<OrderItemShipGrpInvRes> OrderItemShipGrpInvRes { get; set; } = null!;
        public DbSet<OrderItemType> OrderItemTypes { get; set; } = null!;
        public DbSet<OrderItemTypeAttr> OrderItemTypeAttrs { get; set; } = null!;
        public DbSet<OrderNotification> OrderNotifications { get; set; } = null!;
        public DbSet<OrderPaymentPreference> OrderPaymentPreferences { get; set; } = null!;
        public DbSet<OrderProductPromoCode> OrderProductPromoCodes { get; set; } = null!;
        public DbSet<OrderRequirementCommitment> OrderRequirementCommitments { get; set; } = null!;
        public DbSet<OrderRole> OrderRoles { get; set; } = null!;
        public DbSet<OrderShipment> OrderShipments { get; set; } = null!;
        public DbSet<OrderStatus> OrderStatuses { get; set; } = null!;
        public DbSet<OrderSummaryEntry> OrderSummaryEntries { get; set; } = null!;
        public DbSet<OrderTerm> OrderTerms { get; set; } = null!;
        public DbSet<OrderTermAttribute> OrderTermAttributes { get; set; } = null!;
        public DbSet<OrderType> OrderTypes { get; set; } = null!;
        public DbSet<OrderTypeAttr> OrderTypeAttrs { get; set; } = null!;
        public DbSet<OtherDataResource> OtherDataResources { get; set; } = null!;
        public DbSet<Party> Parties { get; set; } = null!;
        public DbSet<PartyAcctgPreference> PartyAcctgPreferences { get; set; } = null!;
        public DbSet<PartyAttribute> PartyAttributes { get; set; } = null!;
        public DbSet<PartyBenefit> PartyBenefits { get; set; } = null!;
        public DbSet<PartyCarrierAccount> PartyCarrierAccounts { get; set; } = null!;
        public DbSet<PartyClassification> PartyClassifications { get; set; } = null!;
        public DbSet<PartyClassificationGroup> PartyClassificationGroups { get; set; } = null!;
        public DbSet<PartyClassificationType> PartyClassificationTypes { get; set; } = null!;
        public DbSet<PartyContactMech> PartyContactMeches { get; set; } = null!;
        public DbSet<PartyContactMechPurpose> PartyContactMechPurposes { get; set; } = null!;
        public DbSet<PartyContent> PartyContents { get; set; } = null!;
        public DbSet<PartyContentType> PartyContentTypes { get; set; } = null!;
        public DbSet<PartyDataSource> PartyDataSources { get; set; } = null!;
        public DbSet<PartyFixedAssetAssignment> PartyFixedAssetAssignments { get; set; } = null!;
        public DbSet<PartyGeoPoint> PartyGeoPoints { get; set; } = null!;
        public DbSet<PartyGlAccount> PartyGlAccounts { get; set; } = null!;
        public DbSet<PartyGroup> PartyGroups { get; set; } = null!;
        public DbSet<PartyIcsAvsOverride> PartyIcsAvsOverrides { get; set; } = null!;
        public DbSet<PartyIdentification> PartyIdentifications { get; set; } = null!;
        public DbSet<PartyIdentificationType> PartyIdentificationTypes { get; set; } = null!;
        public DbSet<PartyInvitation> PartyInvitations { get; set; } = null!;
        public DbSet<PartyInvitationGroupAssoc> PartyInvitationGroupAssocs { get; set; } = null!;
        public DbSet<PartyInvitationRoleAssoc> PartyInvitationRoleAssocs { get; set; } = null!;
        public DbSet<PartyNameHistory> PartyNameHistories { get; set; } = null!;
        public DbSet<PartyNeed> PartyNeeds { get; set; } = null!;
        public DbSet<PartyNote> PartyNotes { get; set; } = null!;
        public DbSet<PartyPrefDocTypeTpl> PartyPrefDocTypeTpls { get; set; } = null!;
        public DbSet<PartyProfileDefault> PartyProfileDefaults { get; set; } = null!;
        public DbSet<PartyQual> PartyQuals { get; set; } = null!;
        public DbSet<PartyQualType> PartyQualTypes { get; set; } = null!;
        public DbSet<PartyRateNew> PartyRateNews { get; set; } = null!;
        public DbSet<PartyRelationship> PartyRelationships { get; set; } = null!;
        public DbSet<PartyRelationshipType> PartyRelationshipTypes { get; set; } = null!;
        public DbSet<PartyResume> PartyResumes { get; set; } = null!;
        public DbSet<PartyRole> PartyRoles { get; set; } = null!;
        public DbSet<PartySkill> PartySkills { get; set; } = null!;
        public DbSet<PartyStatus> PartyStatuses { get; set; } = null!;
        public DbSet<PartyTaxAuthInfo> PartyTaxAuthInfos { get; set; } = null!;
        public DbSet<PartyType> PartyTypes { get; set; } = null!;
        public DbSet<PartyTypeAttr> PartyTypeAttrs { get; set; } = null!;
        public DbSet<PayGrade> PayGrades { get; set; } = null!;
        public DbSet<PayHistory> PayHistories { get; set; } = null!;
        public DbSet<PayPalPaymentMethod> PayPalPaymentMethods { get; set; } = null!;
        public DbSet<Payment> Payments { get; set; } = null!;
        public DbSet<PaymentApplication> PaymentApplications { get; set; } = null!;
        public DbSet<PaymentAttribute> PaymentAttributes { get; set; } = null!;
        public DbSet<PaymentBudgetAllocation> PaymentBudgetAllocations { get; set; } = null!;
        public DbSet<PaymentContent> PaymentContents { get; set; } = null!;
        public DbSet<PaymentContentType> PaymentContentTypes { get; set; } = null!;
        public DbSet<PaymentGatewayAuthorizeNet> PaymentGatewayAuthorizeNets { get; set; } = null!;
        public DbSet<PaymentGatewayClearCommerce> PaymentGatewayClearCommerces { get; set; } = null!;
        public DbSet<PaymentGatewayConfig> PaymentGatewayConfigs { get; set; } = null!;
        public DbSet<PaymentGatewayConfigType> PaymentGatewayConfigTypes { get; set; } = null!;
        public DbSet<PaymentGatewayCyberSource> PaymentGatewayCyberSources { get; set; } = null!;
        public DbSet<PaymentGatewayEway> PaymentGatewayEways { get; set; } = null!;
        public DbSet<PaymentGatewayOrbital> PaymentGatewayOrbitals { get; set; } = null!;
        public DbSet<PaymentGatewayPayPal> PaymentGatewayPayPals { get; set; } = null!;
        public DbSet<PaymentGatewayPayflowPro> PaymentGatewayPayflowPros { get; set; } = null!;
        public DbSet<PaymentGatewayRespMsg> PaymentGatewayRespMsgs { get; set; } = null!;
        public DbSet<PaymentGatewayResponse> PaymentGatewayResponses { get; set; } = null!;
        public DbSet<PaymentGatewaySagePay> PaymentGatewaySagePays { get; set; } = null!;
        public DbSet<PaymentGatewaySecurePay> PaymentGatewaySecurePays { get; set; } = null!;
        public DbSet<PaymentGatewayWorldPay> PaymentGatewayWorldPays { get; set; } = null!;
        public DbSet<PaymentGlAccountTypeMap> PaymentGlAccountTypeMaps { get; set; } = null!;
        public DbSet<PaymentGroup> PaymentGroups { get; set; } = null!;
        public DbSet<PaymentGroupMember> PaymentGroupMembers { get; set; } = null!;
        public DbSet<PaymentGroupType> PaymentGroupTypes { get; set; } = null!;
        public DbSet<PaymentMethod> PaymentMethods { get; set; } = null!;
        public DbSet<PaymentMethodType> PaymentMethodTypes { get; set; } = null!;
        public DbSet<PaymentMethodTypeGlAccount> PaymentMethodTypeGlAccounts { get; set; } = null!;
        public DbSet<PaymentType> PaymentTypes { get; set; } = null!;
        public DbSet<PaymentTypeAttr> PaymentTypeAttrs { get; set; } = null!;
        public DbSet<PayrollPreference> PayrollPreferences { get; set; } = null!;
        public DbSet<PerfRatingType> PerfRatingTypes { get; set; } = null!;
        public DbSet<PerfReview> PerfReviews { get; set; } = null!;
        public DbSet<PerfReviewItem> PerfReviewItems { get; set; } = null!;
        public DbSet<PerfReviewItemType> PerfReviewItemTypes { get; set; } = null!;
        public DbSet<PerformanceNote> PerformanceNotes { get; set; } = null!;
        public DbSet<PeriodType> PeriodTypes { get; set; } = null!;
        public DbSet<Person> Persons { get; set; } = null!;
        public DbSet<PersonTraining> PersonTrainings { get; set; } = null!;
        public DbSet<PhysicalInventory> PhysicalInventories { get; set; } = null!;
        public DbSet<Picklist> Picklists { get; set; } = null!;
        public DbSet<PicklistBin> PicklistBins { get; set; } = null!;
        public DbSet<PicklistItem> PicklistItems { get; set; } = null!;
        public DbSet<PicklistRole> PicklistRoles { get; set; } = null!;
        public DbSet<PicklistStatus> PicklistStatuses { get; set; } = null!;
        public DbSet<PicklistStatusHistory> PicklistStatusHistories { get; set; } = null!;
        public DbSet<PlatformType> PlatformTypes { get; set; } = null!;
        public DbSet<PortalPage> PortalPages { get; set; } = null!;
        public DbSet<PortalPageColumn> PortalPageColumns { get; set; } = null!;
        public DbSet<PortalPagePortlet> PortalPagePortlets { get; set; } = null!;
        public DbSet<PortalPortlet> PortalPortlets { get; set; } = null!;
        public DbSet<PortletAttribute> PortletAttributes { get; set; } = null!;
        public DbSet<PortletCategory> PortletCategories { get; set; } = null!;
        public DbSet<PortletPortletCategory> PortletPortletCategories { get; set; } = null!;
        public DbSet<PostalAddress> PostalAddresses { get; set; } = null!;
        public DbSet<PostalAddressBoundary> PostalAddressBoundaries { get; set; } = null!;
        public DbSet<PriorityType> PriorityTypes { get; set; } = null!;
        public DbSet<ProdCatalog> ProdCatalogs { get; set; } = null!;
        public DbSet<ProdCatalogCategory> ProdCatalogCategories { get; set; } = null!;
        public DbSet<ProdCatalogCategoryType> ProdCatalogCategoryTypes { get; set; } = null!;
        public DbSet<ProdCatalogInvFacility> ProdCatalogInvFacilities { get; set; } = null!;
        public DbSet<ProdCatalogRole> ProdCatalogRoles { get; set; } = null!;
        public DbSet<ProdConfItemContent> ProdConfItemContents { get; set; } = null!;
        public DbSet<ProdConfItemContentType> ProdConfItemContentTypes { get; set; } = null!;
        public DbSet<ProdPromoCodeContactMech> ProdPromoCodeContactMeches { get; set; } = null!;
        public DbSet<Product> Products { get; set; } = null!;
        public DbSet<ProductAssoc> ProductAssocs { get; set; } = null!;
        public DbSet<ProductAssocType> ProductAssocTypes { get; set; } = null!;
        public DbSet<ProductAttribute> ProductAttributes { get; set; } = null!;
        public DbSet<ProductAverageCost> ProductAverageCosts { get; set; } = null!;
        public DbSet<ProductAverageCostType> ProductAverageCostTypes { get; set; } = null!;
        public DbSet<ProductCalculatedInfo> ProductCalculatedInfos { get; set; } = null!;
        public DbSet<ProductCategory> ProductCategories { get; set; } = null!;
        public DbSet<ProductCategoryAttribute> ProductCategoryAttributes { get; set; } = null!;
        public DbSet<ProductCategoryContent> ProductCategoryContents { get; set; } = null!;
        public DbSet<ProductCategoryContentType> ProductCategoryContentTypes { get; set; } = null!;
        public DbSet<ProductCategoryGlAccount> ProductCategoryGlAccounts { get; set; } = null!;
        public DbSet<ProductCategoryLink> ProductCategoryLinks { get; set; } = null!;
        public DbSet<ProductCategoryMember> ProductCategoryMembers { get; set; } = null!;
        public DbSet<ProductCategoryRole> ProductCategoryRoles { get; set; } = null!;
        public DbSet<ProductCategoryRollup> ProductCategoryRollups { get; set; } = null!;
        public DbSet<ProductCategoryType> ProductCategoryTypes { get; set; } = null!;
        public DbSet<ProductCategoryTypeAttr> ProductCategoryTypeAttrs { get; set; } = null!;
        public DbSet<ProductConfig> ProductConfigs { get; set; } = null!;
        public DbSet<ProductConfigConfig> ProductConfigConfigs { get; set; } = null!;
        public DbSet<ProductConfigItem> ProductConfigItems { get; set; } = null!;
        public DbSet<ProductConfigOption> ProductConfigOptions { get; set; } = null!;
        public DbSet<ProductConfigOptionIactn> ProductConfigOptionIactns { get; set; } = null!;
        public DbSet<ProductConfigProduct> ProductConfigProducts { get; set; } = null!;
        public DbSet<ProductConfigStat> ProductConfigStats { get; set; } = null!;
        public DbSet<ProductContent> ProductContents { get; set; } = null!;
        public DbSet<ProductContentType> ProductContentTypes { get; set; } = null!;
        public DbSet<ProductCostComponentCalc> ProductCostComponentCalcs { get; set; } = null!;
        public DbSet<ProductFacility> ProductFacilities { get; set; } = null!;
        public DbSet<ProductFacilityAssoc> ProductFacilityAssocs { get; set; } = null!;
        public DbSet<ProductFacilityLocation> ProductFacilityLocations { get; set; } = null!;
        public DbSet<ProductFeature> ProductFeatures { get; set; } = null!;
        public DbSet<ProductFeatureAppl> ProductFeatureAppls { get; set; } = null!;
        public DbSet<ProductFeatureApplAttr> ProductFeatureApplAttrs { get; set; } = null!;
        public DbSet<ProductFeatureApplType> ProductFeatureApplTypes { get; set; } = null!;
        public DbSet<ProductFeatureCatGrpAppl> ProductFeatureCatGrpAppls { get; set; } = null!;
        public DbSet<ProductFeatureCategory> ProductFeatureCategories { get; set; } = null!;
        public DbSet<ProductFeatureCategoryAppl> ProductFeatureCategoryAppls { get; set; } = null!;
        public DbSet<ProductFeatureDataResource> ProductFeatureDataResources { get; set; } = null!;
        public DbSet<ProductFeatureGroup> ProductFeatureGroups { get; set; } = null!;
        public DbSet<ProductFeatureGroupAppl> ProductFeatureGroupAppls { get; set; } = null!;
        public DbSet<ProductFeatureIactn> ProductFeatureIactns { get; set; } = null!;
        public DbSet<ProductFeatureIactnType> ProductFeatureIactnTypes { get; set; } = null!;
        public DbSet<ProductFeaturePrice> ProductFeaturePrices { get; set; } = null!;
        public DbSet<ProductFeatureType> ProductFeatureTypes { get; set; } = null!;
        public DbSet<ProductGeo> ProductGeos { get; set; } = null!;
        public DbSet<ProductGlAccount> ProductGlAccounts { get; set; } = null!;
        public DbSet<ProductGroupOrder> ProductGroupOrders { get; set; } = null!;
        public DbSet<ProductKeywordNew> ProductKeywordNews { get; set; } = null!;
        public DbSet<ProductMaint> ProductMaints { get; set; } = null!;
        public DbSet<ProductMaintType> ProductMaintTypes { get; set; } = null!;
        public DbSet<ProductManufacturingRule> ProductManufacturingRules { get; set; } = null!;
        public DbSet<ProductMeter> ProductMeters { get; set; } = null!;
        public DbSet<ProductMeterType> ProductMeterTypes { get; set; } = null!;
        public DbSet<ProductOrderItem> ProductOrderItems { get; set; } = null!;
        public DbSet<ProductPaymentMethodType> ProductPaymentMethodTypes { get; set; } = null!;
        public DbSet<ProductPrice> ProductPrices { get; set; } = null!;
        public DbSet<ProductPriceAction> ProductPriceActions { get; set; } = null!;
        public DbSet<ProductPriceActionType> ProductPriceActionTypes { get; set; } = null!;
        public DbSet<ProductPriceAutoNotice> ProductPriceAutoNotices { get; set; } = null!;
        public DbSet<ProductPriceChange> ProductPriceChanges { get; set; } = null!;
        public DbSet<ProductPriceCond> ProductPriceConds { get; set; } = null!;
        public DbSet<ProductPricePurpose> ProductPricePurposes { get; set; } = null!;
        public DbSet<ProductPriceRule> ProductPriceRules { get; set; } = null!;
        public DbSet<ProductPriceType> ProductPriceTypes { get; set; } = null!;
        public DbSet<ProductPromo> ProductPromos { get; set; } = null!;
        public DbSet<ProductPromoAction> ProductPromoActions { get; set; } = null!;
        public DbSet<ProductPromoCategory> ProductPromoCategories { get; set; } = null!;
        public DbSet<ProductPromoCode> ProductPromoCodes { get; set; } = null!;
        public DbSet<ProductPromoCodeEmail> ProductPromoCodeEmails { get; set; } = null!;
        public DbSet<ProductPromoCodeParty> ProductPromoCodeParties { get; set; } = null!;
        public DbSet<ProductPromoCond> ProductPromoConds { get; set; } = null!;
        public DbSet<ProductPromoContent> ProductPromoContents { get; set; } = null!;
        public DbSet<ProductPromoProduct> ProductPromoProducts { get; set; } = null!;
        public DbSet<ProductPromoRule> ProductPromoRules { get; set; } = null!;
        public DbSet<ProductPromoUse> ProductPromoUses { get; set; } = null!;
        public DbSet<ProductReview> ProductReviews { get; set; } = null!;
        public DbSet<ProductRole> ProductRoles { get; set; } = null!;
        public DbSet<ProductSearchConstraint> ProductSearchConstraints { get; set; } = null!;
        public DbSet<ProductSearchResult> ProductSearchResults { get; set; } = null!;
        public DbSet<ProductStore> ProductStores { get; set; } = null!;
        public DbSet<ProductStoreCatalog> ProductStoreCatalogs { get; set; } = null!;
        public DbSet<ProductStoreEmailSetting> ProductStoreEmailSettings { get; set; } = null!;
        public DbSet<ProductStoreFacility> ProductStoreFacilities { get; set; } = null!;
        public DbSet<ProductStoreFinActSetting> ProductStoreFinActSettings { get; set; } = null!;
        public DbSet<ProductStoreGroup> ProductStoreGroups { get; set; } = null!;
        public DbSet<ProductStoreGroupMember> ProductStoreGroupMembers { get; set; } = null!;
        public DbSet<ProductStoreGroupRole> ProductStoreGroupRoles { get; set; } = null!;
        public DbSet<ProductStoreGroupRollup> ProductStoreGroupRollups { get; set; } = null!;
        public DbSet<ProductStoreGroupType> ProductStoreGroupTypes { get; set; } = null!;
        public DbSet<ProductStoreKeywordOvrd> ProductStoreKeywordOvrds { get; set; } = null!;
        public DbSet<ProductStorePaymentSetting> ProductStorePaymentSettings { get; set; } = null!;
        public DbSet<ProductStorePromoAppl> ProductStorePromoAppls { get; set; } = null!;
        public DbSet<ProductStoreRole> ProductStoreRoles { get; set; } = null!;
        public DbSet<ProductStoreShipmentMeth> ProductStoreShipmentMeths { get; set; } = null!;
        public DbSet<ProductStoreSurveyAppl> ProductStoreSurveyAppls { get; set; } = null!;
        public DbSet<ProductStoreTelecomSetting> ProductStoreTelecomSettings { get; set; } = null!;
        public DbSet<ProductStoreVendorPayment> ProductStoreVendorPayments { get; set; } = null!;
        public DbSet<ProductStoreVendorShipment> ProductStoreVendorShipments { get; set; } = null!;
        public DbSet<ProductSubscriptionResource> ProductSubscriptionResources { get; set; } = null!;
        public DbSet<ProductType> ProductTypes { get; set; } = null!;
        public DbSet<ProductTypeAttr> ProductTypeAttrs { get; set; } = null!;
        public DbSet<ProtectedView> ProtectedViews { get; set; } = null!;
        public DbSet<ProtocolType> ProtocolTypes { get; set; } = null!;
        public DbSet<QuantityBreak> QuantityBreaks { get; set; } = null!;
        public DbSet<QuantityBreakType> QuantityBreakTypes { get; set; } = null!;
        public DbSet<Quote> Quotes { get; set; } = null!;
        public DbSet<QuoteAdjustment> QuoteAdjustments { get; set; } = null!;
        public DbSet<QuoteAttribute> QuoteAttributes { get; set; } = null!;
        public DbSet<QuoteCoefficient> QuoteCoefficients { get; set; } = null!;
        public DbSet<QuoteItem> QuoteItems { get; set; } = null!;
        public DbSet<QuoteNote> QuoteNotes { get; set; } = null!;
        public DbSet<QuoteRole> QuoteRoles { get; set; } = null!;
        public DbSet<QuoteTerm> QuoteTerms { get; set; } = null!;
        public DbSet<QuoteTermAttribute> QuoteTermAttributes { get; set; } = null!;
        public DbSet<QuoteType> QuoteTypes { get; set; } = null!;
        public DbSet<QuoteTypeAttr> QuoteTypeAttrs { get; set; } = null!;
        public DbSet<QuoteWorkEffort> QuoteWorkEfforts { get; set; } = null!;
        public DbSet<RateAmount> RateAmounts { get; set; } = null!;
        public DbSet<RateType> RateTypes { get; set; } = null!;
        public DbSet<RecurrenceInfo> RecurrenceInfos { get; set; } = null!;
        public DbSet<RecurrenceRule> RecurrenceRules { get; set; } = null!;
        public DbSet<RejectionReason> RejectionReasons { get; set; } = null!;
        public DbSet<ReorderGuideline> ReorderGuidelines { get; set; } = null!;
        public DbSet<Requirement> Requirements { get; set; } = null!;
        public DbSet<RequirementAttribute> RequirementAttributes { get; set; } = null!;
        public DbSet<RequirementBudgetAllocation> RequirementBudgetAllocations { get; set; } = null!;
        public DbSet<RequirementCustRequest> RequirementCustRequests { get; set; } = null!;
        public DbSet<RequirementRole> RequirementRoles { get; set; } = null!;
        public DbSet<RequirementStatus> RequirementStatuses { get; set; } = null!;
        public DbSet<RequirementType> RequirementTypes { get; set; } = null!;
        public DbSet<RequirementTypeAttr> RequirementTypeAttrs { get; set; } = null!;
        public DbSet<RespondingParty> RespondingParties { get; set; } = null!;
        public DbSet<ResponsibilityType> ResponsibilityTypes { get; set; } = null!;
        public DbSet<ReturnAdjustment> ReturnAdjustments { get; set; } = null!;
        public DbSet<ReturnAdjustmentType> ReturnAdjustmentTypes { get; set; } = null!;
        public DbSet<ReturnContactMech> ReturnContactMeches { get; set; } = null!;
        public DbSet<ReturnHeader> ReturnHeaders { get; set; } = null!;
        public DbSet<ReturnHeaderType> ReturnHeaderTypes { get; set; } = null!;
        public DbSet<ReturnItem> ReturnItems { get; set; } = null!;
        public DbSet<ReturnItemBilling> ReturnItemBillings { get; set; } = null!;
        public DbSet<ReturnItemResponse> ReturnItemResponses { get; set; } = null!;
        public DbSet<ReturnItemShipment> ReturnItemShipments { get; set; } = null!;
        public DbSet<ReturnItemType> ReturnItemTypes { get; set; } = null!;
        public DbSet<ReturnItemTypeMap> ReturnItemTypeMaps { get; set; } = null!;
        public DbSet<ReturnReason> ReturnReasons { get; set; } = null!;
        public DbSet<ReturnStatus> ReturnStatuses { get; set; } = null!;
        public DbSet<ReturnType> ReturnTypes { get; set; } = null!;
        public DbSet<RoleType> RoleTypes { get; set; } = null!;
        public DbSet<RoleTypeAttr> RoleTypeAttrs { get; set; } = null!;
        public DbSet<RuntimeDatum> RuntimeData { get; set; } = null!;
        public DbSet<SalaryStepNew> SalaryStepNews { get; set; } = null!;
        public DbSet<SaleType> SaleTypes { get; set; } = null!;
        public DbSet<SalesForecast> SalesForecasts { get; set; } = null!;
        public DbSet<SalesForecastDetail> SalesForecastDetails { get; set; } = null!;
        public DbSet<SalesForecastHistory> SalesForecastHistories { get; set; } = null!;
        public DbSet<SalesOpportunity> SalesOpportunities { get; set; } = null!;
        public DbSet<SalesOpportunityCompetitor> SalesOpportunityCompetitors { get; set; } = null!;
        public DbSet<SalesOpportunityHistory> SalesOpportunityHistories { get; set; } = null!;
        public DbSet<SalesOpportunityQuote> SalesOpportunityQuotes { get; set; } = null!;
        public DbSet<SalesOpportunityRole> SalesOpportunityRoles { get; set; } = null!;
        public DbSet<SalesOpportunityStage> SalesOpportunityStages { get; set; } = null!;
        public DbSet<SalesOpportunityTrckCode> SalesOpportunityTrckCodes { get; set; } = null!;
        public DbSet<SalesOpportunityWorkEffort> SalesOpportunityWorkEfforts { get; set; } = null!;
        public DbSet<SecurityGroup> SecurityGroups { get; set; } = null!;
        public DbSet<SecurityGroupPermission> SecurityGroupPermissions { get; set; } = null!;
        public DbSet<SecurityPermission> SecurityPermissions { get; set; } = null!;
        public DbSet<SegmentGroup> SegmentGroups { get; set; } = null!;
        public DbSet<SegmentGroupClassification> SegmentGroupClassifications { get; set; } = null!;
        public DbSet<SegmentGroupGeo> SegmentGroupGeos { get; set; } = null!;
        public DbSet<SegmentGroupRole> SegmentGroupRoles { get; set; } = null!;
        public DbSet<SegmentGroupType> SegmentGroupTypes { get; set; } = null!;
        public DbSet<SequenceValueItem> SequenceValueItems { get; set; } = null!;
        public DbSet<ServerHit> ServerHits { get; set; } = null!;
        public DbSet<ServerHitBin> ServerHitBins { get; set; } = null!;
        public DbSet<ServerHitType> ServerHitTypes { get; set; } = null!;
        public DbSet<ServiceSemaphore> ServiceSemaphores { get; set; } = null!;
        public DbSet<ServiceSpecification> ServiceSpecifications { get; set; } = null!;
        public DbSet<ServiceRate> ServiceRates { get; set; } = null!;
        public DbSet<SettlementTerm> SettlementTerms { get; set; } = null!;
        public DbSet<Shipment> Shipments { get; set; } = null!;
        public DbSet<ShipmentAttribute> ShipmentAttributes { get; set; } = null!;
        public DbSet<ShipmentBoxType> ShipmentBoxTypes { get; set; } = null!;
        public DbSet<ShipmentContactMech> ShipmentContactMeches { get; set; } = null!;
        public DbSet<ShipmentContactMechType> ShipmentContactMechTypes { get; set; } = null!;
        public DbSet<ShipmentCostEstimate> ShipmentCostEstimates { get; set; } = null!;
        public DbSet<ShipmentGatewayConfig> ShipmentGatewayConfigs { get; set; } = null!;
        public DbSet<ShipmentGatewayConfigType> ShipmentGatewayConfigTypes { get; set; } = null!;
        public DbSet<ShipmentGatewayDhl> ShipmentGatewayDhls { get; set; } = null!;
        public DbSet<ShipmentGatewayFedex> ShipmentGatewayFedices { get; set; } = null!;
        public DbSet<ShipmentGatewayUp> ShipmentGatewayUps { get; set; } = null!;
        public DbSet<ShipmentGatewayUsp> ShipmentGatewayUsps { get; set; } = null!;
        public DbSet<ShipmentItem> ShipmentItems { get; set; } = null!;
        public DbSet<ShipmentItemBilling> ShipmentItemBillings { get; set; } = null!;
        public DbSet<ShipmentItemFeature> ShipmentItemFeatures { get; set; } = null!;
        public DbSet<ShipmentMethodType> ShipmentMethodTypes { get; set; } = null!;
        public DbSet<ShipmentPackage> ShipmentPackages { get; set; } = null!;
        public DbSet<ShipmentPackageContent> ShipmentPackageContents { get; set; } = null!;
        public DbSet<ShipmentPackageRouteSeg> ShipmentPackageRouteSegs { get; set; } = null!;
        public DbSet<ShipmentReceipt> ShipmentReceipts { get; set; } = null!;
        public DbSet<ShipmentReceiptRole> ShipmentReceiptRoles { get; set; } = null!;
        public DbSet<ShipmentRouteSegment> ShipmentRouteSegments { get; set; } = null!;
        public DbSet<ShipmentStatus> ShipmentStatuses { get; set; } = null!;
        public DbSet<ShipmentTimeEstimate> ShipmentTimeEstimates { get; set; } = null!;
        public DbSet<ShipmentType> ShipmentTypes { get; set; } = null!;
        public DbSet<ShipmentTypeAttr> ShipmentTypeAttrs { get; set; } = null!;
        public DbSet<ShippingDocument> ShippingDocuments { get; set; } = null!;
        public DbSet<ShoppingList> ShoppingLists { get; set; } = null!;
        public DbSet<ShoppingListItem> ShoppingListItems { get; set; } = null!;
        public DbSet<ShoppingListItemSurvey> ShoppingListItemSurveys { get; set; } = null!;
        public DbSet<ShoppingListType> ShoppingListTypes { get; set; } = null!;
        public DbSet<ShoppingListWorkEffort> ShoppingListWorkEfforts { get; set; } = null!;
        public DbSet<SkillType> SkillTypes { get; set; } = null!;
        public DbSet<StandardLanguage> StandardLanguages { get; set; } = null!;
        public DbSet<StatusItem> StatusItems { get; set; } = null!;
        public DbSet<StatusType> StatusTypes { get; set; } = null!;
        public DbSet<StatusValidChange> StatusValidChanges { get; set; } = null!;
        public DbSet<Subscription> Subscriptions { get; set; } = null!;
        public DbSet<SubscriptionActivity> SubscriptionActivities { get; set; } = null!;
        public DbSet<SubscriptionAttribute> SubscriptionAttributes { get; set; } = null!;
        public DbSet<SubscriptionCommEvent> SubscriptionCommEvents { get; set; } = null!;
        public DbSet<SubscriptionFulfillmentPiece> SubscriptionFulfillmentPieces { get; set; } = null!;
        public DbSet<SubscriptionResource> SubscriptionResources { get; set; } = null!;
        public DbSet<SubscriptionType> SubscriptionTypes { get; set; } = null!;
        public DbSet<SubscriptionTypeAttr> SubscriptionTypeAttrs { get; set; } = null!;
        public DbSet<SupplierPrefOrder> SupplierPrefOrders { get; set; } = null!;
        public DbSet<SupplierProduct> SupplierProducts { get; set; } = null!;
        public DbSet<SupplierProductFeature> SupplierProductFeatures { get; set; } = null!;
        public DbSet<SupplierRatingType> SupplierRatingTypes { get; set; } = null!;
        public DbSet<Survey> Surveys { get; set; } = null!;
        public DbSet<SurveyApplType> SurveyApplTypes { get; set; } = null!;
        public DbSet<SurveyMultiResp> SurveyMultiResps { get; set; } = null!;
        public DbSet<SurveyMultiRespColumn> SurveyMultiRespColumns { get; set; } = null!;
        public DbSet<SurveyPage> SurveyPages { get; set; } = null!;
        public DbSet<SurveyQuestion> SurveyQuestions { get; set; } = null!;
        public DbSet<SurveyQuestionAppl> SurveyQuestionAppls { get; set; } = null!;
        public DbSet<SurveyQuestionCategory> SurveyQuestionCategories { get; set; } = null!;
        public DbSet<SurveyQuestionOption> SurveyQuestionOptions { get; set; } = null!;
        public DbSet<SurveyQuestionType> SurveyQuestionTypes { get; set; } = null!;
        public DbSet<SurveyResponse> SurveyResponses { get; set; } = null!;
        public DbSet<SurveyResponseAnswer> SurveyResponseAnswers { get; set; } = null!;
        public DbSet<SurveyTrigger> SurveyTriggers { get; set; } = null!;
        public DbSet<SystemProperty> SystemProperties { get; set; } = null!;
        public DbSet<TarpittedLoginView> TarpittedLoginViews { get; set; } = null!;
        public DbSet<TaxAuthority> TaxAuthorities { get; set; } = null!;
        public DbSet<TaxAuthorityAssoc> TaxAuthorityAssocs { get; set; } = null!;
        public DbSet<TaxAuthorityAssocType> TaxAuthorityAssocTypes { get; set; } = null!;
        public DbSet<TaxAuthorityCategory> TaxAuthorityCategories { get; set; } = null!;
        public DbSet<TaxAuthorityGlAccount> TaxAuthorityGlAccounts { get; set; } = null!;
        public DbSet<TaxAuthorityRateProduct> TaxAuthorityRateProducts { get; set; } = null!;
        public DbSet<TaxAuthorityRateType> TaxAuthorityRateTypes { get; set; } = null!;
        public DbSet<TechDataCalendar> TechDataCalendars { get; set; } = null!;
        public DbSet<TechDataCalendarExcDay> TechDataCalendarExcDays { get; set; } = null!;
        public DbSet<TechDataCalendarExcWeek> TechDataCalendarExcWeeks { get; set; } = null!;
        public DbSet<TechDataCalendarWeek> TechDataCalendarWeeks { get; set; } = null!;
        public DbSet<TelecomGatewayConfig> TelecomGatewayConfigs { get; set; } = null!;
        public DbSet<TelecomMethodType> TelecomMethodTypes { get; set; } = null!;
        public DbSet<TelecomNumber> TelecomNumbers { get; set; } = null!;
        public DbSet<TemporalExpression> TemporalExpressions { get; set; } = null!;
        public DbSet<TemporalExpressionAssoc> TemporalExpressionAssocs { get; set; } = null!;
        public DbSet<Tenant> Tenants { get; set; } = null!;
        public DbSet<TenantComponent> TenantComponents { get; set; } = null!;
        public DbSet<TenantDataSource> TenantDataSources { get; set; } = null!;
        public DbSet<TenantDomainName> TenantDomainNames { get; set; } = null!;
        public DbSet<TenantKeyEncryptingKey> TenantKeyEncryptingKeys { get; set; } = null!;
        public DbSet<TermType> TermTypes { get; set; } = null!;
        public DbSet<TermTypeAttr> TermTypeAttrs { get; set; } = null!;
        public DbSet<TerminationReason> TerminationReasons { get; set; } = null!;
        public DbSet<TerminationType> TerminationTypes { get; set; } = null!;
        public DbSet<TestFieldType> TestFieldTypes { get; set; } = null!;
        public DbSet<Testing> Testings { get; set; } = null!;
        public DbSet<TestingCrypto> TestingCryptos { get; set; } = null!;
        public DbSet<TestingItem> TestingItems { get; set; } = null!;
        public DbSet<TestingNode> TestingNodes { get; set; } = null!;
        public DbSet<TestingNodeMember> TestingNodeMembers { get; set; } = null!;
        public DbSet<TestingRemoveAll> TestingRemoveAlls { get; set; } = null!;
        public DbSet<TestingStatus> TestingStatuses { get; set; } = null!;
        public DbSet<TestingSubtype> TestingSubtypes { get; set; } = null!;
        public DbSet<TestingType> TestingTypes { get; set; } = null!;
        public DbSet<TimeEntry> TimeEntries { get; set; } = null!;
        public DbSet<Timesheet> Timesheets { get; set; } = null!;
        public DbSet<TimesheetRole> TimesheetRoles { get; set; } = null!;
        public DbSet<TrackingCode> TrackingCodes { get; set; } = null!;
        public DbSet<TrackingCodeOrder> TrackingCodeOrders { get; set; } = null!;
        public DbSet<TrackingCodeOrderReturn> TrackingCodeOrderReturns { get; set; } = null!;
        public DbSet<TrackingCodeType> TrackingCodeTypes { get; set; } = null!;
        public DbSet<TrackingCodeVisit> TrackingCodeVisits { get; set; } = null!;
        public DbSet<TrainingClassType> TrainingClassTypes { get; set; } = null!;
        public DbSet<TrainingRequest> TrainingRequests { get; set; } = null!;
        public DbSet<UnemploymentClaim> UnemploymentClaims { get; set; } = null!;
        public DbSet<Uom> Uoms { get; set; } = null!;
        public DbSet<UomConversion> UomConversions { get; set; } = null!;
        public DbSet<UomConversionDated> UomConversionDateds { get; set; } = null!;
        public DbSet<UomGroup> UomGroups { get; set; } = null!;
        public DbSet<UomType> UomTypes { get; set; } = null!;
        public DbSet<UserAgent> UserAgents { get; set; } = null!;
        public DbSet<UserAgentMethodType> UserAgentMethodTypes { get; set; } = null!;
        public DbSet<UserAgentType> UserAgentTypes { get; set; } = null!;
        public DbSet<UserLogin> UserLogins { get; set; } = null!;
        public DbSet<UserLoginHistory> UserLoginHistories { get; set; } = null!;
        public DbSet<UserLoginPasswordHistory> UserLoginPasswordHistories { get; set; } = null!;
        public DbSet<UserLoginSecurityGroup> UserLoginSecurityGroups { get; set; } = null!;
        public DbSet<UserLoginSession> UserLoginSessions { get; set; } = null!;
        public DbSet<UserPrefGroupType> UserPrefGroupTypes { get; set; } = null!;
        public DbSet<UserPreference> UserPreferences { get; set; } = null!;
        public DbSet<ValidContactMechRole> ValidContactMechRoles { get; set; } = null!;
        public DbSet<ValidResponsibility> ValidResponsibilities { get; set; } = null!;
        public DbSet<ValueLinkKey> ValueLinkKeys { get; set; } = null!;
        public DbSet<VarianceReason> VarianceReasons { get; set; } = null!;
        public DbSet<VarianceReasonGlAccount> VarianceReasonGlAccounts { get; set; } = null!;
        public DbSet<Vendor> Vendors { get; set; } = null!;
        public DbSet<VendorProduct> VendorProducts { get; set; } = null!;
        public DbSet<Vehicle> Vehicles { get; set; } = null!;
        public DbSet<VehicleContent> VehicleContents { get; set; } = null!;
        public DbSet<VehicleAnnotation> VehicleAnnotations { get; set; }
        public DbSet<Annotation> Annotations { get; set; }
        public DbSet<VideoDataResource> VideoDataResources { get; set; } = null!;
        public DbSet<Visit> Visits { get; set; } = null!;
        public DbSet<Visitor> Visitors { get; set; } = null!;
        public DbSet<VisualTheme> VisualThemes { get; set; } = null!;
        public DbSet<VisualThemeResource> VisualThemeResources { get; set; } = null!;
        public DbSet<VisualThemeSet> VisualThemeSets { get; set; } = null!;
        public DbSet<WebAnalyticsConfig> WebAnalyticsConfigs { get; set; } = null!;
        public DbSet<WebAnalyticsType> WebAnalyticsTypes { get; set; } = null!;
        public DbSet<WebPage> WebPages { get; set; } = null!;
        public DbSet<WebPreferenceType> WebPreferenceTypes { get; set; } = null!;
        public DbSet<WebSite> WebSites { get; set; } = null!;
        public DbSet<WebSiteContactList> WebSiteContactLists { get; set; } = null!;
        public DbSet<WebSiteContent> WebSiteContents { get; set; } = null!;
        public DbSet<WebSiteContentType> WebSiteContentTypes { get; set; } = null!;
        public DbSet<WebSitePathAlias> WebSitePathAliases { get; set; } = null!;
        public DbSet<WebSitePublishPoint> WebSitePublishPoints { get; set; } = null!;
        public DbSet<WebSiteRole> WebSiteRoles { get; set; } = null!;
        public DbSet<WebUserPreference> WebUserPreferences { get; set; } = null!;
        public DbSet<WorkEffort> WorkEfforts { get; set; } = null!;
        public DbSet<WorkEffortAssoc> WorkEffortAssocs { get; set; } = null!;
        public DbSet<WorkEffortAssocAttribute> WorkEffortAssocAttributes { get; set; } = null!;
        public DbSet<WorkEffortAssocType> WorkEffortAssocTypes { get; set; } = null!;
        public DbSet<WorkEffortAssocTypeAttr> WorkEffortAssocTypeAttrs { get; set; } = null!;
        public DbSet<WorkEffortAttribute> WorkEffortAttributes { get; set; } = null!;
        public DbSet<WorkEffortBilling> WorkEffortBillings { get; set; } = null!;
        public DbSet<WorkEffortContactMechNew> WorkEffortContactMechNews { get; set; } = null!;
        public DbSet<WorkEffortContent> WorkEffortContents { get; set; } = null!;
        public DbSet<WorkEffortContentType> WorkEffortContentTypes { get; set; } = null!;
        public DbSet<WorkEffortCostCalc> WorkEffortCostCalcs { get; set; } = null!;
        public DbSet<WorkEffortDeliverableProd> WorkEffortDeliverableProds { get; set; } = null!;
        public DbSet<WorkEffortEventReminder> WorkEffortEventReminders { get; set; } = null!;
        public DbSet<WorkEffortFixedAssetAssign> WorkEffortFixedAssetAssigns { get; set; } = null!;
        public DbSet<WorkEffortFixedAssetStd> WorkEffortFixedAssetStds { get; set; } = null!;
        public DbSet<WorkEffortGoodStandard> WorkEffortGoodStandards { get; set; } = null!;
        public DbSet<WorkEffortGoodStandardType> WorkEffortGoodStandardTypes { get; set; } = null!;
        public DbSet<WorkEffortIcalDatum> WorkEffortIcalData { get; set; } = null!;
        public DbSet<WorkEffortInventoryAssign> WorkEffortInventoryAssigns { get; set; } = null!;
        public DbSet<WorkEffortInventoryProduced> WorkEffortInventoryProduceds { get; set; } = null!;
        public DbSet<WorkEffortKeyword> WorkEffortKeywords { get; set; } = null!;
        public DbSet<WorkEffortNote> WorkEffortNotes { get; set; } = null!;
        public DbSet<WorkEffortPartyAssignment> WorkEffortPartyAssignments { get; set; } = null!;
        public DbSet<WorkEffortPurposeType> WorkEffortPurposeTypes { get; set; } = null!;
        public DbSet<WorkEffortReview> WorkEffortReviews { get; set; } = null!;
        public DbSet<WorkEffortSearchConstraint> WorkEffortSearchConstraints { get; set; } = null!;
        public DbSet<WorkEffortSearchResult> WorkEffortSearchResults { get; set; } = null!;
        public DbSet<WorkEffortSkillStandard> WorkEffortSkillStandards { get; set; } = null!;
        public DbSet<WorkEffortStatus> WorkEffortStatuses { get; set; } = null!;
        public DbSet<WorkEffortSurveyAppl> WorkEffortSurveyAppls { get; set; } = null!;
        public DbSet<WorkEffortTransBox> WorkEffortTransBoxes { get; set; } = null!;
        public DbSet<WorkEffortType> WorkEffortTypes { get; set; } = null!;
        public DbSet<WorkEffortTypeAttr> WorkEffortTypeAttrs { get; set; } = null!;
        public DbSet<WorkOrderItemFulfillment> WorkOrderItemFulfillments { get; set; } = null!;
        public DbSet<WorkReqFulfType> WorkReqFulfTypes { get; set; } = null!;
        public DbSet<WorkRequirementFulfillment> WorkRequirementFulfillments { get; set; } = null!;
        public DbSet<X509IssuerProvision> X509IssuerProvisions { get; set; } = null!;
        public DbSet<ZipSalesRuleLookup> ZipSalesRuleLookups { get; set; } = null!;
        public DbSet<ZipSalesTaxLookup> ZipSalesTaxLookups { get; set; } = null!;

        

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
        
        base.OnModelCreating(modelBuilder);
        
            modelBuilder.Entity<ApplicationRole>()
                .HasData(
                    new ApplicationRole {Id = "1", Name = "Member", NormalizedName = "MEMBER"},
                    new ApplicationRole {Id = "2", Name = "Admin", NormalizedName = "ADMIN"},
                    new ApplicationRole {Id = "3", Name = "AddAdjustments", NormalizedName = "ADDADJUSTMENTS", PercentageAllowed = 2},
                    new ApplicationRole {Id = "4", Name = "AddDiscountAdjustment5", NormalizedName = "ADDDISCOUNTADJUSTMENT5", PercentageAllowed = 5},
                    new ApplicationRole {Id = "5", Name = "AddDiscountAdjustment10", NormalizedName = "ADDDISCOUNTADJUSTMENT10", PercentageAllowed = 10}
                );

            modelBuilder.Entity<AccommodationClass>(entity =>
            {
                entity.ToTable("ACCOMMODATION_CLASS");

                entity.HasIndex(e => e.CreatedTxStamp, "ACCMMDN_CLS_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ACCMMDN_CLS_TXSTMP");

                entity.HasIndex(e => e.ParentClassId, "ACCOMM_CLASS_PAR");

                entity.Property(e => e.AccommodationClassId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACCOMMODATION_CLASS_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentClassId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_CLASS_ID");

                entity.HasOne(d => d.ParentClass)
                    .WithMany(p => p.InverseParentClass)
                    .HasForeignKey(d => d.ParentClassId)
                    .HasConstraintName("ACCOMM_CLASS_PAR");
            });

            modelBuilder.Entity<AccommodationMap>(entity =>
            {
                entity.ToTable("ACCOMMODATION_MAP");

                entity.HasIndex(e => e.CreatedTxStamp, "ACCMMDTN_MP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ACCMMDTN_MP_TXSTMP");

                entity.HasIndex(e => e.AccommodationClassId, "ACMD_MAP_CLASS");

                entity.HasIndex(e => e.FixedAssetId, "ACMD_MAP_FA");

                entity.HasIndex(e => e.AccommodationMapTypeId, "ACMD_MAP_TYPE");

                entity.Property(e => e.AccommodationMapId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACCOMMODATION_MAP_ID");

                entity.Property(e => e.AccommodationClassId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACCOMMODATION_CLASS_ID");

                entity.Property(e => e.AccommodationMapTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACCOMMODATION_MAP_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.FixedAssetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.NumberOfSpaces).HasColumnName("NUMBER_OF_SPACES");

                entity.HasOne(d => d.AccommodationClass)
                    .WithMany(p => p.AccommodationMaps)
                    .HasForeignKey(d => d.AccommodationClassId)
                    .HasConstraintName("ACMD_MAP_CLASS");

                entity.HasOne(d => d.AccommodationMapType)
                    .WithMany(p => p.AccommodationMaps)
                    .HasForeignKey(d => d.AccommodationMapTypeId)
                    .HasConstraintName("ACMD_MAP_TYPE");

                entity.HasOne(d => d.FixedAsset)
                    .WithMany(p => p.AccommodationMaps)
                    .HasForeignKey(d => d.FixedAssetId)
                    .HasConstraintName("ACMD_MAP_FA");
            });

            modelBuilder.Entity<AccommodationMapType>(entity =>
            {
                entity.ToTable("ACCOMMODATION_MAP_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "ACCMMN_MP_TP_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ACCMMN_MP_TP_TXSTP");

                entity.Property(e => e.AccommodationMapTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACCOMMODATION_MAP_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<AccommodationSpot>(entity =>
            {
                entity.ToTable("ACCOMMODATION_SPOT");

                entity.HasIndex(e => e.CreatedTxStamp, "ACCMMDN_SPT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ACCMMDN_SPT_TXSTMP");

                entity.HasIndex(e => e.AccommodationClassId, "ACCOM_CLASS");

                entity.HasIndex(e => e.FixedAssetId, "SPOT_FA");

                entity.Property(e => e.AccommodationSpotId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACCOMMODATION_SPOT_ID");

                entity.Property(e => e.AccommodationClassId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACCOMMODATION_CLASS_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.FixedAssetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.NumberOfSpaces).HasColumnName("NUMBER_OF_SPACES");

                entity.HasOne(d => d.AccommodationClass)
                    .WithMany(p => p.AccommodationSpots)
                    .HasForeignKey(d => d.AccommodationClassId)
                    .HasConstraintName("ACCOM_CLASS");

                entity.HasOne(d => d.FixedAsset)
                    .WithMany(p => p.AccommodationSpots)
                    .HasForeignKey(d => d.FixedAssetId)
                    .HasConstraintName("SPOT_FA");
            });

            modelBuilder.Entity<AcctgTran>(entity =>
            {
                entity.HasKey(e => e.AcctgTransId);

                entity.ToTable("ACCTG_TRANS");

                entity.HasIndex(e => e.CreatedTxStamp, "ACCTG_TRANS_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ACCTG_TRANS_TXSTMP");

                entity.HasIndex(e => e.FixedAssetId, "ACCTTX_FASSET");

                entity.HasIndex(e => e.FinAccountTransId, "ACCTTX_FNACTTR");

                entity.HasIndex(e => e.GlFiscalTypeId, "ACCTTX_GLFST");

                entity.HasIndex(e => e.GlJournalId, "ACCTTX_GLJRNL");

                entity.HasIndex(e => e.GroupStatusId, "ACCTTX_GRPSTTS");

                entity.HasIndex(e => e.InventoryItemId, "ACCTTX_INVITEM");

                entity.HasIndex(e => new { e.InventoryItemId, e.PhysicalInventoryId }, "ACCTTX_INVITEMVAR");

                entity.HasIndex(e => e.InvoiceId, "ACCTTX_INVOICE");

                entity.HasIndex(e => e.PartyId, "ACCTTX_PARTY");

                entity.HasIndex(e => e.PaymentId, "ACCTTX_PAYMENT");

                entity.HasIndex(e => e.PhysicalInventoryId, "ACCTTX_PHS_INV");

                entity.HasIndex(e => e.RoleTypeId, "ACCTTX_ROLETYP");

                entity.HasIndex(e => e.ShipmentId, "ACCTTX_SHIPMENT");

                entity.HasIndex(e => e.ReceiptId, "ACCTTX_SHIPRCPT");

                entity.HasIndex(e => e.AcctgTransTypeId, "ACCTTX_TYPE");

                entity.HasIndex(e => e.WorkEffortId, "ACCTTX_WEFF");

                entity.Property(e => e.AcctgTransId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACCTG_TRANS_ID");

                entity.Property(e => e.AcctgTransTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACCTG_TRANS_TYPE_ID");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.FinAccountTransId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_TRANS_ID");

                entity.Property(e => e.FixedAssetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_ID");

                entity.Property(e => e.GlFiscalTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_FISCAL_TYPE_ID");

                entity.Property(e => e.GlJournalId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_JOURNAL_ID");

                entity.Property(e => e.GroupStatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_STATUS_ID");

                entity.Property(e => e.InventoryItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_ID");

                entity.Property(e => e.InvoiceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ID");

                entity.Property(e => e.IsPosted)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_POSTED")
                    .IsFixedLength();

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.PaymentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_ID");

                entity.Property(e => e.PhysicalInventoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PHYSICAL_INVENTORY_ID");

                entity.Property(e => e.PostedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("POSTED_DATE");

                entity.Property(e => e.ReceiptId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RECEIPT_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.ScheduledPostingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SCHEDULED_POSTING_DATE");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ID");

                entity.Property(e => e.TheirAcctgTransId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("THEIR_ACCTG_TRANS_ID");

                entity.Property(e => e.TransactionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANSACTION_DATE");

                entity.Property(e => e.VoucherDate)
                    .HasColumnType("datetime")
                    .HasColumnName("VOUCHER_DATE");

                entity.Property(e => e.VoucherRef)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("VOUCHER_REF");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.HasOne(d => d.AcctgTransType)
                    .WithMany(p => p.AcctgTrans)
                    .HasForeignKey(d => d.AcctgTransTypeId)
                    .HasConstraintName("ACCTTX_TYPE");

                entity.HasOne(d => d.FinAccountTrans)
                    .WithMany(p => p.AcctgTrans)
                    .HasForeignKey(d => d.FinAccountTransId)
                    .HasConstraintName("ACCTTX_FNACTTR");

                entity.HasOne(d => d.FixedAsset)
                    .WithMany(p => p.AcctgTrans)
                    .HasForeignKey(d => d.FixedAssetId)
                    .HasConstraintName("ACCTTX_FASSET");

                entity.HasOne(d => d.GlFiscalType)
                    .WithMany(p => p.AcctgTrans)
                    .HasForeignKey(d => d.GlFiscalTypeId)
                    .HasConstraintName("ACCTTX_GLFST");

                entity.HasOne(d => d.GlJournal)
                    .WithMany(p => p.AcctgTrans)
                    .HasForeignKey(d => d.GlJournalId)
                    .HasConstraintName("ACCTTX_GLJRNL");

                entity.HasOne(d => d.GroupStatus)
                    .WithMany(p => p.AcctgTrans)
                    .HasForeignKey(d => d.GroupStatusId)
                    .HasConstraintName("ACCTTX_GRPSTTS");

                entity.HasOne(d => d.InventoryItem)
                    .WithMany(p => p.AcctgTrans)
                    .HasForeignKey(d => d.InventoryItemId)
                    .HasConstraintName("ACCTTX_INVITEM");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.AcctgTrans)
                    .HasForeignKey(d => d.InvoiceId)
                    .HasConstraintName("ACCTTX_INVOICE");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.AcctgTrans)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("ACCTTX_PARTY");

                entity.HasOne(d => d.Payment)
                    .WithMany(p => p.AcctgTrans)
                    .HasForeignKey(d => d.PaymentId)
                    .HasConstraintName("ACCTTX_PAYMENT");

                entity.HasOne(d => d.PhysicalInventory)
                    .WithMany(p => p.AcctgTrans)
                    .HasForeignKey(d => d.PhysicalInventoryId)
                    .HasConstraintName("ACCTTX_PHS_INV");

                entity.HasOne(d => d.Receipt)
                    .WithMany(p => p.AcctgTrans)
                    .HasForeignKey(d => d.ReceiptId)
                    .HasConstraintName("ACCTTX_SHIPRCPT");

                entity.HasOne(d => d.RoleType)
                    .WithMany(p => p.AcctgTrans)
                    .HasForeignKey(d => d.RoleTypeId)
                    .HasConstraintName("ACCTTX_ROLETYP");

                entity.HasOne(d => d.Shipment)
                    .WithMany(p => p.AcctgTrans)
                    .HasForeignKey(d => d.ShipmentId)
                    .HasConstraintName("ACCTTX_SHIPMENT");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.AcctgTrans)
                    .HasForeignKey(d => d.WorkEffortId)
                    .HasConstraintName("ACCTTX_WEFF");

                entity.HasOne(d => d.InventoryItemVariance)
                    .WithMany(p => p.AcctgTrans)
                    .HasForeignKey(d => new { d.InventoryItemId, d.PhysicalInventoryId })
                    .HasConstraintName("ACCTTX_INVITEMVAR");
            });

            modelBuilder.Entity<AcctgTransAttribute>(entity =>
            {
                entity.HasKey(e => new { e.AcctgTransId, e.AttrName });

                entity.ToTable("ACCTG_TRANS_ATTRIBUTE");

                entity.HasIndex(e => e.AcctgTransId, "ACCTTX_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "ACG_TRS_ATTT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ACG_TRS_ATTT_TXSTP");

                entity.Property(e => e.AcctgTransId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACCTG_TRANS_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.AcctgTrans)
                    .WithMany(p => p.AcctgTransAttributes)
                    .HasForeignKey(d => d.AcctgTransId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ACCTTX_ATTR");
            });

            modelBuilder.Entity<AcctgTransEntry>(entity =>
            {
                entity.HasKey(e => new { e.AcctgTransId, e.AcctgTransEntrySeqId });

                entity.ToTable("ACCTG_TRANS_ENTRY");

                entity.HasIndex(e => e.CreatedTxStamp, "ACCG_TRS_ENR_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ACCG_TRS_ENR_TXSTP");

                entity.HasIndex(e => e.AcctgTransId, "ACCTTXENT_ACTX");

                entity.HasIndex(e => e.AcctgTransEntryTypeId, "ACCTTXENT_ATET");

                entity.HasIndex(e => e.CurrencyUomId, "ACCTTXENT_CURNCY");

                entity.HasIndex(e => new { e.GlAccountId, e.OrganizationPartyId }, "ACCTTXENT_GLACOG");

                entity.HasIndex(e => e.GlAccountId, "ACCTTXENT_GLACT");

                entity.HasIndex(e => e.GlAccountTypeId, "ACCTTXENT_GLACTT");

                entity.HasIndex(e => e.InventoryItemId, "ACCTTXENT_INVITEM");

                entity.HasIndex(e => e.OrigCurrencyUomId, "ACCTTXENT_OCURNCY");

                entity.HasIndex(e => e.PartyId, "ACCTTXENT_PARTY");

                entity.HasIndex(e => e.ReconcileStatusId, "ACCTTXENT_RCSTS");

                entity.HasIndex(e => e.RoleTypeId, "ACCTTXENT_RLTYP");

                entity.HasIndex(e => e.SettlementTermId, "ACCTTXENT_STLEN");

                entity.Property(e => e.AcctgTransId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACCTG_TRANS_ID");

                entity.Property(e => e.AcctgTransEntrySeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACCTG_TRANS_ENTRY_SEQ_ID");

                entity.Property(e => e.AcctgTransEntryTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACCTG_TRANS_ENTRY_TYPE_ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM_ID");

                entity.Property(e => e.DebitCreditFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DEBIT_CREDIT_FLAG")
                    .IsFixedLength();

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DUE_DATE");

                entity.Property(e => e.GlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_ID");

                entity.Property(e => e.GlAccountTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_TYPE_ID");

                entity.Property(e => e.GroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_ID");

                entity.Property(e => e.InventoryItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_ID");

                entity.Property(e => e.IsSummary)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SUMMARY")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OrganizationPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_PARTY_ID");

                entity.Property(e => e.OrigAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ORIG_AMOUNT");

                entity.Property(e => e.OrigCurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORIG_CURRENCY_UOM_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.ReconcileStatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RECONCILE_STATUS_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.SettlementTermId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SETTLEMENT_TERM_ID");

                entity.Property(e => e.TaxId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_ID");

                entity.Property(e => e.TheirPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("THEIR_PARTY_ID");

                entity.Property(e => e.TheirProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("THEIR_PRODUCT_ID");

                entity.Property(e => e.VoucherRef)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("VOUCHER_REF");

                entity.HasOne(d => d.AcctgTransEntryType)
                    .WithMany(p => p.AcctgTransEntries)
                    .HasForeignKey(d => d.AcctgTransEntryTypeId)
                    .HasConstraintName("ACCTTXENT_ATET");

                entity.HasOne(d => d.AcctgTrans)
                    .WithMany(p => p.AcctgTransEntries)
                    .HasForeignKey(d => d.AcctgTransId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ACCTTXENT_ACTX");

                entity.HasOne(d => d.CurrencyUom)
                    .WithMany(p => p.AcctgTransEntryCurrencyUoms)
                    .HasForeignKey(d => d.CurrencyUomId)
                    .HasConstraintName("ACCTTXENT_CURNCY");

                entity.HasOne(d => d.GlAccount)
                    .WithMany(p => p.AcctgTransEntries)
                    .HasForeignKey(d => d.GlAccountId)
                    .HasConstraintName("ACCTTXENT_GLACT");

                entity.HasOne(d => d.GlAccountType)
                    .WithMany(p => p.AcctgTransEntries)
                    .HasForeignKey(d => d.GlAccountTypeId)
                    .HasConstraintName("ACCTTXENT_GLACTT");

                entity.HasOne(d => d.InventoryItem)
                    .WithMany(p => p.AcctgTransEntries)
                    .HasForeignKey(d => d.InventoryItemId)
                    .HasConstraintName("ACCTTXENT_INVITEM");

                entity.HasOne(d => d.OrigCurrencyUom)
                    .WithMany(p => p.AcctgTransEntryOrigCurrencyUoms)
                    .HasForeignKey(d => d.OrigCurrencyUomId)
                    .HasConstraintName("ACCTTXENT_OCURNCY");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.AcctgTransEntries)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("ACCTTXENT_PARTY");

                entity.HasOne(d => d.ReconcileStatus)
                    .WithMany(p => p.AcctgTransEntries)
                    .HasForeignKey(d => d.ReconcileStatusId)
                    .HasConstraintName("ACCTTXENT_RCSTS");

                entity.HasOne(d => d.RoleType)
                    .WithMany(p => p.AcctgTransEntries)
                    .HasForeignKey(d => d.RoleTypeId)
                    .HasConstraintName("ACCTTXENT_RLTYP");

                entity.HasOne(d => d.SettlementTerm)
                    .WithMany(p => p.AcctgTransEntries)
                    .HasForeignKey(d => d.SettlementTermId)
                    .HasConstraintName("ACCTTXENT_STLEN");

                entity.HasOne(d => d.GlAccountOrganization)
                    .WithMany(p => p.AcctgTransEntries)
                    .HasForeignKey(d => new { d.GlAccountId, d.OrganizationPartyId })
                    .HasConstraintName("ACCTTXENT_GLACOG");
            });

            modelBuilder.Entity<AcctgTransEntryType>(entity =>
            {
                entity.ToTable("ACCTG_TRANS_ENTRY_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "ACCTTXE_TYPE_PAR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ACG_TRS_ENR_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "ACG_TRS_ENR_TP_TXS");

                entity.Property(e => e.AcctgTransEntryTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACCTG_TRANS_ENTRY_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("ACCTTXE_TYPE_PAR");
            });

            modelBuilder.Entity<AcctgTransType>(entity =>
            {
                entity.ToTable("ACCTG_TRANS_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "ACCG_TRS_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ACCG_TRS_TP_TXSTMP");

                entity.HasIndex(e => e.ParentTypeId, "ACCTTX_TYPE_PAR");

                entity.Property(e => e.AcctgTransTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACCTG_TRANS_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("ACCTTX_TYPE_PAR");
            });

            modelBuilder.Entity<AcctgTransTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.AcctgTransTypeId, e.AttrName });

                entity.ToTable("ACCTG_TRANS_TYPE_ATTR");

                entity.HasIndex(e => e.AcctgTransTypeId, "ACCTTX_TYPE_ATTR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ACG_TRS_TP_ATR_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "ACG_TRS_TP_ATR_TXS");

                entity.Property(e => e.AcctgTransTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACCTG_TRANS_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.AcctgTransType)
                    .WithMany(p => p.AcctgTransTypeAttrs)
                    .HasForeignKey(d => d.AcctgTransTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ACCTTX_TYPE_ATTR");
            });

            modelBuilder.Entity<Addendum>(entity =>
            {
                entity.ToTable("ADDENDUM");

                entity.HasIndex(e => e.CreatedTxStamp, "ADDENDUM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ADDENDUM_TXSTMP");

                entity.HasIndex(e => e.AgreementId, "ADDNDM_AGRMNT");

                entity.HasIndex(e => new { e.AgreementId, e.AgreementItemSeqId }, "ADDNDM_AGRMNT_ITM");

                entity.Property(e => e.AddendumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ADDENDUM_ID");

                entity.Property(e => e.AddendumCreationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADDENDUM_CREATION_DATE");

                entity.Property(e => e.AddendumEffectiveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADDENDUM_EFFECTIVE_DATE");

                entity.Property(e => e.AddendumText)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ADDENDUM_TEXT");

                entity.Property(e => e.AgreementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ID");

                entity.Property(e => e.AgreementItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Agreement)
                    .WithMany(p => p.Addenda)
                    .HasForeignKey(d => d.AgreementId)
                    .HasConstraintName("ADDNDM_AGRMNT");

                entity.HasOne(d => d.AgreementI)
                    .WithMany(p => p.Addenda)
                    .HasForeignKey(d => new { d.AgreementId, d.AgreementItemSeqId })
                    .HasConstraintName("ADDNDM_AGRMNT_ITM");
            });

            modelBuilder.Entity<AddressMatchMap>(entity =>
            {
                entity.HasKey(e => new { e.MapKey, e.MapValue });

                entity.ToTable("ADDRESS_MATCH_MAP");

                entity.HasIndex(e => e.CreatedTxStamp, "ADDRS_MTH_MP_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ADDRS_MTH_MP_TXSTP");

                entity.Property(e => e.MapKey)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("MAP_KEY");

                entity.Property(e => e.MapValue)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("MAP_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");
            });

            modelBuilder.Entity<Affiliate>(entity =>
            {
                entity.HasKey(e => e.PartyId);

                entity.ToTable("AFFILIATE");

                entity.HasIndex(e => e.PartyId, "AFFILIATE_PARTY");

                entity.HasIndex(e => e.PartyId, "AFFILIATE_PGRP");

                entity.HasIndex(e => e.CreatedTxStamp, "AFFILIATE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "AFFILIATE_TXSTMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.AffiliateDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("AFFILIATE_DESCRIPTION");

                entity.Property(e => e.AffiliateName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AFFILIATE_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DateTimeApproved)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_TIME_APPROVED");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_TIME_CREATED");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SitePageViews)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SITE_PAGE_VIEWS");

                entity.Property(e => e.SiteType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SITE_TYPE");

                entity.Property(e => e.SiteVisitors)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SITE_VISITORS");

                entity.Property(e => e.YearEstablished)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_ESTABLISHED");

                entity.HasOne(d => d.Party)
                    .WithOne(p => p.Affiliate)
                    .HasForeignKey<Affiliate>(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AFFILIATE_PARTY");

                entity.HasOne(d => d.PartyNavigation)
                    .WithOne(p => p.Affiliate)
                    .HasForeignKey<Affiliate>(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AFFILIATE_PGRP");
            });

            modelBuilder.Entity<Agreement>(entity =>
            {
                entity.ToTable("AGREEMENT");

                entity.HasIndex(e => e.CreatedTxStamp, "AGREEMENT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "AGREEMENT_TXSTMP");

                entity.HasIndex(e => new { e.PartyIdFrom, e.RoleTypeIdFrom }, "AGRMNT_FPRTYRLE");

                entity.HasIndex(e => e.ProductId, "AGRMNT_PRODUCT");

                entity.HasIndex(e => new { e.PartyIdTo, e.RoleTypeIdTo }, "AGRMNT_TPRTYRLE");

                entity.HasIndex(e => e.AgreementTypeId, "AGRMNT_TYPE");

                entity.Property(e => e.AgreementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ID");

                entity.Property(e => e.AgreementDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AGREEMENT_DATE");

                entity.Property(e => e.AgreementTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PartyIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID_FROM");

                entity.Property(e => e.PartyIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID_TO");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.RoleTypeIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID_FROM");

                entity.Property(e => e.RoleTypeIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID_TO");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.TextData)
                    .HasColumnType("text")
                    .HasColumnName("TEXT_DATA");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.AgreementType)
                    .WithMany(p => p.Agreements)
                    .HasForeignKey(d => d.AgreementTypeId)
                    .HasConstraintName("AGRMNT_TYPE");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Agreements)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("AGRMNT_PRODUCT");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.AgreementPartyRoles)
                    .HasForeignKey(d => new { d.PartyIdFrom, d.RoleTypeIdFrom })
                    .HasConstraintName("AGRMNT_FPRTYRLE");

                entity.HasOne(d => d.PartyRoleNavigation)
                    .WithMany(p => p.AgreementPartyRoleNavigations)
                    .HasForeignKey(d => new { d.PartyIdTo, d.RoleTypeIdTo })
                    .HasConstraintName("AGRMNT_TPRTYRLE");
            });

            modelBuilder.Entity<AgreementAttribute>(entity =>
            {
                entity.HasKey(e => new { e.AgreementId, e.AttrName });

                entity.ToTable("AGREEMENT_ATTRIBUTE");

                entity.HasIndex(e => e.AgreementId, "AGRMNT_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "AGRMT_ATTRT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "AGRMT_ATTRT_TXSTMP");

                entity.Property(e => e.AgreementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Agreement)
                    .WithMany(p => p.AgreementAttributes)
                    .HasForeignKey(d => d.AgreementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_ATTR");
            });

            modelBuilder.Entity<AgreementContent>(entity =>
            {
                entity.HasKey(e => new { e.ContentId, e.AgreementId, e.AgreementItemSeqId, e.AgreementContentTypeId, e.FromDate });

                entity.ToTable("AGREEMENT_CONTENT");

                entity.HasIndex(e => e.CreatedTxStamp, "AGRMNT_CNTT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "AGRMNT_CNTT_TXSTMP");

                entity.HasIndex(e => e.ContentId, "AG_CNT_CNT");

                entity.HasIndex(e => e.AgreementId, "AG_CNT_PROD");

                entity.HasIndex(e => e.AgreementContentTypeId, "AG_CNT_TYPE");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.AgreementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ID");

                entity.Property(e => e.AgreementItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                entity.Property(e => e.AgreementContentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_CONTENT_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.AgreementContentType)
                    .WithMany(p => p.AgreementContents)
                    .HasForeignKey(d => d.AgreementContentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AG_CNT_TYPE");

                entity.HasOne(d => d.Agreement)
                    .WithMany(p => p.AgreementContents)
                    .HasForeignKey(d => d.AgreementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AG_CNT_PROD");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.AgreementContents)
                    .HasForeignKey(d => d.ContentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AG_CNT_CNT");
            });

            modelBuilder.Entity<AgreementContentType>(entity =>
            {
                entity.ToTable("AGREEMENT_CONTENT_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "AGCT_TYP_PARENT");

                entity.HasIndex(e => e.CreatedTxStamp, "AGRMT_CNT_TP_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "AGRMT_CNT_TP_TXSTP");

                entity.Property(e => e.AgreementContentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_CONTENT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("AGCT_TYP_PARENT");
            });

            modelBuilder.Entity<AgreementEmploymentAppl>(entity =>
            {
                entity.HasKey(e => new { e.AgreementId, e.AgreementItemSeqId, e.PartyIdTo, e.PartyIdFrom, e.RoleTypeIdTo, e.RoleTypeIdFrom, e.FromDate });

                entity.ToTable("AGREEMENT_EMPLOYMENT_APPL");

                entity.HasIndex(e => new { e.AgreementId, e.AgreementItemSeqId }, "AGRMNT_EMPL_AITM");

                entity.HasIndex(e => new { e.RoleTypeIdFrom, e.RoleTypeIdTo, e.PartyIdFrom, e.PartyIdTo, e.FromDate }, "AGRMNT_EMPL_APPL");

                entity.HasIndex(e => e.CreatedTxStamp, "AGRT_EMPT_APL_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "AGRT_EMPT_APL_TXSP");

                entity.Property(e => e.AgreementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ID");

                entity.Property(e => e.AgreementItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                entity.Property(e => e.PartyIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID_TO");

                entity.Property(e => e.PartyIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID_FROM");

                entity.Property(e => e.RoleTypeIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID_TO");

                entity.Property(e => e.RoleTypeIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID_FROM");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.AgreementDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AGREEMENT_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.AgreementI)
                    .WithMany(p => p.AgreementEmploymentAppls)
                    .HasForeignKey(d => new { d.AgreementId, d.AgreementItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_EMPL_AITM");

                entity.HasOne(d => d.Employment)
                    .WithMany(p => p.AgreementEmploymentAppls)
                    .HasForeignKey(d => new { d.RoleTypeIdFrom, d.RoleTypeIdTo, d.PartyIdFrom, d.PartyIdTo, d.FromDate })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_EMPL_APPL");
            });

            modelBuilder.Entity<AgreementFacilityAppl>(entity =>
            {
                entity.HasKey(e => new { e.AgreementId, e.AgreementItemSeqId, e.FacilityId });

                entity.ToTable("AGREEMENT_FACILITY_APPL");

                entity.HasIndex(e => new { e.AgreementId, e.AgreementItemSeqId }, "AGRMNT_FACLT_AITM");

                entity.HasIndex(e => e.FacilityId, "AGRMNT_FACLT_PRD");

                entity.HasIndex(e => e.CreatedTxStamp, "AGRT_FCT_APL_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "AGRT_FCT_APL_TXSTP");

                entity.Property(e => e.AgreementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ID");

                entity.Property(e => e.AgreementItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.AgreementFacilityAppls)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_FACLT_PRD");

                entity.HasOne(d => d.AgreementI)
                    .WithMany(p => p.AgreementFacilityAppls)
                    .HasForeignKey(d => new { d.AgreementId, d.AgreementItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_FACLT_AITM");
            });

            modelBuilder.Entity<AgreementGeographicalApplic>(entity =>
            {
                entity.HasKey(e => new { e.AgreementId, e.AgreementItemSeqId, e.GeoId })
                    .HasName("PK_AGREEMENT_GEOGRAPHICAL_APPL");

                entity.ToTable("AGREEMENT_GEOGRAPHICAL_APPLIC");

                entity.HasIndex(e => e.AgreementId, "AGRMNT_GEOAP_AGR");

                entity.HasIndex(e => new { e.AgreementId, e.AgreementItemSeqId }, "AGRMNT_GEOAP_AGRI");

                entity.HasIndex(e => e.GeoId, "AGRMNT_GEOAP_GEO");

                entity.HasIndex(e => e.CreatedTxStamp, "AGRT_GGRL_APC_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "AGRT_GGRL_APC_TXSP");

                entity.Property(e => e.AgreementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ID");

                entity.Property(e => e.AgreementItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                entity.Property(e => e.GeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Agreement)
                    .WithMany(p => p.AgreementGeographicalApplics)
                    .HasForeignKey(d => d.AgreementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_GEOAP_AGR");

                entity.HasOne(d => d.Geo)
                    .WithMany(p => p.AgreementGeographicalApplics)
                    .HasForeignKey(d => d.GeoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_GEOAP_GEO");

                entity.HasOne(d => d.AgreementI)
                    .WithMany(p => p.AgreementGeographicalApplics)
                    .HasForeignKey(d => new { d.AgreementId, d.AgreementItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_GEOAP_AGRI");
            });

            modelBuilder.Entity<AgreementItem>(entity =>
            {
                entity.HasKey(e => new { e.AgreementId, e.AgreementItemSeqId });

                entity.ToTable("AGREEMENT_ITEM");

                entity.HasIndex(e => e.AgreementId, "AGRMNT_ITEM_AGR");

                entity.HasIndex(e => e.AgreementItemTypeId, "AGRMNT_ITEM_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "AGRMNT_ITM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "AGRMNT_ITM_TXSTMP");

                entity.Property(e => e.AgreementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ID");

                entity.Property(e => e.AgreementItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                entity.Property(e => e.AgreementImage)
                    .HasColumnType("image")
                    .HasColumnName("AGREEMENT_IMAGE");

                entity.Property(e => e.AgreementItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ITEM_TYPE_ID");

                entity.Property(e => e.AgreementText)
                    .HasColumnType("text")
                    .HasColumnName("AGREEMENT_TEXT");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Agreement)
                    .WithMany(p => p.AgreementItems)
                    .HasForeignKey(d => d.AgreementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_ITEM_AGR");

                entity.HasOne(d => d.AgreementItemType)
                    .WithMany(p => p.AgreementItems)
                    .HasForeignKey(d => d.AgreementItemTypeId)
                    .HasConstraintName("AGRMNT_ITEM_TYPE");
            });

            modelBuilder.Entity<AgreementItemAttribute>(entity =>
            {
                entity.HasKey(e => new { e.AgreementId, e.AgreementItemSeqId, e.AttrName });

                entity.ToTable("AGREEMENT_ITEM_ATTRIBUTE");

                entity.HasIndex(e => new { e.AgreementId, e.AgreementItemSeqId }, "AGRMNT_ITEM_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "AGRT_ITM_ATTT_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "AGRT_ITM_ATTT_TXSP");

                entity.Property(e => e.AgreementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ID");

                entity.Property(e => e.AgreementItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.AgreementI)
                    .WithMany(p => p.AgreementItemAttributes)
                    .HasForeignKey(d => new { d.AgreementId, d.AgreementItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_ITEM_ATTR");
            });

            modelBuilder.Entity<AgreementItemType>(entity =>
            {
                entity.ToTable("AGREEMENT_ITEM_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "AGRMNT_TYPEPAR");

                entity.HasIndex(e => e.CreatedTxStamp, "AGRMT_ITM_TP_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "AGRMT_ITM_TP_TXSTP");

                entity.Property(e => e.AgreementItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ITEM_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("AGRMNT_TYPEPAR");
            });

            modelBuilder.Entity<AgreementItemTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.AgreementItemTypeId, e.AttrName });

                entity.ToTable("AGREEMENT_ITEM_TYPE_ATTR");

                entity.HasIndex(e => e.AgreementItemTypeId, "AGRMNT_ITEM_TYPATR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "AGT_ITM_TP_ATR_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "AGT_ITM_TP_ATR_TXS");

                entity.Property(e => e.AgreementItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ITEM_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.AgreementItemType)
                    .WithMany(p => p.AgreementItemTypeAttrs)
                    .HasForeignKey(d => d.AgreementItemTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_ITEM_TYPATR");
            });

            modelBuilder.Entity<AgreementPartyApplic>(entity =>
            {
                entity.HasKey(e => new { e.AgreementId, e.AgreementItemSeqId, e.PartyId });

                entity.ToTable("AGREEMENT_PARTY_APPLIC");

                entity.HasIndex(e => e.AgreementId, "AGRMNT_PTYA_AGR");

                entity.HasIndex(e => e.PartyId, "AGRMNT_PTYA_PTY");

                entity.HasIndex(e => e.CreatedTxStamp, "AGRT_PRT_APC_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "AGRT_PRT_APC_TXSTP");

                entity.Property(e => e.AgreementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ID");

                entity.Property(e => e.AgreementItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Agreement)
                    .WithMany(p => p.AgreementPartyApplics)
                    .HasForeignKey(d => d.AgreementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_PTYA_AGR");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.AgreementPartyApplics)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_PTYA_PTY");
            });

            modelBuilder.Entity<AgreementProductAppl>(entity =>
            {
                entity.HasKey(e => new { e.AgreementId, e.AgreementItemSeqId, e.ProductId });

                entity.ToTable("AGREEMENT_PRODUCT_APPL");

                entity.HasIndex(e => new { e.AgreementId, e.AgreementItemSeqId }, "AGRMNT_PRDA_AITM");

                entity.HasIndex(e => e.ProductId, "AGRMNT_PRDA_PRD");

                entity.HasIndex(e => e.CreatedTxStamp, "AGRT_PRT_APL_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "AGRT_PRT_APL_TXSTP");

                entity.Property(e => e.AgreementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ID");

                entity.Property(e => e.AgreementItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Price)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("PRICE");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.AgreementProductAppls)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_PRDA_PRD");

                entity.HasOne(d => d.AgreementI)
                    .WithMany(p => p.AgreementProductAppls)
                    .HasForeignKey(d => new { d.AgreementId, d.AgreementItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_PRDA_AITM");
            });

            modelBuilder.Entity<AgreementPromoAppl>(entity =>
            {
                entity.HasKey(e => new { e.AgreementId, e.AgreementItemSeqId, e.ProductPromoId, e.FromDate });

                entity.ToTable("AGREEMENT_PROMO_APPL");

                entity.HasIndex(e => new { e.AgreementId, e.AgreementItemSeqId }, "AGRMNT_PROM_AITM");

                entity.HasIndex(e => e.ProductPromoId, "AGRMNT_PROM_PRO");

                entity.HasIndex(e => e.CreatedTxStamp, "AGRT_PRM_APL_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "AGRT_PRM_APL_TXSTP");

                entity.Property(e => e.AgreementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ID");

                entity.Property(e => e.AgreementItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                entity.Property(e => e.ProductPromoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ProductPromo)
                    .WithMany(p => p.AgreementPromoAppls)
                    .HasForeignKey(d => d.ProductPromoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_PROM_PRO");

                entity.HasOne(d => d.AgreementI)
                    .WithMany(p => p.AgreementPromoAppls)
                    .HasForeignKey(d => new { d.AgreementId, d.AgreementItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_PROM_AITM");
            });

            modelBuilder.Entity<AgreementRole>(entity =>
            {
                entity.HasKey(e => new { e.AgreementId, e.PartyId, e.RoleTypeId });

                entity.ToTable("AGREEMENT_ROLE");

                entity.HasIndex(e => e.CreatedTxStamp, "AGRMNT_RL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "AGRMNT_RL_TXSTMP");

                entity.HasIndex(e => e.AgreementId, "AGRMNT_ROLE_AGR");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "AGRMNT_ROLE_PRLE");

                entity.HasIndex(e => e.PartyId, "AGRMNT_ROLE_PTY");

                entity.Property(e => e.AgreementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Agreement)
                    .WithMany(p => p.AgreementRoles)
                    .HasForeignKey(d => d.AgreementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_ROLE_AGR");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.AgreementRoles)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_ROLE_PTY");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.AgreementRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_ROLE_PRLE");
            });

            modelBuilder.Entity<AgreementStatus>(entity =>
            {
                entity.HasKey(e => new { e.AgreementId, e.StatusId, e.StatusDate });

                entity.ToTable("AGREEMENT_STATUS");

                entity.HasIndex(e => e.AgreementId, "AGRMNT_STTS_AGRMNT");

                entity.HasIndex(e => e.StatusId, "AGRMNT_STTS_STTS");

                entity.HasIndex(e => e.CreatedTxStamp, "AGRMNT_STTS_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "AGRMNT_STTS_TXSTMP");

                entity.HasIndex(e => e.ChangeByUserLoginId, "AGRMNT_STTS_USRLGN");

                entity.Property(e => e.AgreementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.StatusDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STATUS_DATE");

                entity.Property(e => e.ChangeByUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Agreement)
                    .WithMany(p => p.AgreementStatuses)
                    .HasForeignKey(d => d.AgreementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_STTS_AGRMNT");

                entity.HasOne(d => d.ChangeByUserLogin)
                    .WithMany(p => p.AgreementStatuses)
                    .HasForeignKey(d => d.ChangeByUserLoginId)
                    .HasConstraintName("AGRMNT_STTS_USRLGN");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.AgreementStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_STTS_STTS");
            });

            modelBuilder.Entity<AgreementTerm>(entity =>
            {
                entity.ToTable("AGREEMENT_TERM");

                entity.HasIndex(e => e.AgreementId, "AGRMNT_TERM_AGR");

                entity.HasIndex(e => new { e.AgreementId, e.AgreementItemSeqId }, "AGRMNT_TERM_AITM");

                entity.HasIndex(e => e.InvoiceItemTypeId, "AGRMNT_TERM_IIT");

                entity.HasIndex(e => e.TermTypeId, "AGRMNT_TERM_TTYP");

                entity.HasIndex(e => e.CreatedTxStamp, "AGRMNT_TRM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "AGRMNT_TRM_TXSTMP");

                entity.Property(e => e.AgreementTermId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_TERM_ID");

                entity.Property(e => e.AgreementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ID");

                entity.Property(e => e.AgreementItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.InvoiceItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ITEM_TYPE_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MaxQuantity).HasColumnName("MAX_QUANTITY");

                entity.Property(e => e.MinQuantity).HasColumnName("MIN_QUANTITY");

                entity.Property(e => e.TermDays).HasColumnName("TERM_DAYS");

                entity.Property(e => e.TermTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TERM_TYPE_ID");

                entity.Property(e => e.TermValue)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("TERM_VALUE");

                entity.Property(e => e.TextValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TEXT_VALUE");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Agreement)
                    .WithMany(p => p.AgreementTerms)
                    .HasForeignKey(d => d.AgreementId)
                    .HasConstraintName("AGRMNT_TERM_AGR");

                entity.HasOne(d => d.InvoiceItemType)
                    .WithMany(p => p.AgreementTerms)
                    .HasForeignKey(d => d.InvoiceItemTypeId)
                    .HasConstraintName("AGRMNT_TERM_IIT");

                entity.HasOne(d => d.TermType)
                    .WithMany(p => p.AgreementTerms)
                    .HasForeignKey(d => d.TermTypeId)
                    .HasConstraintName("AGRMNT_TERM_TTYP");

                entity.HasOne(d => d.AgreementI)
                    .WithMany(p => p.AgreementTerms)
                    .HasForeignKey(d => new { d.AgreementId, d.AgreementItemSeqId })
                    .HasConstraintName("AGRMNT_TERM_AITM");
            });

            modelBuilder.Entity<AgreementTermAttribute>(entity =>
            {
                entity.HasKey(e => new { e.AgreementTermId, e.AttrName });

                entity.ToTable("AGREEMENT_TERM_ATTRIBUTE");

                entity.HasIndex(e => e.AgreementTermId, "AGRMNT_TERM_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "AGRT_TRM_ATTT_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "AGRT_TRM_ATTT_TXSP");

                entity.Property(e => e.AgreementTermId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_TERM_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.AgreementTerm)
                    .WithMany(p => p.AgreementTermAttributes)
                    .HasForeignKey(d => d.AgreementTermId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_TERM_ATTR");
            });

            modelBuilder.Entity<AgreementType>(entity =>
            {
                entity.ToTable("AGREEMENT_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "AGRMNT_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "AGRMNT_TP_TXSTMP");

                entity.HasIndex(e => e.ParentTypeId, "AGRMNT_TYPE_PAR");

                entity.Property(e => e.AgreementTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("AGRMNT_TYPE_PAR");
            });

            modelBuilder.Entity<AgreementTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.AgreementTypeId, e.AttrName });

                entity.ToTable("AGREEMENT_TYPE_ATTR");

                entity.HasIndex(e => e.AgreementTypeId, "AGRMNT_TYPE_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "AGRMT_TP_ATR_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "AGRMT_TP_ATR_TXSTP");

                entity.Property(e => e.AgreementTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.AgreementType)
                    .WithMany(p => p.AgreementTypeAttrs)
                    .HasForeignKey(d => d.AgreementTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_TYPE_ATTR");
            });

            modelBuilder.Entity<AgreementWorkEffortApplic>(entity =>
            {
                entity.HasKey(e => new { e.AgreementId, e.AgreementItemSeqId, e.WorkEffortId })
                    .HasName("PK_AGREEMENT_WORK_EFFORT_APPLI");

                entity.ToTable("AGREEMENT_WORK_EFFORT_APPLIC");

                entity.HasIndex(e => e.AgreementId, "AGRMNT_WEA_AGRMNT");

                entity.HasIndex(e => e.WorkEffortId, "AGRMNT_WEA_WE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "AGT_WRK_EFT_APC_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "AGT_WRK_EFT_APC_TS");

                entity.Property(e => e.AgreementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ID");

                entity.Property(e => e.AgreementItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Agreement)
                    .WithMany(p => p.AgreementWorkEffortApplics)
                    .HasForeignKey(d => d.AgreementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_WEA_AGRMNT");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.AgreementWorkEffortApplics)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AGRMNT_WEA_WE");
            });

            modelBuilder.Entity<AllocationPlanHeader>(entity =>
            {
                entity.HasKey(e => new { e.PlanId, e.ProductId });

                entity.ToTable("ALLOCATION_PLAN_HEADER");

                entity.HasIndex(e => e.CreatedByUserLogin, "ALC_PLN_HDR_CBUL");

                entity.HasIndex(e => e.LastModifiedByUserLogin, "ALC_PLN_HDR_LMUL");

                entity.HasIndex(e => e.StatusId, "ALC_PLN_HDR_STS");

                entity.HasIndex(e => e.PlanTypeId, "ALC_PLN_HDR_TYP");

                entity.HasIndex(e => e.CreatedTxStamp, "ALLN_PLN_HDR_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ALLN_PLN_HDR_TXSTP");

                entity.Property(e => e.PlanId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PLAN_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PlanName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PLAN_NAME");

                entity.Property(e => e.PlanTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PLAN_TYPE_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.HasOne(d => d.CreatedByUserLoginNavigation)
                    .WithMany(p => p.AllocationPlanHeaderCreatedByUserLoginNavigations)
                    .HasForeignKey(d => d.CreatedByUserLogin)
                    .HasConstraintName("ALC_PLN_HDR_CBUL");

                entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                    .WithMany(p => p.AllocationPlanHeaderLastModifiedByUserLoginNavigations)
                    .HasForeignKey(d => d.LastModifiedByUserLogin)
                    .HasConstraintName("ALC_PLN_HDR_LMUL");

                entity.HasOne(d => d.PlanType)
                    .WithMany(p => p.AllocationPlanHeaders)
                    .HasForeignKey(d => d.PlanTypeId)
                    .HasConstraintName("ALC_PLN_HDR_TYP");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.AllocationPlanHeaders)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("ALC_PLN_HDR_STS");
            });

            modelBuilder.Entity<AllocationPlanItem>(entity =>
            {
                entity.HasKey(e => new { e.PlanId, e.PlanItemSeqId, e.ProductId });

                entity.ToTable("ALLOCATION_PLAN_ITEM");

                entity.HasIndex(e => e.CreatedByUserLogin, "ALC_PLN_ITM_CBUL");

                entity.HasIndex(e => e.PlanMethodEnumId, "ALC_PLN_ITM_ENUM");

                entity.HasIndex(e => new { e.PlanId, e.ProductId }, "ALC_PLN_ITM_HDR");

                entity.HasIndex(e => e.LastModifiedByUserLogin, "ALC_PLN_ITM_LMUL");

                entity.HasIndex(e => e.OrderId, "ALC_PLN_ITM_ODRHDR");

                entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId }, "ALC_PLN_ITM_ODRITM");

                entity.HasIndex(e => e.StatusId, "ALC_PLN_ITM_STS");

                entity.HasIndex(e => e.CreatedTxStamp, "ALLN_PLN_ITM_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ALLN_PLN_ITM_TXSTP");

                entity.Property(e => e.PlanId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PLAN_ID");

                entity.Property(e => e.PlanItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PLAN_ITEM_SEQ_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.AllocatedQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ALLOCATED_QUANTITY");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.PlanMethodEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PLAN_METHOD_ENUM_ID");

                entity.Property(e => e.PrioritySeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRIORITY_SEQ_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.HasOne(d => d.CreatedByUserLoginNavigation)
                    .WithMany(p => p.AllocationPlanItemCreatedByUserLoginNavigations)
                    .HasForeignKey(d => d.CreatedByUserLogin)
                    .HasConstraintName("ALC_PLN_ITM_CBUL");

                entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                    .WithMany(p => p.AllocationPlanItemLastModifiedByUserLoginNavigations)
                    .HasForeignKey(d => d.LastModifiedByUserLogin)
                    .HasConstraintName("ALC_PLN_ITM_LMUL");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.AllocationPlanItems)
                    .HasForeignKey(d => d.OrderId)
                    .HasConstraintName("ALC_PLN_ITM_ODRHDR");

                entity.HasOne(d => d.PlanMethodEnum)
                    .WithMany(p => p.AllocationPlanItems)
                    .HasForeignKey(d => d.PlanMethodEnumId)
                    .HasConstraintName("ALC_PLN_ITM_ENUM");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.AllocationPlanItems)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("ALC_PLN_ITM_STS");

                entity.HasOne(d => d.OrderI)
                    .WithMany(p => p.AllocationPlanItems)
                    .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                    .HasConstraintName("ALC_PLN_ITM_ODRITM");

                entity.HasOne(d => d.P)
                    .WithMany(p => p.AllocationPlanItems)
                    .HasForeignKey(d => new { d.PlanId, d.ProductId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ALC_PLN_ITM_HDR");
            });

            modelBuilder.Entity<AllocationPlanType>(entity =>
            {
                entity.HasKey(e => e.PlanTypeId);

                entity.ToTable("ALLOCATION_PLAN_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "ALLCN_PLN_TP_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ALLCN_PLN_TP_TXSTP");

                entity.Property(e => e.PlanTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PLAN_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<ApplicationSandbox>(entity =>
            {
                entity.HasKey(e => e.ApplicationId);

                entity.ToTable("APPLICATION_SANDBOX");

                entity.HasIndex(e => e.CreatedTxStamp, "APPLCN_SNDX_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "APPLCN_SNDX_TXSTMP");

                entity.HasIndex(e => e.RuntimeDataId, "APP_SNDBX_RNTMDTA");

                entity.HasIndex(e => new { e.WorkEffortId, e.PartyId, e.RoleTypeId, e.FromDate }, "APP_SNDBX_WEPA");

                entity.Property(e => e.ApplicationId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("APPLICATION_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.RuntimeDataId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RUNTIME_DATA_ID");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.HasOne(d => d.RuntimeData)
                    .WithMany(p => p.ApplicationSandboxes)
                    .HasForeignKey(d => d.RuntimeDataId)
                    .HasConstraintName("APP_SNDBX_RNTMDTA");

                entity.HasOne(d => d.WorkEffortPartyAssignment)
                    .WithMany(p => p.ApplicationSandboxes)
                    .HasForeignKey(d => new { d.WorkEffortId, d.PartyId, d.RoleTypeId, d.FromDate })
                    .HasConstraintName("APP_SNDBX_WEPA");
            });

            modelBuilder.Entity<AudioDataResource>(entity =>
            {
                entity.HasKey(e => e.DataResourceId);

                entity.ToTable("AUDIO_DATA_RESOURCE");

                entity.HasIndex(e => e.CreatedTxStamp, "AD_DT_RSRC_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "AD_DT_RSRC_TXSTMP");

                entity.HasIndex(e => e.DataResourceId, "DATA_REC_AUDIO");

                entity.Property(e => e.DataResourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_RESOURCE_ID");

                entity.Property(e => e.AudioData)
                    .HasColumnType("image")
                    .HasColumnName("AUDIO_DATA");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.DataResource)
                    .WithOne(p => p.AudioDataResource)
                    .HasForeignKey<AudioDataResource>(d => d.DataResourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DATA_REC_AUDIO");
            });

            modelBuilder.Entity<BenefitType>(entity =>
            {
                entity.ToTable("BENEFIT_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "BEN_TYPE_PAR");

                entity.HasIndex(e => e.CreatedTxStamp, "BNFT_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "BNFT_TP_TXSTMP");

                entity.Property(e => e.BenefitTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BENEFIT_TYPE_ID");

                entity.Property(e => e.BenefitName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BENEFIT_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.EmployerPaidPercentage).HasColumnName("EMPLOYER_PAID_PERCENTAGE");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("BEN_TYPE_PAR");
            });

            modelBuilder.Entity<BillingAccount>(entity =>
            {
                entity.ToTable("BILLING_ACCOUNT");

                entity.HasIndex(e => e.ContactMechId, "BILLACCT_CMECH");

                entity.HasIndex(e => e.AccountCurrencyUomId, "BILLACCT_CUOM");

                entity.HasIndex(e => e.ContactMechId, "BILLACCT_PADDR");

                entity.HasIndex(e => e.CreatedTxStamp, "BLLNG_ACCNT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "BLLNG_ACCNT_TXSTMP");

                entity.Property(e => e.BillingAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_ACCOUNT_ID");

                entity.Property(e => e.AccountCurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_CURRENCY_UOM_ID");

                entity.Property(e => e.AccountLimit)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ACCOUNT_LIMIT");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.ExternalAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EXTERNAL_ACCOUNT_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.AccountCurrencyUom)
                    .WithMany(p => p.BillingAccounts)
                    .HasForeignKey(d => d.AccountCurrencyUomId)
                    .HasConstraintName("BILLACCT_CUOM");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.BillingAccounts)
                    .HasForeignKey(d => d.ContactMechId)
                    .HasConstraintName("BILLACCT_CMECH");

                entity.HasOne(d => d.ContactMechNavigation)
                    .WithMany(p => p.BillingAccounts)
                    .HasForeignKey(d => d.ContactMechId)
                    .HasConstraintName("BILLACCT_PADDR");
            });

            modelBuilder.Entity<BillingAccountRole>(entity =>
            {
                entity.HasKey(e => new { e.BillingAccountId, e.PartyId, e.RoleTypeId, e.FromDate });

                entity.ToTable("BILLING_ACCOUNT_ROLE");

                entity.HasIndex(e => e.PartyId, "BILLACCT_RL_PARTY");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "BILLACCT_RL_PTRL");

                entity.HasIndex(e => e.BillingAccountId, "BILLACCT_ROLE");

                entity.HasIndex(e => e.CreatedTxStamp, "BLLG_ACCT_RL_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "BLLG_ACCT_RL_TXSTP");

                entity.Property(e => e.BillingAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_ACCOUNT_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.BillingAccount)
                    .WithMany(p => p.BillingAccountRoles)
                    .HasForeignKey(d => d.BillingAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BILLACCT_ROLE");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.BillingAccountRoles)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BILLACCT_RL_PARTY");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.BillingAccountRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BILLACCT_RL_PTRL");
            });

            modelBuilder.Entity<BillingAccountTerm>(entity =>
            {
                entity.ToTable("BILLING_ACCOUNT_TERM");

                entity.HasIndex(e => e.BillingAccountId, "BILLACCT_TRM_BACT");

                entity.HasIndex(e => e.TermTypeId, "BILLACCT_TRM_TRM");

                entity.HasIndex(e => e.UomId, "BILLACCT_TRM_UOM");

                entity.HasIndex(e => e.CreatedTxStamp, "BLLG_ACT_TRM_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "BLLG_ACT_TRM_TXSTP");

                entity.Property(e => e.BillingAccountTermId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_ACCOUNT_TERM_ID");

                entity.Property(e => e.BillingAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_ACCOUNT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.TermDays).HasColumnName("TERM_DAYS");

                entity.Property(e => e.TermTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TERM_TYPE_ID");

                entity.Property(e => e.TermValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("TERM_VALUE");

                entity.Property(e => e.UomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UOM_ID");

                entity.HasOne(d => d.BillingAccount)
                    .WithMany(p => p.BillingAccountTerms)
                    .HasForeignKey(d => d.BillingAccountId)
                    .HasConstraintName("BILLACCT_TRM_BACT");

                entity.HasOne(d => d.TermType)
                    .WithMany(p => p.BillingAccountTerms)
                    .HasForeignKey(d => d.TermTypeId)
                    .HasConstraintName("BILLACCT_TRM_TRM");

                entity.HasOne(d => d.Uom)
                    .WithMany(p => p.BillingAccountTerms)
                    .HasForeignKey(d => d.UomId)
                    .HasConstraintName("BILLACCT_TRM_UOM");
            });

            modelBuilder.Entity<BillingAccountTermAttr>(entity =>
            {
                entity.HasKey(e => new { e.BillingAccountTermId, e.AttrName });

                entity.ToTable("BILLING_ACCOUNT_TERM_ATTR");

                entity.HasIndex(e => e.BillingAccountTermId, "BILLACCT_TRM_ATTR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "BLG_ACT_TRM_ATR_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "BLG_ACT_TRM_ATR_TS");

                entity.Property(e => e.BillingAccountTermId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_ACCOUNT_TERM_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.BillingAccountTerm)
                    .WithMany(p => p.BillingAccountTermAttrs)
                    .HasForeignKey(d => d.BillingAccountTermId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BILLACCT_TRM_ATTR");
            });

            modelBuilder.Entity<BrowserType>(entity =>
            {
                entity.ToTable("BROWSER_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "BRWSR_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "BRWSR_TP_TXSTMP");

                entity.Property(e => e.BrowserTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BROWSER_TYPE_ID");

                entity.Property(e => e.BrowserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BROWSER_NAME");

                entity.Property(e => e.BrowserVersion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BROWSER_VERSION");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<Budget>(entity =>
            {
                entity.ToTable("BUDGET");

                entity.HasIndex(e => e.BudgetTypeId, "BUDGET_BGTTYP");

                entity.HasIndex(e => e.CustomTimePeriodId, "BUDGET_CTP");

                entity.HasIndex(e => e.CreatedTxStamp, "BUDGET_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "BUDGET_TXSTMP");

                entity.Property(e => e.BudgetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ID");

                entity.Property(e => e.BudgetTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_TYPE_ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CustomTimePeriodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_TIME_PERIOD_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.BudgetType)
                    .WithMany(p => p.Budgets)
                    .HasForeignKey(d => d.BudgetTypeId)
                    .HasConstraintName("BUDGET_BGTTYP");

                entity.HasOne(d => d.CustomTimePeriod)
                    .WithMany(p => p.Budgets)
                    .HasForeignKey(d => d.CustomTimePeriodId)
                    .HasConstraintName("BUDGET_CTP");
            });

            modelBuilder.Entity<BudgetAttribute>(entity =>
            {
                entity.HasKey(e => new { e.BudgetId, e.AttrName });

                entity.ToTable("BUDGET_ATTRIBUTE");

                entity.HasIndex(e => e.CreatedTxStamp, "BDGT_ATTRBT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "BDGT_ATTRBT_TXSTMP");

                entity.HasIndex(e => e.BudgetId, "BUDGET_ATTR_BDGT");

                entity.Property(e => e.BudgetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Budget)
                    .WithMany(p => p.BudgetAttributes)
                    .HasForeignKey(d => d.BudgetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BUDGET_ATTR_BDGT");
            });

            modelBuilder.Entity<BudgetItem>(entity =>
            {
                entity.HasKey(e => new { e.BudgetId, e.BudgetItemSeqId });

                entity.ToTable("BUDGET_ITEM");

                entity.HasIndex(e => e.BudgetId, "BDGTITM_TO_BDGT");

                entity.HasIndex(e => e.BudgetItemTypeId, "BUDGET_ITEM_BTYP");

                entity.HasIndex(e => e.CreatedTxStamp, "BUDGET_ITEM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "BUDGET_ITEM_TXSTMP");

                entity.Property(e => e.BudgetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ID");

                entity.Property(e => e.BudgetItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ITEM_SEQ_ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.BudgetItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ITEM_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Justification)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("JUSTIFICATION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PURPOSE");

                entity.HasOne(d => d.Budget)
                    .WithMany(p => p.BudgetItems)
                    .HasForeignKey(d => d.BudgetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BDGTITM_TO_BDGT");

                entity.HasOne(d => d.BudgetItemType)
                    .WithMany(p => p.BudgetItems)
                    .HasForeignKey(d => d.BudgetItemTypeId)
                    .HasConstraintName("BUDGET_ITEM_BTYP");
            });

            modelBuilder.Entity<BudgetItemAttribute>(entity =>
            {
                entity.HasKey(e => new { e.BudgetId, e.BudgetItemSeqId, e.AttrName });

                entity.ToTable("BUDGET_ITEM_ATTRIBUTE");

                entity.HasIndex(e => e.CreatedTxStamp, "BDT_ITM_ATTT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "BDT_ITM_ATTT_TXSTP");

                entity.HasIndex(e => new { e.BudgetId, e.BudgetItemSeqId }, "BUDGET_ITEM_ATTR");

                entity.Property(e => e.BudgetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ID");

                entity.Property(e => e.BudgetItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ITEM_SEQ_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.BudgetI)
                    .WithMany(p => p.BudgetItemAttributes)
                    .HasForeignKey(d => new { d.BudgetId, d.BudgetItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BUDGET_ITEM_ATTR");
            });

            modelBuilder.Entity<BudgetItemType>(entity =>
            {
                entity.ToTable("BUDGET_ITEM_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "BDGT_ITM_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "BDGT_ITM_TP_TXSTMP");

                entity.HasIndex(e => e.ParentTypeId, "BUDGET_ITM_TYPPAR");

                entity.Property(e => e.BudgetItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ITEM_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("BUDGET_ITM_TYPPAR");
            });

            modelBuilder.Entity<BudgetItemTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.BudgetItemTypeId, e.AttrName });

                entity.ToTable("BUDGET_ITEM_TYPE_ATTR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "BDT_ITM_TP_ATR_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "BDT_ITM_TP_ATR_TXS");

                entity.HasIndex(e => e.BudgetItemTypeId, "BUDGET_ITMTYPATTR");

                entity.Property(e => e.BudgetItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ITEM_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.BudgetItemType)
                    .WithMany(p => p.BudgetItemTypeAttrs)
                    .HasForeignKey(d => d.BudgetItemTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BUDGET_ITMTYPATTR");
            });

            modelBuilder.Entity<BudgetReview>(entity =>
            {
                entity.HasKey(e => new { e.BudgetId, e.BudgetReviewId, e.PartyId, e.BudgetReviewResultTypeId });

                entity.ToTable("BUDGET_REVIEW");

                entity.HasIndex(e => e.CreatedTxStamp, "BDGT_RVW_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "BDGT_RVW_TXSTMP");

                entity.HasIndex(e => e.BudgetId, "BUDGET_RVW_BDGT");

                entity.HasIndex(e => e.PartyId, "BUDGET_RVW_PARTY");

                entity.HasIndex(e => e.BudgetReviewResultTypeId, "BUDGET_RVW_RTYPE");

                entity.Property(e => e.BudgetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ID");

                entity.Property(e => e.BudgetReviewId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_REVIEW_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.BudgetReviewResultTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_REVIEW_RESULT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ReviewDate)
                    .HasColumnType("datetime")
                    .HasColumnName("REVIEW_DATE");

                entity.HasOne(d => d.Budget)
                    .WithMany(p => p.BudgetReviews)
                    .HasForeignKey(d => d.BudgetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BUDGET_RVW_BDGT");

                entity.HasOne(d => d.BudgetReviewResultType)
                    .WithMany(p => p.BudgetReviews)
                    .HasForeignKey(d => d.BudgetReviewResultTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BUDGET_RVW_RTYPE");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.BudgetReviews)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BUDGET_RVW_PARTY");
            });

            modelBuilder.Entity<BudgetReviewResultType>(entity =>
            {
                entity.ToTable("BUDGET_REVIEW_RESULT_TYPE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "BDT_RVW_RST_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "BDT_RVW_RST_TP_TXS");

                entity.Property(e => e.BudgetReviewResultTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_REVIEW_RESULT_TYPE_ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<BudgetRevision>(entity =>
            {
                entity.HasKey(e => new { e.BudgetId, e.RevisionSeqId });

                entity.ToTable("BUDGET_REVISION");

                entity.HasIndex(e => e.CreatedTxStamp, "BDGT_RVSN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "BDGT_RVSN_TXSTMP");

                entity.HasIndex(e => e.BudgetId, "BUDGET_RVSN_BDGT");

                entity.Property(e => e.BudgetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ID");

                entity.Property(e => e.RevisionSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REVISION_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DateRevised)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_REVISED");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Budget)
                    .WithMany(p => p.BudgetRevisions)
                    .HasForeignKey(d => d.BudgetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BUDGET_RVSN_BDGT");
            });

            modelBuilder.Entity<BudgetRevisionImpact>(entity =>
            {
                entity.HasKey(e => new { e.BudgetId, e.BudgetItemSeqId, e.RevisionSeqId });

                entity.ToTable("BUDGET_REVISION_IMPACT");

                entity.HasIndex(e => e.CreatedTxStamp, "BDT_RVN_IMPT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "BDT_RVN_IMPT_TXSTP");

                entity.HasIndex(e => e.BudgetId, "BUDGET_RNIMP_BDGT");

                entity.HasIndex(e => new { e.BudgetId, e.BudgetItemSeqId }, "BUDGET_RNIMP_BITM");

                entity.HasIndex(e => new { e.BudgetId, e.RevisionSeqId }, "BUDGET_RNIMP_REV");

                entity.Property(e => e.BudgetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ID");

                entity.Property(e => e.BudgetItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ITEM_SEQ_ID");

                entity.Property(e => e.RevisionSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REVISION_SEQ_ID");

                entity.Property(e => e.AddDeleteFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADD_DELETE_FLAG")
                    .IsFixedLength();

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.RevisedAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("REVISED_AMOUNT");

                entity.Property(e => e.RevisionReason)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REVISION_REASON");

                entity.HasOne(d => d.Budget)
                    .WithMany(p => p.BudgetRevisionImpacts)
                    .HasForeignKey(d => d.BudgetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BUDGET_RNIMP_BDGT");

                entity.HasOne(d => d.BudgetI)
                    .WithMany(p => p.BudgetRevisionImpacts)
                    .HasForeignKey(d => new { d.BudgetId, d.BudgetItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BUDGET_RNIMP_BITM");

                entity.HasOne(d => d.BudgetRevision)
                    .WithMany(p => p.BudgetRevisionImpacts)
                    .HasForeignKey(d => new { d.BudgetId, d.RevisionSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BUDGET_RNIMP_REV");
            });

            modelBuilder.Entity<BudgetRole>(entity =>
            {
                entity.HasKey(e => new { e.BudgetId, e.PartyId, e.RoleTypeId });

                entity.ToTable("BUDGET_ROLE");

                entity.HasIndex(e => e.BudgetId, "BUDGET_ROLE_BDGT");

                entity.HasIndex(e => e.PartyId, "BUDGET_ROLE_PARTY");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "BUDGET_ROLE_PROLE");

                entity.HasIndex(e => e.CreatedTxStamp, "BUDGET_ROLE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "BUDGET_ROLE_TXSTMP");

                entity.Property(e => e.BudgetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Budget)
                    .WithMany(p => p.BudgetRoles)
                    .HasForeignKey(d => d.BudgetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BUDGET_ROLE_BDGT");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.BudgetRoles)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BUDGET_ROLE_PARTY");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.BudgetRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BUDGET_ROLE_PROLE");
            });

            modelBuilder.Entity<BudgetScenario>(entity =>
            {
                entity.ToTable("BUDGET_SCENARIO");

                entity.HasIndex(e => e.CreatedTxStamp, "BDGT_SCNR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "BDGT_SCNR_TXSTMP");

                entity.Property(e => e.BudgetScenarioId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_SCENARIO_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<BudgetScenarioApplication>(entity =>
            {
                entity.HasKey(e => new { e.BudgetScenarioApplicId, e.BudgetScenarioId });

                entity.ToTable("BUDGET_SCENARIO_APPLICATION");

                entity.HasIndex(e => e.CreatedTxStamp, "BDT_SCR_APPLN_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "BDT_SCR_APPLN_TXSP");

                entity.HasIndex(e => e.BudgetId, "BUDGET_SAPL_BDGT");

                entity.HasIndex(e => new { e.BudgetId, e.BudgetItemSeqId }, "BUDGET_SAPL_BITM");

                entity.HasIndex(e => e.BudgetScenarioId, "BUDGET_SAPL_BSCN");

                entity.Property(e => e.BudgetScenarioApplicId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_SCENARIO_APPLIC_ID");

                entity.Property(e => e.BudgetScenarioId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_SCENARIO_ID");

                entity.Property(e => e.AmountChange)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AMOUNT_CHANGE");

                entity.Property(e => e.BudgetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ID");

                entity.Property(e => e.BudgetItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ITEM_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PercentageChange)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("PERCENTAGE_CHANGE");

                entity.HasOne(d => d.Budget)
                    .WithMany(p => p.BudgetScenarioApplications)
                    .HasForeignKey(d => d.BudgetId)
                    .HasConstraintName("BUDGET_SAPL_BDGT");

                entity.HasOne(d => d.BudgetScenario)
                    .WithMany(p => p.BudgetScenarioApplications)
                    .HasForeignKey(d => d.BudgetScenarioId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BUDGET_SAPL_BSCN");

                entity.HasOne(d => d.BudgetI)
                    .WithMany(p => p.BudgetScenarioApplications)
                    .HasForeignKey(d => new { d.BudgetId, d.BudgetItemSeqId })
                    .HasConstraintName("BUDGET_SAPL_BITM");
            });

            modelBuilder.Entity<BudgetScenarioRule>(entity =>
            {
                entity.HasKey(e => new { e.BudgetScenarioId, e.BudgetItemTypeId });

                entity.ToTable("BUDGET_SCENARIO_RULE");

                entity.HasIndex(e => e.CreatedTxStamp, "BDGT_SCR_RL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "BDGT_SCR_RL_TXSTMP");

                entity.HasIndex(e => e.BudgetItemTypeId, "BUDGET_SRLE_BITP");

                entity.HasIndex(e => e.BudgetScenarioId, "BUDGET_SRLE_BSCN");

                entity.Property(e => e.BudgetScenarioId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_SCENARIO_ID");

                entity.Property(e => e.BudgetItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ITEM_TYPE_ID");

                entity.Property(e => e.AmountChange)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AMOUNT_CHANGE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PercentageChange)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("PERCENTAGE_CHANGE");

                entity.HasOne(d => d.BudgetItemType)
                    .WithMany(p => p.BudgetScenarioRules)
                    .HasForeignKey(d => d.BudgetItemTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BUDGET_SRLE_BITP");

                entity.HasOne(d => d.BudgetScenario)
                    .WithMany(p => p.BudgetScenarioRules)
                    .HasForeignKey(d => d.BudgetScenarioId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BUDGET_SRLE_BSCN");
            });

            modelBuilder.Entity<BudgetStatus>(entity =>
            {
                entity.HasKey(e => new { e.BudgetId, e.StatusId });

                entity.ToTable("BUDGET_STATUS");

                entity.HasIndex(e => e.CreatedTxStamp, "BDGT_STTS_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "BDGT_STTS_TXSTMP");

                entity.HasIndex(e => e.BudgetId, "BUDGET_STTS_BDGT");

                entity.HasIndex(e => e.StatusId, "BUDGET_STTS_STTS");

                entity.HasIndex(e => e.ChangeByUserLoginId, "BUDGET_STTS_USRLGN");

                entity.Property(e => e.BudgetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.ChangeByUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.StatusDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STATUS_DATE");

                entity.HasOne(d => d.Budget)
                    .WithMany(p => p.BudgetStatuses)
                    .HasForeignKey(d => d.BudgetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BUDGET_STTS_BDGT");

                entity.HasOne(d => d.ChangeByUserLogin)
                    .WithMany(p => p.BudgetStatuses)
                    .HasForeignKey(d => d.ChangeByUserLoginId)
                    .HasConstraintName("BUDGET_STTS_USRLGN");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.BudgetStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BUDGET_STTS_STTS");
            });

            modelBuilder.Entity<BudgetType>(entity =>
            {
                entity.ToTable("BUDGET_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "BUDGET_TYPE_PAR");

                entity.HasIndex(e => e.CreatedTxStamp, "BUDGET_TYPE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "BUDGET_TYPE_TXSTMP");

                entity.Property(e => e.BudgetTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("BUDGET_TYPE_PAR");
            });

            modelBuilder.Entity<BudgetTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.BudgetTypeId, e.AttrName });

                entity.ToTable("BUDGET_TYPE_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "BDGT_TP_ATR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "BDGT_TP_ATR_TXSTMP");

                entity.HasIndex(e => e.BudgetTypeId, "BUDGET_TPATR_BT");

                entity.Property(e => e.BudgetTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.BudgetType)
                    .WithMany(p => p.BudgetTypeAttrs)
                    .HasForeignKey(d => d.BudgetTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BUDGET_TPATR_BT");
            });

            modelBuilder.Entity<CarrierShipmentBoxType>(entity =>
            {
                entity.HasKey(e => new { e.ShipmentBoxTypeId, e.PartyId });

                entity.ToTable("CARRIER_SHIPMENT_BOX_TYPE");

                entity.HasIndex(e => e.PartyId, "CARR_SHBX_PARTY");

                entity.HasIndex(e => e.ShipmentBoxTypeId, "CARR_SHBX_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "CRR_SHT_BX_TP_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CRR_SHT_BX_TP_TXSP");

                entity.Property(e => e.ShipmentBoxTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_BOX_TYPE_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OversizeCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("OVERSIZE_CODE");

                entity.Property(e => e.PackagingTypeCode)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PACKAGING_TYPE_CODE");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.CarrierShipmentBoxTypes)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CARR_SHBX_PARTY");

                entity.HasOne(d => d.ShipmentBoxType)
                    .WithMany(p => p.CarrierShipmentBoxTypes)
                    .HasForeignKey(d => d.ShipmentBoxTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CARR_SHBX_TYPE");
            });

            modelBuilder.Entity<CarrierShipmentMethod>(entity =>
            {
                entity.HasKey(e => new { e.ShipmentMethodTypeId, e.PartyId, e.RoleTypeId });

                entity.ToTable("CARRIER_SHIPMENT_METHOD");

                entity.HasIndex(e => e.PartyId, "CARR_SHMETH_PARTY");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "CARR_SHMETH_PROLE");

                entity.HasIndex(e => e.ShipmentMethodTypeId, "CARR_SHMETH_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "CRR_SHPT_MTD_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CRR_SHPT_MTD_TXSTP");

                entity.Property(e => e.ShipmentMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_METHOD_TYPE_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.CarrierServiceCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CARRIER_SERVICE_CODE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNumber).HasColumnName("SEQUENCE_NUMBER");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.CarrierShipmentMethods)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CARR_SHMETH_PARTY");

                entity.HasOne(d => d.ShipmentMethodType)
                    .WithMany(p => p.CarrierShipmentMethods)
                    .HasForeignKey(d => d.ShipmentMethodTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CARR_SHMETH_TYPE");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.CarrierShipmentMethods)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CARR_SHMETH_PROLE");
            });

            modelBuilder.Entity<CartAbandonedLine>(entity =>
            {
                entity.HasKey(e => new { e.VisitId, e.CartAbandonedLineSeqId });

                entity.ToTable("CART_ABANDONED_LINE");

                entity.HasIndex(e => e.ProductId, "CART_ABLN_PRD");

                entity.HasIndex(e => e.ProdCatalogId, "CART_ABLN_PRDCAT");

                entity.HasIndex(e => e.CreatedTxStamp, "CRT_ABNDD_LN_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CRT_ABNDD_LN_TXSTP");

                entity.Property(e => e.VisitId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VISIT_ID");

                entity.Property(e => e.CartAbandonedLineSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CART_ABANDONED_LINE_SEQ_ID");

                entity.Property(e => e.ConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ProdCatalogId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PROD_CATALOG_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.Reserv2ndPPPerc)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("RESERV2ND_P_P_PERC");

                entity.Property(e => e.ReservLength)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("RESERV_LENGTH");

                entity.Property(e => e.ReservNthPPPerc)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("RESERV_NTH_P_P_PERC");

                entity.Property(e => e.ReservPersons)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("RESERV_PERSONS");

                entity.Property(e => e.ReservStart)
                    .HasColumnType("datetime")
                    .HasColumnName("RESERV_START");

                entity.Property(e => e.TotalWithAdjustments)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("TOTAL_WITH_ADJUSTMENTS");

                entity.Property(e => e.UnitPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("UNIT_PRICE");

                entity.Property(e => e.WasReserved)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("WAS_RESERVED")
                    .IsFixedLength();

                entity.HasOne(d => d.ProdCatalog)
                    .WithMany(p => p.CartAbandonedLines)
                    .HasForeignKey(d => d.ProdCatalogId)
                    .HasConstraintName("CART_ABLN_PRDCAT");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.CartAbandonedLines)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("CART_ABLN_PRD");
            });

            modelBuilder.Entity<CatalinaSession>(entity =>
            {
                entity.HasKey(e => e.SessionId);

                entity.ToTable("CATALINA_SESSION");

                entity.HasIndex(e => e.CreatedTxStamp, "CTLN_SSSN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CTLN_SSSN_TXSTMP");

                entity.Property(e => e.SessionId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SESSION_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.IsValid)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_VALID")
                    .IsFixedLength();

                entity.Property(e => e.LastAccessed).HasColumnName("LAST_ACCESSED");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MaxIdle).HasColumnName("MAX_IDLE");

                entity.Property(e => e.SessionInfo)
                    .HasColumnType("image")
                    .HasColumnName("SESSION_INFO");

                entity.Property(e => e.SessionSize).HasColumnName("SESSION_SIZE");
            });

            modelBuilder.Entity<CharacterSet>(entity =>
            {
                entity.ToTable("CHARACTER_SET");

                entity.HasIndex(e => e.CreatedTxStamp, "CHRCTR_ST_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CHRCTR_ST_TXSTMP");

                entity.Property(e => e.CharacterSetId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CHARACTER_SET_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<CheckAccount>(entity =>
            {
                entity.HasKey(e => e.PaymentMethodId);

                entity.ToTable("CHECK_ACCOUNT");

                entity.HasIndex(e => e.ContactMechId, "CACCT_CMECH");

                entity.HasIndex(e => e.ContactMechId, "CACCT_PADDR");

                entity.HasIndex(e => e.PaymentMethodId, "CACCT_PMETH");

                entity.HasIndex(e => e.CreatedTxStamp, "CHCK_ACCNT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CHCK_ACCNT_TXSTMP");

                entity.Property(e => e.PaymentMethodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_METHOD_ID");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_NUMBER");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_TYPE");

                entity.Property(e => e.BankName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BANK_NAME");

                entity.Property(e => e.BranchCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH_CODE");

                entity.Property(e => e.CompanyNameOnAccount)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("COMPANY_NAME_ON_ACCOUNT");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.NameOnAccount)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NAME_ON_ACCOUNT");

                entity.Property(e => e.RoutingNumber)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ROUTING_NUMBER");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.CheckAccounts)
                    .HasForeignKey(d => d.ContactMechId)
                    .HasConstraintName("CACCT_CMECH");

                entity.HasOne(d => d.ContactMechNavigation)
                    .WithMany(p => p.CheckAccounts)
                    .HasForeignKey(d => d.ContactMechId)
                    .HasConstraintName("CACCT_PADDR");

                entity.HasOne(d => d.PaymentMethod)
                    .WithOne(p => p.CheckAccount)
                    .HasForeignKey<CheckAccount>(d => d.PaymentMethodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CACCT_PMETH");
            });

            modelBuilder.Entity<CommContentAssocType>(entity =>
            {
                entity.ToTable("COMM_CONTENT_ASSOC_TYPE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CMM_CNT_ASC_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "CMM_CNT_ASC_TP_TXS");

                entity.Property(e => e.CommContentAssocTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COMM_CONTENT_ASSOC_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<CommEventContentAssoc>(entity =>
            {
                entity.HasKey(e => new { e.ContentId, e.CommunicationEventId, e.FromDate });

                entity.ToTable("COMM_EVENT_CONTENT_ASSOC");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CMM_EVT_CNT_ASC_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "CMM_EVT_CNT_ASC_TS");

                entity.HasIndex(e => e.CommunicationEventId, "COMMEV_CA_COMMEV");

                entity.HasIndex(e => e.ContentId, "COMMEV_CA_FROM");

                entity.HasIndex(e => e.CommContentAssocTypeId, "COMMEV_CA_TYP");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.CommunicationEventId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COMMUNICATION_EVENT_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CommContentAssocTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COMM_CONTENT_ASSOC_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.CommContentAssocType)
                    .WithMany(p => p.CommEventContentAssocs)
                    .HasForeignKey(d => d.CommContentAssocTypeId)
                    .HasConstraintName("COMMEV_CA_TYP");

                entity.HasOne(d => d.CommunicationEvent)
                    .WithMany(p => p.CommEventContentAssocs)
                    .HasForeignKey(d => d.CommunicationEventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("COMMEV_CA_COMMEV");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.CommEventContentAssocs)
                    .HasForeignKey(d => d.ContentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("COMMEV_CA_FROM");
            });

            modelBuilder.Entity<CommunicationEvent>(entity =>
            {
                entity.ToTable("COMMUNICATION_EVENT");

                entity.HasIndex(e => e.CreatedTxStamp, "CMMNCTN_EVT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CMMNCTN_EVT_TXSTMP");

                entity.HasIndex(e => e.MessageId, "COMMEVT_MSG_ID")
                    .IsUnique();

                entity.HasIndex(e => e.ContactListId, "COM_EVNT_CLST");

                entity.HasIndex(e => e.ContactMechTypeId, "COM_EVNT_CMTP");

                entity.HasIndex(e => e.ContactMechIdFrom, "COM_EVNT_FCM");

                entity.HasIndex(e => e.PartyIdFrom, "COM_EVNT_FPTY");

                entity.HasIndex(e => e.RoleTypeIdFrom, "COM_EVNT_FRTYP");

                entity.HasIndex(e => e.ContentMimeTypeId, "COM_EVNT_MIMETYPE");

                entity.HasIndex(e => e.ReasonEnumId, "COM_EVNT_RESENUM");

                entity.HasIndex(e => e.StatusId, "COM_EVNT_STTS");

                entity.HasIndex(e => e.ContactMechIdTo, "COM_EVNT_TCM");

                entity.HasIndex(e => e.PartyIdTo, "COM_EVNT_TPTY");

                entity.HasIndex(e => e.RoleTypeIdTo, "COM_EVNT_TRTYP");

                entity.HasIndex(e => e.CommunicationEventTypeId, "COM_EVNT_TYPE");

                entity.Property(e => e.CommunicationEventId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COMMUNICATION_EVENT_ID");

                entity.Property(e => e.BccString)
                    .HasColumnType("text")
                    .HasColumnName("BCC_STRING");

                entity.Property(e => e.CcString)
                    .HasColumnType("text")
                    .HasColumnName("CC_STRING");

                entity.Property(e => e.CommunicationEventTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COMMUNICATION_EVENT_TYPE_ID");

                entity.Property(e => e.ContactListId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_LIST_ID");

                entity.Property(e => e.ContactMechIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID_FROM");

                entity.Property(e => e.ContactMechIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID_TO");

                entity.Property(e => e.ContactMechTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_TYPE_ID");

                entity.Property(e => e.Content)
                    .HasColumnType("text")
                    .HasColumnName("CONTENT");

                entity.Property(e => e.ContentMimeTypeId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_MIME_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DatetimeEnded)
                    .HasColumnType("datetime")
                    .HasColumnName("DATETIME_ENDED");

                entity.Property(e => e.DatetimeStarted)
                    .HasColumnType("datetime")
                    .HasColumnName("DATETIME_STARTED");

                entity.Property(e => e.EntryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ENTRY_DATE");

                entity.Property(e => e.FromString)
                    .HasColumnType("text")
                    .HasColumnName("FROM_STRING");

                entity.Property(e => e.HeaderString)
                    .HasColumnType("text")
                    .HasColumnName("HEADER_STRING");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MessageId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MESSAGE_ID");

                entity.Property(e => e.Note)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NOTE");

                entity.Property(e => e.OrigCommEventId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORIG_COMM_EVENT_ID");

                entity.Property(e => e.ParentCommEventId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_COMM_EVENT_ID");

                entity.Property(e => e.PartyIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID_FROM");

                entity.Property(e => e.PartyIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID_TO");

                entity.Property(e => e.ReasonEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REASON_ENUM_ID");

                entity.Property(e => e.RoleTypeIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID_FROM");

                entity.Property(e => e.RoleTypeIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID_TO");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SUBJECT");

                entity.Property(e => e.ToString)
                    .HasColumnType("text")
                    .HasColumnName("TO_STRING");

                entity.HasOne(d => d.CommunicationEventType)
                    .WithMany(p => p.CommunicationEvents)
                    .HasForeignKey(d => d.CommunicationEventTypeId)
                    .HasConstraintName("COM_EVNT_TYPE");

                entity.HasOne(d => d.ContactList)
                    .WithMany(p => p.CommunicationEvents)
                    .HasForeignKey(d => d.ContactListId)
                    .HasConstraintName("COM_EVNT_CLST");

                entity.HasOne(d => d.ContactMechIdFromNavigation)
                    .WithMany(p => p.CommunicationEventContactMechIdFromNavigations)
                    .HasForeignKey(d => d.ContactMechIdFrom)
                    .HasConstraintName("COM_EVNT_FCM");

                entity.HasOne(d => d.ContactMechIdToNavigation)
                    .WithMany(p => p.CommunicationEventContactMechIdToNavigations)
                    .HasForeignKey(d => d.ContactMechIdTo)
                    .HasConstraintName("COM_EVNT_TCM");

                entity.HasOne(d => d.ContactMechType)
                    .WithMany(p => p.CommunicationEvents)
                    .HasForeignKey(d => d.ContactMechTypeId)
                    .HasConstraintName("COM_EVNT_CMTP");

                entity.HasOne(d => d.ContentMimeType)
                    .WithMany(p => p.CommunicationEvents)
                    .HasForeignKey(d => d.ContentMimeTypeId)
                    .HasConstraintName("COM_EVNT_MIMETYPE");

                entity.HasOne(d => d.PartyIdFromNavigation)
                    .WithMany(p => p.CommunicationEventPartyIdFromNavigations)
                    .HasForeignKey(d => d.PartyIdFrom)
                    .HasConstraintName("COM_EVNT_FPTY");

                entity.HasOne(d => d.PartyIdToNavigation)
                    .WithMany(p => p.CommunicationEventPartyIdToNavigations)
                    .HasForeignKey(d => d.PartyIdTo)
                    .HasConstraintName("COM_EVNT_TPTY");

                entity.HasOne(d => d.ReasonEnum)
                    .WithMany(p => p.CommunicationEvents)
                    .HasForeignKey(d => d.ReasonEnumId)
                    .HasConstraintName("COM_EVNT_RESENUM");

                entity.HasOne(d => d.RoleTypeIdFromNavigation)
                    .WithMany(p => p.CommunicationEventRoleTypeIdFromNavigations)
                    .HasForeignKey(d => d.RoleTypeIdFrom)
                    .HasConstraintName("COM_EVNT_FRTYP");

                entity.HasOne(d => d.RoleTypeIdToNavigation)
                    .WithMany(p => p.CommunicationEventRoleTypeIdToNavigations)
                    .HasForeignKey(d => d.RoleTypeIdTo)
                    .HasConstraintName("COM_EVNT_TRTYP");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.CommunicationEvents)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("COM_EVNT_STTS");
            });

            modelBuilder.Entity<CommunicationEventOrder>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.CommunicationEventId });

                entity.ToTable("COMMUNICATION_EVENT_ORDER");

                entity.HasIndex(e => e.CreatedTxStamp, "CMMNN_EVT_ORR_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CMMNN_EVT_ORR_TXSP");

                entity.HasIndex(e => e.CommunicationEventId, "COMEV_ORDER_CMEV");

                entity.HasIndex(e => e.OrderId, "COMEV_ORDER_ORDER");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.CommunicationEventId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COMMUNICATION_EVENT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.CommunicationEvent)
                    .WithMany(p => p.CommunicationEventOrders)
                    .HasForeignKey(d => d.CommunicationEventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("COMEV_ORDER_CMEV");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.CommunicationEventOrders)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("COMEV_ORDER_ORDER");
            });

            modelBuilder.Entity<CommunicationEventProduct>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.CommunicationEventId });

                entity.ToTable("COMMUNICATION_EVENT_PRODUCT");

                entity.HasIndex(e => e.CreatedTxStamp, "CMMNN_EVT_PRT_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CMMNN_EVT_PRT_TXSP");

                entity.HasIndex(e => e.CommunicationEventId, "COMEV_PROD_CMEV");

                entity.HasIndex(e => e.ProductId, "COMEV_PROD_PROD");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.CommunicationEventId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COMMUNICATION_EVENT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.CommunicationEvent)
                    .WithMany(p => p.CommunicationEventProducts)
                    .HasForeignKey(d => d.CommunicationEventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("COMEV_PROD_CMEV");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.CommunicationEventProducts)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("COMEV_PROD_PROD");
            });

            modelBuilder.Entity<CommunicationEventPrpTyp>(entity =>
            {
                entity.ToTable("COMMUNICATION_EVENT_PRP_TYP");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CMN_EVT_PRP_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "CMN_EVT_PRP_TP_TXS");

                entity.HasIndex(e => e.ParentTypeId, "COM_EVNT_PRP_TYP");

                entity.Property(e => e.CommunicationEventPrpTypId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COMMUNICATION_EVENT_PRP_TYP_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("COM_EVNT_PRP_TYP");
            });

            modelBuilder.Entity<CommunicationEventPurpose>(entity =>
            {
                entity.HasKey(e => new { e.CommunicationEventPrpTypId, e.CommunicationEventId });

                entity.ToTable("COMMUNICATION_EVENT_PURPOSE");

                entity.HasIndex(e => e.CreatedTxStamp, "CMMNN_EVT_PRS_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CMMNN_EVT_PRS_TXSP");

                entity.HasIndex(e => e.CommunicationEventId, "COM_EVNT_PRP_EVNT");

                entity.HasIndex(e => e.CommunicationEventPrpTypId, "COM_EVNT_PRP_TYPE");

                entity.Property(e => e.CommunicationEventPrpTypId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COMMUNICATION_EVENT_PRP_TYP_ID");

                entity.Property(e => e.CommunicationEventId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COMMUNICATION_EVENT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.CommunicationEvent)
                    .WithMany(p => p.CommunicationEventPurposes)
                    .HasForeignKey(d => d.CommunicationEventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("COM_EVNT_PRP_EVNT");

                entity.HasOne(d => d.CommunicationEventPrpTyp)
                    .WithMany(p => p.CommunicationEventPurposes)
                    .HasForeignKey(d => d.CommunicationEventPrpTypId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("COM_EVNT_PRP_TYPE");
            });

            modelBuilder.Entity<CommunicationEventReturn>(entity =>
            {
                entity.HasKey(e => new { e.ReturnId, e.CommunicationEventId });

                entity.ToTable("COMMUNICATION_EVENT_RETURN");

                entity.HasIndex(e => e.CreatedTxStamp, "CMMNN_EVT_RTN_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CMMNN_EVT_RTN_TXSP");

                entity.HasIndex(e => e.ReturnId, "COMEV_ORDER_RETURN");

                entity.HasIndex(e => e.CommunicationEventId, "COMEV_RETURN_CMEV");

                entity.Property(e => e.ReturnId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ID");

                entity.Property(e => e.CommunicationEventId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COMMUNICATION_EVENT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.CommunicationEvent)
                    .WithMany(p => p.CommunicationEventReturns)
                    .HasForeignKey(d => d.CommunicationEventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("COMEV_RETURN_CMEV");

                entity.HasOne(d => d.Return)
                    .WithMany(p => p.CommunicationEventReturns)
                    .HasForeignKey(d => d.ReturnId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("COMEV_ORDER_RETURN");
            });

            modelBuilder.Entity<CommunicationEventRole>(entity =>
            {
                entity.HasKey(e => new { e.CommunicationEventId, e.PartyId, e.RoleTypeId });

                entity.ToTable("COMMUNICATION_EVENT_ROLE");

                entity.HasIndex(e => e.CreatedTxStamp, "CMMNN_EVT_RL_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CMMNN_EVT_RL_TXSTP");

                entity.HasIndex(e => e.ContactMechId, "COM_EVRL_CMCH");

                entity.HasIndex(e => e.CommunicationEventId, "COM_EVRL_CMEV");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "COM_EVRL_PRLE");

                entity.HasIndex(e => e.PartyId, "COM_EVRL_PTY");

                entity.HasIndex(e => e.StatusId, "COM_EVRL_STTS");

                entity.Property(e => e.CommunicationEventId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COMMUNICATION_EVENT_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.HasOne(d => d.CommunicationEvent)
                    .WithMany(p => p.CommunicationEventRoles)
                    .HasForeignKey(d => d.CommunicationEventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("COM_EVRL_CMEV");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.CommunicationEventRoles)
                    .HasForeignKey(d => d.ContactMechId)
                    .HasConstraintName("COM_EVRL_CMCH");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.CommunicationEventRoles)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("COM_EVRL_PTY");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.CommunicationEventRoles)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("COM_EVRL_STTS");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.CommunicationEventRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("COM_EVRL_PRLE");
            });

            modelBuilder.Entity<CommunicationEventType>(entity =>
            {
                entity.ToTable("COMMUNICATION_EVENT_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "CMMNN_EVT_TP_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CMMNN_EVT_TP_TXSTP");

                entity.HasIndex(e => e.ContactMechTypeId, "COM_EVNT_TYPE_CMT");

                entity.HasIndex(e => e.ParentTypeId, "COM_EVNT_TYPE_PAR");

                entity.Property(e => e.CommunicationEventTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COMMUNICATION_EVENT_TYPE_ID");

                entity.Property(e => e.ContactMechTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ContactMechType)
                    .WithMany(p => p.CommunicationEventTypes)
                    .HasForeignKey(d => d.ContactMechTypeId)
                    .HasConstraintName("COM_EVNT_TYPE_CMT");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("COM_EVNT_TYPE_PAR");
            });

            modelBuilder.Entity<CommunicationEventWorkEff>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortId, e.CommunicationEventId })
                    .HasName("PK_COMMUNICATION_EVENT_WORK_EF");

                entity.ToTable("COMMUNICATION_EVENT_WORK_EFF");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CMN_EVT_WRK_EFF_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "CMN_EVT_WRK_EFF_TS");

                entity.HasIndex(e => e.CommunicationEventId, "COMEV_WEFF_CMEV");

                entity.HasIndex(e => e.WorkEffortId, "COMEV_WEFF_WEFF");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.CommunicationEventId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COMMUNICATION_EVENT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.CommunicationEvent)
                    .WithMany(p => p.CommunicationEventWorkEffs)
                    .HasForeignKey(d => d.CommunicationEventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("COMEV_WEFF_CMEV");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.CommunicationEventWorkEffs)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("COMEV_WEFF_WEFF");
            });

            modelBuilder.Entity<Component>(entity =>
            {
                entity.HasKey(e => e.ComponentName);

                entity.ToTable("COMPONENT");

                entity.HasIndex(e => e.CreatedTxStamp, "COMPONENT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "COMPONENT_TXSTMP");

                entity.Property(e => e.ComponentName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("COMPONENT_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.RootLocation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ROOT_LOCATION");
            });

            modelBuilder.Entity<ConfigOptionProductOption>(entity =>
            {
                entity.HasKey(e => new { e.ConfigId, e.ConfigItemId, e.ConfigOptionId, e.SequenceNum, e.ProductId })
                    .HasName("PK_CONFIG_OPTION_PRODUCT_OPTIO");

                entity.ToTable("CONFIG_OPTION_PRODUCT_OPTION");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNG_OPN_PRT_OPN_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "CNG_OPN_PRT_OPN_TS");

                entity.HasIndex(e => new { e.ConfigId, e.ConfigItemId, e.ConfigOptionId, e.SequenceNum }, "PROD_OPTN_CONF");

                entity.HasIndex(e => new { e.ConfigItemId, e.ConfigOptionId, e.ProductId }, "PROD_OPTN_PROD");

                entity.Property(e => e.ConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_ID");

                entity.Property(e => e.ConfigItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_ITEM_ID");

                entity.Property(e => e.ConfigOptionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_OPTION_ID");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ProductOptionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_OPTION_ID");

                entity.HasOne(d => d.ProductConfigProduct)
                    .WithMany(p => p.ConfigOptionProductOptions)
                    .HasForeignKey(d => new { d.ConfigItemId, d.ConfigOptionId, d.ProductId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_OPTN_PROD");

                entity.HasOne(d => d.ProductConfigConfig)
                    .WithMany(p => p.ConfigOptionProductOptions)
                    .HasForeignKey(d => new { d.ConfigId, d.ConfigItemId, d.ConfigOptionId, d.SequenceNum })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_OPTN_CONF");
            });

            modelBuilder.Entity<ContactList>(entity =>
            {
                entity.ToTable("CONTACT_LIST");

                entity.HasIndex(e => e.CreatedByUserLogin, "CNCT_LST_CBUL");

                entity.HasIndex(e => e.ContactMechTypeId, "CNCT_LST_CMCHTP");

                entity.HasIndex(e => e.LastModifiedByUserLogin, "CNCT_LST_LMUL");

                entity.HasIndex(e => e.MarketingCampaignId, "CNCT_LST_MKCMPN");

                entity.HasIndex(e => e.OwnerPartyId, "CNCT_LST_OPTY");

                entity.HasIndex(e => e.ContactListTypeId, "CNCT_LST_TYP");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTCT_LST_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTCT_LST_TXSTMP");

                entity.Property(e => e.ContactListId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_LIST_ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.ContactListName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_LIST_NAME");

                entity.Property(e => e.ContactListTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_LIST_TYPE_ID");

                entity.Property(e => e.ContactMechTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_TYPE_ID");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsPublic)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_PUBLIC")
                    .IsFixedLength();

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MarketingCampaignId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MARKETING_CAMPAIGN_ID");

                entity.Property(e => e.OptOutScreen)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OPT_OUT_SCREEN");

                entity.Property(e => e.OwnerPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("OWNER_PARTY_ID");

                entity.Property(e => e.SingleUse)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SINGLE_USE")
                    .IsFixedLength();

                entity.Property(e => e.VerifyEmailFrom)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VERIFY_EMAIL_FROM");

                entity.Property(e => e.VerifyEmailScreen)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VERIFY_EMAIL_SCREEN");

                entity.Property(e => e.VerifyEmailSubject)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VERIFY_EMAIL_SUBJECT");

                entity.Property(e => e.VerifyEmailWebSiteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VERIFY_EMAIL_WEB_SITE_ID");

                entity.HasOne(d => d.ContactListType)
                    .WithMany(p => p.ContactLists)
                    .HasForeignKey(d => d.ContactListTypeId)
                    .HasConstraintName("CNCT_LST_TYP");

                entity.HasOne(d => d.ContactMechType)
                    .WithMany(p => p.ContactLists)
                    .HasForeignKey(d => d.ContactMechTypeId)
                    .HasConstraintName("CNCT_LST_CMCHTP");

                entity.HasOne(d => d.CreatedByUserLoginNavigation)
                    .WithMany(p => p.ContactListCreatedByUserLoginNavigations)
                    .HasForeignKey(d => d.CreatedByUserLogin)
                    .HasConstraintName("CNCT_LST_CBUL");

                entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                    .WithMany(p => p.ContactListLastModifiedByUserLoginNavigations)
                    .HasForeignKey(d => d.LastModifiedByUserLogin)
                    .HasConstraintName("CNCT_LST_LMUL");

                entity.HasOne(d => d.MarketingCampaign)
                    .WithMany(p => p.ContactLists)
                    .HasForeignKey(d => d.MarketingCampaignId)
                    .HasConstraintName("CNCT_LST_MKCMPN");

                entity.HasOne(d => d.OwnerParty)
                    .WithMany(p => p.ContactLists)
                    .HasForeignKey(d => d.OwnerPartyId)
                    .HasConstraintName("CNCT_LST_OPTY");
            });

            modelBuilder.Entity<ContactListCommStatus>(entity =>
            {
                entity.HasKey(e => new { e.ContactListId, e.CommunicationEventId, e.ContactMechId });

                entity.ToTable("CONTACT_LIST_COMM_STATUS");

                entity.HasIndex(e => e.CommunicationEventId, "CNCT_LST_CST_CE");

                entity.HasIndex(e => e.ContactListId, "CNCT_LST_CST_CL");

                entity.HasIndex(e => e.ContactMechId, "CNCT_LST_CST_CM");

                entity.HasIndex(e => e.PartyId, "CNCT_LST_CST_PT");

                entity.HasIndex(e => e.StatusId, "CNCT_LST_CST_ST");

                entity.HasIndex(e => e.ChangeByUserLoginId, "CNCT_LST_CST_ST_UL");

                entity.HasIndex(e => e.MessageId, "CNTLSTCST_MSG_ID")
                    .IsUnique();

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNT_LST_CMM_STS_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "CNT_LST_CMM_STS_TS");

                entity.Property(e => e.ContactListId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_LIST_ID");

                entity.Property(e => e.CommunicationEventId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COMMUNICATION_EVENT_ID");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.ChangeByUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MessageId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MESSAGE_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.HasOne(d => d.ChangeByUserLogin)
                    .WithMany(p => p.ContactListCommStatuses)
                    .HasForeignKey(d => d.ChangeByUserLoginId)
                    .HasConstraintName("CNCT_LST_CST_ST_UL");

                entity.HasOne(d => d.CommunicationEvent)
                    .WithMany(p => p.ContactListCommStatuses)
                    .HasForeignKey(d => d.CommunicationEventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CNCT_LST_CST_CE");

                entity.HasOne(d => d.ContactList)
                    .WithMany(p => p.ContactListCommStatuses)
                    .HasForeignKey(d => d.ContactListId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CNCT_LST_CST_CL");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.ContactListCommStatuses)
                    .HasForeignKey(d => d.ContactMechId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CNCT_LST_CST_CM");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.ContactListCommStatuses)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("CNCT_LST_CST_PT");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ContactListCommStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("CNCT_LST_CST_ST");
            });

            modelBuilder.Entity<ContactListParty>(entity =>
            {
                entity.HasKey(e => new { e.ContactListId, e.PartyId, e.FromDate });

                entity.ToTable("CONTACT_LIST_PARTY");

                entity.HasIndex(e => e.ContactListId, "CNCT_LSTPTY_CLST");

                entity.HasIndex(e => e.PreferredContactMechId, "CNCT_LSTPTY_PCM");

                entity.HasIndex(e => e.PartyId, "CNCT_LSTPTY_PTY");

                entity.HasIndex(e => e.StatusId, "CNCT_LSTPTY_STS");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTT_LST_PRT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTT_LST_PRT_TXSTP");

                entity.Property(e => e.ContactListId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_LIST_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PreferredContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PREFERRED_CONTACT_MECH_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ContactList)
                    .WithMany(p => p.ContactListParties)
                    .HasForeignKey(d => d.ContactListId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CNCT_LSTPTY_CLST");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.ContactListParties)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CNCT_LSTPTY_PTY");

                entity.HasOne(d => d.PreferredContactMech)
                    .WithMany(p => p.ContactListParties)
                    .HasForeignKey(d => d.PreferredContactMechId)
                    .HasConstraintName("CNCT_LSTPTY_PCM");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ContactListParties)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("CNCT_LSTPTY_STS");
            });

            modelBuilder.Entity<ContactListPartyStatus>(entity =>
            {
                entity.HasKey(e => new { e.ContactListId, e.PartyId, e.FromDate, e.StatusDate });

                entity.ToTable("CONTACT_LIST_PARTY_STATUS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNT_LST_PRT_STS_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "CNT_LST_PRT_STS_TS");

                entity.HasIndex(e => new { e.ContactListId, e.PartyId, e.FromDate }, "CTLSTPTST_CLP");

                entity.Property(e => e.ContactListId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_LIST_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.StatusDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STATUS_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OptInVerifyCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("OPT_IN_VERIFY_CODE");

                entity.Property(e => e.SetByUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SET_BY_USER_LOGIN_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.HasOne(d => d.ContactListParty)
                    .WithMany(p => p.ContactListPartyStatuses)
                    .HasForeignKey(d => new { d.ContactListId, d.PartyId, d.FromDate })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CTLSTPTST_CLP");
            });

            modelBuilder.Entity<ContactListType>(entity =>
            {
                entity.ToTable("CONTACT_LIST_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTT_LST_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTT_LST_TP_TXSTMP");

                entity.Property(e => e.ContactListTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_LIST_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<ContactMech>(entity =>
            {
                entity.ToTable("CONTACT_MECH");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTCT_MCH_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTCT_MCH_TXSTMP");

                entity.HasIndex(e => e.ContactMechTypeId, "CONT_MECH_TYPE");

                entity.HasIndex(e => e.InfoString, "INFO_STRING_IDX");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.ContactMechTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.InfoString)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("INFO_STRING");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ContactMechType)
                    .WithMany(p => p.ContactMeches)
                    .HasForeignKey(d => d.ContactMechTypeId)
                    .HasConstraintName("CONT_MECH_TYPE");
            });

            modelBuilder.Entity<ContactMechAttribute>(entity =>
            {
                entity.HasKey(e => new { e.ContactMechId, e.AttrName });

                entity.ToTable("CONTACT_MECH_ATTRIBUTE");

                entity.HasIndex(e => e.CreatedTxStamp, "CNT_MCH_ATTT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNT_MCH_ATTT_TXSTP");

                entity.HasIndex(e => e.ContactMechId, "CONT_MECH_ATTR");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.ContactMechAttributes)
                    .HasForeignKey(d => d.ContactMechId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CONT_MECH_ATTR");
            });

            modelBuilder.Entity<ContactMechLink>(entity =>
            {
                entity.HasKey(e => new { e.ContactMechIdFrom, e.ContactMechIdTo });

                entity.ToTable("CONTACT_MECH_LINK");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTT_MCH_LNK_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTT_MCH_LNK_TXSTP");

                entity.HasIndex(e => e.ContactMechIdFrom, "CONT_MECH_FCMECH");

                entity.HasIndex(e => e.ContactMechIdTo, "CONT_MECH_TCMECH");

                entity.Property(e => e.ContactMechIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID_FROM");

                entity.Property(e => e.ContactMechIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID_TO");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ContactMechIdFromNavigation)
                    .WithMany(p => p.ContactMechLinkContactMechIdFromNavigations)
                    .HasForeignKey(d => d.ContactMechIdFrom)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CONT_MECH_FCMECH");

                entity.HasOne(d => d.ContactMechIdToNavigation)
                    .WithMany(p => p.ContactMechLinkContactMechIdToNavigations)
                    .HasForeignKey(d => d.ContactMechIdTo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CONT_MECH_TCMECH");
            });

            modelBuilder.Entity<ContactMechPurposeType>(entity =>
            {
                entity.ToTable("CONTACT_MECH_PURPOSE_TYPE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNT_MCH_PRS_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "CNT_MCH_PRS_TP_TXS");

                entity.Property(e => e.ContactMechPurposeTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_PURPOSE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");
            });

            modelBuilder.Entity<ContactMechType>(entity =>
            {
                entity.ToTable("CONTACT_MECH_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTT_MCH_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTT_MCH_TP_TXSTMP");

                entity.HasIndex(e => e.ParentTypeId, "CONT_MECH_TYP_PAR");

                entity.Property(e => e.ContactMechTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("CONT_MECH_TYP_PAR");
            });

            modelBuilder.Entity<ContactMechTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.ContactMechTypeId, e.AttrName });

                entity.ToTable("CONTACT_MECH_TYPE_ATTR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNT_MCH_TP_ATR_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "CNT_MCH_TP_ATR_TXS");

                entity.HasIndex(e => e.ContactMechTypeId, "CONT_MECH_TYP_ATR");

                entity.Property(e => e.ContactMechTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ContactMechType)
                    .WithMany(p => p.ContactMechTypeAttrs)
                    .HasForeignKey(d => d.ContactMechTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CONT_MECH_TYP_ATR");
            });

            modelBuilder.Entity<ContactMechTypePurpose>(entity =>
            {
                entity.HasKey(e => new { e.ContactMechTypeId, e.ContactMechPurposeTypeId });

                entity.ToTable("CONTACT_MECH_TYPE_PURPOSE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNT_MCH_TP_PRS_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "CNT_MCH_TP_PRS_TXS");

                entity.HasIndex(e => e.ContactMechPurposeTypeId, "CONT_MECH_TP_PRPTP");

                entity.HasIndex(e => e.ContactMechTypeId, "CONT_MECH_TP_TYPE");

                entity.Property(e => e.ContactMechTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_TYPE_ID");

                entity.Property(e => e.ContactMechPurposeTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_PURPOSE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ContactMechPurposeType)
                    .WithMany(p => p.ContactMechTypePurposes)
                    .HasForeignKey(d => d.ContactMechPurposeTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CONT_MECH_TP_PRPTP");

                entity.HasOne(d => d.ContactMechType)
                    .WithMany(p => p.ContactMechTypePurposes)
                    .HasForeignKey(d => d.ContactMechTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CONT_MECH_TP_TYPE");
            });

            modelBuilder.Entity<Container>(entity =>
            {
                entity.ToTable("CONTAINER");

                entity.HasIndex(e => e.ContainerTypeId, "CONTAINER_CTTYP");

                entity.HasIndex(e => e.FacilityId, "CONTAINER_FACILITY");

                entity.HasIndex(e => e.CreatedTxStamp, "CONTAINER_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CONTAINER_TXSTMP");

                entity.Property(e => e.ContainerId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTAINER_ID");

                entity.Property(e => e.ContainerTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTAINER_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ContainerType)
                    .WithMany(p => p.Containers)
                    .HasForeignKey(d => d.ContainerTypeId)
                    .HasConstraintName("CONTAINER_CTTYP");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.Containers)
                    .HasForeignKey(d => d.FacilityId)
                    .HasConstraintName("CONTAINER_FACILITY");
            });

            modelBuilder.Entity<ContainerGeoPoint>(entity =>
            {
                entity.HasKey(e => new { e.ContainerId, e.GeoPointId, e.FromDate });

                entity.ToTable("CONTAINER_GEO_POINT");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTNR_G_PNT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTNR_G_PNT_TXSTMP");

                entity.HasIndex(e => e.ContainerId, "CONTNRGEOPT_CONTNR");

                entity.HasIndex(e => e.GeoPointId, "CONTNRGEOPT_GEOPT");

                entity.Property(e => e.ContainerId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTAINER_ID");

                entity.Property(e => e.GeoPointId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_POINT_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Container)
                    .WithMany(p => p.ContainerGeoPoints)
                    .HasForeignKey(d => d.ContainerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CONTNRGEOPT_CONTNR");

                entity.HasOne(d => d.GeoPoint)
                    .WithMany(p => p.ContainerGeoPoints)
                    .HasForeignKey(d => d.GeoPointId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CONTNRGEOPT_GEOPT");
            });

            modelBuilder.Entity<ContainerType>(entity =>
            {
                entity.ToTable("CONTAINER_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTNR_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTNR_TP_TXSTMP");

                entity.Property(e => e.ContainerTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTAINER_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<Content>(entity =>
            {
                entity.ToTable("CONTENT");

                entity.HasIndex(e => e.CreatedByUserLogin, "CONTENT_CB_ULGN");

                entity.HasIndex(e => e.CharacterSetId, "CONTENT_CHST");

                entity.HasIndex(e => e.CustomMethodId, "CONTENT_CUSTMET");

                entity.HasIndex(e => e.DecoratorContentId, "CONTENT_DCNTNT");

                entity.HasIndex(e => e.DataSourceId, "CONTENT_DTSRC");

                entity.HasIndex(e => e.InstanceOfContentId, "CONTENT_IOFCNT");

                entity.HasIndex(e => e.LastModifiedByUserLogin, "CONTENT_LMB_ULGN");

                entity.HasIndex(e => e.OwnerContentId, "CONTENT_PCNTNT");

                entity.HasIndex(e => e.PrivilegeEnumId, "CONTENT_PRIVENM");

                entity.HasIndex(e => e.StatusId, "CONTENT_STATUS");

                entity.HasIndex(e => e.DataResourceId, "CONTENT_TO_DATA");

                entity.HasIndex(e => e.TemplateDataResourceId, "CONTENT_TO_TMPDATA");

                entity.HasIndex(e => e.ContentTypeId, "CONTENT_TO_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "CONTENT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CONTENT_TXSTMP");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.CharacterSetId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CHARACTER_SET_ID");

                entity.Property(e => e.ChildBranchCount).HasColumnName("CHILD_BRANCH_COUNT");

                entity.Property(e => e.ChildLeafCount).HasColumnName("CHILD_LEAF_COUNT");

                entity.Property(e => e.ContentName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_NAME");

                entity.Property(e => e.ContentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_TYPE_ID");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CustomMethodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_METHOD_ID");

                entity.Property(e => e.DataResourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_RESOURCE_ID");

                entity.Property(e => e.DataSourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_SOURCE_ID");

                entity.Property(e => e.DecoratorContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DECORATOR_CONTENT_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InstanceOfContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INSTANCE_OF_CONTENT_ID");

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LocaleString)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOCALE_STRING");

                entity.Property(e => e.MimeTypeId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("MIME_TYPE_ID");

                entity.Property(e => e.OwnerContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("OWNER_CONTENT_ID");

                entity.Property(e => e.PrivilegeEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRIVILEGE_ENUM_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SERVICE_NAME");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.TemplateDataResourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TEMPLATE_DATA_RESOURCE_ID");

                entity.HasOne(d => d.CharacterSet)
                    .WithMany(p => p.Contents)
                    .HasForeignKey(d => d.CharacterSetId)
                    .HasConstraintName("CONTENT_CHST");

                entity.HasOne(d => d.ContentType)
                    .WithMany(p => p.Contents)
                    .HasForeignKey(d => d.ContentTypeId)
                    .HasConstraintName("CONTENT_TO_TYPE");

                entity.HasOne(d => d.CreatedByUserLoginNavigation)
                    .WithMany(p => p.ContentCreatedByUserLoginNavigations)
                    .HasForeignKey(d => d.CreatedByUserLogin)
                    .HasConstraintName("CONTENT_CB_ULGN");

                entity.HasOne(d => d.CustomMethod)
                    .WithMany(p => p.Contents)
                    .HasForeignKey(d => d.CustomMethodId)
                    .HasConstraintName("CONTENT_CUSTMET");

                entity.HasOne(d => d.DataResource)
                    .WithMany(p => p.ContentDataResources)
                    .HasForeignKey(d => d.DataResourceId)
                    .HasConstraintName("CONTENT_TO_DATA");

                entity.HasOne(d => d.DataSource)
                    .WithMany(p => p.Contents)
                    .HasForeignKey(d => d.DataSourceId)
                    .HasConstraintName("CONTENT_DTSRC");

                entity.HasOne(d => d.DecoratorContent)
                    .WithMany(p => p.InverseDecoratorContent)
                    .HasForeignKey(d => d.DecoratorContentId)
                    .HasConstraintName("CONTENT_DCNTNT");

                entity.HasOne(d => d.InstanceOfContent)
                    .WithMany(p => p.InverseInstanceOfContent)
                    .HasForeignKey(d => d.InstanceOfContentId)
                    .HasConstraintName("CONTENT_IOFCNT");

                entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                    .WithMany(p => p.ContentLastModifiedByUserLoginNavigations)
                    .HasForeignKey(d => d.LastModifiedByUserLogin)
                    .HasConstraintName("CONTENT_LMB_ULGN");

                entity.HasOne(d => d.OwnerContent)
                    .WithMany(p => p.InverseOwnerContent)
                    .HasForeignKey(d => d.OwnerContentId)
                    .HasConstraintName("CONTENT_PCNTNT");

                entity.HasOne(d => d.PrivilegeEnum)
                    .WithMany(p => p.Contents)
                    .HasForeignKey(d => d.PrivilegeEnumId)
                    .HasConstraintName("CONTENT_PRIVENM");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Contents)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("CONTENT_STATUS");

                entity.HasOne(d => d.TemplateDataResource)
                    .WithMany(p => p.ContentTemplateDataResources)
                    .HasForeignKey(d => d.TemplateDataResourceId)
                    .HasConstraintName("CONTENT_TO_TMPDATA");
            });

            modelBuilder.Entity<ContentApproval>(entity =>
            {
                entity.ToTable("CONTENT_APPROVAL");

                entity.HasIndex(e => e.ApprovalStatusId, "CNTNTAPPR_APSI");

                entity.HasIndex(e => e.ContentId, "CNTNTAPPR_CNT");

                entity.HasIndex(e => e.PartyId, "CNTNTAPPR_PTY");

                entity.HasIndex(e => e.RoleTypeId, "CNTNTAPPR_RLTP");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTNT_APPRL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTNT_APPRL_TXSTMP");

                entity.Property(e => e.ContentApprovalId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_APPROVAL_ID");

                entity.Property(e => e.ApprovalDate)
                    .HasColumnType("datetime")
                    .HasColumnName("APPROVAL_DATE");

                entity.Property(e => e.ApprovalStatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("APPROVAL_STATUS_ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.ContentRevisionSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_REVISION_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.HasOne(d => d.ApprovalStatus)
                    .WithMany(p => p.ContentApprovals)
                    .HasForeignKey(d => d.ApprovalStatusId)
                    .HasConstraintName("CNTNTAPPR_APSI");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.ContentApprovals)
                    .HasForeignKey(d => d.ContentId)
                    .HasConstraintName("CNTNTAPPR_CNT");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.ContentApprovals)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("CNTNTAPPR_PTY");

                entity.HasOne(d => d.RoleType)
                    .WithMany(p => p.ContentApprovals)
                    .HasForeignKey(d => d.RoleTypeId)
                    .HasConstraintName("CNTNTAPPR_RLTP");
            });

            modelBuilder.Entity<ContentAssoc>(entity =>
            {
                entity.HasKey(e => new { e.ContentId, e.ContentIdTo, e.ContentAssocTypeId, e.FromDate });

                entity.ToTable("CONTENT_ASSOC");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTNT_ASSC_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTNT_ASSC_TXSTMP");

                entity.HasIndex(e => e.CreatedByUserLogin, "CONTENTASSC_CBUSR");

                entity.HasIndex(e => e.DataSourceId, "CONTENTASSC_DTSRC");

                entity.HasIndex(e => e.ContentId, "CONTENTASSC_FROM");

                entity.HasIndex(e => e.LastModifiedByUserLogin, "CONTENTASSC_LMBUR");

                entity.HasIndex(e => e.ContentAssocPredicateId, "CONTENTASSC_PRED");

                entity.HasIndex(e => e.ContentIdTo, "CONTENTASSC_TO");

                entity.HasIndex(e => new { e.ContentIdTo, e.ContentAssocTypeId, e.ThruDate }, "CONTENTASSC_TOQRY");

                entity.HasIndex(e => e.ContentAssocTypeId, "CONTENTASSC_TYP");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.ContentIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID_TO");

                entity.Property(e => e.ContentAssocTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ASSOC_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.ContentAssocPredicateId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ASSOC_PREDICATE_ID");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DataSourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_SOURCE_ID");

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LeftCoordinate).HasColumnName("LEFT_COORDINATE");

                entity.Property(e => e.MapKey)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MAP_KEY");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.Property(e => e.UpperCoordinate).HasColumnName("UPPER_COORDINATE");

                entity.HasOne(d => d.ContentAssocPredicate)
                    .WithMany(p => p.ContentAssocs)
                    .HasForeignKey(d => d.ContentAssocPredicateId)
                    .HasConstraintName("CONTENTASSC_PRED");

                entity.HasOne(d => d.ContentAssocType)
                    .WithMany(p => p.ContentAssocs)
                    .HasForeignKey(d => d.ContentAssocTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CONTENTASSC_TYP");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.ContentAssocContents)
                    .HasForeignKey(d => d.ContentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CONTENTASSC_FROM");

                entity.HasOne(d => d.ContentIdToNavigation)
                    .WithMany(p => p.ContentAssocContentIdToNavigations)
                    .HasForeignKey(d => d.ContentIdTo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CONTENTASSC_TO");

                entity.HasOne(d => d.CreatedByUserLoginNavigation)
                    .WithMany(p => p.ContentAssocCreatedByUserLoginNavigations)
                    .HasForeignKey(d => d.CreatedByUserLogin)
                    .HasConstraintName("CONTENTASSC_CBUSR");

                entity.HasOne(d => d.DataSource)
                    .WithMany(p => p.ContentAssocs)
                    .HasForeignKey(d => d.DataSourceId)
                    .HasConstraintName("CONTENTASSC_DTSRC");

                entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                    .WithMany(p => p.ContentAssocLastModifiedByUserLoginNavigations)
                    .HasForeignKey(d => d.LastModifiedByUserLogin)
                    .HasConstraintName("CONTENTASSC_LMBUR");
            });

            modelBuilder.Entity<ContentAssocPredicate>(entity =>
            {
                entity.ToTable("CONTENT_ASSOC_PREDICATE");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTT_ASC_PRT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTT_ASC_PRT_TXSTP");

                entity.Property(e => e.ContentAssocPredicateId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ASSOC_PREDICATE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<ContentAssocType>(entity =>
            {
                entity.ToTable("CONTENT_ASSOC_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTT_ASC_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTT_ASC_TP_TXSTMP");

                entity.Property(e => e.ContentAssocTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ASSOC_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<ContentAttribute>(entity =>
            {
                entity.HasKey(e => new { e.ContentId, e.AttrName });

                entity.ToTable("CONTENT_ATTRIBUTE");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTNT_ATTRT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTNT_ATTRT_TXSTMP");

                entity.HasIndex(e => e.ContentId, "CONTENT_ATTR");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.ContentAttributes)
                    .HasForeignKey(d => d.ContentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CONTENT_ATTR");
            });

            modelBuilder.Entity<ContentKeyword>(entity =>
            {
                entity.HasKey(e => new { e.ContentId, e.Keyword });

                entity.ToTable("CONTENT_KEYWORD");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTNT_KWRD_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTNT_KWRD_TXSTMP");

                entity.HasIndex(e => e.ContentId, "CNT_KWD_CNT");

                entity.HasIndex(e => e.Keyword, "CNT_KWD_KWD");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.Keyword)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("KEYWORD");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.RelevancyWeight).HasColumnName("RELEVANCY_WEIGHT");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.ContentKeywords)
                    .HasForeignKey(d => d.ContentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CNT_KWD_CNT");
            });

            modelBuilder.Entity<ContentMetaDatum>(entity =>
            {
                entity.HasKey(e => new { e.ContentId, e.MetaDataPredicateId });

                entity.ToTable("CONTENT_META_DATA");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTNT_MT_DT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTNT_MT_DT_TXSTMP");

                entity.HasIndex(e => e.ContentId, "CONTENTMD_CNTNT");

                entity.HasIndex(e => e.MetaDataPredicateId, "CONTENTMD_DMDPRD");

                entity.HasIndex(e => e.DataSourceId, "CONTENTMD_DTSRC");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.MetaDataPredicateId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("META_DATA_PREDICATE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DataSourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_SOURCE_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MetaDataValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("META_DATA_VALUE");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.ContentMetaData)
                    .HasForeignKey(d => d.ContentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CONTENTMD_CNTNT");

                entity.HasOne(d => d.DataSource)
                    .WithMany(p => p.ContentMetaData)
                    .HasForeignKey(d => d.DataSourceId)
                    .HasConstraintName("CONTENTMD_DTSRC");

                entity.HasOne(d => d.MetaDataPredicate)
                    .WithMany(p => p.ContentMetaData)
                    .HasForeignKey(d => d.MetaDataPredicateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CONTENTMD_DMDPRD");
            });

            modelBuilder.Entity<ContentOperation>(entity =>
            {
                entity.ToTable("CONTENT_OPERATION");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTNT_OPRTN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTNT_OPRTN_TXSTMP");

                entity.Property(e => e.ContentOperationId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_OPERATION_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<ContentPurpose>(entity =>
            {
                entity.HasKey(e => new { e.ContentId, e.ContentPurposeTypeId });

                entity.ToTable("CONTENT_PURPOSE");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTNT_PRPS_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTNT_PRPS_TXSTMP");

                entity.HasIndex(e => e.ContentId, "CONTENT_PRP");

                entity.HasIndex(e => e.ContentPurposeTypeId, "CONTENT_PRP_TYPE");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.ContentPurposeTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_PURPOSE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.ContentPurposes)
                    .HasForeignKey(d => d.ContentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CONTENT_PRP");

                entity.HasOne(d => d.ContentPurposeType)
                    .WithMany(p => p.ContentPurposes)
                    .HasForeignKey(d => d.ContentPurposeTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CONTENT_PRP_TYPE");
            });

            modelBuilder.Entity<ContentPurposeOperation>(entity =>
            {
                entity.HasKey(e => new { e.ContentPurposeTypeId, e.ContentOperationId, e.RoleTypeId, e.StatusId, e.PrivilegeEnumId });

                entity.ToTable("CONTENT_PURPOSE_OPERATION");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTT_PRS_OPN_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTT_PRS_OPN_TXSTP");

                entity.HasIndex(e => e.ContentOperationId, "CONTENT_PRO_OPER");

                entity.HasIndex(e => e.PrivilegeEnumId, "CONTENT_PRO_PEI");

                entity.HasIndex(e => e.RoleTypeId, "CONTENT_PRO_RLT");

                entity.HasIndex(e => e.StatusId, "CONTENT_PRO_STI");

                entity.HasIndex(e => e.ContentPurposeTypeId, "CONTENT_PRO_TYPE");

                entity.Property(e => e.ContentPurposeTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_PURPOSE_TYPE_ID");

                entity.Property(e => e.ContentOperationId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_OPERATION_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.PrivilegeEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRIVILEGE_ENUM_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ContentOperation)
                    .WithMany(p => p.ContentPurposeOperations)
                    .HasForeignKey(d => d.ContentOperationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CONTENT_PRO_OPER");

                entity.HasOne(d => d.ContentPurposeType)
                    .WithMany(p => p.ContentPurposeOperations)
                    .HasForeignKey(d => d.ContentPurposeTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CONTENT_PRO_TYPE");

                entity.HasOne(d => d.PrivilegeEnum)
                    .WithMany(p => p.ContentPurposeOperations)
                    .HasForeignKey(d => d.PrivilegeEnumId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CONTENT_PRO_PEI");

                entity.HasOne(d => d.RoleType)
                    .WithMany(p => p.ContentPurposeOperations)
                    .HasForeignKey(d => d.RoleTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CONTENT_PRO_RLT");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ContentPurposeOperations)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CONTENT_PRO_STI");
            });

            modelBuilder.Entity<ContentPurposeType>(entity =>
            {
                entity.ToTable("CONTENT_PURPOSE_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTT_PRS_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTT_PRS_TP_TXSTMP");

                entity.Property(e => e.ContentPurposeTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_PURPOSE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<ContentRevision>(entity =>
            {
                entity.HasKey(e => new { e.ContentId, e.ContentRevisionSeqId });

                entity.ToTable("CONTENT_REVISION");

                entity.HasIndex(e => e.CommittedByPartyId, "CNTNTREV_CBPTY");

                entity.HasIndex(e => e.ContentId, "CNTNTREV_CNT");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTNT_RVSN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTNT_RVSN_TXSTMP");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.ContentRevisionSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_REVISION_SEQ_ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CommittedByPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COMMITTED_BY_PARTY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.CommittedByParty)
                    .WithMany(p => p.ContentRevisions)
                    .HasForeignKey(d => d.CommittedByPartyId)
                    .HasConstraintName("CNTNTREV_CBPTY");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.ContentRevisions)
                    .HasForeignKey(d => d.ContentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CNTNTREV_CNT");
            });

            modelBuilder.Entity<ContentRevisionItem>(entity =>
            {
                entity.HasKey(e => new { e.ContentId, e.ContentRevisionSeqId, e.ItemContentId });

                entity.ToTable("CONTENT_REVISION_ITEM");

                entity.HasIndex(e => new { e.ContentId, e.ContentRevisionSeqId }, "CNTNTREVIT_CNTREV");

                entity.HasIndex(e => e.NewDataResourceId, "CNTNTREVIT_NEWDR");

                entity.HasIndex(e => e.OldDataResourceId, "CNTNTREVIT_OLDDR");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTT_RVN_ITM_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTT_RVN_ITM_TXSTP");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.ContentRevisionSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_REVISION_SEQ_ID");

                entity.Property(e => e.ItemContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_CONTENT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.NewDataResourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("NEW_DATA_RESOURCE_ID");

                entity.Property(e => e.OldDataResourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("OLD_DATA_RESOURCE_ID");

                entity.HasOne(d => d.NewDataResource)
                    .WithMany(p => p.ContentRevisionItemNewDataResources)
                    .HasForeignKey(d => d.NewDataResourceId)
                    .HasConstraintName("CNTNTREVIT_NEWDR");

                entity.HasOne(d => d.OldDataResource)
                    .WithMany(p => p.ContentRevisionItemOldDataResources)
                    .HasForeignKey(d => d.OldDataResourceId)
                    .HasConstraintName("CNTNTREVIT_OLDDR");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.ContentRevisionItems)
                    .HasForeignKey(d => new { d.ContentId, d.ContentRevisionSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CNTNTREVIT_CNTREV");
            });

            modelBuilder.Entity<ContentRole>(entity =>
            {
                entity.HasKey(e => new { e.ContentId, e.PartyId, e.RoleTypeId, e.FromDate });

                entity.ToTable("CONTENT_ROLE");

                entity.HasIndex(e => e.ContentId, "CNTNT_RL_CNTNT");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "CNTNT_RL_PTRL");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTNT_RL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTNT_RL_TXSTMP");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.ContentRoles)
                    .HasForeignKey(d => d.ContentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CNTNT_RL_CNTNT");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.ContentRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CNTNT_RL_PTRL");
            });

            modelBuilder.Entity<ContentSearchConstraint>(entity =>
            {
                entity.HasKey(e => new { e.ContentSearchResultId, e.ConstraintSeqId });

                entity.ToTable("CONTENT_SEARCH_CONSTRAINT");

                entity.HasIndex(e => e.ContentSearchResultId, "CNT_SCHRSI_RES");

                entity.HasIndex(e => e.CreatedTxStamp, "CNT_SRH_CNSTT_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNT_SRH_CNSTT_TXSP");

                entity.Property(e => e.ContentSearchResultId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_SEARCH_RESULT_ID");

                entity.Property(e => e.ConstraintSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONSTRAINT_SEQ_ID");

                entity.Property(e => e.AnyPrefix)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ANY_PREFIX")
                    .IsFixedLength();

                entity.Property(e => e.AnySuffix)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ANY_SUFFIX")
                    .IsFixedLength();

                entity.Property(e => e.ConstraintName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CONSTRAINT_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.HighValue)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("HIGH_VALUE");

                entity.Property(e => e.IncludeSubCategories)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INCLUDE_SUB_CATEGORIES")
                    .IsFixedLength();

                entity.Property(e => e.InfoString)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("INFO_STRING");

                entity.Property(e => e.IsAnd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_AND")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LowValue)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LOW_VALUE");

                entity.Property(e => e.RemoveStems)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REMOVE_STEMS")
                    .IsFixedLength();

                entity.HasOne(d => d.ContentSearchResult)
                    .WithMany(p => p.ContentSearchConstraints)
                    .HasForeignKey(d => d.ContentSearchResultId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CNT_SCHRSI_RES");
            });

            modelBuilder.Entity<ContentSearchResult>(entity =>
            {
                entity.ToTable("CONTENT_SEARCH_RESULT");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTT_SRH_RST_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTT_SRH_RST_TXSTP");

                entity.Property(e => e.ContentSearchResultId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_SEARCH_RESULT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.IsAscending)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_ASCENDING")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.NumResults).HasColumnName("NUM_RESULTS");

                entity.Property(e => e.OrderByName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_BY_NAME");

                entity.Property(e => e.SearchDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SEARCH_DATE");

                entity.Property(e => e.SecondsTotal).HasColumnName("SECONDS_TOTAL");

                entity.Property(e => e.VisitId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VISIT_ID");
            });

            modelBuilder.Entity<ContentType>(entity =>
            {
                entity.ToTable("CONTENT_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTNT_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTNT_TP_TXSTMP");

                entity.HasIndex(e => e.ParentTypeId, "CNTNT_TYPE_PARENT");

                entity.Property(e => e.ContentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("CNTNT_TYPE_PARENT");
            });

            modelBuilder.Entity<ContentTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.ContentTypeId, e.AttrName });

                entity.ToTable("CONTENT_TYPE_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTT_TP_ATR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTT_TP_ATR_TXSTMP");

                entity.HasIndex(e => e.ContentTypeId, "CONTENT_TPAT_TYP");

                entity.Property(e => e.ContentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ContentType)
                    .WithMany(p => p.ContentTypeAttrs)
                    .HasForeignKey(d => d.ContentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CONTENT_TPAT_TYP");
            });

            modelBuilder.Entity<CostComponent>(entity =>
            {
                entity.ToTable("COST_COMPONENT");

                entity.HasIndex(e => e.CostComponentCalcId, "COST_COMP_CALC");

                entity.HasIndex(e => e.CostUomId, "COST_COMP_CUOM");

                entity.HasIndex(e => e.FixedAssetId, "COST_COMP_FXADSST");

                entity.HasIndex(e => e.GeoId, "COST_COMP_GEO");

                entity.HasIndex(e => e.PartyId, "COST_COMP_PARTY");

                entity.HasIndex(e => e.ProductFeatureId, "COST_COMP_PRODFEAT");

                entity.HasIndex(e => e.ProductId, "COST_COMP_PRODUCT");

                entity.HasIndex(e => e.CostComponentTypeId, "COST_COMP_TYPE");

                entity.HasIndex(e => e.WorkEffortId, "COST_COMP_WEFF");

                entity.HasIndex(e => e.CreatedTxStamp, "CST_CMPNNT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CST_CMPNNT_TXSTMP");

                entity.Property(e => e.CostComponentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COST_COMPONENT_ID");

                entity.Property(e => e.Cost)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("COST");

                entity.Property(e => e.CostComponentCalcId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COST_COMPONENT_CALC_ID");

                entity.Property(e => e.CostComponentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COST_COMPONENT_TYPE_ID");

                entity.Property(e => e.CostUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COST_UOM_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.FixedAssetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.GeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.ProductFeatureId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.HasOne(d => d.CostComponentCalc)
                    .WithMany(p => p.CostComponents)
                    .HasForeignKey(d => d.CostComponentCalcId)
                    .HasConstraintName("COST_COMP_CALC");

                entity.HasOne(d => d.CostComponentType)
                    .WithMany(p => p.CostComponents)
                    .HasForeignKey(d => d.CostComponentTypeId)
                    .HasConstraintName("COST_COMP_TYPE");

                entity.HasOne(d => d.CostUom)
                    .WithMany(p => p.CostComponents)
                    .HasForeignKey(d => d.CostUomId)
                    .HasConstraintName("COST_COMP_CUOM");

                entity.HasOne(d => d.FixedAsset)
                    .WithMany(p => p.CostComponents)
                    .HasForeignKey(d => d.FixedAssetId)
                    .HasConstraintName("COST_COMP_FXADSST");

                entity.HasOne(d => d.Geo)
                    .WithMany(p => p.CostComponents)
                    .HasForeignKey(d => d.GeoId)
                    .HasConstraintName("COST_COMP_GEO");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.CostComponents)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("COST_COMP_PARTY");

                entity.HasOne(d => d.ProductFeature)
                    .WithMany(p => p.CostComponents)
                    .HasForeignKey(d => d.ProductFeatureId)
                    .HasConstraintName("COST_COMP_PRODFEAT");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.CostComponents)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("COST_COMP_PRODUCT");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.CostComponents)
                    .HasForeignKey(d => d.WorkEffortId)
                    .HasConstraintName("COST_COMP_WEFF");
            });

            modelBuilder.Entity<CostComponentAttribute>(entity =>
            {
                entity.HasKey(e => new { e.CostComponentId, e.AttrName });

                entity.ToTable("COST_COMPONENT_ATTRIBUTE");

                entity.HasIndex(e => e.CostComponentId, "COST_COMP_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "CST_CMPT_ATTT_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CST_CMPT_ATTT_TXSP");

                entity.Property(e => e.CostComponentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COST_COMPONENT_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.CostComponent)
                    .WithMany(p => p.CostComponentAttributes)
                    .HasForeignKey(d => d.CostComponentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("COST_COMP_ATTR");
            });

            modelBuilder.Entity<CostComponentCalc>(entity =>
            {
                entity.ToTable("COST_COMPONENT_CALC");

                entity.HasIndex(e => e.CostGlAccountTypeId, "COST_COM_CGLAT");

                entity.HasIndex(e => e.CostCustomMethodId, "COST_COM_CMET");

                entity.HasIndex(e => e.CurrencyUomId, "COST_COM_CUOM");

                entity.HasIndex(e => e.OffsettingGlAccountTypeId, "COST_COM_OGLAT");

                entity.HasIndex(e => e.CreatedTxStamp, "CST_CMPT_CLC_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CST_CMPT_CLC_TXSTP");

                entity.Property(e => e.CostComponentCalcId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COST_COMPONENT_CALC_ID");

                entity.Property(e => e.CostCustomMethodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COST_CUSTOM_METHOD_ID");

                entity.Property(e => e.CostGlAccountTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COST_GL_ACCOUNT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.FixedCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("FIXED_COST");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OffsettingGlAccountTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("OFFSETTING_GL_ACCOUNT_TYPE_ID");

                entity.Property(e => e.PerMilliSecond).HasColumnName("PER_MILLI_SECOND");

                entity.Property(e => e.VariableCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VARIABLE_COST");

                entity.HasOne(d => d.CostCustomMethod)
                    .WithMany(p => p.CostComponentCalcs)
                    .HasForeignKey(d => d.CostCustomMethodId)
                    .HasConstraintName("COST_COM_CMET");

                entity.HasOne(d => d.CostGlAccountType)
                    .WithMany(p => p.CostComponentCalcCostGlAccountTypes)
                    .HasForeignKey(d => d.CostGlAccountTypeId)
                    .HasConstraintName("COST_COM_CGLAT");

                entity.HasOne(d => d.CurrencyUom)
                    .WithMany(p => p.CostComponentCalcs)
                    .HasForeignKey(d => d.CurrencyUomId)
                    .HasConstraintName("COST_COM_CUOM");

                entity.HasOne(d => d.OffsettingGlAccountType)
                    .WithMany(p => p.CostComponentCalcOffsettingGlAccountTypes)
                    .HasForeignKey(d => d.OffsettingGlAccountTypeId)
                    .HasConstraintName("COST_COM_OGLAT");
            });

            modelBuilder.Entity<CostComponentType>(entity =>
            {
                entity.ToTable("COST_COMPONENT_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "COST_COMP_TYPE_PAR");

                entity.HasIndex(e => e.CreatedTxStamp, "CST_CMPNT_TP_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CST_CMPNT_TP_TXSTP");

                entity.Property(e => e.CostComponentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COST_COMPONENT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("COST_COMP_TYPE_PAR");
            });

            modelBuilder.Entity<CostComponentTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.CostComponentTypeId, e.AttrName });

                entity.ToTable("COST_COMPONENT_TYPE_ATTR");

                entity.HasIndex(e => e.CostComponentTypeId, "COST_COMP_TATTR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CST_CMT_TP_ATR_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "CST_CMT_TP_ATR_TXS");

                entity.Property(e => e.CostComponentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COST_COMPONENT_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.CostComponentType)
                    .WithMany(p => p.CostComponentTypeAttrs)
                    .HasForeignKey(d => d.CostComponentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("COST_COMP_TATTR");
            });

            modelBuilder.Entity<CountryAddressFormat>(entity =>
            {
                entity.HasKey(e => e.GeoId);

                entity.ToTable("COUNTRY_ADDRESS_FORMAT");

                entity.HasIndex(e => e.CreatedTxStamp, "CNR_ADDS_FRT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNR_ADDS_FRT_TXSTP");

                entity.HasIndex(e => e.GeoId, "CNY_ADR_GEO");

                entity.HasIndex(e => e.GeoAssocTypeId, "CNY_ADR_GEO_TYPE");

                entity.Property(e => e.GeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_ID");

                entity.Property(e => e.AddressFormat)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS_FORMAT");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GeoAssocTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_ASSOC_TYPE_ID");

                entity.Property(e => e.HasPostalCodeExt)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_POSTAL_CODE_EXT")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PostalCodeRegex)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("POSTAL_CODE_REGEX");

                entity.Property(e => e.RequirePostalCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REQUIRE_POSTAL_CODE")
                    .IsFixedLength();

                entity.Property(e => e.RequirePostalCodeExt)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REQUIRE_POSTAL_CODE_EXT")
                    .IsFixedLength();

                entity.Property(e => e.RequireStateProvinceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REQUIRE_STATE_PROVINCE_ID");

                entity.HasOne(d => d.GeoAssocType)
                    .WithMany(p => p.CountryAddressFormats)
                    .HasForeignKey(d => d.GeoAssocTypeId)
                    .HasConstraintName("CNY_ADR_GEO_TYPE");

                entity.HasOne(d => d.Geo)
                    .WithOne(p => p.CountryAddressFormat)
                    .HasForeignKey<CountryAddressFormat>(d => d.GeoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CNY_ADR_GEO");
            });

            modelBuilder.Entity<CountryCapital>(entity =>
            {
                entity.HasKey(e => e.CountryCode);

                entity.ToTable("COUNTRY_CAPITAL");

                entity.HasIndex(e => e.CountryCode, "CNTRY_CAP_TO_CODE");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTR_CPTL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTR_CPTL_TXSTMP");

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY_CODE");

                entity.Property(e => e.CountryCapital1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY_CAPITAL");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.CountryCodeNavigation)
                    .WithOne(p => p.CountryCapital)
                    .HasForeignKey<CountryCapital>(d => d.CountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CNTRY_CAP_TO_CODE");
            });

            modelBuilder.Entity<CountryCode>(entity =>
            {
                entity.HasKey(e => e.CountryCode1);

                entity.ToTable("COUNTRY_CODE");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTR_CD_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTR_CD_TXSTMP");

                entity.Property(e => e.CountryCode1)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY_CODE");

                entity.Property(e => e.CountryAbbr)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY_ABBR");

                entity.Property(e => e.CountryName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY_NAME");

                entity.Property(e => e.CountryNumber)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY_NUMBER");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<CountryTeleCode>(entity =>
            {
                entity.HasKey(e => e.CountryCode);

                entity.ToTable("COUNTRY_TELE_CODE");

                entity.HasIndex(e => e.CountryCode, "CNTRY_TELE_TO_CODE");

                entity.HasIndex(e => e.CreatedTxStamp, "CNTR_TL_CD_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CNTR_TL_CD_TXSTMP");

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY_CODE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.TeleCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TELE_CODE");

                entity.HasOne(d => d.CountryCodeNavigation)
                    .WithOne(p => p.CountryTeleCode)
                    .HasForeignKey<CountryTeleCode>(d => d.CountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CNTRY_TELE_TO_CODE");
            });

            modelBuilder.Entity<CreditCard>(entity =>
            {
                entity.HasKey(e => e.PaymentMethodId);

                entity.ToTable("CREDIT_CARD");

                entity.HasIndex(e => e.ContactMechId, "CREDCARD_CMECH");

                entity.HasIndex(e => e.ContactMechId, "CREDCARD_PADDR");

                entity.HasIndex(e => e.PaymentMethodId, "CREDCARD_PMNTMETH");

                entity.HasIndex(e => e.CreatedTxStamp, "CREDIT_CARD_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CREDIT_CARD_TXSTMP");

                entity.Property(e => e.PaymentMethodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_METHOD_ID");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CARD_NUMBER");

                entity.Property(e => e.CardType)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CARD_TYPE");

                entity.Property(e => e.CompanyNameOnCard)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("COMPANY_NAME_ON_CARD");

                entity.Property(e => e.ConsecutiveFailedAuths).HasColumnName("CONSECUTIVE_FAILED_AUTHS");

                entity.Property(e => e.ConsecutiveFailedNsf).HasColumnName("CONSECUTIVE_FAILED_NSF");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.ExpireDate)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("EXPIRE_DATE");

                entity.Property(e => e.FirstNameOnCard)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIRST_NAME_ON_CARD");

                entity.Property(e => e.IssueNumber)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ISSUE_NUMBER");

                entity.Property(e => e.LastFailedAuthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_FAILED_AUTH_DATE");

                entity.Property(e => e.LastFailedNsfDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_FAILED_NSF_DATE");

                entity.Property(e => e.LastNameOnCard)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAST_NAME_ON_CARD");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MiddleNameOnCard)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MIDDLE_NAME_ON_CARD");

                entity.Property(e => e.SuffixOnCard)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUFFIX_ON_CARD");

                entity.Property(e => e.TitleOnCard)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TITLE_ON_CARD");

                entity.Property(e => e.ValidFromDate)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("VALID_FROM_DATE");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.CreditCards)
                    .HasForeignKey(d => d.ContactMechId)
                    .HasConstraintName("CREDCARD_CMECH");

                entity.HasOne(d => d.ContactMechNavigation)
                    .WithMany(p => p.CreditCards)
                    .HasForeignKey(d => d.ContactMechId)
                    .HasConstraintName("CREDCARD_PADDR");

                entity.HasOne(d => d.PaymentMethod)
                    .WithOne(p => p.CreditCard)
                    .HasForeignKey<CreditCard>(d => d.PaymentMethodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CREDCARD_PMNTMETH");
            });

            modelBuilder.Entity<CreditCardTypeGlAccount>(entity =>
            {
                entity.HasKey(e => new { e.CardType, e.OrganizationPartyId });

                entity.ToTable("CREDIT_CARD_TYPE_GL_ACCOUNT");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CRT_TP_GL_ACT_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "CRT_TP_GL_ACT_TS");

                entity.Property(e => e.CardType)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CARD_TYPE");

                entity.Property(e => e.OrganizationPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_PARTY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<CustRequest>(entity =>
            {
                entity.ToTable("CUST_REQUEST");

                entity.HasIndex(e => e.CreatedTxStamp, "CST_RQST_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CST_RQST_TXSTMP");

                entity.HasIndex(e => e.MaximumAmountUomId, "CUST_REQ_AUOM");

                entity.HasIndex(e => e.CustRequestCategoryId, "CUST_REQ_CAT");

                entity.HasIndex(e => e.SalesChannelEnumId, "CUST_REQ_CHANNEL");

                entity.HasIndex(e => e.CurrencyUomId, "CUST_REQ_CUOM");

                entity.HasIndex(e => e.FromPartyId, "CUST_REQ_FRMPTY");

                entity.HasIndex(e => e.FulfillContactMechId, "CUST_REQ_FULCM");

                entity.HasIndex(e => e.ProductStoreId, "CUST_REQ_PRDS");

                entity.HasIndex(e => e.StatusId, "CUST_REQ_STATUS");

                entity.HasIndex(e => e.CustRequestTypeId, "CUST_REQ_TYPE");

                entity.Property(e => e.CustRequestId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_ID");

                entity.Property(e => e.ClosedDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("CLOSED_DATE_TIME");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM_ID");

                entity.Property(e => e.CustRequestCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_CATEGORY_ID");

                entity.Property(e => e.CustRequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CUST_REQUEST_DATE");

                entity.Property(e => e.CustRequestName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_NAME");

                entity.Property(e => e.CustRequestTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_TYPE_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.FromPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FROM_PARTY_ID");

                entity.Property(e => e.FulfillContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FULFILL_CONTACT_MECH_ID");

                entity.Property(e => e.InternalComment)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("INTERNAL_COMMENT");

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MaximumAmountUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MAXIMUM_AMOUNT_UOM_ID");

                entity.Property(e => e.OpenDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("OPEN_DATE_TIME");

                entity.Property(e => e.Priority).HasColumnName("PRIORITY");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.Reason)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REASON");

                entity.Property(e => e.ResponseRequiredDate)
                    .HasColumnType("datetime")
                    .HasColumnName("RESPONSE_REQUIRED_DATE");

                entity.Property(e => e.SalesChannelEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SALES_CHANNEL_ENUM_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.HasOne(d => d.CurrencyUom)
                    .WithMany(p => p.CustRequestCurrencyUoms)
                    .HasForeignKey(d => d.CurrencyUomId)
                    .HasConstraintName("CUST_REQ_CUOM");

                entity.HasOne(d => d.CustRequestCategory)
                    .WithMany(p => p.CustRequests)
                    .HasForeignKey(d => d.CustRequestCategoryId)
                    .HasConstraintName("CUST_REQ_CAT");

                entity.HasOne(d => d.CustRequestType)
                    .WithMany(p => p.CustRequests)
                    .HasForeignKey(d => d.CustRequestTypeId)
                    .HasConstraintName("CUST_REQ_TYPE");

                entity.HasOne(d => d.FromParty)
                    .WithMany(p => p.CustRequests)
                    .HasForeignKey(d => d.FromPartyId)
                    .HasConstraintName("CUST_REQ_FRMPTY");

                entity.HasOne(d => d.FulfillContactMech)
                    .WithMany(p => p.CustRequests)
                    .HasForeignKey(d => d.FulfillContactMechId)
                    .HasConstraintName("CUST_REQ_FULCM");

                entity.HasOne(d => d.MaximumAmountUom)
                    .WithMany(p => p.CustRequestMaximumAmountUoms)
                    .HasForeignKey(d => d.MaximumAmountUomId)
                    .HasConstraintName("CUST_REQ_AUOM");

                entity.HasOne(d => d.ProductStore)
                    .WithMany(p => p.CustRequests)
                    .HasForeignKey(d => d.ProductStoreId)
                    .HasConstraintName("CUST_REQ_PRDS");

                entity.HasOne(d => d.SalesChannelEnum)
                    .WithMany(p => p.CustRequests)
                    .HasForeignKey(d => d.SalesChannelEnumId)
                    .HasConstraintName("CUST_REQ_CHANNEL");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.CustRequests)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("CUST_REQ_STATUS");
            });

            modelBuilder.Entity<CustRequestAttribute>(entity =>
            {
                entity.HasKey(e => new { e.CustRequestId, e.AttrName });

                entity.ToTable("CUST_REQUEST_ATTRIBUTE");

                entity.HasIndex(e => e.CreatedTxStamp, "CST_RQT_ATTT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CST_RQT_ATTT_TXSTP");

                entity.HasIndex(e => e.CustRequestId, "CUST_REQ_ATTR");

                entity.Property(e => e.CustRequestId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.CustRequest)
                    .WithMany(p => p.CustRequestAttributes)
                    .HasForeignKey(d => d.CustRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CUST_REQ_ATTR");
            });

            modelBuilder.Entity<CustRequestCategory>(entity =>
            {
                entity.ToTable("CUST_REQUEST_CATEGORY");

                entity.HasIndex(e => e.CreatedTxStamp, "CST_RQT_CTR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CST_RQT_CTR_TXSTMP");

                entity.HasIndex(e => e.CustRequestTypeId, "CUST_RQCT_TYPE");

                entity.Property(e => e.CustRequestCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_CATEGORY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CustRequestTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_TYPE_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.CustRequestType)
                    .WithMany(p => p.CustRequestCategories)
                    .HasForeignKey(d => d.CustRequestTypeId)
                    .HasConstraintName("CUST_RQCT_TYPE");
            });

            modelBuilder.Entity<CustRequestCommEvent>(entity =>
            {
                entity.HasKey(e => new { e.CustRequestId, e.CommunicationEventId });

                entity.ToTable("CUST_REQUEST_COMM_EVENT");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CST_RQT_CMM_EVT_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "CST_RQT_CMM_EVT_TS");

                entity.HasIndex(e => e.CommunicationEventId, "CUSTREQ_CEV_CEV");

                entity.HasIndex(e => e.CustRequestId, "CUSTREQ_CEV_CRQ");

                entity.Property(e => e.CustRequestId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_ID");

                entity.Property(e => e.CommunicationEventId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COMMUNICATION_EVENT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.CommunicationEvent)
                    .WithMany(p => p.CustRequestCommEvents)
                    .HasForeignKey(d => d.CommunicationEventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CUSTREQ_CEV_CEV");

                entity.HasOne(d => d.CustRequest)
                    .WithMany(p => p.CustRequestCommEvents)
                    .HasForeignKey(d => d.CustRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CUSTREQ_CEV_CRQ");
            });

            modelBuilder.Entity<CustRequestContent>(entity =>
            {
                entity.HasKey(e => new { e.CustRequestId, e.ContentId, e.FromDate });

                entity.ToTable("CUST_REQUEST_CONTENT");

                entity.HasIndex(e => e.CreatedTxStamp, "CST_RQT_CNTT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CST_RQT_CNTT_TXSTP");

                entity.HasIndex(e => e.ContentId, "CUSTREQ_CNT_CNT");

                entity.HasIndex(e => e.CustRequestId, "CUSTREQ_CNT_CUSTRQ");

                entity.Property(e => e.CustRequestId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_ID");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.CustRequestContents)
                    .HasForeignKey(d => d.ContentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CUSTREQ_CNT_CNT");

                entity.HasOne(d => d.CustRequest)
                    .WithMany(p => p.CustRequestContents)
                    .HasForeignKey(d => d.CustRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CUSTREQ_CNT_CUSTRQ");
            });

            modelBuilder.Entity<CustRequestItem>(entity =>
            {
                entity.HasKey(e => new { e.CustRequestId, e.CustRequestItemSeqId });

                entity.ToTable("CUST_REQUEST_ITEM");

                entity.HasIndex(e => e.CreatedTxStamp, "CST_RQT_ITM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CST_RQT_ITM_TXSTMP");

                entity.HasIndex(e => e.CustRequestId, "CUST_REQITM_CREQ");

                entity.HasIndex(e => e.ProductId, "CUST_REQITM_PRD");

                entity.HasIndex(e => e.CustRequestResolutionId, "CUST_REQITM_RES");

                entity.HasIndex(e => e.StatusId, "CUST_REQITM_STTS");

                entity.Property(e => e.CustRequestId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_ID");

                entity.Property(e => e.CustRequestItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_ITEM_SEQ_ID");

                entity.Property(e => e.ConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CustRequestResolutionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_RESOLUTION_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MaximumAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MAXIMUM_AMOUNT");

                entity.Property(e => e.Priority).HasColumnName("PRIORITY");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.RequiredByDate)
                    .HasColumnType("datetime")
                    .HasColumnName("REQUIRED_BY_DATE");

                entity.Property(e => e.ReservLength)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("RESERV_LENGTH");

                entity.Property(e => e.ReservPersons)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("RESERV_PERSONS");

                entity.Property(e => e.ReservStart)
                    .HasColumnType("datetime")
                    .HasColumnName("RESERV_START");

                entity.Property(e => e.SelectedAmount)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("SELECTED_AMOUNT");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.Story)
                    .HasColumnType("text")
                    .HasColumnName("STORY");

                entity.HasOne(d => d.CustRequest)
                    .WithMany(p => p.CustRequestItems)
                    .HasForeignKey(d => d.CustRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CUST_REQITM_CREQ");

                entity.HasOne(d => d.CustRequestResolution)
                    .WithMany(p => p.CustRequestItems)
                    .HasForeignKey(d => d.CustRequestResolutionId)
                    .HasConstraintName("CUST_REQITM_RES");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.CustRequestItems)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("CUST_REQITM_PRD");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.CustRequestItems)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("CUST_REQITM_STTS");
            });

            modelBuilder.Entity<CustRequestItemNote>(entity =>
            {
                entity.HasKey(e => new { e.CustRequestId, e.CustRequestItemSeqId, e.NoteId });

                entity.ToTable("CUST_REQUEST_ITEM_NOTE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CST_RQT_ITM_NT_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "CST_RQT_ITM_NT_TXS");

                entity.HasIndex(e => new { e.CustRequestId, e.CustRequestItemSeqId }, "CUST_REQ_ITNT");

                entity.HasIndex(e => e.NoteId, "CUST_REQ_NOTE");

                entity.Property(e => e.CustRequestId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_ID");

                entity.Property(e => e.CustRequestItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_ITEM_SEQ_ID");

                entity.Property(e => e.NoteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("NOTE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Note)
                    .WithMany(p => p.CustRequestItemNotes)
                    .HasForeignKey(d => d.NoteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CUST_REQ_NOTE");

                entity.HasOne(d => d.CustRequestI)
                    .WithMany(p => p.CustRequestItemNotes)
                    .HasForeignKey(d => new { d.CustRequestId, d.CustRequestItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CUST_REQ_ITNT");
            });

            modelBuilder.Entity<CustRequestItemWorkEffort>(entity =>
            {
                entity.HasKey(e => new { e.CustRequestId, e.CustRequestItemSeqId, e.WorkEffortId })
                    .HasName("PK_CUST_REQUEST_ITEM_WORK_EFFO");

                entity.ToTable("CUST_REQUEST_ITEM_WORK_EFFORT");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CST_ITM_WRK_EFT_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "CST_ITM_WRK_EFT_TS");

                entity.HasIndex(e => e.WorkEffortId, "CUST_REQ_WEFF");

                entity.HasIndex(e => new { e.CustRequestId, e.CustRequestItemSeqId }, "WORK_REQFL_CSTRQ");

                entity.Property(e => e.CustRequestId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_ID");

                entity.Property(e => e.CustRequestItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_ITEM_SEQ_ID");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.CustRequestItemWorkEfforts)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CUST_REQ_WEFF");

                entity.HasOne(d => d.CustRequestI)
                    .WithMany(p => p.CustRequestItemWorkEfforts)
                    .HasForeignKey(d => new { d.CustRequestId, d.CustRequestItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WORK_REQFL_CSTRQ");
            });

            modelBuilder.Entity<CustRequestNote>(entity =>
            {
                entity.HasKey(e => new { e.CustRequestId, e.NoteId });

                entity.ToTable("CUST_REQUEST_NOTE");

                entity.HasIndex(e => e.CustRequestId, "CRQ_CR");

                entity.HasIndex(e => e.NoteId, "CRQ_NOTE");

                entity.HasIndex(e => e.CreatedTxStamp, "CST_RQST_NT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CST_RQST_NT_TXSTMP");

                entity.Property(e => e.CustRequestId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_ID");

                entity.Property(e => e.NoteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("NOTE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.CustRequest)
                    .WithMany(p => p.CustRequestNotes)
                    .HasForeignKey(d => d.CustRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CRQ_CR");

                entity.HasOne(d => d.Note)
                    .WithMany(p => p.CustRequestNotes)
                    .HasForeignKey(d => d.NoteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CRQ_NOTE");
            });

            modelBuilder.Entity<CustRequestParty>(entity =>
            {
                entity.HasKey(e => new { e.CustRequestId, e.PartyId, e.RoleTypeId, e.FromDate });

                entity.ToTable("CUST_REQUEST_PARTY");

                entity.HasIndex(e => e.CustRequestId, "CREQ_RL_CRQST");

                entity.HasIndex(e => e.PartyId, "CREQ_RL_PARTY");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "CREQ_RL_PROLE");

                entity.HasIndex(e => e.CreatedTxStamp, "CST_RQT_PRT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CST_RQT_PRT_TXSTMP");

                entity.Property(e => e.CustRequestId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.CustRequest)
                    .WithMany(p => p.CustRequestParties)
                    .HasForeignKey(d => d.CustRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CREQ_RL_CRQST");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.CustRequestParties)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CREQ_RL_PARTY");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.CustRequestParties)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CREQ_RL_PROLE");
            });

            modelBuilder.Entity<CustRequestResolution>(entity =>
            {
                entity.ToTable("CUST_REQUEST_RESOLUTION");

                entity.HasIndex(e => e.CreatedTxStamp, "CST_RQT_RSLN_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CST_RQT_RSLN_TXSTP");

                entity.HasIndex(e => e.CustRequestTypeId, "CUST_RQRS_TYPE");

                entity.Property(e => e.CustRequestResolutionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_RESOLUTION_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CustRequestTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_TYPE_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.CustRequestType)
                    .WithMany(p => p.CustRequestResolutions)
                    .HasForeignKey(d => d.CustRequestTypeId)
                    .HasConstraintName("CUST_RQRS_TYPE");
            });

            modelBuilder.Entity<CustRequestStatus>(entity =>
            {
                entity.ToTable("CUST_REQUEST_STATUS");

                entity.HasIndex(e => e.CreatedTxStamp, "CST_RQT_STS_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CST_RQT_STS_TXSTMP");

                entity.HasIndex(e => e.StatusId, "CUST_REQST_STTS");

                entity.HasIndex(e => e.CustRequestId, "CUST_REQ_STRQ");

                entity.HasIndex(e => e.ChangeByUserLoginId, "CUST_RQSTTS_USRLGN");

                entity.Property(e => e.CustRequestStatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_STATUS_ID");

                entity.Property(e => e.ChangeByUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CustRequestId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_ID");

                entity.Property(e => e.CustRequestItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_ITEM_SEQ_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.StatusDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STATUS_DATE");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.HasOne(d => d.ChangeByUserLogin)
                    .WithMany(p => p.CustRequestStatuses)
                    .HasForeignKey(d => d.ChangeByUserLoginId)
                    .HasConstraintName("CUST_RQSTTS_USRLGN");

                entity.HasOne(d => d.CustRequest)
                    .WithMany(p => p.CustRequestStatuses)
                    .HasForeignKey(d => d.CustRequestId)
                    .HasConstraintName("CUST_REQ_STRQ");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.CustRequestStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("CUST_REQST_STTS");
            });

            modelBuilder.Entity<CustRequestType>(entity =>
            {
                entity.ToTable("CUST_REQUEST_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "CST_RQST_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CST_RQST_TP_TXSTMP");

                entity.HasIndex(e => e.PartyId, "CUST_PTY_PARTY");

                entity.HasIndex(e => e.ParentTypeId, "CUST_REQ_TYPE_PAR");

                entity.Property(e => e.CustRequestTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("CUST_REQ_TYPE_PAR");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.CustRequestTypes)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("CUST_PTY_PARTY");
            });

            modelBuilder.Entity<CustRequestTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.CustRequestTypeId, e.AttrName });

                entity.ToTable("CUST_REQUEST_TYPE_ATTR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CST_RQT_TP_ATR_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "CST_RQT_TP_ATR_TXS");

                entity.HasIndex(e => e.CustRequestTypeId, "CUST_REQ_TYPE_ATTR");

                entity.Property(e => e.CustRequestTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.CustRequestType)
                    .WithMany(p => p.CustRequestTypeAttrs)
                    .HasForeignKey(d => d.CustRequestTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CUST_REQ_TYPE_ATTR");
            });

            modelBuilder.Entity<CustRequestWorkEffort>(entity =>
            {
                entity.HasKey(e => new { e.CustRequestId, e.WorkEffortId });

                entity.ToTable("CUST_REQUEST_WORK_EFFORT");

                entity.HasIndex(e => e.CustRequestId, "CSTREQ_WF_CREQ");

                entity.HasIndex(e => e.WorkEffortId, "CSTREQ_WF_WEFF");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CST_RQT_WRK_EFT_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "CST_RQT_WRK_EFT_TS");

                entity.Property(e => e.CustRequestId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_ID");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.CustRequest)
                    .WithMany(p => p.CustRequestWorkEfforts)
                    .HasForeignKey(d => d.CustRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CSTREQ_WF_CREQ");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.CustRequestWorkEfforts)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CSTREQ_WF_WEFF");
            });

            modelBuilder.Entity<CustomMethod>(entity =>
            {
                entity.ToTable("CUSTOM_METHOD");

                entity.HasIndex(e => e.CustomMethodTypeId, "CME_TO_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "CSTM_MTHD_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CSTM_MTHD_TXSTMP");

                entity.Property(e => e.CustomMethodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_METHOD_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CustomMethodName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_METHOD_NAME");

                entity.Property(e => e.CustomMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_METHOD_TYPE_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.CustomMethodType)
                    .WithMany(p => p.CustomMethods)
                    .HasForeignKey(d => d.CustomMethodTypeId)
                    .HasConstraintName("CME_TO_TYPE");
            });

            modelBuilder.Entity<CustomMethodType>(entity =>
            {
                entity.ToTable("CUSTOM_METHOD_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "CME_TYPE_PARENT");

                entity.HasIndex(e => e.CreatedTxStamp, "CSTM_MTD_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CSTM_MTD_TP_TXSTMP");

                entity.Property(e => e.CustomMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_METHOD_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("CME_TYPE_PARENT");
            });

            modelBuilder.Entity<CustomScreen>(entity =>
            {
                entity.ToTable("CUSTOM_SCREEN");

                entity.HasIndex(e => e.CustomScreenTypeId, "CSCR_TO_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "CSTM_SCRN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CSTM_SCRN_TXSTMP");

                entity.Property(e => e.CustomScreenId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_SCREEN_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CustomScreenLocation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_SCREEN_LOCATION");

                entity.Property(e => e.CustomScreenName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_SCREEN_NAME");

                entity.Property(e => e.CustomScreenTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_SCREEN_TYPE_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.CustomScreenType)
                    .WithMany(p => p.CustomScreens)
                    .HasForeignKey(d => d.CustomScreenTypeId)
                    .HasConstraintName("CSCR_TO_TYPE");
            });

            modelBuilder.Entity<CustomScreenType>(entity =>
            {
                entity.ToTable("CUSTOM_SCREEN_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "CSTM_SCN_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CSTM_SCN_TP_TXSTMP");

                entity.Property(e => e.CustomScreenTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_SCREEN_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");
            });

            modelBuilder.Entity<CustomTimePeriod>(entity =>
            {
                entity.ToTable("CUSTOM_TIME_PERIOD");

                entity.HasIndex(e => e.CreatedTxStamp, "CSTM_TM_PRD_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "CSTM_TM_PRD_TXSTMP");

                entity.HasIndex(e => e.ParentPeriodId, "ORG_PRD_PARPER");

                entity.HasIndex(e => e.OrganizationPartyId, "ORG_PRD_PARTY");

                entity.HasIndex(e => e.PeriodTypeId, "ORG_PRD_PERTYP");

                entity.Property(e => e.CustomTimePeriodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_TIME_PERIOD_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.IsClosed)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_CLOSED")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OrganizationPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_PARTY_ID");

                entity.Property(e => e.ParentPeriodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_PERIOD_ID");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.PeriodNum).HasColumnName("PERIOD_NUM");

                entity.Property(e => e.PeriodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_TYPE_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.OrganizationParty)
                    .WithMany(p => p.CustomTimePeriods)
                    .HasForeignKey(d => d.OrganizationPartyId)
                    .HasConstraintName("ORG_PRD_PARTY");

                entity.HasOne(d => d.ParentPeriod)
                    .WithMany(p => p.InverseParentPeriod)
                    .HasForeignKey(d => d.ParentPeriodId)
                    .HasConstraintName("ORG_PRD_PARPER");

                entity.HasOne(d => d.PeriodType)
                    .WithMany(p => p.CustomTimePeriods)
                    .HasForeignKey(d => d.PeriodTypeId)
                    .HasConstraintName("ORG_PRD_PERTYP");
            });

            modelBuilder.Entity<DataCategory>(entity =>
            {
                entity.ToTable("DATA_CATEGORY");

                entity.HasIndex(e => e.ParentCategoryId, "DATA_CAT_PARENT");

                entity.HasIndex(e => e.CreatedTxStamp, "DT_CTGR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "DT_CTGR_TXSTMP");

                entity.Property(e => e.DataCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_CATEGORY_ID");

                entity.Property(e => e.CategoryName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CATEGORY_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_CATEGORY_ID");

                entity.HasOne(d => d.ParentCategory)
                    .WithMany(p => p.InverseParentCategory)
                    .HasForeignKey(d => d.ParentCategoryId)
                    .HasConstraintName("DATA_CAT_PARENT");
            });

            modelBuilder.Entity<DataResource>(entity =>
            {
                entity.ToTable("DATA_RESOURCE");

                entity.HasIndex(e => e.CreatedByUserLogin, "DATA_REC_CB_ULGN");

                entity.HasIndex(e => e.CharacterSetId, "DATA_REC_CHST");

                entity.HasIndex(e => e.DataSourceId, "DATA_REC_DTSRC");

                entity.HasIndex(e => e.LastModifiedByUserLogin, "DATA_REC_LMB_ULGN");

                entity.HasIndex(e => e.SurveyId, "DATA_REC_SURVEY");

                entity.HasIndex(e => e.SurveyResponseId, "DATA_REC_SVRSP");

                entity.HasIndex(e => e.DataCategoryId, "DATA_REC_TO_CAT");

                entity.HasIndex(e => e.DataTemplateTypeId, "DATA_REC_TO_TTP");

                entity.HasIndex(e => e.DataResourceTypeId, "DATA_REC_TO_TYPE");

                entity.HasIndex(e => e.StatusId, "DTRSRC_STATUS");

                entity.HasIndex(e => e.CreatedTxStamp, "DT_RSRC_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "DT_RSRC_TXSTMP");

                entity.Property(e => e.DataResourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_RESOURCE_ID");

                entity.Property(e => e.CharacterSetId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CHARACTER_SET_ID");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DataCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_CATEGORY_ID");

                entity.Property(e => e.DataResourceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DATA_RESOURCE_NAME");

                entity.Property(e => e.DataResourceTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_RESOURCE_TYPE_ID");

                entity.Property(e => e.DataSourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_SOURCE_ID");

                entity.Property(e => e.DataTemplateTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_TEMPLATE_TYPE_ID");

                entity.Property(e => e.IsPublic)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_PUBLIC")
                    .IsFixedLength();

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LocaleString)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOCALE_STRING");

                entity.Property(e => e.MimeTypeId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("MIME_TYPE_ID");

                entity.Property(e => e.ObjectInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OBJECT_INFO");

                entity.Property(e => e.RelatedDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RELATED_DETAIL_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.SurveyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_ID");

                entity.Property(e => e.SurveyResponseId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_RESPONSE_ID");

                entity.HasOne(d => d.CharacterSet)
                    .WithMany(p => p.DataResources)
                    .HasForeignKey(d => d.CharacterSetId)
                    .HasConstraintName("DATA_REC_CHST");

                entity.HasOne(d => d.CreatedByUserLoginNavigation)
                    .WithMany(p => p.DataResourceCreatedByUserLoginNavigations)
                    .HasForeignKey(d => d.CreatedByUserLogin)
                    .HasConstraintName("DATA_REC_CB_ULGN");

                entity.HasOne(d => d.DataCategory)
                    .WithMany(p => p.DataResources)
                    .HasForeignKey(d => d.DataCategoryId)
                    .HasConstraintName("DATA_REC_TO_CAT");

                entity.HasOne(d => d.DataResourceType)
                    .WithMany(p => p.DataResources)
                    .HasForeignKey(d => d.DataResourceTypeId)
                    .HasConstraintName("DATA_REC_TO_TYPE");

                entity.HasOne(d => d.DataSource)
                    .WithMany(p => p.DataResources)
                    .HasForeignKey(d => d.DataSourceId)
                    .HasConstraintName("DATA_REC_DTSRC");

                entity.HasOne(d => d.DataTemplateType)
                    .WithMany(p => p.DataResources)
                    .HasForeignKey(d => d.DataTemplateTypeId)
                    .HasConstraintName("DATA_REC_TO_TTP");

                entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                    .WithMany(p => p.DataResourceLastModifiedByUserLoginNavigations)
                    .HasForeignKey(d => d.LastModifiedByUserLogin)
                    .HasConstraintName("DATA_REC_LMB_ULGN");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.DataResources)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("DTRSRC_STATUS");

                entity.HasOne(d => d.Survey)
                    .WithMany(p => p.DataResources)
                    .HasForeignKey(d => d.SurveyId)
                    .HasConstraintName("DATA_REC_SURVEY");

                entity.HasOne(d => d.SurveyResponse)
                    .WithMany(p => p.DataResources)
                    .HasForeignKey(d => d.SurveyResponseId)
                    .HasConstraintName("DATA_REC_SVRSP");
            });

            modelBuilder.Entity<DataResourceAttribute>(entity =>
            {
                entity.HasKey(e => new { e.DataResourceId, e.AttrName });

                entity.ToTable("DATA_RESOURCE_ATTRIBUTE");

                entity.HasIndex(e => e.DataResourceId, "DATA_REC_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "DT_RSC_ATTRT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "DT_RSC_ATTRT_TXSTP");

                entity.Property(e => e.DataResourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_RESOURCE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.DataResource)
                    .WithMany(p => p.DataResourceAttributes)
                    .HasForeignKey(d => d.DataResourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DATA_REC_ATTR");
            });

            modelBuilder.Entity<DataResourceMetaDatum>(entity =>
            {
                entity.HasKey(e => new { e.DataResourceId, e.MetaDataPredicateId });

                entity.ToTable("DATA_RESOURCE_META_DATA");

                entity.HasIndex(e => e.DataResourceId, "DATA_MD_DATREC");

                entity.HasIndex(e => e.MetaDataPredicateId, "DATA_MD_DMDPRD");

                entity.HasIndex(e => e.DataSourceId, "DATA_MD_DTSRC");

                entity.HasIndex(e => e.CreatedTxStamp, "DT_RSC_MT_DT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "DT_RSC_MT_DT_TXSTP");

                entity.Property(e => e.DataResourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_RESOURCE_ID");

                entity.Property(e => e.MetaDataPredicateId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("META_DATA_PREDICATE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DataSourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_SOURCE_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MetaDataValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("META_DATA_VALUE");

                entity.HasOne(d => d.DataResource)
                    .WithMany(p => p.DataResourceMetaData)
                    .HasForeignKey(d => d.DataResourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DATA_MD_DATREC");

                entity.HasOne(d => d.DataSource)
                    .WithMany(p => p.DataResourceMetaData)
                    .HasForeignKey(d => d.DataSourceId)
                    .HasConstraintName("DATA_MD_DTSRC");

                entity.HasOne(d => d.MetaDataPredicate)
                    .WithMany(p => p.DataResourceMetaData)
                    .HasForeignKey(d => d.MetaDataPredicateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DATA_MD_DMDPRD");
            });

            modelBuilder.Entity<DataResourcePurpose>(entity =>
            {
                entity.HasKey(e => new { e.DataResourceId, e.ContentPurposeTypeId });

                entity.ToTable("DATA_RESOURCE_PURPOSE");

                entity.HasIndex(e => e.DataResourceId, "DATA_REC_PRP");

                entity.HasIndex(e => e.ContentPurposeTypeId, "DATA_REC_PRP_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "DT_RSRC_PRS_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "DT_RSRC_PRS_TXSTMP");

                entity.Property(e => e.DataResourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_RESOURCE_ID");

                entity.Property(e => e.ContentPurposeTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_PURPOSE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ContentPurposeType)
                    .WithMany(p => p.DataResourcePurposes)
                    .HasForeignKey(d => d.ContentPurposeTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DATA_REC_PRP_TYPE");

                entity.HasOne(d => d.DataResource)
                    .WithMany(p => p.DataResourcePurposes)
                    .HasForeignKey(d => d.DataResourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DATA_REC_PRP");
            });

            modelBuilder.Entity<DataResourceRole>(entity =>
            {
                entity.HasKey(e => new { e.DataResourceId, e.PartyId, e.RoleTypeId, e.FromDate });

                entity.ToTable("DATA_RESOURCE_ROLE");

                entity.HasIndex(e => e.DataResourceId, "DATARECRL_DATREC");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "DATARECRL_PTRL");

                entity.HasIndex(e => e.CreatedTxStamp, "DT_RSRC_RL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "DT_RSRC_RL_TXSTMP");

                entity.Property(e => e.DataResourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_RESOURCE_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.DataResource)
                    .WithMany(p => p.DataResourceRoles)
                    .HasForeignKey(d => d.DataResourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DATARECRL_DATREC");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.DataResourceRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DATARECRL_PTRL");
            });

            modelBuilder.Entity<DataResourceType>(entity =>
            {
                entity.ToTable("DATA_RESOURCE_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "DATA_OBTYPE_PARENT");

                entity.HasIndex(e => e.CreatedTxStamp, "DT_RSRC_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "DT_RSRC_TP_TXSTMP");

                entity.Property(e => e.DataResourceTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_RESOURCE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("DATA_OBTYPE_PARENT");
            });

            modelBuilder.Entity<DataResourceTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.DataResourceTypeId, e.AttrName });

                entity.ToTable("DATA_RESOURCE_TYPE_ATTR");

                entity.HasIndex(e => e.DataResourceTypeId, "DATA_OBTYPE_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "DT_RSC_TP_ATR_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "DT_RSC_TP_ATR_TXSP");

                entity.Property(e => e.DataResourceTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_RESOURCE_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.DataResourceType)
                    .WithMany(p => p.DataResourceTypeAttrs)
                    .HasForeignKey(d => d.DataResourceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DATA_OBTYPE_ATTR");
            });

            modelBuilder.Entity<DataSource>(entity =>
            {
                entity.ToTable("DATA_SOURCE");

                entity.HasIndex(e => e.CreatedTxStamp, "DATA_SOURCE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "DATA_SOURCE_TXSTMP");

                entity.HasIndex(e => e.DataSourceTypeId, "DATA_SRC_TYP");

                entity.Property(e => e.DataSourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_SOURCE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DataSourceTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_SOURCE_TYPE_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.DataSourceType)
                    .WithMany(p => p.DataSources)
                    .HasForeignKey(d => d.DataSourceTypeId)
                    .HasConstraintName("DATA_SRC_TYP");
            });

            modelBuilder.Entity<DataSourceType>(entity =>
            {
                entity.ToTable("DATA_SOURCE_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "DT_SRC_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "DT_SRC_TP_TXSTMP");

                entity.Property(e => e.DataSourceTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_SOURCE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<DataTemplateType>(entity =>
            {
                entity.ToTable("DATA_TEMPLATE_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "DT_TMPLT_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "DT_TMPLT_TP_TXSTMP");

                entity.Property(e => e.DataTemplateTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_TEMPLATE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Extension)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("EXTENSION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<Deduction>(entity =>
            {
                entity.ToTable("DEDUCTION");

                entity.HasIndex(e => e.DeductionTypeId, "DEDCTN_DEDTYP");

                entity.HasIndex(e => e.PaymentId, "DEDCTN_PMNT");

                entity.HasIndex(e => e.CreatedTxStamp, "DEDUCTION_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "DEDUCTION_TXSTMP");

                entity.Property(e => e.DeductionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEDUCTION_ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DeductionTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEDUCTION_TYPE_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PaymentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_ID");

                entity.HasOne(d => d.DeductionType)
                    .WithMany(p => p.Deductions)
                    .HasForeignKey(d => d.DeductionTypeId)
                    .HasConstraintName("DEDCTN_DEDTYP");

                entity.HasOne(d => d.Payment)
                    .WithMany(p => p.Deductions)
                    .HasForeignKey(d => d.PaymentId)
                    .HasConstraintName("DEDCTN_PMNT");
            });

            modelBuilder.Entity<DeductionType>(entity =>
            {
                entity.ToTable("DEDUCTION_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "DDCTN_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "DDCTN_TP_TXSTMP");

                entity.HasIndex(e => e.ParentTypeId, "DEDUCT_TYP_PAR");

                entity.Property(e => e.DeductionTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEDUCTION_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("DEDUCT_TYP_PAR");
            });

            modelBuilder.Entity<Deliverable>(entity =>
            {
                entity.ToTable("DELIVERABLE");

                entity.HasIndex(e => e.DeliverableTypeId, "DELIVERABLE_DLTYP");

                entity.HasIndex(e => e.CreatedTxStamp, "DELIVERABLE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "DELIVERABLE_TXSTMP");

                entity.Property(e => e.DeliverableId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERABLE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DeliverableName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERABLE_NAME");

                entity.Property(e => e.DeliverableTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERABLE_TYPE_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.DeliverableType)
                    .WithMany(p => p.Deliverables)
                    .HasForeignKey(d => d.DeliverableTypeId)
                    .HasConstraintName("DELIVERABLE_DLTYP");
            });

            modelBuilder.Entity<DeliverableType>(entity =>
            {
                entity.ToTable("DELIVERABLE_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "DLVRBL_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "DLVRBL_TP_TXSTMP");

                entity.Property(e => e.DeliverableTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERABLE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<Delivery>(entity =>
            {
                entity.ToTable("DELIVERY");

                entity.HasIndex(e => e.CreatedTxStamp, "DELIVERY_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "DELIVERY_TXSTMP");

                entity.HasIndex(e => e.DestFacilityId, "DELIV_DFAC");

                entity.HasIndex(e => e.FixedAssetId, "DELIV_FXAS");

                entity.HasIndex(e => e.OriginFacilityId, "DELIV_OFAC");

                entity.Property(e => e.DeliveryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERY_ID");

                entity.Property(e => e.ActualArrivalDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ACTUAL_ARRIVAL_DATE");

                entity.Property(e => e.ActualStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ACTUAL_START_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DestFacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEST_FACILITY_ID");

                entity.Property(e => e.EndMileage)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("END_MILEAGE");

                entity.Property(e => e.EstimatedArrivalDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ESTIMATED_ARRIVAL_DATE");

                entity.Property(e => e.EstimatedStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ESTIMATED_START_DATE");

                entity.Property(e => e.FixedAssetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_ID");

                entity.Property(e => e.FuelUsed)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("FUEL_USED");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OriginFacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORIGIN_FACILITY_ID");

                entity.Property(e => e.StartMileage)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("START_MILEAGE");

                entity.HasOne(d => d.DestFacility)
                    .WithMany(p => p.DeliveryDestFacilities)
                    .HasForeignKey(d => d.DestFacilityId)
                    .HasConstraintName("DELIV_DFAC");

                entity.HasOne(d => d.FixedAsset)
                    .WithMany(p => p.Deliveries)
                    .HasForeignKey(d => d.FixedAssetId)
                    .HasConstraintName("DELIV_FXAS");

                entity.HasOne(d => d.OriginFacility)
                    .WithMany(p => p.DeliveryOriginFacilities)
                    .HasForeignKey(d => d.OriginFacilityId)
                    .HasConstraintName("DELIV_OFAC");
            });

            modelBuilder.Entity<DesiredFeature>(entity =>
            {
                entity.HasKey(e => new { e.DesiredFeatureId, e.RequirementId });

                entity.ToTable("DESIRED_FEATURE");

                entity.HasIndex(e => e.ProductFeatureId, "DES_FEAT_PFEAT");

                entity.HasIndex(e => e.RequirementId, "DES_FEAT_REQ");

                entity.HasIndex(e => e.CreatedTxStamp, "DSRD_FTR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "DSRD_FTR_TXSTMP");

                entity.Property(e => e.DesiredFeatureId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DESIRED_FEATURE_ID");

                entity.Property(e => e.RequirementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REQUIREMENT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OptionalInd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OPTIONAL_IND")
                    .IsFixedLength();

                entity.Property(e => e.ProductFeatureId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_ID");

                entity.HasOne(d => d.ProductFeature)
                    .WithMany(p => p.DesiredFeatures)
                    .HasForeignKey(d => d.ProductFeatureId)
                    .HasConstraintName("DES_FEAT_PFEAT");

                entity.HasOne(d => d.Requirement)
                    .WithMany(p => p.DesiredFeatures)
                    .HasForeignKey(d => d.RequirementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DES_FEAT_REQ");
            });

            modelBuilder.Entity<Document>(entity =>
            {
                entity.ToTable("DOCUMENT");

                entity.HasIndex(e => e.DocumentTypeId, "DOCUMENT_TO_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "DOCUMENT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "DOCUMENT_TXSTMP");

                entity.Property(e => e.DocumentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_CREATED");

                entity.Property(e => e.DocumentLocation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_LOCATION");

                entity.Property(e => e.DocumentText)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_TEXT");

                entity.Property(e => e.DocumentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_TYPE_ID");

                entity.Property(e => e.ImageData)
                    .HasColumnType("image")
                    .HasColumnName("IMAGE_DATA");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.DocumentType)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.DocumentTypeId)
                    .HasConstraintName("DOCUMENT_TO_TYPE");
            });

            modelBuilder.Entity<DocumentAttribute>(entity =>
            {
                entity.HasKey(e => new { e.DocumentId, e.AttrName });

                entity.ToTable("DOCUMENT_ATTRIBUTE");

                entity.HasIndex(e => e.CreatedTxStamp, "DCMNT_ATTRT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "DCMNT_ATTRT_TXSTMP");

                entity.HasIndex(e => e.DocumentId, "DOCUMENT_ATTR");

                entity.Property(e => e.DocumentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.DocumentAttributes)
                    .HasForeignKey(d => d.DocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DOCUMENT_ATTR");
            });

            modelBuilder.Entity<DocumentType>(entity =>
            {
                entity.ToTable("DOCUMENT_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "DCMNT_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "DCMNT_TP_TXSTMP");

                entity.HasIndex(e => e.ParentTypeId, "DOC_TYPE_PARENT");

                entity.Property(e => e.DocumentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("DOC_TYPE_PARENT");
            });

            modelBuilder.Entity<DocumentTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.DocumentTypeId, e.AttrName });

                entity.ToTable("DOCUMENT_TYPE_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "DCMT_TP_ATR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "DCMT_TP_ATR_TXSTMP");

                entity.HasIndex(e => e.DocumentTypeId, "DOC_TYPE_ATTR");

                entity.Property(e => e.DocumentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.DocumentType)
                    .WithMany(p => p.DocumentTypeAttrs)
                    .HasForeignKey(d => d.DocumentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DOC_TYPE_ATTR");
            });

            modelBuilder.Entity<EftAccount>(entity =>
            {
                entity.HasKey(e => e.PaymentMethodId);

                entity.ToTable("EFT_ACCOUNT");

                entity.HasIndex(e => e.ContactMechId, "EFTACCT_CMECH");

                entity.HasIndex(e => e.ContactMechId, "EFTACCT_PADDR");

                entity.HasIndex(e => e.PaymentMethodId, "EFTACCT_PMETH");

                entity.HasIndex(e => e.CreatedTxStamp, "EFT_ACCOUNT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "EFT_ACCOUNT_TXSTMP");

                entity.Property(e => e.PaymentMethodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_METHOD_ID");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_NUMBER");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_TYPE");

                entity.Property(e => e.BankName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BANK_NAME");

                entity.Property(e => e.CompanyNameOnAccount)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("COMPANY_NAME_ON_ACCOUNT");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.NameOnAccount)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NAME_ON_ACCOUNT");

                entity.Property(e => e.RoutingNumber)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ROUTING_NUMBER");

                entity.Property(e => e.YearsAtBank).HasColumnName("YEARS_AT_BANK");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.EftAccounts)
                    .HasForeignKey(d => d.ContactMechId)
                    .HasConstraintName("EFTACCT_CMECH");

                entity.HasOne(d => d.ContactMechNavigation)
                    .WithMany(p => p.EftAccounts)
                    .HasForeignKey(d => d.ContactMechId)
                    .HasConstraintName("EFTACCT_PADDR");

                entity.HasOne(d => d.PaymentMethod)
                    .WithOne(p => p.EftAccount)
                    .HasForeignKey<EftAccount>(d => d.PaymentMethodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EFTACCT_PMETH");
            });

            modelBuilder.Entity<ElectronicText>(entity =>
            {
                entity.HasKey(e => e.DataResourceId);

                entity.ToTable("ELECTRONIC_TEXT");

                entity.HasIndex(e => e.DataResourceId, "DATA_REC_TEXT");

                entity.HasIndex(e => e.CreatedTxStamp, "ELCTRNC_TXT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ELCTRNC_TXT_TXSTMP");

                entity.Property(e => e.DataResourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_RESOURCE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.TextData)
                    .HasColumnType("text")
                    .HasColumnName("TEXT_DATA");

                entity.HasOne(d => d.DataResource)
                    .WithOne(p => p.ElectronicText)
                    .HasForeignKey<ElectronicText>(d => d.DataResourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DATA_REC_TEXT");
            });

            modelBuilder.Entity<EmailAddressVerification>(entity =>
            {
                entity.HasKey(e => e.EmailAddress);

                entity.ToTable("EMAIL_ADDRESS_VERIFICATION");

                entity.HasIndex(e => e.VerifyHash, "EMAIL_VERIFY_HASH")
                    .IsUnique();

                entity.HasIndex(e => e.CreatedTxStamp, "EML_ADDS_VRFN_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "EML_ADDS_VRFN_TXSP");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ADDRESS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.ExpireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRE_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.VerifyHash)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VERIFY_HASH");
            });

            modelBuilder.Entity<EmailTemplateSetting>(entity =>
            {
                entity.ToTable("EMAIL_TEMPLATE_SETTING");

                entity.HasIndex(e => e.EmailType, "EMAILSET_ENUM");

                entity.HasIndex(e => e.CreatedTxStamp, "EML_TMPT_STG_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "EML_TMPT_STG_TXSTP");

                entity.Property(e => e.EmailTemplateSettingId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_TEMPLATE_SETTING_ID");

                entity.Property(e => e.BccAddress)
                    .HasMaxLength(320)
                    .IsUnicode(false)
                    .HasColumnName("BCC_ADDRESS");

                entity.Property(e => e.BodyScreenLocation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("BODY_SCREEN_LOCATION");

                entity.Property(e => e.CcAddress)
                    .HasMaxLength(320)
                    .IsUnicode(false)
                    .HasColumnName("CC_ADDRESS");

                entity.Property(e => e.ContentType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_TYPE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.EmailType)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_TYPE");

                entity.Property(e => e.FromAddress)
                    .HasMaxLength(320)
                    .IsUnicode(false)
                    .HasColumnName("FROM_ADDRESS");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Subject)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SUBJECT");

                entity.Property(e => e.XslfoAttachScreenLocation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("XSLFO_ATTACH_SCREEN_LOCATION");

                entity.HasOne(d => d.EmailTypeNavigation)
                    .WithMany(p => p.EmailTemplateSettings)
                    .HasForeignKey(d => d.EmailType)
                    .HasConstraintName("EMAILSET_ENUM");
            });

            modelBuilder.Entity<EmplLeave>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.LeaveTypeId, e.FromDate });

                entity.ToTable("EMPL_LEAVE");

                entity.HasIndex(e => e.ApproverPartyId, "EMPL_LEAVE_APPR");

                entity.HasIndex(e => e.LeaveTypeId, "EMPL_LEAVE_ELETP");

                entity.HasIndex(e => e.PartyId, "EMPL_LEAVE_PRTY");

                entity.HasIndex(e => e.LeaveStatus, "EMPL_LEAVE_STS");

                entity.HasIndex(e => e.CreatedTxStamp, "EMPL_LEAVE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "EMPL_LEAVE_TXSTMP");

                entity.HasIndex(e => e.EmplLeaveReasonTypeId, "EMP_LEAV_REAS_ELTP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.LeaveTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("LEAVE_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.ApproverPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("APPROVER_PARTY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.EmplLeaveReasonTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMPL_LEAVE_REASON_TYPE_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LeaveStatus)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("LEAVE_STATUS");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ApproverParty)
                    .WithMany(p => p.EmplLeaveApproverParties)
                    .HasForeignKey(d => d.ApproverPartyId)
                    .HasConstraintName("EMPL_LEAVE_APPR");

                entity.HasOne(d => d.EmplLeaveReasonType)
                    .WithMany(p => p.EmplLeaves)
                    .HasForeignKey(d => d.EmplLeaveReasonTypeId)
                    .HasConstraintName("EMP_LEAV_REAS_ELTP");

                entity.HasOne(d => d.LeaveStatusNavigation)
                    .WithMany(p => p.EmplLeaves)
                    .HasForeignKey(d => d.LeaveStatus)
                    .HasConstraintName("EMPL_LEAVE_STS");

                entity.HasOne(d => d.LeaveType)
                    .WithMany(p => p.EmplLeaves)
                    .HasForeignKey(d => d.LeaveTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EMPL_LEAVE_ELETP");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.EmplLeaveParties)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EMPL_LEAVE_PRTY");
            });

            modelBuilder.Entity<EmplLeaveReasonType>(entity =>
            {
                entity.ToTable("EMPL_LEAVE_REASON_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "EML_LV_RSN_TP_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "EML_LV_RSN_TP_TXSP");

                entity.HasIndex(e => e.ParentTypeId, "EMPL_REASON_TPAR");

                entity.Property(e => e.EmplLeaveReasonTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMPL_LEAVE_REASON_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("EMPL_REASON_TPAR");
            });

            modelBuilder.Entity<EmplLeaveType>(entity =>
            {
                entity.HasKey(e => e.LeaveTypeId);

                entity.ToTable("EMPL_LEAVE_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "EMPL_LEAVE_TPAR");

                entity.HasIndex(e => e.CreatedTxStamp, "EMPL_LV_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "EMPL_LV_TP_TXSTMP");

                entity.Property(e => e.LeaveTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("LEAVE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("EMPL_LEAVE_TPAR");
            });

            modelBuilder.Entity<EmplPosition>(entity =>
            {
                entity.ToTable("EMPL_POSITION");

                entity.HasIndex(e => e.PartyId, "EMPL_POS_PRTY");

                entity.HasIndex(e => e.StatusId, "EMPL_POS_STTS");

                entity.HasIndex(e => e.CreatedTxStamp, "EMPL_PSTN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "EMPL_PSTN_TXSTMP");

                entity.Property(e => e.EmplPositionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMPL_POSITION_ID");

                entity.Property(e => e.ActualFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ACTUAL_FROM_DATE");

                entity.Property(e => e.ActualThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ACTUAL_THRU_DATE");

                entity.Property(e => e.BudgetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ID");

                entity.Property(e => e.BudgetItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ITEM_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.EmplPositionTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMPL_POSITION_TYPE_ID");

                entity.Property(e => e.EstimatedFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ESTIMATED_FROM_DATE");

                entity.Property(e => e.EstimatedThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ESTIMATED_THRU_DATE");

                entity.Property(e => e.ExemptFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("EXEMPT_FLAG")
                    .IsFixedLength();

                entity.Property(e => e.FulltimeFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FULLTIME_FLAG")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.SalaryFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SALARY_FLAG")
                    .IsFixedLength();

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.TemporaryFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TEMPORARY_FLAG")
                    .IsFixedLength();

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.EmplPositions)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("EMPL_POS_PRTY");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.EmplPositions)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("EMPL_POS_STTS");
            });

            modelBuilder.Entity<EmplPositionClassType>(entity =>
            {
                entity.ToTable("EMPL_POSITION_CLASS_TYPE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "EML_PSN_CLS_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "EML_PSN_CLS_TP_TXS");

                entity.HasIndex(e => e.ParentTypeId, "EMPL_CLS_TYP_PAR");

                entity.Property(e => e.EmplPositionClassTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMPL_POSITION_CLASS_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("EMPL_CLS_TYP_PAR");
            });

            modelBuilder.Entity<EmplPositionFulfillment>(entity =>
            {
                entity.HasKey(e => new { e.EmplPositionId, e.PartyId, e.FromDate });

                entity.ToTable("EMPL_POSITION_FULFILLMENT");

                entity.HasIndex(e => e.CreatedTxStamp, "EML_PSN_FLFLT_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "EML_PSN_FLFLT_TXSP");

                entity.HasIndex(e => e.EmplPositionId, "EMPL_PSFLMT_EMPS");

                entity.HasIndex(e => e.PartyId, "EMPL_PSFLMT_PRTY");

                entity.Property(e => e.EmplPositionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMPL_POSITION_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.EmplPosition)
                    .WithMany(p => p.EmplPositionFulfillments)
                    .HasForeignKey(d => d.EmplPositionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EMPL_PSFLMT_EMPS");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.EmplPositionFulfillments)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EMPL_PSFLMT_PRTY");
            });

            modelBuilder.Entity<EmplPositionReportingStruct>(entity =>
            {
                entity.HasKey(e => new { e.EmplPositionIdReportingTo, e.EmplPositionIdManagedBy, e.FromDate })
                    .HasName("PK_EMPL_POSITION_REPORTING_STR");

                entity.ToTable("EMPL_POSITION_REPORTING_STRUCT");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "EML_PSN_RPG_STT_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "EML_PSN_RPG_STT_TS");

                entity.HasIndex(e => e.EmplPositionIdManagedBy, "EMPL_PSRPS_EMPSM");

                entity.HasIndex(e => e.EmplPositionIdReportingTo, "EMPL_PSRPS_EMPSR");

                entity.Property(e => e.EmplPositionIdReportingTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMPL_POSITION_ID_REPORTING_TO");

                entity.Property(e => e.EmplPositionIdManagedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMPL_POSITION_ID_MANAGED_BY");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PrimaryFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_FLAG")
                    .IsFixedLength();

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.EmplPositionIdManagedByNavigation)
                    .WithMany(p => p.EmplPositionReportingStructEmplPositionIdManagedByNavigations)
                    .HasForeignKey(d => d.EmplPositionIdManagedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EMPL_PSRPS_EMPSM");

                entity.HasOne(d => d.EmplPositionIdReportingToNavigation)
                    .WithMany(p => p.EmplPositionReportingStructEmplPositionIdReportingToNavigations)
                    .HasForeignKey(d => d.EmplPositionIdReportingTo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EMPL_PSRPS_EMPSR");
            });

            modelBuilder.Entity<EmplPositionResponsibility>(entity =>
            {
                entity.HasKey(e => new { e.EmplPositionId, e.ResponsibilityTypeId, e.FromDate })
                    .HasName("PK_EMPL_POSITION_RESPONSIBILIT");

                entity.ToTable("EMPL_POSITION_RESPONSIBILITY");

                entity.HasIndex(e => e.CreatedTxStamp, "EML_PSN_RSPNT_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "EML_PSN_RSPNT_TXSP");

                entity.HasIndex(e => e.EmplPositionId, "EMPL_PSRTY_EMPS");

                entity.HasIndex(e => e.ResponsibilityTypeId, "EMPL_PSRTY_RYTP");

                entity.Property(e => e.EmplPositionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMPL_POSITION_ID");

                entity.Property(e => e.ResponsibilityTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RESPONSIBILITY_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.EmplPosition)
                    .WithMany(p => p.EmplPositionResponsibilities)
                    .HasForeignKey(d => d.EmplPositionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EMPL_PSRTY_EMPS");

                entity.HasOne(d => d.ResponsibilityType)
                    .WithMany(p => p.EmplPositionResponsibilities)
                    .HasForeignKey(d => d.ResponsibilityTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EMPL_PSRTY_RYTP");
            });

            modelBuilder.Entity<EmplPositionType>(entity =>
            {
                entity.ToTable("EMPL_POSITION_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "EMPL_POSI_TYP_PAR");

                entity.HasIndex(e => e.CreatedTxStamp, "EMPL_PSN_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "EMPL_PSN_TP_TXSTMP");

                entity.Property(e => e.EmplPositionTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMPL_POSITION_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("EMPL_POSI_TYP_PAR");
            });

            modelBuilder.Entity<EmplPositionTypeClass>(entity =>
            {
                entity.HasKey(e => new { e.EmplPositionTypeId, e.EmplPositionClassTypeId, e.FromDate });

                entity.ToTable("EMPL_POSITION_TYPE_CLASS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "EML_PSN_TP_CLS_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "EML_PSN_TP_CLS_TXS");

                entity.HasIndex(e => e.EmplPositionClassTypeId, "EMPL_PSTPCS_EPCTP");

                entity.HasIndex(e => e.EmplPositionTypeId, "EMPL_PSTPCS_EPTP");

                entity.Property(e => e.EmplPositionTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMPL_POSITION_TYPE_ID");

                entity.Property(e => e.EmplPositionClassTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMPL_POSITION_CLASS_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.StandardHoursPerWeek).HasColumnName("STANDARD_HOURS_PER_WEEK");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.EmplPositionClassType)
                    .WithMany(p => p.EmplPositionTypeClasses)
                    .HasForeignKey(d => d.EmplPositionClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EMPL_PSTPCS_EPCTP");

                entity.HasOne(d => d.EmplPositionType)
                    .WithMany(p => p.EmplPositionTypeClasses)
                    .HasForeignKey(d => d.EmplPositionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EMPL_PSTPCS_EPTP");
            });

            modelBuilder.Entity<EmplPositionTypeRateNew>(entity =>
            {
                entity.HasKey(e => new { e.EmplPositionTypeId, e.RateTypeId, e.FromDate });

                entity.ToTable("EMPL_POSITION_TYPE_RATE_NEW");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "EML_TP_RT_NW_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "EML_TP_RT_NW_TS");

                entity.HasIndex(e => e.EmplPositionTypeId, "EMPL_PTPRT_EPTP");

                entity.Property(e => e.EmplPositionTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMPL_POSITION_TYPE_ID");

                entity.Property(e => e.RateTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RATE_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PayGradeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAY_GRADE_ID");

                entity.Property(e => e.SalaryStepSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SALARY_STEP_SEQ_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.EmplPositionType)
                    .WithMany(p => p.EmplPositionTypeRateNews)
                    .HasForeignKey(d => d.EmplPositionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EMPL_PTPRT_EPTP");
            });

            modelBuilder.Entity<Employment>(entity =>
            {
                entity.HasKey(e => new { e.RoleTypeIdFrom, e.RoleTypeIdTo, e.PartyIdFrom, e.PartyIdTo, e.FromDate });

                entity.ToTable("EMPLOYMENT");

                entity.HasIndex(e => new { e.PartyIdFrom, e.RoleTypeIdFrom }, "EMPLMNT_FPTRL");

                entity.HasIndex(e => e.PartyIdFrom, "EMPLMNT_FPTY");

                entity.HasIndex(e => new { e.PartyIdTo, e.RoleTypeIdTo }, "EMPLMNT_TPTRL");

                entity.HasIndex(e => e.PartyIdTo, "EMPLMNT_TPTY");

                entity.HasIndex(e => e.CreatedTxStamp, "EMPLOYMENT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "EMPLOYMENT_TXSTMP");

                entity.Property(e => e.RoleTypeIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID_FROM");

                entity.Property(e => e.RoleTypeIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID_TO");

                entity.Property(e => e.PartyIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID_FROM");

                entity.Property(e => e.PartyIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID_TO");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.TerminationReasonId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TERMINATION_REASON_ID");

                entity.Property(e => e.TerminationTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TERMINATION_TYPE_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.PartyIdFromNavigation)
                    .WithMany(p => p.EmploymentPartyIdFromNavigations)
                    .HasForeignKey(d => d.PartyIdFrom)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EMPLMNT_FPTY");

                entity.HasOne(d => d.PartyIdToNavigation)
                    .WithMany(p => p.EmploymentPartyIdToNavigations)
                    .HasForeignKey(d => d.PartyIdTo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EMPLMNT_TPTY");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.EmploymentPartyRoles)
                    .HasForeignKey(d => new { d.PartyIdFrom, d.RoleTypeIdFrom })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EMPLMNT_FPTRL");

                entity.HasOne(d => d.PartyRoleNavigation)
                    .WithMany(p => p.EmploymentPartyRoleNavigations)
                    .HasForeignKey(d => new { d.PartyIdTo, d.RoleTypeIdTo })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EMPLMNT_TPTRL");
            });

            modelBuilder.Entity<EmploymentApp>(entity =>
            {
                entity.HasKey(e => e.ApplicationId);

                entity.ToTable("EMPLOYMENT_APP");

                entity.HasIndex(e => e.ApproverPartyId, "EMPLMNT_APP_APER");

                entity.HasIndex(e => e.JobRequisitionId, "EMPLMNT_APP_JBRQ");

                entity.HasIndex(e => e.CreatedTxStamp, "EMPLMNT_APP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "EMPLMNT_APP_TXSTMP");

                entity.Property(e => e.ApplicationId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("APPLICATION_ID");

                entity.Property(e => e.ApplicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("APPLICATION_DATE");

                entity.Property(e => e.ApplyingPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("APPLYING_PARTY_ID");

                entity.Property(e => e.ApproverPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("APPROVER_PARTY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.EmplPositionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMPL_POSITION_ID");

                entity.Property(e => e.EmploymentAppSourceTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMPLOYMENT_APP_SOURCE_TYPE_ID");

                entity.Property(e => e.JobRequisitionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("JOB_REQUISITION_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ReferredByPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REFERRED_BY_PARTY_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.HasOne(d => d.ApproverParty)
                    .WithMany(p => p.EmploymentApps)
                    .HasForeignKey(d => d.ApproverPartyId)
                    .HasConstraintName("EMPLMNT_APP_APER");

                entity.HasOne(d => d.JobRequisition)
                    .WithMany(p => p.EmploymentApps)
                    .HasForeignKey(d => d.JobRequisitionId)
                    .HasConstraintName("EMPLMNT_APP_JBRQ");
            });

            modelBuilder.Entity<EmploymentAppSourceType>(entity =>
            {
                entity.ToTable("EMPLOYMENT_APP_SOURCE_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "EMPL_APP_SRC_TYP");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "EMT_APP_SRC_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "EMT_APP_SRC_TP_TXS");

                entity.Property(e => e.EmploymentAppSourceTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMPLOYMENT_APP_SOURCE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("EMPL_APP_SRC_TYP");
            });

            modelBuilder.Entity<EntityAuditLog>(entity =>
            {
                entity.HasKey(e => e.AuditHistorySeqId);

                entity.ToTable("ENTITY_AUDIT_LOG");

                entity.HasIndex(e => e.CreatedTxStamp, "ENTT_ADT_LG_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ENTT_ADT_LG_TXSTMP");

                entity.Property(e => e.AuditHistorySeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AUDIT_HISTORY_SEQ_ID");

                entity.Property(e => e.ChangedByInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CHANGED_BY_INFO");

                entity.Property(e => e.ChangedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHANGED_DATE");

                entity.Property(e => e.ChangedEntityName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CHANGED_ENTITY_NAME");

                entity.Property(e => e.ChangedFieldName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CHANGED_FIELD_NAME");

                entity.Property(e => e.ChangedSessionInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CHANGED_SESSION_INFO");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.NewValueText)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NEW_VALUE_TEXT");

                entity.Property(e => e.OldValueText)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OLD_VALUE_TEXT");

                entity.Property(e => e.PkCombinedValueText)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PK_COMBINED_VALUE_TEXT");
            });

            modelBuilder.Entity<EntityGroup>(entity =>
            {
                entity.ToTable("ENTITY_GROUP");

                entity.HasIndex(e => e.CreatedTxStamp, "ENTT_GRP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ENTT_GRP_TXSTMP");

                entity.Property(e => e.EntityGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ENTITY_GROUP_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.EntityGroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENTITY_GROUP_NAME");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<EntityGroupEntry>(entity =>
            {
                entity.HasKey(e => new { e.EntityGroupId, e.EntityOrPackage });

                entity.ToTable("ENTITY_GROUP_ENTRY");

                entity.HasIndex(e => e.EntityGroupId, "ENTGRP_GRP");

                entity.HasIndex(e => e.CreatedTxStamp, "ENT_GRP_ENR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ENT_GRP_ENR_TXSTMP");

                entity.Property(e => e.EntityGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ENTITY_GROUP_ID");

                entity.Property(e => e.EntityOrPackage)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENTITY_OR_PACKAGE");

                entity.Property(e => e.ApplEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("APPL_ENUM_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.EntityGroup)
                    .WithMany(p => p.EntityGroupEntries)
                    .HasForeignKey(d => d.EntityGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ENTGRP_GRP");
            });

            modelBuilder.Entity<EntityKeyStore>(entity =>
            {
                entity.HasKey(e => e.KeyName);

                entity.ToTable("ENTITY_KEY_STORE");

                entity.HasIndex(e => e.CreatedTxStamp, "ENTT_K_STR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ENTT_K_STR_TXSTMP");

                entity.Property(e => e.KeyName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("KEY_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.KeyText)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("KEY_TEXT");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<EntitySync>(entity =>
            {
                entity.ToTable("ENTITY_SYNC");

                entity.HasIndex(e => e.CreatedTxStamp, "ENTITY_SYNC_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ENTITY_SYNC_TXSTMP");

                entity.Property(e => e.EntitySyncId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ENTITY_SYNC_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.ForPullOnly)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FOR_PULL_ONLY")
                    .IsFixedLength();

                entity.Property(e => e.ForPushOnly)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FOR_PUSH_ONLY")
                    .IsFixedLength();

                entity.Property(e => e.KeepRemoveInfoHours).HasColumnName("KEEP_REMOVE_INFO_HOURS");

                entity.Property(e => e.LastHistoryStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_HISTORY_START_DATE");

                entity.Property(e => e.LastSuccessfulSynchTime)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_SUCCESSFUL_SYNCH_TIME");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MaxRunningNoUpdateMillis).HasColumnName("MAX_RUNNING_NO_UPDATE_MILLIS");

                entity.Property(e => e.OfflineSyncSplitMillis).HasColumnName("OFFLINE_SYNC_SPLIT_MILLIS");

                entity.Property(e => e.PreOfflineSynchTime)
                    .HasColumnType("datetime")
                    .HasColumnName("PRE_OFFLINE_SYNCH_TIME");

                entity.Property(e => e.RunStatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RUN_STATUS_ID");

                entity.Property(e => e.SyncEndBufferMillis).HasColumnName("SYNC_END_BUFFER_MILLIS");

                entity.Property(e => e.SyncSplitMillis).HasColumnName("SYNC_SPLIT_MILLIS");

                entity.Property(e => e.TargetDelegatorName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TARGET_DELEGATOR_NAME");

                entity.Property(e => e.TargetServiceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TARGET_SERVICE_NAME");
            });

            modelBuilder.Entity<EntitySyncHistory>(entity =>
            {
                entity.HasKey(e => new { e.EntitySyncId, e.StartDate });

                entity.ToTable("ENTITY_SYNC_HISTORY");

                entity.HasIndex(e => e.EntitySyncId, "ENTSYNC_HSTSNC");

                entity.HasIndex(e => e.CreatedTxStamp, "ENT_SNC_HSR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ENT_SNC_HSR_TXSTMP");

                entity.Property(e => e.EntitySyncId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ENTITY_SYNC_ID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.BeginningSynchTime)
                    .HasColumnType("datetime")
                    .HasColumnName("BEGINNING_SYNCH_TIME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastCandidateEndTime)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_CANDIDATE_END_TIME");

                entity.Property(e => e.LastSplitStartTime).HasColumnName("LAST_SPLIT_START_TIME");

                entity.Property(e => e.LastSuccessfulSynchTime)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_SUCCESSFUL_SYNCH_TIME");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PerSplitMaxItems).HasColumnName("PER_SPLIT_MAX_ITEMS");

                entity.Property(e => e.PerSplitMaxMillis).HasColumnName("PER_SPLIT_MAX_MILLIS");

                entity.Property(e => e.PerSplitMinItems).HasColumnName("PER_SPLIT_MIN_ITEMS");

                entity.Property(e => e.PerSplitMinMillis).HasColumnName("PER_SPLIT_MIN_MILLIS");

                entity.Property(e => e.RunStatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RUN_STATUS_ID");

                entity.Property(e => e.RunningTimeMillis).HasColumnName("RUNNING_TIME_MILLIS");

                entity.Property(e => e.ToCreateInserted).HasColumnName("TO_CREATE_INSERTED");

                entity.Property(e => e.ToCreateNotUpdated).HasColumnName("TO_CREATE_NOT_UPDATED");

                entity.Property(e => e.ToCreateUpdated).HasColumnName("TO_CREATE_UPDATED");

                entity.Property(e => e.ToRemoveAlreadyDeleted).HasColumnName("TO_REMOVE_ALREADY_DELETED");

                entity.Property(e => e.ToRemoveDeleted).HasColumnName("TO_REMOVE_DELETED");

                entity.Property(e => e.ToStoreInserted).HasColumnName("TO_STORE_INSERTED");

                entity.Property(e => e.ToStoreNotUpdated).HasColumnName("TO_STORE_NOT_UPDATED");

                entity.Property(e => e.ToStoreUpdated).HasColumnName("TO_STORE_UPDATED");

                entity.Property(e => e.TotalRowsExported).HasColumnName("TOTAL_ROWS_EXPORTED");

                entity.Property(e => e.TotalRowsToCreate).HasColumnName("TOTAL_ROWS_TO_CREATE");

                entity.Property(e => e.TotalRowsToRemove).HasColumnName("TOTAL_ROWS_TO_REMOVE");

                entity.Property(e => e.TotalRowsToStore).HasColumnName("TOTAL_ROWS_TO_STORE");

                entity.Property(e => e.TotalSplits).HasColumnName("TOTAL_SPLITS");

                entity.Property(e => e.TotalStoreCalls).HasColumnName("TOTAL_STORE_CALLS");

                entity.HasOne(d => d.EntitySync)
                    .WithMany(p => p.EntitySyncHistories)
                    .HasForeignKey(d => d.EntitySyncId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ENTSYNC_HSTSNC");
            });

            modelBuilder.Entity<EntitySyncInclude>(entity =>
            {
                entity.HasKey(e => new { e.EntitySyncId, e.EntityOrPackage });

                entity.ToTable("ENTITY_SYNC_INCLUDE");

                entity.HasIndex(e => e.EntitySyncId, "ENTSYNC_INCSNC");

                entity.HasIndex(e => e.CreatedTxStamp, "ENT_SNC_INCD_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ENT_SNC_INCD_TXSTP");

                entity.Property(e => e.EntitySyncId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ENTITY_SYNC_ID");

                entity.Property(e => e.EntityOrPackage)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENTITY_OR_PACKAGE");

                entity.Property(e => e.ApplEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("APPL_ENUM_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.EntitySync)
                    .WithMany(p => p.EntitySyncIncludes)
                    .HasForeignKey(d => d.EntitySyncId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ENTSYNC_INCSNC");
            });

            modelBuilder.Entity<EntitySyncIncludeGroup>(entity =>
            {
                entity.HasKey(e => new { e.EntitySyncId, e.EntityGroupId });

                entity.ToTable("ENTITY_SYNC_INCLUDE_GROUP");

                entity.HasIndex(e => e.EntityGroupId, "ENTSNCGU_GRP");

                entity.HasIndex(e => e.EntitySyncId, "ENTSNCGU_SNC");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ENT_SNC_IND_GRP_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "ENT_SNC_IND_GRP_TS");

                entity.Property(e => e.EntitySyncId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ENTITY_SYNC_ID");

                entity.Property(e => e.EntityGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ENTITY_GROUP_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.EntityGroup)
                    .WithMany(p => p.EntitySyncIncludeGroups)
                    .HasForeignKey(d => d.EntityGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ENTSNCGU_GRP");

                entity.HasOne(d => d.EntitySync)
                    .WithMany(p => p.EntitySyncIncludeGroups)
                    .HasForeignKey(d => d.EntitySyncId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ENTSNCGU_SNC");
            });

            modelBuilder.Entity<EntitySyncRemove>(entity =>
            {
                entity.ToTable("ENTITY_SYNC_REMOVE");

                entity.HasIndex(e => e.CreatedTxStamp, "ENT_SNC_RMV_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ENT_SNC_RMV_TXSTMP");

                entity.Property(e => e.EntitySyncRemoveId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ENTITY_SYNC_REMOVE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PrimaryKeyRemoved)
                    .HasColumnType("text")
                    .HasColumnName("PRIMARY_KEY_REMOVED");
            });

            modelBuilder.Entity<Enumeration>(entity =>
            {
                entity.HasKey(e => e.EnumId);

                entity.ToTable("ENUMERATION");

                entity.HasIndex(e => e.CreatedTxStamp, "ENUMERATION_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ENUMERATION_TXSTMP");

                entity.HasIndex(e => e.EnumTypeId, "ENUM_TO_TYPE");

                entity.Property(e => e.EnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ENUM_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.EnumCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ENUM_CODE");

                entity.Property(e => e.EnumTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ENUM_TYPE_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SEQUENCE_ID");

                entity.HasOne(d => d.EnumType)
                    .WithMany(p => p.Enumerations)
                    .HasForeignKey(d => d.EnumTypeId)
                    .HasConstraintName("ENUM_TO_TYPE");
            });

            modelBuilder.Entity<EnumerationType>(entity =>
            {
                entity.HasKey(e => e.EnumTypeId);

                entity.ToTable("ENUMERATION_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "ENMRTN_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ENMRTN_TP_TXSTMP");

                entity.HasIndex(e => e.ParentTypeId, "ENUM_TYPE_PARENT");

                entity.Property(e => e.EnumTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ENUM_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("ENUM_TYPE_PARENT");
            });

            modelBuilder.Entity<Facility>(entity =>
            {
                entity.ToTable("FACILITY");

                entity.HasIndex(e => e.FacilityTypeId, "FACILITY_FCTYP");

                entity.HasIndex(e => e.GeoPointId, "FACILITY_GEOPT");

                entity.HasIndex(e => e.OwnerPartyId, "FACILITY_OWNER");

                entity.HasIndex(e => e.ParentFacilityId, "FACILITY_PARENT");

                entity.HasIndex(e => e.PrimaryFacilityGroupId, "FACILITY_PGRP");

                entity.HasIndex(e => e.FacilitySizeUomId, "FACILITY_SUOM");

                entity.HasIndex(e => e.CreatedTxStamp, "FACILITY_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FACILITY_TXSTMP");

                entity.HasIndex(e => e.DefaultDimensionUomId, "FAC_DEF_DUOM");

                entity.HasIndex(e => e.DefaultWeightUomId, "FAC_DEF_WUOM");

                entity.HasIndex(e => e.DefaultInventoryItemTypeId, "FAC_INVITM_TYPE");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.ClosedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CLOSED_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DefaultDaysToShip).HasColumnName("DEFAULT_DAYS_TO_SHIP");

                entity.Property(e => e.DefaultDimensionUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULT_DIMENSION_UOM_ID");

                entity.Property(e => e.DefaultInventoryItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULT_INVENTORY_ITEM_TYPE_ID");

                entity.Property(e => e.DefaultWeightUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULT_WEIGHT_UOM_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.FacilityLevel).HasColumnName("FACILITY_LEVEL");

                entity.Property(e => e.FacilityName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_NAME");

                entity.Property(e => e.FacilitySize)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("FACILITY_SIZE");

                entity.Property(e => e.FacilitySizeUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_SIZE_UOM_ID");

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_TYPE_ID");

                entity.Property(e => e.GeoPointId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_POINT_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OpenedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("OPENED_DATE");

                entity.Property(e => e.OwnerPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("OWNER_PARTY_ID");

                entity.Property(e => e.ParentFacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_FACILITY_ID");

                entity.Property(e => e.PrimaryFacilityGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_FACILITY_GROUP_ID");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.SquareFootage).HasColumnName("SQUARE_FOOTAGE");

                entity.HasOne(d => d.DefaultDimensionUom)
                    .WithMany(p => p.FacilityDefaultDimensionUoms)
                    .HasForeignKey(d => d.DefaultDimensionUomId)
                    .HasConstraintName("FAC_DEF_DUOM");

                entity.HasOne(d => d.DefaultInventoryItemType)
                    .WithMany(p => p.Facilities)
                    .HasForeignKey(d => d.DefaultInventoryItemTypeId)
                    .HasConstraintName("FAC_INVITM_TYPE");

                entity.HasOne(d => d.DefaultWeightUom)
                    .WithMany(p => p.FacilityDefaultWeightUoms)
                    .HasForeignKey(d => d.DefaultWeightUomId)
                    .HasConstraintName("FAC_DEF_WUOM");

                entity.HasOne(d => d.FacilitySizeUom)
                    .WithMany(p => p.FacilityFacilitySizeUoms)
                    .HasForeignKey(d => d.FacilitySizeUomId)
                    .HasConstraintName("FACILITY_SUOM");

                entity.HasOne(d => d.FacilityType)
                    .WithMany(p => p.Facilities)
                    .HasForeignKey(d => d.FacilityTypeId)
                    .HasConstraintName("FACILITY_FCTYP");

                entity.HasOne(d => d.GeoPoint)
                    .WithMany(p => p.Facilities)
                    .HasForeignKey(d => d.GeoPointId)
                    .HasConstraintName("FACILITY_GEOPT");

                entity.HasOne(d => d.OwnerParty)
                    .WithMany(p => p.Facilities)
                    .HasForeignKey(d => d.OwnerPartyId)
                    .HasConstraintName("FACILITY_OWNER");

                entity.HasOne(d => d.ParentFacility)
                    .WithMany(p => p.InverseParentFacility)
                    .HasForeignKey(d => d.ParentFacilityId)
                    .HasConstraintName("FACILITY_PARENT");

                entity.HasOne(d => d.PrimaryFacilityGroup)
                    .WithMany(p => p.Facilities)
                    .HasForeignKey(d => d.PrimaryFacilityGroupId)
                    .HasConstraintName("FACILITY_PGRP");
            });

            modelBuilder.Entity<FacilityAssocType>(entity =>
            {
                entity.ToTable("FACILITY_ASSOC_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "FCLT_ASC_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FCLT_ASC_TP_TXSTMP");

                entity.Property(e => e.FacilityAssocTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ASSOC_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<FacilityAttribute>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.AttrName });

                entity.ToTable("FACILITY_ATTRIBUTE");

                entity.HasIndex(e => e.FacilityId, "FACILITY_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "FCLT_ATTRBT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FCLT_ATTRBT_TXSTMP");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.FacilityAttributes)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FACILITY_ATTR");
            });

            modelBuilder.Entity<FacilityCalendar>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.CalendarId, e.FacilityCalendarTypeId, e.FromDate });

                entity.ToTable("FACILITY_CALENDAR");

                entity.HasIndex(e => e.FacilityId, "FACILITY_CAL_FAC");

                entity.HasIndex(e => e.FacilityCalendarTypeId, "FACILITY_CAL_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "FCLT_CLNDR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FCLT_CLNDR_TXSTMP");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.CalendarId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CALENDAR_ID");

                entity.Property(e => e.FacilityCalendarTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_CALENDAR_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.FacilityCalendarType)
                    .WithMany(p => p.FacilityCalendars)
                    .HasForeignKey(d => d.FacilityCalendarTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FACILITY_CAL_TYPE");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.FacilityCalendars)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FACILITY_CAL_FAC");
            });

            modelBuilder.Entity<FacilityCalendarType>(entity =>
            {
                entity.ToTable("FACILITY_CALENDAR_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "FCT_CLNR_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FCT_CLNR_TP_TXSTMP");

                entity.Property(e => e.FacilityCalendarTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_CALENDAR_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");
            });

            modelBuilder.Entity<FacilityCarrierShipment>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.PartyId, e.RoleTypeId, e.ShipmentMethodTypeId });

                entity.ToTable("FACILITY_CARRIER_SHIPMENT");

                entity.HasIndex(e => new { e.ShipmentMethodTypeId, e.PartyId, e.RoleTypeId }, "FACILITY_CSH_CSM");

                entity.HasIndex(e => e.FacilityId, "FACILITY_CSH_FAC");

                entity.HasIndex(e => e.PartyId, "FACILITY_CSH_PTY");

                entity.HasIndex(e => e.ShipmentMethodTypeId, "FACILITY_CSH_STP");

                entity.HasIndex(e => e.CreatedTxStamp, "FCT_CRR_SHPT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FCT_CRR_SHPT_TXSTP");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.ShipmentMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_METHOD_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.FacilityCarrierShipments)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FACILITY_CSH_FAC");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.FacilityCarrierShipments)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FACILITY_CSH_PTY");

                entity.HasOne(d => d.ShipmentMethodType)
                    .WithMany(p => p.FacilityCarrierShipments)
                    .HasForeignKey(d => d.ShipmentMethodTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FACILITY_CSH_STP");

                entity.HasOne(d => d.CarrierShipmentMethod)
                    .WithMany(p => p.FacilityCarrierShipments)
                    .HasForeignKey(d => new { d.ShipmentMethodTypeId, d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FACILITY_CSH_CSM");
            });

            modelBuilder.Entity<FacilityContactMech>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.ContactMechId, e.FromDate });

                entity.ToTable("FACILITY_CONTACT_MECH");

                entity.HasIndex(e => e.ContactMechId, "FACIL_CMECH_CMECH");

                entity.HasIndex(e => e.FacilityId, "FACIL_CMECH_FACIL");

                entity.HasIndex(e => e.CreatedTxStamp, "FCT_CNTT_MCH_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FCT_CNTT_MCH_TXSTP");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Extension)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EXTENSION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.FacilityContactMeches)
                    .HasForeignKey(d => d.ContactMechId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FACIL_CMECH_CMECH");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.FacilityContactMeches)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FACIL_CMECH_FACIL");
            });

            modelBuilder.Entity<FacilityContactMechPurpose>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.ContactMechId, e.ContactMechPurposeTypeId, e.FromDate })
                    .HasName("PK_FACILITY_CONTACT_MECH_PURPO");

                entity.ToTable("FACILITY_CONTACT_MECH_PURPOSE");

                entity.HasIndex(e => e.ContactMechId, "FACIL_CMPRP_CMECH");

                entity.HasIndex(e => e.FacilityId, "FACIL_CMPRP_FACIL");

                entity.HasIndex(e => e.ContactMechPurposeTypeId, "FACIL_CMPRP_TYPE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FCT_CNT_MCH_PRS_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "FCT_CNT_MCH_PRS_TS");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.ContactMechPurposeTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_PURPOSE_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.FacilityContactMechPurposes)
                    .HasForeignKey(d => d.ContactMechId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FACIL_CMPRP_CMECH");

                entity.HasOne(d => d.ContactMechPurposeType)
                    .WithMany(p => p.FacilityContactMechPurposes)
                    .HasForeignKey(d => d.ContactMechPurposeTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FACIL_CMPRP_TYPE");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.FacilityContactMechPurposes)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FACIL_CMPRP_FACIL");
            });

            modelBuilder.Entity<FacilityContent>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.ContentId, e.FromDate });

                entity.ToTable("FACILITY_CONTENT");

                entity.HasIndex(e => e.ContentId, "FAC_CNT_CNT");

                entity.HasIndex(e => e.FacilityId, "FAC_CNT_FAC");

                entity.HasIndex(e => e.CreatedTxStamp, "FCLT_CNTNT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FCLT_CNTNT_TXSTMP");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.FacilityContents)
                    .HasForeignKey(d => d.ContentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FAC_CNT_CNT");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.FacilityContents)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FAC_CNT_FAC");
            });

            modelBuilder.Entity<FacilityGroup>(entity =>
            {
                entity.ToTable("FACILITY_GROUP");

                entity.HasIndex(e => e.PrimaryParentGroupId, "FACILITY_GP_PGRP");

                entity.HasIndex(e => e.FacilityGroupTypeId, "FACILITY_GP_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "FCLT_GRP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FCLT_GRP_TXSTMP");

                entity.Property(e => e.FacilityGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_GROUP_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.FacilityGroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_GROUP_NAME");

                entity.Property(e => e.FacilityGroupTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_GROUP_TYPE_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PrimaryParentGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_PARENT_GROUP_ID");

                entity.HasOne(d => d.FacilityGroupType)
                    .WithMany(p => p.FacilityGroups)
                    .HasForeignKey(d => d.FacilityGroupTypeId)
                    .HasConstraintName("FACILITY_GP_TYPE");

                entity.HasOne(d => d.PrimaryParentGroup)
                    .WithMany(p => p.InversePrimaryParentGroup)
                    .HasForeignKey(d => d.PrimaryParentGroupId)
                    .HasConstraintName("FACILITY_GP_PGRP");
            });

            modelBuilder.Entity<FacilityGroupMember>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.FacilityGroupId, e.FromDate });

                entity.ToTable("FACILITY_GROUP_MEMBER");

                entity.HasIndex(e => e.FacilityId, "FACILITY_MEM_FAC");

                entity.HasIndex(e => e.FacilityGroupId, "FACILITY_MEM_FGRP");

                entity.HasIndex(e => e.CreatedTxStamp, "FCT_GRP_MMR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FCT_GRP_MMR_TXSTMP");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.FacilityGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_GROUP_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.FacilityGroup)
                    .WithMany(p => p.FacilityGroupMembers)
                    .HasForeignKey(d => d.FacilityGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FACILITY_MEM_FGRP");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.FacilityGroupMembers)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FACILITY_MEM_FAC");
            });

            modelBuilder.Entity<FacilityGroupRole>(entity =>
            {
                entity.HasKey(e => new { e.FacilityGroupId, e.PartyId, e.RoleTypeId });

                entity.ToTable("FACILITY_GROUP_ROLE");

                entity.HasIndex(e => e.CreatedTxStamp, "FCLT_GRP_RL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FCLT_GRP_RL_TXSTMP");

                entity.HasIndex(e => e.FacilityGroupId, "FGROUP_RLE_FGRP");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "FGROUP_RLE_PTRLE");

                entity.Property(e => e.FacilityGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_GROUP_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.FacilityGroup)
                    .WithMany(p => p.FacilityGroupRoles)
                    .HasForeignKey(d => d.FacilityGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FGROUP_RLE_FGRP");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.FacilityGroupRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FGROUP_RLE_PTRLE");
            });

            modelBuilder.Entity<FacilityGroupRollup>(entity =>
            {
                entity.HasKey(e => new { e.FacilityGroupId, e.ParentFacilityGroupId, e.FromDate });

                entity.ToTable("FACILITY_GROUP_ROLLUP");

                entity.HasIndex(e => e.CreatedTxStamp, "FCT_GRP_RLP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FCT_GRP_RLP_TXSTMP");

                entity.HasIndex(e => e.FacilityGroupId, "FGRP_FRLP_CURRENT");

                entity.HasIndex(e => e.ParentFacilityGroupId, "FGRP_FRLP_PARENT");

                entity.Property(e => e.FacilityGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_GROUP_ID");

                entity.Property(e => e.ParentFacilityGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_FACILITY_GROUP_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.FacilityGroup)
                    .WithMany(p => p.FacilityGroupRollupFacilityGroups)
                    .HasForeignKey(d => d.FacilityGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FGRP_FRLP_CURRENT");

                entity.HasOne(d => d.ParentFacilityGroup)
                    .WithMany(p => p.FacilityGroupRollupParentFacilityGroups)
                    .HasForeignKey(d => d.ParentFacilityGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FGRP_FRLP_PARENT");
            });

            modelBuilder.Entity<FacilityGroupType>(entity =>
            {
                entity.ToTable("FACILITY_GROUP_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "FCLT_GRP_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FCLT_GRP_TP_TXSTMP");

                entity.Property(e => e.FacilityGroupTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_GROUP_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<FacilityLocation>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.LocationSeqId });

                entity.ToTable("FACILITY_LOCATION");

                entity.HasIndex(e => e.FacilityId, "FACILITY_LOC_FAC");

                entity.HasIndex(e => e.GeoPointId, "FACILITY_LOC_GEOPT");

                entity.HasIndex(e => e.LocationTypeEnumId, "FACILITY_LOC_TENM");

                entity.HasIndex(e => e.CreatedTxStamp, "FCLT_LCTN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FCLT_LCTN_TXSTMP");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.LocationSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_SEQ_ID");

                entity.Property(e => e.AisleId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AISLE_ID");

                entity.Property(e => e.AreaId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AREA_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GeoPointId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_POINT_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LevelId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("LEVEL_ID");

                entity.Property(e => e.LocationTypeEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_TYPE_ENUM_ID");

                entity.Property(e => e.PositionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_ID");

                entity.Property(e => e.SectionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SECTION_ID");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.FacilityLocations)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FACILITY_LOC_FAC");

                entity.HasOne(d => d.GeoPoint)
                    .WithMany(p => p.FacilityLocations)
                    .HasForeignKey(d => d.GeoPointId)
                    .HasConstraintName("FACILITY_LOC_GEOPT");

                entity.HasOne(d => d.LocationTypeEnum)
                    .WithMany(p => p.FacilityLocations)
                    .HasForeignKey(d => d.LocationTypeEnumId)
                    .HasConstraintName("FACILITY_LOC_TENM");
            });

            modelBuilder.Entity<FacilityLocationGeoPoint>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.LocationSeqId, e.GeoPointId, e.FromDate });

                entity.ToTable("FACILITY_LOCATION_GEO_POINT");

                entity.HasIndex(e => new { e.FacilityId, e.LocationSeqId }, "FACLOCGEOPT_FACLOC");

                entity.HasIndex(e => e.GeoPointId, "FACLOCGEOPT_GEOPT");

                entity.HasIndex(e => e.CreatedTxStamp, "FCT_LCN_G_PNT_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FCT_LCN_G_PNT_TXSP");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.LocationSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_SEQ_ID");

                entity.Property(e => e.GeoPointId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_POINT_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.GeoPoint)
                    .WithMany(p => p.FacilityLocationGeoPoints)
                    .HasForeignKey(d => d.GeoPointId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FACLOCGEOPT_GEOPT");

                entity.HasOne(d => d.FacilityLocation)
                    .WithMany(p => p.FacilityLocationGeoPoints)
                    .HasForeignKey(d => new { d.FacilityId, d.LocationSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FACLOCGEOPT_FACLOC");
            });

            modelBuilder.Entity<FacilityParty>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.PartyId, e.RoleTypeId, e.FromDate });

                entity.ToTable("FACILITY_PARTY");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "FACILITY_PRTY_ROLE");

                entity.HasIndex(e => e.FacilityId, "FACILITY_RLE_FACI");

                entity.HasIndex(e => e.PartyId, "FACILITY_RLE_PRT");

                entity.HasIndex(e => e.RoleTypeId, "FACILITY_RLE_ROL");

                entity.HasIndex(e => e.CreatedTxStamp, "FCLT_PRT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FCLT_PRT_TXSTMP");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.FacilityParties)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FACILITY_RLE_FACI");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.FacilityParties)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FACILITY_RLE_PRT");

                entity.HasOne(d => d.RoleType)
                    .WithMany(p => p.FacilityParties)
                    .HasForeignKey(d => d.RoleTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FACILITY_RLE_ROL");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.FacilityParties)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FACILITY_PRTY_ROLE");
            });

            modelBuilder.Entity<FacilityType>(entity =>
            {
                entity.ToTable("FACILITY_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "FACILITY_TYPEPAR");

                entity.HasIndex(e => e.CreatedTxStamp, "FCLT_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FCLT_TP_TXSTMP");

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("FACILITY_TYPEPAR");
            });

            modelBuilder.Entity<FacilityTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.FacilityTypeId, e.AttrName });

                entity.ToTable("FACILITY_TYPE_ATTR");

                entity.HasIndex(e => e.FacilityTypeId, "FACILITY_TPAT_FT");

                entity.HasIndex(e => e.CreatedTxStamp, "FCLT_TP_ATR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FCLT_TP_ATR_TXSTMP");

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.FacilityType)
                    .WithMany(p => p.FacilityTypeAttrs)
                    .HasForeignKey(d => d.FacilityTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FACILITY_TPAT_FT");
            });

            modelBuilder.Entity<FileExtension>(entity =>
            {
                entity.ToTable("FILE_EXTENSION");

                entity.HasIndex(e => e.MimeTypeId, "FILEEXT_MMTYP");

                entity.HasIndex(e => e.CreatedTxStamp, "FL_EXTNSN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FL_EXTNSN_TXSTMP");

                entity.Property(e => e.FileExtensionId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("FILE_EXTENSION_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MimeTypeId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("MIME_TYPE_ID");

                entity.HasOne(d => d.MimeType)
                    .WithMany(p => p.FileExtensions)
                    .HasForeignKey(d => d.MimeTypeId)
                    .HasConstraintName("FILEEXT_MMTYP");
            });

            modelBuilder.Entity<FinAccount>(entity =>
            {
                entity.ToTable("FIN_ACCOUNT");

                entity.HasIndex(e => e.CurrencyUomId, "FINACCT_CURUOM");

                entity.HasIndex(e => e.PostToGlAccountId, "FINACCT_GLAC");

                entity.HasIndex(e => e.OrganizationPartyId, "FINACCT_ORGPTY");

                entity.HasIndex(e => e.OwnerPartyId, "FINACCT_OWNPTY");

                entity.HasIndex(e => e.ReplenishPaymentId, "FINACCT_PAYMETH");

                entity.HasIndex(e => e.FinAccountTypeId, "FINACCT_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "FIN_ACCOUNT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FIN_ACCOUNT_TXSTMP");

                entity.Property(e => e.FinAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_ID");

                entity.Property(e => e.ActualBalance)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ACTUAL_BALANCE");

                entity.Property(e => e.AvailableBalance)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AVAILABLE_BALANCE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM_ID");

                entity.Property(e => e.FinAccountCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_CODE");

                entity.Property(e => e.FinAccountName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_NAME");

                entity.Property(e => e.FinAccountPin)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_PIN");

                entity.Property(e => e.FinAccountTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.IsRefundable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_REFUNDABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OrganizationPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_PARTY_ID");

                entity.Property(e => e.OwnerPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("OWNER_PARTY_ID");

                entity.Property(e => e.PostToGlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("POST_TO_GL_ACCOUNT_ID");

                entity.Property(e => e.ReplenishLevel)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("REPLENISH_LEVEL");

                entity.Property(e => e.ReplenishPaymentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REPLENISH_PAYMENT_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.CurrencyUom)
                    .WithMany(p => p.FinAccounts)
                    .HasForeignKey(d => d.CurrencyUomId)
                    .HasConstraintName("FINACCT_CURUOM");

                entity.HasOne(d => d.FinAccountType)
                    .WithMany(p => p.FinAccounts)
                    .HasForeignKey(d => d.FinAccountTypeId)
                    .HasConstraintName("FINACCT_TYPE");

                entity.HasOne(d => d.OrganizationParty)
                    .WithMany(p => p.FinAccountOrganizationParties)
                    .HasForeignKey(d => d.OrganizationPartyId)
                    .HasConstraintName("FINACCT_ORGPTY");

                entity.HasOne(d => d.OwnerParty)
                    .WithMany(p => p.FinAccountOwnerParties)
                    .HasForeignKey(d => d.OwnerPartyId)
                    .HasConstraintName("FINACCT_OWNPTY");

                entity.HasOne(d => d.PostToGlAccount)
                    .WithMany(p => p.FinAccounts)
                    .HasForeignKey(d => d.PostToGlAccountId)
                    .HasConstraintName("FINACCT_GLAC");

                entity.HasOne(d => d.ReplenishPayment)
                    .WithMany(p => p.FinAccounts)
                    .HasForeignKey(d => d.ReplenishPaymentId)
                    .HasConstraintName("FINACCT_PAYMETH");
            });

            modelBuilder.Entity<FinAccountAttribute>(entity =>
            {
                entity.HasKey(e => new { e.FinAccountId, e.AttrName });

                entity.ToTable("FIN_ACCOUNT_ATTRIBUTE");

                entity.HasIndex(e => e.FinAccountId, "FINACCT_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "FN_ACCT_ATTT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FN_ACCT_ATTT_TXSTP");

                entity.Property(e => e.FinAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.FinAccount)
                    .WithMany(p => p.FinAccountAttributes)
                    .HasForeignKey(d => d.FinAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FINACCT_ATTR");
            });

            modelBuilder.Entity<FinAccountAuth>(entity =>
            {
                entity.ToTable("FIN_ACCOUNT_AUTH");

                entity.HasIndex(e => e.FinAccountId, "FINACT_AUTH_FINACT");

                entity.HasIndex(e => e.CreatedTxStamp, "FN_ACCT_ATH_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FN_ACCT_ATH_TXSTMP");

                entity.Property(e => e.FinAccountAuthId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_AUTH_ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.AuthorizationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUTHORIZATION_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM_ID");

                entity.Property(e => e.FinAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.FinAccount)
                    .WithMany(p => p.FinAccountAuths)
                    .HasForeignKey(d => d.FinAccountId)
                    .HasConstraintName("FINACT_AUTH_FINACT");
            });

            modelBuilder.Entity<FinAccountRole>(entity =>
            {
                entity.HasKey(e => new { e.FinAccountId, e.PartyId, e.RoleTypeId, e.FromDate });

                entity.ToTable("FIN_ACCOUNT_ROLE");

                entity.HasIndex(e => e.FinAccountId, "FIN_ACT_RL_FNACT");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "FIN_ACT_RL_RTRL");

                entity.HasIndex(e => e.CreatedTxStamp, "FN_ACCNT_RL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FN_ACCNT_RL_TXSTMP");

                entity.Property(e => e.FinAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.FinAccount)
                    .WithMany(p => p.FinAccountRoles)
                    .HasForeignKey(d => d.FinAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FIN_ACT_RL_FNACT");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.FinAccountRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FIN_ACT_RL_RTRL");
            });

            modelBuilder.Entity<FinAccountStatus>(entity =>
            {
                entity.HasKey(e => new { e.FinAccountId, e.StatusId, e.StatusDate });

                entity.ToTable("FIN_ACCOUNT_STATUS");

                entity.HasIndex(e => e.FinAccountId, "FINACT_STTS_FNA");

                entity.HasIndex(e => e.StatusId, "FINACT_STTS_STI");

                entity.HasIndex(e => e.ChangeByUserLoginId, "FINACT_STTS_USER");

                entity.HasIndex(e => e.CreatedTxStamp, "FN_ACCT_STS_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FN_ACCT_STS_TXSTMP");

                entity.Property(e => e.FinAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.StatusDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STATUS_DATE");

                entity.Property(e => e.ChangeByUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.StatusEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STATUS_END_DATE");

                entity.HasOne(d => d.ChangeByUserLogin)
                    .WithMany(p => p.FinAccountStatuses)
                    .HasForeignKey(d => d.ChangeByUserLoginId)
                    .HasConstraintName("FINACT_STTS_USER");

                entity.HasOne(d => d.FinAccount)
                    .WithMany(p => p.FinAccountStatuses)
                    .HasForeignKey(d => d.FinAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FINACT_STTS_FNA");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.FinAccountStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FINACT_STTS_STI");
            });

            modelBuilder.Entity<FinAccountTran>(entity =>
            {
                entity.HasKey(e => e.FinAccountTransId);

                entity.ToTable("FIN_ACCOUNT_TRANS");

                entity.HasIndex(e => e.FinAccountTransTypeId, "FINACCT_TX_TYPE");

                entity.HasIndex(e => e.ReasonEnumId, "FIN_ACT_REAS_ENUM");

                entity.HasIndex(e => e.FinAccountId, "FIN_ACT_TX_FNACT");

                entity.HasIndex(e => e.GlReconciliationId, "FIN_ACT_TX_GLREC");

                entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId }, "FIN_ACT_TX_ODITM");

                entity.HasIndex(e => e.PartyId, "FIN_ACT_TX_PARTY");

                entity.HasIndex(e => e.PerformedByPartyId, "FIN_ACT_TX_PBPTY");

                entity.HasIndex(e => e.PaymentId, "FIN_ACT_TX_PMT");

                entity.HasIndex(e => e.StatusId, "FIN_ACT_TX_STI");

                entity.HasIndex(e => e.CreatedTxStamp, "FN_ACCT_TRS_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FN_ACCT_TRS_TXSTMP");

                entity.Property(e => e.FinAccountTransId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_TRANS_ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.EntryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ENTRY_DATE");

                entity.Property(e => e.FinAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_ID");

                entity.Property(e => e.FinAccountTransTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_TRANS_TYPE_ID");

                entity.Property(e => e.GlReconciliationId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_RECONCILIATION_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.PaymentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_ID");

                entity.Property(e => e.PerformedByPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PERFORMED_BY_PARTY_ID");

                entity.Property(e => e.ReasonEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REASON_ENUM_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.TransactionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANSACTION_DATE");

                entity.HasOne(d => d.FinAccount)
                    .WithMany(p => p.FinAccountTrans)
                    .HasForeignKey(d => d.FinAccountId)
                    .HasConstraintName("FIN_ACT_TX_FNACT");

                entity.HasOne(d => d.FinAccountTransType)
                    .WithMany(p => p.FinAccountTrans)
                    .HasForeignKey(d => d.FinAccountTransTypeId)
                    .HasConstraintName("FINACCT_TX_TYPE");

                entity.HasOne(d => d.GlReconciliation)
                    .WithMany(p => p.FinAccountTrans)
                    .HasForeignKey(d => d.GlReconciliationId)
                    .HasConstraintName("FIN_ACT_TX_GLREC");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.FinAccountTranParties)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("FIN_ACT_TX_PARTY");

                entity.HasOne(d => d.Payment)
                    .WithMany(p => p.FinAccountTrans)
                    .HasForeignKey(d => d.PaymentId)
                    .HasConstraintName("FIN_ACT_TX_PMT");

                entity.HasOne(d => d.PerformedByParty)
                    .WithMany(p => p.FinAccountTranPerformedByParties)
                    .HasForeignKey(d => d.PerformedByPartyId)
                    .HasConstraintName("FIN_ACT_TX_PBPTY");

                entity.HasOne(d => d.ReasonEnum)
                    .WithMany(p => p.FinAccountTrans)
                    .HasForeignKey(d => d.ReasonEnumId)
                    .HasConstraintName("FIN_ACT_REAS_ENUM");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.FinAccountTrans)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FIN_ACT_TX_STI");

                entity.HasOne(d => d.OrderI)
                    .WithMany(p => p.FinAccountTrans)
                    .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                    .HasConstraintName("FIN_ACT_TX_ODITM");
            });

            modelBuilder.Entity<FinAccountTransAttribute>(entity =>
            {
                entity.HasKey(e => new { e.FinAccountTransId, e.AttrName });

                entity.ToTable("FIN_ACCOUNT_TRANS_ATTRIBUTE");

                entity.HasIndex(e => e.FinAccountTransId, "FINACCT_TX_ATTR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FN_ACT_TRS_ATT_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "FN_ACT_TRS_ATT_TXS");

                entity.Property(e => e.FinAccountTransId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_TRANS_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.FinAccountTrans)
                    .WithMany(p => p.FinAccountTransAttributes)
                    .HasForeignKey(d => d.FinAccountTransId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FINACCT_TX_ATTR");
            });

            modelBuilder.Entity<FinAccountTransType>(entity =>
            {
                entity.ToTable("FIN_ACCOUNT_TRANS_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "FINACCT_TX_TYPPAR");

                entity.HasIndex(e => e.CreatedTxStamp, "FN_ACT_TRS_TP_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FN_ACT_TRS_TP_TXSP");

                entity.Property(e => e.FinAccountTransTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_TRANS_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("FINACCT_TX_TYPPAR");
            });

            modelBuilder.Entity<FinAccountTransTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.FinAccountTransTypeId, e.AttrName });

                entity.ToTable("FIN_ACCOUNT_TRANS_TYPE_ATTR");

                entity.HasIndex(e => e.FinAccountTransTypeId, "FINACCT_TX_TYPATR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FN_TRS_TP_ATR_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "FN_TRS_TP_ATR_TS");

                entity.Property(e => e.FinAccountTransTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_TRANS_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.FinAccountTransType)
                    .WithMany(p => p.FinAccountTransTypeAttrs)
                    .HasForeignKey(d => d.FinAccountTransTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FINACCT_TX_TYPATR");
            });

            modelBuilder.Entity<FinAccountType>(entity =>
            {
                entity.ToTable("FIN_ACCOUNT_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "FINACCT_TYPE_PAR");

                entity.HasIndex(e => e.ReplenishEnumId, "FINACCT_TYPE_RENUM");

                entity.HasIndex(e => e.CreatedTxStamp, "FN_ACCNT_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FN_ACCNT_TP_TXSTMP");

                entity.Property(e => e.FinAccountTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.IsRefundable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_REFUNDABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.Property(e => e.ReplenishEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REPLENISH_ENUM_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("FINACCT_TYPE_PAR");

                entity.HasOne(d => d.ReplenishEnum)
                    .WithMany(p => p.FinAccountTypes)
                    .HasForeignKey(d => d.ReplenishEnumId)
                    .HasConstraintName("FINACCT_TYPE_RENUM");
            });

            modelBuilder.Entity<FinAccountTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.FinAccountTypeId, e.AttrName });

                entity.ToTable("FIN_ACCOUNT_TYPE_ATTR");

                entity.HasIndex(e => e.FinAccountTypeId, "FINACCT_TYPE_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "FN_ACT_TP_ATR_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FN_ACT_TP_ATR_TXSP");

                entity.Property(e => e.FinAccountTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.FinAccountType)
                    .WithMany(p => p.FinAccountTypeAttrs)
                    .HasForeignKey(d => d.FinAccountTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FINACCT_TYPE_ATTR");
            });

            modelBuilder.Entity<FinAccountTypeGlAccount>(entity =>
            {
                entity.HasKey(e => new { e.FinAccountTypeId, e.OrganizationPartyId });

                entity.ToTable("FIN_ACCOUNT_TYPE_GL_ACCOUNT");

                entity.HasIndex(e => e.GlAccountId, "FINACCT_TGA_GLAC");

                entity.HasIndex(e => e.OrganizationPartyId, "FINACCT_TGA_OPTY");

                entity.HasIndex(e => e.FinAccountTypeId, "FINACCT_TGA_PMT");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FN_TP_GL_ACT_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "FN_TP_GL_ACT_TS");

                entity.Property(e => e.FinAccountTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_TYPE_ID");

                entity.Property(e => e.OrganizationPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_PARTY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.FinAccountType)
                    .WithMany(p => p.FinAccountTypeGlAccounts)
                    .HasForeignKey(d => d.FinAccountTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FINACCT_TGA_PMT");

                entity.HasOne(d => d.GlAccount)
                    .WithMany(p => p.FinAccountTypeGlAccounts)
                    .HasForeignKey(d => d.GlAccountId)
                    .HasConstraintName("FINACCT_TGA_GLAC");

                entity.HasOne(d => d.OrganizationParty)
                    .WithMany(p => p.FinAccountTypeGlAccounts)
                    .HasForeignKey(d => d.OrganizationPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FINACCT_TGA_OPTY");
            });

            modelBuilder.Entity<FixedAsset>(entity =>
            {
                entity.ToTable("FIXED_ASSET");

                entity.HasIndex(e => e.CalendarId, "FIXEDAST_CALENDAR");

                entity.HasIndex(e => e.ClassEnumId, "FIXEDAST_CLSENM");

                entity.HasIndex(e => e.LocatedAtFacilityId, "FIXEDAST_FAC");

                entity.HasIndex(e => e.InstanceOfProductId, "FIXEDAST_IOPROD");

                entity.HasIndex(e => e.AcquireOrderId, "FIXEDAST_ORDHDR");

                entity.HasIndex(e => new { e.AcquireOrderId, e.AcquireOrderItemSeqId }, "FIXEDAST_ORDITM");

                entity.HasIndex(e => e.ParentFixedAssetId, "FIXEDAST_PAR");

                entity.HasIndex(e => e.PartyId, "FIXEDAST_PARTY");

                entity.HasIndex(e => e.RoleTypeId, "FIXEDAST_ROLETYP");

                entity.HasIndex(e => e.FixedAssetTypeId, "FIXEDAST_TYPE");

                entity.HasIndex(e => e.UomId, "FIXEDAST_UOM");

                entity.HasIndex(e => e.CreatedTxStamp, "FIXED_ASSET_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FIXED_ASSET_TXSTMP");

                entity.Property(e => e.FixedAssetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_ID");

                entity.Property(e => e.AcquireOrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACQUIRE_ORDER_ID");

                entity.Property(e => e.AcquireOrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACQUIRE_ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.ActualEndOfLife)
                    .HasColumnType("datetime")
                    .HasColumnName("ACTUAL_END_OF_LIFE");

                entity.Property(e => e.CalendarId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CALENDAR_ID");

                entity.Property(e => e.ClassEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CLASS_ENUM_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DateAcquired)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_ACQUIRED");

                entity.Property(e => e.DateLastServiced)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_LAST_SERVICED");

                entity.Property(e => e.DateNextService)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_NEXT_SERVICE");

                entity.Property(e => e.Depreciation)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("DEPRECIATION");

                entity.Property(e => e.ExpectedEndOfLife)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPECTED_END_OF_LIFE");

                entity.Property(e => e.FixedAssetName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_NAME");

                entity.Property(e => e.FixedAssetTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_TYPE_ID");

                entity.Property(e => e.InstanceOfProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INSTANCE_OF_PRODUCT_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LocatedAtFacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("LOCATED_AT_FACILITY_ID");

                entity.Property(e => e.LocatedAtLocationSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("LOCATED_AT_LOCATION_SEQ_ID");

                entity.Property(e => e.ParentFixedAssetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_FIXED_ASSET_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.ProductionCapacity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("PRODUCTION_CAPACITY");

                entity.Property(e => e.PurchaseCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PURCHASE_COST");

                entity.Property(e => e.PurchaseCostUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PURCHASE_COST_UOM_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("SALVAGE_VALUE");

                entity.Property(e => e.SerialNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SERIAL_NUMBER");

                entity.Property(e => e.UomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UOM_ID");

                entity.HasOne(d => d.AcquireOrder)
                    .WithMany(p => p.FixedAssets)
                    .HasForeignKey(d => d.AcquireOrderId)
                    .HasConstraintName("FIXEDAST_ORDHDR");

                entity.HasOne(d => d.Calendar)
                    .WithMany(p => p.FixedAssets)
                    .HasForeignKey(d => d.CalendarId)
                    .HasConstraintName("FIXEDAST_CALENDAR");

                entity.HasOne(d => d.ClassEnum)
                    .WithMany(p => p.FixedAssets)
                    .HasForeignKey(d => d.ClassEnumId)
                    .HasConstraintName("FIXEDAST_CLSENM");

                entity.HasOne(d => d.FixedAssetType)
                    .WithMany(p => p.FixedAssets)
                    .HasForeignKey(d => d.FixedAssetTypeId)
                    .HasConstraintName("FIXEDAST_TYPE");

                entity.HasOne(d => d.InstanceOfProduct)
                    .WithMany(p => p.FixedAssets)
                    .HasForeignKey(d => d.InstanceOfProductId)
                    .HasConstraintName("FIXEDAST_IOPROD");

                entity.HasOne(d => d.LocatedAtFacility)
                    .WithMany(p => p.FixedAssets)
                    .HasForeignKey(d => d.LocatedAtFacilityId)
                    .HasConstraintName("FIXEDAST_FAC");

                entity.HasOne(d => d.ParentFixedAsset)
                    .WithMany(p => p.InverseParentFixedAsset)
                    .HasForeignKey(d => d.ParentFixedAssetId)
                    .HasConstraintName("FIXEDAST_PAR");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.FixedAssets)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("FIXEDAST_PARTY");

                entity.HasOne(d => d.RoleType)
                    .WithMany(p => p.FixedAssets)
                    .HasForeignKey(d => d.RoleTypeId)
                    .HasConstraintName("FIXEDAST_ROLETYP");

                entity.HasOne(d => d.Uom)
                    .WithMany(p => p.FixedAssets)
                    .HasForeignKey(d => d.UomId)
                    .HasConstraintName("FIXEDAST_UOM");

                entity.HasOne(d => d.AcquireOrderI)
                    .WithMany(p => p.FixedAssets)
                    .HasForeignKey(d => new { d.AcquireOrderId, d.AcquireOrderItemSeqId })
                    .HasConstraintName("FIXEDAST_ORDITM");
            });

            modelBuilder.Entity<FixedAssetAttribute>(entity =>
            {
                entity.HasKey(e => new { e.FixedAssetId, e.AttrName });

                entity.ToTable("FIXED_ASSET_ATTRIBUTE");

                entity.HasIndex(e => e.FixedAssetId, "FIXEDAST_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "FXD_AST_ATTT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FXD_AST_ATTT_TXSTP");

                entity.Property(e => e.FixedAssetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.FixedAsset)
                    .WithMany(p => p.FixedAssetAttributes)
                    .HasForeignKey(d => d.FixedAssetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FIXEDAST_ATTR");
            });

            modelBuilder.Entity<FixedAssetDepMethod>(entity =>
            {
                entity.HasKey(e => new { e.DepreciationCustomMethodId, e.FixedAssetId });

                entity.ToTable("FIXED_ASSET_DEP_METHOD");

                entity.HasIndex(e => e.DepreciationCustomMethodId, "FIXDAST_DM_CMET");

                entity.HasIndex(e => e.FixedAssetId, "FIXDAST_DM_FXAST");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FXD_AST_DP_MTD_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "FXD_AST_DP_MTD_TXS");

                entity.Property(e => e.DepreciationCustomMethodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEPRECIATION_CUSTOM_METHOD_ID");

                entity.Property(e => e.FixedAssetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.DepreciationCustomMethod)
                    .WithMany(p => p.FixedAssetDepMethods)
                    .HasForeignKey(d => d.DepreciationCustomMethodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FIXDAST_DM_CMET");

                entity.HasOne(d => d.FixedAsset)
                    .WithMany(p => p.FixedAssetDepMethods)
                    .HasForeignKey(d => d.FixedAssetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FIXDAST_DM_FXAST");
            });

            modelBuilder.Entity<FixedAssetGeoPoint>(entity =>
            {
                entity.HasKey(e => new { e.FixedAssetId, e.GeoPointId, e.FromDate });

                entity.ToTable("FIXED_ASSET_GEO_POINT");

                entity.HasIndex(e => e.FixedAssetId, "FXDASTGEOPT_FXDAST");

                entity.HasIndex(e => e.GeoPointId, "FXDASTGEOPT_GEOPT");

                entity.HasIndex(e => e.CreatedTxStamp, "FXD_AST_G_PNT_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FXD_AST_G_PNT_TXSP");

                entity.Property(e => e.FixedAssetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_ID");

                entity.Property(e => e.GeoPointId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_POINT_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.FixedAsset)
                    .WithMany(p => p.FixedAssetGeoPoints)
                    .HasForeignKey(d => d.FixedAssetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FXDASTGEOPT_FXDAST");

                entity.HasOne(d => d.GeoPoint)
                    .WithMany(p => p.FixedAssetGeoPoints)
                    .HasForeignKey(d => d.GeoPointId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FXDASTGEOPT_GEOPT");
            });

            modelBuilder.Entity<FixedAssetIdent>(entity =>
            {
                entity.HasKey(e => new { e.FixedAssetId, e.FixedAssetIdentTypeId });

                entity.ToTable("FIXED_ASSET_IDENT");

                entity.HasIndex(e => e.FixedAssetId, "FIXDASTID_FXAST");

                entity.HasIndex(e => e.FixedAssetIdentTypeId, "FIXDASTID_IDTYP");

                entity.HasIndex(e => e.CreatedTxStamp, "FXD_AST_IDT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FXD_AST_IDT_TXSTMP");

                entity.Property(e => e.FixedAssetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_ID");

                entity.Property(e => e.FixedAssetIdentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_IDENT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.IdValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_VALUE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.FixedAsset)
                    .WithMany(p => p.FixedAssetIdents)
                    .HasForeignKey(d => d.FixedAssetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FIXDASTID_FXAST");

                entity.HasOne(d => d.FixedAssetIdentType)
                    .WithMany(p => p.FixedAssetIdents)
                    .HasForeignKey(d => d.FixedAssetIdentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FIXDASTID_IDTYP");
            });

            modelBuilder.Entity<FixedAssetIdentType>(entity =>
            {
                entity.ToTable("FIXED_ASSET_IDENT_TYPE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FXD_AST_IDT_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "FXD_AST_IDT_TP_TXS");

                entity.Property(e => e.FixedAssetIdentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_IDENT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<FixedAssetMaint>(entity =>
            {
                entity.HasKey(e => new { e.FixedAssetId, e.MaintHistSeqId });

                entity.ToTable("FIXED_ASSET_MAINT");

                entity.HasIndex(e => e.FixedAssetId, "FXDASTMNT_FXAST");

                entity.HasIndex(e => e.IntervalUomId, "FXDASTMNT_INTUOM");

                entity.HasIndex(e => e.IntervalMeterTypeId, "FXDASTMNT_PDMTTYP");

                entity.HasIndex(e => e.ProductMaintTypeId, "FXDASTMNT_PMNTP");

                entity.HasIndex(e => e.PurchaseOrderId, "FXDASTMNT_PURORD");

                entity.HasIndex(e => e.ScheduleWorkEffortId, "FXDASTMNT_SCHWE");

                entity.HasIndex(e => e.StatusId, "FXDASTMNT_SI");

                entity.HasIndex(e => e.CreatedTxStamp, "FXD_AST_MNT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FXD_AST_MNT_TXSTMP");

                entity.Property(e => e.FixedAssetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_ID");

                entity.Property(e => e.MaintHistSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MAINT_HIST_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.IntervalMeterTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INTERVAL_METER_TYPE_ID");

                entity.Property(e => e.IntervalQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("INTERVAL_QUANTITY");

                entity.Property(e => e.IntervalUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INTERVAL_UOM_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ProductMaintSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_MAINT_SEQ_ID");

                entity.Property(e => e.ProductMaintTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_MAINT_TYPE_ID");

                entity.Property(e => e.PurchaseOrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PURCHASE_ORDER_ID");

                entity.Property(e => e.ScheduleWorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SCHEDULE_WORK_EFFORT_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.HasOne(d => d.FixedAsset)
                    .WithMany(p => p.FixedAssetMaints)
                    .HasForeignKey(d => d.FixedAssetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FXDASTMNT_FXAST");

                entity.HasOne(d => d.IntervalMeterType)
                    .WithMany(p => p.FixedAssetMaints)
                    .HasForeignKey(d => d.IntervalMeterTypeId)
                    .HasConstraintName("FXDASTMNT_PDMTTYP");

                entity.HasOne(d => d.IntervalUom)
                    .WithMany(p => p.FixedAssetMaints)
                    .HasForeignKey(d => d.IntervalUomId)
                    .HasConstraintName("FXDASTMNT_INTUOM");

                entity.HasOne(d => d.ProductMaintType)
                    .WithMany(p => p.FixedAssetMaints)
                    .HasForeignKey(d => d.ProductMaintTypeId)
                    .HasConstraintName("FXDASTMNT_PMNTP");

                entity.HasOne(d => d.PurchaseOrder)
                    .WithMany(p => p.FixedAssetMaints)
                    .HasForeignKey(d => d.PurchaseOrderId)
                    .HasConstraintName("FXDASTMNT_PURORD");

                entity.HasOne(d => d.ScheduleWorkEffort)
                    .WithMany(p => p.FixedAssetMaints)
                    .HasForeignKey(d => d.ScheduleWorkEffortId)
                    .HasConstraintName("FXDASTMNT_SCHWE");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.FixedAssetMaints)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FXDASTMNT_SI");
            });

            modelBuilder.Entity<FixedAssetMaintOrder>(entity =>
            {
                entity.HasKey(e => new { e.FixedAssetId, e.MaintHistSeqId, e.OrderId, e.OrderItemSeqId });

                entity.ToTable("FIXED_ASSET_MAINT_ORDER");

                entity.HasIndex(e => e.OrderId, "FXDASTMNT_ORD");

                entity.HasIndex(e => e.FixedAssetId, "FXDASTMNT_ORD_FXAS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FXD_AST_MNT_ORR_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "FXD_AST_MNT_ORR_TS");

                entity.Property(e => e.FixedAssetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_ID");

                entity.Property(e => e.MaintHistSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MAINT_HIST_SEQ_ID");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.FixedAsset)
                    .WithMany(p => p.FixedAssetMaintOrders)
                    .HasForeignKey(d => d.FixedAssetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FXDASTMNT_ORD_FXAS");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.FixedAssetMaintOrders)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FXDASTMNT_ORD");
            });

            modelBuilder.Entity<FixedAssetMeter>(entity =>
            {
                entity.HasKey(e => new { e.FixedAssetId, e.ProductMeterTypeId, e.ReadingDate });

                entity.ToTable("FIXED_ASSET_METER");

                entity.HasIndex(e => new { e.FixedAssetId, e.MaintHistSeqId }, "FXDASTMTR_FAMNT");

                entity.HasIndex(e => e.ProductMeterTypeId, "FXDASTMTR_PMTYP");

                entity.HasIndex(e => e.CreatedTxStamp, "FXD_AST_MTR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FXD_AST_MTR_TXSTMP");

                entity.Property(e => e.FixedAssetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_ID");

                entity.Property(e => e.ProductMeterTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_METER_TYPE_ID");

                entity.Property(e => e.ReadingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("READING_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MaintHistSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MAINT_HIST_SEQ_ID");

                entity.Property(e => e.MeterValue)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("METER_VALUE");

                entity.Property(e => e.ReadingReasonEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("READING_REASON_ENUM_ID");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.HasOne(d => d.ProductMeterType)
                    .WithMany(p => p.FixedAssetMeters)
                    .HasForeignKey(d => d.ProductMeterTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FXDASTMTR_PMTYP");

                entity.HasOne(d => d.FixedAssetMaint)
                    .WithMany(p => p.FixedAssetMeters)
                    .HasForeignKey(d => new { d.FixedAssetId, d.MaintHistSeqId })
                    .HasConstraintName("FXDASTMTR_FAMNT");
            });

            modelBuilder.Entity<FixedAssetProduct>(entity =>
            {
                entity.HasKey(e => new { e.FixedAssetId, e.ProductId, e.FixedAssetProductTypeId, e.FromDate });

                entity.ToTable("FIXED_ASSET_PRODUCT");

                entity.HasIndex(e => e.FixedAssetId, "FIXDASTPRD_FA");

                entity.HasIndex(e => e.FixedAssetProductTypeId, "FIXDASTPRD_FAPT");

                entity.HasIndex(e => e.ProductId, "FIXDASTPRD_PRD");

                entity.HasIndex(e => e.QuantityUomId, "FIXDASTPRD_UOM");

                entity.HasIndex(e => e.CreatedTxStamp, "FXD_AST_PRDT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FXD_AST_PRDT_TXSTP");

                entity.Property(e => e.FixedAssetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.FixedAssetProductTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_PRODUCT_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.QuantityUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUANTITY_UOM_ID");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.FixedAsset)
                    .WithMany(p => p.FixedAssetProducts)
                    .HasForeignKey(d => d.FixedAssetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FIXDASTPRD_FA");

                entity.HasOne(d => d.FixedAssetProductType)
                    .WithMany(p => p.FixedAssetProducts)
                    .HasForeignKey(d => d.FixedAssetProductTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FIXDASTPRD_FAPT");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.FixedAssetProducts)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FIXDASTPRD_PRD");

                entity.HasOne(d => d.QuantityUom)
                    .WithMany(p => p.FixedAssetProducts)
                    .HasForeignKey(d => d.QuantityUomId)
                    .HasConstraintName("FIXDASTPRD_UOM");
            });

            modelBuilder.Entity<FixedAssetProductType>(entity =>
            {
                entity.ToTable("FIXED_ASSET_PRODUCT_TYPE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FXD_AST_PRT_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "FXD_AST_PRT_TP_TXS");

                entity.Property(e => e.FixedAssetProductTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_PRODUCT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<FixedAssetRegistration>(entity =>
            {
                entity.HasKey(e => new { e.FixedAssetId, e.FromDate });

                entity.ToTable("FIXED_ASSET_REGISTRATION");

                entity.HasIndex(e => e.FixedAssetId, "FIXDASTREG_FXAST");

                entity.HasIndex(e => e.GovAgencyPartyId, "FIXDASTREG_GVAPTY");

                entity.HasIndex(e => e.CreatedTxStamp, "FXD_AST_RGSTN_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FXD_AST_RGSTN_TXSP");

                entity.Property(e => e.FixedAssetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GovAgencyPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GOV_AGENCY_PARTY_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LicenseNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LICENSE_NUMBER");

                entity.Property(e => e.RegistrationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("REGISTRATION_DATE");

                entity.Property(e => e.RegistrationNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REGISTRATION_NUMBER");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.FixedAsset)
                    .WithMany(p => p.FixedAssetRegistrations)
                    .HasForeignKey(d => d.FixedAssetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FIXDASTREG_FXAST");

                entity.HasOne(d => d.GovAgencyParty)
                    .WithMany(p => p.FixedAssetRegistrations)
                    .HasForeignKey(d => d.GovAgencyPartyId)
                    .HasConstraintName("FIXDASTREG_GVAPTY");
            });

            modelBuilder.Entity<FixedAssetStdCost>(entity =>
            {
                entity.HasKey(e => new { e.FixedAssetId, e.FixedAssetStdCostTypeId, e.FromDate });

                entity.ToTable("FIXED_ASSET_STD_COST");

                entity.HasIndex(e => e.AmountUomId, "FIXASTCO_AMCURR");

                entity.HasIndex(e => e.FixedAssetId, "FIXASTCO_FIXAST");

                entity.HasIndex(e => e.FixedAssetStdCostTypeId, "FIXASTCO_TYPCOS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FXD_AST_STD_CST_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "FXD_AST_STD_CST_TS");

                entity.Property(e => e.FixedAssetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_ID");

                entity.Property(e => e.FixedAssetStdCostTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_STD_COST_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.AmountUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AMOUNT_UOM_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.AmountUom)
                    .WithMany(p => p.FixedAssetStdCosts)
                    .HasForeignKey(d => d.AmountUomId)
                    .HasConstraintName("FIXASTCO_AMCURR");

                entity.HasOne(d => d.FixedAsset)
                    .WithMany(p => p.FixedAssetStdCosts)
                    .HasForeignKey(d => d.FixedAssetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FIXASTCO_FIXAST");

                entity.HasOne(d => d.FixedAssetStdCostType)
                    .WithMany(p => p.FixedAssetStdCosts)
                    .HasForeignKey(d => d.FixedAssetStdCostTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FIXASTCO_TYPCOS");
            });

            modelBuilder.Entity<FixedAssetStdCostType>(entity =>
            {
                entity.ToTable("FIXED_ASSET_STD_COST_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "FIXASTCO_TYPPAR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FXD_STD_CST_TP_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "FXD_STD_CST_TP_TS");

                entity.Property(e => e.FixedAssetStdCostTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_STD_COST_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("FIXASTCO_TYPPAR");
            });

            modelBuilder.Entity<FixedAssetType>(entity =>
            {
                entity.ToTable("FIXED_ASSET_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "FIXEDAST_TYPPAR");

                entity.HasIndex(e => e.CreatedTxStamp, "FXD_ASST_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FXD_ASST_TP_TXSTMP");

                entity.Property(e => e.FixedAssetTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("FIXEDAST_TYPPAR");
            });

            modelBuilder.Entity<FixedAssetTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.FixedAssetTypeId, e.AttrName });

                entity.ToTable("FIXED_ASSET_TYPE_ATTR");

                entity.HasIndex(e => e.FixedAssetTypeId, "FIXEDAST_TYPATTR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FXD_AST_TP_ATR_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "FXD_AST_TP_ATR_TXS");

                entity.Property(e => e.FixedAssetTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.FixedAssetType)
                    .WithMany(p => p.FixedAssetTypeAttrs)
                    .HasForeignKey(d => d.FixedAssetTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FIXEDAST_TYPATTR");
            });

            modelBuilder.Entity<FixedAssetTypeGlAccount>(entity =>
            {
                entity.HasKey(e => new { e.FixedAssetTypeId, e.FixedAssetId, e.OrganizationPartyId });

                entity.ToTable("FIXED_ASSET_TYPE_GL_ACCOUNT");

                entity.HasIndex(e => e.AccDepGlAccountId, "FATGL_ACCDGL");

                entity.HasIndex(e => e.AssetGlAccountId, "FATGL_AGL");

                entity.HasIndex(e => e.DepGlAccountId, "FATGL_DGL");

                entity.HasIndex(e => e.LossGlAccountId, "FATGL_LGL");

                entity.HasIndex(e => e.OrganizationPartyId, "FATGL_OP");

                entity.HasIndex(e => e.ProfitGlAccountId, "FATGL_PGL");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FXD_TP_GL_ACT_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "FXD_TP_GL_ACT_TS");

                entity.Property(e => e.FixedAssetTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_TYPE_ID");

                entity.Property(e => e.FixedAssetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_ID");

                entity.Property(e => e.OrganizationPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_PARTY_ID");

                entity.Property(e => e.AccDepGlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACC_DEP_GL_ACCOUNT_ID");

                entity.Property(e => e.AssetGlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ASSET_GL_ACCOUNT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DepGlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEP_GL_ACCOUNT_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LossGlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("LOSS_GL_ACCOUNT_ID");

                entity.Property(e => e.ProfitGlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PROFIT_GL_ACCOUNT_ID");

                entity.HasOne(d => d.AccDepGlAccount)
                    .WithMany(p => p.FixedAssetTypeGlAccountAccDepGlAccounts)
                    .HasForeignKey(d => d.AccDepGlAccountId)
                    .HasConstraintName("FATGL_ACCDGL");

                entity.HasOne(d => d.AssetGlAccount)
                    .WithMany(p => p.FixedAssetTypeGlAccountAssetGlAccounts)
                    .HasForeignKey(d => d.AssetGlAccountId)
                    .HasConstraintName("FATGL_AGL");

                entity.HasOne(d => d.DepGlAccount)
                    .WithMany(p => p.FixedAssetTypeGlAccountDepGlAccounts)
                    .HasForeignKey(d => d.DepGlAccountId)
                    .HasConstraintName("FATGL_DGL");

                entity.HasOne(d => d.LossGlAccount)
                    .WithMany(p => p.FixedAssetTypeGlAccountLossGlAccounts)
                    .HasForeignKey(d => d.LossGlAccountId)
                    .HasConstraintName("FATGL_LGL");

                entity.HasOne(d => d.OrganizationParty)
                    .WithMany(p => p.FixedAssetTypeGlAccounts)
                    .HasForeignKey(d => d.OrganizationPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FATGL_OP");

                entity.HasOne(d => d.ProfitGlAccount)
                    .WithMany(p => p.FixedAssetTypeGlAccountProfitGlAccounts)
                    .HasForeignKey(d => d.ProfitGlAccountId)
                    .HasConstraintName("FATGL_PGL");
            });

            modelBuilder.Entity<FtpAddress>(entity =>
            {
                entity.HasKey(e => e.ContactMechId);

                entity.ToTable("FTP_ADDRESS");

                entity.HasIndex(e => e.CreatedTxStamp, "FTP_ADDRESS_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "FTP_ADDRESS_TXSTMP");

                entity.HasIndex(e => e.ContactMechId, "FTP_SRV_CMECH");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.BinaryTransfer)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BINARY_TRANSFER")
                    .IsFixedLength();

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DefaultTimeout).HasColumnName("DEFAULT_TIMEOUT");

                entity.Property(e => e.FilePath)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FILE_PATH");

                entity.Property(e => e.FtpPassword)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FTP_PASSWORD");

                entity.Property(e => e.Hostname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("HOSTNAME");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PassiveMode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PASSIVE_MODE")
                    .IsFixedLength();

                entity.Property(e => e.Port).HasColumnName("PORT");

                entity.Property(e => e.Username)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.ZipFile)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ZIP_FILE")
                    .IsFixedLength();

                entity.HasOne(d => d.ContactMech)
                    .WithOne(p => p.FtpAddress)
                    .HasForeignKey<FtpAddress>(d => d.ContactMechId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FTP_SRV_CMECH");
            });

            modelBuilder.Entity<Geo>(entity =>
            {
                entity.ToTable("GEO");

                entity.HasIndex(e => e.GeoTypeId, "GEO_TO_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "GEO_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GEO_TXSTMP");

                entity.Property(e => e.GeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_ID");

                entity.Property(e => e.Abbreviation)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ABBREVIATION");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GeoCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("GEO_CODE");

                entity.Property(e => e.GeoName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GEO_NAME");

                entity.Property(e => e.GeoSecCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("GEO_SEC_CODE");

                entity.Property(e => e.GeoTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_TYPE_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.WellKnownText)
                    .HasColumnType("text")
                    .HasColumnName("WELL_KNOWN_TEXT");

                entity.HasOne(d => d.GeoType)
                    .WithMany(p => p.Geos)
                    .HasForeignKey(d => d.GeoTypeId)
                    .HasConstraintName("GEO_TO_TYPE");
            });

            modelBuilder.Entity<GeoAssoc>(entity =>
            {
                entity.HasKey(e => new { e.GeoId, e.GeoIdTo });

                entity.ToTable("GEO_ASSOC");

                entity.HasIndex(e => e.GeoIdTo, "GEO_ASSC_TO_ASSC");

                entity.HasIndex(e => e.GeoId, "GEO_ASSC_TO_MAIN");

                entity.HasIndex(e => e.GeoAssocTypeId, "GEO_ASSC_TO_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "GEO_ASSOC_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GEO_ASSOC_TXSTMP");

                entity.Property(e => e.GeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_ID");

                entity.Property(e => e.GeoIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_ID_TO");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GeoAssocTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_ASSOC_TYPE_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.GeoAssocType)
                    .WithMany(p => p.GeoAssocs)
                    .HasForeignKey(d => d.GeoAssocTypeId)
                    .HasConstraintName("GEO_ASSC_TO_TYPE");

                entity.HasOne(d => d.Geo)
                    .WithMany(p => p.GeoAssocGeos)
                    .HasForeignKey(d => d.GeoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GEO_ASSC_TO_MAIN");

                entity.HasOne(d => d.GeoIdToNavigation)
                    .WithMany(p => p.GeoAssocGeoIdToNavigations)
                    .HasForeignKey(d => d.GeoIdTo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GEO_ASSC_TO_ASSC");
            });

            modelBuilder.Entity<GeoAssocType>(entity =>
            {
                entity.ToTable("GEO_ASSOC_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "G_ASSC_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "G_ASSC_TP_TXSTMP");

                entity.Property(e => e.GeoAssocTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_ASSOC_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<GeoPoint>(entity =>
            {
                entity.ToTable("GEO_POINT");

                entity.HasIndex(e => e.DataSourceId, "GEOPOINT_DTSRC");

                entity.HasIndex(e => e.GeoPointTypeEnumId, "GEOPOINT_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "GEO_POINT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GEO_POINT_TXSTMP");

                entity.HasIndex(e => e.ElevationUomId, "GPT_ELEV_UOM");

                entity.Property(e => e.GeoPointId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_POINT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DataSourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_SOURCE_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Elevation)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ELEVATION");

                entity.Property(e => e.ElevationUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ELEVATION_UOM_ID");

                entity.Property(e => e.GeoPointTypeEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_POINT_TYPE_ENUM_ID");

                entity.Property(e => e.Information)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("INFORMATION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Latitude)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("LATITUDE");

                entity.Property(e => e.Longitude)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("LONGITUDE");

                entity.HasOne(d => d.DataSource)
                    .WithMany(p => p.GeoPoints)
                    .HasForeignKey(d => d.DataSourceId)
                    .HasConstraintName("GEOPOINT_DTSRC");

                entity.HasOne(d => d.ElevationUom)
                    .WithMany(p => p.GeoPoints)
                    .HasForeignKey(d => d.ElevationUomId)
                    .HasConstraintName("GPT_ELEV_UOM");

                entity.HasOne(d => d.GeoPointTypeEnum)
                    .WithMany(p => p.GeoPoints)
                    .HasForeignKey(d => d.GeoPointTypeEnumId)
                    .HasConstraintName("GEOPOINT_TYPE");
            });

            modelBuilder.Entity<GeoType>(entity =>
            {
                entity.ToTable("GEO_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "GEO_TYPE_PARENT");

                entity.HasIndex(e => e.CreatedTxStamp, "GEO_TYPE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GEO_TYPE_TXSTMP");

                entity.Property(e => e.GeoTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("GEO_TYPE_PARENT");
            });

            modelBuilder.Entity<GiftCard>(entity =>
            {
                entity.HasKey(e => e.PaymentMethodId);

                entity.ToTable("GIFT_CARD");

                entity.HasIndex(e => e.ContactMechId, "GIFTCARD_CMECH");

                entity.HasIndex(e => e.ContactMechId, "GIFTCARD_PADDR");

                entity.HasIndex(e => e.PaymentMethodId, "GIFTCARD_PMNTMETH");

                entity.HasIndex(e => e.CreatedTxStamp, "GIFT_CARD_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GIFT_CARD_TXSTMP");

                entity.Property(e => e.PaymentMethodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_METHOD_ID");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CARD_NUMBER");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.ExpireDate)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("EXPIRE_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PinNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PIN_NUMBER");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.GiftCards)
                    .HasForeignKey(d => d.ContactMechId)
                    .HasConstraintName("GIFTCARD_CMECH");

                entity.HasOne(d => d.ContactMechNavigation)
                    .WithMany(p => p.GiftCards)
                    .HasForeignKey(d => d.ContactMechId)
                    .HasConstraintName("GIFTCARD_PADDR");

                entity.HasOne(d => d.PaymentMethod)
                    .WithOne(p => p.GiftCard)
                    .HasForeignKey<GiftCard>(d => d.PaymentMethodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GIFTCARD_PMNTMETH");
            });

            modelBuilder.Entity<GiftCardFulfillment>(entity =>
            {
                entity.HasKey(e => e.FulfillmentId);

                entity.ToTable("GIFT_CARD_FULFILLMENT");

                entity.HasIndex(e => e.TypeEnumId, "GC_FILL_ENUM");

                entity.HasIndex(e => e.OrderId, "GC_FILL_ODRH");

                entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId }, "GC_FILL_ODRI");

                entity.HasIndex(e => e.PartyId, "GC_FILL_PARTY");

                entity.HasIndex(e => e.SurveyResponseId, "GC_FILL_SURVY");

                entity.HasIndex(e => e.CreatedTxStamp, "GFT_CRD_FLFLT_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GFT_CRD_FLFLT_TXSP");

                entity.Property(e => e.FulfillmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FULFILLMENT_ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.AuthCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("AUTH_CODE");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CARD_NUMBER");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.FulfillmentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FULFILLMENT_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MerchantId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("MERCHANT_ID");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.PinNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PIN_NUMBER");

                entity.Property(e => e.ReferenceNum)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCE_NUM");

                entity.Property(e => e.ResponseCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("RESPONSE_CODE");

                entity.Property(e => e.SurveyResponseId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_RESPONSE_ID");

                entity.Property(e => e.TypeEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TYPE_ENUM_ID");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.GiftCardFulfillments)
                    .HasForeignKey(d => d.OrderId)
                    .HasConstraintName("GC_FILL_ODRH");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.GiftCardFulfillments)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("GC_FILL_PARTY");

                entity.HasOne(d => d.SurveyResponse)
                    .WithMany(p => p.GiftCardFulfillments)
                    .HasForeignKey(d => d.SurveyResponseId)
                    .HasConstraintName("GC_FILL_SURVY");

                entity.HasOne(d => d.TypeEnum)
                    .WithMany(p => p.GiftCardFulfillments)
                    .HasForeignKey(d => d.TypeEnumId)
                    .HasConstraintName("GC_FILL_ENUM");

                entity.HasOne(d => d.OrderI)
                    .WithMany(p => p.GiftCardFulfillments)
                    .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                    .HasConstraintName("GC_FILL_ODRI");
            });

            modelBuilder.Entity<GlAccount>(entity =>
            {
                entity.ToTable("GL_ACCOUNT");

                entity.HasIndex(e => e.GlAccountClassId, "GLACCT_CLSS");

                entity.HasIndex(e => e.ParentGlAccountId, "GLACCT_PAR");

                entity.HasIndex(e => e.GlResourceTypeId, "GLACCT_REC");

                entity.HasIndex(e => e.GlAccountTypeId, "GLACCT_TYPE");

                entity.HasIndex(e => e.AccountCode, "GLACCT_UNQCD")
                    .IsUnique();

                entity.HasIndex(e => e.GlXbrlClassId, "GLACCT_XBRLCLS");

                entity.HasIndex(e => e.CreatedTxStamp, "GL_ACCOUNT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GL_ACCOUNT_TXSTMP");

                entity.Property(e => e.GlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_ID");

                entity.Property(e => e.AccountCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_CODE");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.ExternalId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EXTERNAL_ID");

                entity.Property(e => e.GlAccountClassId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_CLASS_ID");

                entity.Property(e => e.GlAccountTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_TYPE_ID");

                entity.Property(e => e.GlResourceTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_RESOURCE_TYPE_ID");

                entity.Property(e => e.GlXbrlClassId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_XBRL_CLASS_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentGlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_GL_ACCOUNT_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.HasOne(d => d.GlAccountClass)
                    .WithMany(p => p.GlAccounts)
                    .HasForeignKey(d => d.GlAccountClassId)
                    .HasConstraintName("GLACCT_CLSS");

                entity.HasOne(d => d.GlAccountType)
                    .WithMany(p => p.GlAccounts)
                    .HasForeignKey(d => d.GlAccountTypeId)
                    .HasConstraintName("GLACCT_TYPE");

                entity.HasOne(d => d.GlResourceType)
                    .WithMany(p => p.GlAccounts)
                    .HasForeignKey(d => d.GlResourceTypeId)
                    .HasConstraintName("GLACCT_REC");

                entity.HasOne(d => d.GlXbrlClass)
                    .WithMany(p => p.GlAccounts)
                    .HasForeignKey(d => d.GlXbrlClassId)
                    .HasConstraintName("GLACCT_XBRLCLS");

                entity.HasOne(d => d.ParentGlAccount)
                    .WithMany(p => p.InverseParentGlAccount)
                    .HasForeignKey(d => d.ParentGlAccountId)
                    .HasConstraintName("GLACCT_PAR");
            });

            modelBuilder.Entity<GlAccountCategory>(entity =>
            {
                entity.ToTable("GL_ACCOUNT_CATEGORY");

                entity.HasIndex(e => e.GlAccountCategoryTypeId, "GLACT_CAT_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "GL_ACCT_CTR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GL_ACCT_CTR_TXSTMP");

                entity.Property(e => e.GlAccountCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_CATEGORY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.GlAccountCategoryTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_CATEGORY_TYPE_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.GlAccountCategoryType)
                    .WithMany(p => p.GlAccountCategories)
                    .HasForeignKey(d => d.GlAccountCategoryTypeId)
                    .HasConstraintName("GLACT_CAT_TP");
            });

            modelBuilder.Entity<GlAccountCategoryMember>(entity =>
            {
                entity.HasKey(e => new { e.GlAccountId, e.GlAccountCategoryId, e.FromDate });

                entity.ToTable("GL_ACCOUNT_CATEGORY_MEMBER");

                entity.HasIndex(e => e.GlAccountId, "GLACT_CATMBR_AC");

                entity.HasIndex(e => e.GlAccountCategoryId, "GLACT_CATMBR_CAT");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GL_ACT_CTR_MMR_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "GL_ACT_CTR_MMR_TXS");

                entity.Property(e => e.GlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_ID");

                entity.Property(e => e.GlAccountCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_CATEGORY_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.AmountPercentage)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("AMOUNT_PERCENTAGE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.GlAccountCategory)
                    .WithMany(p => p.GlAccountCategoryMembers)
                    .HasForeignKey(d => d.GlAccountCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GLACT_CATMBR_CAT");

                entity.HasOne(d => d.GlAccount)
                    .WithMany(p => p.GlAccountCategoryMembers)
                    .HasForeignKey(d => d.GlAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GLACT_CATMBR_AC");
            });

            modelBuilder.Entity<GlAccountCategoryType>(entity =>
            {
                entity.ToTable("GL_ACCOUNT_CATEGORY_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "GL_ACT_CTR_TP_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GL_ACT_CTR_TP_TXSP");

                entity.Property(e => e.GlAccountCategoryTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_CATEGORY_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<GlAccountClass>(entity =>
            {
                entity.ToTable("GL_ACCOUNT_CLASS");

                entity.HasIndex(e => e.ParentClassId, "GLACTCLS_PAR");

                entity.HasIndex(e => e.CreatedTxStamp, "GL_ACCT_CLS_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GL_ACCT_CLS_TXSTMP");

                entity.Property(e => e.GlAccountClassId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_CLASS_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsAssetClass)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_ASSET_CLASS")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentClassId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_CLASS_ID");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.HasOne(d => d.ParentClass)
                    .WithMany(p => p.InverseParentClass)
                    .HasForeignKey(d => d.ParentClassId)
                    .HasConstraintName("GLACTCLS_PAR");
            });

            modelBuilder.Entity<GlAccountGroup>(entity =>
            {
                entity.ToTable("GL_ACCOUNT_GROUP");

                entity.HasIndex(e => e.GlAccountGroupTypeId, "GLACT_GRP_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "GL_ACCT_GRP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GL_ACCT_GRP_TXSTMP");

                entity.Property(e => e.GlAccountGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_GROUP_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.GlAccountGroupTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_GROUP_TYPE_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.GlAccountGroupType)
                    .WithMany(p => p.GlAccountGroups)
                    .HasForeignKey(d => d.GlAccountGroupTypeId)
                    .HasConstraintName("GLACT_GRP_TP");
            });

            modelBuilder.Entity<GlAccountGroupMember>(entity =>
            {
                entity.HasKey(e => new { e.GlAccountId, e.GlAccountGroupTypeId });

                entity.ToTable("GL_ACCOUNT_GROUP_MEMBER");

                entity.HasIndex(e => e.GlAccountId, "GLACT_GPMBR_AC");

                entity.HasIndex(e => e.GlAccountGroupId, "GLACT_GPMBR_GP");

                entity.HasIndex(e => e.GlAccountGroupTypeId, "GLACT_GPMBR_TP");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GL_ACT_GRP_MMR_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "GL_ACT_GRP_MMR_TXS");

                entity.Property(e => e.GlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_ID");

                entity.Property(e => e.GlAccountGroupTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_GROUP_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GlAccountGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_GROUP_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.GlAccountGroup)
                    .WithMany(p => p.GlAccountGroupMembers)
                    .HasForeignKey(d => d.GlAccountGroupId)
                    .HasConstraintName("GLACT_GPMBR_GP");

                entity.HasOne(d => d.GlAccountGroupType)
                    .WithMany(p => p.GlAccountGroupMembers)
                    .HasForeignKey(d => d.GlAccountGroupTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GLACT_GPMBR_TP");

                entity.HasOne(d => d.GlAccount)
                    .WithMany(p => p.GlAccountGroupMembers)
                    .HasForeignKey(d => d.GlAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GLACT_GPMBR_AC");
            });

            modelBuilder.Entity<GlAccountGroupType>(entity =>
            {
                entity.ToTable("GL_ACCOUNT_GROUP_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "GL_ACT_GRP_TP_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GL_ACT_GRP_TP_TXSP");

                entity.Property(e => e.GlAccountGroupTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_GROUP_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<GlAccountHistory>(entity =>
            {
                entity.HasKey(e => new { e.GlAccountId, e.OrganizationPartyId, e.CustomTimePeriodId });

                entity.ToTable("GL_ACCOUNT_HISTORY");

                entity.HasIndex(e => e.CustomTimePeriodId, "GLACCT_HST_CTP");

                entity.HasIndex(e => e.GlAccountId, "GLACCT_HST_GLA");

                entity.HasIndex(e => e.OrganizationPartyId, "GLACCT_HST_PARTY");

                entity.HasIndex(e => e.CreatedTxStamp, "GL_ACCT_HSR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GL_ACCT_HSR_TXSTMP");

                entity.Property(e => e.GlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_ID");

                entity.Property(e => e.OrganizationPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_PARTY_ID");

                entity.Property(e => e.CustomTimePeriodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_TIME_PERIOD_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.EndingBalance)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ENDING_BALANCE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OpeningBalance)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("OPENING_BALANCE");

                entity.Property(e => e.PostedCredits)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("POSTED_CREDITS");

                entity.Property(e => e.PostedDebits)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("POSTED_DEBITS");

                entity.HasOne(d => d.CustomTimePeriod)
                    .WithMany(p => p.GlAccountHistories)
                    .HasForeignKey(d => d.CustomTimePeriodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GLACCT_HST_CTP");

                entity.HasOne(d => d.GlAccount)
                    .WithMany(p => p.GlAccountHistories)
                    .HasForeignKey(d => d.GlAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GLACCT_HST_GLA");

                entity.HasOne(d => d.OrganizationParty)
                    .WithMany(p => p.GlAccountHistories)
                    .HasForeignKey(d => d.OrganizationPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GLACCT_HST_PARTY");
            });

            modelBuilder.Entity<GlAccountOrganization>(entity =>
            {
                entity.HasKey(e => new { e.GlAccountId, e.OrganizationPartyId });

                entity.ToTable("GL_ACCOUNT_ORGANIZATION");

                entity.HasIndex(e => e.GlAccountId, "GLACCT_ORG_GLA");

                entity.HasIndex(e => e.OrganizationPartyId, "GLACCT_ORG_PARTY");

                entity.HasIndex(e => e.CreatedTxStamp, "GL_ACT_ORGNN_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GL_ACT_ORGNN_TXSTP");

                entity.Property(e => e.GlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_ID");

                entity.Property(e => e.OrganizationPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_PARTY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.GlAccount)
                    .WithMany(p => p.GlAccountOrganizations)
                    .HasForeignKey(d => d.GlAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GLACCT_ORG_GLA");

                entity.HasOne(d => d.OrganizationParty)
                    .WithMany(p => p.GlAccountOrganizations)
                    .HasForeignKey(d => d.OrganizationPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GLACCT_ORG_PARTY");
            });

            modelBuilder.Entity<GlAccountRole>(entity =>
            {
                entity.HasKey(e => new { e.GlAccountId, e.PartyId, e.RoleTypeId, e.FromDate });

                entity.ToTable("GL_ACCOUNT_ROLE");

                entity.HasIndex(e => e.GlAccountId, "GLACCT_RL_GLA");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "GLACCT_RL_PTRLE");

                entity.HasIndex(e => e.CreatedTxStamp, "GL_ACCNT_RL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GL_ACCNT_RL_TXSTMP");

                entity.Property(e => e.GlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.GlAccount)
                    .WithMany(p => p.GlAccountRoles)
                    .HasForeignKey(d => d.GlAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GLACCT_RL_GLA");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.GlAccountRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GLACCT_RL_PTRLE");
            });

            modelBuilder.Entity<GlAccountType>(entity =>
            {
                entity.ToTable("GL_ACCOUNT_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "GLACTTY_PAR");

                entity.HasIndex(e => e.CreatedTxStamp, "GL_ACCNT_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GL_ACCNT_TP_TXSTMP");

                entity.Property(e => e.GlAccountTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("GLACTTY_PAR");
            });

            modelBuilder.Entity<GlAccountTypeDefault>(entity =>
            {
                entity.HasKey(e => new { e.GlAccountTypeId, e.OrganizationPartyId });

                entity.ToTable("GL_ACCOUNT_TYPE_DEFAULT");

                entity.HasIndex(e => e.GlAccountId, "GLACCT_TPDF_GLA");

                entity.HasIndex(e => e.GlAccountTypeId, "GLACCT_TPDF_GLAT");

                entity.HasIndex(e => e.OrganizationPartyId, "GLACCT_TPDF_OPTY");

                entity.HasIndex(e => e.CreatedTxStamp, "GL_ACT_TP_DFT_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GL_ACT_TP_DFT_TXSP");

                entity.Property(e => e.GlAccountTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_TYPE_ID");

                entity.Property(e => e.OrganizationPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_PARTY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.GlAccount)
                    .WithMany(p => p.GlAccountTypeDefaults)
                    .HasForeignKey(d => d.GlAccountId)
                    .HasConstraintName("GLACCT_TPDF_GLA");

                entity.HasOne(d => d.GlAccountType)
                    .WithMany(p => p.GlAccountTypeDefaults)
                    .HasForeignKey(d => d.GlAccountTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GLACCT_TPDF_GLAT");

                entity.HasOne(d => d.OrganizationParty)
                    .WithMany(p => p.GlAccountTypeDefaults)
                    .HasForeignKey(d => d.OrganizationPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GLACCT_TPDF_OPTY");
            });

            modelBuilder.Entity<GlBudgetXref>(entity =>
            {
                entity.HasKey(e => new { e.GlAccountId, e.BudgetItemTypeId, e.FromDate });

                entity.ToTable("GL_BUDGET_XREF");

                entity.HasIndex(e => e.BudgetItemTypeId, "GL_BDGT_XRF_BIT");

                entity.HasIndex(e => e.GlAccountId, "GL_BDGT_XRF_GLA");

                entity.HasIndex(e => e.CreatedTxStamp, "GL_BDGT_XRF_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GL_BDGT_XRF_TXSTMP");

                entity.Property(e => e.GlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_ID");

                entity.Property(e => e.BudgetItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ITEM_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.AllocationPercentage)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ALLOCATION_PERCENTAGE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.BudgetItemType)
                    .WithMany(p => p.GlBudgetXrefs)
                    .HasForeignKey(d => d.BudgetItemTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GL_BDGT_XRF_BIT");

                entity.HasOne(d => d.GlAccount)
                    .WithMany(p => p.GlBudgetXrefs)
                    .HasForeignKey(d => d.GlAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GL_BDGT_XRF_GLA");
            });

            modelBuilder.Entity<GlFiscalType>(entity =>
            {
                entity.ToTable("GL_FISCAL_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "GL_FSCL_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GL_FSCL_TP_TXSTMP");

                entity.Property(e => e.GlFiscalTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_FISCAL_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<GlJournal>(entity =>
            {
                entity.ToTable("GL_JOURNAL");

                entity.HasIndex(e => e.OrganizationPartyId, "GLJOURN_PARTY");

                entity.HasIndex(e => e.CreatedTxStamp, "GL_JOURNAL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GL_JOURNAL_TXSTMP");

                entity.Property(e => e.GlJournalId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_JOURNAL_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GlJournalName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GL_JOURNAL_NAME");

                entity.Property(e => e.IsPosted)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_POSTED")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OrganizationPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_PARTY_ID");

                entity.Property(e => e.PostedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("POSTED_DATE");

                entity.HasOne(d => d.OrganizationParty)
                    .WithMany(p => p.GlJournals)
                    .HasForeignKey(d => d.OrganizationPartyId)
                    .HasConstraintName("GLJOURN_PARTY");
            });

            modelBuilder.Entity<GlReconciliation>(entity =>
            {
                entity.ToTable("GL_RECONCILIATION");

                entity.HasIndex(e => e.GlAccountId, "GLREC_GLACCT");

                entity.HasIndex(e => e.OrganizationPartyId, "GLREC_GLPARTY");

                entity.HasIndex(e => e.StatusId, "GLREC_STI");

                entity.HasIndex(e => e.CreatedTxStamp, "GL_RCNCLTN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GL_RCNCLTN_TXSTMP");

                entity.Property(e => e.GlReconciliationId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_RECONCILIATION_ID");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.GlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_ID");

                entity.Property(e => e.GlReconciliationName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GL_RECONCILIATION_NAME");

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OpeningBalance)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("OPENING_BALANCE");

                entity.Property(e => e.OrganizationPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_PARTY_ID");

                entity.Property(e => e.ReconciledBalance)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("RECONCILED_BALANCE");

                entity.Property(e => e.ReconciledDate)
                    .HasColumnType("datetime")
                    .HasColumnName("RECONCILED_DATE");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.HasOne(d => d.GlAccount)
                    .WithMany(p => p.GlReconciliations)
                    .HasForeignKey(d => d.GlAccountId)
                    .HasConstraintName("GLREC_GLACCT");

                entity.HasOne(d => d.OrganizationParty)
                    .WithMany(p => p.GlReconciliations)
                    .HasForeignKey(d => d.OrganizationPartyId)
                    .HasConstraintName("GLREC_GLPARTY");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.GlReconciliations)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("GLREC_STI");
            });

            modelBuilder.Entity<GlReconciliationEntry>(entity =>
            {
                entity.HasKey(e => new { e.GlReconciliationId, e.AcctgTransId, e.AcctgTransEntrySeqId });

                entity.ToTable("GL_RECONCILIATION_ENTRY");

                entity.HasIndex(e => e.CreatedTxStamp, "GL_RCNCN_ENR_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GL_RCNCN_ENR_TXSTP");

                entity.HasIndex(e => new { e.AcctgTransId, e.AcctgTransEntrySeqId }, "GL_RECENT_ACTTXE");

                entity.HasIndex(e => e.GlReconciliationId, "GL_RECENT_GLREC");

                entity.Property(e => e.GlReconciliationId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_RECONCILIATION_ID");

                entity.Property(e => e.AcctgTransId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACCTG_TRANS_ID");

                entity.Property(e => e.AcctgTransEntrySeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACCTG_TRANS_ENTRY_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ReconciledAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("RECONCILED_AMOUNT");

                entity.HasOne(d => d.GlReconciliation)
                    .WithMany(p => p.GlReconciliationEntries)
                    .HasForeignKey(d => d.GlReconciliationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GL_RECENT_GLREC");

                entity.HasOne(d => d.AcctgTrans)
                    .WithMany(p => p.GlReconciliationEntries)
                    .HasForeignKey(d => new { d.AcctgTransId, d.AcctgTransEntrySeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GL_RECENT_ACTTXE");
            });

            modelBuilder.Entity<GlResourceType>(entity =>
            {
                entity.ToTable("GL_RESOURCE_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "GL_RSRC_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GL_RSRC_TP_TXSTMP");

                entity.Property(e => e.GlResourceTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_RESOURCE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<GlXbrlClass>(entity =>
            {
                entity.ToTable("GL_XBRL_CLASS");

                entity.HasIndex(e => e.ParentGlXbrlClassId, "GL_XBRL_CLSPAR");

                entity.HasIndex(e => e.CreatedTxStamp, "GL_XBRL_CLS_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GL_XBRL_CLS_TXSTMP");

                entity.Property(e => e.GlXbrlClassId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_XBRL_CLASS_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentGlXbrlClassId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_GL_XBRL_CLASS_ID");

                entity.HasOne(d => d.ParentGlXbrlClass)
                    .WithMany(p => p.InverseParentGlXbrlClass)
                    .HasForeignKey(d => d.ParentGlXbrlClassId)
                    .HasConstraintName("GL_XBRL_CLSPAR");
            });

            modelBuilder.Entity<GoodIdentification>(entity =>
            {
                entity.HasKey(e => new { e.GoodIdentificationTypeId, e.ProductId });

                entity.ToTable("GOOD_IDENTIFICATION");

                entity.HasIndex(e => e.CreatedTxStamp, "GD_IDNTFCTN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GD_IDNTFCTN_TXSTMP");

                entity.HasIndex(e => e.ProductId, "GOOD_ID_PRODICT");

                entity.HasIndex(e => e.GoodIdentificationTypeId, "GOOD_ID_TYPE");

                entity.HasIndex(e => e.IdValue, "GOOD_ID_VALIDX");

                entity.Property(e => e.GoodIdentificationTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GOOD_IDENTIFICATION_TYPE_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.IdValue)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ID_VALUE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.GoodIdentificationType)
                    .WithMany(p => p.GoodIdentifications)
                    .HasForeignKey(d => d.GoodIdentificationTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GOOD_ID_TYPE");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.GoodIdentifications)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GOOD_ID_PRODICT");
            });

            modelBuilder.Entity<GoodIdentificationType>(entity =>
            {
                entity.ToTable("GOOD_IDENTIFICATION_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "GD_IDNTFN_TP_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "GD_IDNTFN_TP_TXSTP");

                entity.HasIndex(e => e.ParentTypeId, "GOOD_ID_TYPE_PAR");

                entity.Property(e => e.GoodIdentificationTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GOOD_IDENTIFICATION_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("GOOD_ID_TYPE_PAR");
            });

            modelBuilder.Entity<ImageDataResource>(entity =>
            {
                entity.HasKey(e => e.DataResourceId);

                entity.ToTable("IMAGE_DATA_RESOURCE");

                entity.HasIndex(e => e.DataResourceId, "DATA_REC_IMAGE");

                entity.HasIndex(e => e.CreatedTxStamp, "IMG_DT_RSRC_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "IMG_DT_RSRC_TXSTMP");

                entity.Property(e => e.DataResourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_RESOURCE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.ImageData)
                    .HasColumnType("image")
                    .HasColumnName("IMAGE_DATA");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.DataResource)
                    .WithOne(p => p.ImageDataResource)
                    .HasForeignKey<ImageDataResource>(d => d.DataResourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DATA_REC_IMAGE");
            });

            modelBuilder.Entity<InventoryItem>(entity =>
            {
                entity.ToTable("INVENTORY_ITEM");

                entity.HasIndex(e => e.CreatedTxStamp, "INVNTR_ITM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INVNTR_ITM_TXSTMP");

                entity.HasIndex(e => e.ContainerId, "INV_ITEM_CONTAINER");

                entity.HasIndex(e => e.CurrencyUomId, "INV_ITEM_CUOM");

                entity.HasIndex(e => e.FacilityId, "INV_ITEM_FACILITY");

                entity.HasIndex(e => e.LotId, "INV_ITEM_LOT");

                entity.HasIndex(e => e.OwnerPartyId, "INV_ITEM_OWNPARTY");

                entity.HasIndex(e => e.PartyId, "INV_ITEM_PARTY");

                entity.HasIndex(e => e.ProductId, "INV_ITEM_PRODUCT");

                entity.HasIndex(e => e.StatusId, "INV_ITEM_STTSITM");

                entity.HasIndex(e => e.InventoryItemTypeId, "INV_ITEM_TYPE");

                entity.HasIndex(e => e.UomId, "INV_ITEM_UOM");

                entity.HasIndex(e => e.FixedAssetId, "IYIM_FAST");

                entity.Property(e => e.InventoryItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_ID");

                entity.Property(e => e.AccountingQuantityTotal)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ACCOUNTING_QUANTITY_TOTAL");

                entity.Property(e => e.ActivationNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVATION_NUMBER");

                entity.Property(e => e.ActivationValidThru)
                    .HasColumnType("datetime")
                    .HasColumnName("ACTIVATION_VALID_THRU");

                entity.Property(e => e.AvailableToPromise)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("AVAILABLE_TO_PROMISE");

                entity.Property(e => e.AvailableToPromiseTotal)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("AVAILABLE_TO_PROMISE_TOTAL");

                entity.Property(e => e.BinNumber)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BIN_NUMBER");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.ContainerId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTAINER_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM_ID");

                entity.Property(e => e.DatetimeManufactured)
                    .HasColumnType("datetime")
                    .HasColumnName("DATETIME_MANUFACTURED");

                entity.Property(e => e.DatetimeReceived)
                    .HasColumnType("datetime")
                    .HasColumnName("DATETIME_RECEIVED");

                entity.Property(e => e.ExpireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRE_DATE");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.FixedAssetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_ID");

                entity.Property(e => e.InventoryItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_TYPE_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LocationSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_SEQ_ID");

                entity.Property(e => e.LotId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("LOT_ID");

                entity.Property(e => e.OwnerPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("OWNER_PARTY_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.QuantityOnHand)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY_ON_HAND");

                entity.Property(e => e.QuantityOnHandTotal)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY_ON_HAND_TOTAL");

                entity.Property(e => e.SerialNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SERIAL_NUMBER");

                entity.Property(e => e.SoftIdentifier)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SOFT_IDENTIFIER");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.UnitCost)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("UNIT_COST");

                entity.Property(e => e.UomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UOM_ID");

                entity.HasOne(d => d.Container)
                    .WithMany(p => p.InventoryItems)
                    .HasForeignKey(d => d.ContainerId)
                    .HasConstraintName("INV_ITEM_CONTAINER");

                entity.HasOne(d => d.CurrencyUom)
                    .WithMany(p => p.InventoryItemCurrencyUoms)
                    .HasForeignKey(d => d.CurrencyUomId)
                    .HasConstraintName("INV_ITEM_CUOM");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.InventoryItems)
                    .HasForeignKey(d => d.FacilityId)
                    .HasConstraintName("INV_ITEM_FACILITY");

                entity.HasOne(d => d.FixedAsset)
                    .WithMany(p => p.InventoryItems)
                    .HasForeignKey(d => d.FixedAssetId)
                    .HasConstraintName("IYIM_FAST");

                entity.HasOne(d => d.InventoryItemType)
                    .WithMany(p => p.InventoryItems)
                    .HasForeignKey(d => d.InventoryItemTypeId)
                    .HasConstraintName("INV_ITEM_TYPE");

                entity.HasOne(d => d.Lot)
                    .WithMany(p => p.InventoryItems)
                    .HasForeignKey(d => d.LotId)
                    .HasConstraintName("INV_ITEM_LOT");

                entity.HasOne(d => d.OwnerParty)
                    .WithMany(p => p.InventoryItemOwnerParties)
                    .HasForeignKey(d => d.OwnerPartyId)
                    .HasConstraintName("INV_ITEM_OWNPARTY");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.InventoryItemParties)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("INV_ITEM_PARTY");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.InventoryItems)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("INV_ITEM_PRODUCT");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.InventoryItems)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("INV_ITEM_STTSITM");

                entity.HasOne(d => d.Uom)
                    .WithMany(p => p.InventoryItemUoms)
                    .HasForeignKey(d => d.UomId)
                    .HasConstraintName("INV_ITEM_UOM");
            });

            modelBuilder.Entity<InventoryItemAttribute>(entity =>
            {
                entity.HasKey(e => new { e.InventoryItemId, e.AttrName });

                entity.ToTable("INVENTORY_ITEM_ATTRIBUTE");

                entity.HasIndex(e => e.CreatedTxStamp, "INVR_ITM_ATTT_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INVR_ITM_ATTT_TXSP");

                entity.HasIndex(e => e.InventoryItemId, "INV_ITEM_ATTR");

                entity.Property(e => e.InventoryItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.InventoryItem)
                    .WithMany(p => p.InventoryItemAttributes)
                    .HasForeignKey(d => d.InventoryItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INV_ITEM_ATTR");
            });

            modelBuilder.Entity<InventoryItemDetail>(entity =>
            {
                entity.HasKey(e => new { e.InventoryItemId, e.InventoryItemDetailSeqId });

                entity.ToTable("INVENTORY_ITEM_DETAIL");

                entity.HasIndex(e => e.CreatedTxStamp, "INVR_ITM_DTL_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INVR_ITM_DTL_TXSTP");

                entity.HasIndex(e => new { e.FixedAssetId, e.MaintHistSeqId }, "INV_ITDTL_FAMNT");

                entity.HasIndex(e => e.InventoryItemId, "INV_ITDTL_INVIT");

                entity.HasIndex(e => e.ItemIssuanceId, "INV_ITDTL_ITMIS");

                entity.HasIndex(e => e.PhysicalInventoryId, "INV_ITDTL_PHINV");

                entity.HasIndex(e => e.ReasonEnumId, "INV_ITDTL_REAS");

                entity.HasIndex(e => e.ReceiptId, "INV_ITDTL_SHRCT");

                entity.HasIndex(e => e.WorkEffortId, "INV_ITDTL_WEFF");

                entity.Property(e => e.InventoryItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_ID");

                entity.Property(e => e.InventoryItemDetailSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_DETAIL_SEQ_ID");

                entity.Property(e => e.AccountingQuantityDiff)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ACCOUNTING_QUANTITY_DIFF");

                entity.Property(e => e.AvailableToPromiseDiff)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("AVAILABLE_TO_PROMISE_DIFF");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.FixedAssetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_ID");

                entity.Property(e => e.ItemIssuanceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_ISSUANCE_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MaintHistSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MAINT_HIST_SEQ_ID");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.PhysicalInventoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PHYSICAL_INVENTORY_ID");

                entity.Property(e => e.QuantityOnHandDiff)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY_ON_HAND_DIFF");

                entity.Property(e => e.ReasonEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REASON_ENUM_ID");

                entity.Property(e => e.ReceiptId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RECEIPT_ID");

                entity.Property(e => e.ReturnId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ID");

                entity.Property(e => e.ReturnItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ITEM_SEQ_ID");

                entity.Property(e => e.ShipGroupSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIP_GROUP_SEQ_ID");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ID");

                entity.Property(e => e.ShipmentItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ITEM_SEQ_ID");

                entity.Property(e => e.UnitCost)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("UNIT_COST");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.HasOne(d => d.InventoryItem)
                    .WithMany(p => p.InventoryItemDetails)
                    .HasForeignKey(d => d.InventoryItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INV_ITDTL_INVIT");

                entity.HasOne(d => d.ItemIssuance)
                    .WithMany(p => p.InventoryItemDetails)
                    .HasForeignKey(d => d.ItemIssuanceId)
                    .HasConstraintName("INV_ITDTL_ITMIS");

                entity.HasOne(d => d.PhysicalInventory)
                    .WithMany(p => p.InventoryItemDetails)
                    .HasForeignKey(d => d.PhysicalInventoryId)
                    .HasConstraintName("INV_ITDTL_PHINV");

                entity.HasOne(d => d.ReasonEnum)
                    .WithMany(p => p.InventoryItemDetails)
                    .HasForeignKey(d => d.ReasonEnumId)
                    .HasConstraintName("INV_ITDTL_REAS");

                entity.HasOne(d => d.Receipt)
                    .WithMany(p => p.InventoryItemDetails)
                    .HasForeignKey(d => d.ReceiptId)
                    .HasConstraintName("INV_ITDTL_SHRCT");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.InventoryItemDetails)
                    .HasForeignKey(d => d.WorkEffortId)
                    .HasConstraintName("INV_ITDTL_WEFF");

                entity.HasOne(d => d.FixedAssetMaint)
                    .WithMany(p => p.InventoryItemDetails)
                    .HasForeignKey(d => new { d.FixedAssetId, d.MaintHistSeqId })
                    .HasConstraintName("INV_ITDTL_FAMNT");
            });

            modelBuilder.Entity<InventoryItemLabel>(entity =>
            {
                entity.ToTable("INVENTORY_ITEM_LABEL");

                entity.HasIndex(e => e.CreatedTxStamp, "INVR_ITM_LBL_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INVR_ITM_LBL_TXSTP");

                entity.HasIndex(e => e.InventoryItemLabelTypeId, "INV_ITLA_TYPE");

                entity.Property(e => e.InventoryItemLabelId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_LABEL_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InventoryItemLabelTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_LABEL_TYPE_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.InventoryItemLabelType)
                    .WithMany(p => p.InventoryItemLabels)
                    .HasForeignKey(d => d.InventoryItemLabelTypeId)
                    .HasConstraintName("INV_ITLA_TYPE");
            });

            modelBuilder.Entity<InventoryItemLabelAppl>(entity =>
            {
                entity.HasKey(e => new { e.InventoryItemId, e.InventoryItemLabelTypeId });

                entity.ToTable("INVENTORY_ITEM_LABEL_APPL");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INR_ITM_LBL_APL_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "INR_ITM_LBL_APL_TS");

                entity.HasIndex(e => e.InventoryItemId, "INV_ITLAP_ITEM");

                entity.HasIndex(e => e.InventoryItemLabelId, "INV_ITLAP_LAB");

                entity.HasIndex(e => e.InventoryItemLabelTypeId, "INV_ITLAP_TYPE");

                entity.Property(e => e.InventoryItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_ID");

                entity.Property(e => e.InventoryItemLabelTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_LABEL_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.InventoryItemLabelId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_LABEL_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.HasOne(d => d.InventoryItem)
                    .WithMany(p => p.InventoryItemLabelAppls)
                    .HasForeignKey(d => d.InventoryItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INV_ITLAP_ITEM");

                entity.HasOne(d => d.InventoryItemLabel)
                    .WithMany(p => p.InventoryItemLabelAppls)
                    .HasForeignKey(d => d.InventoryItemLabelId)
                    .HasConstraintName("INV_ITLAP_LAB");

                entity.HasOne(d => d.InventoryItemLabelType)
                    .WithMany(p => p.InventoryItemLabelAppls)
                    .HasForeignKey(d => d.InventoryItemLabelTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INV_ITLAP_TYPE");
            });

            modelBuilder.Entity<InventoryItemLabelType>(entity =>
            {
                entity.ToTable("INVENTORY_ITEM_LABEL_TYPE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INR_ITM_LBL_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "INR_ITM_LBL_TP_TXS");

                entity.HasIndex(e => e.ParentTypeId, "INV_ITLT_TYPPAR");

                entity.Property(e => e.InventoryItemLabelTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_LABEL_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("INV_ITLT_TYPPAR");
            });

            modelBuilder.Entity<InventoryItemStatus>(entity =>
            {
                entity.HasKey(e => new { e.InventoryItemId, e.StatusId, e.StatusDatetime });

                entity.ToTable("INVENTORY_ITEM_STATUS");

                entity.HasIndex(e => e.CreatedTxStamp, "INVR_ITM_STS_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INVR_ITM_STS_TXSTP");

                entity.HasIndex(e => e.InventoryItemId, "INV_ITEM_STTS_II");

                entity.HasIndex(e => e.StatusId, "INV_ITEM_STTS_SI");

                entity.HasIndex(e => e.ChangeByUserLoginId, "INV_ITEM_STTS_USER");

                entity.Property(e => e.InventoryItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.StatusDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("STATUS_DATETIME");

                entity.Property(e => e.ChangeByUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OwnerPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("OWNER_PARTY_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.StatusEndDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("STATUS_END_DATETIME");

                entity.HasOne(d => d.ChangeByUserLogin)
                    .WithMany(p => p.InventoryItemStatuses)
                    .HasForeignKey(d => d.ChangeByUserLoginId)
                    .HasConstraintName("INV_ITEM_STTS_USER");

                entity.HasOne(d => d.InventoryItem)
                    .WithMany(p => p.InventoryItemStatuses)
                    .HasForeignKey(d => d.InventoryItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INV_ITEM_STTS_II");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.InventoryItemStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INV_ITEM_STTS_SI");
            });

            modelBuilder.Entity<InventoryItemTempRe>(entity =>
            {
                entity.HasKey(e => new { e.VisitId, e.ProductId, e.ProductStoreId });

                entity.ToTable("INVENTORY_ITEM_TEMP_RES");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INR_ITM_TMP_RS_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "INR_ITM_TMP_RS_TXS");

                entity.HasIndex(e => e.ProductStoreId, "INV_ITEM_TR_PRDS");

                entity.HasIndex(e => e.ProductId, "INV_ITEM_TR_PROD");

                entity.Property(e => e.VisitId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VISIT_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.ReservedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("RESERVED_DATE");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.InventoryItemTempRes)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INV_ITEM_TR_PROD");

                entity.HasOne(d => d.ProductStore)
                    .WithMany(p => p.InventoryItemTempRes)
                    .HasForeignKey(d => d.ProductStoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INV_ITEM_TR_PRDS");
            });

            modelBuilder.Entity<InventoryItemType>(entity =>
            {
                entity.ToTable("INVENTORY_ITEM_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "INVNR_ITM_TP_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INVNR_ITM_TP_TXSTP");

                entity.HasIndex(e => e.ParentTypeId, "INV_ITEM_TYPPAR");

                entity.Property(e => e.InventoryItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("INV_ITEM_TYPPAR");
            });

            modelBuilder.Entity<InventoryItemTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.InventoryItemTypeId, e.AttrName });

                entity.ToTable("INVENTORY_ITEM_TYPE_ATTR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INR_ITM_TP_ATR_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "INR_ITM_TP_ATR_TXS");

                entity.HasIndex(e => e.InventoryItemTypeId, "INV_ITEM_TYP_ATTR");

                entity.Property(e => e.InventoryItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.InventoryItemType)
                    .WithMany(p => p.InventoryItemTypeAttrs)
                    .HasForeignKey(d => d.InventoryItemTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INV_ITEM_TYP_ATTR");
            });

            modelBuilder.Entity<InventoryItemVariance>(entity =>
            {
                entity.HasKey(e => new { e.InventoryItemId, e.PhysicalInventoryId });

                entity.ToTable("INVENTORY_ITEM_VARIANCE");

                entity.HasIndex(e => e.CreatedTxStamp, "INVR_ITM_VRC_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INVR_ITM_VRC_TXSTP");

                entity.HasIndex(e => e.InventoryItemId, "INV_ITEM_VAR_ITEM");

                entity.HasIndex(e => e.PhysicalInventoryId, "INV_ITEM_VAR_PINV");

                entity.HasIndex(e => e.VarianceReasonId, "INV_ITEM_VAR_RSN");

                entity.Property(e => e.InventoryItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_ID");

                entity.Property(e => e.PhysicalInventoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PHYSICAL_INVENTORY_ID");

                entity.Property(e => e.AvailableToPromiseVar)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("AVAILABLE_TO_PROMISE_VAR");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.QuantityOnHandVar)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY_ON_HAND_VAR");

                entity.Property(e => e.VarianceReasonId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VARIANCE_REASON_ID");

                entity.HasOne(d => d.InventoryItem)
                    .WithMany(p => p.InventoryItemVariances)
                    .HasForeignKey(d => d.InventoryItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INV_ITEM_VAR_ITEM");

                entity.HasOne(d => d.PhysicalInventory)
                    .WithMany(p => p.InventoryItemVariances)
                    .HasForeignKey(d => d.PhysicalInventoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INV_ITEM_VAR_PINV");

                entity.HasOne(d => d.VarianceReason)
                    .WithMany(p => p.InventoryItemVariances)
                    .HasForeignKey(d => d.VarianceReasonId)
                    .HasConstraintName("INV_ITEM_VAR_RSN");
            });

            modelBuilder.Entity<InventoryTransfer>(entity =>
            {
                entity.ToTable("INVENTORY_TRANSFER");

                entity.HasIndex(e => e.CreatedTxStamp, "INVNR_TRNSR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INVNR_TRNSR_TXSTMP");

                entity.HasIndex(e => e.ContainerId, "INV_XFER_CONT");

                entity.HasIndex(e => e.FacilityId, "INV_XFER_FAC");

                entity.HasIndex(e => e.ItemIssuanceId, "INV_XFER_ISSU");

                entity.HasIndex(e => e.InventoryItemId, "INV_XFER_ITEM");

                entity.HasIndex(e => e.StatusId, "INV_XFER_STTS");

                entity.HasIndex(e => e.ContainerIdTo, "INV_XFER_TCNT");

                entity.HasIndex(e => e.FacilityIdTo, "INV_XFER_TFAC");

                entity.Property(e => e.InventoryTransferId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_TRANSFER_ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.ContainerId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTAINER_ID");

                entity.Property(e => e.ContainerIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTAINER_ID_TO");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.FacilityIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID_TO");

                entity.Property(e => e.InventoryItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_ID");

                entity.Property(e => e.ItemIssuanceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_ISSUANCE_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LocationSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_SEQ_ID");

                entity.Property(e => e.LocationSeqIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_SEQ_ID_TO");

                entity.Property(e => e.ReceiveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("RECEIVE_DATE");

                entity.Property(e => e.SendDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SEND_DATE");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.HasOne(d => d.Container)
                    .WithMany(p => p.InventoryTransferContainers)
                    .HasForeignKey(d => d.ContainerId)
                    .HasConstraintName("INV_XFER_CONT");

                entity.HasOne(d => d.ContainerIdToNavigation)
                    .WithMany(p => p.InventoryTransferContainerIdToNavigations)
                    .HasForeignKey(d => d.ContainerIdTo)
                    .HasConstraintName("INV_XFER_TCNT");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.InventoryTransferFacilities)
                    .HasForeignKey(d => d.FacilityId)
                    .HasConstraintName("INV_XFER_FAC");

                entity.HasOne(d => d.FacilityIdToNavigation)
                    .WithMany(p => p.InventoryTransferFacilityIdToNavigations)
                    .HasForeignKey(d => d.FacilityIdTo)
                    .HasConstraintName("INV_XFER_TFAC");

                entity.HasOne(d => d.InventoryItem)
                    .WithMany(p => p.InventoryTransfers)
                    .HasForeignKey(d => d.InventoryItemId)
                    .HasConstraintName("INV_XFER_ITEM");

                entity.HasOne(d => d.ItemIssuance)
                    .WithMany(p => p.InventoryTransfers)
                    .HasForeignKey(d => d.ItemIssuanceId)
                    .HasConstraintName("INV_XFER_ISSU");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.InventoryTransfers)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("INV_XFER_STTS");
            });

            modelBuilder.Entity<Invoice>(entity =>
            {
                entity.ToTable("INVOICE");

                entity.HasIndex(e => e.BillingAccountId, "INVOICE_BILLACCT");

                entity.HasIndex(e => e.ContactMechId, "INVOICE_CMECH");

                entity.HasIndex(e => e.CurrencyUomId, "INVOICE_CUOM");

                entity.HasIndex(e => e.InvoiceTypeId, "INVOICE_INVTYP");

                entity.HasIndex(e => e.PartyId, "INVOICE_PARTY");

                entity.HasIndex(e => e.PartyIdFrom, "INVOICE_PARTY_FRM");

                entity.HasIndex(e => e.RecurrenceInfoId, "INVOICE_RECINFO");

                entity.HasIndex(e => e.RoleTypeId, "INVOICE_ROLETYP");

                entity.HasIndex(e => e.StatusId, "INVOICE_STTSITM");

                entity.HasIndex(e => e.CreatedTxStamp, "INVOICE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INVOICE_TXSTMP");

                entity.Property(e => e.InvoiceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ID");

                entity.Property(e => e.BillingAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_ACCOUNT_ID");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DUE_DATE");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("INVOICE_DATE");

                entity.Property(e => e.InvoiceMessage)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_MESSAGE");

                entity.Property(e => e.InvoiceTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_TYPE_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PaidDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PAID_DATE");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.PartyIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID_FROM");

                entity.Property(e => e.RecurrenceInfoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RECURRENCE_INFO_ID");

                entity.Property(e => e.ReferenceNumber)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCE_NUMBER");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.HasOne(d => d.BillingAccount)
                    .WithMany(p => p.Invoices)
                    .HasForeignKey(d => d.BillingAccountId)
                    .HasConstraintName("INVOICE_BILLACCT");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.Invoices)
                    .HasForeignKey(d => d.ContactMechId)
                    .HasConstraintName("INVOICE_CMECH");

                entity.HasOne(d => d.CurrencyUom)
                    .WithMany(p => p.Invoices)
                    .HasForeignKey(d => d.CurrencyUomId)
                    .HasConstraintName("INVOICE_CUOM");

                entity.HasOne(d => d.InvoiceType)
                    .WithMany(p => p.Invoices)
                    .HasForeignKey(d => d.InvoiceTypeId)
                    .HasConstraintName("INVOICE_INVTYP");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.InvoiceParties)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("INVOICE_PARTY");

                entity.HasOne(d => d.PartyIdFromNavigation)
                    .WithMany(p => p.InvoicePartyIdFromNavigations)
                    .HasForeignKey(d => d.PartyIdFrom)
                    .HasConstraintName("INVOICE_PARTY_FRM");

                entity.HasOne(d => d.RecurrenceInfo)
                    .WithMany(p => p.Invoices)
                    .HasForeignKey(d => d.RecurrenceInfoId)
                    .HasConstraintName("INVOICE_RECINFO");

                entity.HasOne(d => d.RoleType)
                    .WithMany(p => p.Invoices)
                    .HasForeignKey(d => d.RoleTypeId)
                    .HasConstraintName("INVOICE_ROLETYP");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Invoices)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("INVOICE_STTSITM");
            });

            modelBuilder.Entity<InvoiceAttribute>(entity =>
            {
                entity.HasKey(e => new { e.InvoiceId, e.AttrName });

                entity.ToTable("INVOICE_ATTRIBUTE");

                entity.HasIndex(e => e.CreatedTxStamp, "INVC_ATTRBT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INVC_ATTRBT_TXSTMP");

                entity.HasIndex(e => e.InvoiceId, "INVOICE_ATTR");

                entity.Property(e => e.InvoiceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.InvoiceAttributes)
                    .HasForeignKey(d => d.InvoiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INVOICE_ATTR");
            });

            modelBuilder.Entity<InvoiceContactMech>(entity =>
            {
                entity.HasKey(e => new { e.InvoiceId, e.ContactMechPurposeTypeId, e.ContactMechId });

                entity.ToTable("INVOICE_CONTACT_MECH");

                entity.HasIndex(e => e.CreatedTxStamp, "INC_CNTT_MCH_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INC_CNTT_MCH_TXSTP");

                entity.HasIndex(e => e.ContactMechId, "INVOICE_CMECH_CM");

                entity.HasIndex(e => e.ContactMechPurposeTypeId, "INVOICE_CMECH_CMPT");

                entity.HasIndex(e => e.InvoiceId, "INVOICE_CMECH_HDR");

                entity.Property(e => e.InvoiceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ID");

                entity.Property(e => e.ContactMechPurposeTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_PURPOSE_TYPE_ID");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.InvoiceContactMeches)
                    .HasForeignKey(d => d.ContactMechId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INVOICE_CMECH_CM");

                entity.HasOne(d => d.ContactMechPurposeType)
                    .WithMany(p => p.InvoiceContactMeches)
                    .HasForeignKey(d => d.ContactMechPurposeTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INVOICE_CMECH_CMPT");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.InvoiceContactMeches)
                    .HasForeignKey(d => d.InvoiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INVOICE_CMECH_HDR");
            });

            modelBuilder.Entity<InvoiceContent>(entity =>
            {
                entity.HasKey(e => new { e.ContentId, e.InvoiceId, e.InvoiceContentTypeId, e.FromDate });

                entity.ToTable("INVOICE_CONTENT");

                entity.HasIndex(e => e.CreatedTxStamp, "INVC_CNTNT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INVC_CNTNT_TXSTMP");

                entity.HasIndex(e => e.ContentId, "INV_CNT_CNT");

                entity.HasIndex(e => e.InvoiceId, "INV_CNT_PROD");

                entity.HasIndex(e => e.InvoiceContentTypeId, "INV_CNT_TYPE");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.InvoiceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ID");

                entity.Property(e => e.InvoiceContentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_CONTENT_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.InvoiceContents)
                    .HasForeignKey(d => d.ContentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INV_CNT_CNT");

                entity.HasOne(d => d.InvoiceContentType)
                    .WithMany(p => p.InvoiceContents)
                    .HasForeignKey(d => d.InvoiceContentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INV_CNT_TYPE");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.InvoiceContents)
                    .HasForeignKey(d => d.InvoiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INV_CNT_PROD");
            });

            modelBuilder.Entity<InvoiceContentType>(entity =>
            {
                entity.ToTable("INVOICE_CONTENT_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "INC_CNTT_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INC_CNTT_TP_TXSTMP");

                entity.HasIndex(e => e.ParentTypeId, "INVCT_TYP_PARENT");

                entity.Property(e => e.InvoiceContentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_CONTENT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("INVCT_TYP_PARENT");
            });

            modelBuilder.Entity<InvoiceItem>(entity =>
            {
                entity.HasKey(e => new { e.InvoiceId, e.InvoiceItemSeqId });

                entity.ToTable("INVOICE_ITEM");

                entity.HasIndex(e => e.InvoiceId, "INVCE_ITM_INVCE");

                entity.HasIndex(e => e.InventoryItemId, "INVCE_ITM_INVITM");

                entity.HasIndex(e => e.OverrideGlAccountId, "INVCE_ITM_ORGLA");

                entity.HasIndex(e => e.OverrideOrgPartyId, "INVCE_ITM_OVRPTY");

                entity.HasIndex(e => new { e.ParentInvoiceId, e.ParentInvoiceItemSeqId }, "INVCE_ITM_PINVIT");

                entity.HasIndex(e => e.ProductFeatureId, "INVCE_ITM_PRDFT");

                entity.HasIndex(e => e.ProductId, "INVCE_ITM_PROD");

                entity.HasIndex(e => e.SalesOpportunityId, "INVCE_ITM_SLSOPP");

                entity.HasIndex(e => e.TaxAuthGeoId, "INVCE_ITM_TAXGEO");

                entity.HasIndex(e => e.TaxAuthPartyId, "INVCE_ITM_TAXPTY");

                entity.HasIndex(e => e.UomId, "INVCE_ITM_UOM");

                entity.HasIndex(e => e.CreatedTxStamp, "INVC_ITM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INVC_ITM_TXSTMP");

                entity.HasIndex(e => e.InvoiceItemTypeId, "INVOICE_ITMITYP");

                entity.HasIndex(e => e.TaxAuthorityRateSeqId, "INVOICE_ITM_TARP");

                entity.Property(e => e.InvoiceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ID");

                entity.Property(e => e.InvoiceItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ITEM_SEQ_ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InventoryItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_ID");

                entity.Property(e => e.InvoiceItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ITEM_TYPE_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OverrideGlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("OVERRIDE_GL_ACCOUNT_ID");

                entity.Property(e => e.OverrideOrgPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("OVERRIDE_ORG_PARTY_ID");

                entity.Property(e => e.ParentInvoiceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_INVOICE_ID");

                entity.Property(e => e.ParentInvoiceItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_INVOICE_ITEM_SEQ_ID");

                entity.Property(e => e.ProductFeatureId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.SalesOpportunityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SALES_OPPORTUNITY_ID");

                entity.Property(e => e.TaxAuthGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTH_GEO_ID");

                entity.Property(e => e.TaxAuthPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTH_PARTY_ID");

                entity.Property(e => e.TaxAuthorityRateSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTHORITY_RATE_SEQ_ID");

                entity.Property(e => e.TaxableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TAXABLE_FLAG")
                    .IsFixedLength();

                entity.Property(e => e.UomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UOM_ID");

                entity.HasOne(d => d.InventoryItem)
                    .WithMany(p => p.InvoiceItems)
                    .HasForeignKey(d => d.InventoryItemId)
                    .HasConstraintName("INVCE_ITM_INVITM");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.InvoiceItems)
                    .HasForeignKey(d => d.InvoiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INVCE_ITM_INVCE");

                entity.HasOne(d => d.InvoiceItemType)
                    .WithMany(p => p.InvoiceItems)
                    .HasForeignKey(d => d.InvoiceItemTypeId)
                    .HasConstraintName("INVOICE_ITMITYP");

                entity.HasOne(d => d.OverrideGlAccount)
                    .WithMany(p => p.InvoiceItems)
                    .HasForeignKey(d => d.OverrideGlAccountId)
                    .HasConstraintName("INVCE_ITM_ORGLA");

                entity.HasOne(d => d.OverrideOrgParty)
                    .WithMany(p => p.InvoiceItemOverrideOrgParties)
                    .HasForeignKey(d => d.OverrideOrgPartyId)
                    .HasConstraintName("INVCE_ITM_OVRPTY");

                entity.HasOne(d => d.ProductFeature)
                    .WithMany(p => p.InvoiceItems)
                    .HasForeignKey(d => d.ProductFeatureId)
                    .HasConstraintName("INVCE_ITM_PRDFT");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.InvoiceItems)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("INVCE_ITM_PROD");

                entity.HasOne(d => d.SalesOpportunity)
                    .WithMany(p => p.InvoiceItems)
                    .HasForeignKey(d => d.SalesOpportunityId)
                    .HasConstraintName("INVCE_ITM_SLSOPP");

                entity.HasOne(d => d.TaxAuthGeo)
                    .WithMany(p => p.InvoiceItems)
                    .HasForeignKey(d => d.TaxAuthGeoId)
                    .HasConstraintName("INVCE_ITM_TAXGEO");

                entity.HasOne(d => d.TaxAuthParty)
                    .WithMany(p => p.InvoiceItemTaxAuthParties)
                    .HasForeignKey(d => d.TaxAuthPartyId)
                    .HasConstraintName("INVCE_ITM_TAXPTY");

                entity.HasOne(d => d.TaxAuthorityRateSeq)
                    .WithMany(p => p.InvoiceItems)
                    .HasForeignKey(d => d.TaxAuthorityRateSeqId)
                    .HasConstraintName("INVOICE_ITM_TARP");

                entity.HasOne(d => d.Uom)
                    .WithMany(p => p.InvoiceItems)
                    .HasForeignKey(d => d.UomId)
                    .HasConstraintName("INVCE_ITM_UOM");

                entity.HasOne(d => d.ParentInvoiceI)
                    .WithMany(p => p.InverseParentInvoiceI)
                    .HasForeignKey(d => new { d.ParentInvoiceId, d.ParentInvoiceItemSeqId })
                    .HasConstraintName("INVCE_ITM_PINVIT");
            });

            modelBuilder.Entity<InvoiceItemAssoc>(entity =>
            {
                entity.HasKey(e => new { e.InvoiceIdFrom, e.InvoiceItemSeqIdFrom, e.InvoiceIdTo, e.InvoiceItemSeqIdTo, e.InvoiceItemAssocTypeId, e.FromDate });

                entity.ToTable("INVOICE_ITEM_ASSOC");

                entity.HasIndex(e => e.CreatedTxStamp, "INC_ITM_ASC_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INC_ITM_ASC_TXSTMP");

                entity.HasIndex(e => e.InvoiceItemAssocTypeId, "INITMASCTYP_IIASC");

                entity.HasIndex(e => new { e.InvoiceIdFrom, e.InvoiceItemSeqIdFrom }, "INITMASC_FIITM");

                entity.HasIndex(e => new { e.InvoiceIdTo, e.InvoiceItemSeqIdTo }, "INITMASC_TIITM");

                entity.Property(e => e.InvoiceIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ID_FROM");

                entity.Property(e => e.InvoiceItemSeqIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ITEM_SEQ_ID_FROM");

                entity.Property(e => e.InvoiceIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ID_TO");

                entity.Property(e => e.InvoiceItemSeqIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ITEM_SEQ_ID_TO");

                entity.Property(e => e.InvoiceItemAssocTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ITEM_ASSOC_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PartyIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID_FROM");

                entity.Property(e => e.PartyIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID_TO");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.InvoiceItemAssocType)
                    .WithMany(p => p.InvoiceItemAssocs)
                    .HasForeignKey(d => d.InvoiceItemAssocTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INITMASCTYP_IIASC");

                entity.HasOne(d => d.InvoiceI)
                    .WithMany(p => p.InvoiceItemAssocInvoiceIs)
                    .HasForeignKey(d => new { d.InvoiceIdFrom, d.InvoiceItemSeqIdFrom })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INITMASC_FIITM");

                entity.HasOne(d => d.InvoiceINavigation)
                    .WithMany(p => p.InvoiceItemAssocInvoiceINavigations)
                    .HasForeignKey(d => new { d.InvoiceIdTo, d.InvoiceItemSeqIdTo })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INITMASC_TIITM");
            });

            modelBuilder.Entity<InvoiceItemAssocType>(entity =>
            {
                entity.ToTable("INVOICE_ITEM_ASSOC_TYPE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INC_ITM_ASC_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "INC_ITM_ASC_TP_TXS");

                entity.HasIndex(e => e.ParentTypeId, "INITMASCTYP_PRNT");

                entity.Property(e => e.InvoiceItemAssocTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ITEM_ASSOC_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("INITMASCTYP_PRNT");
            });

            modelBuilder.Entity<InvoiceItemAttribute>(entity =>
            {
                entity.HasKey(e => new { e.InvoiceId, e.InvoiceItemSeqId, e.AttrName });

                entity.ToTable("INVOICE_ITEM_ATTRIBUTE");

                entity.HasIndex(e => e.CreatedTxStamp, "INC_ITM_ATTT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INC_ITM_ATTT_TXSTP");

                entity.HasIndex(e => new { e.InvoiceId, e.InvoiceItemSeqId }, "INVOICE_IMAT_ITM");

                entity.Property(e => e.InvoiceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ID");

                entity.Property(e => e.InvoiceItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ITEM_SEQ_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.InvoiceI)
                    .WithMany(p => p.InvoiceItemAttributes)
                    .HasForeignKey(d => new { d.InvoiceId, d.InvoiceItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INVOICE_IMAT_ITM");
            });

            modelBuilder.Entity<InvoiceItemType>(entity =>
            {
                entity.ToTable("INVOICE_ITEM_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "INVC_ITM_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INVC_ITM_TP_TXSTMP");

                entity.HasIndex(e => e.ParentTypeId, "INVOICE_ITEM_TPAR");

                entity.HasIndex(e => e.DefaultGlAccountId, "INVOICE_ITM_DGLAC");

                entity.Property(e => e.InvoiceItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ITEM_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DefaultGlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULT_GL_ACCOUNT_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.DefaultGlAccount)
                    .WithMany(p => p.InvoiceItemTypes)
                    .HasForeignKey(d => d.DefaultGlAccountId)
                    .HasConstraintName("INVOICE_ITM_DGLAC");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("INVOICE_ITEM_TPAR");
            });

            modelBuilder.Entity<InvoiceItemTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.InvoiceItemTypeId, e.AttrName });

                entity.ToTable("INVOICE_ITEM_TYPE_ATTR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INC_ITM_TP_ATR_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "INC_ITM_TP_ATR_TXS");

                entity.HasIndex(e => e.InvoiceItemTypeId, "INVOICE_ITEM_TATR");

                entity.Property(e => e.InvoiceItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ITEM_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.InvoiceItemType)
                    .WithMany(p => p.InvoiceItemTypeAttrs)
                    .HasForeignKey(d => d.InvoiceItemTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INVOICE_ITEM_TATR");
            });

            modelBuilder.Entity<InvoiceItemTypeGlAccount>(entity =>
            {
                entity.HasKey(e => new { e.InvoiceItemTypeId, e.OrganizationPartyId })
                    .HasName("PK_INVOICE_ITEM_TYPE_GL_ACCOUN");

                entity.ToTable("INVOICE_ITEM_TYPE_GL_ACCOUNT");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INC_TP_GL_ACT_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "INC_TP_GL_ACT_TS");

                entity.HasIndex(e => e.GlAccountId, "INVOICE_ITGA_GLAC");

                entity.HasIndex(e => e.InvoiceItemTypeId, "INVOICE_ITGA_IIT");

                entity.HasIndex(e => e.OrganizationPartyId, "INVOICE_ITGA_OPTY");

                entity.Property(e => e.InvoiceItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ITEM_TYPE_ID");

                entity.Property(e => e.OrganizationPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_PARTY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.GlAccount)
                    .WithMany(p => p.InvoiceItemTypeGlAccounts)
                    .HasForeignKey(d => d.GlAccountId)
                    .HasConstraintName("INVOICE_ITGA_GLAC");

                entity.HasOne(d => d.InvoiceItemType)
                    .WithMany(p => p.InvoiceItemTypeGlAccounts)
                    .HasForeignKey(d => d.InvoiceItemTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INVOICE_ITGA_IIT");

                entity.HasOne(d => d.OrganizationParty)
                    .WithMany(p => p.InvoiceItemTypeGlAccounts)
                    .HasForeignKey(d => d.OrganizationPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INVOICE_ITGA_OPTY");
            });

            modelBuilder.Entity<InvoiceItemTypeMap>(entity =>
            {
                entity.HasKey(e => new { e.InvoiceItemMapKey, e.InvoiceTypeId });

                entity.ToTable("INVOICE_ITEM_TYPE_MAP");

                entity.HasIndex(e => e.CreatedTxStamp, "INC_ITM_TP_MP_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INC_ITM_TP_MP_TXSP");

                entity.HasIndex(e => e.InvoiceTypeId, "INVITMMAP_INVTYP");

                entity.HasIndex(e => e.InvoiceItemTypeId, "INVOICE_ITEM_MAP");

                entity.Property(e => e.InvoiceItemMapKey)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ITEM_MAP_KEY");

                entity.Property(e => e.InvoiceTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.InvoiceItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ITEM_TYPE_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.InvoiceItemType)
                    .WithMany(p => p.InvoiceItemTypeMaps)
                    .HasForeignKey(d => d.InvoiceItemTypeId)
                    .HasConstraintName("INVOICE_ITEM_MAP");

                entity.HasOne(d => d.InvoiceType)
                    .WithMany(p => p.InvoiceItemTypeMaps)
                    .HasForeignKey(d => d.InvoiceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INVITMMAP_INVTYP");
            });

            modelBuilder.Entity<InvoiceNote>(entity =>
            {
                entity.HasKey(e => new { e.InvoiceId, e.NoteId });

                entity.ToTable("INVOICE_NOTE");

                entity.HasIndex(e => e.CreatedTxStamp, "INVC_NT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INVC_NT_TXSTMP");

                entity.HasIndex(e => e.InvoiceId, "INVOICE_NOTE_INV");

                entity.HasIndex(e => e.NoteId, "INVOICE_NOTE_NOTE");

                entity.Property(e => e.InvoiceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ID");

                entity.Property(e => e.NoteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("NOTE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.InvoiceNotes)
                    .HasForeignKey(d => d.InvoiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INVOICE_NOTE_INV");

                entity.HasOne(d => d.Note)
                    .WithMany(p => p.InvoiceNotes)
                    .HasForeignKey(d => d.NoteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INVOICE_NOTE_NOTE");
            });

            modelBuilder.Entity<InvoiceRole>(entity =>
            {
                entity.HasKey(e => new { e.InvoiceId, e.PartyId, e.RoleTypeId });

                entity.ToTable("INVOICE_ROLE");

                entity.HasIndex(e => e.InvoiceId, "INVCE_RLE_INVCE");

                entity.HasIndex(e => e.PartyId, "INVCE_RLE_PARTY");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "INVCE_RLE_PTRL");

                entity.HasIndex(e => e.CreatedTxStamp, "INVC_RL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INVC_RL_TXSTMP");

                entity.Property(e => e.InvoiceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DatetimePerformed)
                    .HasColumnType("datetime")
                    .HasColumnName("DATETIME_PERFORMED");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Percentage)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("PERCENTAGE");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.InvoiceRoles)
                    .HasForeignKey(d => d.InvoiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INVCE_RLE_INVCE");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.InvoiceRoles)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INVCE_RLE_PARTY");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.InvoiceRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INVCE_RLE_PTRL");
            });

            modelBuilder.Entity<InvoiceStatus>(entity =>
            {
                entity.HasKey(e => new { e.StatusId, e.InvoiceId, e.StatusDate });

                entity.ToTable("INVOICE_STATUS");

                entity.HasIndex(e => e.InvoiceId, "INVCE_STS_INVCE");

                entity.HasIndex(e => e.StatusId, "INVCE_STS_STSITM");

                entity.HasIndex(e => e.CreatedTxStamp, "INVC_STTS_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INVC_STTS_TXSTMP");

                entity.HasIndex(e => e.ChangeByUserLoginId, "INV_STTS_USRLGN");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.InvoiceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ID");

                entity.Property(e => e.StatusDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STATUS_DATE");

                entity.Property(e => e.ChangeByUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ChangeByUserLogin)
                    .WithMany(p => p.InvoiceStatuses)
                    .HasForeignKey(d => d.ChangeByUserLoginId)
                    .HasConstraintName("INV_STTS_USRLGN");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.InvoiceStatuses)
                    .HasForeignKey(d => d.InvoiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INVCE_STS_INVCE");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.InvoiceStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INVCE_STS_STSITM");
            });

            modelBuilder.Entity<InvoiceTerm>(entity =>
            {
                entity.ToTable("INVOICE_TERM");

                entity.HasIndex(e => e.InvoiceId, "INVCE_TRM_INVCE");

                entity.HasIndex(e => e.TermTypeId, "INVCE_TRM_TRM");

                entity.HasIndex(e => e.CreatedTxStamp, "INVC_TRM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INVC_TRM_TXSTMP");

                entity.Property(e => e.InvoiceTermId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_TERM_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvoiceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ID");

                entity.Property(e => e.InvoiceItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ITEM_SEQ_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.TermDays).HasColumnName("TERM_DAYS");

                entity.Property(e => e.TermTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TERM_TYPE_ID");

                entity.Property(e => e.TermValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("TERM_VALUE");

                entity.Property(e => e.TextValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TEXT_VALUE");

                entity.Property(e => e.UomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UOM_ID");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.InvoiceTerms)
                    .HasForeignKey(d => d.InvoiceId)
                    .HasConstraintName("INVCE_TRM_INVCE");

                entity.HasOne(d => d.TermType)
                    .WithMany(p => p.InvoiceTerms)
                    .HasForeignKey(d => d.TermTypeId)
                    .HasConstraintName("INVCE_TRM_TRM");
            });

            modelBuilder.Entity<InvoiceTermAttribute>(entity =>
            {
                entity.HasKey(e => new { e.InvoiceTermId, e.AttrName });

                entity.ToTable("INVOICE_TERM_ATTRIBUTE");

                entity.HasIndex(e => e.CreatedTxStamp, "INC_TRM_ATTT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INC_TRM_ATTT_TXSTP");

                entity.HasIndex(e => e.InvoiceTermId, "INVOICE_TRM_ATTR");

                entity.Property(e => e.InvoiceTermId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_TERM_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.InvoiceTerm)
                    .WithMany(p => p.InvoiceTermAttributes)
                    .HasForeignKey(d => d.InvoiceTermId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INVOICE_TRM_ATTR");
            });

            modelBuilder.Entity<InvoiceType>(entity =>
            {
                entity.ToTable("INVOICE_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "INVC_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INVC_TP_TXSTMP");

                entity.HasIndex(e => e.ParentTypeId, "INVOICE_TYPE_PAR");

                entity.Property(e => e.InvoiceTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("INVOICE_TYPE_PAR");
            });

            modelBuilder.Entity<InvoiceTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.InvoiceTypeId, e.AttrName });

                entity.ToTable("INVOICE_TYPE_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "INVC_TP_ATR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "INVC_TP_ATR_TXSTMP");

                entity.HasIndex(e => e.InvoiceTypeId, "INVOICE_TPAT_TYP");

                entity.Property(e => e.InvoiceTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.InvoiceType)
                    .WithMany(p => p.InvoiceTypeAttrs)
                    .HasForeignKey(d => d.InvoiceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INVOICE_TPAT_TYP");
            });

            modelBuilder.Entity<ItemIssuance>(entity =>
            {
                entity.ToTable("ITEM_ISSUANCE");

                entity.HasIndex(e => new { e.FixedAssetId, e.MaintHistSeqId }, "ITEM_ISS_FAMNT");

                entity.HasIndex(e => e.IssuedByUserLoginId, "ITEM_ISS_IBUL");

                entity.HasIndex(e => e.InventoryItemId, "ITEM_ISS_INVITM");

                entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId }, "ITEM_ISS_ORITM");

                entity.HasIndex(e => new { e.ShipmentId, e.ShipmentItemSeqId }, "ITEM_ISS_SHITM");

                entity.HasIndex(e => e.CreatedTxStamp, "ITM_ISSNC_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ITM_ISSNC_TXSTMP");

                entity.Property(e => e.ItemIssuanceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_ISSUANCE_ID");

                entity.Property(e => e.CancelQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("CANCEL_QUANTITY");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.FixedAssetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_ID");

                entity.Property(e => e.InventoryItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_ID");

                entity.Property(e => e.IssuedByUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ISSUED_BY_USER_LOGIN_ID");

                entity.Property(e => e.IssuedDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("ISSUED_DATE_TIME");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MaintHistSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MAINT_HIST_SEQ_ID");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.ShipGroupSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIP_GROUP_SEQ_ID");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ID");

                entity.Property(e => e.ShipmentItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ITEM_SEQ_ID");

                entity.HasOne(d => d.InventoryItem)
                    .WithMany(p => p.ItemIssuances)
                    .HasForeignKey(d => d.InventoryItemId)
                    .HasConstraintName("ITEM_ISS_INVITM");

                entity.HasOne(d => d.IssuedByUserLogin)
                    .WithMany(p => p.ItemIssuances)
                    .HasForeignKey(d => d.IssuedByUserLoginId)
                    .HasConstraintName("ITEM_ISS_IBUL");

                entity.HasOne(d => d.FixedAssetMaint)
                    .WithMany(p => p.ItemIssuances)
                    .HasForeignKey(d => new { d.FixedAssetId, d.MaintHistSeqId })
                    .HasConstraintName("ITEM_ISS_FAMNT");

                entity.HasOne(d => d.OrderI)
                    .WithMany(p => p.ItemIssuances)
                    .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                    .HasConstraintName("ITEM_ISS_ORITM");

                entity.HasOne(d => d.ShipmentI)
                    .WithMany(p => p.ItemIssuances)
                    .HasForeignKey(d => new { d.ShipmentId, d.ShipmentItemSeqId })
                    .HasConstraintName("ITEM_ISS_SHITM");
            });

            modelBuilder.Entity<ItemIssuanceRole>(entity =>
            {
                entity.HasKey(e => new { e.ItemIssuanceId, e.PartyId, e.RoleTypeId });

                entity.ToTable("ITEM_ISSUANCE_ROLE");

                entity.HasIndex(e => e.ItemIssuanceId, "ITEM_ISSRL_ITMIS");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "ITEM_ISSRL_PTRL");

                entity.HasIndex(e => e.PartyId, "ITEM_ISSRL_PTY");

                entity.HasIndex(e => e.CreatedTxStamp, "ITM_ISSC_RL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ITM_ISSC_RL_TXSTMP");

                entity.Property(e => e.ItemIssuanceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_ISSUANCE_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ItemIssuance)
                    .WithMany(p => p.ItemIssuanceRoles)
                    .HasForeignKey(d => d.ItemIssuanceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ITEM_ISSRL_ITMIS");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.ItemIssuanceRoles)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ITEM_ISSRL_PTY");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.ItemIssuanceRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ITEM_ISSRL_PTRL");
            });

            modelBuilder.Entity<JavaResource>(entity =>
            {
                entity.HasKey(e => e.ResourceName);

                entity.ToTable("JAVA_RESOURCE");

                entity.HasIndex(e => e.CreatedTxStamp, "JV_RSRC_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "JV_RSRC_TXSTMP");

                entity.Property(e => e.ResourceName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("RESOURCE_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ResourceValue)
                    .HasColumnType("image")
                    .HasColumnName("RESOURCE_VALUE");
            });

            modelBuilder.Entity<JobInterview>(entity =>
            {
                entity.ToTable("JOB_INTERVIEW");

                entity.HasIndex(e => e.CreatedTxStamp, "JB_INTRVW_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "JB_INTRVW_TXSTMP");

                entity.HasIndex(e => e.GradeSecuredEnumId, "JOB_INTW_ENUM");

                entity.HasIndex(e => e.JobIntervieweePartyId, "JOB_INTW_IEPR");

                entity.HasIndex(e => e.JobInterviewTypeId, "JOB_INTW_INTYP");

                entity.HasIndex(e => e.JobInterviewerPartyId, "JOB_INTW_IRPR");

                entity.HasIndex(e => e.JobRequisitionId, "JOB_INTW_JBREQ");

                entity.Property(e => e.JobInterviewId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("JOB_INTERVIEW_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GradeSecuredEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GRADE_SECURED_ENUM_ID");

                entity.Property(e => e.JobInterviewDate)
                    .HasColumnType("datetime")
                    .HasColumnName("JOB_INTERVIEW_DATE");

                entity.Property(e => e.JobInterviewResult)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("JOB_INTERVIEW_RESULT");

                entity.Property(e => e.JobInterviewTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("JOB_INTERVIEW_TYPE_ID");

                entity.Property(e => e.JobIntervieweePartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("JOB_INTERVIEWEE_PARTY_ID");

                entity.Property(e => e.JobInterviewerPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("JOB_INTERVIEWER_PARTY_ID");

                entity.Property(e => e.JobRequisitionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("JOB_REQUISITION_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.GradeSecuredEnum)
                    .WithMany(p => p.JobInterviews)
                    .HasForeignKey(d => d.GradeSecuredEnumId)
                    .HasConstraintName("JOB_INTW_ENUM");

                entity.HasOne(d => d.JobInterviewType)
                    .WithMany(p => p.JobInterviews)
                    .HasForeignKey(d => d.JobInterviewTypeId)
                    .HasConstraintName("JOB_INTW_INTYP");

                entity.HasOne(d => d.JobIntervieweeParty)
                    .WithMany(p => p.JobInterviewJobIntervieweeParties)
                    .HasForeignKey(d => d.JobIntervieweePartyId)
                    .HasConstraintName("JOB_INTW_IEPR");

                entity.HasOne(d => d.JobInterviewerParty)
                    .WithMany(p => p.JobInterviewJobInterviewerParties)
                    .HasForeignKey(d => d.JobInterviewerPartyId)
                    .HasConstraintName("JOB_INTW_IRPR");

                entity.HasOne(d => d.JobRequisition)
                    .WithMany(p => p.JobInterviews)
                    .HasForeignKey(d => d.JobRequisitionId)
                    .HasConstraintName("JOB_INTW_JBREQ");
            });

            modelBuilder.Entity<JobInterviewType>(entity =>
            {
                entity.ToTable("JOB_INTERVIEW_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "JB_INTRW_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "JB_INTRW_TP_TXSTMP");

                entity.Property(e => e.JobInterviewTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("JOB_INTERVIEW_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<JobManagerLock>(entity =>
            {
                entity.HasKey(e => new { e.InstanceId, e.FromDate });

                entity.ToTable("JOB_MANAGER_LOCK");

                entity.HasIndex(e => e.CreatedTxStamp, "JB_MNGR_LCK_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "JB_MNGR_LCK_TXSTMP");

                entity.HasIndex(e => e.ReasonEnumId, "JOBLK_ENUM_REAS");

                entity.Property(e => e.InstanceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INSTANCE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ReasonEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REASON_ENUM_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ReasonEnum)
                    .WithMany(p => p.JobManagerLocks)
                    .HasForeignKey(d => d.ReasonEnumId)
                    .HasConstraintName("JOBLK_ENUM_REAS");
            });

            modelBuilder.Entity<JobRequisition>(entity =>
            {
                entity.ToTable("JOB_REQUISITION");

                entity.HasIndex(e => e.CreatedTxStamp, "JB_RQSTN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "JB_RQSTN_TXSTMP");

                entity.HasIndex(e => e.ExamTypeEnumId, "JOB_REQ_ENUMEXM");

                entity.HasIndex(e => e.JobPostingTypeEnumId, "JOB_REQ_ENUMJBP");

                entity.HasIndex(e => e.SkillTypeId, "JOB_REQ_SKTYP");

                entity.Property(e => e.JobRequisitionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("JOB_REQUISITION_ID");

                entity.Property(e => e.Age).HasColumnName("AGE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DurationMonths).HasColumnName("DURATION_MONTHS");

                entity.Property(e => e.ExamTypeEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EXAM_TYPE_ENUM_ID");

                entity.Property(e => e.ExperienceMonths).HasColumnName("EXPERIENCE_MONTHS");

                entity.Property(e => e.ExperienceYears).HasColumnName("EXPERIENCE_YEARS");

                entity.Property(e => e.Gender)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("GENDER")
                    .IsFixedLength();

                entity.Property(e => e.JobLocation)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("JOB_LOCATION");

                entity.Property(e => e.JobPostingTypeEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("JOB_POSTING_TYPE_ENUM_ID");

                entity.Property(e => e.JobRequisitionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("JOB_REQUISITION_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.NoOfResources).HasColumnName("NO_OF_RESOURCES");

                entity.Property(e => e.Qualification)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("QUALIFICATION");

                entity.Property(e => e.RequiredOnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("REQUIRED_ON_DATE");

                entity.Property(e => e.SkillTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SKILL_TYPE_ID");

                entity.HasOne(d => d.ExamTypeEnum)
                    .WithMany(p => p.JobRequisitionExamTypeEnums)
                    .HasForeignKey(d => d.ExamTypeEnumId)
                    .HasConstraintName("JOB_REQ_ENUMEXM");

                entity.HasOne(d => d.JobPostingTypeEnum)
                    .WithMany(p => p.JobRequisitionJobPostingTypeEnums)
                    .HasForeignKey(d => d.JobPostingTypeEnumId)
                    .HasConstraintName("JOB_REQ_ENUMJBP");

                entity.HasOne(d => d.SkillType)
                    .WithMany(p => p.JobRequisitions)
                    .HasForeignKey(d => d.SkillTypeId)
                    .HasConstraintName("JOB_REQ_SKTYP");
            });

            modelBuilder.Entity<JobSandbox>(entity =>
            {
                entity.HasKey(e => e.JobId);

                entity.ToTable("JOB_SANDBOX");

                entity.HasIndex(e => e.CreatedTxStamp, "JOB_SANDBOX_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "JOB_SANDBOX_TXSTMP");

                entity.HasIndex(e => e.AuthUserLoginId, "JOB_SNDBX_AUSRLGN");

                entity.HasIndex(e => e.RecurrenceInfoId, "JOB_SNDBX_RECINFO");

                entity.HasIndex(e => e.RuntimeDataId, "JOB_SNDBX_RNTMDTA");

                entity.HasIndex(e => new { e.RunByInstanceId, e.StatusId }, "JOB_SNDBX_RUNSTAT");

                entity.HasIndex(e => e.StatusId, "JOB_SNDBX_STTS");

                entity.HasIndex(e => e.TempExprId, "JOB_SNDBX_TEMPEXPR");

                entity.HasIndex(e => e.RunAsUser, "JOB_SNDBX_USRLGN");

                entity.Property(e => e.JobId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("JOB_ID");

                entity.Property(e => e.AuthUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("AUTH_USER_LOGIN_ID");

                entity.Property(e => e.CancelDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("CANCEL_DATE_TIME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrentRecurrenceCount).HasColumnName("CURRENT_RECURRENCE_COUNT");

                entity.Property(e => e.CurrentRetryCount).HasColumnName("CURRENT_RETRY_COUNT");

                entity.Property(e => e.FinishDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("FINISH_DATE_TIME");

                entity.Property(e => e.JobName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JOB_NAME");

                entity.Property(e => e.JobResult)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("JOB_RESULT");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LoaderName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOADER_NAME");

                entity.Property(e => e.MaxRecurrenceCount).HasColumnName("MAX_RECURRENCE_COUNT");

                entity.Property(e => e.MaxRetry).HasColumnName("MAX_RETRY");

                entity.Property(e => e.ParentJobId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_JOB_ID");

                entity.Property(e => e.PoolId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("POOL_ID");

                entity.Property(e => e.PreviousJobId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PREVIOUS_JOB_ID");

                entity.Property(e => e.Priority).HasColumnName("PRIORITY");

                entity.Property(e => e.RecurrenceInfoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RECURRENCE_INFO_ID");

                entity.Property(e => e.RecurrenceTimeZone)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("RECURRENCE_TIME_ZONE");

                entity.Property(e => e.RunAsUser)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("RUN_AS_USER");

                entity.Property(e => e.RunByInstanceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RUN_BY_INSTANCE_ID");

                entity.Property(e => e.RunTime)
                    .HasColumnType("datetime")
                    .HasColumnName("RUN_TIME");

                entity.Property(e => e.RuntimeDataId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RUNTIME_DATA_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERVICE_NAME");

                entity.Property(e => e.StartDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("START_DATE_TIME");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.TempExprId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TEMP_EXPR_ID");

                entity.HasOne(d => d.AuthUserLogin)
                    .WithMany(p => p.JobSandboxAuthUserLogins)
                    .HasForeignKey(d => d.AuthUserLoginId)
                    .HasConstraintName("JOB_SNDBX_AUSRLGN");

                entity.HasOne(d => d.RecurrenceInfo)
                    .WithMany(p => p.JobSandboxes)
                    .HasForeignKey(d => d.RecurrenceInfoId)
                    .HasConstraintName("JOB_SNDBX_RECINFO");

                entity.HasOne(d => d.RunAsUserNavigation)
                    .WithMany(p => p.JobSandboxRunAsUserNavigations)
                    .HasForeignKey(d => d.RunAsUser)
                    .HasConstraintName("JOB_SNDBX_USRLGN");

                entity.HasOne(d => d.RuntimeData)
                    .WithMany(p => p.JobSandboxes)
                    .HasForeignKey(d => d.RuntimeDataId)
                    .HasConstraintName("JOB_SNDBX_RNTMDTA");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.JobSandboxes)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("JOB_SNDBX_STTS");

                entity.HasOne(d => d.TempExpr)
                    .WithMany(p => p.JobSandboxes)
                    .HasForeignKey(d => d.TempExprId)
                    .HasConstraintName("JOB_SNDBX_TEMPEXPR");
            });

            modelBuilder.Entity<KeywordThesauru>(entity =>
            {
                entity.HasKey(e => new { e.EnteredKeyword, e.AlternateKeyword });

                entity.ToTable("KEYWORD_THESAURUS");

                entity.HasIndex(e => e.CreatedTxStamp, "KWRD_THSRS_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "KWRD_THSRS_TXSTMP");

                entity.HasIndex(e => e.RelationshipEnumId, "KW_THRS_RLENM");

                entity.Property(e => e.EnteredKeyword)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENTERED_KEYWORD");

                entity.Property(e => e.AlternateKeyword)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALTERNATE_KEYWORD");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.RelationshipEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RELATIONSHIP_ENUM_ID");

                entity.HasOne(d => d.RelationshipEnum)
                    .WithMany(p => p.KeywordThesaurus)
                    .HasForeignKey(d => d.RelationshipEnumId)
                    .HasConstraintName("KW_THRS_RLENM");
            });

            modelBuilder.Entity<Lot>(entity =>
            {
                entity.ToTable("LOT");

                entity.HasIndex(e => e.CreatedTxStamp, "LOT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "LOT_TXSTMP");

                entity.Property(e => e.LotId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("LOT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATION_DATE");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRATION_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");
            });

            modelBuilder.Entity<MarketInterest>(entity =>
            {
                entity.HasKey(e => new { e.ProductCategoryId, e.PartyClassificationGroupId, e.FromDate });

                entity.ToTable("MARKET_INTEREST");

                entity.HasIndex(e => e.ProductCategoryId, "MARKET_INT_PCAT");

                entity.HasIndex(e => e.PartyClassificationGroupId, "MARKET_INT_PCGRP");

                entity.HasIndex(e => e.CreatedTxStamp, "MRKT_INTRST_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "MRKT_INTRST_TXSTMP");

                entity.Property(e => e.ProductCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CATEGORY_ID");

                entity.Property(e => e.PartyClassificationGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_CLASSIFICATION_GROUP_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.PartyClassificationGroup)
                    .WithMany(p => p.MarketInterests)
                    .HasForeignKey(d => d.PartyClassificationGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MARKET_INT_PCGRP");

                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.MarketInterests)
                    .HasForeignKey(d => d.ProductCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MARKET_INT_PCAT");
            });

            modelBuilder.Entity<MarketingCampaign>(entity =>
            {
                entity.ToTable("MARKETING_CAMPAIGN");

                entity.HasIndex(e => e.CurrencyUomId, "MKTGCPN_CUOM");

                entity.HasIndex(e => e.ParentCampaignId, "MKTGCPN_PRNT");

                entity.HasIndex(e => e.StatusId, "MKTGCPN_STS");

                entity.HasIndex(e => e.CreatedTxStamp, "MRKTNG_CMPN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "MRKTNG_CMPN_TXSTMP");

                entity.Property(e => e.MarketingCampaignId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MARKETING_CAMPAIGN_ID");

                entity.Property(e => e.ActualCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ACTUAL_COST");

                entity.Property(e => e.BudgetedCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BUDGETED_COST");

                entity.Property(e => e.CampaignName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CAMPAIGN_NAME");

                entity.Property(e => e.CampaignSummary)
                    .HasColumnType("text")
                    .HasColumnName("CAMPAIGN_SUMMARY");

                entity.Property(e => e.ConvertedLeads)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONVERTED_LEADS");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM_ID");

                entity.Property(e => e.EstimatedCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ESTIMATED_COST");

                entity.Property(e => e.ExpectedResponsePercent).HasColumnName("EXPECTED_RESPONSE_PERCENT");

                entity.Property(e => e.ExpectedRevenue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("EXPECTED_REVENUE");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_ACTIVE")
                    .IsFixedLength();

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.NumSent).HasColumnName("NUM_SENT");

                entity.Property(e => e.ParentCampaignId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_CAMPAIGN_ID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.CurrencyUom)
                    .WithMany(p => p.MarketingCampaigns)
                    .HasForeignKey(d => d.CurrencyUomId)
                    .HasConstraintName("MKTGCPN_CUOM");

                entity.HasOne(d => d.ParentCampaign)
                    .WithMany(p => p.InverseParentCampaign)
                    .HasForeignKey(d => d.ParentCampaignId)
                    .HasConstraintName("MKTGCPN_PRNT");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.MarketingCampaigns)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("MKTGCPN_STS");
            });

            modelBuilder.Entity<MarketingCampaignNote>(entity =>
            {
                entity.HasKey(e => new { e.MarketingCampaignId, e.NoteId });

                entity.ToTable("MARKETING_CAMPAIGN_NOTE");

                entity.HasIndex(e => e.MarketingCampaignId, "MKTGCPN_NOTE_CMPN");

                entity.HasIndex(e => e.NoteId, "MKTGCPN_NOTE_NOTE");

                entity.HasIndex(e => e.CreatedTxStamp, "MRKTG_CMN_NT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "MRKTG_CMN_NT_TXSTP");

                entity.Property(e => e.MarketingCampaignId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MARKETING_CAMPAIGN_ID");

                entity.Property(e => e.NoteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("NOTE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.MarketingCampaign)
                    .WithMany(p => p.MarketingCampaignNotes)
                    .HasForeignKey(d => d.MarketingCampaignId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MKTGCPN_NOTE_CMPN");

                entity.HasOne(d => d.Note)
                    .WithMany(p => p.MarketingCampaignNotes)
                    .HasForeignKey(d => d.NoteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MKTGCPN_NOTE_NOTE");
            });

            modelBuilder.Entity<MarketingCampaignPrice>(entity =>
            {
                entity.HasKey(e => new { e.MarketingCampaignId, e.ProductPriceRuleId, e.FromDate });

                entity.ToTable("MARKETING_CAMPAIGN_PRICE");

                entity.HasIndex(e => e.MarketingCampaignId, "MKTGCPN_PRICE_MC");

                entity.HasIndex(e => e.ProductPriceRuleId, "MKTGCPN_PRICE_PP");

                entity.HasIndex(e => e.CreatedTxStamp, "MRKG_CMN_PRC_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "MRKG_CMN_PRC_TXSTP");

                entity.Property(e => e.MarketingCampaignId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MARKETING_CAMPAIGN_ID");

                entity.Property(e => e.ProductPriceRuleId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PRICE_RULE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.MarketingCampaign)
                    .WithMany(p => p.MarketingCampaignPrices)
                    .HasForeignKey(d => d.MarketingCampaignId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MKTGCPN_PRICE_MC");

                entity.HasOne(d => d.ProductPriceRule)
                    .WithMany(p => p.MarketingCampaignPrices)
                    .HasForeignKey(d => d.ProductPriceRuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MKTGCPN_PRICE_PP");
            });

            modelBuilder.Entity<MarketingCampaignPromo>(entity =>
            {
                entity.HasKey(e => new { e.MarketingCampaignId, e.ProductPromoId, e.FromDate });

                entity.ToTable("MARKETING_CAMPAIGN_PROMO");

                entity.HasIndex(e => e.MarketingCampaignId, "MKTGCPN_PROMO_MC");

                entity.HasIndex(e => e.ProductPromoId, "MKTGCPN_PROMO_PP");

                entity.HasIndex(e => e.CreatedTxStamp, "MRKG_CMN_PRM_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "MRKG_CMN_PRM_TXSTP");

                entity.Property(e => e.MarketingCampaignId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MARKETING_CAMPAIGN_ID");

                entity.Property(e => e.ProductPromoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.MarketingCampaign)
                    .WithMany(p => p.MarketingCampaignPromos)
                    .HasForeignKey(d => d.MarketingCampaignId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MKTGCPN_PROMO_MC");

                entity.HasOne(d => d.ProductPromo)
                    .WithMany(p => p.MarketingCampaignPromos)
                    .HasForeignKey(d => d.ProductPromoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MKTGCPN_PROMO_PP");
            });

            modelBuilder.Entity<MarketingCampaignRole>(entity =>
            {
                entity.HasKey(e => new { e.MarketingCampaignId, e.PartyId, e.RoleTypeId, e.FromDate });

                entity.ToTable("MARKETING_CAMPAIGN_ROLE");

                entity.HasIndex(e => e.MarketingCampaignId, "MKTGCPN_ROLE_MC");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "MKTGCPN_ROLE_PR");

                entity.HasIndex(e => e.CreatedTxStamp, "MRKTG_CMN_RL_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "MRKTG_CMN_RL_TXSTP");

                entity.Property(e => e.MarketingCampaignId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MARKETING_CAMPAIGN_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.MarketingCampaign)
                    .WithMany(p => p.MarketingCampaignRoles)
                    .HasForeignKey(d => d.MarketingCampaignId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MKTGCPN_ROLE_MC");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.MarketingCampaignRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MKTGCPN_ROLE_PR");
            });

            modelBuilder.Entity<MetaDataPredicate>(entity =>
            {
                entity.ToTable("META_DATA_PREDICATE");

                entity.HasIndex(e => e.CreatedTxStamp, "MT_DT_PRDCT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "MT_DT_PRDCT_TXSTMP");

                entity.Property(e => e.MetaDataPredicateId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("META_DATA_PREDICATE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<MimeType>(entity =>
            {
                entity.ToTable("MIME_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "MIME_TYPE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "MIME_TYPE_TXSTMP");

                entity.Property(e => e.MimeTypeId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("MIME_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<MimeTypeHtmlTemplate>(entity =>
            {
                entity.HasKey(e => e.MimeTypeId);

                entity.ToTable("MIME_TYPE_HTML_TEMPLATE");

                entity.HasIndex(e => e.MimeTypeId, "MIMETYPE_TPL_MT");

                entity.HasIndex(e => e.CreatedTxStamp, "MM_TP_HTL_TMT_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "MM_TP_HTL_TMT_TXSP");

                entity.Property(e => e.MimeTypeId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("MIME_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.TemplateLocation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TEMPLATE_LOCATION");

                entity.HasOne(d => d.MimeType)
                    .WithOne(p => p.MimeTypeHtmlTemplate)
                    .HasForeignKey<MimeTypeHtmlTemplate>(d => d.MimeTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MIMETYPE_TPL_MT");
            });

            modelBuilder.Entity<MrpEvent>(entity =>
            {
                entity.HasKey(e => new { e.MrpId, e.ProductId, e.EventDate, e.MrpEventTypeId });

                entity.ToTable("MRP_EVENT");

                entity.HasIndex(e => e.FacilityId, "MRPEV_FAC");

                entity.HasIndex(e => e.ProductId, "MRPEV_PROD");

                entity.HasIndex(e => e.MrpEventTypeId, "MRPEV_TYP");

                entity.HasIndex(e => e.CreatedTxStamp, "MRP_EVENT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "MRP_EVENT_TXSTMP");

                entity.Property(e => e.MrpId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MRP_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.EventDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EVENT_DATE");

                entity.Property(e => e.MrpEventTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MRP_EVENT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.EventName)
                    .HasColumnType("text")
                    .HasColumnName("EVENT_NAME");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.FacilityIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID_TO");

                entity.Property(e => e.IsLate)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_LATE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.MrpEvents)
                    .HasForeignKey(d => d.FacilityId)
                    .HasConstraintName("MRPEV_FAC");

                entity.HasOne(d => d.MrpEventType)
                    .WithMany(p => p.MrpEvents)
                    .HasForeignKey(d => d.MrpEventTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MRPEV_TYP");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.MrpEvents)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MRPEV_PROD");
            });

            modelBuilder.Entity<MrpEventType>(entity =>
            {
                entity.ToTable("MRP_EVENT_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "MRP_EVNT_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "MRP_EVNT_TP_TXSTMP");

                entity.Property(e => e.MrpEventTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MRP_EVENT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<NeedType>(entity =>
            {
                entity.ToTable("NEED_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "NEED_TYPE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "NEED_TYPE_TXSTMP");

                entity.Property(e => e.NeedTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("NEED_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<NoteDatum>(entity =>
            {
                entity.HasKey(e => e.NoteId);

                entity.ToTable("NOTE_DATA");

                entity.HasIndex(e => e.NoteParty, "NOTE_DATA_PTY");

                entity.HasIndex(e => e.CreatedTxStamp, "NOTE_DATA_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "NOTE_DATA_TXSTMP");

                entity.HasIndex(e => e.NoteName, "systemInfo");

                entity.Property(e => e.NoteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("NOTE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MoreInfoItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MORE_INFO_ITEM_ID");

                entity.Property(e => e.MoreInfoItemName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MORE_INFO_ITEM_NAME");

                entity.Property(e => e.MoreInfoUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MORE_INFO_URL");

                entity.Property(e => e.NoteDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("NOTE_DATE_TIME");

                entity.Property(e => e.NoteInfo)
                    .HasColumnType("text")
                    .HasColumnName("NOTE_INFO");

                entity.Property(e => e.NoteName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NOTE_NAME");

                entity.Property(e => e.NoteParty)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("NOTE_PARTY");

                entity.HasOne(d => d.NotePartyNavigation)
                    .WithMany(p => p.NoteData)
                    .HasForeignKey(d => d.NoteParty)
                    .HasConstraintName("NOTE_DATA_PTY");
            });

            modelBuilder.Entity<OrderAdjustment>(entity =>
            {
                entity.ToTable("ORDER_ADJUSTMENT");

                entity.HasIndex(e => e.OverrideGlAccountId, "ORDER_ADJ_OGLA");

                entity.HasIndex(e => e.OrderId, "ORDER_ADJ_OHEAD");

                entity.HasIndex(e => e.PrimaryGeoId, "ORDER_ADJ_PRGEO");

                entity.HasIndex(e => e.ProductPromoId, "ORDER_ADJ_PROMO");

                entity.HasIndex(e => e.SecondaryGeoId, "ORDER_ADJ_SCGEO");

                entity.HasIndex(e => e.TaxAuthorityRateSeqId, "ORDER_ADJ_TARP");

                entity.HasIndex(e => new { e.TaxAuthGeoId, e.TaxAuthPartyId }, "ORDER_ADJ_TXA");

                entity.HasIndex(e => e.OrderAdjustmentTypeId, "ORDER_ADJ_TYPE");

                entity.HasIndex(e => e.CreatedByUserLogin, "ORDER_ADJ_USERL");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_ADJSTMT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_ADJSTMT_TXSTMP");

                entity.Property(e => e.OrderAdjustmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ADJUSTMENT_ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.AmountAlreadyIncluded)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("AMOUNT_ALREADY_INCLUDED");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CorrespondingProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CORRESPONDING_PRODUCT_ID");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CustomerReferenceId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_REFERENCE_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.ExemptAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("EXEMPT_AMOUNT");

                entity.Property(e => e.IncludeInShipping)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INCLUDE_IN_SHIPPING")
                    .IsFixedLength();

                entity.Property(e => e.IncludeInTax)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INCLUDE_IN_TAX")
                    .IsFixedLength();

                entity.Property(e => e.IsManual)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_MANUAL")
                    .IsFixedLength();

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OrderAdjustmentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ADJUSTMENT_TYPE_ID");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.OriginalAdjustmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORIGINAL_ADJUSTMENT_ID");

                entity.Property(e => e.OverrideGlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("OVERRIDE_GL_ACCOUNT_ID");

                entity.Property(e => e.PrimaryGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_GEO_ID");

                entity.Property(e => e.ProductFeatureId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_ID");

                entity.Property(e => e.ProductPromoActionSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_ACTION_SEQ_ID");

                entity.Property(e => e.ProductPromoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_ID");

                entity.Property(e => e.ProductPromoRuleId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_RULE_ID");

                entity.Property(e => e.RecurringAmount)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("RECURRING_AMOUNT");

                entity.Property(e => e.SecondaryGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SECONDARY_GEO_ID");

                entity.Property(e => e.ShipGroupSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIP_GROUP_SEQ_ID");

                entity.Property(e => e.SourcePercentage)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("SOURCE_PERCENTAGE");

                entity.Property(e => e.SourceReferenceId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SOURCE_REFERENCE_ID");

                entity.Property(e => e.TaxAuthGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTH_GEO_ID");

                entity.Property(e => e.TaxAuthPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTH_PARTY_ID");

                entity.Property(e => e.TaxAuthorityRateSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTHORITY_RATE_SEQ_ID");

                entity.HasOne(d => d.CreatedByUserLoginNavigation)
                    .WithMany(p => p.OrderAdjustments)
                    .HasForeignKey(d => d.CreatedByUserLogin)
                    .HasConstraintName("ORDER_ADJ_USERL");

                entity.HasOne(d => d.OrderAdjustmentType)
                    .WithMany(p => p.OrderAdjustments)
                    .HasForeignKey(d => d.OrderAdjustmentTypeId)
                    .HasConstraintName("ORDER_ADJ_TYPE");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderAdjustments)
                    .HasForeignKey(d => d.OrderId)
                    .HasConstraintName("ORDER_ADJ_OHEAD");

                entity.HasOne(d => d.OverrideGlAccount)
                    .WithMany(p => p.OrderAdjustments)
                    .HasForeignKey(d => d.OverrideGlAccountId)
                    .HasConstraintName("ORDER_ADJ_OGLA");

                entity.HasOne(d => d.PrimaryGeo)
                    .WithMany(p => p.OrderAdjustmentPrimaryGeos)
                    .HasForeignKey(d => d.PrimaryGeoId)
                    .HasConstraintName("ORDER_ADJ_PRGEO");

                entity.HasOne(d => d.ProductPromo)
                    .WithMany(p => p.OrderAdjustments)
                    .HasForeignKey(d => d.ProductPromoId)
                    .HasConstraintName("ORDER_ADJ_PROMO");

                entity.HasOne(d => d.SecondaryGeo)
                    .WithMany(p => p.OrderAdjustmentSecondaryGeos)
                    .HasForeignKey(d => d.SecondaryGeoId)
                    .HasConstraintName("ORDER_ADJ_SCGEO");

                entity.HasOne(d => d.TaxAuthorityRateSeq)
                    .WithMany(p => p.OrderAdjustments)
                    .HasForeignKey(d => d.TaxAuthorityRateSeqId)
                    .HasConstraintName("ORDER_ADJ_TARP");

                entity.HasOne(d => d.TaxAuth)
                    .WithMany(p => p.OrderAdjustments)
                    .HasForeignKey(d => new { d.TaxAuthGeoId, d.TaxAuthPartyId })
                    .HasConstraintName("ORDER_ADJ_TXA");
            });

            modelBuilder.Entity<OrderAdjustmentAttribute>(entity =>
            {
                entity.HasKey(e => new { e.OrderAdjustmentId, e.AttrName });

                entity.ToTable("ORDER_ADJUSTMENT_ATTRIBUTE");

                entity.HasIndex(e => e.OrderAdjustmentId, "ORDER_ADJ_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_ADJST_ATT_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_ADJST_ATT_TXSP");

                entity.Property(e => e.OrderAdjustmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ADJUSTMENT_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.OrderAdjustment)
                    .WithMany(p => p.OrderAdjustmentAttributes)
                    .HasForeignKey(d => d.OrderAdjustmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ADJ_ATTR");
            });

            modelBuilder.Entity<OrderAdjustmentBilling>(entity =>
            {
                entity.HasKey(e => new { e.OrderAdjustmentId, e.InvoiceId, e.InvoiceItemSeqId });

                entity.ToTable("ORDER_ADJUSTMENT_BILLING");

                entity.HasIndex(e => new { e.InvoiceId, e.InvoiceItemSeqId }, "ORDER_ADJBLNG_IITM");

                entity.HasIndex(e => e.OrderAdjustmentId, "ORDER_ADJBLNG_OA");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_ADJST_BLG_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_ADJST_BLG_TXSP");

                entity.Property(e => e.OrderAdjustmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ADJUSTMENT_ID");

                entity.Property(e => e.InvoiceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ID");

                entity.Property(e => e.InvoiceItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ITEM_SEQ_ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.OrderAdjustment)
                    .WithMany(p => p.OrderAdjustmentBillings)
                    .HasForeignKey(d => d.OrderAdjustmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ADJBLNG_OA");

                entity.HasOne(d => d.InvoiceI)
                    .WithMany(p => p.OrderAdjustmentBillings)
                    .HasForeignKey(d => new { d.InvoiceId, d.InvoiceItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ADJBLNG_IITM");
            });

            modelBuilder.Entity<OrderAdjustmentType>(entity =>
            {
                entity.ToTable("ORDER_ADJUSTMENT_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "ORDER_ADJ_TYPPAR");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_ADJSTT_TP_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_ADJSTT_TP_TXSP");

                entity.Property(e => e.OrderAdjustmentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ADJUSTMENT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("ORDER_ADJ_TYPPAR");
            });

            modelBuilder.Entity<OrderAdjustmentTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.OrderAdjustmentTypeId, e.AttrName });

                entity.ToTable("ORDER_ADJUSTMENT_TYPE_ATTR");

                entity.HasIndex(e => e.OrderAdjustmentTypeId, "ORDER_ADJ_TYPATTR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_ADJT_TP_ATR_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_ADJT_TP_ATR_TS");

                entity.Property(e => e.OrderAdjustmentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ADJUSTMENT_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.OrderAdjustmentType)
                    .WithMany(p => p.OrderAdjustmentTypeAttrs)
                    .HasForeignKey(d => d.OrderAdjustmentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ADJ_TYPATTR");
            });

            modelBuilder.Entity<OrderAttribute>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.AttrName });

                entity.ToTable("ORDER_ATTRIBUTE");

                entity.HasIndex(e => e.OrderId, "ORDER_ATTR_HDR");

                entity.HasIndex(e => e.CreatedTxStamp, "ORDR_ATTRBT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORDR_ATTRBT_TXSTMP");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderAttributes)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ATTR_HDR");
            });

            modelBuilder.Entity<OrderBlacklist>(entity =>
            {
                entity.HasKey(e => new { e.BlacklistString, e.OrderBlacklistTypeId });

                entity.ToTable("ORDER_BLACKLIST");

                entity.HasIndex(e => e.OrderBlacklistTypeId, "ORDER_BKL_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "ORDR_BLCKLT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORDR_BLCKLT_TXSTMP");

                entity.Property(e => e.BlacklistString)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("BLACKLIST_STRING");

                entity.Property(e => e.OrderBlacklistTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_BLACKLIST_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.OrderBlacklistType)
                    .WithMany(p => p.OrderBlacklists)
                    .HasForeignKey(d => d.OrderBlacklistTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_BKL_TYPE");
            });

            modelBuilder.Entity<OrderBlacklistType>(entity =>
            {
                entity.ToTable("ORDER_BLACKLIST_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_BLCKT_TP_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_BLCKT_TP_TXSTP");

                entity.Property(e => e.OrderBlacklistTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_BLACKLIST_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<OrderContactMech>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.ContactMechPurposeTypeId, e.ContactMechId });

                entity.ToTable("ORDER_CONTACT_MECH");

                entity.HasIndex(e => e.ContactMechId, "ORDER_CMECH_CM");

                entity.HasIndex(e => e.ContactMechPurposeTypeId, "ORDER_CMECH_CMPT");

                entity.HasIndex(e => e.OrderId, "ORDER_CMECH_HDR");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_CNTT_MCH_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_CNTT_MCH_TXSTP");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.ContactMechPurposeTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_PURPOSE_TYPE_ID");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.OrderContactMeches)
                    .HasForeignKey(d => d.ContactMechId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_CMECH_CM");

                entity.HasOne(d => d.ContactMechPurposeType)
                    .WithMany(p => p.OrderContactMeches)
                    .HasForeignKey(d => d.ContactMechPurposeTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_CMECH_CMPT");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderContactMeches)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_CMECH_HDR");
            });

            modelBuilder.Entity<OrderContent>(entity =>
            {
                entity.HasKey(e => new { e.ContentId, e.OrderId, e.OrderItemSeqId, e.OrderContentTypeId, e.FromDate });

                entity.ToTable("ORDER_CONTENT");

                entity.HasIndex(e => e.CreatedTxStamp, "ORDR_CNTNT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORDR_CNTNT_TXSTMP");

                entity.HasIndex(e => e.ContentId, "ORD_CNT_CNT");

                entity.HasIndex(e => e.OrderId, "ORD_CNT_PROD");

                entity.HasIndex(e => e.OrderContentTypeId, "ORD_CNT_TYPE");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.OrderContentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_CONTENT_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.OrderContents)
                    .HasForeignKey(d => d.ContentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORD_CNT_CNT");

                entity.HasOne(d => d.OrderContentType)
                    .WithMany(p => p.OrderContents)
                    .HasForeignKey(d => d.OrderContentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORD_CNT_TYPE");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderContents)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORD_CNT_PROD");
            });

            modelBuilder.Entity<OrderContentType>(entity =>
            {
                entity.ToTable("ORDER_CONTENT_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "ORDCT_TYP_PARENT");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_CNTT_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_CNTT_TP_TXSTMP");

                entity.Property(e => e.OrderContentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_CONTENT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("ORDCT_TYP_PARENT");
            });

            modelBuilder.Entity<OrderDeliverySchedule>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.OrderItemSeqId });

                entity.ToTable("ORDER_DELIVERY_SCHEDULE");

                entity.HasIndex(e => e.OrderId, "ORDER_DELSCH_OHDR");

                entity.HasIndex(e => e.StatusId, "ORDER_DELSCH_STTS");

                entity.HasIndex(e => e.TotalCubicUomId, "ORDER_DELSCH_TCUOM");

                entity.HasIndex(e => e.TotalWeightUomId, "ORDER_DELSCH_TWUOM");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_DLR_SCHL_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_DLR_SCHL_TXSTP");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.Cartons).HasColumnName("CARTONS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.EstimatedReadyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ESTIMATED_READY_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SkidsPallets).HasColumnName("SKIDS_PALLETS");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.TotalCubicSize)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("TOTAL_CUBIC_SIZE");

                entity.Property(e => e.TotalCubicUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TOTAL_CUBIC_UOM_ID");

                entity.Property(e => e.TotalWeight)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("TOTAL_WEIGHT");

                entity.Property(e => e.TotalWeightUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TOTAL_WEIGHT_UOM_ID");

                entity.Property(e => e.UnitsPieces)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("UNITS_PIECES");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderDeliverySchedules)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_DELSCH_OHDR");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.OrderDeliverySchedules)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("ORDER_DELSCH_STTS");

                entity.HasOne(d => d.TotalCubicUom)
                    .WithMany(p => p.OrderDeliveryScheduleTotalCubicUoms)
                    .HasForeignKey(d => d.TotalCubicUomId)
                    .HasConstraintName("ORDER_DELSCH_TCUOM");

                entity.HasOne(d => d.TotalWeightUom)
                    .WithMany(p => p.OrderDeliveryScheduleTotalWeightUoms)
                    .HasForeignKey(d => d.TotalWeightUomId)
                    .HasConstraintName("ORDER_DELSCH_TWUOM");
            });

            modelBuilder.Entity<OrderDenylist>(entity =>
            {
                entity.HasKey(e => new { e.DenylistString, e.OrderDenylistTypeId });

                entity.ToTable("ORDER_DENYLIST");

                entity.HasIndex(e => e.OrderDenylistTypeId, "ORDER_DNY_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "ORDR_DNLST_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORDR_DNLST_TXSTMP");

                entity.Property(e => e.DenylistString)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DENYLIST_STRING");

                entity.Property(e => e.OrderDenylistTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_DENYLIST_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.OrderDenylistType)
                    .WithMany(p => p.OrderDenylists)
                    .HasForeignKey(d => d.OrderDenylistTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_DNY_TYPE");
            });

            modelBuilder.Entity<OrderDenylistType>(entity =>
            {
                entity.ToTable("ORDER_DENYLIST_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_DNLT_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_DNLT_TP_TXSTMP");

                entity.Property(e => e.OrderDenylistTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_DENYLIST_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<OrderHeader>(entity =>
            {
                entity.HasKey(e => e.OrderId);

                entity.ToTable("ORDER_HEADER");

                entity.HasIndex(e => e.ExternalId, "ORDEREXT_ID_IDX");

                entity.HasIndex(e => e.AutoOrderShoppingListId, "ORDER_HDR_AOSHLST");

                entity.HasIndex(e => e.BillingAccountId, "ORDER_HDR_BACCT");

                entity.HasIndex(e => e.CreatedBy, "ORDER_HDR_CBUL");

                entity.HasIndex(e => e.CurrencyUom, "ORDER_HDR_CUOM");

                entity.HasIndex(e => e.OriginFacilityId, "ORDER_HDR_OFAC");

                entity.HasIndex(e => e.ProductStoreId, "ORDER_HDR_PDSTR");

                entity.HasIndex(e => e.SalesChannelEnumId, "ORDER_HDR_SCENUM");

                entity.HasIndex(e => e.StatusId, "ORDER_HDR_STTS");

                entity.HasIndex(e => e.SyncStatusId, "ORDER_HDR_SYST");

                entity.HasIndex(e => e.OrderTypeId, "ORDER_HDR_TYPE");

                entity.HasIndex(e => e.WebSiteId, "ORDER_HDR_WS");

                entity.HasIndex(e => e.CreatedTxStamp, "ORDR_HDR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORDR_HDR_TXSTMP");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.AgreementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ID");

                entity.Property(e => e.AutoOrderShoppingListId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AUTO_ORDER_SHOPPING_LIST_ID");

                entity.Property(e => e.BillingAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_ACCOUNT_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrencyUom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM");

                entity.Property(e => e.EntryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ENTRY_DATE");

                entity.Property(e => e.ExternalId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EXTERNAL_ID");

                entity.Property(e => e.FirstAttemptOrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIRST_ATTEMPT_ORDER_ID");
                  
                 entity.Property(e => e.VehicleId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VEHICLE_ID");
                    
                entity.Property(e => e.CustomerRemarks)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_REMARKS");
                    
                entity.Property(e => e.InternalRemarks)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("INTERNAL_REMARKS");

                entity.Property(e => e.GrandTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("GRAND_TOTAL");

                entity.Property(e => e.InternalCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INTERNAL_CODE");

                entity.Property(e => e.InvoicePerShipment)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_PER_SHIPMENT")
                    .IsFixedLength();

                entity.Property(e => e.IsRushOrder)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_RUSH_ORDER")
                    .IsFixedLength();

                entity.Property(e => e.IsViewed)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_VIEWED")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.NeedsInventoryIssuance)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NEEDS_INVENTORY_ISSUANCE")
                    .IsFixedLength();

                entity.Property(e => e.OrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ORDER_DATE");

                entity.Property(e => e.OrderName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NAME");

                entity.Property(e => e.OrderTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE_ID");

                entity.Property(e => e.OriginFacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORIGIN_FACILITY_ID");

                entity.Property(e => e.PickSheetPrintedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PICK_SHEET_PRINTED_DATE");

                entity.Property(e => e.Priority)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRIORITY")
                    .IsFixedLength();

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.RemainingSubTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("REMAINING_SUB_TOTAL");

                entity.Property(e => e.SalesChannelEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SALES_CHANNEL_ENUM_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.SyncStatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SYNC_STATUS_ID");

                entity.Property(e => e.TerminalId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TERMINAL_ID");

                entity.Property(e => e.TransactionId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TRANSACTION_ID");

                entity.Property(e => e.VisitId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VISIT_ID");

                entity.Property(e => e.WebSiteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WEB_SITE_ID");
                    
                entity.Property(e => e.CurrentMileage).HasColumnName("CURRENT_MILEAGE");
                

                entity.HasOne(d => d.AutoOrderShoppingList)
                    .WithMany(p => p.OrderHeaders)
                    .HasForeignKey(d => d.AutoOrderShoppingListId)
                    .HasConstraintName("ORDER_HDR_AOSHLST");

                entity.HasOne(d => d.BillingAccount)
                    .WithMany(p => p.OrderHeaders)
                    .HasForeignKey(d => d.BillingAccountId)
                    .HasConstraintName("ORDER_HDR_BACCT");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.OrderHeaders)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("ORDER_HDR_CBUL");

                entity.HasOne(d => d.CurrencyUomNavigation)
                    .WithMany(p => p.OrderHeaders)
                    .HasForeignKey(d => d.CurrencyUom)
                    .HasConstraintName("ORDER_HDR_CUOM");

                entity.HasOne(d => d.OrderType)
                    .WithMany(p => p.OrderHeaders)
                    .HasForeignKey(d => d.OrderTypeId)
                    .HasConstraintName("ORDER_HDR_TYPE");

                entity.HasOne(d => d.OriginFacility)
                    .WithMany(p => p.OrderHeaders)
                    .HasForeignKey(d => d.OriginFacilityId)
                    .HasConstraintName("ORDER_HDR_OFAC");

                entity.HasOne(d => d.ProductStore)
                    .WithMany(p => p.OrderHeaders)
                    .HasForeignKey(d => d.ProductStoreId)
                    .HasConstraintName("ORDER_HDR_PDSTR");

                entity.HasOne(d => d.SalesChannelEnum)
                    .WithMany(p => p.OrderHeaders)
                    .HasForeignKey(d => d.SalesChannelEnumId)
                    .HasConstraintName("ORDER_HDR_SCENUM");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.OrderHeaderStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("ORDER_HDR_STTS");

                entity.HasOne(d => d.SyncStatus)
                    .WithMany(p => p.OrderHeaderSyncStatuses)
                    .HasForeignKey(d => d.SyncStatusId)
                    .HasConstraintName("ORDER_HDR_SYST");

                entity.HasOne(d => d.WebSite)
                    .WithMany(p => p.OrderHeaders)
                    .HasForeignKey(d => d.WebSiteId)
                    .HasConstraintName("ORDER_HDR_WS");
                    
                    entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("ORDER_VEHICLE");
            });

            modelBuilder.Entity<OrderHeaderNote>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.NoteId });

                entity.ToTable("ORDER_HEADER_NOTE");

                entity.HasIndex(e => e.OrderId, "ORDER_HDRNT_HDR");

                entity.HasIndex(e => e.NoteId, "ORDER_HDRNT_NOTE");

                entity.HasIndex(e => e.CreatedTxStamp, "ORDR_HDR_NT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORDR_HDR_NT_TXSTMP");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.NoteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("NOTE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.InternalNote)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INTERNAL_NOTE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Note)
                    .WithMany(p => p.OrderHeaderNotes)
                    .HasForeignKey(d => d.NoteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_HDRNT_NOTE");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderHeaderNotes)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_HDRNT_HDR");
            });

            modelBuilder.Entity<OrderHeaderWorkEffort>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.WorkEffortId });

                entity.ToTable("ORDER_HEADER_WORK_EFFORT");

                entity.HasIndex(e => e.OrderId, "ORDERHDWE_OH");

                entity.HasIndex(e => e.WorkEffortId, "ORDERHDWE_WEFF");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_HDR_WRK_EFT_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_HDR_WRK_EFT_TS");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderHeaderWorkEfforts)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDERHDWE_OH");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.OrderHeaderWorkEfforts)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDERHDWE_WEFF");
            });

            modelBuilder.Entity<OrderItem>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.OrderItemSeqId });

                entity.ToTable("ORDER_ITEM");

                entity.HasIndex(e => e.DontCancelSetUserLogin, "ORDER_ITEM_DCUL");

                entity.HasIndex(e => e.FromInventoryItemId, "ORDER_ITEM_FMINV");

                entity.HasIndex(e => e.OrderId, "ORDER_ITEM_HDR");

                entity.HasIndex(e => new { e.OrderId, e.OrderItemGroupSeqId }, "ORDER_ITEM_ITGRP");

                entity.HasIndex(e => e.OverrideGlAccountId, "ORDER_ITEM_OGLA");

                entity.HasIndex(e => e.OrderItemTypeId, "ORDER_ITEM_ORTYP");

                entity.HasIndex(e => e.ProductId, "ORDER_ITEM_PRODUCT");

                entity.HasIndex(e => new { e.QuoteId, e.QuoteItemSeqId }, "ORDER_ITEM_QUIT");

                entity.HasIndex(e => e.RecurringFreqUomId, "ORDER_ITEM_RFUOM");

                entity.HasIndex(e => e.SalesOpportunityId, "ORDER_ITEM_SLSOPP");

                entity.HasIndex(e => e.StatusId, "ORDER_ITEM_STTS");

                entity.HasIndex(e => e.SyncStatusId, "ORDER_ITEM_SYST");

                entity.HasIndex(e => e.CreatedTxStamp, "ORDER_ITEM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORDER_ITEM_TXSTMP");

                entity.HasIndex(e => e.ChangeByUserLoginId, "ORDER_ITEM_USRLGN");

                entity.HasIndex(e => e.ExternalId, "ORDITMEXT_ID_IDX");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");
                    
                entity.Property(e => e.ParentOrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("Parent_ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.AutoCancelDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUTO_CANCEL_DATE");

                entity.Property(e => e.BudgetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ID");

                entity.Property(e => e.BudgetItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ITEM_SEQ_ID");

                entity.Property(e => e.CancelBackOrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CANCEL_BACK_ORDER_DATE");

                entity.Property(e => e.CancelQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("CANCEL_QUANTITY");

                entity.Property(e => e.ChangeByUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CorrespondingPoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CORRESPONDING_PO_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DeploymentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEPLOYMENT_ID");

                entity.Property(e => e.DontCancelSetDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DONT_CANCEL_SET_DATE");

                entity.Property(e => e.DontCancelSetUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DONT_CANCEL_SET_USER_LOGIN");

                entity.Property(e => e.EstimatedDeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ESTIMATED_DELIVERY_DATE");

                entity.Property(e => e.EstimatedShipDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ESTIMATED_SHIP_DATE");

                entity.Property(e => e.ExternalId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EXTERNAL_ID");

                entity.Property(e => e.FromInventoryItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FROM_INVENTORY_ITEM_ID");

                entity.Property(e => e.IsItemGroupPrimary)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_ITEM_GROUP_PRIMARY")
                    .IsFixedLength();

                entity.Property(e => e.IsModifiedPrice)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_MODIFIED_PRICE")
                    .IsFixedLength();

                entity.Property(e => e.IsPromo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_PROMO")
                    .IsFixedLength();

                entity.Property(e => e.ItemDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OrderItemGroupSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_GROUP_SEQ_ID");

                entity.Property(e => e.OrderItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_TYPE_ID");

                entity.Property(e => e.OverrideGlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("OVERRIDE_GL_ACCOUNT_ID");

                entity.Property(e => e.ProdCatalogId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PROD_CATALOG_ID");

                entity.Property(e => e.ProductCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CATEGORY_ID");

                entity.Property(e => e.ProductFeatureId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.QuoteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_ID");

                entity.Property(e => e.QuoteItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_ITEM_SEQ_ID");

                entity.Property(e => e.RecurringFreqUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RECURRING_FREQ_UOM_ID");

                entity.Property(e => e.ReserveAfterDate)
                    .HasColumnType("datetime")
                    .HasColumnName("RESERVE_AFTER_DATE");

                entity.Property(e => e.SalesOpportunityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SALES_OPPORTUNITY_ID");

                entity.Property(e => e.SelectedAmount)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("SELECTED_AMOUNT");

                entity.Property(e => e.ShipAfterDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SHIP_AFTER_DATE");

                entity.Property(e => e.ShipBeforeDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SHIP_BEFORE_DATE");

                entity.Property(e => e.ShoppingListId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHOPPING_LIST_ID");

                entity.Property(e => e.ShoppingListItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHOPPING_LIST_ITEM_SEQ_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.SubscriptionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SUBSCRIPTION_ID");

                entity.Property(e => e.SupplierProductId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_PRODUCT_ID");

                entity.Property(e => e.SyncStatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SYNC_STATUS_ID");

                entity.Property(e => e.UnitAverageCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("UNIT_AVERAGE_COST");

                entity.Property(e => e.UnitListPrice)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("UNIT_LIST_PRICE");

                entity.Property(e => e.UnitPrice)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("UNIT_PRICE");

                entity.Property(e => e.UnitRecurringPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("UNIT_RECURRING_PRICE");

                entity.HasOne(d => d.ChangeByUserLogin)
                    .WithMany(p => p.OrderItemChangeByUserLogins)
                    .HasForeignKey(d => d.ChangeByUserLoginId)
                    .HasConstraintName("ORDER_ITEM_USRLGN");

                entity.HasOne(d => d.DontCancelSetUserLoginNavigation)
                    .WithMany(p => p.OrderItemDontCancelSetUserLoginNavigations)
                    .HasForeignKey(d => d.DontCancelSetUserLogin)
                    .HasConstraintName("ORDER_ITEM_DCUL");

                entity.HasOne(d => d.FromInventoryItem)
                    .WithMany(p => p.OrderItems)
                    .HasForeignKey(d => d.FromInventoryItemId)
                    .HasConstraintName("ORDER_ITEM_FMINV");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderItems)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ITEM_HDR");

                entity.HasOne(d => d.OrderItemType)
                    .WithMany(p => p.OrderItems)
                    .HasForeignKey(d => d.OrderItemTypeId)
                    .HasConstraintName("ORDER_ITEM_ORTYP");

                entity.HasOne(d => d.OverrideGlAccount)
                    .WithMany(p => p.OrderItems)
                    .HasForeignKey(d => d.OverrideGlAccountId)
                    .HasConstraintName("ORDER_ITEM_OGLA");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.OrderItems)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("ORDER_ITEM_PRODUCT");

                entity.HasOne(d => d.RecurringFreqUom)
                    .WithMany(p => p.OrderItems)
                    .HasForeignKey(d => d.RecurringFreqUomId)
                    .HasConstraintName("ORDER_ITEM_RFUOM");

                entity.HasOne(d => d.SalesOpportunity)
                    .WithMany(p => p.OrderItems)
                    .HasForeignKey(d => d.SalesOpportunityId)
                    .HasConstraintName("ORDER_ITEM_SLSOPP");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.OrderItemStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("ORDER_ITEM_STTS");

                entity.HasOne(d => d.SyncStatus)
                    .WithMany(p => p.OrderItemSyncStatuses)
                    .HasForeignKey(d => d.SyncStatusId)
                    .HasConstraintName("ORDER_ITEM_SYST");

                entity.HasOne(d => d.OrderI)
                    .WithMany(p => p.OrderItems)
                    .HasForeignKey(d => new { d.OrderId, d.OrderItemGroupSeqId })
                    .HasConstraintName("ORDER_ITEM_ITGRP");

                entity.HasOne(d => d.QuoteI)
                    .WithMany(p => p.OrderItems)
                    .HasForeignKey(d => new { d.QuoteId, d.QuoteItemSeqId })
                    .HasConstraintName("ORDER_ITEM_QUIT");
            });

            modelBuilder.Entity<OrderItemAssoc>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.OrderItemSeqId, e.ShipGroupSeqId, e.ToOrderId, e.ToOrderItemSeqId, e.ToShipGroupSeqId, e.OrderItemAssocTypeId });

                entity.ToTable("ORDER_ITEM_ASSOC");

                entity.HasIndex(e => e.OrderId, "ORDER_ITASS_FRHD");

                entity.HasIndex(e => e.ToOrderId, "ORDER_ITASS_TOHD");

                entity.HasIndex(e => e.OrderItemAssocTypeId, "ORDER_ITASS_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_ITM_ASC_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_ITM_ASC_TXSTMP");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.ShipGroupSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIP_GROUP_SEQ_ID");

                entity.Property(e => e.ToOrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TO_ORDER_ID");

                entity.Property(e => e.ToOrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TO_ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.ToShipGroupSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TO_SHIP_GROUP_SEQ_ID");

                entity.Property(e => e.OrderItemAssocTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_ASSOC_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderItemAssocOrders)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ITASS_FRHD");

                entity.HasOne(d => d.OrderItemAssocType)
                    .WithMany(p => p.OrderItemAssocs)
                    .HasForeignKey(d => d.OrderItemAssocTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ITASS_TYPE");

                entity.HasOne(d => d.ToOrder)
                    .WithMany(p => p.OrderItemAssocToOrders)
                    .HasForeignKey(d => d.ToOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ITASS_TOHD");
            });

            modelBuilder.Entity<OrderItemAssocType>(entity =>
            {
                entity.ToTable("ORDER_ITEM_ASSOC_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "ORDER_ITAS_TYPPAR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_ITM_ASC_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_ITM_ASC_TP_TXS");

                entity.Property(e => e.OrderItemAssocTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_ASSOC_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("ORDER_ITAS_TYPPAR");
            });

            modelBuilder.Entity<OrderItemAttribute>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.OrderItemSeqId, e.AttrName });

                entity.ToTable("ORDER_ITEM_ATTRIBUTE");

                entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId }, "ORDER_ITEM_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_ITM_ATTT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_ITM_ATTT_TXSTP");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.OrderI)
                    .WithMany(p => p.OrderItemAttributes)
                    .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ITEM_ATTR");
            });

            modelBuilder.Entity<OrderItemBilling>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.OrderItemSeqId, e.InvoiceId, e.InvoiceItemSeqId });

                entity.ToTable("ORDER_ITEM_BILLING");

                entity.HasIndex(e => e.ItemIssuanceId, "ORDER_ITBLNG_IISS");

                entity.HasIndex(e => new { e.InvoiceId, e.InvoiceItemSeqId }, "ORDER_ITBLNG_IITM");

                entity.HasIndex(e => e.OrderId, "ORDER_ITBLNG_OHDR");

                entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId }, "ORDER_ITBLNG_OITM");

                entity.HasIndex(e => e.ShipmentReceiptId, "ORDER_ITBL_SHIPRCP");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_ITM_BLLG_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_ITM_BLLG_TXSTP");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.InvoiceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ID");

                entity.Property(e => e.InvoiceItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ITEM_SEQ_ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.ItemIssuanceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_ISSUANCE_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.ShipmentReceiptId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_RECEIPT_ID");

                entity.HasOne(d => d.ItemIssuance)
                    .WithMany(p => p.OrderItemBillings)
                    .HasForeignKey(d => d.ItemIssuanceId)
                    .HasConstraintName("ORDER_ITBLNG_IISS");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderItemBillings)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ITBLNG_OHDR");

                entity.HasOne(d => d.ShipmentReceipt)
                    .WithMany(p => p.OrderItemBillings)
                    .HasForeignKey(d => d.ShipmentReceiptId)
                    .HasConstraintName("ORDER_ITBL_SHIPRCP");

                entity.HasOne(d => d.InvoiceI)
                    .WithMany(p => p.OrderItemBillings)
                    .HasForeignKey(d => new { d.InvoiceId, d.InvoiceItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ITBLNG_IITM");

                entity.HasOne(d => d.OrderI)
                    .WithMany(p => p.OrderItemBillings)
                    .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ITBLNG_OITM");
            });

            modelBuilder.Entity<OrderItemChange>(entity =>
            {
                entity.ToTable("ORDER_ITEM_CHANGE");

                entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId }, "ORDER_ITCH_OITM");

                entity.HasIndex(e => e.ReasonEnumId, "ORDER_ITCH_REAS");

                entity.HasIndex(e => e.ChangeTypeEnumId, "ORDER_ITCH_TYPE");

                entity.HasIndex(e => e.ChangeUserLogin, "ORDER_ITCH_USER");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_ITM_CHG_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_ITM_CHG_TXSTMP");

                entity.Property(e => e.OrderItemChangeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_CHANGE_ID");

                entity.Property(e => e.CancelQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("CANCEL_QUANTITY");

                entity.Property(e => e.ChangeComments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CHANGE_COMMENTS");

                entity.Property(e => e.ChangeDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("CHANGE_DATETIME");

                entity.Property(e => e.ChangeTypeEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CHANGE_TYPE_ENUM_ID");

                entity.Property(e => e.ChangeUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CHANGE_USER_LOGIN");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.ItemDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.ReasonEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REASON_ENUM_ID");

                entity.Property(e => e.UnitPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("UNIT_PRICE");

                entity.HasOne(d => d.ChangeTypeEnum)
                    .WithMany(p => p.OrderItemChangeChangeTypeEnums)
                    .HasForeignKey(d => d.ChangeTypeEnumId)
                    .HasConstraintName("ORDER_ITCH_TYPE");

                entity.HasOne(d => d.ChangeUserLoginNavigation)
                    .WithMany(p => p.OrderItemChanges)
                    .HasForeignKey(d => d.ChangeUserLogin)
                    .HasConstraintName("ORDER_ITCH_USER");

                entity.HasOne(d => d.ReasonEnum)
                    .WithMany(p => p.OrderItemChangeReasonEnums)
                    .HasForeignKey(d => d.ReasonEnumId)
                    .HasConstraintName("ORDER_ITCH_REAS");

                entity.HasOne(d => d.OrderI)
                    .WithMany(p => p.OrderItemChanges)
                    .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                    .HasConstraintName("ORDER_ITCH_OITM");
            });

            modelBuilder.Entity<OrderItemContactMech>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.OrderItemSeqId, e.ContactMechPurposeTypeId });

                entity.ToTable("ORDER_ITEM_CONTACT_MECH");

                entity.HasIndex(e => e.ContactMechId, "ORDER_ITCM_CMECH");

                entity.HasIndex(e => e.ContactMechPurposeTypeId, "ORDER_ITCM_CMPT");

                entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId }, "ORDER_ITCM_OITM");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_ITM_CNT_MCH_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_ITM_CNT_MCH_TS");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.ContactMechPurposeTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_PURPOSE_TYPE_ID");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.OrderItemContactMeches)
                    .HasForeignKey(d => d.ContactMechId)
                    .HasConstraintName("ORDER_ITCM_CMECH");

                entity.HasOne(d => d.ContactMechPurposeType)
                    .WithMany(p => p.OrderItemContactMeches)
                    .HasForeignKey(d => d.ContactMechPurposeTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ITCM_CMPT");

                entity.HasOne(d => d.OrderI)
                    .WithMany(p => p.OrderItemContactMeches)
                    .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ITCM_OITM");
            });

            modelBuilder.Entity<OrderItemGroup>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.OrderItemGroupSeqId });

                entity.ToTable("ORDER_ITEM_GROUP");

                entity.HasIndex(e => e.OrderId, "ORDERITMGRP_HDR");

                entity.HasIndex(e => new { e.OrderId, e.ParentGroupSeqId }, "ORDERITMGRP_PGRP");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_ITM_GRP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_ITM_GRP_TXSTMP");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemGroupSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_GROUP_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_NAME");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentGroupSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_GROUP_SEQ_ID");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderItemGroups)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDERITMGRP_HDR");

                entity.HasOne(d => d.OrderItemGroupNavigation)
                    .WithMany(p => p.InverseOrderItemGroupNavigation)
                    .HasForeignKey(d => new { d.OrderId, d.ParentGroupSeqId })
                    .HasConstraintName("ORDERITMGRP_PGRP");
            });

            modelBuilder.Entity<OrderItemGroupOrder>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.OrderItemSeqId, e.GroupOrderId });

                entity.ToTable("ORDER_ITEM_GROUP_ORDER");

                entity.HasIndex(e => e.GroupOrderId, "OIGO_GROUP_ORDER");

                entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId }, "OIGO_ORDER_ITEM");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_ITM_GRP_ORR_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_ITM_GRP_ORR_TS");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.GroupOrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_ORDER_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.GroupOrder)
                    .WithMany(p => p.OrderItemGroupOrders)
                    .HasForeignKey(d => d.GroupOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("OIGO_GROUP_ORDER");

                entity.HasOne(d => d.OrderI)
                    .WithMany(p => p.OrderItemGroupOrders)
                    .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("OIGO_ORDER_ITEM");
            });

            modelBuilder.Entity<OrderItemPriceInfo>(entity =>
            {
                entity.ToTable("ORDER_ITEM_PRICE_INFO");

                entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId }, "ORDER_OIPI_OITM");

                entity.HasIndex(e => new { e.ProductPriceRuleId, e.ProductPriceActionSeqId }, "ORDER_OIPI_PRAI");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_ITM_PRC_INF_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_ITM_PRC_INF_TS");

                entity.Property(e => e.OrderItemPriceInfoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_PRICE_INFO_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ModifyAmount)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("MODIFY_AMOUNT");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.ProductPriceActionSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PRICE_ACTION_SEQ_ID");

                entity.Property(e => e.ProductPriceRuleId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PRICE_RULE_ID");

                entity.Property(e => e.RateCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("RATE_CODE");

                entity.HasOne(d => d.OrderI)
                    .WithMany(p => p.OrderItemPriceInfos)
                    .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                    .HasConstraintName("ORDER_OIPI_OITM");

                entity.HasOne(d => d.ProductPrice)
                    .WithMany(p => p.OrderItemPriceInfos)
                    .HasForeignKey(d => new { d.ProductPriceRuleId, d.ProductPriceActionSeqId })
                    .HasConstraintName("ORDER_OIPI_PRAI");
            });

            modelBuilder.Entity<OrderItemRole>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.OrderItemSeqId, e.PartyId, e.RoleTypeId });

                entity.ToTable("ORDER_ITEM_ROLE");

                entity.HasIndex(e => e.OrderId, "ORDER_ITRL_OHDR");

                entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId }, "ORDER_ITRL_OITM");

                entity.HasIndex(e => e.PartyId, "ORDER_ITRL_PARTY");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "ORDER_ITRL_PTRLE");

                entity.HasIndex(e => e.CreatedTxStamp, "ORDR_ITM_RL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORDR_ITM_RL_TXSTMP");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderItemRoles)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ITRL_OHDR");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.OrderItemRoles)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ITRL_PARTY");

                entity.HasOne(d => d.OrderI)
                    .WithMany(p => p.OrderItemRoles)
                    .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ITRL_OITM");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.OrderItemRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ITRL_PTRLE");
            });

            modelBuilder.Entity<OrderItemShipGroup>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.ShipGroupSeqId });

                entity.ToTable("ORDER_ITEM_SHIP_GROUP");

                entity.HasIndex(e => e.ContactMechId, "ORDER_ITSG_CNTM");

                entity.HasIndex(e => new { e.CarrierPartyId, e.CarrierRoleTypeId }, "ORDER_ITSG_CPRLE");

                entity.HasIndex(e => e.CarrierPartyId, "ORDER_ITSG_CPRTY");

                entity.HasIndex(e => new { e.ShipmentMethodTypeId, e.CarrierPartyId, e.CarrierRoleTypeId }, "ORDER_ITSG_CSHM");

                entity.HasIndex(e => e.FacilityId, "ORDER_ITSG_FAC");

                entity.HasIndex(e => e.OrderId, "ORDER_ITSG_ORDH");

                entity.HasIndex(e => e.ContactMechId, "ORDER_ITSG_PADR");

                entity.HasIndex(e => e.SupplierAgreementId, "ORDER_ITSG_SAGR");

                entity.HasIndex(e => e.ShipmentMethodTypeId, "ORDER_ITSG_SHMTP");

                entity.HasIndex(e => e.SupplierPartyId, "ORDER_ITSG_SPRTY");

                entity.HasIndex(e => e.TelecomContactMechId, "ORDER_ITSG_TCNB");

                entity.HasIndex(e => e.TelecomContactMechId, "ORDER_ITSG_TCNT");

                entity.HasIndex(e => e.VendorPartyId, "ORDER_ITSG_VPRTY");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_ITM_SHP_GRP_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_ITM_SHP_GRP_TS");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.ShipGroupSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIP_GROUP_SEQ_ID");

                entity.Property(e => e.CarrierPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CARRIER_PARTY_ID");

                entity.Property(e => e.CarrierRoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CARRIER_ROLE_TYPE_ID");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.EstimatedDeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ESTIMATED_DELIVERY_DATE");

                entity.Property(e => e.EstimatedShipDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ESTIMATED_SHIP_DATE");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.GiftMessage)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GIFT_MESSAGE");

                entity.Property(e => e.IsGift)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_GIFT")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MaySplit)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MAY_SPLIT")
                    .IsFixedLength();

                entity.Property(e => e.ShipAfterDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SHIP_AFTER_DATE");

                entity.Property(e => e.ShipByDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SHIP_BY_DATE");

                entity.Property(e => e.ShipmentMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_METHOD_TYPE_ID");

                entity.Property(e => e.ShippingInstructions)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SHIPPING_INSTRUCTIONS");

                entity.Property(e => e.SupplierAgreementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_AGREEMENT_ID");

                entity.Property(e => e.SupplierPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_PARTY_ID");

                entity.Property(e => e.TelecomContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TELECOM_CONTACT_MECH_ID");

                entity.Property(e => e.TrackingNumber)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TRACKING_NUMBER");

                entity.Property(e => e.VendorPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VENDOR_PARTY_ID");

                entity.HasOne(d => d.CarrierParty)
                    .WithMany(p => p.OrderItemShipGroupCarrierParties)
                    .HasForeignKey(d => d.CarrierPartyId)
                    .HasConstraintName("ORDER_ITSG_CPRTY");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.OrderItemShipGroupContactMeches)
                    .HasForeignKey(d => d.ContactMechId)
                    .HasConstraintName("ORDER_ITSG_CNTM");

                entity.HasOne(d => d.ContactMechNavigation)
                    .WithMany(p => p.OrderItemShipGroups)
                    .HasForeignKey(d => d.ContactMechId)
                    .HasConstraintName("ORDER_ITSG_PADR");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.OrderItemShipGroups)
                    .HasForeignKey(d => d.FacilityId)
                    .HasConstraintName("ORDER_ITSG_FAC");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderItemShipGroups)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ITSG_ORDH");

                entity.HasOne(d => d.ShipmentMethodType)
                    .WithMany(p => p.OrderItemShipGroups)
                    .HasForeignKey(d => d.ShipmentMethodTypeId)
                    .HasConstraintName("ORDER_ITSG_SHMTP");

                entity.HasOne(d => d.SupplierAgreement)
                    .WithMany(p => p.OrderItemShipGroups)
                    .HasForeignKey(d => d.SupplierAgreementId)
                    .HasConstraintName("ORDER_ITSG_SAGR");

                entity.HasOne(d => d.SupplierParty)
                    .WithMany(p => p.OrderItemShipGroupSupplierParties)
                    .HasForeignKey(d => d.SupplierPartyId)
                    .HasConstraintName("ORDER_ITSG_SPRTY");

                entity.HasOne(d => d.TelecomContactMech)
                    .WithMany(p => p.OrderItemShipGroupTelecomContactMeches)
                    .HasForeignKey(d => d.TelecomContactMechId)
                    .HasConstraintName("ORDER_ITSG_TCNT");

                entity.HasOne(d => d.TelecomContactMechNavigation)
                    .WithMany(p => p.OrderItemShipGroups)
                    .HasForeignKey(d => d.TelecomContactMechId)
                    .HasConstraintName("ORDER_ITSG_TCNB");

                entity.HasOne(d => d.VendorParty)
                    .WithMany(p => p.OrderItemShipGroupVendorParties)
                    .HasForeignKey(d => d.VendorPartyId)
                    .HasConstraintName("ORDER_ITSG_VPRTY");

                entity.HasOne(d => d.Carrier)
                    .WithMany(p => p.OrderItemShipGroups)
                    .HasForeignKey(d => new { d.CarrierPartyId, d.CarrierRoleTypeId })
                    .HasConstraintName("ORDER_ITSG_CPRLE");

                entity.HasOne(d => d.CarrierShipmentMethod)
                    .WithMany(p => p.OrderItemShipGroups)
                    .HasForeignKey(d => new { d.ShipmentMethodTypeId, d.CarrierPartyId, d.CarrierRoleTypeId })
                    .HasConstraintName("ORDER_ITSG_CSHM");
            });

            modelBuilder.Entity<OrderItemShipGroupAssoc>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.OrderItemSeqId, e.ShipGroupSeqId });

                entity.ToTable("ORDER_ITEM_SHIP_GROUP_ASSOC");

                entity.HasIndex(e => new { e.OrderId, e.ShipGroupSeqId }, "ORDER_ISGA_OISG");

                entity.HasIndex(e => e.OrderId, "ORDER_ISGA_ORDH");

                entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId }, "ORDER_ISGA_ORDI");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_SHP_GRP_ASC_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_SHP_GRP_ASC_TS");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.ShipGroupSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIP_GROUP_SEQ_ID");

                entity.Property(e => e.CancelQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("CANCEL_QUANTITY");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderItemShipGroupAssocs)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ISGA_ORDH");

                entity.HasOne(d => d.OrderI)
                    .WithMany(p => p.OrderItemShipGroupAssocs)
                    .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ISGA_ORDI");

                entity.HasOne(d => d.OrderItemShipGroup)
                    .WithMany(p => p.OrderItemShipGroupAssocs)
                    .HasForeignKey(d => new { d.OrderId, d.ShipGroupSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ISGA_OISG");
            });

            modelBuilder.Entity<OrderItemShipGrpInvRes>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.ShipGroupSeqId, e.OrderItemSeqId, e.InventoryItemId });

                entity.ToTable("ORDER_ITEM_SHIP_GRP_INV_RES");

                entity.HasIndex(e => e.InventoryItemId, "ORDER_ITIR_INVITM");

                entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId }, "ORDER_ITIR_OITM");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_GRP_INV_RS_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_GRP_INV_RS_TS");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.ShipGroupSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIP_GROUP_SEQ_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.InventoryItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_ID");

                entity.Property(e => e.CreatedDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_DATETIME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrentPromisedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CURRENT_PROMISED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PickStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PICK_START_DATE");

                entity.Property(e => e.Priority)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRIORITY")
                    .IsFixedLength();

                entity.Property(e => e.PromisedDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("PROMISED_DATETIME");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.QuantityNotAvailable)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY_NOT_AVAILABLE");

                entity.Property(e => e.ReserveOrderEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RESERVE_ORDER_ENUM_ID");

                entity.Property(e => e.ReservedDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("RESERVED_DATETIME");

                entity.Property(e => e.SequenceId).HasColumnName("SEQUENCE_ID");

                entity.HasOne(d => d.InventoryItem)
                    .WithMany(p => p.OrderItemShipGrpInvRes)
                    .HasForeignKey(d => d.InventoryItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ITIR_INVITM");

                entity.HasOne(d => d.OrderI)
                    .WithMany(p => p.OrderItemShipGrpInvRes)
                    .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ITIR_OITM");
            });

            modelBuilder.Entity<OrderItemType>(entity =>
            {
                entity.ToTable("ORDER_ITEM_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "ORDER_ITEM_TYPPAR");

                entity.HasIndex(e => e.CreatedTxStamp, "ORDR_ITM_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORDR_ITM_TP_TXSTMP");

                entity.Property(e => e.OrderItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("ORDER_ITEM_TYPPAR");
            });

            modelBuilder.Entity<OrderItemTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.OrderItemTypeId, e.AttrName });

                entity.ToTable("ORDER_ITEM_TYPE_ATTR");

                entity.HasIndex(e => e.OrderItemTypeId, "ORDER_ITEM_TYPATR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_ITM_TP_ATR_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_ITM_TP_ATR_TXS");

                entity.Property(e => e.OrderItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.OrderItemType)
                    .WithMany(p => p.OrderItemTypeAttrs)
                    .HasForeignKey(d => d.OrderItemTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ITEM_TYPATR");
            });

            modelBuilder.Entity<OrderNotification>(entity =>
            {
                entity.ToTable("ORDER_NOTIFICATION");

                entity.HasIndex(e => e.CreatedTxStamp, "ORDR_NTFCTN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORDR_NTFCTN_TXSTMP");

                entity.HasIndex(e => e.EmailType, "ORD_NOTIFY_ENUM");

                entity.HasIndex(e => e.OrderId, "ORD_NOTIFY_ORDHDR");

                entity.Property(e => e.OrderNotificationId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NOTIFICATION_ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.EmailType)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_TYPE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.NotificationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("NOTIFICATION_DATE");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.HasOne(d => d.EmailTypeNavigation)
                    .WithMany(p => p.OrderNotifications)
                    .HasForeignKey(d => d.EmailType)
                    .HasConstraintName("ORD_NOTIFY_ENUM");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderNotifications)
                    .HasForeignKey(d => d.OrderId)
                    .HasConstraintName("ORD_NOTIFY_ORDHDR");
            });

            modelBuilder.Entity<OrderPaymentPreference>(entity =>
            {
                entity.ToTable("ORDER_PAYMENT_PREFERENCE");

                entity.HasIndex(e => e.NeedsNsfRetry, "NSF_RETRY_CHECK");

                entity.HasIndex(e => e.FinAccountId, "ORDER_PMPRF_FINACT");

                entity.HasIndex(e => e.OrderId, "ORDER_PMPRF_OHDR");

                entity.HasIndex(e => e.PaymentMethodId, "ORDER_PMPRF_PMETH");

                entity.HasIndex(e => e.PaymentMethodTypeId, "ORDER_PMPRF_PMTP");

                entity.HasIndex(e => e.ProductPricePurposeId, "ORDER_PMPRF_PPRP");

                entity.HasIndex(e => e.StatusId, "ORDER_PMPRF_STTS");

                entity.HasIndex(e => e.CreatedByUserLogin, "ORDER_PMPRF_USRL");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_PMT_PRFC_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_PMT_PRFC_TXSTP");

                entity.Property(e => e.OrderPaymentPreferenceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_PAYMENT_PREFERENCE_ID");

                entity.Property(e => e.BillingPostalCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_POSTAL_CODE");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.FinAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_ID");

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ManualAuthCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("MANUAL_AUTH_CODE");

                entity.Property(e => e.ManualRefNum)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("MANUAL_REF_NUM");

                entity.Property(e => e.MaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MAX_AMOUNT");

                entity.Property(e => e.NeedsNsfRetry)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NEEDS_NSF_RETRY")
                    .IsFixedLength();

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.OverflowFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OVERFLOW_FLAG")
                    .IsFixedLength();

                entity.Property(e => e.PaymentMethodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_METHOD_ID");

                entity.Property(e => e.PaymentMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_METHOD_TYPE_ID");

                entity.Property(e => e.PresentFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRESENT_FLAG")
                    .IsFixedLength();

                entity.Property(e => e.ProcessAttempt).HasColumnName("PROCESS_ATTEMPT");

                entity.Property(e => e.ProductPricePurposeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PRICE_PURPOSE_ID");

                entity.Property(e => e.SecurityCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_CODE");

                entity.Property(e => e.ShipGroupSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIP_GROUP_SEQ_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.SwipedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SWIPED_FLAG")
                    .IsFixedLength();

                entity.Property(e => e.Track2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TRACK2");

                entity.HasOne(d => d.CreatedByUserLoginNavigation)
                    .WithMany(p => p.OrderPaymentPreferences)
                    .HasForeignKey(d => d.CreatedByUserLogin)
                    .HasConstraintName("ORDER_PMPRF_USRL");

                entity.HasOne(d => d.FinAccount)
                    .WithMany(p => p.OrderPaymentPreferences)
                    .HasForeignKey(d => d.FinAccountId)
                    .HasConstraintName("ORDER_PMPRF_FINACT");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderPaymentPreferences)
                    .HasForeignKey(d => d.OrderId)
                    .HasConstraintName("ORDER_PMPRF_OHDR");

                entity.HasOne(d => d.PaymentMethod)
                    .WithMany(p => p.OrderPaymentPreferences)
                    .HasForeignKey(d => d.PaymentMethodId)
                    .HasConstraintName("ORDER_PMPRF_PMETH");

                entity.HasOne(d => d.PaymentMethodType)
                    .WithMany(p => p.OrderPaymentPreferences)
                    .HasForeignKey(d => d.PaymentMethodTypeId)
                    .HasConstraintName("ORDER_PMPRF_PMTP");

                entity.HasOne(d => d.ProductPricePurpose)
                    .WithMany(p => p.OrderPaymentPreferences)
                    .HasForeignKey(d => d.ProductPricePurposeId)
                    .HasConstraintName("ORDER_PMPRF_PPRP");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.OrderPaymentPreferences)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("ORDER_PMPRF_STTS");
            });

            modelBuilder.Entity<OrderProductPromoCode>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.ProductPromoCodeId });

                entity.ToTable("ORDER_PRODUCT_PROMO_CODE");

                entity.HasIndex(e => e.OrderId, "ORDER_PPCD_ORD");

                entity.HasIndex(e => e.ProductPromoCodeId, "ORDER_PPCD_PPC");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_PRT_PRM_CD_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_PRT_PRM_CD_TXS");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.ProductPromoCodeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_CODE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderProductPromoCodes)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_PPCD_ORD");

                entity.HasOne(d => d.ProductPromoCode)
                    .WithMany(p => p.OrderProductPromoCodes)
                    .HasForeignKey(d => d.ProductPromoCodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_PPCD_PPC");
            });

            modelBuilder.Entity<OrderRequirementCommitment>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.OrderItemSeqId, e.RequirementId })
                    .HasName("PK_ORDER_REQUIREMENT_COMMITMEN");

                entity.ToTable("ORDER_REQUIREMENT_COMMITMENT");

                entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId }, "ORDREQ_CMT_OITM");

                entity.HasIndex(e => e.OrderId, "ORDREQ_CMT_ORD");

                entity.HasIndex(e => e.RequirementId, "ORDREQ_CMT_REQ");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_RQRT_CMMT_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_RQRT_CMMT_TXSP");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.RequirementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REQUIREMENT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderRequirementCommitments)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDREQ_CMT_ORD");

                entity.HasOne(d => d.Requirement)
                    .WithMany(p => p.OrderRequirementCommitments)
                    .HasForeignKey(d => d.RequirementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDREQ_CMT_REQ");

                entity.HasOne(d => d.OrderI)
                    .WithMany(p => p.OrderRequirementCommitments)
                    .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDREQ_CMT_OITM");
            });

            modelBuilder.Entity<OrderRole>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.PartyId, e.RoleTypeId });

                entity.ToTable("ORDER_ROLE");

                entity.HasIndex(e => e.OrderId, "ORDER_ROLE_OHDR");

                entity.HasIndex(e => e.PartyId, "ORDER_ROLE_PARTY");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "ORDER_ROLE_PROLE");

                entity.HasIndex(e => e.CreatedTxStamp, "ORDER_ROLE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORDER_ROLE_TXSTMP");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderRoles)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ROLE_OHDR");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.OrderRoles)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ROLE_PARTY");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.OrderRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_ROLE_PROLE");
            });

            modelBuilder.Entity<OrderShipment>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.OrderItemSeqId, e.ShipGroupSeqId, e.ShipmentId, e.ShipmentItemSeqId });

                entity.ToTable("ORDER_SHIPMENT");

                entity.HasIndex(e => e.OrderId, "ORDER_SHPMT_OHDR");

                entity.HasIndex(e => e.ShipmentId, "ORDER_SHPMT_SHPMT");

                entity.HasIndex(e => e.CreatedTxStamp, "ORDR_SHPMNT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORDR_SHPMNT_TXSTMP");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.ShipGroupSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIP_GROUP_SEQ_ID");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ID");

                entity.Property(e => e.ShipmentItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ITEM_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderShipments)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_SHPMT_OHDR");

                entity.HasOne(d => d.Shipment)
                    .WithMany(p => p.OrderShipments)
                    .HasForeignKey(d => d.ShipmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_SHPMT_SHPMT");
            });

            modelBuilder.Entity<OrderStatus>(entity =>
            {
                entity.ToTable("ORDER_STATUS");

                entity.HasIndex(e => e.OrderId, "ORDER_STTS_OHDR");

                entity.HasIndex(e => e.StatusId, "ORDER_STTS_STTS");

                entity.HasIndex(e => e.StatusUserLogin, "ORDER_STTS_USER");

                entity.HasIndex(e => e.CreatedTxStamp, "ORDR_STTS_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORDR_STTS_TXSTMP");

                entity.Property(e => e.OrderStatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_STATUS_ID");

                entity.Property(e => e.ChangeReason)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CHANGE_REASON");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.OrderPaymentPreferenceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_PAYMENT_PREFERENCE_ID");

                entity.Property(e => e.StatusDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("STATUS_DATETIME");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.StatusUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_USER_LOGIN");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderStatuses)
                    .HasForeignKey(d => d.OrderId)
                    .HasConstraintName("ORDER_STTS_OHDR");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.OrderStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("ORDER_STTS_STTS");

                entity.HasOne(d => d.StatusUserLoginNavigation)
                    .WithMany(p => p.OrderStatuses)
                    .HasForeignKey(d => d.StatusUserLogin)
                    .HasConstraintName("ORDER_STTS_USER");
            });

            modelBuilder.Entity<OrderSummaryEntry>(entity =>
            {
                entity.HasKey(e => new { e.EntryDate, e.ProductId, e.FacilityId });

                entity.ToTable("ORDER_SUMMARY_ENTRY");

                entity.HasIndex(e => e.FacilityId, "ORDER_SMENT_FAC");

                entity.HasIndex(e => e.ProductId, "ORDER_SMENT_PROD");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_SMR_ENR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_SMR_ENR_TXSTMP");

                entity.Property(e => e.EntryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ENTRY_DATE");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GrossSales)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("GROSS_SALES");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ProductCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PRODUCT_COST");

                entity.Property(e => e.TotalQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("TOTAL_QUANTITY");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.OrderSummaryEntries)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_SMENT_FAC");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.OrderSummaryEntries)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_SMENT_PROD");
            });

            modelBuilder.Entity<OrderTerm>(entity =>
            {
                entity.HasKey(e => new { e.TermTypeId, e.OrderId, e.OrderItemSeqId });

                entity.ToTable("ORDER_TERM");

                entity.HasIndex(e => e.OrderId, "ORDER_TERM_OHDR");

                entity.HasIndex(e => e.TermTypeId, "ORDER_TERM_TTYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "ORDER_TERM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORDER_TERM_TXSTMP");

                entity.HasIndex(e => e.UomId, "ORDER_TERM_UOM");

                entity.Property(e => e.TermTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TERM_TYPE_ID");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.TermDays).HasColumnName("TERM_DAYS");

                entity.Property(e => e.TermValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("TERM_VALUE");

                entity.Property(e => e.TextValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TEXT_VALUE");

                entity.Property(e => e.UomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UOM_ID");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderTerms)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_TERM_OHDR");

                entity.HasOne(d => d.TermType)
                    .WithMany(p => p.OrderTerms)
                    .HasForeignKey(d => d.TermTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_TERM_TTYPE");

                entity.HasOne(d => d.Uom)
                    .WithMany(p => p.OrderTerms)
                    .HasForeignKey(d => d.UomId)
                    .HasConstraintName("ORDER_TERM_UOM");
            });

            modelBuilder.Entity<OrderTermAttribute>(entity =>
            {
                entity.HasKey(e => new { e.TermTypeId, e.OrderId, e.OrderItemSeqId, e.AttrName });

                entity.ToTable("ORDER_TERM_ATTRIBUTE");

                entity.HasIndex(e => new { e.TermTypeId, e.OrderId, e.OrderItemSeqId }, "ORDER_TATTR_OTRM");

                entity.HasIndex(e => e.CreatedTxStamp, "ORR_TRM_ATTT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORR_TRM_ATTT_TXSTP");

                entity.Property(e => e.TermTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TERM_TYPE_ID");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.OrderTerm)
                    .WithMany(p => p.OrderTermAttributes)
                    .HasForeignKey(d => new { d.TermTypeId, d.OrderId, d.OrderItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_TATTR_OTRM");
            });

            modelBuilder.Entity<OrderType>(entity =>
            {
                entity.ToTable("ORDER_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "ORDER_TYPE_PARENT");

                entity.HasIndex(e => e.CreatedTxStamp, "ORDER_TYPE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORDER_TYPE_TXSTMP");

                entity.Property(e => e.OrderTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("ORDER_TYPE_PARENT");
            });

            modelBuilder.Entity<OrderTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.OrderTypeId, e.AttrName });

                entity.ToTable("ORDER_TYPE_ATTR");

                entity.HasIndex(e => e.OrderTypeId, "ORDER_TPAT_ORTYP");

                entity.HasIndex(e => e.CreatedTxStamp, "ORDR_TP_ATR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ORDR_TP_ATR_TXSTMP");

                entity.Property(e => e.OrderTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.OrderType)
                    .WithMany(p => p.OrderTypeAttrs)
                    .HasForeignKey(d => d.OrderTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ORDER_TPAT_ORTYP");
            });

            modelBuilder.Entity<OtherDataResource>(entity =>
            {
                entity.HasKey(e => e.DataResourceId);

                entity.ToTable("OTHER_DATA_RESOURCE");

                entity.HasIndex(e => e.DataResourceId, "DATA_REC_OTHER");

                entity.HasIndex(e => e.CreatedTxStamp, "OTHR_DT_RSC_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "OTHR_DT_RSC_TXSTMP");

                entity.Property(e => e.DataResourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_RESOURCE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DataResourceContent)
                    .HasColumnType("image")
                    .HasColumnName("DATA_RESOURCE_CONTENT");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.DataResource)
                    .WithOne(p => p.OtherDataResource)
                    .HasForeignKey<OtherDataResource>(d => d.DataResourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DATA_REC_OTHER");
            });

            modelBuilder.Entity<Party>(entity =>
            {
                entity.ToTable("PARTY");

                entity.HasIndex(e => e.ExternalId, "PARTYEXT_ID_IDX");

                entity.HasIndex(e => e.CreatedByUserLogin, "PARTY_CUL");

                entity.HasIndex(e => e.DataSourceId, "PARTY_DATSRC");

                entity.HasIndex(e => e.LastModifiedByUserLogin, "PARTY_LMCUL");

                entity.HasIndex(e => e.PreferredCurrencyUomId, "PARTY_PREF_CRNCY");

                entity.HasIndex(e => e.PartyTypeId, "PARTY_PTY_TYP");

                entity.HasIndex(e => e.StatusId, "PARTY_STATUSITM");

                entity.HasIndex(e => e.CreatedTxStamp, "PARTY_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PARTY_TXSTMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DataSourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_SOURCE_ID");

                entity.Property(e => e.Description)
                    //.HasColumnType("text")
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.ExternalId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EXTERNAL_ID");

                entity.Property(e => e.IsUnread)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_UNREAD")
                    .IsFixedLength();

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PartyTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_TYPE_ID");

                entity.Property(e => e.PreferredCurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PREFERRED_CURRENCY_UOM_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.HasOne(d => d.CreatedByUserLoginNavigation)
                    .WithMany(p => p.PartyCreatedByUserLoginNavigations)
                    .HasForeignKey(d => d.CreatedByUserLogin)
                    .HasConstraintName("PARTY_CUL");

                entity.HasOne(d => d.DataSource)
                    .WithMany(p => p.Parties)
                    .HasForeignKey(d => d.DataSourceId)
                    .HasConstraintName("PARTY_DATSRC");

                entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                    .WithMany(p => p.PartyLastModifiedByUserLoginNavigations)
                    .HasForeignKey(d => d.LastModifiedByUserLogin)
                    .HasConstraintName("PARTY_LMCUL");

                entity.HasOne(d => d.PartyType)
                    .WithMany(p => p.Parties)
                    .HasForeignKey(d => d.PartyTypeId)
                    .HasConstraintName("PARTY_PTY_TYP");

                entity.HasOne(d => d.PreferredCurrencyUom)
                    .WithMany(p => p.Parties)
                    .HasForeignKey(d => d.PreferredCurrencyUomId)
                    .HasConstraintName("PARTY_PREF_CRNCY");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Parties)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("PARTY_STATUSITM");
            });

            modelBuilder.Entity<PartyAcctgPreference>(entity =>
            {
                entity.HasKey(e => e.PartyId);

                entity.ToTable("PARTY_ACCTG_PREFERENCE");

                entity.HasIndex(e => e.BaseCurrencyUomId, "ACCTGPREF_CURNCY");

                entity.HasIndex(e => e.CogsMethodId, "ACTGPREF_COGS");

                entity.HasIndex(e => e.ErrorGlJournalId, "ACTGPREF_GLJRNL");

                entity.HasIndex(e => e.InvoiceSeqCustMethId, "ACTGPREF_INVCM");

                entity.HasIndex(e => e.InvoiceSequenceEnumId, "ACTGPREF_INVSQ");

                entity.HasIndex(e => e.OrderSeqCustMethId, "ACTGPREF_ODRCM");

                entity.HasIndex(e => e.OrderSequenceEnumId, "ACTGPREF_ODRSQ");

                entity.HasIndex(e => e.RefundPaymentMethodId, "ACTGPREF_PAYMTH");

                entity.HasIndex(e => e.QuoteSeqCustMethId, "ACTGPREF_QTECM");

                entity.HasIndex(e => e.QuoteSequenceEnumId, "ACTGPREF_QTESQ");

                entity.HasIndex(e => e.TaxFormId, "ACTGPREF_TAXFORM");

                entity.HasIndex(e => e.PartyId, "ACTG_PREF_PTY");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_ACG_PRFC_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_ACG_PRFC_TXSTP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.BaseCurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BASE_CURRENCY_UOM_ID");

                entity.Property(e => e.CogsMethodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COGS_METHOD_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.EnableAccounting)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ENABLE_ACCOUNTING")
                    .IsFixedLength();

                entity.Property(e => e.ErrorGlJournalId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ERROR_GL_JOURNAL_ID");

                entity.Property(e => e.FiscalYearStartDay).HasColumnName("FISCAL_YEAR_START_DAY");

                entity.Property(e => e.FiscalYearStartMonth).HasColumnName("FISCAL_YEAR_START_MONTH");

                entity.Property(e => e.InvoiceIdPrefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ID_PREFIX");

                entity.Property(e => e.InvoiceSeqCustMethId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_SEQ_CUST_METH_ID");

                entity.Property(e => e.InvoiceSequenceEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_SEQUENCE_ENUM_ID");

                entity.Property(e => e.LastInvoiceNumber).HasColumnName("LAST_INVOICE_NUMBER");

                entity.Property(e => e.LastInvoiceRestartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_INVOICE_RESTART_DATE");

                entity.Property(e => e.LastOrderNumber).HasColumnName("LAST_ORDER_NUMBER");

                entity.Property(e => e.LastQuoteNumber).HasColumnName("LAST_QUOTE_NUMBER");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OrderIdPrefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID_PREFIX");

                entity.Property(e => e.OrderSeqCustMethId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_SEQ_CUST_METH_ID");

                entity.Property(e => e.OrderSequenceEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_SEQUENCE_ENUM_ID");

                entity.Property(e => e.QuoteIdPrefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_ID_PREFIX");

                entity.Property(e => e.QuoteSeqCustMethId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_SEQ_CUST_METH_ID");

                entity.Property(e => e.QuoteSequenceEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_SEQUENCE_ENUM_ID");

                entity.Property(e => e.RefundPaymentMethodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REFUND_PAYMENT_METHOD_ID");

                entity.Property(e => e.TaxFormId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_FORM_ID");

                entity.Property(e => e.UseInvoiceIdForReturns)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_INVOICE_ID_FOR_RETURNS")
                    .IsFixedLength();

                entity.HasOne(d => d.BaseCurrencyUom)
                    .WithMany(p => p.PartyAcctgPreferences)
                    .HasForeignKey(d => d.BaseCurrencyUomId)
                    .HasConstraintName("ACCTGPREF_CURNCY");

                entity.HasOne(d => d.CogsMethod)
                    .WithMany(p => p.PartyAcctgPreferenceCogsMethods)
                    .HasForeignKey(d => d.CogsMethodId)
                    .HasConstraintName("ACTGPREF_COGS");

                entity.HasOne(d => d.ErrorGlJournal)
                    .WithMany(p => p.PartyAcctgPreferences)
                    .HasForeignKey(d => d.ErrorGlJournalId)
                    .HasConstraintName("ACTGPREF_GLJRNL");

                entity.HasOne(d => d.InvoiceSeqCustMeth)
                    .WithMany(p => p.PartyAcctgPreferenceInvoiceSeqCustMeths)
                    .HasForeignKey(d => d.InvoiceSeqCustMethId)
                    .HasConstraintName("ACTGPREF_INVCM");

                entity.HasOne(d => d.InvoiceSequenceEnum)
                    .WithMany(p => p.PartyAcctgPreferenceInvoiceSequenceEnums)
                    .HasForeignKey(d => d.InvoiceSequenceEnumId)
                    .HasConstraintName("ACTGPREF_INVSQ");

                entity.HasOne(d => d.OrderSeqCustMeth)
                    .WithMany(p => p.PartyAcctgPreferenceOrderSeqCustMeths)
                    .HasForeignKey(d => d.OrderSeqCustMethId)
                    .HasConstraintName("ACTGPREF_ODRCM");

                entity.HasOne(d => d.OrderSequenceEnum)
                    .WithMany(p => p.PartyAcctgPreferenceOrderSequenceEnums)
                    .HasForeignKey(d => d.OrderSequenceEnumId)
                    .HasConstraintName("ACTGPREF_ODRSQ");

                entity.HasOne(d => d.Party)
                    .WithOne(p => p.PartyAcctgPreference)
                    .HasForeignKey<PartyAcctgPreference>(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ACTG_PREF_PTY");

                entity.HasOne(d => d.QuoteSeqCustMeth)
                    .WithMany(p => p.PartyAcctgPreferenceQuoteSeqCustMeths)
                    .HasForeignKey(d => d.QuoteSeqCustMethId)
                    .HasConstraintName("ACTGPREF_QTECM");

                entity.HasOne(d => d.QuoteSequenceEnum)
                    .WithMany(p => p.PartyAcctgPreferenceQuoteSequenceEnums)
                    .HasForeignKey(d => d.QuoteSequenceEnumId)
                    .HasConstraintName("ACTGPREF_QTESQ");

                entity.HasOne(d => d.RefundPaymentMethod)
                    .WithMany(p => p.PartyAcctgPreferences)
                    .HasForeignKey(d => d.RefundPaymentMethodId)
                    .HasConstraintName("ACTGPREF_PAYMTH");

                entity.HasOne(d => d.TaxForm)
                    .WithMany(p => p.PartyAcctgPreferenceTaxForms)
                    .HasForeignKey(d => d.TaxFormId)
                    .HasConstraintName("ACTGPREF_TAXFORM");
            });

            modelBuilder.Entity<PartyAttribute>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.AttrName });

                entity.ToTable("PARTY_ATTRIBUTE");

                entity.HasIndex(e => e.PartyId, "PARTY_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_ATTRBT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_ATTRBT_TXSTMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PartyAttributes)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_ATTR");
            });

            modelBuilder.Entity<PartyBenefit>(entity =>
            {
                entity.HasKey(e => new { e.RoleTypeIdFrom, e.RoleTypeIdTo, e.PartyIdFrom, e.PartyIdTo, e.BenefitTypeId, e.FromDate });

                entity.ToTable("PARTY_BENEFIT");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_BNFT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_BNFT_TXSTMP");

                entity.HasIndex(e => e.BenefitTypeId, "PTY_BNFT_BNFTTP");

                entity.HasIndex(e => new { e.PartyIdFrom, e.RoleTypeIdFrom }, "PTY_BNFT_FPTRL");

                entity.HasIndex(e => e.PartyIdFrom, "PTY_BNFT_FPTY");

                entity.HasIndex(e => new { e.PartyIdTo, e.RoleTypeIdTo }, "PTY_BNFT_TPTRL");

                entity.HasIndex(e => e.PartyIdTo, "PTY_BNFT_TPTY");

                entity.Property(e => e.RoleTypeIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID_FROM");

                entity.Property(e => e.RoleTypeIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID_TO");

                entity.Property(e => e.PartyIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID_FROM");

                entity.Property(e => e.PartyIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID_TO");

                entity.Property(e => e.BenefitTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BENEFIT_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.ActualEmployerPaidPercent).HasColumnName("ACTUAL_EMPLOYER_PAID_PERCENT");

                entity.Property(e => e.AvailableTime).HasColumnName("AVAILABLE_TIME");

                entity.Property(e => e.Cost)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("COST");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PeriodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_TYPE_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.BenefitType)
                    .WithMany(p => p.PartyBenefits)
                    .HasForeignKey(d => d.BenefitTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PTY_BNFT_BNFTTP");

                entity.HasOne(d => d.PartyIdFromNavigation)
                    .WithMany(p => p.PartyBenefitPartyIdFromNavigations)
                    .HasForeignKey(d => d.PartyIdFrom)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PTY_BNFT_FPTY");

                entity.HasOne(d => d.PartyIdToNavigation)
                    .WithMany(p => p.PartyBenefitPartyIdToNavigations)
                    .HasForeignKey(d => d.PartyIdTo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PTY_BNFT_TPTY");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.PartyBenefitPartyRoles)
                    .HasForeignKey(d => new { d.PartyIdFrom, d.RoleTypeIdFrom })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PTY_BNFT_FPTRL");

                entity.HasOne(d => d.PartyRoleNavigation)
                    .WithMany(p => p.PartyBenefitPartyRoleNavigations)
                    .HasForeignKey(d => new { d.PartyIdTo, d.RoleTypeIdTo })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PTY_BNFT_TPTRL");
            });

            modelBuilder.Entity<PartyCarrierAccount>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.CarrierPartyId, e.FromDate });

                entity.ToTable("PARTY_CARRIER_ACCOUNT");

                entity.HasIndex(e => e.CarrierPartyId, "PARTY_CRRACT_CPT");

                entity.HasIndex(e => e.PartyId, "PARTY_CRRACT_PTY");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_CRR_ACCT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_CRR_ACCT_TXSTP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.CarrierPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CARRIER_PARTY_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_NUMBER");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.CarrierParty)
                    .WithMany(p => p.PartyCarrierAccountCarrierParties)
                    .HasForeignKey(d => d.CarrierPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_CRRACT_CPT");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PartyCarrierAccountParties)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_CRRACT_PTY");
            });

            modelBuilder.Entity<PartyClassification>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.PartyClassificationGroupId, e.FromDate });

                entity.ToTable("PARTY_CLASSIFICATION");

                entity.HasIndex(e => e.PartyClassificationGroupId, "PARTY_CLASS_GRP");

                entity.HasIndex(e => e.PartyId, "PARTY_CLASS_PARTY");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_CLSSFCN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_CLSSFCN_TXSTMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.PartyClassificationGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_CLASSIFICATION_GROUP_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.PartyClassificationGroup)
                    .WithMany(p => p.PartyClassifications)
                    .HasForeignKey(d => d.PartyClassificationGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_CLASS_GRP");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PartyClassifications)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_CLASS_PARTY");
            });

            modelBuilder.Entity<PartyClassificationGroup>(entity =>
            {
                entity.ToTable("PARTY_CLASSIFICATION_GROUP");

                entity.HasIndex(e => e.ParentGroupId, "PARTY_CLASS_GRPPAR");

                entity.HasIndex(e => e.PartyClassificationTypeId, "PARTY_CLSGRP_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_CLSSN_GRP_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_CLSSN_GRP_TXSP");

                entity.Property(e => e.PartyClassificationGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_CLASSIFICATION_GROUP_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_GROUP_ID");

                entity.Property(e => e.PartyClassificationTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_CLASSIFICATION_TYPE_ID");

                entity.HasOne(d => d.ParentGroup)
                    .WithMany(p => p.InverseParentGroup)
                    .HasForeignKey(d => d.ParentGroupId)
                    .HasConstraintName("PARTY_CLASS_GRPPAR");

                entity.HasOne(d => d.PartyClassificationType)
                    .WithMany(p => p.PartyClassificationGroups)
                    .HasForeignKey(d => d.PartyClassificationTypeId)
                    .HasConstraintName("PARTY_CLSGRP_TYPE");
            });

            modelBuilder.Entity<PartyClassificationType>(entity =>
            {
                entity.ToTable("PARTY_CLASSIFICATION_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "PARTY_CLASS_TYPPAR");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_CLSSFN_TP_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_CLSSFN_TP_TXSP");

                entity.Property(e => e.PartyClassificationTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_CLASSIFICATION_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("PARTY_CLASS_TYPPAR");
            });

            modelBuilder.Entity<PartyContactMech>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.ContactMechId, e.FromDate });

                entity.ToTable("PARTY_CONTACT_MECH");

                entity.HasIndex(e => e.ContactMechId, "PARTY_CMECH_CMECH");

                entity.HasIndex(e => e.PartyId, "PARTY_CMECH_PARTY");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "PARTY_CMECH_PROLE");

                entity.HasIndex(e => e.RoleTypeId, "PARTY_CMECH_ROLE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_CNTT_MCH_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_CNTT_MCH_TXSTP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.AllowSolicitation)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ALLOW_SOLICITATION")
                    .IsFixedLength();

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Extension)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EXTENSION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MonthsWithContactMech).HasColumnName("MONTHS_WITH_CONTACT_MECH");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.Property(e => e.Verified)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VERIFIED")
                    .IsFixedLength();

                entity.Property(e => e.YearsWithContactMech).HasColumnName("YEARS_WITH_CONTACT_MECH");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.PartyContactMeches)
                    .HasForeignKey(d => d.ContactMechId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_CMECH_CMECH");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PartyContactMeches)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_CMECH_PARTY");

                entity.HasOne(d => d.RoleType)
                    .WithMany(p => p.PartyContactMeches)
                    .HasForeignKey(d => d.RoleTypeId)
                    .HasConstraintName("PARTY_CMECH_ROLE");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.PartyContactMeches)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .HasConstraintName("PARTY_CMECH_PROLE");
            });

            modelBuilder.Entity<PartyContactMechPurpose>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.ContactMechId, e.ContactMechPurposeTypeId, e.FromDate });

                entity.ToTable("PARTY_CONTACT_MECH_PURPOSE");

                entity.HasIndex(e => e.ContactMechId, "PARTY_CMPRP_CMECH");

                entity.HasIndex(e => e.PartyId, "PARTY_CMPRP_PARTY");

                entity.HasIndex(e => e.ContactMechPurposeTypeId, "PARTY_CMPRP_TYPE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_CNT_MCH_PRS_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_CNT_MCH_PRS_TS");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.ContactMechPurposeTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_PURPOSE_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.PartyContactMechPurposes)
                    .HasForeignKey(d => d.ContactMechId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_CMPRP_CMECH");

                entity.HasOne(d => d.ContactMechPurposeType)
                    .WithMany(p => p.PartyContactMechPurposes)
                    .HasForeignKey(d => d.ContactMechPurposeTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_CMPRP_TYPE");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PartyContactMechPurposes)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_CMPRP_PARTY");
            });

            modelBuilder.Entity<PartyContent>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.ContentId, e.PartyContentTypeId, e.FromDate });

                entity.ToTable("PARTY_CONTENT");

                entity.HasIndex(e => e.ContentId, "PARTY_CNT_CNT");

                entity.HasIndex(e => e.PartyId, "PARTY_CNT_PARTY");

                entity.HasIndex(e => e.PartyContentTypeId, "PARTY_CNT_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_CNTNT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_CNTNT_TXSTMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.PartyContentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_CONTENT_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.PartyContents)
                    .HasForeignKey(d => d.ContentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_CNT_CNT");

                entity.HasOne(d => d.PartyContentType)
                    .WithMany(p => p.PartyContents)
                    .HasForeignKey(d => d.PartyContentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_CNT_TYPE");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PartyContents)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_CNT_PARTY");
            });

            modelBuilder.Entity<PartyContentType>(entity =>
            {
                entity.ToTable("PARTY_CONTENT_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "PARTYCNT_TP_PAR");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_CNTT_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_CNTT_TP_TXSTMP");

                entity.Property(e => e.PartyContentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_CONTENT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("PARTYCNT_TP_PAR");
            });

            modelBuilder.Entity<PartyDataSource>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.DataSourceId, e.FromDate });

                entity.ToTable("PARTY_DATA_SOURCE");

                entity.HasIndex(e => e.DataSourceId, "PARTY_DATSRC_DSC");

                entity.HasIndex(e => e.PartyId, "PARTY_DATSRC_PTY");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_DT_SRC_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_DT_SRC_TXSTMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.DataSourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_SOURCE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.IsCreate)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_CREATE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.VisitId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VISIT_ID");

                entity.HasOne(d => d.DataSource)
                    .WithMany(p => p.PartyDataSources)
                    .HasForeignKey(d => d.DataSourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_DATSRC_DSC");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PartyDataSources)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_DATSRC_PTY");
            });

            modelBuilder.Entity<PartyFixedAssetAssignment>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.RoleTypeId, e.FixedAssetId, e.FromDate })
                    .HasName("PK_PARTY_FIXED_ASSET_ASSIGNMEN");

                entity.ToTable("PARTY_FIXED_ASSET_ASSIGNMENT");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_FXD_AST_AST_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_FXD_AST_AST_TS");

                entity.HasIndex(e => e.FixedAssetId, "PTY_FASTAS_FA");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "PTY_FASTAS_PTRL");

                entity.HasIndex(e => e.StatusId, "PTY_FASTAS_SI");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.FixedAssetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.AllocatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ALLOCATED_DATE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.FixedAsset)
                    .WithMany(p => p.PartyFixedAssetAssignments)
                    .HasForeignKey(d => d.FixedAssetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PTY_FASTAS_FA");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.PartyFixedAssetAssignments)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("PTY_FASTAS_SI");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.PartyFixedAssetAssignments)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PTY_FASTAS_PTRL");
            });

            modelBuilder.Entity<PartyGeoPoint>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.GeoPointId, e.FromDate });

                entity.ToTable("PARTY_GEO_POINT");

                entity.HasIndex(e => e.GeoPointId, "PARTYGEOPT_GEOPT");

                entity.HasIndex(e => e.PartyId, "PARTYGEOPT_PARTY");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_G_PNT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_G_PNT_TXSTMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.GeoPointId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_POINT_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.GeoPoint)
                    .WithMany(p => p.PartyGeoPoints)
                    .HasForeignKey(d => d.GeoPointId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTYGEOPT_GEOPT");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PartyGeoPoints)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTYGEOPT_PARTY");
            });

            modelBuilder.Entity<PartyGlAccount>(entity =>
            {
                entity.HasKey(e => new { e.OrganizationPartyId, e.PartyId, e.RoleTypeId, e.GlAccountTypeId });

                entity.ToTable("PARTY_GL_ACCOUNT");

                entity.HasIndex(e => e.GlAccountId, "PRTYGLACCT_GLACCT");

                entity.HasIndex(e => e.GlAccountTypeId, "PRTYGLACCT_GLAT");

                entity.HasIndex(e => e.OrganizationPartyId, "PRTYGLACCT_ORGPRTY");

                entity.HasIndex(e => e.PartyId, "PRTYGLACCT_PRTY");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "PRTYGLACCT_PTRL");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_GL_ACCT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_GL_ACCT_TXSTMP");

                entity.Property(e => e.OrganizationPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_PARTY_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.GlAccountTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.GlAccount)
                    .WithMany(p => p.PartyGlAccounts)
                    .HasForeignKey(d => d.GlAccountId)
                    .HasConstraintName("PRTYGLACCT_GLACCT");

                entity.HasOne(d => d.GlAccountType)
                    .WithMany(p => p.PartyGlAccounts)
                    .HasForeignKey(d => d.GlAccountTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRTYGLACCT_GLAT");

                entity.HasOne(d => d.OrganizationParty)
                    .WithMany(p => p.PartyGlAccountOrganizationParties)
                    .HasForeignKey(d => d.OrganizationPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRTYGLACCT_ORGPRTY");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PartyGlAccountParties)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRTYGLACCT_PRTY");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.PartyGlAccounts)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRTYGLACCT_PTRL");
            });

            modelBuilder.Entity<PartyGroup>(entity =>
            {
                entity.HasKey(e => e.PartyId);

                entity.ToTable("PARTY_GROUP");

                entity.HasIndex(e => e.GroupName, "GROUP_NAME_IDX");

                entity.HasIndex(e => e.CreatedTxStamp, "PARTY_GROUP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PARTY_GROUP_TXSTMP");

                entity.HasIndex(e => e.PartyId, "PARTY_GRP_PARTY");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.AnnualRevenue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ANNUAL_REVENUE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_NAME");

                entity.Property(e => e.GroupNameLocal)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_NAME_LOCAL");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LogoImageUrl)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("LOGO_IMAGE_URL");

                entity.Property(e => e.NumEmployees).HasColumnName("NUM_EMPLOYEES");

                entity.Property(e => e.OfficeSiteName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OFFICE_SITE_NAME");

                entity.Property(e => e.TickerSymbol)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TICKER_SYMBOL");

                entity.HasOne(d => d.Party)
                    .WithOne(p => p.PartyGroup)
                    .HasForeignKey<PartyGroup>(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_GRP_PARTY");
            });

            modelBuilder.Entity<PartyIcsAvsOverride>(entity =>
            {
                entity.HasKey(e => e.PartyId);

                entity.ToTable("PARTY_ICS_AVS_OVERRIDE");

                entity.HasIndex(e => e.PartyId, "PARTY_ICSAVS_PARTY");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_ICS_AVS_OVD_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_ICS_AVS_OVD_TS");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.AvsDeclineString)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("AVS_DECLINE_STRING");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Party)
                    .WithOne(p => p.PartyIcsAvsOverride)
                    .HasForeignKey<PartyIcsAvsOverride>(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_ICSAVS_PARTY");
            });

            modelBuilder.Entity<PartyIdentification>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.PartyIdentificationTypeId });

                entity.ToTable("PARTY_IDENTIFICATION");

                entity.HasIndex(e => e.PartyId, "PARTY_ID_PRODUCT");

                entity.HasIndex(e => e.PartyIdentificationTypeId, "PARTY_ID_TYPE");

                entity.HasIndex(e => e.IdValue, "PARTY_ID_VALIDX");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_IDNTFCN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_IDNTFCN_TXSTMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.PartyIdentificationTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_IDENTIFICATION_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.IdValue)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ID_VALUE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PartyIdentifications)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_ID_PRODUCT");

                entity.HasOne(d => d.PartyIdentificationType)
                    .WithMany(p => p.PartyIdentifications)
                    .HasForeignKey(d => d.PartyIdentificationTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_ID_TYPE");
            });

            modelBuilder.Entity<PartyIdentificationType>(entity =>
            {
                entity.ToTable("PARTY_IDENTIFICATION_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "PARTY_ID_TYPE_PAR");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_IDNTFN_TP_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_IDNTFN_TP_TXSP");

                entity.Property(e => e.PartyIdentificationTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_IDENTIFICATION_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("PARTY_ID_TYPE_PAR");
            });

            modelBuilder.Entity<PartyInvitation>(entity =>
            {
                entity.ToTable("PARTY_INVITATION");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_INVTTN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_INVTTN_TXSTMP");

                entity.HasIndex(e => e.PartyIdFrom, "PTYINV_PTY");

                entity.HasIndex(e => e.StatusId, "PTYINV_STTS");

                entity.Property(e => e.PartyInvitationId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_INVITATION_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ADDRESS");

                entity.Property(e => e.LastInviteDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_INVITE_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.PartyIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID_FROM");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.ToName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TO_NAME");

                entity.HasOne(d => d.PartyIdFromNavigation)
                    .WithMany(p => p.PartyInvitations)
                    .HasForeignKey(d => d.PartyIdFrom)
                    .HasConstraintName("PTYINV_PTY");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.PartyInvitations)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("PTYINV_STTS");
            });

            modelBuilder.Entity<PartyInvitationGroupAssoc>(entity =>
            {
                entity.HasKey(e => new { e.PartyInvitationId, e.PartyIdTo })
                    .HasName("PK_PARTY_INVITATION_GROUP_ASSO");

                entity.ToTable("PARTY_INVITATION_GROUP_ASSOC");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_INN_GRP_ASC_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_INN_GRP_ASC_TS");

                entity.HasIndex(e => e.PartyIdTo, "PTYINVGA_PTYGRP");

                entity.HasIndex(e => e.PartyInvitationId, "PTYINVGA_PTYINV");

                entity.HasIndex(e => e.PartyIdTo, "PTYINVGA_PTYTO");

                entity.Property(e => e.PartyInvitationId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_INVITATION_ID");

                entity.Property(e => e.PartyIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID_TO");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.PartyIdToNavigation)
                    .WithMany(p => p.PartyInvitationGroupAssocs)
                    .HasForeignKey(d => d.PartyIdTo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PTYINVGA_PTYTO");

                entity.HasOne(d => d.PartyIdTo1)
                    .WithMany(p => p.PartyInvitationGroupAssocs)
                    .HasForeignKey(d => d.PartyIdTo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PTYINVGA_PTYGRP");

                entity.HasOne(d => d.PartyInvitation)
                    .WithMany(p => p.PartyInvitationGroupAssocs)
                    .HasForeignKey(d => d.PartyInvitationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PTYINVGA_PTYINV");
            });

            modelBuilder.Entity<PartyInvitationRoleAssoc>(entity =>
            {
                entity.HasKey(e => new { e.PartyInvitationId, e.RoleTypeId });

                entity.ToTable("PARTY_INVITATION_ROLE_ASSOC");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_INN_RL_ASC_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_INN_RL_ASC_TXS");

                entity.HasIndex(e => e.PartyInvitationId, "PTYINVROLE_PTYINV");

                entity.HasIndex(e => e.RoleTypeId, "PTYINVROLE_ROLET");

                entity.Property(e => e.PartyInvitationId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_INVITATION_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.PartyInvitation)
                    .WithMany(p => p.PartyInvitationRoleAssocs)
                    .HasForeignKey(d => d.PartyInvitationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PTYINVROLE_PTYINV");

                entity.HasOne(d => d.RoleType)
                    .WithMany(p => p.PartyInvitationRoleAssocs)
                    .HasForeignKey(d => d.RoleTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PTYINVROLE_ROLET");
            });

            modelBuilder.Entity<PartyNameHistory>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.ChangeDate });

                entity.ToTable("PARTY_NAME_HISTORY");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_NM_HSTR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_NM_HSTR_TXSTMP");

                entity.HasIndex(e => e.PartyId, "PTY_NMHIS_PARTY");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.ChangeDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHANGE_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIRST_NAME");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_NAME");

                entity.Property(e => e.LastName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAST_NAME");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MIDDLE_NAME");

                entity.Property(e => e.PersonalTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERSONAL_TITLE");

                entity.Property(e => e.Suffix)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUFFIX");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PartyNameHistories)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PTY_NMHIS_PARTY");
            });

            modelBuilder.Entity<PartyNeed>(entity =>
            {
                entity.HasKey(e => new { e.PartyNeedId, e.PartyId, e.RoleTypeId });

                entity.ToTable("PARTY_NEED");

                entity.HasIndex(e => e.CommunicationEventId, "PARTY_NEED_CMEV");

                entity.HasIndex(e => e.NeedTypeId, "PARTY_NEED_NDTP");

                entity.HasIndex(e => e.ProductCategoryId, "PARTY_NEED_PCAT");

                entity.HasIndex(e => e.ProductId, "PARTY_NEED_PROD");

                entity.HasIndex(e => e.PartyTypeId, "PARTY_NEED_PTTP");

                entity.HasIndex(e => e.PartyId, "PARTY_NEED_PTY");

                entity.HasIndex(e => e.RoleTypeId, "PARTY_NEED_RTYP");

                entity.HasIndex(e => e.CreatedTxStamp, "PARTY_NEED_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PARTY_NEED_TXSTMP");

                entity.Property(e => e.PartyNeedId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_NEED_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.CommunicationEventId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COMMUNICATION_EVENT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DatetimeRecorded)
                    .HasColumnType("datetime")
                    .HasColumnName("DATETIME_RECORDED");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.NeedTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("NEED_TYPE_ID");

                entity.Property(e => e.PartyTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_TYPE_ID");

                entity.Property(e => e.ProductCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CATEGORY_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.VisitId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VISIT_ID");

                entity.HasOne(d => d.CommunicationEvent)
                    .WithMany(p => p.PartyNeeds)
                    .HasForeignKey(d => d.CommunicationEventId)
                    .HasConstraintName("PARTY_NEED_CMEV");

                entity.HasOne(d => d.NeedType)
                    .WithMany(p => p.PartyNeeds)
                    .HasForeignKey(d => d.NeedTypeId)
                    .HasConstraintName("PARTY_NEED_NDTP");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PartyNeeds)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_NEED_PTY");

                entity.HasOne(d => d.PartyType)
                    .WithMany(p => p.PartyNeeds)
                    .HasForeignKey(d => d.PartyTypeId)
                    .HasConstraintName("PARTY_NEED_PTTP");

                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.PartyNeeds)
                    .HasForeignKey(d => d.ProductCategoryId)
                    .HasConstraintName("PARTY_NEED_PCAT");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.PartyNeeds)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("PARTY_NEED_PROD");

                entity.HasOne(d => d.RoleType)
                    .WithMany(p => p.PartyNeeds)
                    .HasForeignKey(d => d.RoleTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_NEED_RTYP");
            });

            modelBuilder.Entity<PartyNote>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.NoteId });

                entity.ToTable("PARTY_NOTE");

                entity.HasIndex(e => e.NoteId, "PARTY_NOTE_NOTE");

                entity.HasIndex(e => e.PartyId, "PARTY_NOTE_PARTY");

                entity.HasIndex(e => e.CreatedTxStamp, "PARTY_NOTE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PARTY_NOTE_TXSTMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.NoteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("NOTE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Note)
                    .WithMany(p => p.PartyNotes)
                    .HasForeignKey(d => d.NoteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_NOTE_NOTE");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PartyNotes)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_NOTE_PARTY");
            });

            modelBuilder.Entity<PartyPrefDocTypeTpl>(entity =>
            {
                entity.ToTable("PARTY_PREF_DOC_TYPE_TPL");

                entity.HasIndex(e => e.InvoiceTypeId, "PAPDTT_TO_INVT");

                entity.HasIndex(e => e.OrderTypeId, "PAPDTT_TO_ORDT");

                entity.HasIndex(e => e.PartyId, "PAPDTT_TO_PAP");

                entity.HasIndex(e => e.PartyId, "PAPDTT_TO_PTY");

                entity.HasIndex(e => e.QuoteTypeId, "PAPDTT_TO_QUOT");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_DC_TP_TPL_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_DC_TP_TPL_TS");

                entity.Property(e => e.PartyPrefDocTypeTplId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_PREF_DOC_TYPE_TPL_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CustomScreenId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_SCREEN_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.InvoiceTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_TYPE_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OrderTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.QuoteTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_TYPE_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.InvoiceType)
                    .WithMany(p => p.PartyPrefDocTypeTpls)
                    .HasForeignKey(d => d.InvoiceTypeId)
                    .HasConstraintName("PAPDTT_TO_INVT");

                entity.HasOne(d => d.OrderType)
                    .WithMany(p => p.PartyPrefDocTypeTpls)
                    .HasForeignKey(d => d.OrderTypeId)
                    .HasConstraintName("PAPDTT_TO_ORDT");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PartyPrefDocTypeTpls)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("PAPDTT_TO_PTY");

                entity.HasOne(d => d.PartyNavigation)
                    .WithMany(p => p.PartyPrefDocTypeTpls)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("PAPDTT_TO_PAP");

                entity.HasOne(d => d.QuoteType)
                    .WithMany(p => p.PartyPrefDocTypeTpls)
                    .HasForeignKey(d => d.QuoteTypeId)
                    .HasConstraintName("PAPDTT_TO_QUOT");
            });

            modelBuilder.Entity<PartyProfileDefault>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.ProductStoreId });

                entity.ToTable("PARTY_PROFILE_DEFAULT");

                entity.HasIndex(e => e.PartyId, "PARTY_PROF_PARTY");

                entity.HasIndex(e => e.ProductStoreId, "PARTY_PROF_PSTORE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_PRL_DFT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_PRL_DFT_TXSTMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DefaultBillAddr)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULT_BILL_ADDR");

                entity.Property(e => e.DefaultPayMeth)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULT_PAY_METH");

                entity.Property(e => e.DefaultShipAddr)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULT_SHIP_ADDR");

                entity.Property(e => e.DefaultShipMeth)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULT_SHIP_METH");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PartyProfileDefaults)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_PROF_PARTY");

                entity.HasOne(d => d.ProductStore)
                    .WithMany(p => p.PartyProfileDefaults)
                    .HasForeignKey(d => d.ProductStoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_PROF_PSTORE");
            });

            modelBuilder.Entity<PartyQual>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.PartyQualTypeId, e.FromDate });

                entity.ToTable("PARTY_QUAL");

                entity.HasIndex(e => e.PartyQualTypeId, "PARTY_QUAL_PQTYP");

                entity.HasIndex(e => e.PartyId, "PARTY_QUAL_PRTY");

                entity.HasIndex(e => e.StatusId, "PARTY_QUAL_STATUS");

                entity.HasIndex(e => e.CreatedTxStamp, "PARTY_QUAL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PARTY_QUAL_TXSTMP");

                entity.HasIndex(e => e.VerifStatusId, "PARTY_QUAL_VERIF");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.PartyQualTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_QUAL_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.QualificationDesc)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("QUALIFICATION_DESC");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.Property(e => e.Title)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TITLE");

                entity.Property(e => e.VerifStatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VERIF_STATUS_ID");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PartyQuals)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_QUAL_PRTY");

                entity.HasOne(d => d.PartyQualType)
                    .WithMany(p => p.PartyQuals)
                    .HasForeignKey(d => d.PartyQualTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_QUAL_PQTYP");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.PartyQualStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("PARTY_QUAL_STATUS");

                entity.HasOne(d => d.VerifStatus)
                    .WithMany(p => p.PartyQualVerifStatuses)
                    .HasForeignKey(d => d.VerifStatusId)
                    .HasConstraintName("PARTY_QUAL_VERIF");
            });

            modelBuilder.Entity<PartyQualType>(entity =>
            {
                entity.ToTable("PARTY_QUAL_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "PARTY_QUAL_TPAR");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_QL_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_QL_TP_TXSTMP");

                entity.Property(e => e.PartyQualTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_QUAL_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("PARTY_QUAL_TPAR");
            });

            modelBuilder.Entity<PartyRateNew>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.RateTypeId, e.FromDate });

                entity.ToTable("PARTY_RATE_NEW");

                entity.HasIndex(e => e.PartyId, "PRTY_RATE_PRTY");

                entity.HasIndex(e => e.RateTypeId, "PRTY_RATE_RTTP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_RT_NW_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_RT_NW_TXSTMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RateTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RATE_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DefaultRate)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULT_RATE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PercentageUsed).HasColumnName("PERCENTAGE_USED");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PartyRateNews)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRTY_RATE_PRTY");

                entity.HasOne(d => d.RateType)
                    .WithMany(p => p.PartyRateNews)
                    .HasForeignKey(d => d.RateTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRTY_RATE_RTTP");
            });

            modelBuilder.Entity<PartyRelationship>(entity =>
            {
                entity.HasKey(e => new { e.PartyIdFrom, e.PartyIdTo, e.RoleTypeIdFrom, e.RoleTypeIdTo, e.FromDate });

                entity.ToTable("PARTY_RELATIONSHIP");

                entity.HasIndex(e => new { e.PartyIdFrom, e.RoleTypeIdFrom }, "PARTY_REL_FPROLE");

                entity.HasIndex(e => e.PriorityTypeId, "PARTY_REL_PRTYP");

                entity.HasIndex(e => e.SecurityGroupId, "PARTY_REL_SECGRP");

                entity.HasIndex(e => e.StatusId, "PARTY_REL_STTS");

                entity.HasIndex(e => new { e.PartyIdTo, e.RoleTypeIdTo }, "PARTY_REL_TPROLE");

                entity.HasIndex(e => e.PartyRelationshipTypeId, "PARTY_REL_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_RLTNSHP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_RLTNSHP_TXSTMP");

                entity.Property(e => e.PartyIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID_FROM");

                entity.Property(e => e.PartyIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID_TO");

                entity.Property(e => e.RoleTypeIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID_FROM");

                entity.Property(e => e.RoleTypeIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID_TO");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PartyRelationshipTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_RELATIONSHIP_TYPE_ID");

                entity.Property(e => e.PermissionsEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PERMISSIONS_ENUM_ID");

                entity.Property(e => e.PositionTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_TITLE");

                entity.Property(e => e.PriorityTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRIORITY_TYPE_ID");

                entity.Property(e => e.RelationshipName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RELATIONSHIP_NAME");

                entity.Property(e => e.SecurityGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_GROUP_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.PartyRelationshipType)
                    .WithMany(p => p.PartyRelationships)
                    .HasForeignKey(d => d.PartyRelationshipTypeId)
                    .HasConstraintName("PARTY_REL_TYPE");

                entity.HasOne(d => d.PriorityType)
                    .WithMany(p => p.PartyRelationships)
                    .HasForeignKey(d => d.PriorityTypeId)
                    .HasConstraintName("PARTY_REL_PRTYP");

                entity.HasOne(d => d.SecurityGroup)
                    .WithMany(p => p.PartyRelationships)
                    .HasForeignKey(d => d.SecurityGroupId)
                    .HasConstraintName("PARTY_REL_SECGRP");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.PartyRelationships)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("PARTY_REL_STTS");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.PartyRelationshipPartyRoles)
                    .HasForeignKey(d => new { d.PartyIdFrom, d.RoleTypeIdFrom })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_REL_FPROLE");

                entity.HasOne(d => d.PartyRoleNavigation)
                    .WithMany(p => p.PartyRelationshipPartyRoleNavigations)
                    .HasForeignKey(d => new { d.PartyIdTo, d.RoleTypeIdTo })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_REL_TPROLE");
            });

            modelBuilder.Entity<PartyRelationshipType>(entity =>
            {
                entity.ToTable("PARTY_RELATIONSHIP_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "PARTY_RELTYP_PAR");

                entity.HasIndex(e => e.RoleTypeIdValidFrom, "PARTY_RELTYP_VFRT");

                entity.HasIndex(e => e.RoleTypeIdValidTo, "PARTY_RELTYP_VTRT");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_RLTNP_TP_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_RLTNP_TP_TXSTP");

                entity.Property(e => e.PartyRelationshipTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_RELATIONSHIP_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.Property(e => e.PartyRelationshipName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_RELATIONSHIP_NAME");

                entity.Property(e => e.RoleTypeIdValidFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID_VALID_FROM");

                entity.Property(e => e.RoleTypeIdValidTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID_VALID_TO");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("PARTY_RELTYP_PAR");

                entity.HasOne(d => d.RoleTypeIdValidFromNavigation)
                    .WithMany(p => p.PartyRelationshipTypeRoleTypeIdValidFromNavigations)
                    .HasForeignKey(d => d.RoleTypeIdValidFrom)
                    .HasConstraintName("PARTY_RELTYP_VFRT");

                entity.HasOne(d => d.RoleTypeIdValidToNavigation)
                    .WithMany(p => p.PartyRelationshipTypeRoleTypeIdValidToNavigations)
                    .HasForeignKey(d => d.RoleTypeIdValidTo)
                    .HasConstraintName("PARTY_RELTYP_VTRT");
            });

            modelBuilder.Entity<PartyResume>(entity =>
            {
                entity.HasKey(e => e.ResumeId);

                entity.ToTable("PARTY_RESUME");

                entity.HasIndex(e => e.PartyId, "PARTY_RSME_PRTY");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_RSM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_RSM_TXSTMP");

                entity.Property(e => e.ResumeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RESUME_ID");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.ResumeDate)
                    .HasColumnType("datetime")
                    .HasColumnName("RESUME_DATE");

                entity.Property(e => e.ResumeText)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("RESUME_TEXT");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PartyResumes)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("PARTY_RSME_PRTY");
            });

            modelBuilder.Entity<PartyRole>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.RoleTypeId });

                entity.ToTable("PARTY_ROLE");

                entity.HasIndex(e => e.PartyId, "PARTY_RLE_PARTY");

                entity.HasIndex(e => e.RoleTypeId, "PARTY_RLE_ROLE");

                entity.HasIndex(e => e.CreatedTxStamp, "PARTY_ROLE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PARTY_ROLE_TXSTMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PartyRoles)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_RLE_PARTY");

                entity.HasOne(d => d.RoleType)
                    .WithMany(p => p.PartyRoles)
                    .HasForeignKey(d => d.RoleTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_RLE_ROLE");
            });

            modelBuilder.Entity<PartySkill>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.SkillTypeId });

                entity.ToTable("PARTY_SKILL");

                entity.HasIndex(e => e.CreatedTxStamp, "PARTY_SKILL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PARTY_SKILL_TXSTMP");

                entity.HasIndex(e => e.PartyId, "PARTY_SKLL_PRTY");

                entity.HasIndex(e => e.SkillTypeId, "PARTY_SKLL_SKTP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.SkillTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SKILL_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Rating).HasColumnName("RATING");

                entity.Property(e => e.SkillLevel).HasColumnName("SKILL_LEVEL");

                entity.Property(e => e.StartedUsingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STARTED_USING_DATE");

                entity.Property(e => e.YearsExperience).HasColumnName("YEARS_EXPERIENCE");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PartySkills)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_SKLL_PRTY");

                entity.HasOne(d => d.SkillType)
                    .WithMany(p => p.PartySkills)
                    .HasForeignKey(d => d.SkillTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_SKLL_SKTP");
            });

            modelBuilder.Entity<PartyStatus>(entity =>
            {
                entity.HasKey(e => new { e.StatusId, e.PartyId, e.StatusDate });

                entity.ToTable("PARTY_STATUS");

                entity.HasIndex(e => e.PartyId, "PARTY_STS_PARTY");

                entity.HasIndex(e => e.StatusId, "PARTY_STS_STSITM");

                entity.HasIndex(e => e.ChangeByUserLoginId, "PARTY_STTS_USRLGN");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_STTS_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_STTS_TXSTMP");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.StatusDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STATUS_DATE");

                entity.Property(e => e.ChangeByUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ChangeByUserLogin)
                    .WithMany(p => p.PartyStatuses)
                    .HasForeignKey(d => d.ChangeByUserLoginId)
                    .HasConstraintName("PARTY_STTS_USRLGN");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PartyStatuses)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_STS_PARTY");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.PartyStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_STS_STSITM");
            });

            modelBuilder.Entity<PartyTaxAuthInfo>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.TaxAuthGeoId, e.TaxAuthPartyId, e.FromDate });

                entity.ToTable("PARTY_TAX_AUTH_INFO");

                entity.HasIndex(e => e.PartyId, "PARTY_TXAI_PTY");

                entity.HasIndex(e => new { e.TaxAuthGeoId, e.TaxAuthPartyId }, "PARTY_TXAI_TXA");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_TX_ATH_INF_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_TX_ATH_INF_TXS");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.TaxAuthGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTH_GEO_ID");

                entity.Property(e => e.TaxAuthPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTH_PARTY_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.IsExempt)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_EXEMPT")
                    .IsFixedLength();

                entity.Property(e => e.IsNexus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_NEXUS")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PartyTaxId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_TAX_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PartyTaxAuthInfos)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_TXAI_PTY");

                entity.HasOne(d => d.TaxAuth)
                    .WithMany(p => p.PartyTaxAuthInfos)
                    .HasForeignKey(d => new { d.TaxAuthGeoId, d.TaxAuthPartyId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_TXAI_TXA");
            });

            modelBuilder.Entity<PartyType>(entity =>
            {
                entity.ToTable("PARTY_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "PARTY_TYPE_PAR");

                entity.HasIndex(e => e.CreatedTxStamp, "PARTY_TYPE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PARTY_TYPE_TXSTMP");

                entity.Property(e => e.PartyTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("PARTY_TYPE_PAR");
            });

            modelBuilder.Entity<PartyTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.PartyTypeId, e.AttrName });

                entity.ToTable("PARTY_TYPE_ATTR");

                entity.HasIndex(e => e.PartyTypeId, "PARTY_TYP_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_TP_ATTR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_TP_ATTR_TXSTMP");

                entity.Property(e => e.PartyTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.PartyType)
                    .WithMany(p => p.PartyTypeAttrs)
                    .HasForeignKey(d => d.PartyTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PARTY_TYP_ATTR");
            });

            modelBuilder.Entity<PayGrade>(entity =>
            {
                entity.ToTable("PAY_GRADE");

                entity.HasIndex(e => e.CreatedTxStamp, "PAY_GRADE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PAY_GRADE_TXSTMP");

                entity.Property(e => e.PayGradeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAY_GRADE_ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PayGradeName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PAY_GRADE_NAME");
            });

            modelBuilder.Entity<PayHistory>(entity =>
            {
                entity.HasKey(e => new { e.RoleTypeIdFrom, e.RoleTypeIdTo, e.PartyIdFrom, e.PartyIdTo, e.EmplFromDate, e.FromDate });

                entity.ToTable("PAY_HISTORY");

                entity.HasIndex(e => e.CreatedTxStamp, "PAY_HISTORY_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PAY_HISTORY_TXSTMP");

                entity.HasIndex(e => new { e.RoleTypeIdFrom, e.RoleTypeIdTo, e.PartyIdFrom, e.PartyIdTo, e.EmplFromDate }, "PAY_HIST_EMPLMNT");

                entity.HasIndex(e => e.PeriodTypeId, "PAY_HIST_PDTP");

                entity.HasIndex(e => e.PayGradeId, "PAY_HIST_PGRD");

                entity.Property(e => e.RoleTypeIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID_FROM");

                entity.Property(e => e.RoleTypeIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID_TO");

                entity.Property(e => e.PartyIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID_FROM");

                entity.Property(e => e.PartyIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID_TO");

                entity.Property(e => e.EmplFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EMPL_FROM_DATE");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PayGradeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAY_GRADE_ID");

                entity.Property(e => e.PeriodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_TYPE_ID");

                entity.Property(e => e.SalaryStepSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SALARY_STEP_SEQ_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.PayGrade)
                    .WithMany(p => p.PayHistories)
                    .HasForeignKey(d => d.PayGradeId)
                    .HasConstraintName("PAY_HIST_PGRD");

                entity.HasOne(d => d.PeriodType)
                    .WithMany(p => p.PayHistories)
                    .HasForeignKey(d => d.PeriodTypeId)
                    .HasConstraintName("PAY_HIST_PDTP");

                entity.HasOne(d => d.Employment)
                    .WithMany(p => p.PayHistories)
                    .HasForeignKey(d => new { d.RoleTypeIdFrom, d.RoleTypeIdTo, d.PartyIdFrom, d.PartyIdTo, d.EmplFromDate })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PAY_HIST_EMPLMNT");
            });

            modelBuilder.Entity<PayPalPaymentMethod>(entity =>
            {
                entity.HasKey(e => e.PaymentMethodId);

                entity.ToTable("PAY_PAL_PAYMENT_METHOD");

                entity.HasIndex(e => e.ContactMechId, "PAYPAL_CMECH");

                entity.HasIndex(e => e.ContactMechId, "PAYPAL_PADDR");

                entity.HasIndex(e => e.PaymentMethodId, "PAYPAL_PMNTMETH");

                entity.HasIndex(e => e.CreatedTxStamp, "P_PL_PMT_MTD_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "P_PL_PMT_MTD_TXSTP");

                entity.Property(e => e.PaymentMethodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_METHOD_ID");

                entity.Property(e => e.AvsAddr)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AVS_ADDR")
                    .IsFixedLength();

                entity.Property(e => e.AvsZip)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AVS_ZIP")
                    .IsFixedLength();

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.CorrelationId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CORRELATION_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.ExpressCheckoutToken)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("EXPRESS_CHECKOUT_TOKEN");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PayerId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYER_ID");

                entity.Property(e => e.PayerStatus)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("PAYER_STATUS");

                entity.Property(e => e.TransactionId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TRANSACTION_ID");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.PayPalPaymentMethods)
                    .HasForeignKey(d => d.ContactMechId)
                    .HasConstraintName("PAYPAL_CMECH");

                entity.HasOne(d => d.ContactMechNavigation)
                    .WithMany(p => p.PayPalPaymentMethods)
                    .HasForeignKey(d => d.ContactMechId)
                    .HasConstraintName("PAYPAL_PADDR");

                entity.HasOne(d => d.PaymentMethod)
                    .WithOne(p => p.PayPalPaymentMethod)
                    .HasForeignKey<PayPalPaymentMethod>(d => d.PaymentMethodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PAYPAL_PMNTMETH");
            });

            modelBuilder.Entity<Payment>(entity =>
            {
                entity.ToTable("PAYMENT");

                entity.HasIndex(e => e.ActualCurrencyUomId, "PAYMENT_ACUOM");

                entity.HasIndex(e => e.CurrencyUomId, "PAYMENT_CUOM");

                entity.HasIndex(e => e.FinAccountTransId, "PAYMENT_FACTX");

                entity.HasIndex(e => e.PartyIdFrom, "PAYMENT_FPTY");

                entity.HasIndex(e => e.PaymentPreferenceId, "PAYMENT_ORDPMPRF");

                entity.HasIndex(e => e.OverrideGlAccountId, "PAYMENT_ORGLA");

                entity.HasIndex(e => e.PaymentGatewayResponseId, "PAYMENT_PAYGATR");

                entity.HasIndex(e => e.PaymentMethodId, "PAYMENT_PMETH");

                entity.HasIndex(e => e.PaymentMethodTypeId, "PAYMENT_PMETH_TP");

                entity.HasIndex(e => e.PaymentTypeId, "PAYMENT_PMTYP");

                entity.HasIndex(e => e.StatusId, "PAYMENT_STTSITM");

                entity.HasIndex(e => e.PartyIdTo, "PAYMENT_TPTY");

                entity.HasIndex(e => e.RoleTypeIdTo, "PAYMENT_TRTP");

                entity.HasIndex(e => e.CreatedTxStamp, "PAYMENT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PAYMENT_TXSTMP");

                entity.Property(e => e.PaymentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_ID");

                entity.Property(e => e.ActualCurrencyAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ACTUAL_CURRENCY_AMOUNT");

                entity.Property(e => e.ActualCurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACTUAL_CURRENCY_UOM_ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM_ID");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.FinAccountTransId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_TRANS_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OverrideGlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("OVERRIDE_GL_ACCOUNT_ID");

                entity.Property(e => e.PartyIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID_FROM");

                entity.Property(e => e.PartyIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID_TO");

                entity.Property(e => e.PaymentGatewayResponseId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_GATEWAY_RESPONSE_ID");

                entity.Property(e => e.PaymentMethodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_METHOD_ID");

                entity.Property(e => e.PaymentMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_METHOD_TYPE_ID");

                entity.Property(e => e.PaymentPreferenceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_PREFERENCE_ID");

                entity.Property(e => e.PaymentRefNum)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_REF_NUM");

                entity.Property(e => e.PaymentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_TYPE_ID");

                entity.Property(e => e.RoleTypeIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID_TO");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.HasOne(d => d.ActualCurrencyUom)
                    .WithMany(p => p.PaymentActualCurrencyUoms)
                    .HasForeignKey(d => d.ActualCurrencyUomId)
                    .HasConstraintName("PAYMENT_ACUOM");

                entity.HasOne(d => d.CurrencyUom)
                    .WithMany(p => p.PaymentCurrencyUoms)
                    .HasForeignKey(d => d.CurrencyUomId)
                    .HasConstraintName("PAYMENT_CUOM");

                entity.HasOne(d => d.FinAccountTransNavigation)
                    .WithMany(p => p.Payments)
                    .HasForeignKey(d => d.FinAccountTransId)
                    .HasConstraintName("PAYMENT_FACTX");

                entity.HasOne(d => d.OverrideGlAccount)
                    .WithMany(p => p.Payments)
                    .HasForeignKey(d => d.OverrideGlAccountId)
                    .HasConstraintName("PAYMENT_ORGLA");

                entity.HasOne(d => d.PartyIdFromNavigation)
                    .WithMany(p => p.PaymentPartyIdFromNavigations)
                    .HasForeignKey(d => d.PartyIdFrom)
                    .HasConstraintName("PAYMENT_FPTY");

                entity.HasOne(d => d.PartyIdToNavigation)
                    .WithMany(p => p.PaymentPartyIdToNavigations)
                    .HasForeignKey(d => d.PartyIdTo)
                    .HasConstraintName("PAYMENT_TPTY");

                entity.HasOne(d => d.PaymentGatewayResponse)
                    .WithMany(p => p.Payments)
                    .HasForeignKey(d => d.PaymentGatewayResponseId)
                    .HasConstraintName("PAYMENT_PAYGATR");

                entity.HasOne(d => d.PaymentMethod)
                    .WithMany(p => p.Payments)
                    .HasForeignKey(d => d.PaymentMethodId)
                    .HasConstraintName("PAYMENT_PMETH");

                entity.HasOne(d => d.PaymentMethodType)
                    .WithMany(p => p.Payments)
                    .HasForeignKey(d => d.PaymentMethodTypeId)
                    .HasConstraintName("PAYMENT_PMETH_TP");

                entity.HasOne(d => d.PaymentPreference)
                    .WithMany(p => p.Payments)
                    .HasForeignKey(d => d.PaymentPreferenceId)
                    .HasConstraintName("PAYMENT_ORDPMPRF");

                entity.HasOne(d => d.PaymentType)
                    .WithMany(p => p.Payments)
                    .HasForeignKey(d => d.PaymentTypeId)
                    .HasConstraintName("PAYMENT_PMTYP");

                entity.HasOne(d => d.RoleTypeIdToNavigation)
                    .WithMany(p => p.Payments)
                    .HasForeignKey(d => d.RoleTypeIdTo)
                    .HasConstraintName("PAYMENT_TRTP");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Payments)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("PAYMENT_STTSITM");
            });

            modelBuilder.Entity<PaymentApplication>(entity =>
            {
                entity.ToTable("PAYMENT_APPLICATION");

                entity.HasIndex(e => e.BillingAccountId, "PAYMENT_APP_BACT");

                entity.HasIndex(e => e.TaxAuthGeoId, "PAYMENT_APP_GEO");

                entity.HasIndex(e => e.InvoiceId, "PAYMENT_APP_INV");

                entity.HasIndex(e => e.OverrideGlAccountId, "PAYMENT_APP_ORGLA");

                entity.HasIndex(e => e.PaymentId, "PAYMENT_APP_PMT");

                entity.HasIndex(e => e.ToPaymentId, "PAYMENT_APP_TPMT");

                entity.HasIndex(e => e.CreatedTxStamp, "PMNT_APPLCN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMNT_APPLCN_TXSTMP");

                entity.Property(e => e.PaymentApplicationId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_APPLICATION_ID");

                entity.Property(e => e.AmountApplied)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AMOUNT_APPLIED");

                entity.Property(e => e.BillingAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_ACCOUNT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.InvoiceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ID");

                entity.Property(e => e.InvoiceItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ITEM_SEQ_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OverrideGlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("OVERRIDE_GL_ACCOUNT_ID");

                entity.Property(e => e.PaymentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_ID");

                entity.Property(e => e.TaxAuthGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTH_GEO_ID");

                entity.Property(e => e.ToPaymentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TO_PAYMENT_ID");

                entity.HasOne(d => d.BillingAccount)
                    .WithMany(p => p.PaymentApplications)
                    .HasForeignKey(d => d.BillingAccountId)
                    .HasConstraintName("PAYMENT_APP_BACT");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.PaymentApplications)
                    .HasForeignKey(d => d.InvoiceId)
                    .HasConstraintName("PAYMENT_APP_INV");

                entity.HasOne(d => d.OverrideGlAccount)
                    .WithMany(p => p.PaymentApplications)
                    .HasForeignKey(d => d.OverrideGlAccountId)
                    .HasConstraintName("PAYMENT_APP_ORGLA");

                entity.HasOne(d => d.Payment)
                    .WithMany(p => p.PaymentApplicationPayments)
                    .HasForeignKey(d => d.PaymentId)
                    .HasConstraintName("PAYMENT_APP_PMT");

                entity.HasOne(d => d.TaxAuthGeo)
                    .WithMany(p => p.PaymentApplications)
                    .HasForeignKey(d => d.TaxAuthGeoId)
                    .HasConstraintName("PAYMENT_APP_GEO");

                entity.HasOne(d => d.ToPayment)
                    .WithMany(p => p.PaymentApplicationToPayments)
                    .HasForeignKey(d => d.ToPaymentId)
                    .HasConstraintName("PAYMENT_APP_TPMT");
            });

            modelBuilder.Entity<PaymentAttribute>(entity =>
            {
                entity.HasKey(e => new { e.PaymentId, e.AttrName });

                entity.ToTable("PAYMENT_ATTRIBUTE");

                entity.HasIndex(e => e.PaymentId, "PAYMENT_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "PMNT_ATTRBT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMNT_ATTRBT_TXSTMP");

                entity.Property(e => e.PaymentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Payment)
                    .WithMany(p => p.PaymentAttributes)
                    .HasForeignKey(d => d.PaymentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PAYMENT_ATTR");
            });

            modelBuilder.Entity<PaymentBudgetAllocation>(entity =>
            {
                entity.HasKey(e => new { e.BudgetId, e.BudgetItemSeqId, e.PaymentId });

                entity.ToTable("PAYMENT_BUDGET_ALLOCATION");

                entity.HasIndex(e => e.BudgetId, "PAYMENT_BA_BDGT");

                entity.HasIndex(e => e.PaymentId, "PAYMENT_BA_PMT");

                entity.HasIndex(e => e.CreatedTxStamp, "PMT_BDT_ALLN_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMT_BDT_ALLN_TXSTP");

                entity.Property(e => e.BudgetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ID");

                entity.Property(e => e.BudgetItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ITEM_SEQ_ID");

                entity.Property(e => e.PaymentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Budget)
                    .WithMany(p => p.PaymentBudgetAllocations)
                    .HasForeignKey(d => d.BudgetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PAYMENT_BA_BDGT");

                entity.HasOne(d => d.Payment)
                    .WithMany(p => p.PaymentBudgetAllocations)
                    .HasForeignKey(d => d.PaymentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PAYMENT_BA_PMT");
            });

            modelBuilder.Entity<PaymentContent>(entity =>
            {
                entity.HasKey(e => new { e.ContentId, e.PaymentId, e.PaymentContentTypeId, e.FromDate });

                entity.ToTable("PAYMENT_CONTENT");

                entity.HasIndex(e => e.ContentId, "PAYMENT_CNT_CNT");

                entity.HasIndex(e => e.PaymentId, "PAYMENT_CNT_PROD");

                entity.HasIndex(e => e.PaymentContentTypeId, "PAYMENT_CNT_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "PMNT_CNTNT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMNT_CNTNT_TXSTMP");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.PaymentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_ID");

                entity.Property(e => e.PaymentContentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_CONTENT_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.PaymentContents)
                    .HasForeignKey(d => d.ContentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PAYMENT_CNT_CNT");

                entity.HasOne(d => d.PaymentContentType)
                    .WithMany(p => p.PaymentContents)
                    .HasForeignKey(d => d.PaymentContentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PAYMENT_CNT_TYPE");

                entity.HasOne(d => d.Payment)
                    .WithMany(p => p.PaymentContents)
                    .HasForeignKey(d => d.PaymentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PAYMENT_CNT_PROD");
            });

            modelBuilder.Entity<PaymentContentType>(entity =>
            {
                entity.ToTable("PAYMENT_CONTENT_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "PAYCT_TYP_PARENT");

                entity.HasIndex(e => e.CreatedTxStamp, "PMT_CNTT_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMT_CNTT_TP_TXSTMP");

                entity.Property(e => e.PaymentContentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_CONTENT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("PAYCT_TYP_PARENT");
            });

            modelBuilder.Entity<PaymentGatewayAuthorizeNet>(entity =>
            {
                entity.HasKey(e => e.PaymentGatewayConfigId)
                    .HasName("PK_PAYMENT_GATEWAY_AUTHORIZE_N");

                entity.ToTable("PAYMENT_GATEWAY_AUTHORIZE_NET");

                entity.HasIndex(e => e.PaymentGatewayConfigId, "PGAN_PGC");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMT_GTW_ATZ_NT_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "PMT_GTW_ATZ_NT_TXS");

                entity.Property(e => e.PaymentGatewayConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID");

                entity.Property(e => e.ApiVersion)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("API_VERSION");

                entity.Property(e => e.CertificateAlias)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CERTIFICATE_ALIAS");

                entity.Property(e => e.CpDeviceType)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CP_DEVICE_TYPE");

                entity.Property(e => e.CpMarketType)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CP_MARKET_TYPE");

                entity.Property(e => e.CpVersion)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CP_VERSION");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DelimitedData)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DELIMITED_DATA");

                entity.Property(e => e.DelimiterChar)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DELIMITER_CHAR");

                entity.Property(e => e.DuplicateWindow).HasColumnName("DUPLICATE_WINDOW");

                entity.Property(e => e.EmailCustomer)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_CUSTOMER");

                entity.Property(e => e.EmailMerchant)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_MERCHANT");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Method)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("METHOD");

                entity.Property(e => e.Pwd)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PWD");

                entity.Property(e => e.RelayResponse)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("RELAY_RESPONSE");

                entity.Property(e => e.TestMode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TEST_MODE");

                entity.Property(e => e.TranKey)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TRAN_KEY");

                entity.Property(e => e.TransDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TRANS_DESCRIPTION");

                entity.Property(e => e.TransactionUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TRANSACTION_URL");

                entity.Property(e => e.UserId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.HasOne(d => d.PaymentGatewayConfig)
                    .WithOne(p => p.PaymentGatewayAuthorizeNet)
                    .HasForeignKey<PaymentGatewayAuthorizeNet>(d => d.PaymentGatewayConfigId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PGAN_PGC");
            });

            modelBuilder.Entity<PaymentGatewayClearCommerce>(entity =>
            {
                entity.HasKey(e => e.PaymentGatewayConfigId)
                    .HasName("PK_PAYMENT_GATEWAY_CLEAR_COMME");

                entity.ToTable("PAYMENT_GATEWAY_CLEAR_COMMERCE");

                entity.HasIndex(e => e.PaymentGatewayConfigId, "PGCC_PGC");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMT_GTW_CLR_CMC_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PMT_GTW_CLR_CMC_TS");

                entity.Property(e => e.PaymentGatewayConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID");

                entity.Property(e => e.ClientId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CLIENT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.EffectiveAlias)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("EFFECTIVE_ALIAS");

                entity.Property(e => e.EnableCVM)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ENABLE_C_V_M")
                    .IsFixedLength();

                entity.Property(e => e.GroupId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ProcessMode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PROCESS_MODE")
                    .IsFixedLength();

                entity.Property(e => e.Pwd)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PWD");

                entity.Property(e => e.ServerURL)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SERVER_U_R_L");

                entity.Property(e => e.SourceId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SOURCE_ID");

                entity.Property(e => e.UserAlias)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("USER_ALIAS");

                entity.Property(e => e.Username)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.HasOne(d => d.PaymentGatewayConfig)
                    .WithOne(p => p.PaymentGatewayClearCommerce)
                    .HasForeignKey<PaymentGatewayClearCommerce>(d => d.PaymentGatewayConfigId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PGCC_PGC");
            });

            modelBuilder.Entity<PaymentGatewayConfig>(entity =>
            {
                entity.ToTable("PAYMENT_GATEWAY_CONFIG");

                entity.HasIndex(e => e.PaymentGatewayConfigTypeId, "PGC_PGCT");

                entity.HasIndex(e => e.CreatedTxStamp, "PMT_GTW_CNG_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMT_GTW_CNG_TXSTMP");

                entity.Property(e => e.PaymentGatewayConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PaymentGatewayConfigTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_GATEWAY_CONFIG_TYPE_ID");

                entity.HasOne(d => d.PaymentGatewayConfigType)
                    .WithMany(p => p.PaymentGatewayConfigs)
                    .HasForeignKey(d => d.PaymentGatewayConfigTypeId)
                    .HasConstraintName("PGC_PGCT");
            });

            modelBuilder.Entity<PaymentGatewayConfigType>(entity =>
            {
                entity.ToTable("PAYMENT_GATEWAY_CONFIG_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "PGCT_PAR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMT_GTW_CNG_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "PMT_GTW_CNG_TP_TXS");

                entity.Property(e => e.PaymentGatewayConfigTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_GATEWAY_CONFIG_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("PGCT_PAR");
            });

            modelBuilder.Entity<PaymentGatewayCyberSource>(entity =>
            {
                entity.HasKey(e => e.PaymentGatewayConfigId)
                    .HasName("PK_PAYMENT_GATEWAY_CYBER_SOURC");

                entity.ToTable("PAYMENT_GATEWAY_CYBER_SOURCE");

                entity.HasIndex(e => e.PaymentGatewayConfigId, "PGCS_PGC");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMT_GTW_CBR_SRC_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PMT_GTW_CBR_SRC_TS");

                entity.Property(e => e.PaymentGatewayConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID");

                entity.Property(e => e.ApiVersion)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("API_VERSION");

                entity.Property(e => e.AutoBill)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("AUTO_BILL");

                entity.Property(e => e.AvsDeclineCodes)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("AVS_DECLINE_CODES");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DisableBillAvs)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DISABLE_BILL_AVS")
                    .IsFixedLength();

                entity.Property(e => e.EnableDav)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ENABLE_DAV")
                    .IsFixedLength();

                entity.Property(e => e.FraudScore)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FRAUD_SCORE")
                    .IsFixedLength();

                entity.Property(e => e.IgnoreAvs)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("IGNORE_AVS");

                entity.Property(e => e.KeysDir)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("KEYS_DIR");

                entity.Property(e => e.KeysFile)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("KEYS_FILE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LogDir)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LOG_DIR");

                entity.Property(e => e.LogEnabled)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LOG_ENABLED");

                entity.Property(e => e.LogFile)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LOG_FILE");

                entity.Property(e => e.LogSize).HasColumnName("LOG_SIZE");

                entity.Property(e => e.MerchantContact)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MERCHANT_CONTACT");

                entity.Property(e => e.MerchantDescr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MERCHANT_DESCR");

                entity.Property(e => e.MerchantId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MERCHANT_ID");

                entity.Property(e => e.Production)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCTION");

                entity.HasOne(d => d.PaymentGatewayConfig)
                    .WithOne(p => p.PaymentGatewayCyberSource)
                    .HasForeignKey<PaymentGatewayCyberSource>(d => d.PaymentGatewayConfigId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PGCS_PGC");
            });

            modelBuilder.Entity<PaymentGatewayEway>(entity =>
            {
                entity.HasKey(e => e.PaymentGatewayConfigId);

                entity.ToTable("PAYMENT_GATEWAY_EWAY");

                entity.HasIndex(e => e.PaymentGatewayConfigId, "PGEW_PGC");

                entity.HasIndex(e => e.CreatedTxStamp, "PMNT_GTW_EW_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMNT_GTW_EW_TXSTMP");

                entity.Property(e => e.PaymentGatewayConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.EnableBeagle)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ENABLE_BEAGLE");

                entity.Property(e => e.EnableCvn)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ENABLE_CVN");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.RefundPwd)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REFUND_PWD");

                entity.Property(e => e.TestMode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TEST_MODE");

                entity.HasOne(d => d.PaymentGatewayConfig)
                    .WithOne(p => p.PaymentGatewayEway)
                    .HasForeignKey<PaymentGatewayEway>(d => d.PaymentGatewayConfigId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PGEW_PGC");
            });

            modelBuilder.Entity<PaymentGatewayOrbital>(entity =>
            {
                entity.HasKey(e => e.PaymentGatewayConfigId);

                entity.ToTable("PAYMENT_GATEWAY_ORBITAL");

                entity.HasIndex(e => e.PaymentGatewayConfigId, "PGORB_PGC");

                entity.HasIndex(e => e.CreatedTxStamp, "PMT_GTW_ORBL_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMT_GTW_ORBL_TXSTP");

                entity.Property(e => e.PaymentGatewayConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID");

                entity.Property(e => e.AuthorizationURI)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("AUTHORIZATION_U_R_I");

                entity.Property(e => e.ConnectionPassword)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CONNECTION_PASSWORD");

                entity.Property(e => e.ConnectionTimeoutSeconds).HasColumnName("CONNECTION_TIMEOUT_SECONDS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.EngineClass)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENGINE_CLASS");

                entity.Property(e => e.HostName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("HOST_NAME");

                entity.Property(e => e.HostNameFailover)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("HOST_NAME_FAILOVER");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MerchantId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MERCHANT_ID");

                entity.Property(e => e.Port).HasColumnName("PORT");

                entity.Property(e => e.PortFailover).HasColumnName("PORT_FAILOVER");

                entity.Property(e => e.ReadTimeoutSeconds).HasColumnName("READ_TIMEOUT_SECONDS");

                entity.Property(e => e.ResponseType)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("RESPONSE_TYPE");

                entity.Property(e => e.SdkVersion)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SDK_VERSION");

                entity.Property(e => e.SslSocketFactory)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SSL_SOCKET_FACTORY");

                entity.Property(e => e.Username)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.HasOne(d => d.PaymentGatewayConfig)
                    .WithOne(p => p.PaymentGatewayOrbital)
                    .HasForeignKey<PaymentGatewayOrbital>(d => d.PaymentGatewayConfigId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PGORB_PGC");
            });

            modelBuilder.Entity<PaymentGatewayPayPal>(entity =>
            {
                entity.HasKey(e => e.PaymentGatewayConfigId);

                entity.ToTable("PAYMENT_GATEWAY_PAY_PAL");

                entity.HasIndex(e => e.PaymentGatewayConfigId, "PGPP_PGC");

                entity.HasIndex(e => e.CreatedTxStamp, "PMT_GTW_P_PL_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMT_GTW_P_PL_TXSTP");

                entity.Property(e => e.PaymentGatewayConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID");

                entity.Property(e => e.ApiEnvironment)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("API_ENVIRONMENT");

                entity.Property(e => e.ApiPassword)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("API_PASSWORD");

                entity.Property(e => e.ApiSignature)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("API_SIGNATURE");

                entity.Property(e => e.ApiUserName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("API_USER_NAME");

                entity.Property(e => e.BusinessEmail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("BUSINESS_EMAIL");

                entity.Property(e => e.CancelReturnUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CANCEL_RETURN_URL");

                entity.Property(e => e.ConfirmTemplate)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CONFIRM_TEMPLATE");

                entity.Property(e => e.ConfirmUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CONFIRM_URL");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IMAGE_URL");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.NotifyUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NOTIFY_URL");

                entity.Property(e => e.RedirectUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REDIRECT_URL");

                entity.Property(e => e.RequireConfirmedShipping)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REQUIRE_CONFIRMED_SHIPPING")
                    .IsFixedLength();

                entity.Property(e => e.ReturnUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_URL");

                entity.Property(e => e.ShippingCallbackUrl)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SHIPPING_CALLBACK_URL");

                entity.HasOne(d => d.PaymentGatewayConfig)
                    .WithOne(p => p.PaymentGatewayPayPal)
                    .HasForeignKey<PaymentGatewayPayPal>(d => d.PaymentGatewayConfigId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PGPP_PGC");
            });

            modelBuilder.Entity<PaymentGatewayPayflowPro>(entity =>
            {
                entity.HasKey(e => e.PaymentGatewayConfigId);

                entity.ToTable("PAYMENT_GATEWAY_PAYFLOW_PRO");

                entity.HasIndex(e => e.PaymentGatewayConfigId, "PGPF_PGC");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMT_GTW_PFW_PR_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "PMT_GTW_PFW_PR_TXS");

                entity.Property(e => e.PaymentGatewayConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID");

                entity.Property(e => e.CancelReturnUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CANCEL_RETURN_URL");

                entity.Property(e => e.CertsPath)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CERTS_PATH");

                entity.Property(e => e.CheckAvs)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHECK_AVS")
                    .IsFixedLength();

                entity.Property(e => e.CheckCvv2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHECK_CVV2")
                    .IsFixedLength();

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.EnableTransmit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENABLE_TRANSMIT");

                entity.Property(e => e.HostAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("HOST_ADDRESS");

                entity.Property(e => e.HostPort).HasColumnName("HOST_PORT");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LogFileName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LOG_FILE_NAME");

                entity.Property(e => e.LoggingLevel).HasColumnName("LOGGING_LEVEL");

                entity.Property(e => e.MaxLogFileSize).HasColumnName("MAX_LOG_FILE_SIZE");

                entity.Property(e => e.Partner)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("PARTNER");

                entity.Property(e => e.PreAuth)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRE_AUTH")
                    .IsFixedLength();

                entity.Property(e => e.ProxyAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PROXY_ADDRESS");

                entity.Property(e => e.ProxyLogon)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PROXY_LOGON");

                entity.Property(e => e.ProxyPassword)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PROXY_PASSWORD");

                entity.Property(e => e.ProxyPort).HasColumnName("PROXY_PORT");

                entity.Property(e => e.Pwd)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PWD");

                entity.Property(e => e.RedirectUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REDIRECT_URL");

                entity.Property(e => e.ReturnUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_URL");

                entity.Property(e => e.StackTraceOn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("STACK_TRACE_ON")
                    .IsFixedLength();

                entity.Property(e => e.Timeout).HasColumnName("TIMEOUT");

                entity.Property(e => e.UserId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.Vendor)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("VENDOR");

                entity.HasOne(d => d.PaymentGatewayConfig)
                    .WithOne(p => p.PaymentGatewayPayflowPro)
                    .HasForeignKey<PaymentGatewayPayflowPro>(d => d.PaymentGatewayConfigId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PGPF_PGC");
            });

            modelBuilder.Entity<PaymentGatewayRespMsg>(entity =>
            {
                entity.ToTable("PAYMENT_GATEWAY_RESP_MSG");

                entity.HasIndex(e => e.PaymentGatewayResponseId, "PAYGATRM_PAYGR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMT_GTW_RSP_MSG_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PMT_GTW_RSP_MSG_TS");

                entity.Property(e => e.PaymentGatewayRespMsgId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_GATEWAY_RESP_MSG_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PaymentGatewayResponseId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_GATEWAY_RESPONSE_ID");

                entity.Property(e => e.PgrMessage)
                    .HasColumnType("text")
                    .HasColumnName("PGR_MESSAGE");

                entity.HasOne(d => d.PaymentGatewayResponse)
                    .WithMany(p => p.PaymentGatewayRespMsgs)
                    .HasForeignKey(d => d.PaymentGatewayResponseId)
                    .HasConstraintName("PAYGATRM_PAYGR");
            });

            modelBuilder.Entity<PaymentGatewayResponse>(entity =>
            {
                entity.ToTable("PAYMENT_GATEWAY_RESPONSE");

                entity.HasIndex(e => e.CurrencyUomId, "PAYGATR_CUOM");

                entity.HasIndex(e => e.OrderPaymentPreferenceId, "PAYGATR_ORDPMPRF");

                entity.HasIndex(e => e.PaymentMethodId, "PAYGATR_PMETH");

                entity.HasIndex(e => e.PaymentMethodTypeId, "PAYGATR_PMTP");

                entity.HasIndex(e => e.PaymentServiceTypeEnumId, "PAYGATR_PSTENUM");

                entity.HasIndex(e => e.TransCodeEnumId, "PAYGATR_TXCODE");

                entity.HasIndex(e => e.CreatedTxStamp, "PMT_GTW_RSPS_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMT_GTW_RSPS_TXSTP");

                entity.Property(e => e.PaymentGatewayResponseId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_GATEWAY_RESPONSE_ID");

                entity.Property(e => e.AltReference)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ALT_REFERENCE");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM_ID");

                entity.Property(e => e.GatewayAvsResult)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("GATEWAY_AVS_RESULT");

                entity.Property(e => e.GatewayCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("GATEWAY_CODE");

                entity.Property(e => e.GatewayCvResult)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("GATEWAY_CV_RESULT");

                entity.Property(e => e.GatewayFlag)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("GATEWAY_FLAG");

                entity.Property(e => e.GatewayMessage)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GATEWAY_MESSAGE");

                entity.Property(e => e.GatewayScoreResult)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("GATEWAY_SCORE_RESULT");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OrderPaymentPreferenceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_PAYMENT_PREFERENCE_ID");

                entity.Property(e => e.PaymentMethodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_METHOD_ID");

                entity.Property(e => e.PaymentMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_METHOD_TYPE_ID");

                entity.Property(e => e.PaymentServiceTypeEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_SERVICE_TYPE_ENUM_ID");

                entity.Property(e => e.ReferenceNum)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCE_NUM");

                entity.Property(e => e.ResultBadCardNumber)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RESULT_BAD_CARD_NUMBER")
                    .IsFixedLength();

                entity.Property(e => e.ResultBadExpire)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RESULT_BAD_EXPIRE")
                    .IsFixedLength();

                entity.Property(e => e.ResultDeclined)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RESULT_DECLINED")
                    .IsFixedLength();

                entity.Property(e => e.ResultNsf)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RESULT_NSF")
                    .IsFixedLength();

                entity.Property(e => e.SubReference)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SUB_REFERENCE");

                entity.Property(e => e.TransCodeEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TRANS_CODE_ENUM_ID");

                entity.Property(e => e.TransactionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANSACTION_DATE");

                entity.HasOne(d => d.CurrencyUom)
                    .WithMany(p => p.PaymentGatewayResponses)
                    .HasForeignKey(d => d.CurrencyUomId)
                    .HasConstraintName("PAYGATR_CUOM");

                entity.HasOne(d => d.OrderPaymentPreference)
                    .WithMany(p => p.PaymentGatewayResponses)
                    .HasForeignKey(d => d.OrderPaymentPreferenceId)
                    .HasConstraintName("PAYGATR_ORDPMPRF");

                entity.HasOne(d => d.PaymentMethod)
                    .WithMany(p => p.PaymentGatewayResponses)
                    .HasForeignKey(d => d.PaymentMethodId)
                    .HasConstraintName("PAYGATR_PMETH");

                entity.HasOne(d => d.PaymentMethodType)
                    .WithMany(p => p.PaymentGatewayResponses)
                    .HasForeignKey(d => d.PaymentMethodTypeId)
                    .HasConstraintName("PAYGATR_PMTP");

                entity.HasOne(d => d.PaymentServiceTypeEnum)
                    .WithMany(p => p.PaymentGatewayResponsePaymentServiceTypeEnums)
                    .HasForeignKey(d => d.PaymentServiceTypeEnumId)
                    .HasConstraintName("PAYGATR_PSTENUM");

                entity.HasOne(d => d.TransCodeEnum)
                    .WithMany(p => p.PaymentGatewayResponseTransCodeEnums)
                    .HasForeignKey(d => d.TransCodeEnumId)
                    .HasConstraintName("PAYGATR_TXCODE");
            });

            modelBuilder.Entity<PaymentGatewaySagePay>(entity =>
            {
                entity.HasKey(e => e.PaymentGatewayConfigId);

                entity.ToTable("PAYMENT_GATEWAY_SAGE_PAY");

                entity.HasIndex(e => e.PaymentGatewayConfigId, "PGSP_PGC");

                entity.HasIndex(e => e.CreatedTxStamp, "PMT_GTW_SG_P_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMT_GTW_SG_P_TXSTP");

                entity.Property(e => e.PaymentGatewayConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID");

                entity.Property(e => e.AuthenticationTransType)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("AUTHENTICATION_TRANS_TYPE");

                entity.Property(e => e.AuthenticationUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("AUTHENTICATION_URL");

                entity.Property(e => e.AuthoriseTransType)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("AUTHORISE_TRANS_TYPE");

                entity.Property(e => e.AuthoriseUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("AUTHORISE_URL");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ProductionHost)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCTION_HOST");

                entity.Property(e => e.ProtocolVersion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PROTOCOL_VERSION");

                entity.Property(e => e.RefundUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REFUND_URL");

                entity.Property(e => e.ReleaseTransType)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("RELEASE_TRANS_TYPE");

                entity.Property(e => e.ReleaseUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("RELEASE_URL");

                entity.Property(e => e.SagePayMode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SAGE_PAY_MODE");

                entity.Property(e => e.TestingHost)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TESTING_HOST");

                entity.Property(e => e.Vendor)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("VENDOR");

                entity.Property(e => e.VoidUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VOID_URL");

                entity.HasOne(d => d.PaymentGatewayConfig)
                    .WithOne(p => p.PaymentGatewaySagePay)
                    .HasForeignKey<PaymentGatewaySagePay>(d => d.PaymentGatewayConfigId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PGSP_PGC");
            });

            modelBuilder.Entity<PaymentGatewaySecurePay>(entity =>
            {
                entity.HasKey(e => e.PaymentGatewayConfigId);

                entity.ToTable("PAYMENT_GATEWAY_SECURE_PAY");

                entity.HasIndex(e => e.PaymentGatewayConfigId, "PGSCP_PGC");

                entity.HasIndex(e => e.CreatedTxStamp, "PMT_GTW_SCR_P_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMT_GTW_SCR_P_TXSP");

                entity.Property(e => e.PaymentGatewayConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.EnableAmountRound)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ENABLE_AMOUNT_ROUND")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MerchantId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MERCHANT_ID");

                entity.Property(e => e.ProcessTimeout).HasColumnName("PROCESS_TIMEOUT");

                entity.Property(e => e.Pwd)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PWD");

                entity.Property(e => e.ServerURL)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SERVER_U_R_L");

                entity.HasOne(d => d.PaymentGatewayConfig)
                    .WithOne(p => p.PaymentGatewaySecurePay)
                    .HasForeignKey<PaymentGatewaySecurePay>(d => d.PaymentGatewayConfigId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PGSCP_PGC");
            });

            modelBuilder.Entity<PaymentGatewayWorldPay>(entity =>
            {
                entity.HasKey(e => e.PaymentGatewayConfigId);

                entity.ToTable("PAYMENT_GATEWAY_WORLD_PAY");

                entity.HasIndex(e => e.PaymentGatewayConfigId, "PGWP_PGC");

                entity.HasIndex(e => e.CreatedTxStamp, "PMT_GTW_WRD_P_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMT_GTW_WRD_P_TXSP");

                entity.Property(e => e.PaymentGatewayConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID");

                entity.Property(e => e.AuthMode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AUTH_MODE")
                    .IsFixedLength();

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.FixContact)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FIX_CONTACT")
                    .IsFixedLength();

                entity.Property(e => e.HideContact)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HIDE_CONTACT")
                    .IsFixedLength();

                entity.Property(e => e.HideCurrency)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HIDE_CURRENCY")
                    .IsFixedLength();

                entity.Property(e => e.InstId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("INST_ID");

                entity.Property(e => e.LangId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LANG_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.NoLanguageMenu)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NO_LANGUAGE_MENU")
                    .IsFixedLength();

                entity.Property(e => e.RedirectUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REDIRECT_URL");

                entity.Property(e => e.TestMode).HasColumnName("TEST_MODE");

                entity.Property(e => e.WithDelivery)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("WITH_DELIVERY")
                    .IsFixedLength();

                entity.HasOne(d => d.PaymentGatewayConfig)
                    .WithOne(p => p.PaymentGatewayWorldPay)
                    .HasForeignKey<PaymentGatewayWorldPay>(d => d.PaymentGatewayConfigId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PGWP_PGC");
            });

            modelBuilder.Entity<PaymentGlAccountTypeMap>(entity =>
            {
                entity.HasKey(e => new { e.PaymentTypeId, e.OrganizationPartyId });

                entity.ToTable("PAYMENT_GL_ACCOUNT_TYPE_MAP");

                entity.HasIndex(e => e.GlAccountTypeId, "PMTGLACCT_GLACCT");

                entity.HasIndex(e => e.OrganizationPartyId, "PMTGLACCT_PARTY");

                entity.HasIndex(e => e.PaymentTypeId, "PMTGLACCT_PMTTYPE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMT_ACT_TP_MP_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PMT_ACT_TP_MP_TS");

                entity.Property(e => e.PaymentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_TYPE_ID");

                entity.Property(e => e.OrganizationPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_PARTY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GlAccountTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_TYPE_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.GlAccountType)
                    .WithMany(p => p.PaymentGlAccountTypeMaps)
                    .HasForeignKey(d => d.GlAccountTypeId)
                    .HasConstraintName("PMTGLACCT_GLACCT");

                entity.HasOne(d => d.OrganizationParty)
                    .WithMany(p => p.PaymentGlAccountTypeMaps)
                    .HasForeignKey(d => d.OrganizationPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PMTGLACCT_PARTY");

                entity.HasOne(d => d.PaymentType)
                    .WithMany(p => p.PaymentGlAccountTypeMaps)
                    .HasForeignKey(d => d.PaymentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PMTGLACCT_PMTTYPE");
            });

            modelBuilder.Entity<PaymentGroup>(entity =>
            {
                entity.ToTable("PAYMENT_GROUP");

                entity.HasIndex(e => e.PaymentGroupTypeId, "PAYMNTGP_PGTYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "PMNT_GRP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMNT_GRP_TXSTMP");

                entity.Property(e => e.PaymentGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_GROUP_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PaymentGroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_GROUP_NAME");

                entity.Property(e => e.PaymentGroupTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_GROUP_TYPE_ID");

                entity.HasOne(d => d.PaymentGroupType)
                    .WithMany(p => p.PaymentGroups)
                    .HasForeignKey(d => d.PaymentGroupTypeId)
                    .HasConstraintName("PAYMNTGP_PGTYPE");
            });

            modelBuilder.Entity<PaymentGroupMember>(entity =>
            {
                entity.HasKey(e => new { e.PaymentGroupId, e.PaymentId, e.FromDate });

                entity.ToTable("PAYMENT_GROUP_MEMBER");

                entity.HasIndex(e => e.PaymentId, "PAYGRPMMBR_PAYMNT");

                entity.HasIndex(e => e.PaymentGroupId, "PAYGRPMMBR_PG");

                entity.HasIndex(e => e.CreatedTxStamp, "PMT_GRP_MMR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMT_GRP_MMR_TXSTMP");

                entity.Property(e => e.PaymentGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_GROUP_ID");

                entity.Property(e => e.PaymentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.PaymentGroup)
                    .WithMany(p => p.PaymentGroupMembers)
                    .HasForeignKey(d => d.PaymentGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PAYGRPMMBR_PG");

                entity.HasOne(d => d.Payment)
                    .WithMany(p => p.PaymentGroupMembers)
                    .HasForeignKey(d => d.PaymentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PAYGRPMMBR_PAYMNT");
            });

            modelBuilder.Entity<PaymentGroupType>(entity =>
            {
                entity.ToTable("PAYMENT_GROUP_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "PAYMNTGP_TYP_PAR");

                entity.HasIndex(e => e.CreatedTxStamp, "PMNT_GRP_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMNT_GRP_TP_TXSTMP");

                entity.Property(e => e.PaymentGroupTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_GROUP_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("PAYMNTGP_TYP_PAR");
            });

            modelBuilder.Entity<PaymentMethod>(entity =>
            {
                entity.ToTable("PAYMENT_METHOD");

                entity.HasIndex(e => e.FinAccountId, "PAYMETH_FINACCT");

                entity.HasIndex(e => e.GlAccountId, "PAYMETH_GLACCT");

                entity.HasIndex(e => e.PartyId, "PAYMETH_PARTY");

                entity.HasIndex(e => e.PaymentMethodTypeId, "PAYMETH_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "PMNT_MTHD_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMNT_MTHD_TXSTMP");

                entity.Property(e => e.PaymentMethodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_METHOD_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.FinAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.GlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.PaymentMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_METHOD_TYPE_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.FinAccount)
                    .WithMany(p => p.PaymentMethods)
                    .HasForeignKey(d => d.FinAccountId)
                    .HasConstraintName("PAYMETH_FINACCT");

                entity.HasOne(d => d.GlAccount)
                    .WithMany(p => p.PaymentMethods)
                    .HasForeignKey(d => d.GlAccountId)
                    .HasConstraintName("PAYMETH_GLACCT");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PaymentMethods)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("PAYMETH_PARTY");

                entity.HasOne(d => d.PaymentMethodType)
                    .WithMany(p => p.PaymentMethods)
                    .HasForeignKey(d => d.PaymentMethodTypeId)
                    .HasConstraintName("PAYMETH_TYPE");
            });

            modelBuilder.Entity<PaymentMethodType>(entity =>
            {
                entity.ToTable("PAYMENT_METHOD_TYPE");

                entity.HasIndex(e => e.DefaultGlAccountId, "PAYMENT_MTP_DGLAC");

                entity.HasIndex(e => e.CreatedTxStamp, "PMNT_MTD_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMNT_MTD_TP_TXSTMP");

                entity.Property(e => e.PaymentMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_METHOD_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DefaultGlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULT_GL_ACCOUNT_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.DefaultGlAccount)
                    .WithMany(p => p.PaymentMethodTypes)
                    .HasForeignKey(d => d.DefaultGlAccountId)
                    .HasConstraintName("PAYMENT_MTP_DGLAC");
            });

            modelBuilder.Entity<PaymentMethodTypeGlAccount>(entity =>
            {
                entity.HasKey(e => new { e.PaymentMethodTypeId, e.OrganizationPartyId })
                    .HasName("PK_PAYMENT_METHOD_TYPE_GL_ACCO");

                entity.ToTable("PAYMENT_METHOD_TYPE_GL_ACCOUNT");

                entity.HasIndex(e => e.GlAccountId, "PAYMENT_MTGA_GLAC");

                entity.HasIndex(e => e.OrganizationPartyId, "PAYMENT_MTGA_OPTY");

                entity.HasIndex(e => e.PaymentMethodTypeId, "PAYMENT_MTGA_PMT");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMT_TP_GL_ACT_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PMT_TP_GL_ACT_TS");

                entity.Property(e => e.PaymentMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_METHOD_TYPE_ID");

                entity.Property(e => e.OrganizationPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_PARTY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.GlAccount)
                    .WithMany(p => p.PaymentMethodTypeGlAccounts)
                    .HasForeignKey(d => d.GlAccountId)
                    .HasConstraintName("PAYMENT_MTGA_GLAC");

                entity.HasOne(d => d.OrganizationParty)
                    .WithMany(p => p.PaymentMethodTypeGlAccounts)
                    .HasForeignKey(d => d.OrganizationPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PAYMENT_MTGA_OPTY");

                entity.HasOne(d => d.PaymentMethodType)
                    .WithMany(p => p.PaymentMethodTypeGlAccounts)
                    .HasForeignKey(d => d.PaymentMethodTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PAYMENT_MTGA_PMT");
            });

            modelBuilder.Entity<PaymentType>(entity =>
            {
                entity.ToTable("PAYMENT_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "PAYMENT_TYPE_PAR");

                entity.HasIndex(e => e.CreatedTxStamp, "PMNT_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMNT_TP_TXSTMP");

                entity.Property(e => e.PaymentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("PAYMENT_TYPE_PAR");
            });

            modelBuilder.Entity<PaymentTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.PaymentTypeId, e.AttrName });

                entity.ToTable("PAYMENT_TYPE_ATTR");

                entity.HasIndex(e => e.PaymentTypeId, "PAYMETH_TYPE_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "PMNT_TP_ATR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PMNT_TP_ATR_TXSTMP");

                entity.Property(e => e.PaymentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.PaymentType)
                    .WithMany(p => p.PaymentTypeAttrs)
                    .HasForeignKey(d => d.PaymentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PAYMETH_TYPE_ATTR");
            });

            modelBuilder.Entity<PayrollPreference>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.RoleTypeId, e.PayrollPreferenceSeqId });

                entity.ToTable("PAYROLL_PREFERENCE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRLL_PRFRNC_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRLL_PRFRNC_TXSTMP");

                entity.HasIndex(e => e.PartyId, "PRL_PREF_PRTY");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "PRL_PREF_PTRL");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.PayrollPreferenceSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYROLL_PREFERENCE_SEQ_ID");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_NUMBER");

                entity.Property(e => e.BankName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BANK_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DeductionTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEDUCTION_TYPE_ID");

                entity.Property(e => e.FlatAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("FLAT_AMOUNT");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PaymentMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_METHOD_TYPE_ID");

                entity.Property(e => e.Percentage).HasColumnName("PERCENTAGE");

                entity.Property(e => e.PeriodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_TYPE_ID");

                entity.Property(e => e.RoutingNumber)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ROUTING_NUMBER");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PayrollPreferences)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRL_PREF_PRTY");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.PayrollPreferences)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRL_PREF_PTRL");
            });

            modelBuilder.Entity<PerfRatingType>(entity =>
            {
                entity.ToTable("PERF_RATING_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "PERF_RATNG_TYP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRF_RTNG_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRF_RTNG_TP_TXSTMP");

                entity.Property(e => e.PerfRatingTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PERF_RATING_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("PERF_RATNG_TYP");
            });

            modelBuilder.Entity<PerfReview>(entity =>
            {
                entity.HasKey(e => new { e.EmployeePartyId, e.EmployeeRoleTypeId, e.PerfReviewId });

                entity.ToTable("PERF_REVIEW");

                entity.HasIndex(e => e.CreatedTxStamp, "PERF_REVIEW_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PERF_REVIEW_TXSTMP");

                entity.HasIndex(e => new { e.EmployeePartyId, e.EmployeeRoleTypeId }, "PERF_REV_EPTRL");

                entity.HasIndex(e => e.EmployeePartyId, "PERF_REV_EPTY");

                entity.HasIndex(e => e.ManagerPartyId, "PERF_REV_MPTY");

                entity.HasIndex(e => e.PaymentId, "PERF_REV_PMNT");

                entity.Property(e => e.EmployeePartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMPLOYEE_PARTY_ID");

                entity.Property(e => e.EmployeeRoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMPLOYEE_ROLE_TYPE_ID");

                entity.Property(e => e.PerfReviewId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PERF_REVIEW_ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.EmplPositionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMPL_POSITION_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ManagerPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MANAGER_PARTY_ID");

                entity.Property(e => e.ManagerRoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MANAGER_ROLE_TYPE_ID");

                entity.Property(e => e.PaymentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.EmployeeParty)
                    .WithMany(p => p.PerfReviewEmployeeParties)
                    .HasForeignKey(d => d.EmployeePartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PERF_REV_EPTY");

                entity.HasOne(d => d.ManagerParty)
                    .WithMany(p => p.PerfReviewManagerParties)
                    .HasForeignKey(d => d.ManagerPartyId)
                    .HasConstraintName("PERF_REV_MPTY");

                entity.HasOne(d => d.Payment)
                    .WithMany(p => p.PerfReviews)
                    .HasForeignKey(d => d.PaymentId)
                    .HasConstraintName("PERF_REV_PMNT");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.PerfReviews)
                    .HasForeignKey(d => new { d.EmployeePartyId, d.EmployeeRoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PERF_REV_EPTRL");
            });

            modelBuilder.Entity<PerfReviewItem>(entity =>
            {
                entity.HasKey(e => new { e.EmployeePartyId, e.EmployeeRoleTypeId, e.PerfReviewId, e.PerfReviewItemSeqId });

                entity.ToTable("PERF_REVIEW_ITEM");

                entity.HasIndex(e => new { e.EmployeePartyId, e.EmployeeRoleTypeId }, "PERF_RVITM_EPTRL");

                entity.HasIndex(e => e.EmployeePartyId, "PERF_RVITM_EPTY");

                entity.HasIndex(e => new { e.EmployeePartyId, e.EmployeeRoleTypeId, e.PerfReviewId }, "PERF_RVITM_PFRV");

                entity.HasIndex(e => e.CreatedTxStamp, "PRF_RVW_ITM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRF_RVW_ITM_TXSTMP");

                entity.Property(e => e.EmployeePartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMPLOYEE_PARTY_ID");

                entity.Property(e => e.EmployeeRoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMPLOYEE_ROLE_TYPE_ID");

                entity.Property(e => e.PerfReviewId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PERF_REVIEW_ID");

                entity.Property(e => e.PerfReviewItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PERF_REVIEW_ITEM_SEQ_ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PerfRatingTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PERF_RATING_TYPE_ID");

                entity.Property(e => e.PerfReviewItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PERF_REVIEW_ITEM_TYPE_ID");

                entity.HasOne(d => d.EmployeeParty)
                    .WithMany(p => p.PerfReviewItems)
                    .HasForeignKey(d => d.EmployeePartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PERF_RVITM_EPTY");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.PerfReviewItems)
                    .HasForeignKey(d => new { d.EmployeePartyId, d.EmployeeRoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PERF_RVITM_EPTRL");

                entity.HasOne(d => d.PerfReview)
                    .WithMany(p => p.PerfReviewItems)
                    .HasForeignKey(d => new { d.EmployeePartyId, d.EmployeeRoleTypeId, d.PerfReviewId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PERF_RVITM_PFRV");
            });

            modelBuilder.Entity<PerfReviewItemType>(entity =>
            {
                entity.ToTable("PERF_REVIEW_ITEM_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "PERF_REV_ITM_TYP");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRF_RVW_ITM_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRF_RVW_ITM_TP_TXS");

                entity.Property(e => e.PerfReviewItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PERF_REVIEW_ITEM_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("PERF_REV_ITM_TYP");
            });

            modelBuilder.Entity<PerformanceNote>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.RoleTypeId, e.FromDate });

                entity.ToTable("PERFORMANCE_NOTE");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "PERF_NOTE_PRLE");

                entity.HasIndex(e => e.PartyId, "PERF_NOTE_PRTY");

                entity.HasIndex(e => e.CreatedTxStamp, "PRFRMNC_NT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRFRMNC_NT_TXSTMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CommunicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("COMMUNICATION_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PerformanceNotes)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PERF_NOTE_PRTY");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.PerformanceNotes)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PERF_NOTE_PRLE");
            });

            modelBuilder.Entity<PeriodType>(entity =>
            {
                entity.ToTable("PERIOD_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "PERIOD_TYPE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PERIOD_TYPE_TXSTMP");

                entity.HasIndex(e => e.UomId, "PER_TYPE_UOM");

                entity.Property(e => e.PeriodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PeriodLength).HasColumnName("PERIOD_LENGTH");

                entity.Property(e => e.UomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UOM_ID");

                entity.HasOne(d => d.Uom)
                    .WithMany(p => p.PeriodTypes)
                    .HasForeignKey(d => d.UomId)
                    .HasConstraintName("PER_TYPE_UOM");
            });

            modelBuilder.Entity<Person>(entity =>
            {
                entity.HasKey(e => e.PartyId);

                entity.ToTable("PERSON");

                entity.HasIndex(e => e.FirstName, "FIRST_NAME_IDX");

                entity.HasIndex(e => e.LastName, "LAST_NAME_IDX");

                entity.HasIndex(e => e.EmploymentStatusEnumId, "PERSON_EMPS_ENUM");

                entity.HasIndex(e => e.MaritalStatusEnumId, "PERSON_MARITAL");

                entity.HasIndex(e => e.PartyId, "PERSON_PARTY");

                entity.HasIndex(e => e.ResidenceStatusEnumId, "PERSON_RESS_ENUM");

                entity.HasIndex(e => e.CreatedTxStamp, "PERSON_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PERSON_TXSTMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("BIRTH_DATE");

                entity.Property(e => e.CardId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CARD_ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DeceasedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DECEASED_DATE");

                entity.Property(e => e.EmploymentStatusEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMPLOYMENT_STATUS_ENUM_ID");

                entity.Property(e => e.ExistingCustomer)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("EXISTING_CUSTOMER")
                    .IsFixedLength();

                entity.Property(e => e.FirstName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIRST_NAME");

                entity.Property(e => e.FirstNameLocal)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIRST_NAME_LOCAL");

                entity.Property(e => e.Gender)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("GENDER")
                    .IsFixedLength();

                entity.Property(e => e.Height).HasColumnName("HEIGHT");

                entity.Property(e => e.LastName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAST_NAME");

                entity.Property(e => e.LastNameLocal)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAST_NAME_LOCAL");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MaritalStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MARITAL_STATUS")
                    .IsFixedLength();

                entity.Property(e => e.MaritalStatusEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MARITAL_STATUS_ENUM_ID");

                entity.Property(e => e.MemberId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MEMBER_ID");

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MIDDLE_NAME");

                entity.Property(e => e.MiddleNameLocal)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MIDDLE_NAME_LOCAL");

                entity.Property(e => e.MonthsWithEmployer).HasColumnName("MONTHS_WITH_EMPLOYER");

                entity.Property(e => e.MothersMaidenName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MOTHERS_MAIDEN_NAME");

                entity.Property(e => e.Nickname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NICKNAME");

                entity.Property(e => e.Occupation)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OCCUPATION");

                entity.Property(e => e.OtherLocal)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OTHER_LOCAL");

                entity.Property(e => e.PassportExpireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PASSPORT_EXPIRE_DATE");

                entity.Property(e => e.PassportNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PASSPORT_NUMBER");

                entity.Property(e => e.PersonalTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERSONAL_TITLE");

                entity.Property(e => e.ResidenceStatusEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RESIDENCE_STATUS_ENUM_ID");

                entity.Property(e => e.Salutation)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SALUTATION");

                entity.Property(e => e.SocialSecurityNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SOCIAL_SECURITY_NUMBER");

                entity.Property(e => e.Suffix)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUFFIX");

                entity.Property(e => e.TotalYearsWorkExperience).HasColumnName("TOTAL_YEARS_WORK_EXPERIENCE");

                entity.Property(e => e.Weight).HasColumnName("WEIGHT");

                entity.Property(e => e.YearsWithEmployer).HasColumnName("YEARS_WITH_EMPLOYER");

                entity.HasOne(d => d.EmploymentStatusEnum)
                    .WithMany(p => p.PersonEmploymentStatusEnums)
                    .HasForeignKey(d => d.EmploymentStatusEnumId)
                    .HasConstraintName("PERSON_EMPS_ENUM");

                entity.HasOne(d => d.MaritalStatusEnum)
                    .WithMany(p => p.PersonMaritalStatusEnums)
                    .HasForeignKey(d => d.MaritalStatusEnumId)
                    .HasConstraintName("PERSON_MARITAL");

                entity.HasOne(d => d.Party)
                    .WithOne(p => p.Person)
                    .HasForeignKey<Person>(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PERSON_PARTY");

                entity.HasOne(d => d.ResidenceStatusEnum)
                    .WithMany(p => p.PersonResidenceStatusEnums)
                    .HasForeignKey(d => d.ResidenceStatusEnumId)
                    .HasConstraintName("PERSON_RESS_ENUM");
            });

            modelBuilder.Entity<PersonTraining>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.TrainingClassTypeId, e.FromDate });

                entity.ToTable("PERSON_TRAINING");

                entity.HasIndex(e => e.ApproverId, "PERS_TRNG_APPR");

                entity.HasIndex(e => e.PartyId, "PERS_TRNG_PRTY");

                entity.HasIndex(e => e.TrainingClassTypeId, "PERS_TRNG_TCTP");

                entity.HasIndex(e => e.TrainingRequestId, "PERS_TRNG_TRNRQ");

                entity.HasIndex(e => e.WorkEffortId, "PERS_TRNG_WREF");

                entity.HasIndex(e => e.CreatedTxStamp, "PRSN_TRNNG_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRSN_TRNNG_TXSTMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.TrainingClassTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TRAINING_CLASS_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.ApprovalStatus)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("APPROVAL_STATUS");

                entity.Property(e => e.ApproverId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("APPROVER_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Reason)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REASON");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.Property(e => e.TrainingRequestId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TRAINING_REQUEST_ID");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.HasOne(d => d.Approver)
                    .WithMany(p => p.PersonTrainings)
                    .HasForeignKey(d => d.ApproverId)
                    .HasConstraintName("PERS_TRNG_APPR");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.PersonTrainings)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PERS_TRNG_PRTY");

                entity.HasOne(d => d.TrainingClassType)
                    .WithMany(p => p.PersonTrainings)
                    .HasForeignKey(d => d.TrainingClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PERS_TRNG_TCTP");

                entity.HasOne(d => d.TrainingRequest)
                    .WithMany(p => p.PersonTrainings)
                    .HasForeignKey(d => d.TrainingRequestId)
                    .HasConstraintName("PERS_TRNG_TRNRQ");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.PersonTrainings)
                    .HasForeignKey(d => d.WorkEffortId)
                    .HasConstraintName("PERS_TRNG_WREF");
            });

            modelBuilder.Entity<PhysicalInventory>(entity =>
            {
                entity.ToTable("PHYSICAL_INVENTORY");

                entity.HasIndex(e => e.CreatedTxStamp, "PHSCL_INVNR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PHSCL_INVNR_TXSTMP");

                entity.Property(e => e.PhysicalInventoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PHYSICAL_INVENTORY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GeneralComments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GENERAL_COMMENTS");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.PhysicalInventoryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PHYSICAL_INVENTORY_DATE");
            });

            modelBuilder.Entity<Picklist>(entity =>
            {
                entity.ToTable("PICKLIST");

                entity.HasIndex(e => e.CreatedTxStamp, "PICKLIST_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PICKLIST_TXSTMP");

                entity.HasIndex(e => e.FacilityId, "PICKLST_FLTY");

                entity.HasIndex(e => e.ShipmentMethodTypeId, "PICKLST_SMTP");

                entity.HasIndex(e => e.StatusId, "PICKLST_STTS");

                entity.Property(e => e.PicklistId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PICKLIST_ID");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PicklistDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PICKLIST_DATE");

                entity.Property(e => e.ShipmentMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_METHOD_TYPE_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.Picklists)
                    .HasForeignKey(d => d.FacilityId)
                    .HasConstraintName("PICKLST_FLTY");

                entity.HasOne(d => d.ShipmentMethodType)
                    .WithMany(p => p.Picklists)
                    .HasForeignKey(d => d.ShipmentMethodTypeId)
                    .HasConstraintName("PICKLST_SMTP");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Picklists)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("PICKLST_STTS");
            });

            modelBuilder.Entity<PicklistBin>(entity =>
            {
                entity.ToTable("PICKLIST_BIN");

                entity.HasIndex(e => new { e.PrimaryOrderId, e.PrimaryShipGroupSeqId }, "PCKLST_BIN_OISG");

                entity.HasIndex(e => e.PicklistId, "PCKLST_BIN_PKLT");

                entity.HasIndex(e => e.CreatedTxStamp, "PCKLST_BN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PCKLST_BN_TXSTMP");

                entity.Property(e => e.PicklistBinId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PICKLIST_BIN_ID");

                entity.Property(e => e.BinLocationNumber).HasColumnName("BIN_LOCATION_NUMBER");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PicklistId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PICKLIST_ID");

                entity.Property(e => e.PrimaryOrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_ORDER_ID");

                entity.Property(e => e.PrimaryShipGroupSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_SHIP_GROUP_SEQ_ID");

                entity.HasOne(d => d.Picklist)
                    .WithMany(p => p.PicklistBins)
                    .HasForeignKey(d => d.PicklistId)
                    .HasConstraintName("PCKLST_BIN_PKLT");

                entity.HasOne(d => d.Primary)
                    .WithMany(p => p.PicklistBins)
                    .HasForeignKey(d => new { d.PrimaryOrderId, d.PrimaryShipGroupSeqId })
                    .HasConstraintName("PCKLST_BIN_OISG");
            });

            modelBuilder.Entity<PicklistItem>(entity =>
            {
                entity.HasKey(e => new { e.PicklistBinId, e.OrderId, e.OrderItemSeqId, e.ShipGroupSeqId, e.InventoryItemId });

                entity.ToTable("PICKLIST_ITEM");

                entity.HasIndex(e => e.PicklistBinId, "PCKLST_ITM_BIN");

                entity.HasIndex(e => e.InventoryItemId, "PCKLST_ITM_INV");

                entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId }, "PCKLST_ITM_ODIT");

                entity.HasIndex(e => new { e.OrderId, e.ShipGroupSeqId }, "PCKLST_ITM_OISG");

                entity.HasIndex(e => e.CreatedTxStamp, "PCKLST_ITM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PCKLST_ITM_TXSTMP");

                entity.HasIndex(e => e.ItemStatusId, "PICKLST_ITM_STTS");

                entity.Property(e => e.PicklistBinId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PICKLIST_BIN_ID");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.ShipGroupSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIP_GROUP_SEQ_ID");

                entity.Property(e => e.InventoryItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.ItemStatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_STATUS_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.HasOne(d => d.InventoryItem)
                    .WithMany(p => p.PicklistItems)
                    .HasForeignKey(d => d.InventoryItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PCKLST_ITM_INV");

                entity.HasOne(d => d.ItemStatus)
                    .WithMany(p => p.PicklistItems)
                    .HasForeignKey(d => d.ItemStatusId)
                    .HasConstraintName("PICKLST_ITM_STTS");

                entity.HasOne(d => d.PicklistBin)
                    .WithMany(p => p.PicklistItems)
                    .HasForeignKey(d => d.PicklistBinId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PCKLST_ITM_BIN");

                entity.HasOne(d => d.OrderI)
                    .WithMany(p => p.PicklistItems)
                    .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PCKLST_ITM_ODIT");

                entity.HasOne(d => d.OrderItemShipGroup)
                    .WithMany(p => p.PicklistItems)
                    .HasForeignKey(d => new { d.OrderId, d.ShipGroupSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PCKLST_ITM_OISG");
            });

            modelBuilder.Entity<PicklistRole>(entity =>
            {
                entity.HasKey(e => new { e.PicklistId, e.PartyId, e.RoleTypeId, e.FromDate });

                entity.ToTable("PICKLIST_ROLE");

                entity.HasIndex(e => e.CreatedByUserLogin, "PCKLST_RLE_CBUL");

                entity.HasIndex(e => e.LastModifiedByUserLogin, "PCKLST_RLE_LMUL");

                entity.HasIndex(e => e.PicklistId, "PCKLST_RLE_PKLT");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "PCKLST_RLE_PRLE");

                entity.HasIndex(e => e.CreatedTxStamp, "PCKLST_RL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PCKLST_RL_TXSTMP");

                entity.Property(e => e.PicklistId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PICKLIST_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.CreatedByUserLoginNavigation)
                    .WithMany(p => p.PicklistRoleCreatedByUserLoginNavigations)
                    .HasForeignKey(d => d.CreatedByUserLogin)
                    .HasConstraintName("PCKLST_RLE_CBUL");

                entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                    .WithMany(p => p.PicklistRoleLastModifiedByUserLoginNavigations)
                    .HasForeignKey(d => d.LastModifiedByUserLogin)
                    .HasConstraintName("PCKLST_RLE_LMUL");

                entity.HasOne(d => d.Picklist)
                    .WithMany(p => p.PicklistRoles)
                    .HasForeignKey(d => d.PicklistId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PCKLST_RLE_PKLT");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.PicklistRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PCKLST_RLE_PRLE");
            });

            modelBuilder.Entity<PicklistStatus>(entity =>
            {
                entity.HasKey(e => new { e.PicklistId, e.StatusDate });

                entity.ToTable("PICKLIST_STATUS");

                entity.HasIndex(e => e.ChangeByUserLoginId, "PCKLST_STST_CUL");

                entity.HasIndex(e => e.StatusId, "PCKLST_STST_FSI");

                entity.HasIndex(e => e.PicklistId, "PCKLST_STST_PKLT");

                entity.HasIndex(e => e.StatusIdTo, "PCKLST_STST_TSI");

                entity.HasIndex(e => e.CreatedTxStamp, "PCKLST_STTS_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PCKLST_STTS_TXSTMP");

                entity.Property(e => e.PicklistId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PICKLIST_ID");

                entity.Property(e => e.StatusDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STATUS_DATE");

                entity.Property(e => e.ChangeByUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.StatusIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID_TO");

                entity.HasOne(d => d.ChangeByUserLogin)
                    .WithMany(p => p.PicklistStatuses)
                    .HasForeignKey(d => d.ChangeByUserLoginId)
                    .HasConstraintName("PCKLST_STST_CUL");

                entity.HasOne(d => d.Picklist)
                    .WithMany(p => p.PicklistStatuses)
                    .HasForeignKey(d => d.PicklistId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PCKLST_STST_PKLT");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.PicklistStatusStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("PCKLST_STST_FSI");

                entity.HasOne(d => d.StatusIdToNavigation)
                    .WithMany(p => p.PicklistStatusStatusIdToNavigations)
                    .HasForeignKey(d => d.StatusIdTo)
                    .HasConstraintName("PCKLST_STST_TSI");
            });

            modelBuilder.Entity<PicklistStatusHistory>(entity =>
            {
                entity.HasKey(e => new { e.PicklistId, e.ChangeDate });

                entity.ToTable("PICKLIST_STATUS_HISTORY");

                entity.HasIndex(e => e.ChangeUserLoginId, "PCKLST_STHST_CUL");

                entity.HasIndex(e => e.StatusId, "PCKLST_STHST_FSI");

                entity.HasIndex(e => e.PicklistId, "PCKLST_STHST_PKLT");

                entity.HasIndex(e => new { e.StatusId, e.StatusIdTo }, "PCKLST_STHST_SVC");

                entity.HasIndex(e => e.StatusIdTo, "PCKLST_STHST_TSI");

                entity.HasIndex(e => e.CreatedTxStamp, "PCKT_STS_HSR_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PCKT_STS_HSR_TXSTP");

                entity.Property(e => e.PicklistId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PICKLIST_ID");

                entity.Property(e => e.ChangeDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHANGE_DATE");

                entity.Property(e => e.ChangeUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CHANGE_USER_LOGIN_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.StatusIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID_TO");

                entity.HasOne(d => d.ChangeUserLogin)
                    .WithMany(p => p.PicklistStatusHistories)
                    .HasForeignKey(d => d.ChangeUserLoginId)
                    .HasConstraintName("PCKLST_STHST_CUL");

                entity.HasOne(d => d.Picklist)
                    .WithMany(p => p.PicklistStatusHistories)
                    .HasForeignKey(d => d.PicklistId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PCKLST_STHST_PKLT");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.PicklistStatusHistoryStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("PCKLST_STHST_FSI");

                entity.HasOne(d => d.StatusIdToNavigation)
                    .WithMany(p => p.PicklistStatusHistoryStatusIdToNavigations)
                    .HasForeignKey(d => d.StatusIdTo)
                    .HasConstraintName("PCKLST_STHST_TSI");

                entity.HasOne(d => d.StatusNavigation)
                    .WithMany(p => p.PicklistStatusHistories)
                    .HasForeignKey(d => new { d.StatusId, d.StatusIdTo })
                    .HasConstraintName("PCKLST_STHST_SVC");
            });

            modelBuilder.Entity<PlatformType>(entity =>
            {
                entity.ToTable("PLATFORM_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "PLTFRM_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PLTFRM_TP_TXSTMP");

                entity.Property(e => e.PlatformTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PLATFORM_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PlatformName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PLATFORM_NAME");

                entity.Property(e => e.PlatformVersion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PLATFORM_VERSION");
            });

            modelBuilder.Entity<PortalPage>(entity =>
            {
                entity.ToTable("PORTAL_PAGE");

                entity.HasIndex(e => e.CreatedTxStamp, "PORTAL_PAGE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PORTAL_PAGE_TXSTMP");

                entity.HasIndex(e => e.SecurityGroupId, "PORTPAGE_SECGRP");

                entity.HasIndex(e => e.HelpContentId, "PORTPAL_HELP_CONT");

                entity.HasIndex(e => e.ParentPortalPageId, "PortPage_PARENT");

                entity.Property(e => e.PortalPageId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PORTAL_PAGE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HelpContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("HELP_CONTENT_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OriginalPortalPageId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORIGINAL_PORTAL_PAGE_ID");

                entity.Property(e => e.OwnerUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("OWNER_USER_LOGIN_ID");

                entity.Property(e => e.ParentPortalPageId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_PORTAL_PAGE_ID");

                entity.Property(e => e.PortalPageName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PORTAL_PAGE_NAME");

                entity.Property(e => e.SecurityGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_GROUP_ID");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.HasOne(d => d.HelpContent)
                    .WithMany(p => p.PortalPages)
                    .HasForeignKey(d => d.HelpContentId)
                    .HasConstraintName("PORTPAL_HELP_CONT");

                entity.HasOne(d => d.ParentPortalPage)
                    .WithMany(p => p.InverseParentPortalPage)
                    .HasForeignKey(d => d.ParentPortalPageId)
                    .HasConstraintName("PortPage_PARENT");

                entity.HasOne(d => d.SecurityGroup)
                    .WithMany(p => p.PortalPages)
                    .HasForeignKey(d => d.SecurityGroupId)
                    .HasConstraintName("PORTPAGE_SECGRP");
            });

            modelBuilder.Entity<PortalPageColumn>(entity =>
            {
                entity.HasKey(e => new { e.PortalPageId, e.ColumnSeqId });

                entity.ToTable("PORTAL_PAGE_COLUMN");

                entity.HasIndex(e => e.PortalPageId, "PRTL_PGCOL_PAGE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRTL_PG_CLN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRTL_PG_CLN_TXSTMP");

                entity.Property(e => e.PortalPageId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PORTAL_PAGE_ID");

                entity.Property(e => e.ColumnSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COLUMN_SEQ_ID");

                entity.Property(e => e.ColumnWidthPercentage).HasColumnName("COLUMN_WIDTH_PERCENTAGE");

                entity.Property(e => e.ColumnWidthPixels).HasColumnName("COLUMN_WIDTH_PIXELS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.PortalPage)
                    .WithMany(p => p.PortalPageColumns)
                    .HasForeignKey(d => d.PortalPageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRTL_PGCOL_PAGE");
            });

            modelBuilder.Entity<PortalPagePortlet>(entity =>
            {
                entity.HasKey(e => new { e.PortalPageId, e.PortalPortletId, e.PortletSeqId });

                entity.ToTable("PORTAL_PAGE_PORTLET");

                entity.HasIndex(e => e.CreatedTxStamp, "PRL_PG_PRTT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRL_PG_PRTT_TXSTMP");

                entity.HasIndex(e => e.PortalPageId, "PRTL_PGPTLT_PAGE");

                entity.HasIndex(e => e.PortalPortletId, "PRTL_PGPTLT_PTLT");

                entity.Property(e => e.PortalPageId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PORTAL_PAGE_ID");

                entity.Property(e => e.PortalPortletId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PORTAL_PORTLET_ID");

                entity.Property(e => e.PortletSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PORTLET_SEQ_ID");

                entity.Property(e => e.ColumnSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COLUMN_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.HasOne(d => d.PortalPage)
                    .WithMany(p => p.PortalPagePortlets)
                    .HasForeignKey(d => d.PortalPageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRTL_PGPTLT_PAGE");

                entity.HasOne(d => d.PortalPortlet)
                    .WithMany(p => p.PortalPagePortlets)
                    .HasForeignKey(d => d.PortalPortletId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRTL_PGPTLT_PTLT");
            });

            modelBuilder.Entity<PortalPortlet>(entity =>
            {
                entity.ToTable("PORTAL_PORTLET");

                entity.HasIndex(e => e.CreatedTxStamp, "PRTL_PRTLT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRTL_PRTLT_TXSTMP");

                entity.Property(e => e.PortalPortletId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PORTAL_PORTLET_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.EditFormLocation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EDIT_FORM_LOCATION");

                entity.Property(e => e.EditFormName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EDIT_FORM_NAME");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PortletName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PORTLET_NAME");

                entity.Property(e => e.ScreenLocation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SCREEN_LOCATION");

                entity.Property(e => e.ScreenName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SCREEN_NAME");

                entity.Property(e => e.Screenshot)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SCREENSHOT");

                entity.Property(e => e.SecurityMainAction)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_MAIN_ACTION");

                entity.Property(e => e.SecurityServiceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_SERVICE_NAME");
            });

            modelBuilder.Entity<PortletAttribute>(entity =>
            {
                entity.HasKey(e => new { e.PortalPageId, e.PortalPortletId, e.PortletSeqId, e.AttrName });

                entity.ToTable("PORTLET_ATTRIBUTE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRTLT_ATTRT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRTLT_ATTRT_TXSTMP");

                entity.HasIndex(e => e.PortalPortletId, "PTLT_ATTR_PTLT");

                entity.Property(e => e.PortalPageId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PORTAL_PAGE_ID");

                entity.Property(e => e.PortalPortletId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PORTAL_PORTLET_ID");

                entity.Property(e => e.PortletSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PORTLET_SEQ_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_TYPE");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.PortalPortlet)
                    .WithMany(p => p.PortletAttributes)
                    .HasForeignKey(d => d.PortalPortletId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PTLT_ATTR_PTLT");
            });

            modelBuilder.Entity<PortletCategory>(entity =>
            {
                entity.ToTable("PORTLET_CATEGORY");

                entity.HasIndex(e => e.CreatedTxStamp, "PRTLT_CTGR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRTLT_CTGR_TXSTMP");

                entity.Property(e => e.PortletCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PORTLET_CATEGORY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<PortletPortletCategory>(entity =>
            {
                entity.HasKey(e => new { e.PortalPortletId, e.PortletCategoryId });

                entity.ToTable("PORTLET_PORTLET_CATEGORY");

                entity.HasIndex(e => e.PortletCategoryId, "PPTLTCAT_PTLTCAT");

                entity.HasIndex(e => e.PortalPortletId, "PPTLTCAT_PTPL");

                entity.HasIndex(e => e.CreatedTxStamp, "PRTT_PRT_CTR_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRTT_PRT_CTR_TXSTP");

                entity.Property(e => e.PortalPortletId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PORTAL_PORTLET_ID");

                entity.Property(e => e.PortletCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PORTLET_CATEGORY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.PortalPortlet)
                    .WithMany(p => p.PortletPortletCategories)
                    .HasForeignKey(d => d.PortalPortletId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PPTLTCAT_PTPL");

                entity.HasOne(d => d.PortletCategory)
                    .WithMany(p => p.PortletPortletCategories)
                    .HasForeignKey(d => d.PortletCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PPTLTCAT_PTLTCAT");
            });

            modelBuilder.Entity<PostalAddress>(entity =>
            {
                entity.HasKey(e => e.ContactMechId);

                entity.ToTable("POSTAL_ADDRESS");

                entity.HasIndex(e => e.Address1, "ADDRESS1_IDX");

                entity.HasIndex(e => e.Address2, "ADDRESS2_IDX");

                entity.HasIndex(e => e.City, "CITY_IDX");

                entity.HasIndex(e => e.PostalCode, "POSTAL_CODE_IDX");

                entity.HasIndex(e => e.CountryGeoId, "POST_ADDR_CGEO");

                entity.HasIndex(e => e.CityGeoId, "POST_ADDR_CITY");

                entity.HasIndex(e => e.ContactMechId, "POST_ADDR_CMECH");

                entity.HasIndex(e => e.CountyGeoId, "POST_ADDR_CNTG");

                entity.HasIndex(e => e.GeoPointId, "POST_ADDR_GEOPT");

                entity.HasIndex(e => e.MunicipalityGeoId, "POST_ADDR_MNCP");

                entity.HasIndex(e => e.PostalCodeGeoId, "POST_ADDR_PCGEO");

                entity.HasIndex(e => e.StateProvinceGeoId, "POST_ADDR_SPGEO");

                entity.HasIndex(e => e.CreatedTxStamp, "PSTL_ADDRSS_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PSTL_ADDRSS_TXSTMP");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.Address1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS1");

                entity.Property(e => e.Address2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS2");

                entity.Property(e => e.AttnName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ATTN_NAME");

                entity.Property(e => e.City)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CITY");

                entity.Property(e => e.CityGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CITY_GEO_ID");

                entity.Property(e => e.CountryGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY_GEO_ID");

                entity.Property(e => e.CountyGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COUNTY_GEO_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Directions)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTIONS");

                entity.Property(e => e.GeoPointId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_POINT_ID");

                entity.Property(e => e.HouseNumber).HasColumnName("HOUSE_NUMBER");

                entity.Property(e => e.HouseNumberExt)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("HOUSE_NUMBER_EXT");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MunicipalityGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MUNICIPALITY_GEO_ID");

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("POSTAL_CODE");

                entity.Property(e => e.PostalCodeExt)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("POSTAL_CODE_EXT");

                entity.Property(e => e.PostalCodeGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("POSTAL_CODE_GEO_ID");

                entity.Property(e => e.StateProvinceGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATE_PROVINCE_GEO_ID");

                entity.Property(e => e.ToName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TO_NAME");

                entity.HasOne(d => d.CityGeo)
                    .WithMany(p => p.PostalAddressCityGeos)
                    .HasForeignKey(d => d.CityGeoId)
                    .HasConstraintName("POST_ADDR_CITY");

                entity.HasOne(d => d.ContactMech)
                    .WithOne(p => p.PostalAddress)
                    .HasForeignKey<PostalAddress>(d => d.ContactMechId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("POST_ADDR_CMECH");

                entity.HasOne(d => d.CountryGeo)
                    .WithMany(p => p.PostalAddressCountryGeos)
                    .HasForeignKey(d => d.CountryGeoId)
                    .HasConstraintName("POST_ADDR_CGEO");

                entity.HasOne(d => d.CountyGeo)
                    .WithMany(p => p.PostalAddressCountyGeos)
                    .HasForeignKey(d => d.CountyGeoId)
                    .HasConstraintName("POST_ADDR_CNTG");

                entity.HasOne(d => d.GeoPoint)
                    .WithMany(p => p.PostalAddresses)
                    .HasForeignKey(d => d.GeoPointId)
                    .HasConstraintName("POST_ADDR_GEOPT");

                entity.HasOne(d => d.MunicipalityGeo)
                    .WithMany(p => p.PostalAddressMunicipalityGeos)
                    .HasForeignKey(d => d.MunicipalityGeoId)
                    .HasConstraintName("POST_ADDR_MNCP");

                entity.HasOne(d => d.PostalCodeGeo)
                    .WithMany(p => p.PostalAddressPostalCodeGeos)
                    .HasForeignKey(d => d.PostalCodeGeoId)
                    .HasConstraintName("POST_ADDR_PCGEO");

                entity.HasOne(d => d.StateProvinceGeo)
                    .WithMany(p => p.PostalAddressStateProvinceGeos)
                    .HasForeignKey(d => d.StateProvinceGeoId)
                    .HasConstraintName("POST_ADDR_SPGEO");
            });

            modelBuilder.Entity<PostalAddressBoundary>(entity =>
            {
                entity.HasKey(e => new { e.ContactMechId, e.GeoId });

                entity.ToTable("POSTAL_ADDRESS_BOUNDARY");

                entity.HasIndex(e => e.ContactMechId, "POST_ADDR_BNDRY");

                entity.HasIndex(e => e.GeoId, "POST_ADDR_BNDRYGEO");

                entity.HasIndex(e => e.CreatedTxStamp, "PSL_ADDS_BNR_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PSL_ADDS_BNR_TXSTP");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.GeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.PostalAddressBoundaries)
                    .HasForeignKey(d => d.ContactMechId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("POST_ADDR_BNDRY");

                entity.HasOne(d => d.Geo)
                    .WithMany(p => p.PostalAddressBoundaries)
                    .HasForeignKey(d => d.GeoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("POST_ADDR_BNDRYGEO");
            });

            modelBuilder.Entity<PriorityType>(entity =>
            {
                entity.ToTable("PRIORITY_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRRT_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRRT_TP_TXSTMP");

                entity.Property(e => e.PriorityTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRIORITY_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<ProdCatalog>(entity =>
            {
                entity.ToTable("PROD_CATALOG");

                entity.HasIndex(e => e.CreatedTxStamp, "PRD_CTLG_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRD_CTLG_TXSTMP");

                entity.Property(e => e.ProdCatalogId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PROD_CATALOG_ID");

                entity.Property(e => e.CatalogName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CATALOG_NAME");

                entity.Property(e => e.ContentPathPrefix)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_PATH_PREFIX");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.HeaderLogo)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("HEADER_LOGO");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PurchaseAllowPermReqd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PURCHASE_ALLOW_PERM_REQD")
                    .IsFixedLength();

                entity.Property(e => e.StyleSheet)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("STYLE_SHEET");

                entity.Property(e => e.TemplatePathPrefix)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TEMPLATE_PATH_PREFIX");

                entity.Property(e => e.UseQuickAdd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_QUICK_ADD")
                    .IsFixedLength();

                entity.Property(e => e.ViewAllowPermReqd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VIEW_ALLOW_PERM_REQD")
                    .IsFixedLength();
            });

            modelBuilder.Entity<ProdCatalogCategory>(entity =>
            {
                entity.HasKey(e => new { e.ProdCatalogId, e.ProductCategoryId, e.ProdCatalogCategoryTypeId, e.FromDate });

                entity.ToTable("PROD_CATALOG_CATEGORY");

                entity.HasIndex(e => e.CreatedTxStamp, "PRD_CTG_CTR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRD_CTG_CTR_TXSTMP");

                entity.HasIndex(e => e.ProdCatalogId, "PROD_CC_CATALOG");

                entity.HasIndex(e => e.ProductCategoryId, "PROD_CC_CATEGORY");

                entity.HasIndex(e => e.ProdCatalogCategoryTypeId, "PROD_CC_TYPE");

                entity.Property(e => e.ProdCatalogId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PROD_CATALOG_ID");

                entity.Property(e => e.ProductCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CATEGORY_ID");

                entity.Property(e => e.ProdCatalogCategoryTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PROD_CATALOG_CATEGORY_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ProdCatalogCategoryType)
                    .WithMany(p => p.ProdCatalogCategories)
                    .HasForeignKey(d => d.ProdCatalogCategoryTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_CC_TYPE");

                entity.HasOne(d => d.ProdCatalog)
                    .WithMany(p => p.ProdCatalogCategories)
                    .HasForeignKey(d => d.ProdCatalogId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_CC_CATALOG");

                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.ProdCatalogCategories)
                    .HasForeignKey(d => d.ProductCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_CC_CATEGORY");
            });

            modelBuilder.Entity<ProdCatalogCategoryType>(entity =>
            {
                entity.ToTable("PROD_CATALOG_CATEGORY_TYPE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRD_CTG_CTR_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRD_CTG_CTR_TP_TXS");

                entity.HasIndex(e => e.ParentTypeId, "PROD_PCCT_TYPEPAR");

                entity.Property(e => e.ProdCatalogCategoryTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PROD_CATALOG_CATEGORY_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("PROD_PCCT_TYPEPAR");
            });

            modelBuilder.Entity<ProdCatalogInvFacility>(entity =>
            {
                entity.HasKey(e => new { e.ProdCatalogId, e.FacilityId, e.FromDate });

                entity.ToTable("PROD_CATALOG_INV_FACILITY");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRD_CTG_INV_FCT_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRD_CTG_INV_FCT_TS");

                entity.HasIndex(e => e.ProdCatalogId, "PROD_CIF_CATALOG");

                entity.HasIndex(e => e.FacilityId, "PROD_CIF_FACILITY");

                entity.Property(e => e.ProdCatalogId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PROD_CATALOG_ID");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.ProdCatalogInvFacilities)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_CIF_FACILITY");

                entity.HasOne(d => d.ProdCatalog)
                    .WithMany(p => p.ProdCatalogInvFacilities)
                    .HasForeignKey(d => d.ProdCatalogId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_CIF_CATALOG");
            });

            modelBuilder.Entity<ProdCatalogRole>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.RoleTypeId, e.ProdCatalogId, e.FromDate });

                entity.ToTable("PROD_CATALOG_ROLE");

                entity.HasIndex(e => e.ProdCatalogId, "PCATRLE_CATALOG");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "PCATRLE_PTYRLE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRD_CTLG_RL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRD_CTLG_RL_TXSTMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.ProdCatalogId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PROD_CATALOG_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ProdCatalog)
                    .WithMany(p => p.ProdCatalogRoles)
                    .HasForeignKey(d => d.ProdCatalogId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PCATRLE_CATALOG");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.ProdCatalogRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PCATRLE_PTYRLE");
            });

            modelBuilder.Entity<ProdConfItemContent>(entity =>
            {
                entity.HasKey(e => new { e.ConfigItemId, e.ContentId, e.ConfItemContentTypeId, e.FromDate });

                entity.ToTable("PROD_CONF_ITEM_CONTENT");

                entity.HasIndex(e => e.ContentId, "CIMT_CNT_CNT");

                entity.HasIndex(e => e.ConfigItemId, "CIMT_CNT_PCIT");

                entity.HasIndex(e => e.ConfItemContentTypeId, "CIMT_CNT_TYPE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRD_CNF_ITM_CNT_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRD_CNF_ITM_CNT_TS");

                entity.Property(e => e.ConfigItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_ITEM_ID");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.ConfItemContentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONF_ITEM_CONTENT_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ConfItemContentType)
                    .WithMany(p => p.ProdConfItemContents)
                    .HasForeignKey(d => d.ConfItemContentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CIMT_CNT_TYPE");

                entity.HasOne(d => d.ConfigItem)
                    .WithMany(p => p.ProdConfItemContents)
                    .HasForeignKey(d => d.ConfigItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CIMT_CNT_PCIT");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.ProdConfItemContents)
                    .HasForeignKey(d => d.ContentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CIMT_CNT_CNT");
            });

            modelBuilder.Entity<ProdConfItemContentType>(entity =>
            {
                entity.HasKey(e => e.ConfItemContentTypeId);

                entity.ToTable("PROD_CONF_ITEM_CONTENT_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "PCICT_TYP_PARENT");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRD_ITM_CNT_TP_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRD_ITM_CNT_TP_TS");

                entity.Property(e => e.ConfItemContentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONF_ITEM_CONTENT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("PCICT_TYP_PARENT");
            });

            modelBuilder.Entity<ProdPromoCodeContactMech>(entity =>
            {
                entity.HasKey(e => new { e.ProductPromoCodeId, e.ContactMechId })
                    .HasName("PK_PROD_PROMO_CODE_CONTACT_MEC");

                entity.ToTable("PROD_PROMO_CODE_CONTACT_MECH");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRD_CD_CNT_MCH_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRD_CD_CNT_MCH_TS");

                entity.HasIndex(e => e.ContactMechId, "PROD_PRCDE_CM");

                entity.HasIndex(e => e.ProductPromoCodeId, "PROD_PRCDE_PCD");

                entity.Property(e => e.ProductPromoCodeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_CODE_ID");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.ProdPromoCodeContactMeches)
                    .HasForeignKey(d => d.ContactMechId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_PRCDE_CM");

                entity.HasOne(d => d.ProductPromoCode)
                    .WithMany(p => p.ProdPromoCodeContactMeches)
                    .HasForeignKey(d => d.ProductPromoCodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_PRCDE_PCD");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.ToTable("PRODUCT");

                entity.HasIndex(e => e.CreatedTxStamp, "PRODUCT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRODUCT_TXSTMP");

                entity.HasIndex(e => e.AmountUomTypeId, "PROD_AMOUNT_UOMT");

                entity.HasIndex(e => e.CreatedByUserLogin, "PROD_CB_USERLOGIN");

                entity.HasIndex(e => e.DepthUomId, "PROD_DEPTH_UOM");

                entity.HasIndex(e => e.DiameterUomId, "PROD_DIAMTR_UOM");

                entity.HasIndex(e => e.FacilityId, "PROD_FACILITY");

                entity.HasIndex(e => e.HeightUomId, "PROD_HEIGHT_UOM");

                entity.HasIndex(e => e.InventoryItemTypeId, "PROD_INV_ITEM_TYPE");

                entity.HasIndex(e => e.LastModifiedByUserLogin, "PROD_LMB_USERLOGIN");

                entity.HasIndex(e => e.OriginGeoId, "PROD_ORG_GEO");

                entity.HasIndex(e => e.PrimaryProductCategoryId, "PROD_PRIMARY_CAT");

                entity.HasIndex(e => e.QuantityUomId, "PROD_QUANT_UOM");

                entity.HasIndex(e => e.RatingTypeEnum, "PROD_RATE_ENUM");

                entity.HasIndex(e => e.RequirementMethodEnumId, "PROD_RQMT_ENUM");

                entity.HasIndex(e => e.DefaultShipmentBoxTypeId, "PROD_SHBX_TYPE");

                entity.HasIndex(e => e.ProductTypeId, "PROD_TYPE");

                entity.HasIndex(e => e.VirtualVariantMethodEnum, "PROD_VVMETHOD_ENUM");

                entity.HasIndex(e => e.WeightUomId, "PROD_WEIGHT_UOM");

                entity.HasIndex(e => e.WidthUomId, "PROD_WIDTH_UOM");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.AmountUomTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AMOUNT_UOM_TYPE_ID");

                entity.Property(e => e.AutoCreateKeywords)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AUTO_CREATE_KEYWORDS")
                    .IsFixedLength();

                entity.Property(e => e.BillOfMaterialLevel).HasColumnName("BILL_OF_MATERIAL_LEVEL");

                entity.Property(e => e.BrandName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRAND_NAME");

                entity.Property(e => e.ChargeShipping)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHARGE_SHIPPING")
                    .IsFixedLength();

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.ConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_ID");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DefaultShipmentBoxTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULT_SHIPMENT_BOX_TYPE_ID");

                entity.Property(e => e.DepthUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEPTH_UOM_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DetailImageUrl)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DETAIL_IMAGE_URL");

                entity.Property(e => e.DetailScreen)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DETAIL_SCREEN");

                entity.Property(e => e.DiameterUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DIAMETER_UOM_ID");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.FixedAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("FIXED_AMOUNT");

                entity.Property(e => e.HeightUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("HEIGHT_UOM_ID");

                entity.Property(e => e.InShippingBox)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IN_SHIPPING_BOX")
                    .IsFixedLength();

                entity.Property(e => e.IncludeInPromotions)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INCLUDE_IN_PROMOTIONS")
                    .IsFixedLength();

                entity.Property(e => e.InternalName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("INTERNAL_NAME");

                entity.Property(e => e.IntroductionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("INTRODUCTION_DATE");

                entity.Property(e => e.InventoryItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_TYPE_ID");

                entity.Property(e => e.InventoryMessage)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_MESSAGE");

                entity.Property(e => e.IsVariant)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_VARIANT")
                    .IsFixedLength();

                entity.Property(e => e.IsVirtual)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_VIRTUAL")
                    .IsFixedLength();

                entity.Property(e => e.LargeImageUrl)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("LARGE_IMAGE_URL");

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LongDescription)
                    .HasColumnType("text")
                    .HasColumnName("LONG_DESCRIPTION");

                entity.Property(e => e.LotIdFilledIn)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LOT_ID_FILLED_IN");

                entity.Property(e => e.MediumImageUrl)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("MEDIUM_IMAGE_URL");

                entity.Property(e => e.OrderDecimalQuantity)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_DECIMAL_QUANTITY")
                    .IsFixedLength();

                entity.Property(e => e.OriginGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORIGIN_GEO_ID");

                entity.Property(e => e.OriginalImageUrl)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ORIGINAL_IMAGE_URL");

                entity.Property(e => e.PiecesIncluded).HasColumnName("PIECES_INCLUDED");

                entity.Property(e => e.PriceDetailText)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PRICE_DETAIL_TEXT");

                entity.Property(e => e.PrimaryProductCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_PRODUCT_CATEGORY_ID");

                entity.Property(e => e.ProductDepth)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("PRODUCT_DEPTH");

                entity.Property(e => e.ProductDiameter)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("PRODUCT_DIAMETER");

                entity.Property(e => e.ProductHeight)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("PRODUCT_HEIGHT");

                entity.Property(e => e.ProductName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_NAME");

                entity.Property(e => e.ProductRating)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("PRODUCT_RATING");

                entity.Property(e => e.ProductTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_TYPE_ID");

                entity.Property(e => e.ProductWeight)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("PRODUCT_WEIGHT");

                entity.Property(e => e.ProductWidth)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("PRODUCT_WIDTH");

                entity.Property(e => e.QuantityIncluded)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY_INCLUDED");

                entity.Property(e => e.QuantityUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUANTITY_UOM_ID");

                entity.Property(e => e.RatingTypeEnum)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RATING_TYPE_ENUM");

                entity.Property(e => e.ReleaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("RELEASE_DATE");

                entity.Property(e => e.RequireAmount)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REQUIRE_AMOUNT")
                    .IsFixedLength();

                entity.Property(e => e.RequireInventory)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REQUIRE_INVENTORY")
                    .IsFixedLength();

                entity.Property(e => e.RequirementMethodEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REQUIREMENT_METHOD_ENUM_ID");

                entity.Property(e => e.Reserv2ndPPPerc)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("RESERV2ND_P_P_PERC");

                entity.Property(e => e.ReservMaxPersons)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("RESERV_MAX_PERSONS");

                entity.Property(e => e.ReservNthPPPerc)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("RESERV_NTH_P_P_PERC");

                entity.Property(e => e.Returnable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RETURNABLE")
                    .IsFixedLength();

                entity.Property(e => e.SalesDiscWhenNotAvail)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SALES_DISC_WHEN_NOT_AVAIL")
                    .IsFixedLength();

                entity.Property(e => e.SalesDiscontinuationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SALES_DISCONTINUATION_DATE");

                entity.Property(e => e.ShippingDepth)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("SHIPPING_DEPTH");

                entity.Property(e => e.ShippingHeight)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("SHIPPING_HEIGHT");

                entity.Property(e => e.ShippingWeight)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("SHIPPING_WEIGHT");

                entity.Property(e => e.ShippingWidth)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("SHIPPING_WIDTH");

                entity.Property(e => e.SmallImageUrl)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SMALL_IMAGE_URL");

                entity.Property(e => e.SupportDiscontinuationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SUPPORT_DISCONTINUATION_DATE");

                entity.Property(e => e.Taxable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TAXABLE")
                    .IsFixedLength();

                entity.Property(e => e.VirtualVariantMethodEnum)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VIRTUAL_VARIANT_METHOD_ENUM");

                entity.Property(e => e.WeightUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WEIGHT_UOM_ID");

                entity.Property(e => e.WidthUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WIDTH_UOM_ID");
                    
                entity.Property(e => e.ServiceLifeDays).HasColumnName("SERVICE_LIFE_DAYS");
                entity.Property(e => e.ServiceLifeMileage).HasColumnName("SERVICE_LIFE_MILEAGE");
                

                entity.HasOne(d => d.AmountUomType)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.AmountUomTypeId)
                    .HasConstraintName("PROD_AMOUNT_UOMT");

                entity.HasOne(d => d.CreatedByUserLoginNavigation)
                    .WithMany(p => p.ProductCreatedByUserLoginNavigations)
                    .HasForeignKey(d => d.CreatedByUserLogin)
                    .HasConstraintName("PROD_CB_USERLOGIN");

                entity.HasOne(d => d.DefaultShipmentBoxType)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.DefaultShipmentBoxTypeId)
                    .HasConstraintName("PROD_SHBX_TYPE");

                entity.HasOne(d => d.DepthUom)
                    .WithMany(p => p.ProductDepthUoms)
                    .HasForeignKey(d => d.DepthUomId)
                    .HasConstraintName("PROD_DEPTH_UOM");

                entity.HasOne(d => d.DiameterUom)
                    .WithMany(p => p.ProductDiameterUoms)
                    .HasForeignKey(d => d.DiameterUomId)
                    .HasConstraintName("PROD_DIAMTR_UOM");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.FacilityId)
                    .HasConstraintName("PROD_FACILITY");

                entity.HasOne(d => d.HeightUom)
                    .WithMany(p => p.ProductHeightUoms)
                    .HasForeignKey(d => d.HeightUomId)
                    .HasConstraintName("PROD_HEIGHT_UOM");

                entity.HasOne(d => d.InventoryItemType)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.InventoryItemTypeId)
                    .HasConstraintName("PROD_INV_ITEM_TYPE");

                entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                    .WithMany(p => p.ProductLastModifiedByUserLoginNavigations)
                    .HasForeignKey(d => d.LastModifiedByUserLogin)
                    .HasConstraintName("PROD_LMB_USERLOGIN");

                entity.HasOne(d => d.OriginGeo)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.OriginGeoId)
                    .HasConstraintName("PROD_ORG_GEO");

                entity.HasOne(d => d.PrimaryProductCategory)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.PrimaryProductCategoryId)
                    .HasConstraintName("PROD_PRIMARY_CAT");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.ProductTypeId)
                    .HasConstraintName("PROD_TYPE");

                entity.HasOne(d => d.QuantityUom)
                    .WithMany(p => p.ProductQuantityUoms)
                    .HasForeignKey(d => d.QuantityUomId)
                    .HasConstraintName("PROD_QUANT_UOM");

                entity.HasOne(d => d.RatingTypeEnumNavigation)
                    .WithMany(p => p.ProductRatingTypeEnumNavigations)
                    .HasForeignKey(d => d.RatingTypeEnum)
                    .HasConstraintName("PROD_RATE_ENUM");

                entity.HasOne(d => d.RequirementMethodEnum)
                    .WithMany(p => p.ProductRequirementMethodEnums)
                    .HasForeignKey(d => d.RequirementMethodEnumId)
                    .HasConstraintName("PROD_RQMT_ENUM");

                entity.HasOne(d => d.VirtualVariantMethodEnumNavigation)
                    .WithMany(p => p.ProductVirtualVariantMethodEnumNavigations)
                    .HasForeignKey(d => d.VirtualVariantMethodEnum)
                    .HasConstraintName("PROD_VVMETHOD_ENUM");

                entity.HasOne(d => d.WeightUom)
                    .WithMany(p => p.ProductWeightUoms)
                    .HasForeignKey(d => d.WeightUomId)
                    .HasConstraintName("PROD_WEIGHT_UOM");

                entity.HasOne(d => d.WidthUom)
                    .WithMany(p => p.ProductWidthUoms)
                    .HasForeignKey(d => d.WidthUomId)
                    .HasConstraintName("PROD_WIDTH_UOM");
            });

            modelBuilder.Entity<ProductAssoc>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.ProductIdTo, e.ProductAssocTypeId, e.FromDate });

                entity.ToTable("PRODUCT_ASSOC");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDCT_ASSC_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDCT_ASSC_TXSTMP");

                entity.HasIndex(e => e.ProductIdTo, "PROD_ASSOC_APROD");

                entity.HasIndex(e => e.EstimateCalcMethod, "PROD_ASSOC_CUSM");

                entity.HasIndex(e => e.ProductId, "PROD_ASSOC_MPROD");

                entity.HasIndex(e => e.RecurrenceInfoId, "PROD_ASSOC_RECINFO");

                entity.HasIndex(e => e.RoutingWorkEffortId, "PROD_ASSOC_RTWE");

                entity.HasIndex(e => e.ProductAssocTypeId, "PROD_ASSOC_TYPE");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.ProductIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID_TO");

                entity.Property(e => e.ProductAssocTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ASSOC_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.EstimateCalcMethod)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ESTIMATE_CALC_METHOD");

                entity.Property(e => e.Instruction)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("INSTRUCTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.Reason)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REASON");

                entity.Property(e => e.RecurrenceInfoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RECURRENCE_INFO_ID");

                entity.Property(e => e.RoutingWorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROUTING_WORK_EFFORT_ID");

                entity.Property(e => e.ScrapFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("SCRAP_FACTOR");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.EstimateCalcMethodNavigation)
                    .WithMany(p => p.ProductAssocs)
                    .HasForeignKey(d => d.EstimateCalcMethod)
                    .HasConstraintName("PROD_ASSOC_CUSM");

                entity.HasOne(d => d.ProductAssocType)
                    .WithMany(p => p.ProductAssocs)
                    .HasForeignKey(d => d.ProductAssocTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_ASSOC_TYPE");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductAssocProducts)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_ASSOC_MPROD");

                entity.HasOne(d => d.ProductIdToNavigation)
                    .WithMany(p => p.ProductAssocProductIdToNavigations)
                    .HasForeignKey(d => d.ProductIdTo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_ASSOC_APROD");

                entity.HasOne(d => d.RecurrenceInfo)
                    .WithMany(p => p.ProductAssocs)
                    .HasForeignKey(d => d.RecurrenceInfoId)
                    .HasConstraintName("PROD_ASSOC_RECINFO");

                entity.HasOne(d => d.RoutingWorkEffort)
                    .WithMany(p => p.ProductAssocs)
                    .HasForeignKey(d => d.RoutingWorkEffortId)
                    .HasConstraintName("PROD_ASSOC_RTWE");
            });

            modelBuilder.Entity<ProductAssocType>(entity =>
            {
                entity.ToTable("PRODUCT_ASSOC_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_ASC_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_ASC_TP_TXSTMP");

                entity.HasIndex(e => e.ParentTypeId, "PROD_ASSOC_TYPEPAR");

                entity.Property(e => e.ProductAssocTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ASSOC_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("PROD_ASSOC_TYPEPAR");
            });

            modelBuilder.Entity<ProductAttribute>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.AttrName });

                entity.ToTable("PRODUCT_ATTRIBUTE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDCT_ATTRT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDCT_ATTRT_TXSTMP");

                entity.HasIndex(e => e.ProductId, "PROD_ATTR");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_TYPE");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductAttributes)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_ATTR");
            });

            modelBuilder.Entity<ProductAverageCost>(entity =>
            {
                entity.HasKey(e => new { e.ProductAverageCostTypeId, e.OrganizationPartyId, e.ProductId, e.FacilityId, e.FromDate });

                entity.ToTable("PRODUCT_AVERAGE_COST");

                entity.HasIndex(e => e.FacilityId, "AVG_COST_FACI");

                entity.HasIndex(e => e.OrganizationPartyId, "AVG_COST_PARTY");

                entity.HasIndex(e => e.ProductId, "AVG_COST_PROD");

                entity.HasIndex(e => e.ProductAverageCostTypeId, "AVG_COST_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_AVG_CST_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_AVG_CST_TXSTP");

                entity.Property(e => e.ProductAverageCostTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_AVERAGE_COST_TYPE_ID");

                entity.Property(e => e.OrganizationPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_PARTY_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.AverageCost)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("AVERAGE_COST");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.ProductAverageCosts)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AVG_COST_FACI");

                entity.HasOne(d => d.OrganizationParty)
                    .WithMany(p => p.ProductAverageCosts)
                    .HasForeignKey(d => d.OrganizationPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AVG_COST_PARTY");

                entity.HasOne(d => d.ProductAverageCostType)
                    .WithMany(p => p.ProductAverageCosts)
                    .HasForeignKey(d => d.ProductAverageCostTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AVG_COST_TYPE");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductAverageCosts)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AVG_COST_PROD");
            });

            modelBuilder.Entity<ProductAverageCostType>(entity =>
            {
                entity.ToTable("PRODUCT_AVERAGE_COST_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "AVGCOST_TYPE_PAR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_AVG_CST_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_AVG_CST_TP_TXS");

                entity.Property(e => e.ProductAverageCostTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_AVERAGE_COST_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("AVGCOST_TYPE_PAR");
            });

            modelBuilder.Entity<ProductCalculatedInfo>(entity =>
            {
                entity.HasKey(e => e.ProductId);

                entity.ToTable("PRODUCT_CALCULATED_INFO");

                entity.HasIndex(e => e.ProductId, "PRODCI_PROD");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_CLCD_INF_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_CLCD_INF_TXSTP");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.AverageCustomerRating)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("AVERAGE_CUSTOMER_RATING");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.TotalQuantityOrdered)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("TOTAL_QUANTITY_ORDERED");

                entity.Property(e => e.TotalTimesViewed).HasColumnName("TOTAL_TIMES_VIEWED");

                entity.HasOne(d => d.Product)
                    .WithOne(p => p.ProductCalculatedInfo)
                    .HasForeignKey<ProductCalculatedInfo>(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRODCI_PROD");
            });

            modelBuilder.Entity<ProductCategory>(entity =>
            {
                entity.ToTable("PRODUCT_CATEGORY");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDCT_CTGR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDCT_CTGR_TXSTMP");

                entity.HasIndex(e => e.PrimaryParentCategoryId, "PROD_CTGRY_PARENT");

                entity.HasIndex(e => e.ProductCategoryTypeId, "PROD_CTGRY_TYPE");

                entity.Property(e => e.ProductCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CATEGORY_ID");

                entity.Property(e => e.CategoryImageUrl)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("CATEGORY_IMAGE_URL");

                entity.Property(e => e.CategoryName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CATEGORY_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DetailScreen)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DETAIL_SCREEN");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LinkOneImageUrl)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("LINK_ONE_IMAGE_URL");

                entity.Property(e => e.LinkTwoImageUrl)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("LINK_TWO_IMAGE_URL");

                entity.Property(e => e.LongDescription)
                    .HasColumnType("text")
                    .HasColumnName("LONG_DESCRIPTION");

                entity.Property(e => e.PrimaryParentCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_PARENT_CATEGORY_ID");

                entity.Property(e => e.ProductCategoryTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CATEGORY_TYPE_ID");

                entity.Property(e => e.ShowInSelect)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SHOW_IN_SELECT")
                    .IsFixedLength();

                entity.HasOne(d => d.PrimaryParentCategory)
                    .WithMany(p => p.InversePrimaryParentCategory)
                    .HasForeignKey(d => d.PrimaryParentCategoryId)
                    .HasConstraintName("PROD_CTGRY_PARENT");

                entity.HasOne(d => d.ProductCategoryType)
                    .WithMany(p => p.ProductCategories)
                    .HasForeignKey(d => d.ProductCategoryTypeId)
                    .HasConstraintName("PROD_CTGRY_TYPE");
            });

            modelBuilder.Entity<ProductCategoryAttribute>(entity =>
            {
                entity.HasKey(e => new { e.ProductCategoryId, e.AttrName });

                entity.ToTable("PRODUCT_CATEGORY_ATTRIBUTE");

                entity.HasIndex(e => e.ProductCategoryId, "PROD_CTGRY_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_CTR_ATTT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_CTR_ATTT_TXSTP");

                entity.Property(e => e.ProductCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CATEGORY_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.ProductCategoryAttributes)
                    .HasForeignKey(d => d.ProductCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_CTGRY_ATTR");
            });

            modelBuilder.Entity<ProductCategoryContent>(entity =>
            {
                entity.HasKey(e => new { e.ProductCategoryId, e.ContentId, e.ProdCatContentTypeId, e.FromDate });

                entity.ToTable("PRODUCT_CATEGORY_CONTENT");

                entity.HasIndex(e => e.ContentId, "PRDCAT_CNT_CNT");

                entity.HasIndex(e => new { e.ProductCategoryId, e.ProdCatContentTypeId }, "PRDCAT_CNT_CTTP");

                entity.HasIndex(e => e.ProductCategoryId, "PRDCAT_CNT_PRDCAT");

                entity.HasIndex(e => e.ProdCatContentTypeId, "PRDCAT_CNT_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_CTR_CNT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_CTR_CNT_TXSTP");

                entity.Property(e => e.ProductCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CATEGORY_ID");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.ProdCatContentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PROD_CAT_CONTENT_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PurchaseFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PURCHASE_FROM_DATE");

                entity.Property(e => e.PurchaseThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PURCHASE_THRU_DATE");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.Property(e => e.UseCountLimit).HasColumnName("USE_COUNT_LIMIT");

                entity.Property(e => e.UseDaysLimit)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("USE_DAYS_LIMIT");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.ProductCategoryContents)
                    .HasForeignKey(d => d.ContentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDCAT_CNT_CNT");

                entity.HasOne(d => d.ProdCatContentType)
                    .WithMany(p => p.ProductCategoryContents)
                    .HasForeignKey(d => d.ProdCatContentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDCAT_CNT_TYPE");

                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.ProductCategoryContents)
                    .HasForeignKey(d => d.ProductCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDCAT_CNT_PRDCAT");
            });

            modelBuilder.Entity<ProductCategoryContentType>(entity =>
            {
                entity.HasKey(e => e.ProdCatContentTypeId)
                    .HasName("PK_PRODUCT_CATEGORY_CONTENT_TY");

                entity.ToTable("PRODUCT_CATEGORY_CONTENT_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "PRDCATCNT_TYP_PAR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_CTR_CNT_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_CTR_CNT_TP_TXS");

                entity.Property(e => e.ProdCatContentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PROD_CAT_CONTENT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("PRDCATCNT_TYP_PAR");
            });

            modelBuilder.Entity<ProductCategoryGlAccount>(entity =>
            {
                entity.HasKey(e => new { e.ProductCategoryId, e.OrganizationPartyId, e.GlAccountTypeId });

                entity.ToTable("PRODUCT_CATEGORY_GL_ACCOUNT");

                entity.HasIndex(e => e.GlAccountId, "PRD_CT_GLACT_GLACT");

                entity.HasIndex(e => e.ProductCategoryId, "PRD_CT_GLACT_PCAT");

                entity.HasIndex(e => e.OrganizationPartyId, "PRD_CT_GLACT_PRTY");

                entity.HasIndex(e => e.GlAccountTypeId, "PRD_CT_GLACT_TYPE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_CTR_GL_ACT_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_CTR_GL_ACT_TXS");

                entity.Property(e => e.ProductCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CATEGORY_ID");

                entity.Property(e => e.OrganizationPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_PARTY_ID");

                entity.Property(e => e.GlAccountTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.GlAccount)
                    .WithMany(p => p.ProductCategoryGlAccounts)
                    .HasForeignKey(d => d.GlAccountId)
                    .HasConstraintName("PRD_CT_GLACT_GLACT");

                entity.HasOne(d => d.GlAccountType)
                    .WithMany(p => p.ProductCategoryGlAccounts)
                    .HasForeignKey(d => d.GlAccountTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRD_CT_GLACT_TYPE");

                entity.HasOne(d => d.OrganizationParty)
                    .WithMany(p => p.ProductCategoryGlAccounts)
                    .HasForeignKey(d => d.OrganizationPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRD_CT_GLACT_PRTY");

                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.ProductCategoryGlAccounts)
                    .HasForeignKey(d => d.ProductCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRD_CT_GLACT_PCAT");
            });

            modelBuilder.Entity<ProductCategoryLink>(entity =>
            {
                entity.HasKey(e => new { e.ProductCategoryId, e.LinkSeqId, e.FromDate });

                entity.ToTable("PRODUCT_CATEGORY_LINK");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_CTR_LNK_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_CTR_LNK_TXSTP");

                entity.HasIndex(e => e.ProductCategoryId, "PROD_CLNK_CATEGORY");

                entity.HasIndex(e => e.LinkTypeEnumId, "PROD_CLNK_LKTPENM");

                entity.Property(e => e.ProductCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CATEGORY_ID");

                entity.Property(e => e.LinkSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("LINK_SEQ_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DetailSubScreen)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DETAIL_SUB_SCREEN");

                entity.Property(e => e.DetailText)
                    .HasColumnType("text")
                    .HasColumnName("DETAIL_TEXT");

                entity.Property(e => e.ImageTwoUrl)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("IMAGE_TWO_URL");

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("IMAGE_URL");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LinkInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LINK_INFO");

                entity.Property(e => e.LinkTypeEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("LINK_TYPE_ENUM_ID");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.Property(e => e.TitleText)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TITLE_TEXT");

                entity.HasOne(d => d.LinkTypeEnum)
                    .WithMany(p => p.ProductCategoryLinks)
                    .HasForeignKey(d => d.LinkTypeEnumId)
                    .HasConstraintName("PROD_CLNK_LKTPENM");

                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.ProductCategoryLinks)
                    .HasForeignKey(d => d.ProductCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_CLNK_CATEGORY");
            });

            modelBuilder.Entity<ProductCategoryMember>(entity =>
            {
                entity.HasKey(e => new { e.ProductCategoryId, e.ProductId, e.FromDate });

                entity.ToTable("PRODUCT_CATEGORY_MEMBER");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_CTR_MMR_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_CTR_MMR_TXSTP");

                entity.HasIndex(e => e.ProductCategoryId, "PRD_CMBR_PCT");

                entity.HasIndex(e => e.ProductCategoryId, "PROD_CMBR_CATEGORY");

                entity.HasIndex(e => e.ProductId, "PROD_CMBR_PRODUCT");

                entity.Property(e => e.ProductCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CATEGORY_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.ProductCategoryMembers)
                    .HasForeignKey(d => d.ProductCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_CMBR_CATEGORY");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductCategoryMembers)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_CMBR_PRODUCT");
            });

            modelBuilder.Entity<ProductCategoryRole>(entity =>
            {
                entity.HasKey(e => new { e.ProductCategoryId, e.PartyId, e.RoleTypeId, e.FromDate });

                entity.ToTable("PRODUCT_CATEGORY_ROLE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_CTR_RL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_CTR_RL_TXSTMP");

                entity.HasIndex(e => e.ProductCategoryId, "PROD_CRLE_CATEGORY");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "PROD_CRLE_PTYRLE");

                entity.Property(e => e.ProductCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CATEGORY_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.ProductCategoryRoles)
                    .HasForeignKey(d => d.ProductCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_CRLE_CATEGORY");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.ProductCategoryRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_CRLE_PTYRLE");
            });

            modelBuilder.Entity<ProductCategoryRollup>(entity =>
            {
                entity.HasKey(e => new { e.ProductCategoryId, e.ParentProductCategoryId, e.FromDate });

                entity.ToTable("PRODUCT_CATEGORY_ROLLUP");

                entity.HasIndex(e => e.ParentProductCategoryId, "PRDCR_PARPC");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_CTR_RLP_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_CTR_RLP_TXSTP");

                entity.HasIndex(e => e.ProductCategoryId, "PROD_CRLP_CURRENT");

                entity.HasIndex(e => e.ParentProductCategoryId, "PROD_CRLP_PARENT");

                entity.Property(e => e.ProductCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CATEGORY_ID");

                entity.Property(e => e.ParentProductCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_PRODUCT_CATEGORY_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ParentProductCategory)
                    .WithMany(p => p.ProductCategoryRollupParentProductCategories)
                    .HasForeignKey(d => d.ParentProductCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_CRLP_PARENT");

                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.ProductCategoryRollupProductCategories)
                    .HasForeignKey(d => d.ProductCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_CRLP_CURRENT");
            });

            modelBuilder.Entity<ProductCategoryType>(entity =>
            {
                entity.ToTable("PRODUCT_CATEGORY_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_CTR_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_CTR_TP_TXSTMP");

                entity.HasIndex(e => e.ParentTypeId, "PROD_CTGRY_TYPEPAR");

                entity.Property(e => e.ProductCategoryTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CATEGORY_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("PROD_CTGRY_TYPEPAR");
            });

            modelBuilder.Entity<ProductCategoryTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.ProductCategoryTypeId, e.AttrName });

                entity.ToTable("PRODUCT_CATEGORY_TYPE_ATTR");

                entity.HasIndex(e => e.ProductCategoryTypeId, "PROD_CTGRY_TATTR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_CTR_TP_ATR_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_CTR_TP_ATR_TXS");

                entity.Property(e => e.ProductCategoryTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CATEGORY_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ProductCategoryType)
                    .WithMany(p => p.ProductCategoryTypeAttrs)
                    .HasForeignKey(d => d.ProductCategoryTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_CTGRY_TATTR");
            });

            modelBuilder.Entity<ProductConfig>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.ConfigItemId, e.SequenceNum, e.FromDate });

                entity.ToTable("PRODUCT_CONFIG");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDCT_CNFG_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDCT_CNFG_TXSTMP");

                entity.HasIndex(e => e.ConfigItemId, "PROD_CONF_ITEM");

                entity.HasIndex(e => e.ProductId, "PROD_CONF_PROD");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.ConfigItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_ITEM_ID");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.ConfigTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DefaultConfigOptionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULT_CONFIG_OPTION_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsMandatory)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_MANDATORY")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LongDescription)
                    .HasColumnType("text")
                    .HasColumnName("LONG_DESCRIPTION");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ConfigItem)
                    .WithMany(p => p.ProductConfigs)
                    .HasForeignKey(d => d.ConfigItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_CONF_ITEM");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductConfigs)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_CONF_PROD");
            });

            modelBuilder.Entity<ProductConfigConfig>(entity =>
            {
                entity.HasKey(e => new { e.ConfigId, e.ConfigItemId, e.ConfigOptionId, e.SequenceNum });

                entity.ToTable("PRODUCT_CONFIG_CONFIG");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_CNG_CNG_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_CNG_CNG_TXSTP");

                entity.HasIndex(e => e.ConfigItemId, "PROD_CONFC_ITEM");

                entity.HasIndex(e => new { e.ConfigItemId, e.ConfigOptionId }, "PROD_CONFC_OPTN");

                entity.Property(e => e.ConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_ID");

                entity.Property(e => e.ConfigItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_ITEM_ID");

                entity.Property(e => e.ConfigOptionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_OPTION_ID");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ConfigItem)
                    .WithMany(p => p.ProductConfigConfigs)
                    .HasForeignKey(d => d.ConfigItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_CONFC_ITEM");

                entity.HasOne(d => d.Config)
                    .WithMany(p => p.ProductConfigConfigs)
                    .HasForeignKey(d => new { d.ConfigItemId, d.ConfigOptionId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_CONFC_OPTN");
            });

            modelBuilder.Entity<ProductConfigItem>(entity =>
            {
                entity.HasKey(e => e.ConfigItemId);

                entity.ToTable("PRODUCT_CONFIG_ITEM");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_CNG_ITM_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_CNG_ITM_TXSTP");

                entity.Property(e => e.ConfigItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_ITEM_ID");

                entity.Property(e => e.ConfigItemName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_ITEM_NAME");

                entity.Property(e => e.ConfigItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_ITEM_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("IMAGE_URL");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LongDescription)
                    .HasColumnType("text")
                    .HasColumnName("LONG_DESCRIPTION");
            });

            modelBuilder.Entity<ProductConfigOption>(entity =>
            {
                entity.HasKey(e => new { e.ConfigItemId, e.ConfigOptionId });

                entity.ToTable("PRODUCT_CONFIG_OPTION");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_CNG_OPN_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_CNG_OPN_TXSTP");

                entity.HasIndex(e => e.ConfigItemId, "PROD_OPTN_ITEM");

                entity.Property(e => e.ConfigItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_ITEM_ID");

                entity.Property(e => e.ConfigOptionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_OPTION_ID");

                entity.Property(e => e.ConfigOptionName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_OPTION_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ConfigItem)
                    .WithMany(p => p.ProductConfigOptions)
                    .HasForeignKey(d => d.ConfigItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_OPTN_ITEM");
            });

            modelBuilder.Entity<ProductConfigOptionIactn>(entity =>
            {
                entity.HasKey(e => new { e.ConfigItemId, e.ConfigOptionId, e.ConfigItemIdTo, e.ConfigOptionIdTo, e.SequenceNum });

                entity.ToTable("PRODUCT_CONFIG_OPTION_IACTN");

                entity.HasIndex(e => e.ConfigItemId, "PROD_OPTIA_ITEM");

                entity.HasIndex(e => e.ConfigItemIdTo, "PROD_OPTIA_ITMT");

                entity.HasIndex(e => new { e.ConfigItemId, e.ConfigOptionId }, "PROD_OPTIA_OPTN");

                entity.HasIndex(e => new { e.ConfigItemIdTo, e.ConfigOptionIdTo }, "PROD_OPTIA_OPTT");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_CNG_OPN_ICN_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_CNG_OPN_ICN_TS");

                entity.Property(e => e.ConfigItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_ITEM_ID");

                entity.Property(e => e.ConfigOptionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_OPTION_ID");

                entity.Property(e => e.ConfigItemIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_ITEM_ID_TO");

                entity.Property(e => e.ConfigOptionIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_OPTION_ID_TO");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ConfigIactnTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_IACTN_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ConfigItem)
                    .WithMany(p => p.ProductConfigOptionIactnConfigItems)
                    .HasForeignKey(d => d.ConfigItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_OPTIA_ITEM");

                entity.HasOne(d => d.ConfigItemIdToNavigation)
                    .WithMany(p => p.ProductConfigOptionIactnConfigItemIdToNavigations)
                    .HasForeignKey(d => d.ConfigItemIdTo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_OPTIA_ITMT");

                entity.HasOne(d => d.Config)
                    .WithMany(p => p.ProductConfigOptionIactnConfigs)
                    .HasForeignKey(d => new { d.ConfigItemId, d.ConfigOptionId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_OPTIA_OPTN");

                entity.HasOne(d => d.ConfigNavigation)
                    .WithMany(p => p.ProductConfigOptionIactnConfigNavigations)
                    .HasForeignKey(d => new { d.ConfigItemIdTo, d.ConfigOptionIdTo })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_OPTIA_OPTT");
            });

            modelBuilder.Entity<ProductConfigProduct>(entity =>
            {
                entity.HasKey(e => new { e.ConfigItemId, e.ConfigOptionId, e.ProductId });

                entity.ToTable("PRODUCT_CONFIG_PRODUCT");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_CNG_PRT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_CNG_PRT_TXSTP");

                entity.HasIndex(e => e.ConfigItemId, "PROD_CONFP_ITEM");

                entity.HasIndex(e => new { e.ConfigItemId, e.ConfigOptionId }, "PROD_CONFP_OPTN");

                entity.HasIndex(e => e.ProductId, "PROD_CONFP_PROD");

                entity.Property(e => e.ConfigItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_ITEM_ID");

                entity.Property(e => e.ConfigOptionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_OPTION_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.HasOne(d => d.ConfigItem)
                    .WithMany(p => p.ProductConfigProducts)
                    .HasForeignKey(d => d.ConfigItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_CONFP_ITEM");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductConfigProducts)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_CONFP_PROD");

                entity.HasOne(d => d.Config)
                    .WithMany(p => p.ProductConfigProducts)
                    .HasForeignKey(d => new { d.ConfigItemId, d.ConfigOptionId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_CONFP_OPTN");
            });

            modelBuilder.Entity<ProductConfigStat>(entity =>
            {
                entity.HasKey(e => new { e.ConfigId, e.ProductId });

                entity.ToTable("PRODUCT_CONFIG_STATS");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_CNG_STS_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_CNG_STS_TXSTP");

                entity.HasIndex(e => e.ProductId, "PROD_CONFS_PROD");

                entity.Property(e => e.ConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.ConfigTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.NumOfConfs).HasColumnName("NUM_OF_CONFS");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductConfigStats)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_CONFS_PROD");
            });

            modelBuilder.Entity<ProductContent>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.ContentId, e.ProductContentTypeId, e.FromDate });

                entity.ToTable("PRODUCT_CONTENT");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDCT_CNTNT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDCT_CNTNT_TXSTMP");

                entity.HasIndex(e => e.ContentId, "PROD_CNT_CNT");

                entity.HasIndex(e => e.ProductId, "PROD_CNT_PROD");

                entity.HasIndex(e => e.ProductContentTypeId, "PROD_CNT_TYPE");

                entity.HasIndex(e => e.UseRoleTypeId, "PROD_CNT_URT");

                entity.HasIndex(e => e.UseTimeUomId, "PROD_CNT_UTU");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.ProductContentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CONTENT_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PurchaseFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PURCHASE_FROM_DATE");

                entity.Property(e => e.PurchaseThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PURCHASE_THRU_DATE");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.Property(e => e.UseCountLimit).HasColumnName("USE_COUNT_LIMIT");

                entity.Property(e => e.UseRoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("USE_ROLE_TYPE_ID");

                entity.Property(e => e.UseTime).HasColumnName("USE_TIME");

                entity.Property(e => e.UseTimeUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("USE_TIME_UOM_ID");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.ProductContents)
                    .HasForeignKey(d => d.ContentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_CNT_CNT");

                entity.HasOne(d => d.ProductContentType)
                    .WithMany(p => p.ProductContents)
                    .HasForeignKey(d => d.ProductContentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_CNT_TYPE");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductContents)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_CNT_PROD");

                entity.HasOne(d => d.UseRoleType)
                    .WithMany(p => p.ProductContents)
                    .HasForeignKey(d => d.UseRoleTypeId)
                    .HasConstraintName("PROD_CNT_URT");

                entity.HasOne(d => d.UseTimeUom)
                    .WithMany(p => p.ProductContents)
                    .HasForeignKey(d => d.UseTimeUomId)
                    .HasConstraintName("PROD_CNT_UTU");
            });

            modelBuilder.Entity<ProductContentType>(entity =>
            {
                entity.ToTable("PRODUCT_CONTENT_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "PRDCT_TYP_PARENT");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_CNTT_TP_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_CNTT_TP_TXSTP");

                entity.Property(e => e.ProductContentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CONTENT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("PRDCT_TYP_PARENT");
            });

            modelBuilder.Entity<ProductCostComponentCalc>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.CostComponentTypeId, e.FromDate });

                entity.ToTable("PRODUCT_COST_COMPONENT_CALC");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_CST_CMT_CLC_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_CST_CMT_CLC_TS");

                entity.HasIndex(e => e.CostComponentCalcId, "PR_COS_CCC");

                entity.HasIndex(e => e.CostComponentTypeId, "PR_COS_CCT");

                entity.HasIndex(e => e.ProductId, "PR_COS_COMPCALC");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.CostComponentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COST_COMPONENT_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CostComponentCalcId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COST_COMPONENT_CALC_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.CostComponentCalc)
                    .WithMany(p => p.ProductCostComponentCalcs)
                    .HasForeignKey(d => d.CostComponentCalcId)
                    .HasConstraintName("PR_COS_CCC");

                entity.HasOne(d => d.CostComponentType)
                    .WithMany(p => p.ProductCostComponentCalcs)
                    .HasForeignKey(d => d.CostComponentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PR_COS_CCT");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductCostComponentCalcs)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PR_COS_COMPCALC");
            });

            modelBuilder.Entity<ProductFacility>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.FacilityId });

                entity.ToTable("PRODUCT_FACILITY");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDCT_FCLT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDCT_FCLT_TXSTMP");

                entity.HasIndex(e => e.FacilityId, "PROD_FAC_FAC");

                entity.HasIndex(e => e.ProductId, "PROD_FAC_PROD");

                entity.HasIndex(e => e.ReplenishMethodEnumId, "PROD_FAC_REP");

                entity.HasIndex(e => e.RequirementMethodEnumId, "PROD_FAC_REQ");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DaysToShip).HasColumnName("DAYS_TO_SHIP");

                entity.Property(e => e.LastInventoryCount)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("LAST_INVENTORY_COUNT");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MinimumStock)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("MINIMUM_STOCK");

                entity.Property(e => e.ReorderQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("REORDER_QUANTITY");

                entity.Property(e => e.ReplenishMethodEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REPLENISH_METHOD_ENUM_ID");

                entity.Property(e => e.RequirementMethodEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REQUIREMENT_METHOD_ENUM_ID");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.ProductFacilities)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_FAC_FAC");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductFacilities)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_FAC_PROD");

                entity.HasOne(d => d.ReplenishMethodEnum)
                    .WithMany(p => p.ProductFacilityReplenishMethodEnums)
                    .HasForeignKey(d => d.ReplenishMethodEnumId)
                    .HasConstraintName("PROD_FAC_REP");

                entity.HasOne(d => d.RequirementMethodEnum)
                    .WithMany(p => p.ProductFacilityRequirementMethodEnums)
                    .HasForeignKey(d => d.RequirementMethodEnumId)
                    .HasConstraintName("PROD_FAC_REQ");
            });

            modelBuilder.Entity<ProductFacilityAssoc>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.FacilityId, e.FacilityIdTo, e.FacilityAssocTypeId, e.FromDate });

                entity.ToTable("PRODUCT_FACILITY_ASSOC");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_FCT_ASC_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_FCT_ASC_TXSTP");

                entity.HasIndex(e => e.FacilityId, "PRFACASSOC_FAC");

                entity.HasIndex(e => e.FacilityIdTo, "PRFACASSOC_FACTO");

                entity.HasIndex(e => e.ProductId, "PRFACASSOC_PRO");

                entity.HasIndex(e => e.FacilityAssocTypeId, "PRFACASSOC_TYPE");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.FacilityIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID_TO");

                entity.Property(e => e.FacilityAssocTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ASSOC_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.Property(e => e.TransitTime).HasColumnName("TRANSIT_TIME");

                entity.HasOne(d => d.FacilityAssocType)
                    .WithMany(p => p.ProductFacilityAssocs)
                    .HasForeignKey(d => d.FacilityAssocTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRFACASSOC_TYPE");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.ProductFacilityAssocFacilities)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRFACASSOC_FAC");

                entity.HasOne(d => d.FacilityIdToNavigation)
                    .WithMany(p => p.ProductFacilityAssocFacilityIdToNavigations)
                    .HasForeignKey(d => d.FacilityIdTo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRFACASSOC_FACTO");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductFacilityAssocs)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRFACASSOC_PRO");
            });

            modelBuilder.Entity<ProductFacilityLocation>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.FacilityId, e.LocationSeqId });

                entity.ToTable("PRODUCT_FACILITY_LOCATION");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_FCT_LCN_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_FCT_LCN_TXSTP");

                entity.HasIndex(e => new { e.FacilityId, e.LocationSeqId }, "PROD_FCL_FCL");

                entity.HasIndex(e => e.ProductId, "PROD_FCL_PROD");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.LocationSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MinimumStock)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("MINIMUM_STOCK");

                entity.Property(e => e.MoveQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("MOVE_QUANTITY");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductFacilityLocations)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_FCL_PROD");

                entity.HasOne(d => d.FacilityLocation)
                    .WithMany(p => p.ProductFacilityLocations)
                    .HasForeignKey(d => new { d.FacilityId, d.LocationSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_FCL_FCL");
            });

            modelBuilder.Entity<ProductFeature>(entity =>
            {
                entity.ToTable("PRODUCT_FEATURE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDCT_FTR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDCT_FTR_TXSTMP");

                entity.HasIndex(e => e.ProductFeatureCategoryId, "PROD_FEAT_CATEGORY");

                entity.HasIndex(e => e.ProductFeatureTypeId, "PROD_FEAT_TYPE");

                entity.HasIndex(e => e.UomId, "PROD_FEAT_UOM");

                entity.Property(e => e.ProductFeatureId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_ID");

                entity.Property(e => e.Abbrev)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ABBREV");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DefaultAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("DEFAULT_AMOUNT");

                entity.Property(e => e.DefaultSequenceNum).HasColumnName("DEFAULT_SEQUENCE_NUM");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IdCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ID_CODE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.NumberSpecified)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("NUMBER_SPECIFIED");

                entity.Property(e => e.ProductFeatureCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_CATEGORY_ID");

                entity.Property(e => e.ProductFeatureTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_TYPE_ID");

                entity.Property(e => e.UomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UOM_ID");

                entity.HasOne(d => d.ProductFeatureCategory)
                    .WithMany(p => p.ProductFeatures)
                    .HasForeignKey(d => d.ProductFeatureCategoryId)
                    .HasConstraintName("PROD_FEAT_CATEGORY");

                entity.HasOne(d => d.ProductFeatureType)
                    .WithMany(p => p.ProductFeatures)
                    .HasForeignKey(d => d.ProductFeatureTypeId)
                    .HasConstraintName("PROD_FEAT_TYPE");

                entity.HasOne(d => d.Uom)
                    .WithMany(p => p.ProductFeatures)
                    .HasForeignKey(d => d.UomId)
                    .HasConstraintName("PROD_FEAT_UOM");
            });

            modelBuilder.Entity<ProductFeatureAppl>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.ProductFeatureId, e.FromDate });

                entity.ToTable("PRODUCT_FEATURE_APPL");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_FTR_APL_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_FTR_APL_TXSTP");

                entity.HasIndex(e => e.ProductFeatureId, "PROD_FAPPL_FEATURE");

                entity.HasIndex(e => e.ProductId, "PROD_FAPPL_PRODUCT");

                entity.HasIndex(e => e.ProductFeatureApplTypeId, "PROD_FAPPL_TYPE");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.ProductFeatureId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ProductFeatureApplTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_APPL_TYPE_ID");

                entity.Property(e => e.RecurringAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("RECURRING_AMOUNT");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ProductFeatureApplType)
                    .WithMany(p => p.ProductFeatureAppls)
                    .HasForeignKey(d => d.ProductFeatureApplTypeId)
                    .HasConstraintName("PROD_FAPPL_TYPE");

                entity.HasOne(d => d.ProductFeature)
                    .WithMany(p => p.ProductFeatureAppls)
                    .HasForeignKey(d => d.ProductFeatureId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_FAPPL_FEATURE");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductFeatureAppls)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_FAPPL_PRODUCT");
            });

            modelBuilder.Entity<ProductFeatureApplAttr>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.ProductFeatureId, e.FromDate, e.AttrName });

                entity.ToTable("PRODUCT_FEATURE_APPL_ATTR");

                entity.HasIndex(e => new { e.ProductId, e.ProductFeatureId, e.FromDate }, "PROD_FAPPA_FEATAPP");

                entity.HasIndex(e => e.ProductFeatureId, "PROD_FAPPA_FEATURE");

                entity.HasIndex(e => e.ProductId, "PROD_FAPPA_PRODUCT");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_FTR_APL_ATR_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_FTR_APL_ATR_TS");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.ProductFeatureId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ProductFeature)
                    .WithMany(p => p.ProductFeatureApplAttrs)
                    .HasForeignKey(d => d.ProductFeatureId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_FAPPA_FEATURE");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductFeatureApplAttrs)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_FAPPA_PRODUCT");

                entity.HasOne(d => d.ProductFeatureAppl)
                    .WithMany(p => p.ProductFeatureApplAttrs)
                    .HasForeignKey(d => new { d.ProductId, d.ProductFeatureId, d.FromDate })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_FAPPA_FEATAPP");
            });

            modelBuilder.Entity<ProductFeatureApplType>(entity =>
            {
                entity.ToTable("PRODUCT_FEATURE_APPL_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "PROD_FAPPL_TYPPAR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_FTR_APL_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_FTR_APL_TP_TXS");

                entity.Property(e => e.ProductFeatureApplTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_APPL_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("PROD_FAPPL_TYPPAR");
            });

            modelBuilder.Entity<ProductFeatureCatGrpAppl>(entity =>
            {
                entity.HasKey(e => new { e.ProductCategoryId, e.ProductFeatureGroupId, e.FromDate })
                    .HasName("PK_PRODUCT_FEATURE_CAT_GRP_APP");

                entity.ToTable("PRODUCT_FEATURE_CAT_GRP_APPL");

                entity.HasIndex(e => e.ProductCategoryId, "PROD_FCGAPL_CAT");

                entity.HasIndex(e => e.ProductFeatureGroupId, "PROD_FCGAPL_FGRP");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_CT_GRP_APL_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_CT_GRP_APL_TS");

                entity.Property(e => e.ProductCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CATEGORY_ID");

                entity.Property(e => e.ProductFeatureGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_GROUP_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.ProductFeatureCatGrpAppls)
                    .HasForeignKey(d => d.ProductCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_FCGAPL_CAT");

                entity.HasOne(d => d.ProductFeatureGroup)
                    .WithMany(p => p.ProductFeatureCatGrpAppls)
                    .HasForeignKey(d => d.ProductFeatureGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_FCGAPL_FGRP");
            });

            modelBuilder.Entity<ProductFeatureCategory>(entity =>
            {
                entity.ToTable("PRODUCT_FEATURE_CATEGORY");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_FTR_CTR_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_FTR_CTR_TXSTP");

                entity.HasIndex(e => e.ParentCategoryId, "PROD_FEAT_CAT_PAR");

                entity.Property(e => e.ProductFeatureCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_CATEGORY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_CATEGORY_ID");

                entity.HasOne(d => d.ParentCategory)
                    .WithMany(p => p.InverseParentCategory)
                    .HasForeignKey(d => d.ParentCategoryId)
                    .HasConstraintName("PROD_FEAT_CAT_PAR");
            });

            modelBuilder.Entity<ProductFeatureCategoryAppl>(entity =>
            {
                entity.HasKey(e => new { e.ProductCategoryId, e.ProductFeatureCategoryId, e.FromDate })
                    .HasName("PK_PRODUCT_FEATURE_CATEGORY_AP");

                entity.ToTable("PRODUCT_FEATURE_CATEGORY_APPL");

                entity.HasIndex(e => e.ProductCategoryId, "PROD_FCAPPL_CAT");

                entity.HasIndex(e => e.ProductFeatureCategoryId, "PROD_FCAPPL_FCAT");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_FTR_CTR_APL_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_FTR_CTR_APL_TS");

                entity.Property(e => e.ProductCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CATEGORY_ID");

                entity.Property(e => e.ProductFeatureCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_CATEGORY_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.ProductFeatureCategoryAppls)
                    .HasForeignKey(d => d.ProductCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_FCAPPL_CAT");

                entity.HasOne(d => d.ProductFeatureCategory)
                    .WithMany(p => p.ProductFeatureCategoryAppls)
                    .HasForeignKey(d => d.ProductFeatureCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_FCAPPL_FCAT");
            });

            modelBuilder.Entity<ProductFeatureDataResource>(entity =>
            {
                entity.HasKey(e => new { e.DataResourceId, e.ProductFeatureId })
                    .HasName("PK_PRODUCT_FEATURE_DATA_RESOUR");

                entity.ToTable("PRODUCT_FEATURE_DATA_RESOURCE");

                entity.HasIndex(e => e.DataResourceId, "PFEAT_DR_DATRES");

                entity.HasIndex(e => e.ProductFeatureId, "PFEAT_DR_FEATURE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_FTR_DT_RSC_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_FTR_DT_RSC_TXS");

                entity.Property(e => e.DataResourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_RESOURCE_ID");

                entity.Property(e => e.ProductFeatureId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.DataResource)
                    .WithMany(p => p.ProductFeatureDataResources)
                    .HasForeignKey(d => d.DataResourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PFEAT_DR_DATRES");

                entity.HasOne(d => d.ProductFeature)
                    .WithMany(p => p.ProductFeatureDataResources)
                    .HasForeignKey(d => d.ProductFeatureId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PFEAT_DR_FEATURE");
            });

            modelBuilder.Entity<ProductFeatureGroup>(entity =>
            {
                entity.ToTable("PRODUCT_FEATURE_GROUP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_FTR_GRP_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_FTR_GRP_TXSTP");

                entity.Property(e => e.ProductFeatureGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_GROUP_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<ProductFeatureGroupAppl>(entity =>
            {
                entity.HasKey(e => new { e.ProductFeatureGroupId, e.ProductFeatureId, e.FromDate });

                entity.ToTable("PRODUCT_FEATURE_GROUP_APPL");

                entity.HasIndex(e => e.ProductFeatureId, "PROD_FGAPP_FEATURE");

                entity.HasIndex(e => e.ProductFeatureGroupId, "PROD_FGAPP_PRODUCT");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_FTR_GRP_APL_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_FTR_GRP_APL_TS");

                entity.Property(e => e.ProductFeatureGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_GROUP_ID");

                entity.Property(e => e.ProductFeatureId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ProductFeatureGroup)
                    .WithMany(p => p.ProductFeatureGroupAppls)
                    .HasForeignKey(d => d.ProductFeatureGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_FGAPP_PRODUCT");

                entity.HasOne(d => d.ProductFeature)
                    .WithMany(p => p.ProductFeatureGroupAppls)
                    .HasForeignKey(d => d.ProductFeatureId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_FGAPP_FEATURE");
            });

            modelBuilder.Entity<ProductFeatureIactn>(entity =>
            {
                entity.HasKey(e => new { e.ProductFeatureId, e.ProductFeatureIdTo });

                entity.ToTable("PRODUCT_FEATURE_IACTN");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_FTR_ICN_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_FTR_ICN_TXSTP");

                entity.HasIndex(e => e.ProductFeatureIdTo, "PROD_FICTN_AFEAT");

                entity.HasIndex(e => e.ProductFeatureId, "PROD_FICTN_MFEAT");

                entity.HasIndex(e => e.ProductFeatureIactnTypeId, "PROD_FICTN_TYPE");

                entity.Property(e => e.ProductFeatureId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_ID");

                entity.Property(e => e.ProductFeatureIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_ID_TO");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ProductFeatureIactnTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_IACTN_TYPE_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.HasOne(d => d.ProductFeatureIactnType)
                    .WithMany(p => p.ProductFeatureIactns)
                    .HasForeignKey(d => d.ProductFeatureIactnTypeId)
                    .HasConstraintName("PROD_FICTN_TYPE");

                entity.HasOne(d => d.ProductFeature)
                    .WithMany(p => p.ProductFeatureIactnProductFeatures)
                    .HasForeignKey(d => d.ProductFeatureId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_FICTN_MFEAT");

                entity.HasOne(d => d.ProductFeatureIdToNavigation)
                    .WithMany(p => p.ProductFeatureIactnProductFeatureIdToNavigations)
                    .HasForeignKey(d => d.ProductFeatureIdTo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_FICTN_AFEAT");
            });

            modelBuilder.Entity<ProductFeatureIactnType>(entity =>
            {
                entity.ToTable("PRODUCT_FEATURE_IACTN_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "PROD_FICTN_TYPPAR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_FTR_ICN_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_FTR_ICN_TP_TXS");

                entity.Property(e => e.ProductFeatureIactnTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_IACTN_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("PROD_FICTN_TYPPAR");
            });

            modelBuilder.Entity<ProductFeaturePrice>(entity =>
            {
                entity.HasKey(e => new { e.ProductFeatureId, e.ProductPriceTypeId, e.CurrencyUomId, e.FromDate });

                entity.ToTable("PRODUCT_FEATURE_PRICE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_FTR_PRC_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_FTR_PRC_TXSTP");

                entity.HasIndex(e => new { e.ProductFeatureId, e.CurrencyUomId }, "PRD_FT_PRC_GENLKP");

                entity.HasIndex(e => e.CreatedByUserLogin, "PROD_F_PRICE_CBUL");

                entity.HasIndex(e => e.CurrencyUomId, "PROD_F_PRICE_CUOM");

                entity.HasIndex(e => e.LastModifiedByUserLogin, "PROD_F_PRICE_LMBUL");

                entity.HasIndex(e => e.ProductPriceTypeId, "PROD_F_PRICE_TYPE");

                entity.Property(e => e.ProductFeatureId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_ID");

                entity.Property(e => e.ProductPriceTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PRICE_TYPE_ID");

                entity.Property(e => e.CurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Price)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("PRICE");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.CreatedByUserLoginNavigation)
                    .WithMany(p => p.ProductFeaturePriceCreatedByUserLoginNavigations)
                    .HasForeignKey(d => d.CreatedByUserLogin)
                    .HasConstraintName("PROD_F_PRICE_CBUL");

                entity.HasOne(d => d.CurrencyUom)
                    .WithMany(p => p.ProductFeaturePrices)
                    .HasForeignKey(d => d.CurrencyUomId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_F_PRICE_CUOM");

                entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                    .WithMany(p => p.ProductFeaturePriceLastModifiedByUserLoginNavigations)
                    .HasForeignKey(d => d.LastModifiedByUserLogin)
                    .HasConstraintName("PROD_F_PRICE_LMBUL");

                entity.HasOne(d => d.ProductPriceType)
                    .WithMany(p => p.ProductFeaturePrices)
                    .HasForeignKey(d => d.ProductPriceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_F_PRICE_TYPE");
            });

            modelBuilder.Entity<ProductFeatureType>(entity =>
            {
                entity.ToTable("PRODUCT_FEATURE_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_FTR_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_FTR_TP_TXSTMP");

                entity.HasIndex(e => e.ParentTypeId, "PROD_FEAT_TYPPAR");

                entity.Property(e => e.ProductFeatureTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("PROD_FEAT_TYPPAR");
            });

            modelBuilder.Entity<ProductGeo>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.GeoId });

                entity.ToTable("PRODUCT_GEO");

                entity.HasIndex(e => e.ProductGeoEnumId, "PRDGEO_ENUM");

                entity.HasIndex(e => e.GeoId, "PRDGEO_GEO");

                entity.HasIndex(e => e.ProductId, "PRDGEO_PRODUCT");

                entity.HasIndex(e => e.CreatedTxStamp, "PRODUCT_GEO_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRODUCT_GEO_TXSTMP");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.GeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ProductGeoEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_GEO_ENUM_ID");

                entity.HasOne(d => d.Geo)
                    .WithMany(p => p.ProductGeos)
                    .HasForeignKey(d => d.GeoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDGEO_GEO");

                entity.HasOne(d => d.ProductGeoEnum)
                    .WithMany(p => p.ProductGeos)
                    .HasForeignKey(d => d.ProductGeoEnumId)
                    .HasConstraintName("PRDGEO_ENUM");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductGeos)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDGEO_PRODUCT");
            });

            modelBuilder.Entity<ProductGlAccount>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.OrganizationPartyId, e.GlAccountTypeId });

                entity.ToTable("PRODUCT_GL_ACCOUNT");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_GL_ACCT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_GL_ACCT_TXSTP");

                entity.HasIndex(e => e.GlAccountId, "PROD_GLACT_GLACT");

                entity.HasIndex(e => e.OrganizationPartyId, "PROD_GLACT_PARTY");

                entity.HasIndex(e => e.ProductId, "PROD_GLACT_PROD");

                entity.HasIndex(e => e.GlAccountTypeId, "PROD_GLACT_TYPE");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.OrganizationPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_PARTY_ID");

                entity.Property(e => e.GlAccountTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.GlAccount)
                    .WithMany(p => p.ProductGlAccounts)
                    .HasForeignKey(d => d.GlAccountId)
                    .HasConstraintName("PROD_GLACT_GLACT");

                entity.HasOne(d => d.GlAccountType)
                    .WithMany(p => p.ProductGlAccounts)
                    .HasForeignKey(d => d.GlAccountTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_GLACT_TYPE");

                entity.HasOne(d => d.OrganizationParty)
                    .WithMany(p => p.ProductGlAccounts)
                    .HasForeignKey(d => d.OrganizationPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_GLACT_PARTY");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductGlAccounts)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_GLACT_PROD");
            });

            modelBuilder.Entity<ProductGroupOrder>(entity =>
            {
                entity.HasKey(e => e.GroupOrderId);

                entity.ToTable("PRODUCT_GROUP_ORDER");

                entity.HasIndex(e => e.JobId, "GROUP_ORDER_JOB");

                entity.HasIndex(e => e.StatusId, "GROUP_ORDER_STATUS");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_GRP_ORR_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_GRP_ORR_TXSTP");

                entity.HasIndex(e => e.ProductId, "PROD_GROUP_ORDER");

                entity.Property(e => e.GroupOrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_ORDER_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.JobId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("JOB_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.ReqOrderQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("REQ_ORDER_QTY");

                entity.Property(e => e.SoldOrderQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("SOLD_ORDER_QTY");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Job)
                    .WithMany(p => p.ProductGroupOrders)
                    .HasForeignKey(d => d.JobId)
                    .HasConstraintName("GROUP_ORDER_JOB");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductGroupOrders)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("PROD_GROUP_ORDER");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ProductGroupOrders)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("GROUP_ORDER_STATUS");
            });

            modelBuilder.Entity<ProductKeywordNew>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.Keyword, e.KeywordTypeId });

                entity.ToTable("PRODUCT_KEYWORD_NEW");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_KWD_NW_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_KWD_NW_TXSTMP");

                entity.HasIndex(e => e.Keyword, "PROD_KWD_KWD_NEW");

                entity.HasIndex(e => e.ProductId, "PROD_KWD_PROD_NEW");

                entity.HasIndex(e => e.StatusId, "PROD_KWD_STTS");

                entity.HasIndex(e => e.KeywordTypeId, "PROD_KWD_TYPE");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.Keyword)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("KEYWORD");

                entity.Property(e => e.KeywordTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("KEYWORD_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.RelevancyWeight).HasColumnName("RELEVANCY_WEIGHT");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.HasOne(d => d.KeywordType)
                    .WithMany(p => p.ProductKeywordNews)
                    .HasForeignKey(d => d.KeywordTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_KWD_TYPE");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductKeywordNews)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_KWD_PROD_NEW");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ProductKeywordNews)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("PROD_KWD_STTS");
            });

            modelBuilder.Entity<ProductMaint>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.ProductMaintSeqId });

                entity.ToTable("PRODUCT_MAINT");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDCT_MNT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDCT_MNT_TXSTMP");

                entity.HasIndex(e => e.IntervalUomId, "PRODMNT_INTUOM");

                entity.HasIndex(e => e.ProductMaintTypeId, "PRODMNT_MNTTYP");

                entity.HasIndex(e => e.IntervalMeterTypeId, "PRODMNT_PDMTTYP");

                entity.HasIndex(e => e.ProductId, "PRODMNT_PROD");

                entity.HasIndex(e => e.MaintTemplateWorkEffortId, "PRODMNT_TPLHWE");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.ProductMaintSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_MAINT_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.IntervalMeterTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INTERVAL_METER_TYPE_ID");

                entity.Property(e => e.IntervalQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("INTERVAL_QUANTITY");

                entity.Property(e => e.IntervalUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INTERVAL_UOM_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MaintName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MAINT_NAME");

                entity.Property(e => e.MaintTemplateWorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MAINT_TEMPLATE_WORK_EFFORT_ID");

                entity.Property(e => e.ProductMaintTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_MAINT_TYPE_ID");

                entity.Property(e => e.RepeatCount).HasColumnName("REPEAT_COUNT");

                entity.HasOne(d => d.IntervalMeterType)
                    .WithMany(p => p.ProductMaints)
                    .HasForeignKey(d => d.IntervalMeterTypeId)
                    .HasConstraintName("PRODMNT_PDMTTYP");

                entity.HasOne(d => d.IntervalUom)
                    .WithMany(p => p.ProductMaints)
                    .HasForeignKey(d => d.IntervalUomId)
                    .HasConstraintName("PRODMNT_INTUOM");

                entity.HasOne(d => d.MaintTemplateWorkEffort)
                    .WithMany(p => p.ProductMaints)
                    .HasForeignKey(d => d.MaintTemplateWorkEffortId)
                    .HasConstraintName("PRODMNT_TPLHWE");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductMaints)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRODMNT_PROD");

                entity.HasOne(d => d.ProductMaintType)
                    .WithMany(p => p.ProductMaints)
                    .HasForeignKey(d => d.ProductMaintTypeId)
                    .HasConstraintName("PRODMNT_MNTTYP");
            });

            modelBuilder.Entity<ProductMaintType>(entity =>
            {
                entity.ToTable("PRODUCT_MAINT_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_MNT_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_MNT_TP_TXSTMP");

                entity.HasIndex(e => e.ParentTypeId, "PRODMNT_TYPE_PAR");

                entity.Property(e => e.ProductMaintTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_MAINT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("PRODMNT_TYPE_PAR");
            });

            modelBuilder.Entity<ProductManufacturingRule>(entity =>
            {
                entity.HasKey(e => e.RuleId);

                entity.ToTable("PRODUCT_MANUFACTURING_RULE");

                entity.HasIndex(e => e.ProductFeature, "PRODUCT_FEAT");

                entity.HasIndex(e => e.ProductIdFor, "PRODUCT_FOR");

                entity.HasIndex(e => e.ProductIdIn, "PRODUCT_IN");

                entity.HasIndex(e => e.ProductId, "PRODUCT_PARENT");

                entity.HasIndex(e => e.ProductIdInSubst, "PRODUCT_SUBST");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_MNFCTG_RL_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_MNFCTG_RL_TXSP");

                entity.Property(e => e.RuleId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RULE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ProductFeature)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.ProductIdFor)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID_FOR");

                entity.Property(e => e.ProductIdIn)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID_IN");

                entity.Property(e => e.ProductIdInSubst)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID_IN_SUBST");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.RuleOperator)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RULE_OPERATOR");

                entity.Property(e => e.RuleSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RULE_SEQ_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ProductFeatureNavigation)
                    .WithMany(p => p.ProductManufacturingRules)
                    .HasForeignKey(d => d.ProductFeature)
                    .HasConstraintName("PRODUCT_FEAT");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductManufacturingRuleProducts)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("PRODUCT_PARENT");

                entity.HasOne(d => d.ProductIdForNavigation)
                    .WithMany(p => p.ProductManufacturingRuleProductIdForNavigations)
                    .HasForeignKey(d => d.ProductIdFor)
                    .HasConstraintName("PRODUCT_FOR");

                entity.HasOne(d => d.ProductIdInNavigation)
                    .WithMany(p => p.ProductManufacturingRuleProductIdInNavigations)
                    .HasForeignKey(d => d.ProductIdIn)
                    .HasConstraintName("PRODUCT_IN");

                entity.HasOne(d => d.ProductIdInSubstNavigation)
                    .WithMany(p => p.ProductManufacturingRuleProductIdInSubstNavigations)
                    .HasForeignKey(d => d.ProductIdInSubst)
                    .HasConstraintName("PRODUCT_SUBST");
            });

            modelBuilder.Entity<ProductMeter>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.ProductMeterTypeId });

                entity.ToTable("PRODUCT_METER");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDCT_MTR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDCT_MTR_TXSTMP");

                entity.HasIndex(e => e.ProductMeterTypeId, "PRODMTR_MTRTYP");

                entity.HasIndex(e => e.MeterUomId, "PRODMTR_MTRUOM");

                entity.HasIndex(e => e.ProductId, "PRODMTR_PROD");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.ProductMeterTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_METER_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MeterName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("METER_NAME");

                entity.Property(e => e.MeterUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("METER_UOM_ID");

                entity.HasOne(d => d.MeterUom)
                    .WithMany(p => p.ProductMeters)
                    .HasForeignKey(d => d.MeterUomId)
                    .HasConstraintName("PRODMTR_MTRUOM");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductMeters)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRODMTR_PROD");

                entity.HasOne(d => d.ProductMeterType)
                    .WithMany(p => p.ProductMeters)
                    .HasForeignKey(d => d.ProductMeterTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRODMTR_MTRTYP");
            });

            modelBuilder.Entity<ProductMeterType>(entity =>
            {
                entity.ToTable("PRODUCT_METER_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_MTR_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_MTR_TP_TXSTMP");

                entity.HasIndex(e => e.DefaultUomId, "PRODMTRTP_DUOM");

                entity.Property(e => e.ProductMeterTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_METER_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DefaultUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULT_UOM_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.DefaultUom)
                    .WithMany(p => p.ProductMeterTypes)
                    .HasForeignKey(d => d.DefaultUomId)
                    .HasConstraintName("PRODMTRTP_DUOM");
            });

            modelBuilder.Entity<ProductOrderItem>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.OrderItemSeqId, e.EngagementId, e.EngagementItemSeqId });

                entity.ToTable("PRODUCT_ORDER_ITEM");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_ORR_ITM_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_ORR_ITM_TXSTP");

                entity.HasIndex(e => e.EngagementId, "PROD_OITEM_ENOHDR");

                entity.HasIndex(e => new { e.EngagementId, e.EngagementItemSeqId }, "PROD_OITEM_ENOITM");

                entity.HasIndex(e => e.OrderId, "PROD_OITEM_OHDR");

                entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId }, "PROD_OITEM_OITEM");

                entity.HasIndex(e => e.ProductId, "PROD_OITEM_PROD");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.EngagementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ENGAGEMENT_ID");

                entity.Property(e => e.EngagementItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ENGAGEMENT_ITEM_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.HasOne(d => d.Engagement)
                    .WithMany(p => p.ProductOrderItemEngagements)
                    .HasForeignKey(d => d.EngagementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_OITEM_ENOHDR");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.ProductOrderItemOrders)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_OITEM_OHDR");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductOrderItems)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("PROD_OITEM_PROD");

                entity.HasOne(d => d.EngagementI)
                    .WithMany(p => p.ProductOrderItemEngagementIs)
                    .HasForeignKey(d => new { d.EngagementId, d.EngagementItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_OITEM_ENOITM");

                entity.HasOne(d => d.OrderI)
                    .WithMany(p => p.ProductOrderItemOrderIs)
                    .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_OITEM_OITEM");
            });

            modelBuilder.Entity<ProductPaymentMethodType>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.PaymentMethodTypeId, e.ProductPricePurposeId, e.FromDate });

                entity.ToTable("PRODUCT_PAYMENT_METHOD_TYPE");

                entity.HasIndex(e => e.PaymentMethodTypeId, "PROD_PMT_PMT");

                entity.HasIndex(e => e.ProductPricePurposeId, "PROD_PMT_PPRP");

                entity.HasIndex(e => e.ProductId, "PROD_PMT_PROD");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_PMT_MTD_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_PMT_MTD_TP_TXS");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.PaymentMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_METHOD_TYPE_ID");

                entity.Property(e => e.ProductPricePurposeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PRICE_PURPOSE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.PaymentMethodType)
                    .WithMany(p => p.ProductPaymentMethodTypes)
                    .HasForeignKey(d => d.PaymentMethodTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_PMT_PMT");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductPaymentMethodTypes)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_PMT_PROD");

                entity.HasOne(d => d.ProductPricePurpose)
                    .WithMany(p => p.ProductPaymentMethodTypes)
                    .HasForeignKey(d => d.ProductPricePurposeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_PMT_PPRP");
            });

            modelBuilder.Entity<ProductPrice>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.ProductPriceTypeId, e.CurrencyUomId, e.FromDate });

                entity.ToTable("PRODUCT_PRICE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDCT_PRC_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDCT_PRC_TXSTMP");

                entity.HasIndex(e => new { e.ProductId, e.ProductPriceTypeId, e.CurrencyUomId }, "PRD_PRC_GENLKP");

                entity.HasIndex(e => e.TaxAuthGeoId, "PROD_PRC_TAXGEO");

                entity.HasIndex(e => e.TaxAuthPartyId, "PROD_PRC_TAXPTY");

                entity.HasIndex(e => e.CreatedByUserLogin, "PROD_PRICE_CBUL");

                entity.HasIndex(e => e.CustomPriceCalcService, "PROD_PRICE_CMET");

                entity.HasIndex(e => e.CurrencyUomId, "PROD_PRICE_CUOM");

                entity.HasIndex(e => e.LastModifiedByUserLogin, "PROD_PRICE_LMBUL");

                entity.HasIndex(e => e.ProductId, "PROD_PRICE_PROD");

                entity.HasIndex(e => e.ProductStoreGroupId, "PROD_PRICE_PSTG");

                entity.HasIndex(e => e.ProductPricePurposeId, "PROD_PRICE_PURP");

                entity.HasIndex(e => e.TermUomId, "PROD_PRICE_TUOM");

                entity.HasIndex(e => e.ProductPriceTypeId, "PROD_PRICE_TYPE");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.ProductPriceTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PRICE_TYPE_ID");

                entity.Property(e => e.ProductPricePurposeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PRICE_PURPOSE_ID");

                entity.Property(e => e.CurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM_ID");

                entity.Property(e => e.ProductStoreGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_GROUP_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CustomPriceCalcService)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_PRICE_CALC_SERVICE");

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Price)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("PRICE");

                entity.Property(e => e.PriceWithTax)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("PRICE_WITH_TAX");

                entity.Property(e => e.PriceWithoutTax)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("PRICE_WITHOUT_TAX");

                entity.Property(e => e.TaxAmount)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("TAX_AMOUNT");

                entity.Property(e => e.TaxAuthGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTH_GEO_ID");

                entity.Property(e => e.TaxAuthPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTH_PARTY_ID");

                entity.Property(e => e.TaxInPrice)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TAX_IN_PRICE")
                    .IsFixedLength();

                entity.Property(e => e.TaxPercentage)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("TAX_PERCENTAGE");

                entity.Property(e => e.TermUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TERM_UOM_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.CreatedByUserLoginNavigation)
                    .WithMany(p => p.ProductPriceCreatedByUserLoginNavigations)
                    .HasForeignKey(d => d.CreatedByUserLogin)
                    .HasConstraintName("PROD_PRICE_CBUL");

                entity.HasOne(d => d.CurrencyUom)
                    .WithMany(p => p.ProductPriceCurrencyUoms)
                    .HasForeignKey(d => d.CurrencyUomId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_PRICE_CUOM");

                entity.HasOne(d => d.CustomPriceCalcServiceNavigation)
                    .WithMany(p => p.ProductPrices)
                    .HasForeignKey(d => d.CustomPriceCalcService)
                    .HasConstraintName("PROD_PRICE_CMET");

                entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                    .WithMany(p => p.ProductPriceLastModifiedByUserLoginNavigations)
                    .HasForeignKey(d => d.LastModifiedByUserLogin)
                    .HasConstraintName("PROD_PRICE_LMBUL");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductPrices)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_PRICE_PROD");

                entity.HasOne(d => d.ProductPricePurpose)
                    .WithMany(p => p.ProductPrices)
                    .HasForeignKey(d => d.ProductPricePurposeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_PRICE_PURP");

                entity.HasOne(d => d.ProductPriceType)
                    .WithMany(p => p.ProductPrices)
                    .HasForeignKey(d => d.ProductPriceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_PRICE_TYPE");

                entity.HasOne(d => d.ProductStoreGroup)
                    .WithMany(p => p.ProductPrices)
                    .HasForeignKey(d => d.ProductStoreGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_PRICE_PSTG");

                entity.HasOne(d => d.TaxAuthGeo)
                    .WithMany(p => p.ProductPrices)
                    .HasForeignKey(d => d.TaxAuthGeoId)
                    .HasConstraintName("PROD_PRC_TAXGEO");

                entity.HasOne(d => d.TaxAuthParty)
                    .WithMany(p => p.ProductPrices)
                    .HasForeignKey(d => d.TaxAuthPartyId)
                    .HasConstraintName("PROD_PRC_TAXPTY");

                entity.HasOne(d => d.TermUom)
                    .WithMany(p => p.ProductPriceTermUoms)
                    .HasForeignKey(d => d.TermUomId)
                    .HasConstraintName("PROD_PRICE_TUOM");
            });

            modelBuilder.Entity<ProductPriceAction>(entity =>
            {
                entity.HasKey(e => new { e.ProductPriceRuleId, e.ProductPriceActionSeqId });

                entity.ToTable("PRODUCT_PRICE_ACTION");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_PRC_ACN_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_PRC_ACN_TXSTP");

                entity.HasIndex(e => e.ProductPriceRuleId, "PROD_PCACT_RL");

                entity.HasIndex(e => e.ProductPriceActionTypeId, "PROD_PCACT_TYPE");

                entity.Property(e => e.ProductPriceRuleId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PRICE_RULE_ID");

                entity.Property(e => e.ProductPriceActionSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PRICE_ACTION_SEQ_ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ProductPriceActionTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PRICE_ACTION_TYPE_ID");

                entity.Property(e => e.RateCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("RATE_CODE");

                entity.HasOne(d => d.ProductPriceActionType)
                    .WithMany(p => p.ProductPriceActions)
                    .HasForeignKey(d => d.ProductPriceActionTypeId)
                    .HasConstraintName("PROD_PCACT_TYPE");

                entity.HasOne(d => d.ProductPriceRule)
                    .WithMany(p => p.ProductPriceActions)
                    .HasForeignKey(d => d.ProductPriceRuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_PCACT_RL");
            });

            modelBuilder.Entity<ProductPriceActionType>(entity =>
            {
                entity.ToTable("PRODUCT_PRICE_ACTION_TYPE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_PRC_ACN_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_PRC_ACN_TP_TXS");

                entity.Property(e => e.ProductPriceActionTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PRICE_ACTION_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<ProductPriceAutoNotice>(entity =>
            {
                entity.HasKey(e => e.ProductPriceNoticeId);

                entity.ToTable("PRODUCT_PRICE_AUTO_NOTICE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_PRC_AT_NTC_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_PRC_AT_NTC_TXS");

                entity.Property(e => e.ProductPriceNoticeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PRICE_NOTICE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.RunDate)
                    .HasColumnType("datetime")
                    .HasColumnName("RUN_DATE");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");
            });

            modelBuilder.Entity<ProductPriceChange>(entity =>
            {
                entity.ToTable("PRODUCT_PRICE_CHANGE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_PRC_CHG_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_PRC_CHG_TXSTP");

                entity.HasIndex(e => e.ChangedByUserLogin, "PROD_PRCHNG_CHUL");

                entity.Property(e => e.ProductPriceChangeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PRICE_CHANGE_ID");

                entity.Property(e => e.ChangedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CHANGED_BY_USER_LOGIN");

                entity.Property(e => e.ChangedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHANGED_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OldPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("OLD_PRICE");

                entity.Property(e => e.Price)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PRICE");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.ProductPricePurposeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PRICE_PURPOSE_ID");

                entity.Property(e => e.ProductPriceTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PRICE_TYPE_ID");

                entity.Property(e => e.ProductStoreGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_GROUP_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ChangedByUserLoginNavigation)
                    .WithMany(p => p.ProductPriceChanges)
                    .HasForeignKey(d => d.ChangedByUserLogin)
                    .HasConstraintName("PROD_PRCHNG_CHUL");
            });

            modelBuilder.Entity<ProductPriceCond>(entity =>
            {
                entity.HasKey(e => new { e.ProductPriceRuleId, e.ProductPriceCondSeqId });

                entity.ToTable("PRODUCT_PRICE_COND");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_PRC_CND_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_PRC_CND_TXSTP");

                entity.HasIndex(e => e.InputParamEnumId, "PROD_PCCOND_INENUM");

                entity.HasIndex(e => e.OperatorEnumId, "PROD_PCCOND_OPENUM");

                entity.HasIndex(e => e.ProductPriceRuleId, "PROD_PCCOND_RULE");

                entity.Property(e => e.ProductPriceRuleId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PRICE_RULE_ID");

                entity.Property(e => e.ProductPriceCondSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PRICE_COND_SEQ_ID");

                entity.Property(e => e.CondValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COND_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.InputParamEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INPUT_PARAM_ENUM_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OperatorEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("OPERATOR_ENUM_ID");

                entity.HasOne(d => d.InputParamEnum)
                    .WithMany(p => p.ProductPriceCondInputParamEnums)
                    .HasForeignKey(d => d.InputParamEnumId)
                    .HasConstraintName("PROD_PCCOND_INENUM");

                entity.HasOne(d => d.OperatorEnum)
                    .WithMany(p => p.ProductPriceCondOperatorEnums)
                    .HasForeignKey(d => d.OperatorEnumId)
                    .HasConstraintName("PROD_PCCOND_OPENUM");

                entity.HasOne(d => d.ProductPriceRule)
                    .WithMany(p => p.ProductPriceConds)
                    .HasForeignKey(d => d.ProductPriceRuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_PCCOND_RULE");
            });

            modelBuilder.Entity<ProductPricePurpose>(entity =>
            {
                entity.ToTable("PRODUCT_PRICE_PURPOSE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_PRC_PRS_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_PRC_PRS_TXSTP");

                entity.Property(e => e.ProductPricePurposeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PRICE_PURPOSE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<ProductPriceRule>(entity =>
            {
                entity.ToTable("PRODUCT_PRICE_RULE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_PRC_RL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_PRC_RL_TXSTMP");

                entity.Property(e => e.ProductPriceRuleId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PRICE_RULE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.IsSale)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SALE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.RuleName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RULE_NAME");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");
            });

            modelBuilder.Entity<ProductPriceType>(entity =>
            {
                entity.ToTable("PRODUCT_PRICE_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_PRC_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_PRC_TP_TXSTMP");

                entity.Property(e => e.ProductPriceTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PRICE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<ProductPromo>(entity =>
            {
                entity.ToTable("PRODUCT_PROMO");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDCT_PRM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDCT_PRM_TXSTMP");

                entity.HasIndex(e => e.CreatedByUserLogin, "PROD_PRMO_CUL");

                entity.HasIndex(e => e.LastModifiedByUserLogin, "PROD_PRMO_LMCUL");

                entity.HasIndex(e => e.OverrideOrgPartyId, "PROD_PRMO_OPA");

                entity.Property(e => e.ProductPromoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_ID");

                entity.Property(e => e.BillbackFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("BILLBACK_FACTOR");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OverrideOrgPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("OVERRIDE_ORG_PARTY_ID");

                entity.Property(e => e.PromoName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PROMO_NAME");

                entity.Property(e => e.PromoText)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PROMO_TEXT");

                entity.Property(e => e.RequireCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REQUIRE_CODE")
                    .IsFixedLength();

                entity.Property(e => e.ShowToCustomer)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SHOW_TO_CUSTOMER")
                    .IsFixedLength();

                entity.Property(e => e.UseLimitPerCustomer).HasColumnName("USE_LIMIT_PER_CUSTOMER");

                entity.Property(e => e.UseLimitPerOrder).HasColumnName("USE_LIMIT_PER_ORDER");

                entity.Property(e => e.UseLimitPerPromotion).HasColumnName("USE_LIMIT_PER_PROMOTION");

                entity.Property(e => e.UserEntered)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USER_ENTERED")
                    .IsFixedLength();

                entity.HasOne(d => d.CreatedByUserLoginNavigation)
                    .WithMany(p => p.ProductPromoCreatedByUserLoginNavigations)
                    .HasForeignKey(d => d.CreatedByUserLogin)
                    .HasConstraintName("PROD_PRMO_CUL");

                entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                    .WithMany(p => p.ProductPromoLastModifiedByUserLoginNavigations)
                    .HasForeignKey(d => d.LastModifiedByUserLogin)
                    .HasConstraintName("PROD_PRMO_LMCUL");

                entity.HasOne(d => d.OverrideOrgParty)
                    .WithMany(p => p.ProductPromos)
                    .HasForeignKey(d => d.OverrideOrgPartyId)
                    .HasConstraintName("PROD_PRMO_OPA");
            });

            modelBuilder.Entity<ProductPromoAction>(entity =>
            {
                entity.HasKey(e => new { e.ProductPromoId, e.ProductPromoRuleId, e.ProductPromoActionSeqId });

                entity.ToTable("PRODUCT_PROMO_ACTION");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_PRM_ACN_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_PRM_ACN_TXSTP");

                entity.HasIndex(e => e.CustomMethodId, "PROD_PRACT_CMET");

                entity.HasIndex(e => e.ProductPromoActionEnumId, "PROD_PRACT_ENUM");

                entity.HasIndex(e => e.OrderAdjustmentTypeId, "PROD_PRACT_OATYPE");

                entity.HasIndex(e => e.ProductPromoId, "PROD_PRACT_PR");

                entity.HasIndex(e => new { e.ProductPromoId, e.ProductPromoRuleId }, "PROD_PRACT_RL");

                entity.Property(e => e.ProductPromoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_ID");

                entity.Property(e => e.ProductPromoRuleId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_RULE_ID");

                entity.Property(e => e.ProductPromoActionSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_ACTION_SEQ_ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CustomMethodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_METHOD_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OrderAdjustmentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ADJUSTMENT_TYPE_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.ProductPromoActionEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_ACTION_ENUM_ID");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SERVICE_NAME");

                entity.Property(e => e.UseCartQuantity)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_CART_QUANTITY")
                    .IsFixedLength();

                entity.HasOne(d => d.CustomMethod)
                    .WithMany(p => p.ProductPromoActions)
                    .HasForeignKey(d => d.CustomMethodId)
                    .HasConstraintName("PROD_PRACT_CMET");

                entity.HasOne(d => d.OrderAdjustmentType)
                    .WithMany(p => p.ProductPromoActions)
                    .HasForeignKey(d => d.OrderAdjustmentTypeId)
                    .HasConstraintName("PROD_PRACT_OATYPE");

                entity.HasOne(d => d.ProductPromoActionEnum)
                    .WithMany(p => p.ProductPromoActions)
                    .HasForeignKey(d => d.ProductPromoActionEnumId)
                    .HasConstraintName("PROD_PRACT_ENUM");

                entity.HasOne(d => d.ProductPromo)
                    .WithMany(p => p.ProductPromoActions)
                    .HasForeignKey(d => d.ProductPromoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_PRACT_PR");

                entity.HasOne(d => d.ProductPromoNavigation)
                    .WithMany(p => p.ProductPromoActions)
                    .HasForeignKey(d => new { d.ProductPromoId, d.ProductPromoRuleId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_PRACT_RL");
            });

            modelBuilder.Entity<ProductPromoCategory>(entity =>
            {
                entity.HasKey(e => new { e.ProductPromoId, e.ProductPromoRuleId, e.ProductPromoActionSeqId, e.ProductPromoCondSeqId, e.ProductCategoryId, e.AndGroupId });

                entity.ToTable("PRODUCT_PROMO_CATEGORY");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_PRM_CTR_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_PRM_CTR_TXSTP");

                entity.HasIndex(e => e.ProductPromoApplEnumId, "PROD_PRCAT_ENUM");

                entity.HasIndex(e => e.ProductCategoryId, "PROD_PRCAT_PRCAT");

                entity.HasIndex(e => e.ProductPromoId, "PROD_PRCAT_PROMO");

                entity.Property(e => e.ProductPromoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_ID");

                entity.Property(e => e.ProductPromoRuleId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_RULE_ID");

                entity.Property(e => e.ProductPromoActionSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_ACTION_SEQ_ID");

                entity.Property(e => e.ProductPromoCondSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_COND_SEQ_ID");

                entity.Property(e => e.ProductCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CATEGORY_ID");

                entity.Property(e => e.AndGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AND_GROUP_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.IncludeSubCategories)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INCLUDE_SUB_CATEGORIES")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ProductPromoApplEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_APPL_ENUM_ID");

                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.ProductPromoCategories)
                    .HasForeignKey(d => d.ProductCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_PRCAT_PRCAT");

                entity.HasOne(d => d.ProductPromoApplEnum)
                    .WithMany(p => p.ProductPromoCategories)
                    .HasForeignKey(d => d.ProductPromoApplEnumId)
                    .HasConstraintName("PROD_PRCAT_ENUM");

                entity.HasOne(d => d.ProductPromo)
                    .WithMany(p => p.ProductPromoCategories)
                    .HasForeignKey(d => d.ProductPromoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_PRCAT_PROMO");
            });

            modelBuilder.Entity<ProductPromoCode>(entity =>
            {
                entity.ToTable("PRODUCT_PROMO_CODE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_PRM_CD_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_PRM_CD_TXSTMP");

                entity.HasIndex(e => e.CreatedByUserLogin, "PROD_PRCOD_CUL");

                entity.HasIndex(e => e.LastModifiedByUserLogin, "PROD_PRCOD_LMCUL");

                entity.HasIndex(e => e.ProductPromoId, "PROD_PRCOD_PROMO");

                entity.Property(e => e.ProductPromoCodeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_CODE_ID");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ProductPromoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_ID");

                entity.Property(e => e.RequireEmailOrParty)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REQUIRE_EMAIL_OR_PARTY")
                    .IsFixedLength();

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.Property(e => e.UseLimitPerCode).HasColumnName("USE_LIMIT_PER_CODE");

                entity.Property(e => e.UseLimitPerCustomer).HasColumnName("USE_LIMIT_PER_CUSTOMER");

                entity.Property(e => e.UserEntered)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USER_ENTERED")
                    .IsFixedLength();

                entity.HasOne(d => d.CreatedByUserLoginNavigation)
                    .WithMany(p => p.ProductPromoCodeCreatedByUserLoginNavigations)
                    .HasForeignKey(d => d.CreatedByUserLogin)
                    .HasConstraintName("PROD_PRCOD_CUL");

                entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                    .WithMany(p => p.ProductPromoCodeLastModifiedByUserLoginNavigations)
                    .HasForeignKey(d => d.LastModifiedByUserLogin)
                    .HasConstraintName("PROD_PRCOD_LMCUL");

                entity.HasOne(d => d.ProductPromo)
                    .WithMany(p => p.ProductPromoCodes)
                    .HasForeignKey(d => d.ProductPromoId)
                    .HasConstraintName("PROD_PRCOD_PROMO");
            });

            modelBuilder.Entity<ProductPromoCodeEmail>(entity =>
            {
                entity.HasKey(e => new { e.ProductPromoCodeId, e.EmailAddress });

                entity.ToTable("PRODUCT_PROMO_CODE_EMAIL");

                entity.HasIndex(e => e.ProductPromoCodeId, "PROD_PRCDE_OPCD");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_PRM_CD_EML_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_PRM_CD_EML_TXS");

                entity.Property(e => e.ProductPromoCodeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_CODE_ID");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(320)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ADDRESS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ProductPromoCode)
                    .WithMany(p => p.ProductPromoCodeEmails)
                    .HasForeignKey(d => d.ProductPromoCodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_PRCDE_OPCD");
            });

            modelBuilder.Entity<ProductPromoCodeParty>(entity =>
            {
                entity.HasKey(e => new { e.ProductPromoCodeId, e.PartyId });

                entity.ToTable("PRODUCT_PROMO_CODE_PARTY");

                entity.HasIndex(e => e.ProductPromoCodeId, "PROD_PRCDP_PCD");

                entity.HasIndex(e => e.PartyId, "PROD_PRCDP_PRTY");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_PRM_CD_PRT_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_PRM_CD_PRT_TXS");

                entity.Property(e => e.ProductPromoCodeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_CODE_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.ProductPromoCodeParties)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_PRCDP_PRTY");

                entity.HasOne(d => d.ProductPromoCode)
                    .WithMany(p => p.ProductPromoCodeParties)
                    .HasForeignKey(d => d.ProductPromoCodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_PRCDP_PCD");
            });

            modelBuilder.Entity<ProductPromoCond>(entity =>
            {
                entity.HasKey(e => new { e.ProductPromoId, e.ProductPromoRuleId, e.ProductPromoCondSeqId });

                entity.ToTable("PRODUCT_PROMO_COND");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_PRM_CND_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_PRM_CND_TXSTP");

                entity.HasIndex(e => e.CustomMethodId, "PROD_PRCOND_CMETH");

                entity.HasIndex(e => e.InputParamEnumId, "PROD_PRCOND_INENUM");

                entity.HasIndex(e => e.OperatorEnumId, "PROD_PRCOND_OPENUM");

                entity.HasIndex(e => e.ProductPromoId, "PROD_PRCOND_PROMO");

                entity.HasIndex(e => new { e.ProductPromoId, e.ProductPromoRuleId }, "PROD_PRCOND_RULE");

                entity.Property(e => e.ProductPromoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_ID");

                entity.Property(e => e.ProductPromoRuleId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_RULE_ID");

                entity.Property(e => e.ProductPromoCondSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_COND_SEQ_ID");

                entity.Property(e => e.CondValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COND_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CustomMethodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_METHOD_ID");

                entity.Property(e => e.InputParamEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INPUT_PARAM_ENUM_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OperatorEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("OPERATOR_ENUM_ID");

                entity.Property(e => e.OtherValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OTHER_VALUE");

                entity.HasOne(d => d.CustomMethod)
                    .WithMany(p => p.ProductPromoConds)
                    .HasForeignKey(d => d.CustomMethodId)
                    .HasConstraintName("PROD_PRCOND_CMETH");

                entity.HasOne(d => d.InputParamEnum)
                    .WithMany(p => p.ProductPromoCondInputParamEnums)
                    .HasForeignKey(d => d.InputParamEnumId)
                    .HasConstraintName("PROD_PRCOND_INENUM");

                entity.HasOne(d => d.OperatorEnum)
                    .WithMany(p => p.ProductPromoCondOperatorEnums)
                    .HasForeignKey(d => d.OperatorEnumId)
                    .HasConstraintName("PROD_PRCOND_OPENUM");

                entity.HasOne(d => d.ProductPromo)
                    .WithMany(p => p.ProductPromoConds)
                    .HasForeignKey(d => d.ProductPromoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_PRCOND_PROMO");

                entity.HasOne(d => d.ProductPromoNavigation)
                    .WithMany(p => p.ProductPromoConds)
                    .HasForeignKey(d => new { d.ProductPromoId, d.ProductPromoRuleId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_PRCOND_RULE");
            });

            modelBuilder.Entity<ProductPromoContent>(entity =>
            {
                entity.HasKey(e => new { e.ProductPromoId, e.ContentId, e.ProductPromoContentTypeId, e.FromDate });

                entity.ToTable("PRODUCT_PROMO_CONTENT");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_PRM_CNT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_PRM_CNT_TXSTP");

                entity.HasIndex(e => e.ContentId, "PRODPR_CNT_CNT");

                entity.HasIndex(e => e.ProductPromoId, "PRODPR_CNT_PROD_PR");

                entity.HasIndex(e => e.ProductPromoContentTypeId, "PRODPR_CNT_TYPE");

                entity.Property(e => e.ProductPromoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_ID");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.ProductPromoContentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_CONTENT_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.ProductPromoContents)
                    .HasForeignKey(d => d.ContentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRODPR_CNT_CNT");

                entity.HasOne(d => d.ProductPromoContentType)
                    .WithMany(p => p.ProductPromoContents)
                    .HasForeignKey(d => d.ProductPromoContentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRODPR_CNT_TYPE");

                entity.HasOne(d => d.ProductPromo)
                    .WithMany(p => p.ProductPromoContents)
                    .HasForeignKey(d => d.ProductPromoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRODPR_CNT_PROD_PR");
            });

            modelBuilder.Entity<ProductPromoProduct>(entity =>
            {
                entity.HasKey(e => new { e.ProductPromoId, e.ProductPromoRuleId, e.ProductPromoActionSeqId, e.ProductPromoCondSeqId, e.ProductId });

                entity.ToTable("PRODUCT_PROMO_PRODUCT");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_PRM_PRT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_PRM_PRT_TXSTP");

                entity.HasIndex(e => e.ProductPromoApplEnumId, "PROD_PRPRD_ENUM");

                entity.HasIndex(e => e.ProductId, "PROD_PRPRD_PROD");

                entity.HasIndex(e => e.ProductPromoId, "PROD_PRPRD_PROMO");

                entity.Property(e => e.ProductPromoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_ID");

                entity.Property(e => e.ProductPromoRuleId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_RULE_ID");

                entity.Property(e => e.ProductPromoActionSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_ACTION_SEQ_ID");

                entity.Property(e => e.ProductPromoCondSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_COND_SEQ_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ProductPromoApplEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_APPL_ENUM_ID");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductPromoProducts)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_PRPRD_PROD");

                entity.HasOne(d => d.ProductPromoApplEnum)
                    .WithMany(p => p.ProductPromoProducts)
                    .HasForeignKey(d => d.ProductPromoApplEnumId)
                    .HasConstraintName("PROD_PRPRD_ENUM");

                entity.HasOne(d => d.ProductPromo)
                    .WithMany(p => p.ProductPromoProducts)
                    .HasForeignKey(d => d.ProductPromoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_PRPRD_PROMO");
            });

            modelBuilder.Entity<ProductPromoRule>(entity =>
            {
                entity.HasKey(e => new { e.ProductPromoId, e.ProductPromoRuleId });

                entity.ToTable("PRODUCT_PROMO_RULE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_PRM_RL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_PRM_RL_TXSTMP");

                entity.HasIndex(e => e.ProductPromoId, "PROD_PRRLE_PROMO");

                entity.Property(e => e.ProductPromoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_ID");

                entity.Property(e => e.ProductPromoRuleId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_RULE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.RuleName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RULE_NAME");

                entity.HasOne(d => d.ProductPromo)
                    .WithMany(p => p.ProductPromoRules)
                    .HasForeignKey(d => d.ProductPromoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_PRRLE_PROMO");
            });

            modelBuilder.Entity<ProductPromoUse>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.PromoSequenceId });

                entity.ToTable("PRODUCT_PROMO_USE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_PRM_US_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_PRM_US_TXSTMP");

                entity.HasIndex(e => new { e.ProductPromoCodeId, e.PartyId }, "PRODPRUSE_PCDPTY");

                entity.HasIndex(e => new { e.ProductPromoId, e.PartyId }, "PRODPRUSE_PRMPTY");

                entity.HasIndex(e => e.ProductPromoCodeId, "PROD_PRUSE_CODE");

                entity.HasIndex(e => e.OrderId, "PROD_PRUSE_ORDR");

                entity.HasIndex(e => e.ProductPromoId, "PROD_PRUSE_PROMO");

                entity.HasIndex(e => e.PartyId, "PROD_PRUSE_PTY");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.PromoSequenceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PROMO_SEQUENCE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.ProductPromoCodeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_CODE_ID");

                entity.Property(e => e.ProductPromoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_ID");

                entity.Property(e => e.QuantityLeftInActions)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY_LEFT_IN_ACTIONS");

                entity.Property(e => e.TotalDiscountAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("TOTAL_DISCOUNT_AMOUNT");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.ProductPromoUses)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_PRUSE_ORDR");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.ProductPromoUses)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("PROD_PRUSE_PTY");

                entity.HasOne(d => d.ProductPromoCode)
                    .WithMany(p => p.ProductPromoUses)
                    .HasForeignKey(d => d.ProductPromoCodeId)
                    .HasConstraintName("PROD_PRUSE_CODE");

                entity.HasOne(d => d.ProductPromo)
                    .WithMany(p => p.ProductPromoUses)
                    .HasForeignKey(d => d.ProductPromoId)
                    .HasConstraintName("PROD_PRUSE_PROMO");
            });

            modelBuilder.Entity<ProductReview>(entity =>
            {
                entity.ToTable("PRODUCT_REVIEW");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDCT_RVW_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDCT_RVW_TXSTMP");

                entity.HasIndex(e => e.ProductStoreId, "PROD_REVIEW_PRDSTR");

                entity.HasIndex(e => e.ProductId, "PROD_REVIEW_PROD");

                entity.HasIndex(e => e.StatusId, "PROD_REVIEW_STTS");

                entity.HasIndex(e => e.UserLoginId, "PROD_REVIEW_ULH");

                entity.Property(e => e.ProductReviewId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_REVIEW_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PostedAnonymous)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("POSTED_ANONYMOUS")
                    .IsFixedLength();

                entity.Property(e => e.PostedDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("POSTED_DATE_TIME");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.ProductRating)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("PRODUCT_RATING");

                entity.Property(e => e.ProductReview1)
                    .HasColumnType("text")
                    .HasColumnName("PRODUCT_REVIEW");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.UserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USER_LOGIN_ID");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductReviews)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("PROD_REVIEW_PROD");

                entity.HasOne(d => d.ProductStore)
                    .WithMany(p => p.ProductReviews)
                    .HasForeignKey(d => d.ProductStoreId)
                    .HasConstraintName("PROD_REVIEW_PRDSTR");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ProductReviews)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("PROD_REVIEW_STTS");

                entity.HasOne(d => d.UserLogin)
                    .WithMany(p => p.ProductReviews)
                    .HasForeignKey(d => d.UserLoginId)
                    .HasConstraintName("PROD_REVIEW_ULH");
            });

            modelBuilder.Entity<ProductRole>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.PartyId, e.RoleTypeId, e.FromDate });

                entity.ToTable("PRODUCT_ROLE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDCT_RL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDCT_RL_TXSTMP");

                entity.HasIndex(e => e.ProductId, "PROD_RLE_PRODUCT");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "PROD_RLE_PTYRLE");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductRoles)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_RLE_PRODUCT");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.ProductRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_RLE_PTYRLE");
            });

            modelBuilder.Entity<ProductSearchConstraint>(entity =>
            {
                entity.HasKey(e => new { e.ProductSearchResultId, e.ConstraintSeqId });

                entity.ToTable("PRODUCT_SEARCH_CONSTRAINT");

                entity.HasIndex(e => e.ProductSearchResultId, "PROD_SCHRSI_RES");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_SRH_CNSTT_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_SRH_CNSTT_TXSP");

                entity.Property(e => e.ProductSearchResultId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_SEARCH_RESULT_ID");

                entity.Property(e => e.ConstraintSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONSTRAINT_SEQ_ID");

                entity.Property(e => e.AnyPrefix)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ANY_PREFIX")
                    .IsFixedLength();

                entity.Property(e => e.AnySuffix)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ANY_SUFFIX")
                    .IsFixedLength();

                entity.Property(e => e.ConstraintName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CONSTRAINT_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.HighValue)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("HIGH_VALUE");

                entity.Property(e => e.IncludeSubCategories)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INCLUDE_SUB_CATEGORIES")
                    .IsFixedLength();

                entity.Property(e => e.InfoString)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("INFO_STRING");

                entity.Property(e => e.IsAnd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_AND")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LowValue)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LOW_VALUE");

                entity.Property(e => e.RemoveStems)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REMOVE_STEMS")
                    .IsFixedLength();

                entity.HasOne(d => d.ProductSearchResult)
                    .WithMany(p => p.ProductSearchConstraints)
                    .HasForeignKey(d => d.ProductSearchResultId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_SCHRSI_RES");
            });

            modelBuilder.Entity<ProductSearchResult>(entity =>
            {
                entity.ToTable("PRODUCT_SEARCH_RESULT");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_SRH_RST_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_SRH_RST_TXSTP");

                entity.Property(e => e.ProductSearchResultId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_SEARCH_RESULT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.IsAscending)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_ASCENDING")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.NumResults).HasColumnName("NUM_RESULTS");

                entity.Property(e => e.OrderByName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_BY_NAME");

                entity.Property(e => e.SearchDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SEARCH_DATE");

                entity.Property(e => e.SecondsTotal).HasColumnName("SECONDS_TOTAL");

                entity.Property(e => e.VisitId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VISIT_ID");
            });

            modelBuilder.Entity<ProductStore>(entity =>
            {
                entity.ToTable("PRODUCT_STORE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDCT_STR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDCT_STR_TXSTMP");

                entity.HasIndex(e => e.DefaultCurrencyUomId, "PROD_STR_CURUOM");

                entity.HasIndex(e => e.DigitalItemApprovedStatus, "PROD_STR_DIAPSTS");

                entity.HasIndex(e => e.InventoryFacilityId, "PROD_STR_FACILITY");

                entity.HasIndex(e => e.HeaderApprovedStatus, "PROD_STR_HAPSTS");

                entity.HasIndex(e => e.HeaderCancelStatus, "PROD_STR_HCNSTS");

                entity.HasIndex(e => e.HeaderDeclinedStatus, "PROD_STR_HDCSTS");

                entity.HasIndex(e => e.ItemApprovedStatus, "PROD_STR_IAPSTS");

                entity.HasIndex(e => e.ItemCancelStatus, "PROD_STR_ICNSTS");

                entity.HasIndex(e => e.ItemDeclinedStatus, "PROD_STR_IDCSTS");

                entity.HasIndex(e => e.PayToPartyId, "PROD_STR_PAYTOPTY");

                entity.HasIndex(e => e.PrimaryStoreGroupId, "PROD_STR_PRSTRGP");

                entity.HasIndex(e => e.ReserveOrderEnumId, "PROD_STR_RORDENUM");

                entity.HasIndex(e => e.RequirementMethodEnumId, "PROD_STR_RQMTENUM");

                entity.HasIndex(e => e.DefaultSalesChannelEnumId, "PROD_STR_SALECHN");

                entity.HasIndex(e => e.StoreCreditAccountEnumId, "PROD_STR_STRCRDACT");

                entity.HasIndex(e => new { e.VatTaxAuthGeoId, e.VatTaxAuthPartyId }, "PROD_STR_VATTXA");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.AddToCartRemoveIncompat)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADD_TO_CART_REMOVE_INCOMPAT")
                    .IsFixedLength();

                entity.Property(e => e.AddToCartReplaceUpsell)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADD_TO_CART_REPLACE_UPSELL")
                    .IsFixedLength();

                entity.Property(e => e.AllocateInventory)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ALLOCATE_INVENTORY")
                    .IsFixedLength();

                entity.Property(e => e.AllowComment)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ALLOW_COMMENT")
                    .IsFixedLength();

                entity.Property(e => e.AllowPassword)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ALLOW_PASSWORD")
                    .IsFixedLength();

                entity.Property(e => e.AuthDeclinedMessage)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("AUTH_DECLINED_MESSAGE");

                entity.Property(e => e.AuthErrorMessage)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("AUTH_ERROR_MESSAGE");

                entity.Property(e => e.AuthFraudMessage)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("AUTH_FRAUD_MESSAGE");

                entity.Property(e => e.AutoApproveInvoice)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AUTO_APPROVE_INVOICE")
                    .IsFixedLength();

                entity.Property(e => e.AutoApproveOrder)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AUTO_APPROVE_ORDER")
                    .IsFixedLength();

                entity.Property(e => e.AutoApproveReviews)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AUTO_APPROVE_REVIEWS")
                    .IsFixedLength();

                entity.Property(e => e.AutoInvoiceDigitalItems)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AUTO_INVOICE_DIGITAL_ITEMS")
                    .IsFixedLength();

                entity.Property(e => e.AutoOrderCcTryExp)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AUTO_ORDER_CC_TRY_EXP")
                    .IsFixedLength();

                entity.Property(e => e.AutoOrderCcTryLaterMax).HasColumnName("AUTO_ORDER_CC_TRY_LATER_MAX");

                entity.Property(e => e.AutoOrderCcTryLaterNsf)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AUTO_ORDER_CC_TRY_LATER_NSF")
                    .IsFixedLength();

                entity.Property(e => e.AutoOrderCcTryOtherCards)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AUTO_ORDER_CC_TRY_OTHER_CARDS")
                    .IsFixedLength();

                entity.Property(e => e.AutoSaveCart)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AUTO_SAVE_CART")
                    .IsFixedLength();

                entity.Property(e => e.BalanceResOnOrderCreation)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BALANCE_RES_ON_ORDER_CREATION")
                    .IsFixedLength();

                entity.Property(e => e.CheckGcBalance)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHECK_GC_BALANCE")
                    .IsFixedLength();

                entity.Property(e => e.CheckInventory)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHECK_INVENTORY")
                    .IsFixedLength();

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("COMPANY_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DaysToCancelNonPay).HasColumnName("DAYS_TO_CANCEL_NON_PAY");

                entity.Property(e => e.DefaultCurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULT_CURRENCY_UOM_ID");

                entity.Property(e => e.DefaultLocaleString)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULT_LOCALE_STRING");

                entity.Property(e => e.DefaultPassword)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULT_PASSWORD");

                entity.Property(e => e.DefaultSalesChannelEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULT_SALES_CHANNEL_ENUM_ID");

                entity.Property(e => e.DefaultTimeZoneString)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULT_TIME_ZONE_STRING");

                entity.Property(e => e.DigProdUploadCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DIG_PROD_UPLOAD_CATEGORY_ID");

                entity.Property(e => e.DigitalItemApprovedStatus)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DIGITAL_ITEM_APPROVED_STATUS");

                entity.Property(e => e.EnableAutoSuggestionList)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ENABLE_AUTO_SUGGESTION_LIST")
                    .IsFixedLength();

                entity.Property(e => e.EnableDigProdUpload)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ENABLE_DIG_PROD_UPLOAD")
                    .IsFixedLength();

                entity.Property(e => e.ExplodeOrderItems)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("EXPLODE_ORDER_ITEMS")
                    .IsFixedLength();

                entity.Property(e => e.HeaderApprovedStatus)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("HEADER_APPROVED_STATUS");

                entity.Property(e => e.HeaderCancelStatus)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("HEADER_CANCEL_STATUS");

                entity.Property(e => e.HeaderDeclinedStatus)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("HEADER_DECLINED_STATUS");

                entity.Property(e => e.InventoryFacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_FACILITY_ID");

                entity.Property(e => e.IsDemoStore)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_DEMO_STORE")
                    .IsFixedLength();

                entity.Property(e => e.IsImmediatelyFulfilled)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_IMMEDIATELY_FULFILLED")
                    .IsFixedLength();

                entity.Property(e => e.ItemApprovedStatus)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_APPROVED_STATUS");

                entity.Property(e => e.ItemCancelStatus)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_CANCEL_STATUS");

                entity.Property(e => e.ItemDeclinedStatus)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_DECLINED_STATUS");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ManagedByLot)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MANAGED_BY_LOT")
                    .IsFixedLength();

                entity.Property(e => e.ManualAuthIsCapture)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MANUAL_AUTH_IS_CAPTURE")
                    .IsFixedLength();

                entity.Property(e => e.OneInventoryFacility)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ONE_INVENTORY_FACILITY")
                    .IsFixedLength();

                entity.Property(e => e.OrderDecimalQuantity)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_DECIMAL_QUANTITY")
                    .IsFixedLength();

                entity.Property(e => e.SOrderNumberPrefix)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("S_ORDER_NUMBER_PREFIX");
                    
                entity.Property(e => e.POrderNumberPrefix)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("P_ORDER_NUMBER_PREFIX");

                entity.Property(e => e.PayToPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAY_TO_PARTY_ID");

                entity.Property(e => e.PrimaryStoreGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_STORE_GROUP_ID");

                entity.Property(e => e.ProdSearchExcludeVariants)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PROD_SEARCH_EXCLUDE_VARIANTS")
                    .IsFixedLength();

                entity.Property(e => e.ProrateShipping)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRORATE_SHIPPING")
                    .IsFixedLength();

                entity.Property(e => e.ProrateTaxes)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRORATE_TAXES")
                    .IsFixedLength();

                entity.Property(e => e.ReqReturnInventoryReceive)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REQ_RETURN_INVENTORY_RECEIVE")
                    .IsFixedLength();

                entity.Property(e => e.ReqShipAddrForDigItems)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REQ_SHIP_ADDR_FOR_DIG_ITEMS")
                    .IsFixedLength();

                entity.Property(e => e.RequireCustomerRole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REQUIRE_CUSTOMER_ROLE")
                    .IsFixedLength();

                entity.Property(e => e.RequireInventory)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REQUIRE_INVENTORY")
                    .IsFixedLength();

                entity.Property(e => e.RequirementMethodEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REQUIREMENT_METHOD_ENUM_ID");

                entity.Property(e => e.ReserveInventory)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RESERVE_INVENTORY")
                    .IsFixedLength();

                entity.Property(e => e.ReserveOrderEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RESERVE_ORDER_ENUM_ID");

                entity.Property(e => e.RetryFailedAuths)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RETRY_FAILED_AUTHS")
                    .IsFixedLength();

                entity.Property(e => e.SelectPaymentTypePerItem)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SELECT_PAYMENT_TYPE_PER_ITEM")
                    .IsFixedLength();

                entity.Property(e => e.SetOwnerUponIssuance)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SET_OWNER_UPON_ISSUANCE")
                    .IsFixedLength();

                entity.Property(e => e.ShipIfCaptureFails)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SHIP_IF_CAPTURE_FAILS")
                    .IsFixedLength();

                entity.Property(e => e.ShowCheckoutGiftOptions)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SHOW_CHECKOUT_GIFT_OPTIONS")
                    .IsFixedLength();

                entity.Property(e => e.ShowOutOfStockProducts)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SHOW_OUT_OF_STOCK_PRODUCTS")
                    .IsFixedLength();

                entity.Property(e => e.ShowPricesWithVatTax)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SHOW_PRICES_WITH_VAT_TAX")
                    .IsFixedLength();

                entity.Property(e => e.ShowTaxIsExempt)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SHOW_TAX_IS_EXEMPT")
                    .IsFixedLength();

                entity.Property(e => e.SplitPayPrefPerShpGrp)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPLIT_PAY_PREF_PER_SHP_GRP")
                    .IsFixedLength();

                entity.Property(e => e.StoreCreditAccountEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STORE_CREDIT_ACCOUNT_ENUM_ID");

                entity.Property(e => e.StoreCreditValidDays).HasColumnName("STORE_CREDIT_VALID_DAYS");

                entity.Property(e => e.StoreName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STORE_NAME");

                entity.Property(e => e.Subtitle)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SUBTITLE");

                entity.Property(e => e.Title)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TITLE");

                entity.Property(e => e.UsePrimaryEmailUsername)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_PRIMARY_EMAIL_USERNAME")
                    .IsFixedLength();

                entity.Property(e => e.VatTaxAuthGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VAT_TAX_AUTH_GEO_ID");

                entity.Property(e => e.VatTaxAuthPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VAT_TAX_AUTH_PARTY_ID");

                entity.Property(e => e.ViewCartOnAdd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VIEW_CART_ON_ADD")
                    .IsFixedLength();

                entity.Property(e => e.VisualThemeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VISUAL_THEME_ID");

                entity.HasOne(d => d.DefaultCurrencyUom)
                    .WithMany(p => p.ProductStores)
                    .HasForeignKey(d => d.DefaultCurrencyUomId)
                    .HasConstraintName("PROD_STR_CURUOM");

                entity.HasOne(d => d.DefaultSalesChannelEnum)
                    .WithMany(p => p.ProductStoreDefaultSalesChannelEnums)
                    .HasForeignKey(d => d.DefaultSalesChannelEnumId)
                    .HasConstraintName("PROD_STR_SALECHN");

                entity.HasOne(d => d.DigitalItemApprovedStatusNavigation)
                    .WithMany(p => p.ProductStoreDigitalItemApprovedStatusNavigations)
                    .HasForeignKey(d => d.DigitalItemApprovedStatus)
                    .HasConstraintName("PROD_STR_DIAPSTS");

                entity.HasOne(d => d.HeaderApprovedStatusNavigation)
                    .WithMany(p => p.ProductStoreHeaderApprovedStatusNavigations)
                    .HasForeignKey(d => d.HeaderApprovedStatus)
                    .HasConstraintName("PROD_STR_HAPSTS");

                entity.HasOne(d => d.HeaderCancelStatusNavigation)
                    .WithMany(p => p.ProductStoreHeaderCancelStatusNavigations)
                    .HasForeignKey(d => d.HeaderCancelStatus)
                    .HasConstraintName("PROD_STR_HCNSTS");

                entity.HasOne(d => d.HeaderDeclinedStatusNavigation)
                    .WithMany(p => p.ProductStoreHeaderDeclinedStatusNavigations)
                    .HasForeignKey(d => d.HeaderDeclinedStatus)
                    .HasConstraintName("PROD_STR_HDCSTS");

                entity.HasOne(d => d.InventoryFacility)
                    .WithMany(p => p.ProductStores)
                    .HasForeignKey(d => d.InventoryFacilityId)
                    .HasConstraintName("PROD_STR_FACILITY");

                entity.HasOne(d => d.ItemApprovedStatusNavigation)
                    .WithMany(p => p.ProductStoreItemApprovedStatusNavigations)
                    .HasForeignKey(d => d.ItemApprovedStatus)
                    .HasConstraintName("PROD_STR_IAPSTS");

                entity.HasOne(d => d.ItemCancelStatusNavigation)
                    .WithMany(p => p.ProductStoreItemCancelStatusNavigations)
                    .HasForeignKey(d => d.ItemCancelStatus)
                    .HasConstraintName("PROD_STR_ICNSTS");

                entity.HasOne(d => d.ItemDeclinedStatusNavigation)
                    .WithMany(p => p.ProductStoreItemDeclinedStatusNavigations)
                    .HasForeignKey(d => d.ItemDeclinedStatus)
                    .HasConstraintName("PROD_STR_IDCSTS");

                entity.HasOne(d => d.PayToParty)
                    .WithMany(p => p.ProductStores)
                    .HasForeignKey(d => d.PayToPartyId)
                    .HasConstraintName("PROD_STR_PAYTOPTY");

                entity.HasOne(d => d.PrimaryStoreGroup)
                    .WithMany(p => p.ProductStores)
                    .HasForeignKey(d => d.PrimaryStoreGroupId)
                    .HasConstraintName("PROD_STR_PRSTRGP");

                entity.HasOne(d => d.RequirementMethodEnum)
                    .WithMany(p => p.ProductStoreRequirementMethodEnums)
                    .HasForeignKey(d => d.RequirementMethodEnumId)
                    .HasConstraintName("PROD_STR_RQMTENUM");

                entity.HasOne(d => d.ReserveOrderEnum)
                    .WithMany(p => p.ProductStoreReserveOrderEnums)
                    .HasForeignKey(d => d.ReserveOrderEnumId)
                    .HasConstraintName("PROD_STR_RORDENUM");

                entity.HasOne(d => d.StoreCreditAccountEnum)
                    .WithMany(p => p.ProductStoreStoreCreditAccountEnums)
                    .HasForeignKey(d => d.StoreCreditAccountEnumId)
                    .HasConstraintName("PROD_STR_STRCRDACT");

                entity.HasOne(d => d.VatTaxAuth)
                    .WithMany(p => p.ProductStores)
                    .HasForeignKey(d => new { d.VatTaxAuthGeoId, d.VatTaxAuthPartyId })
                    .HasConstraintName("PROD_STR_VATTXA");
            });

            modelBuilder.Entity<ProductStoreCatalog>(entity =>
            {
                entity.HasKey(e => new { e.ProductStoreId, e.ProdCatalogId, e.FromDate });

                entity.ToTable("PRODUCT_STORE_CATALOG");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_STR_CTG_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_STR_CTG_TXSTP");

                entity.HasIndex(e => e.ProdCatalogId, "PS_CAT_CATALOG");

                entity.HasIndex(e => e.ProductStoreId, "PS_CAT_PRDSTR");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.ProdCatalogId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PROD_CATALOG_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ProdCatalog)
                    .WithMany(p => p.ProductStoreCatalogs)
                    .HasForeignKey(d => d.ProdCatalogId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PS_CAT_CATALOG");

                entity.HasOne(d => d.ProductStore)
                    .WithMany(p => p.ProductStoreCatalogs)
                    .HasForeignKey(d => d.ProductStoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PS_CAT_PRDSTR");
            });

            modelBuilder.Entity<ProductStoreEmailSetting>(entity =>
            {
                entity.HasKey(e => new { e.ProductStoreId, e.EmailType });

                entity.ToTable("PRODUCT_STORE_EMAIL_SETTING");

                entity.HasIndex(e => e.EmailType, "PRDSTREM_ENUM");

                entity.HasIndex(e => e.ProductStoreId, "PRDSTREM_PRDS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_STR_EML_STG_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_STR_EML_STG_TS");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.EmailType)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_TYPE");

                entity.Property(e => e.BccAddress)
                    .HasMaxLength(320)
                    .IsUnicode(false)
                    .HasColumnName("BCC_ADDRESS");

                entity.Property(e => e.BodyScreenLocation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("BODY_SCREEN_LOCATION");

                entity.Property(e => e.CcAddress)
                    .HasMaxLength(320)
                    .IsUnicode(false)
                    .HasColumnName("CC_ADDRESS");

                entity.Property(e => e.ContentType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_TYPE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.FromAddress)
                    .HasMaxLength(320)
                    .IsUnicode(false)
                    .HasColumnName("FROM_ADDRESS");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Subject)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SUBJECT");

                entity.Property(e => e.XslfoAttachScreenLocation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("XSLFO_ATTACH_SCREEN_LOCATION");

                entity.HasOne(d => d.EmailTypeNavigation)
                    .WithMany(p => p.ProductStoreEmailSettings)
                    .HasForeignKey(d => d.EmailType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDSTREM_ENUM");

                entity.HasOne(d => d.ProductStore)
                    .WithMany(p => p.ProductStoreEmailSettings)
                    .HasForeignKey(d => d.ProductStoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDSTREM_PRDS");
            });

            modelBuilder.Entity<ProductStoreFacility>(entity =>
            {
                entity.HasKey(e => new { e.ProductStoreId, e.FacilityId, e.FromDate });

                entity.ToTable("PRODUCT_STORE_FACILITY");

                entity.HasIndex(e => e.FacilityId, "PRDSTRFAC_FAC");

                entity.HasIndex(e => e.ProductStoreId, "PRDSTRFAC_PRDS");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_STR_FCT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_STR_FCT_TXSTP");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.ProductStoreFacilities)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDSTRFAC_FAC");

                entity.HasOne(d => d.ProductStore)
                    .WithMany(p => p.ProductStoreFacilities)
                    .HasForeignKey(d => d.ProductStoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDSTRFAC_PRDS");
            });

            modelBuilder.Entity<ProductStoreFinActSetting>(entity =>
            {
                entity.HasKey(e => new { e.ProductStoreId, e.FinAccountTypeId })
                    .HasName("PK_PRODUCT_STORE_FIN_ACT_SETTI");

                entity.ToTable("PRODUCT_STORE_FIN_ACT_SETTING");

                entity.HasIndex(e => e.ReplenishMethodEnumId, "PRSTFNAC_FARPMTD");

                entity.HasIndex(e => e.FinAccountTypeId, "PRSTFNAC_FNACTP");

                entity.HasIndex(e => e.ProductStoreId, "PRSTFNAC_PRDS");

                entity.HasIndex(e => e.PurchaseSurveyId, "PRSTFNAC_SRVY");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_FN_ACT_STG_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_FN_ACT_STG_TS");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.FinAccountTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_TYPE_ID");

                entity.Property(e => e.AccountCodeLength).HasColumnName("ACCOUNT_CODE_LENGTH");

                entity.Property(e => e.AccountValidDays).HasColumnName("ACCOUNT_VALID_DAYS");

                entity.Property(e => e.AllowAuthToNegative)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ALLOW_AUTH_TO_NEGATIVE")
                    .IsFixedLength();

                entity.Property(e => e.AuthValidDays).HasColumnName("AUTH_VALID_DAYS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MinBalance)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MIN_BALANCE");

                entity.Property(e => e.PinCodeLength).HasColumnName("PIN_CODE_LENGTH");

                entity.Property(e => e.PurchSurveyCopyMe)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PURCH_SURVEY_COPY_ME");

                entity.Property(e => e.PurchSurveySendTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PURCH_SURVEY_SEND_TO");

                entity.Property(e => e.PurchaseSurveyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PURCHASE_SURVEY_ID");

                entity.Property(e => e.ReplenishMethodEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REPLENISH_METHOD_ENUM_ID");

                entity.Property(e => e.ReplenishThreshold)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("REPLENISH_THRESHOLD");

                entity.Property(e => e.RequirePinCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REQUIRE_PIN_CODE")
                    .IsFixedLength();

                entity.Property(e => e.ValidateGCFinAcct)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALIDATE_G_C_FIN_ACCT")
                    .IsFixedLength();

                entity.HasOne(d => d.FinAccountType)
                    .WithMany(p => p.ProductStoreFinActSettings)
                    .HasForeignKey(d => d.FinAccountTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRSTFNAC_FNACTP");

                entity.HasOne(d => d.ProductStore)
                    .WithMany(p => p.ProductStoreFinActSettings)
                    .HasForeignKey(d => d.ProductStoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRSTFNAC_PRDS");

                entity.HasOne(d => d.PurchaseSurvey)
                    .WithMany(p => p.ProductStoreFinActSettings)
                    .HasForeignKey(d => d.PurchaseSurveyId)
                    .HasConstraintName("PRSTFNAC_SRVY");

                entity.HasOne(d => d.ReplenishMethodEnum)
                    .WithMany(p => p.ProductStoreFinActSettings)
                    .HasForeignKey(d => d.ReplenishMethodEnumId)
                    .HasConstraintName("PRSTFNAC_FARPMTD");
            });

            modelBuilder.Entity<ProductStoreGroup>(entity =>
            {
                entity.ToTable("PRODUCT_STORE_GROUP");

                entity.HasIndex(e => e.PrimaryParentGroupId, "PRDSTR_GP_PGRP");

                entity.HasIndex(e => e.ProductStoreGroupTypeId, "PRDSTR_GP_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_STR_GRP_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_STR_GRP_TXSTP");

                entity.Property(e => e.ProductStoreGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_GROUP_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PrimaryParentGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_PARENT_GROUP_ID");

                entity.Property(e => e.ProductStoreGroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_GROUP_NAME");

                entity.Property(e => e.ProductStoreGroupTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_GROUP_TYPE_ID");

                entity.HasOne(d => d.PrimaryParentGroup)
                    .WithMany(p => p.InversePrimaryParentGroup)
                    .HasForeignKey(d => d.PrimaryParentGroupId)
                    .HasConstraintName("PRDSTR_GP_PGRP");

                entity.HasOne(d => d.ProductStoreGroupType)
                    .WithMany(p => p.ProductStoreGroups)
                    .HasForeignKey(d => d.ProductStoreGroupTypeId)
                    .HasConstraintName("PRDSTR_GP_TYPE");
            });

            modelBuilder.Entity<ProductStoreGroupMember>(entity =>
            {
                entity.HasKey(e => new { e.ProductStoreId, e.ProductStoreGroupId, e.FromDate });

                entity.ToTable("PRODUCT_STORE_GROUP_MEMBER");

                entity.HasIndex(e => e.ProductStoreId, "PRDSTR_MEM_PRDSTR");

                entity.HasIndex(e => e.ProductStoreGroupId, "PRDSTR_MEM_PSGRP");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_STR_GRP_MMR_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_STR_GRP_MMR_TS");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.ProductStoreGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_GROUP_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ProductStoreGroup)
                    .WithMany(p => p.ProductStoreGroupMembers)
                    .HasForeignKey(d => d.ProductStoreGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDSTR_MEM_PSGRP");

                entity.HasOne(d => d.ProductStore)
                    .WithMany(p => p.ProductStoreGroupMembers)
                    .HasForeignKey(d => d.ProductStoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDSTR_MEM_PRDSTR");
            });

            modelBuilder.Entity<ProductStoreGroupRole>(entity =>
            {
                entity.HasKey(e => new { e.ProductStoreGroupId, e.PartyId, e.RoleTypeId });

                entity.ToTable("PRODUCT_STORE_GROUP_ROLE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_STR_GRP_RL_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_STR_GRP_RL_TXS");

                entity.HasIndex(e => e.ProductStoreGroupId, "PSGRP_RLE_PSGP");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "PSGRP_RLE_PTRLE");

                entity.Property(e => e.ProductStoreGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_GROUP_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ProductStoreGroup)
                    .WithMany(p => p.ProductStoreGroupRoles)
                    .HasForeignKey(d => d.ProductStoreGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PSGRP_RLE_PSGP");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.ProductStoreGroupRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PSGRP_RLE_PTRLE");
            });

            modelBuilder.Entity<ProductStoreGroupRollup>(entity =>
            {
                entity.HasKey(e => new { e.ProductStoreGroupId, e.ParentGroupId, e.FromDate });

                entity.ToTable("PRODUCT_STORE_GROUP_ROLLUP");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_STR_GRP_RLP_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_STR_GRP_RLP_TS");

                entity.HasIndex(e => e.ProductStoreGroupId, "PSGRP_RLP_CURRENT");

                entity.HasIndex(e => e.ParentGroupId, "PSGRP_RLP_PARENT");

                entity.Property(e => e.ProductStoreGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_GROUP_ID");

                entity.Property(e => e.ParentGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_GROUP_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ParentGroup)
                    .WithMany(p => p.ProductStoreGroupRollupParentGroups)
                    .HasForeignKey(d => d.ParentGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PSGRP_RLP_PARENT");

                entity.HasOne(d => d.ProductStoreGroup)
                    .WithMany(p => p.ProductStoreGroupRollupProductStoreGroups)
                    .HasForeignKey(d => d.ProductStoreGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PSGRP_RLP_CURRENT");
            });

            modelBuilder.Entity<ProductStoreGroupType>(entity =>
            {
                entity.ToTable("PRODUCT_STORE_GROUP_TYPE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_STR_GRP_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_STR_GRP_TP_TXS");

                entity.Property(e => e.ProductStoreGroupTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_GROUP_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<ProductStoreKeywordOvrd>(entity =>
            {
                entity.HasKey(e => new { e.ProductStoreId, e.Keyword, e.FromDate });

                entity.ToTable("PRODUCT_STORE_KEYWORD_OVRD");

                entity.HasIndex(e => e.TargetTypeEnumId, "PRDSTRKWO_ENM");

                entity.HasIndex(e => e.ProductStoreId, "PRDSTRKWO_PRDS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_STR_KWD_OVD_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_STR_KWD_OVD_TS");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.Keyword)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("KEYWORD");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Target)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TARGET");

                entity.Property(e => e.TargetTypeEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TARGET_TYPE_ENUM_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ProductStore)
                    .WithMany(p => p.ProductStoreKeywordOvrds)
                    .HasForeignKey(d => d.ProductStoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDSTRKWO_PRDS");

                entity.HasOne(d => d.TargetTypeEnum)
                    .WithMany(p => p.ProductStoreKeywordOvrds)
                    .HasForeignKey(d => d.TargetTypeEnumId)
                    .HasConstraintName("PRDSTRKWO_ENM");
            });

            modelBuilder.Entity<ProductStorePaymentSetting>(entity =>
            {
                entity.HasKey(e => new { e.ProductStoreId, e.PaymentMethodTypeId, e.PaymentServiceTypeEnumId })
                    .HasName("PK_PRODUCT_STORE_PAYMENT_SETTI");

                entity.ToTable("PRODUCT_STORE_PAYMENT_SETTING");

                entity.HasIndex(e => e.PaymentCustomMethodId, "PRDS_PS_CUS_MET");

                entity.HasIndex(e => e.PaymentServiceTypeEnumId, "PRDS_PS_ENUM");

                entity.HasIndex(e => e.PaymentGatewayConfigId, "PRDS_PS_PGC");

                entity.HasIndex(e => e.PaymentMethodTypeId, "PRDS_PS_PMNTTP");

                entity.HasIndex(e => e.ProductStoreId, "PRDS_PS_PRDS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_STR_PMT_STG_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_STR_PMT_STG_TS");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.PaymentMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_METHOD_TYPE_ID");

                entity.Property(e => e.PaymentServiceTypeEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_SERVICE_TYPE_ENUM_ID");

                entity.Property(e => e.ApplyToAllProducts)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("APPLY_TO_ALL_PRODUCTS")
                    .IsFixedLength();

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PaymentCustomMethodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_CUSTOM_METHOD_ID");

                entity.Property(e => e.PaymentGatewayConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID");

                entity.Property(e => e.PaymentPropertiesPath)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_PROPERTIES_PATH");

                entity.Property(e => e.PaymentService)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_SERVICE");

                entity.HasOne(d => d.PaymentCustomMethod)
                    .WithMany(p => p.ProductStorePaymentSettings)
                    .HasForeignKey(d => d.PaymentCustomMethodId)
                    .HasConstraintName("PRDS_PS_CUS_MET");

                entity.HasOne(d => d.PaymentGatewayConfig)
                    .WithMany(p => p.ProductStorePaymentSettings)
                    .HasForeignKey(d => d.PaymentGatewayConfigId)
                    .HasConstraintName("PRDS_PS_PGC");

                entity.HasOne(d => d.PaymentMethodType)
                    .WithMany(p => p.ProductStorePaymentSettings)
                    .HasForeignKey(d => d.PaymentMethodTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDS_PS_PMNTTP");

                entity.HasOne(d => d.PaymentServiceTypeEnum)
                    .WithMany(p => p.ProductStorePaymentSettings)
                    .HasForeignKey(d => d.PaymentServiceTypeEnumId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDS_PS_ENUM");

                entity.HasOne(d => d.ProductStore)
                    .WithMany(p => p.ProductStorePaymentSettings)
                    .HasForeignKey(d => d.ProductStoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDS_PS_PRDS");
            });

            modelBuilder.Entity<ProductStorePromoAppl>(entity =>
            {
                entity.HasKey(e => new { e.ProductStoreId, e.ProductPromoId, e.FromDate });

                entity.ToTable("PRODUCT_STORE_PROMO_APPL");

                entity.HasIndex(e => e.ProductStoreId, "PRDSTRPRMO_PRDS");

                entity.HasIndex(e => e.ProductPromoId, "PRDSTRPRMO_PRMO");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_STR_PRM_APL_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_STR_PRM_APL_TS");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.ProductPromoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ManualOnly)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MANUAL_ONLY")
                    .IsFixedLength();

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ProductPromo)
                    .WithMany(p => p.ProductStorePromoAppls)
                    .HasForeignKey(d => d.ProductPromoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDSTRPRMO_PRMO");

                entity.HasOne(d => d.ProductStore)
                    .WithMany(p => p.ProductStorePromoAppls)
                    .HasForeignKey(d => d.ProductStoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDSTRPRMO_PRDS");
            });

            modelBuilder.Entity<ProductStoreRole>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.RoleTypeId, e.ProductStoreId, e.FromDate });

                entity.ToTable("PRODUCT_STORE_ROLE");

                entity.HasIndex(e => e.ProductStoreId, "PRDSTRRLE_PRDS");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "PRDSTRRLE_PRLE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_STR_RL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_STR_RL_TXSTMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ProductStore)
                    .WithMany(p => p.ProductStoreRoles)
                    .HasForeignKey(d => d.ProductStoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDSTRRLE_PRDS");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.ProductStoreRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDSTRRLE_PRLE");
            });

            modelBuilder.Entity<ProductStoreShipmentMeth>(entity =>
            {
                entity.HasKey(e => e.ProductStoreShipMethId);

                entity.ToTable("PRODUCT_STORE_SHIPMENT_METH");

                entity.HasIndex(e => e.ShipmentCustomMethodId, "PRDS_SM_CUS_MET");

                entity.HasIndex(e => e.ShipmentGatewayConfigId, "PRDS_SM_SGC");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_STR_SHT_MTH_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_STR_SHT_MTH_TS");

                entity.HasIndex(e => e.ShipmentMethodTypeId, "SHIPMENTMETHODTYPE");

                entity.Property(e => e.ProductStoreShipMethId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_SHIP_METH_ID");

                entity.Property(e => e.AllowCompanyAddr)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ALLOW_COMPANY_ADDR")
                    .IsFixedLength();

                entity.Property(e => e.AllowUspsAddr)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ALLOW_USPS_ADDR")
                    .IsFixedLength();

                entity.Property(e => e.AllowancePercent)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ALLOWANCE_PERCENT");

                entity.Property(e => e.CompanyPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COMPANY_PARTY_ID");

                entity.Property(e => e.ConfigProps)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_PROPS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.ExcludeFeatureGroup)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EXCLUDE_FEATURE_GROUP");

                entity.Property(e => e.ExcludeGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EXCLUDE_GEO_ID");

                entity.Property(e => e.IncludeFeatureGroup)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INCLUDE_FEATURE_GROUP");

                entity.Property(e => e.IncludeGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INCLUDE_GEO_ID");

                entity.Property(e => e.IncludeNoChargeItems)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INCLUDE_NO_CHARGE_ITEMS")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MaxSize)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("MAX_SIZE");

                entity.Property(e => e.MaxTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MAX_TOTAL");

                entity.Property(e => e.MaxWeight)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("MAX_WEIGHT");

                entity.Property(e => e.MinSize)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("MIN_SIZE");

                entity.Property(e => e.MinTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MIN_TOTAL");

                entity.Property(e => e.MinWeight)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("MIN_WEIGHT");

                entity.Property(e => e.MinimumPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MINIMUM_PRICE");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.RequireCompanyAddr)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REQUIRE_COMPANY_ADDR")
                    .IsFixedLength();

                entity.Property(e => e.RequireUspsAddr)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REQUIRE_USPS_ADDR")
                    .IsFixedLength();

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.SequenceNumber).HasColumnName("SEQUENCE_NUMBER");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SERVICE_NAME");

                entity.Property(e => e.ShipmentCustomMethodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_CUSTOM_METHOD_ID");

                entity.Property(e => e.ShipmentGatewayConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_GATEWAY_CONFIG_ID");

                entity.Property(e => e.ShipmentMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_METHOD_TYPE_ID");

                entity.HasOne(d => d.ShipmentCustomMethod)
                    .WithMany(p => p.ProductStoreShipmentMeths)
                    .HasForeignKey(d => d.ShipmentCustomMethodId)
                    .HasConstraintName("PRDS_SM_CUS_MET");

                entity.HasOne(d => d.ShipmentGatewayConfig)
                    .WithMany(p => p.ProductStoreShipmentMeths)
                    .HasForeignKey(d => d.ShipmentGatewayConfigId)
                    .HasConstraintName("PRDS_SM_SGC");

                entity.HasOne(d => d.ShipmentMethodType)
                    .WithMany(p => p.ProductStoreShipmentMeths)
                    .HasForeignKey(d => d.ShipmentMethodTypeId)
                    .HasConstraintName("SHIPMENTMETHODTYPE");
            });

            modelBuilder.Entity<ProductStoreSurveyAppl>(entity =>
            {
                entity.HasKey(e => e.ProductStoreSurveyId);

                entity.ToTable("PRODUCT_STORE_SURVEY_APPL");

                entity.HasIndex(e => e.ProductStoreId, "PRDSTRSVY_PRDS");

                entity.HasIndex(e => e.SurveyApplTypeId, "PRDSTRSVY_SATP");

                entity.HasIndex(e => e.SurveyId, "PRDSTRSVY_SRVY");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_STR_SRV_APL_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_STR_SRV_APL_TS");

                entity.Property(e => e.ProductStoreSurveyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_SURVEY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_NAME");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ProductCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CATEGORY_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.ResultTemplate)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("RESULT_TEMPLATE");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.SurveyApplTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_APPL_TYPE_ID");

                entity.Property(e => e.SurveyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_ID");

                entity.Property(e => e.SurveyTemplate)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_TEMPLATE");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ProductStore)
                    .WithMany(p => p.ProductStoreSurveyAppls)
                    .HasForeignKey(d => d.ProductStoreId)
                    .HasConstraintName("PRDSTRSVY_PRDS");

                entity.HasOne(d => d.SurveyApplType)
                    .WithMany(p => p.ProductStoreSurveyAppls)
                    .HasForeignKey(d => d.SurveyApplTypeId)
                    .HasConstraintName("PRDSTRSVY_SATP");

                entity.HasOne(d => d.Survey)
                    .WithMany(p => p.ProductStoreSurveyAppls)
                    .HasForeignKey(d => d.SurveyId)
                    .HasConstraintName("PRDSTRSVY_SRVY");
            });

            modelBuilder.Entity<ProductStoreTelecomSetting>(entity =>
            {
                entity.HasKey(e => new { e.ProductStoreId, e.TelecomMethodTypeId, e.TelecomMsgTypeEnumId })
                    .HasName("PK_PRODUCT_STORE_TELECOM_SETTI");

                entity.ToTable("PRODUCT_STORE_TELECOM_SETTING");

                entity.HasIndex(e => e.TelecomCustomMethodId, "PRDS_TS_CUS_MET");

                entity.HasIndex(e => e.TelecomMsgTypeEnumId, "PRDS_TS_ENUM");

                entity.HasIndex(e => e.TelecomGatewayConfigId, "PRDS_TS_PGC");

                entity.HasIndex(e => e.ProductStoreId, "PRDS_TS_PRDS");

                entity.HasIndex(e => e.TelecomMethodTypeId, "PRDS_TS_TELTP");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_STR_TLM_STG_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_STR_TLM_STG_TS");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.TelecomMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TELECOM_METHOD_TYPE_ID");

                entity.Property(e => e.TelecomMsgTypeEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TELECOM_MSG_TYPE_ENUM_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.TelecomCustomMethodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TELECOM_CUSTOM_METHOD_ID");

                entity.Property(e => e.TelecomGatewayConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TELECOM_GATEWAY_CONFIG_ID");

                entity.HasOne(d => d.ProductStore)
                    .WithMany(p => p.ProductStoreTelecomSettings)
                    .HasForeignKey(d => d.ProductStoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDS_TS_PRDS");

                entity.HasOne(d => d.TelecomCustomMethod)
                    .WithMany(p => p.ProductStoreTelecomSettings)
                    .HasForeignKey(d => d.TelecomCustomMethodId)
                    .HasConstraintName("PRDS_TS_CUS_MET");

                entity.HasOne(d => d.TelecomGatewayConfig)
                    .WithMany(p => p.ProductStoreTelecomSettings)
                    .HasForeignKey(d => d.TelecomGatewayConfigId)
                    .HasConstraintName("PRDS_TS_PGC");

                entity.HasOne(d => d.TelecomMethodType)
                    .WithMany(p => p.ProductStoreTelecomSettings)
                    .HasForeignKey(d => d.TelecomMethodTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDS_TS_TELTP");

                entity.HasOne(d => d.TelecomMsgTypeEnum)
                    .WithMany(p => p.ProductStoreTelecomSettings)
                    .HasForeignKey(d => d.TelecomMsgTypeEnumId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDS_TS_ENUM");
            });

            modelBuilder.Entity<ProductStoreVendorPayment>(entity =>
            {
                entity.HasKey(e => new { e.ProductStoreId, e.VendorPartyId, e.PaymentMethodTypeId, e.CreditCardEnumId })
                    .HasName("PK_PRODUCT_STORE_VENDOR_PAYMEN");

                entity.ToTable("PRODUCT_STORE_VENDOR_PAYMENT");

                entity.HasIndex(e => e.CreditCardEnumId, "PRDSTRVPM_CCEN");

                entity.HasIndex(e => e.PaymentMethodTypeId, "PRDSTRVPM_PMMT");

                entity.HasIndex(e => e.ProductStoreId, "PRDSTRVPM_PRDS");

                entity.HasIndex(e => e.VendorPartyId, "PRDSTRVPM_VPTY");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_STR_VNR_PMT_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_STR_VNR_PMT_TS");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.VendorPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VENDOR_PARTY_ID");

                entity.Property(e => e.PaymentMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_METHOD_TYPE_ID");

                entity.Property(e => e.CreditCardEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CREDIT_CARD_ENUM_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.CreditCardEnum)
                    .WithMany(p => p.ProductStoreVendorPayments)
                    .HasForeignKey(d => d.CreditCardEnumId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDSTRVPM_CCEN");

                entity.HasOne(d => d.PaymentMethodType)
                    .WithMany(p => p.ProductStoreVendorPayments)
                    .HasForeignKey(d => d.PaymentMethodTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDSTRVPM_PMMT");

                entity.HasOne(d => d.ProductStore)
                    .WithMany(p => p.ProductStoreVendorPayments)
                    .HasForeignKey(d => d.ProductStoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDSTRVPM_PRDS");

                entity.HasOne(d => d.VendorParty)
                    .WithMany(p => p.ProductStoreVendorPayments)
                    .HasForeignKey(d => d.VendorPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDSTRVPM_VPTY");
            });

            modelBuilder.Entity<ProductStoreVendorShipment>(entity =>
            {
                entity.HasKey(e => new { e.ProductStoreId, e.VendorPartyId, e.ShipmentMethodTypeId, e.CarrierPartyId })
                    .HasName("PK_PRODUCT_STORE_VENDOR_SHIPME");

                entity.ToTable("PRODUCT_STORE_VENDOR_SHIPMENT");

                entity.HasIndex(e => e.CarrierPartyId, "PRDSTRVSH_CPTY");

                entity.HasIndex(e => e.ProductStoreId, "PRDSTRVSH_PRDS");

                entity.HasIndex(e => e.ShipmentMethodTypeId, "PRDSTRVSH_SHMT");

                entity.HasIndex(e => e.VendorPartyId, "PRDSTRVSH_VPTY");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_STR_VNR_SHT_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_STR_VNR_SHT_TS");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.VendorPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VENDOR_PARTY_ID");

                entity.Property(e => e.ShipmentMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_METHOD_TYPE_ID");

                entity.Property(e => e.CarrierPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CARRIER_PARTY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.CarrierParty)
                    .WithMany(p => p.ProductStoreVendorShipmentCarrierParties)
                    .HasForeignKey(d => d.CarrierPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDSTRVSH_CPTY");

                entity.HasOne(d => d.ProductStore)
                    .WithMany(p => p.ProductStoreVendorShipments)
                    .HasForeignKey(d => d.ProductStoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDSTRVSH_PRDS");

                entity.HasOne(d => d.ShipmentMethodType)
                    .WithMany(p => p.ProductStoreVendorShipments)
                    .HasForeignKey(d => d.ShipmentMethodTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDSTRVSH_SHMT");

                entity.HasOne(d => d.VendorParty)
                    .WithMany(p => p.ProductStoreVendorShipmentVendorParties)
                    .HasForeignKey(d => d.VendorPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PRDSTRVSH_VPTY");
            });

            modelBuilder.Entity<ProductSubscriptionResource>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.SubscriptionResourceId, e.FromDate })
                    .HasName("PK_PRODUCT_SUBSCRIPTION_RESOUR");

                entity.ToTable("PRODUCT_SUBSCRIPTION_RESOURCE");

                entity.HasIndex(e => e.AvailableTimeUomId, "PROD_SBRS_ATU");

                entity.HasIndex(e => e.CanclAutmExtTimeUomId, "PROD_SBRS_CTU");

                entity.HasIndex(e => e.GracePeriodOnExpiryUomId, "PROD_SBRS_GTU");

                entity.HasIndex(e => e.MaxLifeTimeUomId, "PROD_SBRS_MTU");

                entity.HasIndex(e => e.ProductId, "PROD_SBRS_PROD");

                entity.HasIndex(e => e.SubscriptionResourceId, "PROD_SBRS_SBRS");

                entity.HasIndex(e => e.UseRoleTypeId, "PROD_SBRS_URT");

                entity.HasIndex(e => e.UseTimeUomId, "PROD_SBRS_UTU");

                entity.HasIndex(e => e.CreatedTxStamp, "PRT_SBSCN_RSC_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRT_SBSCN_RSC_TXSP");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.SubscriptionResourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SUBSCRIPTION_RESOURCE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.AutomaticExtend)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AUTOMATIC_EXTEND")
                    .IsFixedLength();

                entity.Property(e => e.AvailableTime).HasColumnName("AVAILABLE_TIME");

                entity.Property(e => e.AvailableTimeUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AVAILABLE_TIME_UOM_ID");

                entity.Property(e => e.CanclAutmExtTime).HasColumnName("CANCL_AUTM_EXT_TIME");

                entity.Property(e => e.CanclAutmExtTimeUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CANCL_AUTM_EXT_TIME_UOM_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GracePeriodOnExpiry).HasColumnName("GRACE_PERIOD_ON_EXPIRY");

                entity.Property(e => e.GracePeriodOnExpiryUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GRACE_PERIOD_ON_EXPIRY_UOM_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MaxLifeTime).HasColumnName("MAX_LIFE_TIME");

                entity.Property(e => e.MaxLifeTimeUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MAX_LIFE_TIME_UOM_ID");

                entity.Property(e => e.PurchaseFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PURCHASE_FROM_DATE");

                entity.Property(e => e.PurchaseThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PURCHASE_THRU_DATE");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.Property(e => e.UseCountLimit).HasColumnName("USE_COUNT_LIMIT");

                entity.Property(e => e.UseRoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("USE_ROLE_TYPE_ID");

                entity.Property(e => e.UseTime).HasColumnName("USE_TIME");

                entity.Property(e => e.UseTimeUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("USE_TIME_UOM_ID");

                entity.HasOne(d => d.AvailableTimeUom)
                    .WithMany(p => p.ProductSubscriptionResourceAvailableTimeUoms)
                    .HasForeignKey(d => d.AvailableTimeUomId)
                    .HasConstraintName("PROD_SBRS_ATU");

                entity.HasOne(d => d.CanclAutmExtTimeUom)
                    .WithMany(p => p.ProductSubscriptionResourceCanclAutmExtTimeUoms)
                    .HasForeignKey(d => d.CanclAutmExtTimeUomId)
                    .HasConstraintName("PROD_SBRS_CTU");

                entity.HasOne(d => d.GracePeriodOnExpiryUom)
                    .WithMany(p => p.ProductSubscriptionResourceGracePeriodOnExpiryUoms)
                    .HasForeignKey(d => d.GracePeriodOnExpiryUomId)
                    .HasConstraintName("PROD_SBRS_GTU");

                entity.HasOne(d => d.MaxLifeTimeUom)
                    .WithMany(p => p.ProductSubscriptionResourceMaxLifeTimeUoms)
                    .HasForeignKey(d => d.MaxLifeTimeUomId)
                    .HasConstraintName("PROD_SBRS_MTU");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductSubscriptionResources)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_SBRS_PROD");

                entity.HasOne(d => d.SubscriptionResource)
                    .WithMany(p => p.ProductSubscriptionResources)
                    .HasForeignKey(d => d.SubscriptionResourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_SBRS_SBRS");

                entity.HasOne(d => d.UseRoleType)
                    .WithMany(p => p.ProductSubscriptionResources)
                    .HasForeignKey(d => d.UseRoleTypeId)
                    .HasConstraintName("PROD_SBRS_URT");

                entity.HasOne(d => d.UseTimeUom)
                    .WithMany(p => p.ProductSubscriptionResourceUseTimeUoms)
                    .HasForeignKey(d => d.UseTimeUomId)
                    .HasConstraintName("PROD_SBRS_UTU");
            });

            modelBuilder.Entity<ProductType>(entity =>
            {
                entity.ToTable("PRODUCT_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDCT_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDCT_TP_TXSTMP");

                entity.HasIndex(e => e.ParentTypeId, "PROD_TYPE_PARENT");

                entity.Property(e => e.ProductTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.IsDigital)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_DIGITAL")
                    .IsFixedLength();

                entity.Property(e => e.IsPhysical)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_PHYSICAL")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("PROD_TYPE_PARENT");
            });

            modelBuilder.Entity<ProductTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.ProductTypeId, e.AttrName });

                entity.ToTable("PRODUCT_TYPE_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "PRDT_TP_ATR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRDT_TP_ATR_TXSTMP");

                entity.HasIndex(e => e.ProductTypeId, "PROD_TYPE_ATTR");

                entity.Property(e => e.ProductTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.ProductTypeAttrs)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROD_TYPE_ATTR");
            });

            modelBuilder.Entity<ProtectedView>(entity =>
            {
                entity.HasKey(e => new { e.GroupId, e.ViewNameId });

                entity.ToTable("PROTECTED_VIEW");

                entity.HasIndex(e => e.CreatedTxStamp, "PRTCTD_VW_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRTCTD_VW_TXSTMP");

                entity.HasIndex(e => e.GroupId, "VIEW_SECGRP_GRP");

                entity.Property(e => e.GroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_ID");

                entity.Property(e => e.ViewNameId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("VIEW_NAME_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MaxHits).HasColumnName("MAX_HITS");

                entity.Property(e => e.MaxHitsDuration).HasColumnName("MAX_HITS_DURATION");

                entity.Property(e => e.TarpitDuration).HasColumnName("TARPIT_DURATION");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.ProtectedViews)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("VIEW_SECGRP_GRP");
            });

            modelBuilder.Entity<ProtocolType>(entity =>
            {
                entity.ToTable("PROTOCOL_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "PRTCL_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "PRTCL_TP_TXSTMP");

                entity.Property(e => e.ProtocolTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PROTOCOL_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ProtocolName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PROTOCOL_NAME");
            });

            modelBuilder.Entity<QuantityBreak>(entity =>
            {
                entity.ToTable("QUANTITY_BREAK");

                entity.HasIndex(e => e.CreatedTxStamp, "QNTT_BRK_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "QNTT_BRK_TXSTMP");

                entity.HasIndex(e => e.QuantityBreakTypeId, "QUANT_BRK_TYPE");

                entity.Property(e => e.QuantityBreakId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUANTITY_BREAK_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.FromQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("FROM_QUANTITY");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.QuantityBreakTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUANTITY_BREAK_TYPE_ID");

                entity.Property(e => e.ThruQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("THRU_QUANTITY");

                entity.HasOne(d => d.QuantityBreakType)
                    .WithMany(p => p.QuantityBreaks)
                    .HasForeignKey(d => d.QuantityBreakTypeId)
                    .HasConstraintName("QUANT_BRK_TYPE");
            });

            modelBuilder.Entity<QuantityBreakType>(entity =>
            {
                entity.ToTable("QUANTITY_BREAK_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "QNTT_BRK_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "QNTT_BRK_TP_TXSTMP");

                entity.Property(e => e.QuantityBreakTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUANTITY_BREAK_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<Quote>(entity =>
            {
                entity.ToTable("QUOTE");

                entity.HasIndex(e => e.SalesChannelEnumId, "QUOTE_CHANNEL");

                entity.HasIndex(e => e.CurrencyUomId, "QUOTE_CUOM");

                entity.HasIndex(e => e.ProductStoreId, "QUOTE_PRDS");

                entity.HasIndex(e => e.PartyId, "QUOTE_PRTY");

                entity.HasIndex(e => e.QuoteTypeId, "QUOTE_QTTYP");

                entity.HasIndex(e => e.StatusId, "QUOTE_STATUS");

                entity.HasIndex(e => e.CreatedTxStamp, "QUOTE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "QUOTE_TXSTMP");

                entity.Property(e => e.QuoteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");
                    
                entity.Property(e => e.CustomerRemarks)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_REMARKS");
                    
                entity.Property(e => e.InternalRemarks)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("INTERNAL_REMARKS");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ISSUE_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");
                    
                entity.Property(e => e.VehicleId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VEHICLE_ID");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.QuoteName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_NAME");

                entity.Property(e => e.QuoteTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_TYPE_ID");

                entity.Property(e => e.SalesChannelEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SALES_CHANNEL_ENUM_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.ValidFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("VALID_FROM_DATE");

                entity.Property(e => e.ValidThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("VALID_THRU_DATE");
                    
                entity.Property(e => e.GrandTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("GRAND_TOTAL");
                    
                entity.Property(e => e.CurrentMileage).HasColumnName("CURRENT_MILEAGE");
                

                entity.HasOne(d => d.CurrencyUom)
                    .WithMany(p => p.Quotes)
                    .HasForeignKey(d => d.CurrencyUomId)
                    .HasConstraintName("QUOTE_CUOM");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.Quotes)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("QUOTE_PRTY");
                    
                entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.Quotes)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("QUOTE_VEHICLE");

                entity.HasOne(d => d.ProductStore)
                    .WithMany(p => p.Quotes)
                    .HasForeignKey(d => d.ProductStoreId)
                    .HasConstraintName("QUOTE_PRDS");

                entity.HasOne(d => d.QuoteType)
                    .WithMany(p => p.Quotes)
                    .HasForeignKey(d => d.QuoteTypeId)
                    .HasConstraintName("QUOTE_QTTYP");

                entity.HasOne(d => d.SalesChannelEnum)
                    .WithMany(p => p.Quotes)
                    .HasForeignKey(d => d.SalesChannelEnumId)
                    .HasConstraintName("QUOTE_CHANNEL");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Quotes)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("QUOTE_STATUS");
                    
                 
            });

            modelBuilder.Entity<QuoteAdjustment>(entity =>
            {
                entity.ToTable("QUOTE_ADJUSTMENT");

                entity.HasIndex(e => e.CreatedTxStamp, "QT_ADJSTMNT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "QT_ADJSTMNT_TXSTMP");

                entity.HasIndex(e => e.OverrideGlAccountId, "QUOTE_ADJ_OGLA");

                entity.HasIndex(e => e.QuoteId, "QUOTE_ADJ_OHEAD");

                entity.HasIndex(e => e.PrimaryGeoId, "QUOTE_ADJ_PRGEO");

                entity.HasIndex(e => e.ProductPromoId, "QUOTE_ADJ_PROMO");

                entity.HasIndex(e => e.SecondaryGeoId, "QUOTE_ADJ_SCGEO");

                entity.HasIndex(e => new { e.TaxAuthGeoId, e.TaxAuthPartyId }, "QUOTE_ADJ_TXA");

                entity.HasIndex(e => e.QuoteAdjustmentTypeId, "QUOTE_ADJ_TYPE");

                entity.HasIndex(e => e.CreatedByUserLogin, "QUOTE_ADJ_USERL");

                entity.Property(e => e.QuoteAdjustmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_ADJUSTMENT_ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AMOUNT");
                    
                entity.Property(e => e.IsManual)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("IS_MANUAL")
                .IsFixedLength();


                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CorrespondingProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CORRESPONDING_PRODUCT_ID");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CustomerReferenceId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_REFERENCE_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.ExemptAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("EXEMPT_AMOUNT");

                entity.Property(e => e.IncludeInShipping)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INCLUDE_IN_SHIPPING")
                    .IsFixedLength();

                entity.Property(e => e.IncludeInTax)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INCLUDE_IN_TAX")
                    .IsFixedLength();

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OverrideGlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("OVERRIDE_GL_ACCOUNT_ID");

                entity.Property(e => e.PrimaryGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_GEO_ID");

                entity.Property(e => e.ProductFeatureId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_ID");

                entity.Property(e => e.ProductPromoActionSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_ACTION_SEQ_ID");

                entity.Property(e => e.ProductPromoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_ID");

                entity.Property(e => e.ProductPromoRuleId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_RULE_ID");

                entity.Property(e => e.QuoteAdjustmentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_ADJUSTMENT_TYPE_ID");

                entity.Property(e => e.QuoteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_ID");

                entity.Property(e => e.QuoteItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_ITEM_SEQ_ID");

                entity.Property(e => e.SecondaryGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SECONDARY_GEO_ID");

                entity.Property(e => e.SourcePercentage)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("SOURCE_PERCENTAGE");

                entity.Property(e => e.SourceReferenceId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SOURCE_REFERENCE_ID");

                entity.Property(e => e.TaxAuthGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTH_GEO_ID");

                entity.Property(e => e.TaxAuthPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTH_PARTY_ID");

                entity.HasOne(d => d.CreatedByUserLoginNavigation)
                    .WithMany(p => p.QuoteAdjustments)
                    .HasForeignKey(d => d.CreatedByUserLogin)
                    .HasConstraintName("QUOTE_ADJ_USERL");

                entity.HasOne(d => d.OverrideGlAccount)
                    .WithMany(p => p.QuoteAdjustments)
                    .HasForeignKey(d => d.OverrideGlAccountId)
                    .HasConstraintName("QUOTE_ADJ_OGLA");

                entity.HasOne(d => d.PrimaryGeo)
                    .WithMany(p => p.QuoteAdjustmentPrimaryGeos)
                    .HasForeignKey(d => d.PrimaryGeoId)
                    .HasConstraintName("QUOTE_ADJ_PRGEO");

                entity.HasOne(d => d.ProductPromo)
                    .WithMany(p => p.QuoteAdjustments)
                    .HasForeignKey(d => d.ProductPromoId)
                    .HasConstraintName("QUOTE_ADJ_PROMO");

                entity.HasOne(d => d.QuoteAdjustmentType)
                    .WithMany(p => p.QuoteAdjustments)
                    .HasForeignKey(d => d.QuoteAdjustmentTypeId)
                    .HasConstraintName("QUOTE_ADJ_TYPE");

                entity.HasOne(d => d.Quote)
                    .WithMany(p => p.QuoteAdjustments)
                    .HasForeignKey(d => d.QuoteId)
                    .HasConstraintName("QUOTE_ADJ_OHEAD");

                entity.HasOne(d => d.SecondaryGeo)
                    .WithMany(p => p.QuoteAdjustmentSecondaryGeos)
                    .HasForeignKey(d => d.SecondaryGeoId)
                    .HasConstraintName("QUOTE_ADJ_SCGEO");

                entity.HasOne(d => d.TaxAuth)
                    .WithMany(p => p.QuoteAdjustments)
                    .HasForeignKey(d => new { d.TaxAuthGeoId, d.TaxAuthPartyId })
                    .HasConstraintName("QUOTE_ADJ_TXA");
            });

            modelBuilder.Entity<QuoteAttribute>(entity =>
            {
                entity.HasKey(e => new { e.QuoteId, e.AttrName });

                entity.ToTable("QUOTE_ATTRIBUTE");

                entity.HasIndex(e => e.CreatedTxStamp, "QT_ATTRBT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "QT_ATTRBT_TXSTMP");

                entity.HasIndex(e => e.QuoteId, "QUOTE_ATTR");

                entity.Property(e => e.QuoteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Quote)
                    .WithMany(p => p.QuoteAttributes)
                    .HasForeignKey(d => d.QuoteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("QUOTE_ATTR");
            });

            modelBuilder.Entity<QuoteCoefficient>(entity =>
            {
                entity.HasKey(e => new { e.QuoteId, e.CoeffName });

                entity.ToTable("QUOTE_COEFFICIENT");

                entity.HasIndex(e => e.CreatedTxStamp, "QT_CFFCNT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "QT_CFFCNT_TXSTMP");

                entity.HasIndex(e => e.QuoteId, "QUOTE_COEFF");

                entity.Property(e => e.QuoteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_ID");

                entity.Property(e => e.CoeffName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("COEFF_NAME");

                entity.Property(e => e.CoeffValue)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("COEFF_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Quote)
                    .WithMany(p => p.QuoteCoefficients)
                    .HasForeignKey(d => d.QuoteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("QUOTE_COEFF");
            });

            modelBuilder.Entity<QuoteItem>(entity =>
            {
                entity.HasKey(e => new { e.QuoteId, e.QuoteItemSeqId });

                entity.ToTable("QUOTE_ITEM");

                entity.HasIndex(e => e.CreatedTxStamp, "QUOTE_ITEM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "QUOTE_ITEM_TXSTMP");

                entity.HasIndex(e => new { e.CustRequestId, e.CustRequestItemSeqId }, "QUOTE_ITM_CSRITM");

                entity.HasIndex(e => e.CustRequestId, "QUOTE_ITM_CSRQ");

                entity.HasIndex(e => e.DeliverableTypeId, "QUOTE_ITM_DELT");

                entity.HasIndex(e => e.ProductFeatureId, "QUOTE_ITM_PFEAT");

                entity.HasIndex(e => e.ProductId, "QUOTE_ITM_PROD");

                entity.HasIndex(e => e.QuoteId, "QUOTE_ITM_QTE");

                entity.HasIndex(e => e.SkillTypeId, "QUOTE_ITM_SKLT");

                entity.HasIndex(e => e.UomId, "QUOTE_ITM_UOM");

                entity.HasIndex(e => e.WorkEffortId, "QUOTE_ITM_WKEFF");

                entity.Property(e => e.QuoteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_ID");

                entity.Property(e => e.QuoteItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_ITEM_SEQ_ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.ConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CustRequestId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_ID");

                entity.Property(e => e.CustRequestItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_ITEM_SEQ_ID");

                entity.Property(e => e.DeliverableTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERABLE_TYPE_ID");

                entity.Property(e => e.EstimatedDeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ESTIMATED_DELIVERY_DATE");

                entity.Property(e => e.IsPromo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_PROMO")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LeadTimeDays).HasColumnName("LEAD_TIME_DAYS");

                entity.Property(e => e.ProductFeatureId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.QuoteUnitPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("QUOTE_UNIT_PRICE");
                    
                entity.Property(e => e.QuoteUnitListPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("QUOTE_UNIT_LIST_PRICE");

                entity.Property(e => e.ReservLength)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("RESERV_LENGTH");

                entity.Property(e => e.ReservPersons)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("RESERV_PERSONS");

                entity.Property(e => e.ReservStart)
                    .HasColumnType("datetime")
                    .HasColumnName("RESERV_START");

                entity.Property(e => e.SelectedAmount)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("SELECTED_AMOUNT");

                entity.Property(e => e.SkillTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SKILL_TYPE_ID");

                entity.Property(e => e.UomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UOM_ID");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.HasOne(d => d.CustRequest)
                    .WithMany(p => p.QuoteItems)
                    .HasForeignKey(d => d.CustRequestId)
                    .HasConstraintName("QUOTE_ITM_CSRQ");

                entity.HasOne(d => d.DeliverableType)
                    .WithMany(p => p.QuoteItems)
                    .HasForeignKey(d => d.DeliverableTypeId)
                    .HasConstraintName("QUOTE_ITM_DELT");

                entity.HasOne(d => d.ProductFeature)
                    .WithMany(p => p.QuoteItems)
                    .HasForeignKey(d => d.ProductFeatureId)
                    .HasConstraintName("QUOTE_ITM_PFEAT");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.QuoteItems)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("QUOTE_ITM_PROD");

                entity.HasOne(d => d.Quote)
                    .WithMany(p => p.QuoteItems)
                    .HasForeignKey(d => d.QuoteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("QUOTE_ITM_QTE");

                entity.HasOne(d => d.SkillType)
                    .WithMany(p => p.QuoteItems)
                    .HasForeignKey(d => d.SkillTypeId)
                    .HasConstraintName("QUOTE_ITM_SKLT");

                entity.HasOne(d => d.Uom)
                    .WithMany(p => p.QuoteItems)
                    .HasForeignKey(d => d.UomId)
                    .HasConstraintName("QUOTE_ITM_UOM");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.QuoteItems)
                    .HasForeignKey(d => d.WorkEffortId)
                    .HasConstraintName("QUOTE_ITM_WKEFF");

                entity.HasOne(d => d.CustRequestI)
                    .WithMany(p => p.QuoteItems)
                    .HasForeignKey(d => new { d.CustRequestId, d.CustRequestItemSeqId })
                    .HasConstraintName("QUOTE_ITM_CSRITM");
            });

            modelBuilder.Entity<QuoteNote>(entity =>
            {
                entity.HasKey(e => new { e.QuoteId, e.NoteId });

                entity.ToTable("QUOTE_NOTE");

                entity.HasIndex(e => e.CreatedTxStamp, "QUOTE_NOTE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "QUOTE_NOTE_TXSTMP");

                entity.HasIndex(e => e.NoteId, "QUOTE_NT_NOTE");

                entity.HasIndex(e => e.QuoteId, "QUOTE_NT_QTE");

                entity.Property(e => e.QuoteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_ID");

                entity.Property(e => e.NoteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("NOTE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Note)
                    .WithMany(p => p.QuoteNotes)
                    .HasForeignKey(d => d.NoteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("QUOTE_NT_NOTE");

                entity.HasOne(d => d.Quote)
                    .WithMany(p => p.QuoteNotes)
                    .HasForeignKey(d => d.QuoteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("QUOTE_NT_QTE");
            });

            modelBuilder.Entity<QuoteRole>(entity =>
            {
                entity.HasKey(e => new { e.QuoteId, e.PartyId, e.RoleTypeId });

                entity.ToTable("QUOTE_ROLE");

                entity.HasIndex(e => e.PartyId, "QUOTE_RL_PARTY");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "QUOTE_RL_PROLE");

                entity.HasIndex(e => e.QuoteId, "QUOTE_RL_QUOTE");

                entity.HasIndex(e => e.CreatedTxStamp, "QUOTE_ROLE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "QUOTE_ROLE_TXSTMP");

                entity.Property(e => e.QuoteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.QuoteRoles)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("QUOTE_RL_PARTY");

                entity.HasOne(d => d.Quote)
                    .WithMany(p => p.QuoteRoles)
                    .HasForeignKey(d => d.QuoteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("QUOTE_RL_QUOTE");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.QuoteRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("QUOTE_RL_PROLE");
            });

            modelBuilder.Entity<QuoteTerm>(entity =>
            {
                entity.HasKey(e => new { e.TermTypeId, e.QuoteId, e.QuoteItemSeqId });

                entity.ToTable("QUOTE_TERM");

                entity.HasIndex(e => e.QuoteId, "QUOTE_TERM_QTE");

                entity.HasIndex(e => e.TermTypeId, "QUOTE_TERM_TTYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "QUOTE_TERM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "QUOTE_TERM_TXSTMP");

                entity.Property(e => e.TermTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TERM_TYPE_ID");

                entity.Property(e => e.QuoteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_ID");

                entity.Property(e => e.QuoteItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_ITEM_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.TermDays).HasColumnName("TERM_DAYS");

                entity.Property(e => e.TermValue).HasColumnName("TERM_VALUE");

                entity.Property(e => e.TextValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TEXT_VALUE");

                entity.Property(e => e.UomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UOM_ID");

                entity.HasOne(d => d.Quote)
                    .WithMany(p => p.QuoteTerms)
                    .HasForeignKey(d => d.QuoteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("QUOTE_TERM_QTE");

                entity.HasOne(d => d.TermType)
                    .WithMany(p => p.QuoteTerms)
                    .HasForeignKey(d => d.TermTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("QUOTE_TERM_TTYPE");
            });

            modelBuilder.Entity<QuoteTermAttribute>(entity =>
            {
                entity.HasKey(e => new { e.TermTypeId, e.QuoteId, e.QuoteItemSeqId, e.AttrName });

                entity.ToTable("QUOTE_TERM_ATTRIBUTE");

                entity.HasIndex(e => e.CreatedTxStamp, "QT_TRM_ATTRT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "QT_TRM_ATTRT_TXSTP");

                entity.HasIndex(e => new { e.TermTypeId, e.QuoteId, e.QuoteItemSeqId }, "QUOTE_TERM_ATTR");

                entity.Property(e => e.TermTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TERM_TYPE_ID");

                entity.Property(e => e.QuoteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_ID");

                entity.Property(e => e.QuoteItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_ITEM_SEQ_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.QuoteTerm)
                    .WithMany(p => p.QuoteTermAttributes)
                    .HasForeignKey(d => new { d.TermTypeId, d.QuoteId, d.QuoteItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("QUOTE_TERM_ATTR");
            });

            modelBuilder.Entity<QuoteType>(entity =>
            {
                entity.ToTable("QUOTE_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "QUOTE_TYPE_PAR");

                entity.HasIndex(e => e.CreatedTxStamp, "QUOTE_TYPE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "QUOTE_TYPE_TXSTMP");

                entity.Property(e => e.QuoteTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("QUOTE_TYPE_PAR");
            });

            modelBuilder.Entity<QuoteTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.QuoteTypeId, e.AttrName });

                entity.ToTable("QUOTE_TYPE_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "QT_TP_ATTR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "QT_TP_ATTR_TXSTMP");

                entity.HasIndex(e => e.QuoteTypeId, "QUOTE_TPAT_QTYP");

                entity.Property(e => e.QuoteTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.QuoteType)
                    .WithMany(p => p.QuoteTypeAttrs)
                    .HasForeignKey(d => d.QuoteTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("QUOTE_TPAT_QTYP");
            });

            modelBuilder.Entity<QuoteWorkEffort>(entity =>
            {
                entity.HasKey(e => new { e.QuoteId, e.WorkEffortId });

                entity.ToTable("QUOTE_WORK_EFFORT");

                entity.HasIndex(e => e.CreatedTxStamp, "QT_WRK_EFFT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "QT_WRK_EFFT_TXSTMP");

                entity.HasIndex(e => e.QuoteId, "QUOTE_WE_QUOTE");

                entity.HasIndex(e => e.WorkEffortId, "QUOTE_WE_WEFF");

                entity.Property(e => e.QuoteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_ID");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Quote)
                    .WithMany(p => p.QuoteWorkEfforts)
                    .HasForeignKey(d => d.QuoteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("QUOTE_WE_QUOTE");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.QuoteWorkEfforts)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("QUOTE_WE_WEFF");
            });

            modelBuilder.Entity<RateAmount>(entity =>
            {
                entity.HasKey(e => new { e.RateTypeId, e.RateCurrencyUomId, e.PeriodTypeId, e.PartyId, e.WorkEffortId, e.EmplPositionTypeId, e.FromDate });

                entity.ToTable("RATE_AMOUNT");

                entity.HasIndex(e => e.EmplPositionTypeId, "RATE_AMOUNT_EPT");

                entity.HasIndex(e => e.PeriodTypeId, "RATE_AMOUNT_PT");

                entity.HasIndex(e => e.PartyId, "RATE_AMOUNT_PTY");

                entity.HasIndex(e => e.RateCurrencyUomId, "RATE_AMOUNT_RCT");

                entity.HasIndex(e => e.RateTypeId, "RATE_AMOUNT_RT");

                entity.HasIndex(e => e.CreatedTxStamp, "RATE_AMOUNT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RATE_AMOUNT_TXSTMP");

                entity.HasIndex(e => e.WorkEffortId, "RATE_AMOUNT_WE");

                entity.Property(e => e.RateTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RATE_TYPE_ID");

                entity.Property(e => e.RateCurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RATE_CURRENCY_UOM_ID");

                entity.Property(e => e.PeriodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_TYPE_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.EmplPositionTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMPL_POSITION_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.RateAmount1)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("RATE_AMOUNT");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.EmplPositionType)
                    .WithMany(p => p.RateAmounts)
                    .HasForeignKey(d => d.EmplPositionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RATE_AMOUNT_EPT");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.RateAmounts)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RATE_AMOUNT_PTY");

                entity.HasOne(d => d.PeriodType)
                    .WithMany(p => p.RateAmounts)
                    .HasForeignKey(d => d.PeriodTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RATE_AMOUNT_PT");

                entity.HasOne(d => d.RateCurrencyUom)
                    .WithMany(p => p.RateAmounts)
                    .HasForeignKey(d => d.RateCurrencyUomId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RATE_AMOUNT_RCT");

                entity.HasOne(d => d.RateType)
                    .WithMany(p => p.RateAmounts)
                    .HasForeignKey(d => d.RateTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RATE_AMOUNT_RT");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.RateAmounts)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RATE_AMOUNT_WE");
            });

            modelBuilder.Entity<RateType>(entity =>
            {
                entity.ToTable("RATE_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "RATE_TYPE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RATE_TYPE_TXSTMP");

                entity.Property(e => e.RateTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RATE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<RecurrenceInfo>(entity =>
            {
                entity.ToTable("RECURRENCE_INFO");

                entity.HasIndex(e => e.CreatedTxStamp, "RCRRNC_INF_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RCRRNC_INF_TXSTMP");

                entity.HasIndex(e => e.ExceptionRuleId, "REC_INFO_EX_RCRLE");

                entity.HasIndex(e => e.RecurrenceRuleId, "REC_INFO_RCRLE");

                entity.Property(e => e.RecurrenceInfoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RECURRENCE_INFO_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.ExceptionDateTimes)
                    .HasColumnType("text")
                    .HasColumnName("EXCEPTION_DATE_TIMES");

                entity.Property(e => e.ExceptionRuleId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EXCEPTION_RULE_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.RecurrenceCount).HasColumnName("RECURRENCE_COUNT");

                entity.Property(e => e.RecurrenceDateTimes)
                    .HasColumnType("text")
                    .HasColumnName("RECURRENCE_DATE_TIMES");

                entity.Property(e => e.RecurrenceRuleId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RECURRENCE_RULE_ID");

                entity.Property(e => e.StartDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("START_DATE_TIME");

                entity.HasOne(d => d.ExceptionRule)
                    .WithMany(p => p.RecurrenceInfoExceptionRules)
                    .HasForeignKey(d => d.ExceptionRuleId)
                    .HasConstraintName("REC_INFO_EX_RCRLE");

                entity.HasOne(d => d.RecurrenceRule)
                    .WithMany(p => p.RecurrenceInfoRecurrenceRules)
                    .HasForeignKey(d => d.RecurrenceRuleId)
                    .HasConstraintName("REC_INFO_RCRLE");
            });

            modelBuilder.Entity<RecurrenceRule>(entity =>
            {
                entity.ToTable("RECURRENCE_RULE");

                entity.HasIndex(e => e.CreatedTxStamp, "RCRRNC_RL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RCRRNC_RL_TXSTMP");

                entity.Property(e => e.RecurrenceRuleId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RECURRENCE_RULE_ID");

                entity.Property(e => e.ByDayList)
                    .HasColumnType("text")
                    .HasColumnName("BY_DAY_LIST");

                entity.Property(e => e.ByHourList)
                    .HasColumnType("text")
                    .HasColumnName("BY_HOUR_LIST");

                entity.Property(e => e.ByMinuteList)
                    .HasColumnType("text")
                    .HasColumnName("BY_MINUTE_LIST");

                entity.Property(e => e.ByMonthDayList)
                    .HasColumnType("text")
                    .HasColumnName("BY_MONTH_DAY_LIST");

                entity.Property(e => e.ByMonthList)
                    .HasColumnType("text")
                    .HasColumnName("BY_MONTH_LIST");

                entity.Property(e => e.BySecondList)
                    .HasColumnType("text")
                    .HasColumnName("BY_SECOND_LIST");

                entity.Property(e => e.BySetPosList)
                    .HasColumnType("text")
                    .HasColumnName("BY_SET_POS_LIST");

                entity.Property(e => e.ByWeekNoList)
                    .HasColumnType("text")
                    .HasColumnName("BY_WEEK_NO_LIST");

                entity.Property(e => e.ByYearDayList)
                    .HasColumnType("text")
                    .HasColumnName("BY_YEAR_DAY_LIST");

                entity.Property(e => e.CountNumber).HasColumnName("COUNT_NUMBER");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Frequency)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("FREQUENCY");

                entity.Property(e => e.IntervalNumber).HasColumnName("INTERVAL_NUMBER");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.UntilDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("UNTIL_DATE_TIME");

                entity.Property(e => e.WeekStart)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("WEEK_START");

                entity.Property(e => e.XName)
                    .HasColumnType("text")
                    .HasColumnName("X_NAME");
            });

            modelBuilder.Entity<RejectionReason>(entity =>
            {
                entity.HasKey(e => e.RejectionId);

                entity.ToTable("REJECTION_REASON");

                entity.HasIndex(e => e.CreatedTxStamp, "RJCTN_RSN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RJCTN_RSN_TXSTMP");

                entity.Property(e => e.RejectionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REJECTION_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<ReorderGuideline>(entity =>
            {
                entity.ToTable("REORDER_GUIDELINE");

                entity.HasIndex(e => e.FacilityId, "REORDER_GD_FAC");

                entity.HasIndex(e => e.GeoId, "REORDER_GD_GEO");

                entity.HasIndex(e => e.PartyId, "REORDER_GD_PARTY");

                entity.HasIndex(e => e.ProductId, "REORDER_GD_PROD");

                entity.HasIndex(e => e.CreatedTxStamp, "RRDR_GDLN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RRDR_GDLN_TXSTMP");

                entity.Property(e => e.ReorderGuidelineId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REORDER_GUIDELINE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.GeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.ReorderLevel)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("REORDER_LEVEL");

                entity.Property(e => e.ReorderQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("REORDER_QUANTITY");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.ReorderGuidelines)
                    .HasForeignKey(d => d.FacilityId)
                    .HasConstraintName("REORDER_GD_FAC");

                entity.HasOne(d => d.Geo)
                    .WithMany(p => p.ReorderGuidelines)
                    .HasForeignKey(d => d.GeoId)
                    .HasConstraintName("REORDER_GD_GEO");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.ReorderGuidelines)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("REORDER_GD_PARTY");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ReorderGuidelines)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("REORDER_GD_PROD");
            });

            modelBuilder.Entity<Requirement>(entity =>
            {
                entity.ToTable("REQUIREMENT");

                entity.HasIndex(e => e.CreatedTxStamp, "REQUIREMENT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "REQUIREMENT_TXSTMP");

                entity.HasIndex(e => e.DeliverableId, "REQ_DELIVERABLE");

                entity.HasIndex(e => e.FacilityId, "REQ_FACILITY");

                entity.HasIndex(e => e.FixedAssetId, "REQ_FIXED_ASSET");

                entity.HasIndex(e => e.ProductId, "REQ_PRODUCT");

                entity.HasIndex(e => e.StatusId, "REQ_STTS");

                entity.HasIndex(e => e.RequirementTypeId, "REQ_TYPE");

                entity.Property(e => e.RequirementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REQUIREMENT_ID");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DeliverableId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERABLE_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.EstimatedBudget)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ESTIMATED_BUDGET");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.FacilityIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID_TO");

                entity.Property(e => e.FixedAssetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_ID");

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.Reason)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REASON");

                entity.Property(e => e.RequiredByDate)
                    .HasColumnType("datetime")
                    .HasColumnName("REQUIRED_BY_DATE");

                entity.Property(e => e.RequirementStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("REQUIREMENT_START_DATE");

                entity.Property(e => e.RequirementTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REQUIREMENT_TYPE_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.UseCase)
                    .HasColumnType("text")
                    .HasColumnName("USE_CASE");

                entity.HasOne(d => d.Deliverable)
                    .WithMany(p => p.Requirements)
                    .HasForeignKey(d => d.DeliverableId)
                    .HasConstraintName("REQ_DELIVERABLE");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.Requirements)
                    .HasForeignKey(d => d.FacilityId)
                    .HasConstraintName("REQ_FACILITY");

                entity.HasOne(d => d.FixedAsset)
                    .WithMany(p => p.Requirements)
                    .HasForeignKey(d => d.FixedAssetId)
                    .HasConstraintName("REQ_FIXED_ASSET");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Requirements)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("REQ_PRODUCT");

                entity.HasOne(d => d.RequirementType)
                    .WithMany(p => p.Requirements)
                    .HasForeignKey(d => d.RequirementTypeId)
                    .HasConstraintName("REQ_TYPE");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Requirements)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("REQ_STTS");
            });

            modelBuilder.Entity<RequirementAttribute>(entity =>
            {
                entity.HasKey(e => new { e.RequirementId, e.AttrName });

                entity.ToTable("REQUIREMENT_ATTRIBUTE");

                entity.HasIndex(e => e.RequirementId, "REQ_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "RQRMT_ATTRT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RQRMT_ATTRT_TXSTMP");

                entity.Property(e => e.RequirementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REQUIREMENT_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Requirement)
                    .WithMany(p => p.RequirementAttributes)
                    .HasForeignKey(d => d.RequirementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("REQ_ATTR");
            });

            modelBuilder.Entity<RequirementBudgetAllocation>(entity =>
            {
                entity.HasKey(e => new { e.BudgetId, e.BudgetItemSeqId, e.RequirementId })
                    .HasName("PK_REQUIREMENT_BUDGET_ALLOCATI");

                entity.ToTable("REQUIREMENT_BUDGET_ALLOCATION");

                entity.HasIndex(e => new { e.BudgetId, e.BudgetItemSeqId }, "REQ_BDGTAL_BITM");

                entity.HasIndex(e => e.RequirementId, "REQ_BDGTAL_REQ");

                entity.HasIndex(e => e.CreatedTxStamp, "RQRT_BDT_ALLN_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RQRT_BDT_ALLN_TXSP");

                entity.Property(e => e.BudgetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ID");

                entity.Property(e => e.BudgetItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ITEM_SEQ_ID");

                entity.Property(e => e.RequirementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REQUIREMENT_ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Requirement)
                    .WithMany(p => p.RequirementBudgetAllocations)
                    .HasForeignKey(d => d.RequirementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("REQ_BDGTAL_REQ");

                entity.HasOne(d => d.BudgetI)
                    .WithMany(p => p.RequirementBudgetAllocations)
                    .HasForeignKey(d => new { d.BudgetId, d.BudgetItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("REQ_BDGTAL_BITM");
            });

            modelBuilder.Entity<RequirementCustRequest>(entity =>
            {
                entity.HasKey(e => new { e.CustRequestId, e.CustRequestItemSeqId, e.RequirementId });

                entity.ToTable("REQUIREMENT_CUST_REQUEST");

                entity.HasIndex(e => new { e.CustRequestId, e.CustRequestItemSeqId }, "REQ_CSREQ_CRITM");

                entity.HasIndex(e => e.RequirementId, "REQ_CSREQ_REQ");

                entity.HasIndex(e => e.CreatedTxStamp, "RQRT_CST_RQT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RQRT_CST_RQT_TXSTP");

                entity.Property(e => e.CustRequestId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_ID");

                entity.Property(e => e.CustRequestItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_ITEM_SEQ_ID");

                entity.Property(e => e.RequirementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REQUIREMENT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Requirement)
                    .WithMany(p => p.RequirementCustRequests)
                    .HasForeignKey(d => d.RequirementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("REQ_CSREQ_REQ");

                entity.HasOne(d => d.CustRequestI)
                    .WithMany(p => p.RequirementCustRequests)
                    .HasForeignKey(d => new { d.CustRequestId, d.CustRequestItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("REQ_CSREQ_CRITM");
            });

            modelBuilder.Entity<RequirementRole>(entity =>
            {
                entity.HasKey(e => new { e.RequirementId, e.PartyId, e.RoleTypeId, e.FromDate });

                entity.ToTable("REQUIREMENT_ROLE");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "REQ_ROLE_PROLE");

                entity.HasIndex(e => e.PartyId, "REQ_ROLE_PRTY");

                entity.HasIndex(e => e.RequirementId, "REQ_ROLE_REQ");

                entity.HasIndex(e => e.CreatedTxStamp, "RQRMNT_RL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RQRMNT_RL_TXSTMP");

                entity.Property(e => e.RequirementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REQUIREMENT_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.RequirementRoles)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("REQ_ROLE_PRTY");

                entity.HasOne(d => d.Requirement)
                    .WithMany(p => p.RequirementRoles)
                    .HasForeignKey(d => d.RequirementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("REQ_ROLE_REQ");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.RequirementRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("REQ_ROLE_PROLE");
            });

            modelBuilder.Entity<RequirementStatus>(entity =>
            {
                entity.HasKey(e => new { e.RequirementId, e.StatusId });

                entity.ToTable("REQUIREMENT_STATUS");

                entity.HasIndex(e => e.RequirementId, "REQ_STTS_REQ");

                entity.HasIndex(e => e.StatusId, "REQ_STTS_STTS");

                entity.HasIndex(e => e.ChangeByUserLoginId, "REQ_STTS_USRLGN");

                entity.HasIndex(e => e.CreatedTxStamp, "RQRMNT_STTS_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RQRMNT_STTS_TXSTMP");

                entity.Property(e => e.RequirementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REQUIREMENT_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.ChangeByUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.StatusDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STATUS_DATE");

                entity.HasOne(d => d.ChangeByUserLogin)
                    .WithMany(p => p.RequirementStatuses)
                    .HasForeignKey(d => d.ChangeByUserLoginId)
                    .HasConstraintName("REQ_STTS_USRLGN");

                entity.HasOne(d => d.Requirement)
                    .WithMany(p => p.RequirementStatuses)
                    .HasForeignKey(d => d.RequirementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("REQ_STTS_REQ");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.RequirementStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("REQ_STTS_STTS");
            });

            modelBuilder.Entity<RequirementType>(entity =>
            {
                entity.ToTable("REQUIREMENT_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "REQ_TYPE_PARENT");

                entity.HasIndex(e => e.CreatedTxStamp, "RQRMNT_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RQRMNT_TP_TXSTMP");

                entity.Property(e => e.RequirementTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REQUIREMENT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("REQ_TYPE_PARENT");
            });

            modelBuilder.Entity<RequirementTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.RequirementTypeId, e.AttrName });

                entity.ToTable("REQUIREMENT_TYPE_ATTR");

                entity.HasIndex(e => e.RequirementTypeId, "REQ_TYPE_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "RQRMT_TP_ATR_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RQRMT_TP_ATR_TXSTP");

                entity.Property(e => e.RequirementTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REQUIREMENT_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.RequirementType)
                    .WithMany(p => p.RequirementTypeAttrs)
                    .HasForeignKey(d => d.RequirementTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("REQ_TYPE_ATTR");
            });

            modelBuilder.Entity<RespondingParty>(entity =>
            {
                entity.HasKey(e => new { e.RespondingPartySeqId, e.CustRequestId, e.PartyId });

                entity.ToTable("RESPONDING_PARTY");

                entity.HasIndex(e => e.ContactMechId, "RESP_PTY_CMECH");

                entity.HasIndex(e => e.CustRequestId, "RESP_PTY_CSREQ");

                entity.HasIndex(e => e.PartyId, "RESP_PTY_PARTY");

                entity.HasIndex(e => e.CreatedTxStamp, "RSPNDNG_PRT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RSPNDNG_PRT_TXSTMP");

                entity.Property(e => e.RespondingPartySeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RESPONDING_PARTY_SEQ_ID");

                entity.Property(e => e.CustRequestId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUST_REQUEST_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DateSent)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_SENT");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.RespondingParties)
                    .HasForeignKey(d => d.ContactMechId)
                    .HasConstraintName("RESP_PTY_CMECH");

                entity.HasOne(d => d.CustRequest)
                    .WithMany(p => p.RespondingParties)
                    .HasForeignKey(d => d.CustRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RESP_PTY_CSREQ");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.RespondingParties)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RESP_PTY_PARTY");
            });

            modelBuilder.Entity<ResponsibilityType>(entity =>
            {
                entity.ToTable("RESPONSIBILITY_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "RESPON_TYPE_PAR");

                entity.HasIndex(e => e.CreatedTxStamp, "RSPNSBLT_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RSPNSBLT_TP_TXSTMP");

                entity.Property(e => e.ResponsibilityTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RESPONSIBILITY_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("RESPON_TYPE_PAR");
            });

            modelBuilder.Entity<ReturnAdjustment>(entity =>
            {
                entity.ToTable("RETURN_ADJUSTMENT");

                entity.HasIndex(e => e.OverrideGlAccountId, "RETURN_ADJ_OGLA");

                entity.HasIndex(e => e.OrderAdjustmentId, "RETURN_ADJ_ORDADJ");

                entity.HasIndex(e => e.PrimaryGeoId, "RETURN_ADJ_PRGEO");

                entity.HasIndex(e => e.ProductPromoId, "RETURN_ADJ_PROMO");

                entity.HasIndex(e => e.ReturnId, "RETURN_ADJ_RHEAD");

                entity.HasIndex(e => e.SecondaryGeoId, "RETURN_ADJ_SCGEO");

                entity.HasIndex(e => e.TaxAuthorityRateSeqId, "RETURN_ADJ_TARP");

                entity.HasIndex(e => new { e.TaxAuthGeoId, e.TaxAuthPartyId }, "RETURN_ADJ_TXA");

                entity.HasIndex(e => e.ReturnAdjustmentTypeId, "RETURN_ADJ_TYPE");

                entity.HasIndex(e => e.CreatedByUserLogin, "RETURN_ADJ_USERL");

                entity.HasIndex(e => e.ReturnTypeId, "RET_ADJ_RTN_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "RTN_ADJSTMT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RTN_ADJSTMT_TXSTMP");

                entity.Property(e => e.ReturnAdjustmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ADJUSTMENT_ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CorrespondingProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CORRESPONDING_PRODUCT_ID");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CustomerReferenceId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_REFERENCE_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.ExemptAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("EXEMPT_AMOUNT");

                entity.Property(e => e.IncludeInShipping)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INCLUDE_IN_SHIPPING")
                    .IsFixedLength();

                entity.Property(e => e.IncludeInTax)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INCLUDE_IN_TAX")
                    .IsFixedLength();

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OrderAdjustmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ADJUSTMENT_ID");

                entity.Property(e => e.OverrideGlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("OVERRIDE_GL_ACCOUNT_ID");

                entity.Property(e => e.PrimaryGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_GEO_ID");

                entity.Property(e => e.ProductFeatureId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_ID");

                entity.Property(e => e.ProductPromoActionSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_ACTION_SEQ_ID");

                entity.Property(e => e.ProductPromoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_ID");

                entity.Property(e => e.ProductPromoRuleId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_RULE_ID");

                entity.Property(e => e.ReturnAdjustmentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ADJUSTMENT_TYPE_ID");

                entity.Property(e => e.ReturnId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ID");

                entity.Property(e => e.ReturnItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ITEM_SEQ_ID");

                entity.Property(e => e.ReturnTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_TYPE_ID");

                entity.Property(e => e.SecondaryGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SECONDARY_GEO_ID");

                entity.Property(e => e.ShipGroupSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIP_GROUP_SEQ_ID");

                entity.Property(e => e.SourcePercentage)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("SOURCE_PERCENTAGE");

                entity.Property(e => e.SourceReferenceId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SOURCE_REFERENCE_ID");

                entity.Property(e => e.TaxAuthGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTH_GEO_ID");

                entity.Property(e => e.TaxAuthPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTH_PARTY_ID");

                entity.Property(e => e.TaxAuthorityRateSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTHORITY_RATE_SEQ_ID");

                entity.HasOne(d => d.CreatedByUserLoginNavigation)
                    .WithMany(p => p.ReturnAdjustments)
                    .HasForeignKey(d => d.CreatedByUserLogin)
                    .HasConstraintName("RETURN_ADJ_USERL");

                entity.HasOne(d => d.OrderAdjustment)
                    .WithMany(p => p.ReturnAdjustments)
                    .HasForeignKey(d => d.OrderAdjustmentId)
                    .HasConstraintName("RETURN_ADJ_ORDADJ");

                entity.HasOne(d => d.OverrideGlAccount)
                    .WithMany(p => p.ReturnAdjustments)
                    .HasForeignKey(d => d.OverrideGlAccountId)
                    .HasConstraintName("RETURN_ADJ_OGLA");

                entity.HasOne(d => d.PrimaryGeo)
                    .WithMany(p => p.ReturnAdjustmentPrimaryGeos)
                    .HasForeignKey(d => d.PrimaryGeoId)
                    .HasConstraintName("RETURN_ADJ_PRGEO");

                entity.HasOne(d => d.ProductPromo)
                    .WithMany(p => p.ReturnAdjustments)
                    .HasForeignKey(d => d.ProductPromoId)
                    .HasConstraintName("RETURN_ADJ_PROMO");

                entity.HasOne(d => d.ReturnAdjustmentType)
                    .WithMany(p => p.ReturnAdjustments)
                    .HasForeignKey(d => d.ReturnAdjustmentTypeId)
                    .HasConstraintName("RETURN_ADJ_TYPE");

                entity.HasOne(d => d.Return)
                    .WithMany(p => p.ReturnAdjustments)
                    .HasForeignKey(d => d.ReturnId)
                    .HasConstraintName("RETURN_ADJ_RHEAD");

                entity.HasOne(d => d.ReturnType)
                    .WithMany(p => p.ReturnAdjustments)
                    .HasForeignKey(d => d.ReturnTypeId)
                    .HasConstraintName("RET_ADJ_RTN_TYPE");

                entity.HasOne(d => d.SecondaryGeo)
                    .WithMany(p => p.ReturnAdjustmentSecondaryGeos)
                    .HasForeignKey(d => d.SecondaryGeoId)
                    .HasConstraintName("RETURN_ADJ_SCGEO");

                entity.HasOne(d => d.TaxAuthorityRateSeq)
                    .WithMany(p => p.ReturnAdjustments)
                    .HasForeignKey(d => d.TaxAuthorityRateSeqId)
                    .HasConstraintName("RETURN_ADJ_TARP");

                entity.HasOne(d => d.TaxAuth)
                    .WithMany(p => p.ReturnAdjustments)
                    .HasForeignKey(d => new { d.TaxAuthGeoId, d.TaxAuthPartyId })
                    .HasConstraintName("RETURN_ADJ_TXA");
            });

            modelBuilder.Entity<ReturnAdjustmentType>(entity =>
            {
                entity.ToTable("RETURN_ADJUSTMENT_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "RETURN_ADJ_TYPPAR");

                entity.HasIndex(e => e.CreatedTxStamp, "RTN_ADJSTT_TP_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RTN_ADJSTT_TP_TXSP");

                entity.Property(e => e.ReturnAdjustmentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ADJUSTMENT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("RETURN_ADJ_TYPPAR");
            });

            modelBuilder.Entity<ReturnContactMech>(entity =>
            {
                entity.HasKey(e => new { e.ReturnId, e.ContactMechPurposeTypeId, e.ContactMechId });

                entity.ToTable("RETURN_CONTACT_MECH");

                entity.HasIndex(e => e.ContactMechId, "RETURN_CMECH_CM");

                entity.HasIndex(e => e.ContactMechPurposeTypeId, "RETURN_CMECH_CMPT");

                entity.HasIndex(e => e.ReturnId, "RETURN_CMECH_HDR");

                entity.HasIndex(e => e.CreatedTxStamp, "RTN_CNTT_MCH_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RTN_CNTT_MCH_TXSTP");

                entity.Property(e => e.ReturnId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ID");

                entity.Property(e => e.ContactMechPurposeTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_PURPOSE_TYPE_ID");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.ReturnContactMeches)
                    .HasForeignKey(d => d.ContactMechId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RETURN_CMECH_CM");

                entity.HasOne(d => d.ContactMechPurposeType)
                    .WithMany(p => p.ReturnContactMeches)
                    .HasForeignKey(d => d.ContactMechPurposeTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RETURN_CMECH_CMPT");

                entity.HasOne(d => d.Return)
                    .WithMany(p => p.ReturnContactMeches)
                    .HasForeignKey(d => d.ReturnId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RETURN_CMECH_HDR");
            });

            modelBuilder.Entity<ReturnHeader>(entity =>
            {
                entity.HasKey(e => e.ReturnId);

                entity.ToTable("RETURN_HEADER");

                entity.HasIndex(e => e.OriginContactMechId, "RTN_FROM_CTM");

                entity.HasIndex(e => e.FromPartyId, "RTN_FROM_PARTY");

                entity.HasIndex(e => e.CurrencyUomId, "RTN_HDR_CUOM");

                entity.HasIndex(e => e.ReturnHeaderTypeId, "RTN_HEAD_TYPE");

                entity.HasIndex(e => e.StatusId, "RTN_STTS_ITEM");

                entity.HasIndex(e => e.BillingAccountId, "RTN_TO_BACT");

                entity.HasIndex(e => e.DestinationFacilityId, "RTN_TO_FACILITY");

                entity.HasIndex(e => e.FinAccountId, "RTN_TO_FACT");

                entity.HasIndex(e => e.ToPartyId, "RTN_TO_PARTY");

                entity.HasIndex(e => e.PaymentMethodId, "RTN_TO_PAYMETH");

                entity.HasIndex(e => e.CreatedTxStamp, "RTRN_HDR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RTRN_HDR_TXSTMP");

                entity.Property(e => e.ReturnId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ID");

                entity.Property(e => e.BillingAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_ACCOUNT_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM_ID");

                entity.Property(e => e.DestinationFacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DESTINATION_FACILITY_ID");

                entity.Property(e => e.EntryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ENTRY_DATE");

                entity.Property(e => e.FinAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_ID");

                entity.Property(e => e.FromPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FROM_PARTY_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.NeedsInventoryReceive)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NEEDS_INVENTORY_RECEIVE")
                    .IsFixedLength();

                entity.Property(e => e.OriginContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORIGIN_CONTACT_MECH_ID");

                entity.Property(e => e.PaymentMethodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_METHOD_ID");

                entity.Property(e => e.ReturnHeaderTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_HEADER_TYPE_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.SupplierRmaId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_RMA_ID");

                entity.Property(e => e.ToPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TO_PARTY_ID");

                entity.HasOne(d => d.BillingAccount)
                    .WithMany(p => p.ReturnHeaders)
                    .HasForeignKey(d => d.BillingAccountId)
                    .HasConstraintName("RTN_TO_BACT");

                entity.HasOne(d => d.CurrencyUom)
                    .WithMany(p => p.ReturnHeaders)
                    .HasForeignKey(d => d.CurrencyUomId)
                    .HasConstraintName("RTN_HDR_CUOM");

                entity.HasOne(d => d.DestinationFacility)
                    .WithMany(p => p.ReturnHeaders)
                    .HasForeignKey(d => d.DestinationFacilityId)
                    .HasConstraintName("RTN_TO_FACILITY");

                entity.HasOne(d => d.FinAccount)
                    .WithMany(p => p.ReturnHeaders)
                    .HasForeignKey(d => d.FinAccountId)
                    .HasConstraintName("RTN_TO_FACT");

                entity.HasOne(d => d.FromParty)
                    .WithMany(p => p.ReturnHeaderFromParties)
                    .HasForeignKey(d => d.FromPartyId)
                    .HasConstraintName("RTN_FROM_PARTY");

                entity.HasOne(d => d.OriginContactMech)
                    .WithMany(p => p.ReturnHeaders)
                    .HasForeignKey(d => d.OriginContactMechId)
                    .HasConstraintName("RTN_FROM_CTM");

                entity.HasOne(d => d.PaymentMethod)
                    .WithMany(p => p.ReturnHeaders)
                    .HasForeignKey(d => d.PaymentMethodId)
                    .HasConstraintName("RTN_TO_PAYMETH");

                entity.HasOne(d => d.ReturnHeaderType)
                    .WithMany(p => p.ReturnHeaders)
                    .HasForeignKey(d => d.ReturnHeaderTypeId)
                    .HasConstraintName("RTN_HEAD_TYPE");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ReturnHeaders)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("RTN_STTS_ITEM");

                entity.HasOne(d => d.ToParty)
                    .WithMany(p => p.ReturnHeaderToParties)
                    .HasForeignKey(d => d.ToPartyId)
                    .HasConstraintName("RTN_TO_PARTY");
            });

            modelBuilder.Entity<ReturnHeaderType>(entity =>
            {
                entity.ToTable("RETURN_HEADER_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "RTHEAD_TYPE_PARENT");

                entity.HasIndex(e => e.CreatedTxStamp, "RTRN_HDR_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RTRN_HDR_TP_TXSTMP");

                entity.Property(e => e.ReturnHeaderTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_HEADER_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("RTHEAD_TYPE_PARENT");
            });

            modelBuilder.Entity<ReturnItem>(entity =>
            {
                entity.HasKey(e => new { e.ReturnId, e.ReturnItemSeqId });

                entity.ToTable("RETURN_ITEM");

                entity.HasIndex(e => e.CreatedTxStamp, "RETURN_ITEM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RETURN_ITEM_TXSTMP");

                entity.HasIndex(e => e.ExpectedItemStatus, "RTN_ITEM_ITSTT");

                entity.HasIndex(e => e.OrderId, "RTN_ITEM_ODR");

                entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId }, "RTN_ITEM_ODRIT");

                entity.HasIndex(e => e.ProductId, "RTN_ITEM_PROD");

                entity.HasIndex(e => e.ReturnReasonId, "RTN_ITEM_REASON");

                entity.HasIndex(e => e.ReturnItemResponseId, "RTN_ITEM_RESP");

                entity.HasIndex(e => e.ReturnId, "RTN_ITEM_RTN");

                entity.HasIndex(e => e.StatusId, "RTN_ITEM_STTSIT");

                entity.HasIndex(e => e.ReturnItemTypeId, "RTN_ITEM_TYPE");

                entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId }, "RTN_ITM_BYORDITM");

                entity.HasIndex(e => e.ReturnTypeId, "RTN_TYPE");

                entity.Property(e => e.ReturnId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ID");

                entity.Property(e => e.ReturnItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ITEM_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.ExpectedItemStatus)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EXPECTED_ITEM_STATUS");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.ReceivedQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("RECEIVED_QUANTITY");

                entity.Property(e => e.ReturnItemResponseId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ITEM_RESPONSE_ID");

                entity.Property(e => e.ReturnItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ITEM_TYPE_ID");

                entity.Property(e => e.ReturnPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("RETURN_PRICE");

                entity.Property(e => e.ReturnQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("RETURN_QUANTITY");

                entity.Property(e => e.ReturnReasonId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_REASON_ID");

                entity.Property(e => e.ReturnTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_TYPE_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.HasOne(d => d.ExpectedItemStatusNavigation)
                    .WithMany(p => p.ReturnItemExpectedItemStatusNavigations)
                    .HasForeignKey(d => d.ExpectedItemStatus)
                    .HasConstraintName("RTN_ITEM_ITSTT");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.ReturnItems)
                    .HasForeignKey(d => d.OrderId)
                    .HasConstraintName("RTN_ITEM_ODR");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ReturnItems)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("RTN_ITEM_PROD");

                entity.HasOne(d => d.Return)
                    .WithMany(p => p.ReturnItems)
                    .HasForeignKey(d => d.ReturnId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RTN_ITEM_RTN");

                entity.HasOne(d => d.ReturnItemResponse)
                    .WithMany(p => p.ReturnItems)
                    .HasForeignKey(d => d.ReturnItemResponseId)
                    .HasConstraintName("RTN_ITEM_RESP");

                entity.HasOne(d => d.ReturnItemType)
                    .WithMany(p => p.ReturnItems)
                    .HasForeignKey(d => d.ReturnItemTypeId)
                    .HasConstraintName("RTN_ITEM_TYPE");

                entity.HasOne(d => d.ReturnReason)
                    .WithMany(p => p.ReturnItems)
                    .HasForeignKey(d => d.ReturnReasonId)
                    .HasConstraintName("RTN_ITEM_REASON");

                entity.HasOne(d => d.ReturnType)
                    .WithMany(p => p.ReturnItems)
                    .HasForeignKey(d => d.ReturnTypeId)
                    .HasConstraintName("RTN_TYPE");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ReturnItemStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("RTN_ITEM_STTSIT");

                entity.HasOne(d => d.OrderI)
                    .WithMany(p => p.ReturnItems)
                    .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                    .HasConstraintName("RTN_ITEM_ODRIT");
            });

            modelBuilder.Entity<ReturnItemBilling>(entity =>
            {
                entity.HasKey(e => new { e.ReturnId, e.ReturnItemSeqId, e.InvoiceId, e.InvoiceItemSeqId });

                entity.ToTable("RETURN_ITEM_BILLING");

                entity.HasIndex(e => new { e.InvoiceId, e.InvoiceItemSeqId }, "RETURN_ITBLNG_IITM");

                entity.HasIndex(e => e.ShipmentReceiptId, "RITBL_SHIPRCPT");

                entity.HasIndex(e => e.ReturnId, "RTN_ITBLNG_RHDR");

                entity.HasIndex(e => new { e.ReturnId, e.ReturnItemSeqId }, "RTN_ITBLNG_RITM");

                entity.HasIndex(e => e.CreatedTxStamp, "RTN_ITM_BLLG_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RTN_ITM_BLLG_TXSTP");

                entity.Property(e => e.ReturnId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ID");

                entity.Property(e => e.ReturnItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ITEM_SEQ_ID");

                entity.Property(e => e.InvoiceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ID");

                entity.Property(e => e.InvoiceItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ITEM_SEQ_ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.ShipmentReceiptId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_RECEIPT_ID");

                entity.HasOne(d => d.Return)
                    .WithMany(p => p.ReturnItemBillings)
                    .HasForeignKey(d => d.ReturnId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RTN_ITBLNG_RHDR");

                entity.HasOne(d => d.ShipmentReceipt)
                    .WithMany(p => p.ReturnItemBillings)
                    .HasForeignKey(d => d.ShipmentReceiptId)
                    .HasConstraintName("RITBL_SHIPRCPT");

                entity.HasOne(d => d.InvoiceI)
                    .WithMany(p => p.ReturnItemBillings)
                    .HasForeignKey(d => new { d.InvoiceId, d.InvoiceItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RETURN_ITBLNG_IITM");

                entity.HasOne(d => d.ReturnI)
                    .WithMany(p => p.ReturnItemBillings)
                    .HasForeignKey(d => new { d.ReturnId, d.ReturnItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RTN_ITBLNG_RITM");
            });

            modelBuilder.Entity<ReturnItemResponse>(entity =>
            {
                entity.ToTable("RETURN_ITEM_RESPONSE");

                entity.HasIndex(e => e.CreatedTxStamp, "RTN_ITM_RSPS_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RTN_ITM_RSPS_TXSTP");

                entity.HasIndex(e => e.BillingAccountId, "RTN_PAY_BACT");

                entity.HasIndex(e => e.FinAccountTransId, "RTN_PAY_FINACTTX");

                entity.HasIndex(e => e.OrderPaymentPreferenceId, "RTN_PAY_ORDPAYPF");

                entity.HasIndex(e => e.PaymentId, "RTN_PAY_PAYMENT");

                entity.HasIndex(e => e.ReplacementOrderId, "RTN_RESP_NEWORD");

                entity.Property(e => e.ReturnItemResponseId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ITEM_RESPONSE_ID");

                entity.Property(e => e.BillingAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_ACCOUNT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.FinAccountTransId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ACCOUNT_TRANS_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OrderPaymentPreferenceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_PAYMENT_PREFERENCE_ID");

                entity.Property(e => e.PaymentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_ID");

                entity.Property(e => e.ReplacementOrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REPLACEMENT_ORDER_ID");

                entity.Property(e => e.ResponseAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("RESPONSE_AMOUNT");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("RESPONSE_DATE");

                entity.HasOne(d => d.BillingAccount)
                    .WithMany(p => p.ReturnItemResponses)
                    .HasForeignKey(d => d.BillingAccountId)
                    .HasConstraintName("RTN_PAY_BACT");

                entity.HasOne(d => d.FinAccountTrans)
                    .WithMany(p => p.ReturnItemResponses)
                    .HasForeignKey(d => d.FinAccountTransId)
                    .HasConstraintName("RTN_PAY_FINACTTX");

                entity.HasOne(d => d.OrderPaymentPreference)
                    .WithMany(p => p.ReturnItemResponses)
                    .HasForeignKey(d => d.OrderPaymentPreferenceId)
                    .HasConstraintName("RTN_PAY_ORDPAYPF");

                entity.HasOne(d => d.Payment)
                    .WithMany(p => p.ReturnItemResponses)
                    .HasForeignKey(d => d.PaymentId)
                    .HasConstraintName("RTN_PAY_PAYMENT");

                entity.HasOne(d => d.ReplacementOrder)
                    .WithMany(p => p.ReturnItemResponses)
                    .HasForeignKey(d => d.ReplacementOrderId)
                    .HasConstraintName("RTN_RESP_NEWORD");
            });

            modelBuilder.Entity<ReturnItemShipment>(entity =>
            {
                entity.HasKey(e => new { e.ReturnId, e.ReturnItemSeqId, e.ShipmentId, e.ShipmentItemSeqId });

                entity.ToTable("RETURN_ITEM_SHIPMENT");

                entity.HasIndex(e => e.ReturnId, "RIT_SHPMT_RHDR");

                entity.HasIndex(e => new { e.ReturnId, e.ReturnItemSeqId }, "RIT_SHPMT_RITM");

                entity.HasIndex(e => new { e.ShipmentId, e.ShipmentItemSeqId }, "RIT_SHPMT_SHPITM");

                entity.HasIndex(e => e.ShipmentId, "RIT_SHPMT_SHPMT");

                entity.HasIndex(e => e.CreatedTxStamp, "RTN_ITM_SHPT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RTN_ITM_SHPT_TXSTP");

                entity.Property(e => e.ReturnId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ID");

                entity.Property(e => e.ReturnItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ITEM_SEQ_ID");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ID");

                entity.Property(e => e.ShipmentItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ITEM_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.HasOne(d => d.Return)
                    .WithMany(p => p.ReturnItemShipments)
                    .HasForeignKey(d => d.ReturnId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RIT_SHPMT_RHDR");

                entity.HasOne(d => d.Shipment)
                    .WithMany(p => p.ReturnItemShipments)
                    .HasForeignKey(d => d.ShipmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RIT_SHPMT_SHPMT");

                entity.HasOne(d => d.ReturnI)
                    .WithMany(p => p.ReturnItemShipments)
                    .HasForeignKey(d => new { d.ReturnId, d.ReturnItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RIT_SHPMT_RITM");

                entity.HasOne(d => d.ShipmentI)
                    .WithMany(p => p.ReturnItemShipments)
                    .HasForeignKey(d => new { d.ShipmentId, d.ShipmentItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RIT_SHPMT_SHPITM");
            });

            modelBuilder.Entity<ReturnItemType>(entity =>
            {
                entity.ToTable("RETURN_ITEM_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "RETURN_ITEM_TYPPAR");

                entity.HasIndex(e => e.CreatedTxStamp, "RTRN_ITM_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RTRN_ITM_TP_TXSTMP");

                entity.Property(e => e.ReturnItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ITEM_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("RETURN_ITEM_TYPPAR");
            });

            modelBuilder.Entity<ReturnItemTypeMap>(entity =>
            {
                entity.HasKey(e => new { e.ReturnItemMapKey, e.ReturnHeaderTypeId });

                entity.ToTable("RETURN_ITEM_TYPE_MAP");

                entity.HasIndex(e => e.ReturnHeaderTypeId, "RETITMMAP_RETTYP");

                entity.HasIndex(e => e.CreatedTxStamp, "RTN_ITM_TP_MP_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RTN_ITM_TP_MP_TXSP");

                entity.Property(e => e.ReturnItemMapKey)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ITEM_MAP_KEY");

                entity.Property(e => e.ReturnHeaderTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_HEADER_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ReturnItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ITEM_TYPE_ID");

                entity.HasOne(d => d.ReturnHeaderType)
                    .WithMany(p => p.ReturnItemTypeMaps)
                    .HasForeignKey(d => d.ReturnHeaderTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RETITMMAP_RETTYP");
            });

            modelBuilder.Entity<ReturnReason>(entity =>
            {
                entity.ToTable("RETURN_REASON");

                entity.HasIndex(e => e.CreatedTxStamp, "RTRN_RSN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RTRN_RSN_TXSTMP");

                entity.Property(e => e.ReturnReasonId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_REASON_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SEQUENCE_ID");
            });

            modelBuilder.Entity<ReturnStatus>(entity =>
            {
                entity.ToTable("RETURN_STATUS");

                entity.HasIndex(e => e.ReturnId, "RTN_STTS_RTN");

                entity.HasIndex(e => e.StatusId, "RTN_STTS_STTS");

                entity.HasIndex(e => e.ChangeByUserLoginId, "RTN_STTS_USRLGN");

                entity.HasIndex(e => e.CreatedTxStamp, "RTRN_STTS_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RTRN_STTS_TXSTMP");

                entity.Property(e => e.ReturnStatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_STATUS_ID");

                entity.Property(e => e.ChangeByUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ReturnId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ID");

                entity.Property(e => e.ReturnItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ITEM_SEQ_ID");

                entity.Property(e => e.StatusDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("STATUS_DATETIME");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.HasOne(d => d.ChangeByUserLogin)
                    .WithMany(p => p.ReturnStatuses)
                    .HasForeignKey(d => d.ChangeByUserLoginId)
                    .HasConstraintName("RTN_STTS_USRLGN");

                entity.HasOne(d => d.Return)
                    .WithMany(p => p.ReturnStatuses)
                    .HasForeignKey(d => d.ReturnId)
                    .HasConstraintName("RTN_STTS_RTN");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ReturnStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("RTN_STTS_STTS");
            });

            modelBuilder.Entity<ReturnType>(entity =>
            {
                entity.ToTable("RETURN_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "RETURN_TYPE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RETURN_TYPE_TXSTMP");

                entity.Property(e => e.ReturnTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.Property(e => e.SequenceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SEQUENCE_ID");
            });

            modelBuilder.Entity<RoleType>(entity =>
            {
                entity.ToTable("ROLE_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "ROLE_TYPE_PAR");

                entity.HasIndex(e => e.CreatedTxStamp, "ROLE_TYPE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ROLE_TYPE_TXSTMP");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("ROLE_TYPE_PAR");
            });

            modelBuilder.Entity<RoleTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.RoleTypeId, e.AttrName });

                entity.ToTable("ROLE_TYPE_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "RL_TP_ATTR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RL_TP_ATTR_TXSTMP");

                entity.HasIndex(e => e.RoleTypeId, "ROLE_TYPATR_RTYP");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.RoleType)
                    .WithMany(p => p.RoleTypeAttrs)
                    .HasForeignKey(d => d.RoleTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ROLE_TYPATR_RTYP");
            });

            modelBuilder.Entity<RuntimeDatum>(entity =>
            {
                entity.HasKey(e => e.RuntimeDataId);

                entity.ToTable("RUNTIME_DATA");

                entity.HasIndex(e => e.CreatedTxStamp, "RNTM_DT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "RNTM_DT_TXSTMP");

                entity.Property(e => e.RuntimeDataId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RUNTIME_DATA_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.RuntimeInfo)
                    .HasColumnType("text")
                    .HasColumnName("RUNTIME_INFO");
            });

            modelBuilder.Entity<SalaryStepNew>(entity =>
            {
                entity.HasKey(e => new { e.SalaryStepSeqId, e.PayGradeId, e.FromDate });

                entity.ToTable("SALARY_STEP_NEW");

                entity.HasIndex(e => e.PayGradeId, "SLRY_STP_PGRD_NEW");

                entity.HasIndex(e => e.CreatedTxStamp, "SLR_STP_NW_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SLR_STP_NW_TXSTMP");

                entity.Property(e => e.SalaryStepSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SALARY_STEP_SEQ_ID");

                entity.Property(e => e.PayGradeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAY_GRADE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DateModified)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_MODIFIED");

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.PayGrade)
                    .WithMany(p => p.SalaryStepNews)
                    .HasForeignKey(d => d.PayGradeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SLRY_STP_PGRD_NEW");
            });

            modelBuilder.Entity<SaleType>(entity =>
            {
                entity.ToTable("SALE_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "SALE_TYPE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SALE_TYPE_TXSTMP");

                entity.Property(e => e.SaleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SALE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<SalesForecast>(entity =>
            {
                entity.ToTable("SALES_FORECAST");

                entity.HasIndex(e => e.CreatedByUserLoginId, "SALES4C_CRT_USER");

                entity.HasIndex(e => e.CurrencyUomId, "SALES4C_CUR_UOM");

                entity.HasIndex(e => e.InternalPartyId, "SALES4C_INT_PARTY");

                entity.HasIndex(e => e.ModifiedByUserLoginId, "SALES4C_MOD_USER");

                entity.HasIndex(e => e.OrganizationPartyId, "SALES4C_ORG_PARTY");

                entity.HasIndex(e => e.ParentSalesForecastId, "SALES4C_PARENT");

                entity.HasIndex(e => e.CustomTimePeriodId, "SALES4C_TIME_PER");

                entity.HasIndex(e => e.CreatedTxStamp, "SLS_FRCST_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SLS_FRCST_TXSTMP");

                entity.Property(e => e.SalesForecastId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SALES_FORECAST_ID");

                entity.Property(e => e.BestCaseAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BEST_CASE_AMOUNT");

                entity.Property(e => e.ClosedAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("CLOSED_AMOUNT");

                entity.Property(e => e.CreatedByUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM_ID");

                entity.Property(e => e.CustomTimePeriodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_TIME_PERIOD_ID");

                entity.Property(e => e.ForecastAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("FORECAST_AMOUNT");

                entity.Property(e => e.InternalPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INTERNAL_PARTY_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ModifiedByUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("MODIFIED_BY_USER_LOGIN_ID");

                entity.Property(e => e.OrganizationPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_PARTY_ID");

                entity.Property(e => e.ParentSalesForecastId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_SALES_FORECAST_ID");

                entity.Property(e => e.PercentOfQuotaClosed)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("PERCENT_OF_QUOTA_CLOSED");

                entity.Property(e => e.PercentOfQuotaForecast)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("PERCENT_OF_QUOTA_FORECAST");

                entity.Property(e => e.PipelineAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PIPELINE_AMOUNT");

                entity.Property(e => e.QuotaAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("QUOTA_AMOUNT");

                entity.HasOne(d => d.CreatedByUserLogin)
                    .WithMany(p => p.SalesForecastCreatedByUserLogins)
                    .HasForeignKey(d => d.CreatedByUserLoginId)
                    .HasConstraintName("SALES4C_CRT_USER");

                entity.HasOne(d => d.CurrencyUom)
                    .WithMany(p => p.SalesForecasts)
                    .HasForeignKey(d => d.CurrencyUomId)
                    .HasConstraintName("SALES4C_CUR_UOM");

                entity.HasOne(d => d.CustomTimePeriod)
                    .WithMany(p => p.SalesForecasts)
                    .HasForeignKey(d => d.CustomTimePeriodId)
                    .HasConstraintName("SALES4C_TIME_PER");

                entity.HasOne(d => d.InternalParty)
                    .WithMany(p => p.SalesForecastInternalParties)
                    .HasForeignKey(d => d.InternalPartyId)
                    .HasConstraintName("SALES4C_INT_PARTY");

                entity.HasOne(d => d.ModifiedByUserLogin)
                    .WithMany(p => p.SalesForecastModifiedByUserLogins)
                    .HasForeignKey(d => d.ModifiedByUserLoginId)
                    .HasConstraintName("SALES4C_MOD_USER");

                entity.HasOne(d => d.OrganizationParty)
                    .WithMany(p => p.SalesForecastOrganizationParties)
                    .HasForeignKey(d => d.OrganizationPartyId)
                    .HasConstraintName("SALES4C_ORG_PARTY");

                entity.HasOne(d => d.ParentSalesForecast)
                    .WithMany(p => p.InverseParentSalesForecast)
                    .HasForeignKey(d => d.ParentSalesForecastId)
                    .HasConstraintName("SALES4C_PARENT");
            });

            modelBuilder.Entity<SalesForecastDetail>(entity =>
            {
                entity.HasKey(e => new { e.SalesForecastId, e.SalesForecastDetailId });

                entity.ToTable("SALES_FORECAST_DETAIL");

                entity.HasIndex(e => e.ProductCategoryId, "SALES4CDTL_PCTGRY");

                entity.HasIndex(e => e.ProductId, "SALES4CDTL_PROD");

                entity.HasIndex(e => e.QuantityUomId, "SALES4CDTL_QTY_UOM");

                entity.HasIndex(e => e.SalesForecastId, "SALES4CDTL_SALES4C");

                entity.HasIndex(e => e.CreatedTxStamp, "SLS_FRCT_DTL_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SLS_FRCT_DTL_TXSTP");

                entity.Property(e => e.SalesForecastId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SALES_FORECAST_ID");

                entity.Property(e => e.SalesForecastDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SALES_FORECAST_DETAIL_ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ProductCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CATEGORY_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.QuantityUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUANTITY_UOM_ID");

                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.SalesForecastDetails)
                    .HasForeignKey(d => d.ProductCategoryId)
                    .HasConstraintName("SALES4CDTL_PCTGRY");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.SalesForecastDetails)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("SALES4CDTL_PROD");

                entity.HasOne(d => d.QuantityUom)
                    .WithMany(p => p.SalesForecastDetails)
                    .HasForeignKey(d => d.QuantityUomId)
                    .HasConstraintName("SALES4CDTL_QTY_UOM");

                entity.HasOne(d => d.SalesForecast)
                    .WithMany(p => p.SalesForecastDetails)
                    .HasForeignKey(d => d.SalesForecastId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SALES4CDTL_SALES4C");
            });

            modelBuilder.Entity<SalesForecastHistory>(entity =>
            {
                entity.ToTable("SALES_FORECAST_HISTORY");

                entity.HasIndex(e => e.CurrencyUomId, "SALES4CH_CUR_UOM");

                entity.HasIndex(e => e.InternalPartyId, "SALES4CH_INT_PARTY");

                entity.HasIndex(e => e.ModifiedByUserLoginId, "SALES4CH_MOD_USER");

                entity.HasIndex(e => e.OrganizationPartyId, "SALES4CH_ORG_PARTY");

                entity.HasIndex(e => e.SalesForecastId, "SALES4CH_SALES4C");

                entity.HasIndex(e => e.CustomTimePeriodId, "SALES4CH_TIME_PER");

                entity.HasIndex(e => e.CreatedTxStamp, "SLS_FRCT_HSR_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SLS_FRCT_HSR_TXSTP");

                entity.Property(e => e.SalesForecastHistoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SALES_FORECAST_HISTORY_ID");

                entity.Property(e => e.BestCaseAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BEST_CASE_AMOUNT");

                entity.Property(e => e.ChangeNote)
                    .HasColumnType("text")
                    .HasColumnName("CHANGE_NOTE");

                entity.Property(e => e.ClosedAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("CLOSED_AMOUNT");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM_ID");

                entity.Property(e => e.CustomTimePeriodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_TIME_PERIOD_ID");

                entity.Property(e => e.ForecastAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("FORECAST_AMOUNT");

                entity.Property(e => e.InternalPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INTERNAL_PARTY_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ModifiedByUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("MODIFIED_BY_USER_LOGIN_ID");

                entity.Property(e => e.ModifiedTimestamp)
                    .HasColumnType("datetime")
                    .HasColumnName("MODIFIED_TIMESTAMP");

                entity.Property(e => e.OrganizationPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_PARTY_ID");

                entity.Property(e => e.ParentSalesForecastId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_SALES_FORECAST_ID");

                entity.Property(e => e.PercentOfQuotaClosed)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("PERCENT_OF_QUOTA_CLOSED");

                entity.Property(e => e.PercentOfQuotaForecast)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("PERCENT_OF_QUOTA_FORECAST");

                entity.Property(e => e.QuotaAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("QUOTA_AMOUNT");

                entity.Property(e => e.SalesForecastId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SALES_FORECAST_ID");

                entity.HasOne(d => d.CurrencyUom)
                    .WithMany(p => p.SalesForecastHistories)
                    .HasForeignKey(d => d.CurrencyUomId)
                    .HasConstraintName("SALES4CH_CUR_UOM");

                entity.HasOne(d => d.CustomTimePeriod)
                    .WithMany(p => p.SalesForecastHistories)
                    .HasForeignKey(d => d.CustomTimePeriodId)
                    .HasConstraintName("SALES4CH_TIME_PER");

                entity.HasOne(d => d.InternalParty)
                    .WithMany(p => p.SalesForecastHistoryInternalParties)
                    .HasForeignKey(d => d.InternalPartyId)
                    .HasConstraintName("SALES4CH_INT_PARTY");

                entity.HasOne(d => d.ModifiedByUserLogin)
                    .WithMany(p => p.SalesForecastHistories)
                    .HasForeignKey(d => d.ModifiedByUserLoginId)
                    .HasConstraintName("SALES4CH_MOD_USER");

                entity.HasOne(d => d.OrganizationParty)
                    .WithMany(p => p.SalesForecastHistoryOrganizationParties)
                    .HasForeignKey(d => d.OrganizationPartyId)
                    .HasConstraintName("SALES4CH_ORG_PARTY");

                entity.HasOne(d => d.SalesForecast)
                    .WithMany(p => p.SalesForecastHistories)
                    .HasForeignKey(d => d.SalesForecastId)
                    .HasConstraintName("SALES4CH_SALES4C");
            });

            modelBuilder.Entity<SalesOpportunity>(entity =>
            {
                entity.ToTable("SALES_OPPORTUNITY");

                entity.HasIndex(e => e.CurrencyUomId, "SLSOPP_CRNCY_UOM");

                entity.HasIndex(e => e.DataSourceId, "SLSOPP_DTSRC");

                entity.HasIndex(e => e.MarketingCampaignId, "SLSOPP_MKTGCMPG");

                entity.HasIndex(e => e.OpportunityStageId, "SLSOPP_STAGE");

                entity.HasIndex(e => e.TypeEnumId, "SLSOPP_TYP_ENUM");

                entity.HasIndex(e => e.CreatedByUserLogin, "SLSOPP_USRLGN");

                entity.HasIndex(e => e.CreatedTxStamp, "SLS_OPPRTNT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SLS_OPPRTNT_TXSTMP");

                entity.Property(e => e.SalesOpportunityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SALES_OPPORTUNITY_ID");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM_ID");

                entity.Property(e => e.DataSourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_SOURCE_ID");

                entity.Property(e => e.Description)
                    .HasColumnType("text")
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.EstimatedAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ESTIMATED_AMOUNT");

                entity.Property(e => e.EstimatedCloseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ESTIMATED_CLOSE_DATE");

                entity.Property(e => e.EstimatedProbability)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ESTIMATED_PROBABILITY");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MarketingCampaignId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MARKETING_CAMPAIGN_ID");

                entity.Property(e => e.NextStep)
                    .HasColumnType("text")
                    .HasColumnName("NEXT_STEP");

                entity.Property(e => e.NextStepDate)
                    .HasColumnType("datetime")
                    .HasColumnName("NEXT_STEP_DATE");

                entity.Property(e => e.OpportunityName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OPPORTUNITY_NAME");

                entity.Property(e => e.OpportunityStageId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("OPPORTUNITY_STAGE_ID");

                entity.Property(e => e.TypeEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TYPE_ENUM_ID");

                entity.HasOne(d => d.CreatedByUserLoginNavigation)
                    .WithMany(p => p.SalesOpportunities)
                    .HasForeignKey(d => d.CreatedByUserLogin)
                    .HasConstraintName("SLSOPP_USRLGN");

                entity.HasOne(d => d.CurrencyUom)
                    .WithMany(p => p.SalesOpportunities)
                    .HasForeignKey(d => d.CurrencyUomId)
                    .HasConstraintName("SLSOPP_CRNCY_UOM");

                entity.HasOne(d => d.DataSource)
                    .WithMany(p => p.SalesOpportunities)
                    .HasForeignKey(d => d.DataSourceId)
                    .HasConstraintName("SLSOPP_DTSRC");

                entity.HasOne(d => d.MarketingCampaign)
                    .WithMany(p => p.SalesOpportunities)
                    .HasForeignKey(d => d.MarketingCampaignId)
                    .HasConstraintName("SLSOPP_MKTGCMPG");

                entity.HasOne(d => d.OpportunityStage)
                    .WithMany(p => p.SalesOpportunities)
                    .HasForeignKey(d => d.OpportunityStageId)
                    .HasConstraintName("SLSOPP_STAGE");

                entity.HasOne(d => d.TypeEnum)
                    .WithMany(p => p.SalesOpportunities)
                    .HasForeignKey(d => d.TypeEnumId)
                    .HasConstraintName("SLSOPP_TYP_ENUM");
            });

            modelBuilder.Entity<SalesOpportunityCompetitor>(entity =>
            {
                entity.HasKey(e => new { e.SalesOpportunityId, e.CompetitorPartyId })
                    .HasName("PK_SALES_OPPORTUNITY_COMPETITO");

                entity.ToTable("SALES_OPPORTUNITY_COMPETITOR");

                entity.HasIndex(e => e.CreatedTxStamp, "SLS_OPPRT_CMR_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SLS_OPPRT_CMR_TXSP");

                entity.HasIndex(e => e.SalesOpportunityId, "SOPPCOMP_SOPP");

                entity.Property(e => e.SalesOpportunityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SALES_OPPORTUNITY_ID");

                entity.Property(e => e.CompetitorPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COMPETITOR_PARTY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PositionEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_ENUM_ID");

                entity.Property(e => e.Strengths)
                    .HasColumnType("text")
                    .HasColumnName("STRENGTHS");

                entity.Property(e => e.Weaknesses)
                    .HasColumnType("text")
                    .HasColumnName("WEAKNESSES");

                entity.HasOne(d => d.SalesOpportunity)
                    .WithMany(p => p.SalesOpportunityCompetitors)
                    .HasForeignKey(d => d.SalesOpportunityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SOPPCOMP_SOPP");
            });

            modelBuilder.Entity<SalesOpportunityHistory>(entity =>
            {
                entity.ToTable("SALES_OPPORTUNITY_HISTORY");

                entity.HasIndex(e => e.CurrencyUomId, "SLOPHI_CRNCY_UOM");

                entity.HasIndex(e => e.SalesOpportunityId, "SLOPHI_SLSOPP");

                entity.HasIndex(e => e.OpportunityStageId, "SLOPHI_STAGE");

                entity.HasIndex(e => e.ModifiedByUserLogin, "SLOPHI_USRLGN");

                entity.HasIndex(e => e.CreatedTxStamp, "SLS_OPPRT_HSR_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SLS_OPPRT_HSR_TXSP");

                entity.Property(e => e.SalesOpportunityHistoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SALES_OPPORTUNITY_HISTORY_ID");

                entity.Property(e => e.ChangeNote)
                    .HasColumnType("text")
                    .HasColumnName("CHANGE_NOTE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM_ID");

                entity.Property(e => e.Description)
                    .HasColumnType("text")
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.EstimatedAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ESTIMATED_AMOUNT");

                entity.Property(e => e.EstimatedCloseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ESTIMATED_CLOSE_DATE");

                entity.Property(e => e.EstimatedProbability)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ESTIMATED_PROBABILITY");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.ModifiedTimestamp)
                    .HasColumnType("datetime")
                    .HasColumnName("MODIFIED_TIMESTAMP");

                entity.Property(e => e.NextStep)
                    .HasColumnType("text")
                    .HasColumnName("NEXT_STEP");

                entity.Property(e => e.OpportunityStageId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("OPPORTUNITY_STAGE_ID");

                entity.Property(e => e.SalesOpportunityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SALES_OPPORTUNITY_ID");

                entity.HasOne(d => d.CurrencyUom)
                    .WithMany(p => p.SalesOpportunityHistories)
                    .HasForeignKey(d => d.CurrencyUomId)
                    .HasConstraintName("SLOPHI_CRNCY_UOM");

                entity.HasOne(d => d.ModifiedByUserLoginNavigation)
                    .WithMany(p => p.SalesOpportunityHistories)
                    .HasForeignKey(d => d.ModifiedByUserLogin)
                    .HasConstraintName("SLOPHI_USRLGN");

                entity.HasOne(d => d.OpportunityStage)
                    .WithMany(p => p.SalesOpportunityHistories)
                    .HasForeignKey(d => d.OpportunityStageId)
                    .HasConstraintName("SLOPHI_STAGE");

                entity.HasOne(d => d.SalesOpportunity)
                    .WithMany(p => p.SalesOpportunityHistories)
                    .HasForeignKey(d => d.SalesOpportunityId)
                    .HasConstraintName("SLOPHI_SLSOPP");
            });

            modelBuilder.Entity<SalesOpportunityQuote>(entity =>
            {
                entity.HasKey(e => new { e.SalesOpportunityId, e.QuoteId });

                entity.ToTable("SALES_OPPORTUNITY_QUOTE");

                entity.HasIndex(e => e.CreatedTxStamp, "SLS_OPPRT_QT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SLS_OPPRT_QT_TXSTP");

                entity.HasIndex(e => e.QuoteId, "SOPPQTE_QTE");

                entity.HasIndex(e => e.SalesOpportunityId, "SOPPQTE_SOPP");

                entity.Property(e => e.SalesOpportunityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SALES_OPPORTUNITY_ID");

                entity.Property(e => e.QuoteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Quote)
                    .WithMany(p => p.SalesOpportunityQuotes)
                    .HasForeignKey(d => d.QuoteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SOPPQTE_QTE");

                entity.HasOne(d => d.SalesOpportunity)
                    .WithMany(p => p.SalesOpportunityQuotes)
                    .HasForeignKey(d => d.SalesOpportunityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SOPPQTE_SOPP");
            });

            modelBuilder.Entity<SalesOpportunityRole>(entity =>
            {
                entity.HasKey(e => new { e.SalesOpportunityId, e.PartyId, e.RoleTypeId });

                entity.ToTable("SALES_OPPORTUNITY_ROLE");

                entity.HasIndex(e => e.PartyId, "SLSOPPRL_PARTY");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "SLSOPPRL_PTYROLE");

                entity.HasIndex(e => e.RoleTypeId, "SLSOPPRL_ROLETYPE");

                entity.HasIndex(e => e.SalesOpportunityId, "SLSOPPRL_SLSOPP");

                entity.HasIndex(e => e.CreatedTxStamp, "SLS_OPPRT_RL_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SLS_OPPRT_RL_TXSTP");

                entity.Property(e => e.SalesOpportunityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SALES_OPPORTUNITY_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.SalesOpportunityRoles)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SLSOPPRL_PARTY");

                entity.HasOne(d => d.RoleType)
                    .WithMany(p => p.SalesOpportunityRoles)
                    .HasForeignKey(d => d.RoleTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SLSOPPRL_ROLETYPE");

                entity.HasOne(d => d.SalesOpportunity)
                    .WithMany(p => p.SalesOpportunityRoles)
                    .HasForeignKey(d => d.SalesOpportunityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SLSOPPRL_SLSOPP");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.SalesOpportunityRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SLSOPPRL_PTYROLE");
            });

            modelBuilder.Entity<SalesOpportunityStage>(entity =>
            {
                entity.HasKey(e => e.OpportunityStageId);

                entity.ToTable("SALES_OPPORTUNITY_STAGE");

                entity.HasIndex(e => e.CreatedTxStamp, "SLS_OPPRT_STG_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SLS_OPPRT_STG_TXSP");

                entity.Property(e => e.OpportunityStageId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("OPPORTUNITY_STAGE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DefaultProbability)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("DEFAULT_PROBABILITY");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");
            });

            modelBuilder.Entity<SalesOpportunityTrckCode>(entity =>
            {
                entity.HasKey(e => new { e.SalesOpportunityId, e.TrackingCodeId });

                entity.ToTable("SALES_OPPORTUNITY_TRCK_CODE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SLS_OPT_TRK_CD_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "SLS_OPT_TRK_CD_TXS");

                entity.HasIndex(e => e.SalesOpportunityId, "SOPPTRKCD_SOPP");

                entity.Property(e => e.SalesOpportunityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SALES_OPPORTUNITY_ID");

                entity.Property(e => e.TrackingCodeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TRACKING_CODE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("RECEIVED_DATE");

                entity.HasOne(d => d.SalesOpportunity)
                    .WithMany(p => p.SalesOpportunityTrckCodes)
                    .HasForeignKey(d => d.SalesOpportunityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SOPPTRKCD_SOPP");
            });

            modelBuilder.Entity<SalesOpportunityWorkEffort>(entity =>
            {
                entity.HasKey(e => new { e.SalesOpportunityId, e.WorkEffortId })
                    .HasName("PK_SALES_OPPORTUNITY_WORK_EFFO");

                entity.ToTable("SALES_OPPORTUNITY_WORK_EFFORT");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SLS_OPT_WRK_EFT_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "SLS_OPT_WRK_EFT_TS");

                entity.HasIndex(e => e.SalesOpportunityId, "SOPPWEFF_SOPP");

                entity.HasIndex(e => e.WorkEffortId, "SOPPWEFF_WEFF");

                entity.Property(e => e.SalesOpportunityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SALES_OPPORTUNITY_ID");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.SalesOpportunity)
                    .WithMany(p => p.SalesOpportunityWorkEfforts)
                    .HasForeignKey(d => d.SalesOpportunityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SOPPWEFF_SOPP");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.SalesOpportunityWorkEfforts)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SOPPWEFF_WEFF");
            });

            modelBuilder.Entity<SecurityGroup>(entity =>
            {
                entity.HasKey(e => e.GroupId);

                entity.ToTable("SECURITY_GROUP");

                entity.HasIndex(e => e.CreatedTxStamp, "SCRT_GRP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SCRT_GRP_TXSTMP");

                entity.Property(e => e.GroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_NAME");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<SecurityGroupPermission>(entity =>
            {
                entity.HasKey(e => new { e.GroupId, e.PermissionId, e.FromDate });

                entity.ToTable("SECURITY_GROUP_PERMISSION");

                entity.HasIndex(e => e.CreatedTxStamp, "SCT_GRP_PRMN_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SCT_GRP_PRMN_TXSTP");

                entity.HasIndex(e => e.GroupId, "SEC_GRP_PERM_GRP");

                entity.Property(e => e.GroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_ID");

                entity.Property(e => e.PermissionId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("PERMISSION_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.SecurityGroupPermissions)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SEC_GRP_PERM_GRP");
            });

            modelBuilder.Entity<SecurityPermission>(entity =>
            {
                entity.HasKey(e => e.PermissionId);

                entity.ToTable("SECURITY_PERMISSION");

                entity.HasIndex(e => e.CreatedTxStamp, "SCRT_PRMSSN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SCRT_PRMSSN_TXSTMP");

                entity.Property(e => e.PermissionId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("PERMISSION_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<SegmentGroup>(entity =>
            {
                entity.ToTable("SEGMENT_GROUP");

                entity.HasIndex(e => e.CreatedTxStamp, "SGMNT_GRP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SGMNT_GRP_TXSTMP");

                entity.HasIndex(e => e.ProductStoreId, "SGMTGRP_PRST");

                entity.HasIndex(e => e.SegmentGroupTypeId, "SGMTGRP_TYPE");

                entity.Property(e => e.SegmentGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SEGMENT_GROUP_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.SegmentGroupTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SEGMENT_GROUP_TYPE_ID");

                entity.HasOne(d => d.ProductStore)
                    .WithMany(p => p.SegmentGroups)
                    .HasForeignKey(d => d.ProductStoreId)
                    .HasConstraintName("SGMTGRP_PRST");

                entity.HasOne(d => d.SegmentGroupType)
                    .WithMany(p => p.SegmentGroups)
                    .HasForeignKey(d => d.SegmentGroupTypeId)
                    .HasConstraintName("SGMTGRP_TYPE");
            });

            modelBuilder.Entity<SegmentGroupClassification>(entity =>
            {
                entity.HasKey(e => new { e.SegmentGroupId, e.PartyClassificationGroupId })
                    .HasName("PK_SEGMENT_GROUP_CLASSIFICATIO");

                entity.ToTable("SEGMENT_GROUP_CLASSIFICATION");

                entity.HasIndex(e => e.PartyClassificationGroupId, "SGMTGRPCLS_PCGP");

                entity.HasIndex(e => e.SegmentGroupId, "SGMTGRPCLS_SGGP");

                entity.HasIndex(e => e.CreatedTxStamp, "SGT_GRP_CLSSN_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SGT_GRP_CLSSN_TXSP");

                entity.Property(e => e.SegmentGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SEGMENT_GROUP_ID");

                entity.Property(e => e.PartyClassificationGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_CLASSIFICATION_GROUP_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.PartyClassificationGroup)
                    .WithMany(p => p.SegmentGroupClassifications)
                    .HasForeignKey(d => d.PartyClassificationGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SGMTGRPCLS_PCGP");

                entity.HasOne(d => d.SegmentGroup)
                    .WithMany(p => p.SegmentGroupClassifications)
                    .HasForeignKey(d => d.SegmentGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SGMTGRPCLS_SGGP");
            });

            modelBuilder.Entity<SegmentGroupGeo>(entity =>
            {
                entity.HasKey(e => new { e.SegmentGroupId, e.GeoId });

                entity.ToTable("SEGMENT_GROUP_GEO");

                entity.HasIndex(e => e.CreatedTxStamp, "SGMNT_GRP_G_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SGMNT_GRP_G_TXSTMP");

                entity.HasIndex(e => e.GeoId, "SGMTGRPGEO_GEO");

                entity.HasIndex(e => e.SegmentGroupId, "SGMTGRPGEO_SGGP");

                entity.Property(e => e.SegmentGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SEGMENT_GROUP_ID");

                entity.Property(e => e.GeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Geo)
                    .WithMany(p => p.SegmentGroupGeos)
                    .HasForeignKey(d => d.GeoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SGMTGRPGEO_GEO");

                entity.HasOne(d => d.SegmentGroup)
                    .WithMany(p => p.SegmentGroupGeos)
                    .HasForeignKey(d => d.SegmentGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SGMTGRPGEO_SGGP");
            });

            modelBuilder.Entity<SegmentGroupRole>(entity =>
            {
                entity.HasKey(e => new { e.SegmentGroupId, e.PartyId, e.RoleTypeId });

                entity.ToTable("SEGMENT_GROUP_ROLE");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "SGMTGRPRL_PRLE");

                entity.HasIndex(e => e.SegmentGroupId, "SGMTGRPRL_SGGP");

                entity.HasIndex(e => e.CreatedTxStamp, "SGMT_GRP_RL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SGMT_GRP_RL_TXSTMP");

                entity.Property(e => e.SegmentGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SEGMENT_GROUP_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.SegmentGroup)
                    .WithMany(p => p.SegmentGroupRoles)
                    .HasForeignKey(d => d.SegmentGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SGMTGRPRL_SGGP");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.SegmentGroupRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SGMTGRPRL_PRLE");
            });

            modelBuilder.Entity<SegmentGroupType>(entity =>
            {
                entity.ToTable("SEGMENT_GROUP_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "SGMT_GRP_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SGMT_GRP_TP_TXSTMP");

                entity.Property(e => e.SegmentGroupTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SEGMENT_GROUP_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<SequenceValueItem>(entity =>
            {
                entity.HasKey(e => e.SeqName);

                entity.ToTable("SEQUENCE_VALUE_ITEM");

                entity.HasIndex(e => e.CreatedTxStamp, "SQNC_VL_ITM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SQNC_VL_ITM_TXSTMP");

                entity.Property(e => e.SeqName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SEQ_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SeqId).HasColumnName("SEQ_ID");
            });

            modelBuilder.Entity<ServerHit>(entity =>
            {
                entity.HasKey(e => new { e.VisitId, e.ContentId, e.HitStartDateTime, e.HitTypeId });

                entity.ToTable("SERVER_HIT");

                entity.HasIndex(e => e.HitTypeId, "SERVER_HIT_SHTYP");

                entity.HasIndex(e => e.VisitId, "SERVER_HIT_VISIT");

                entity.Property(e => e.VisitId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VISIT_ID");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.HitStartDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("HIT_START_DATE_TIME");

                entity.Property(e => e.HitTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("HIT_TYPE_ID");

                entity.Property(e => e.IdByIpContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ID_BY_IP_CONTACT_MECH_ID");

                entity.Property(e => e.InternalContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INTERNAL_CONTENT_ID");

                entity.Property(e => e.NumOfBytes).HasColumnName("NUM_OF_BYTES");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RefByWebContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REF_BY_WEB_CONTACT_MECH_ID");

                entity.Property(e => e.ReferrerUrl)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("REFERRER_URL");

                entity.Property(e => e.RequestUrl)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("REQUEST_URL");

                entity.Property(e => e.RunningTimeMillis).HasColumnName("RUNNING_TIME_MILLIS");

                entity.Property(e => e.ServerHostName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SERVER_HOST_NAME");

                entity.Property(e => e.ServerIpAddress)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SERVER_IP_ADDRESS");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.UserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USER_LOGIN_ID");

                entity.HasOne(d => d.HitType)
                    .WithMany(p => p.ServerHits)
                    .HasForeignKey(d => d.HitTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SERVER_HIT_SHTYP");

                entity.HasOne(d => d.Visit)
                    .WithMany(p => p.ServerHits)
                    .HasForeignKey(d => d.VisitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SERVER_HIT_VISIT");
            });

            modelBuilder.Entity<ServerHitBin>(entity =>
            {
                entity.ToTable("SERVER_HIT_BIN");

                entity.HasIndex(e => e.HitTypeId, "SERVER_HBIN_TYPE");

                entity.Property(e => e.ServerHitBinId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SERVER_HIT_BIN_ID");

                entity.Property(e => e.BinEndDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("BIN_END_DATE_TIME");

                entity.Property(e => e.BinStartDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("BIN_START_DATE_TIME");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.HitTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("HIT_TYPE_ID");

                entity.Property(e => e.InternalContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INTERNAL_CONTENT_ID");

                entity.Property(e => e.MaxTimeMillis).HasColumnName("MAX_TIME_MILLIS");

                entity.Property(e => e.MinTimeMillis).HasColumnName("MIN_TIME_MILLIS");

                entity.Property(e => e.NumberHits).HasColumnName("NUMBER_HITS");

                entity.Property(e => e.ServerHostName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SERVER_HOST_NAME");

                entity.Property(e => e.ServerIpAddress)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SERVER_IP_ADDRESS");

                entity.Property(e => e.TotalTimeMillis).HasColumnName("TOTAL_TIME_MILLIS");

                entity.HasOne(d => d.HitType)
                    .WithMany(p => p.ServerHitBins)
                    .HasForeignKey(d => d.HitTypeId)
                    .HasConstraintName("SERVER_HBIN_TYPE");
            });

            modelBuilder.Entity<ServerHitType>(entity =>
            {
                entity.HasKey(e => e.HitTypeId);

                entity.ToTable("SERVER_HIT_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "SRVR_HT_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SRVR_HT_TP_TXSTMP");

                entity.Property(e => e.HitTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("HIT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<ServiceSemaphore>(entity =>
            {
                entity.HasKey(e => e.ServiceName);

                entity.ToTable("SERVICE_SEMAPHORE");

                entity.HasIndex(e => e.CreatedTxStamp, "SRVC_SMPHR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SRVC_SMPHR_TXSTMP");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERVICE_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LockThread)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOCK_THREAD");

                entity.Property(e => e.LockTime)
                    .HasColumnType("datetime")
                    .HasColumnName("LOCK_TIME");

                entity.Property(e => e.LockedByInstanceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("LOCKED_BY_INSTANCE_ID");
            });

            modelBuilder.Entity<SettlementTerm>(entity =>
            {
                entity.ToTable("SETTLEMENT_TERM");

                entity.HasIndex(e => e.CreatedTxStamp, "STTLMNT_TRM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "STTLMNT_TRM_TXSTMP");

                entity.Property(e => e.SettlementTermId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SETTLEMENT_TERM_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.TermName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TERM_NAME");

                entity.Property(e => e.TermValue).HasColumnName("TERM_VALUE");

                entity.Property(e => e.UomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UOM_ID");
            });

            modelBuilder.Entity<Shipment>(entity =>
            {
                entity.ToTable("SHIPMENT");

                entity.HasIndex(e => e.CreatedTxStamp, "SHIPMENT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHIPMENT_TXSTMP");

                entity.HasIndex(e => e.CurrencyUomId, "SHPMNT_CUOM");

                entity.HasIndex(e => e.DestinationFacilityId, "SHPMNT_DFAC");

                entity.HasIndex(e => e.DestinationContactMechId, "SHPMNT_DPAD");

                entity.HasIndex(e => e.DestinationTelecomNumberId, "SHPMNT_DTCN");

                entity.HasIndex(e => e.EstimatedArrivalWorkEffId, "SHPMNT_EARRWEFF");

                entity.HasIndex(e => e.EstimatedShipWorkEffId, "SHPMNT_ESHWEFF");

                entity.HasIndex(e => e.OriginFacilityId, "SHPMNT_OFAC");

                entity.HasIndex(e => e.OriginContactMechId, "SHPMNT_OPAD");

                entity.HasIndex(e => e.OriginTelecomNumberId, "SHPMNT_OTCN");

                entity.HasIndex(e => e.PicklistBinId, "SHPMNT_PKLSTBIN");

                entity.HasIndex(e => e.PrimaryOrderId, "SHPMNT_PODR");

                entity.HasIndex(e => e.PrimaryReturnId, "SHPMNT_PRTNHDR");

                entity.HasIndex(e => e.PartyIdFrom, "SHPMNT_PRTYFM");

                entity.HasIndex(e => e.PartyIdTo, "SHPMNT_PRTYTO");

                entity.HasIndex(e => e.StatusId, "SHPMNT_STTS");

                entity.HasIndex(e => e.ShipmentTypeId, "SHPMNT_TYPE");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ID");

                entity.Property(e => e.AdditionalShippingCharge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ADDITIONAL_SHIPPING_CHARGE");

                entity.Property(e => e.AddtlShippingChargeDesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ADDTL_SHIPPING_CHARGE_DESC");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM_ID");

                entity.Property(e => e.DestinationContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DESTINATION_CONTACT_MECH_ID");

                entity.Property(e => e.DestinationFacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DESTINATION_FACILITY_ID");

                entity.Property(e => e.DestinationTelecomNumberId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DESTINATION_TELECOM_NUMBER_ID");

                entity.Property(e => e.EstimatedArrivalDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ESTIMATED_ARRIVAL_DATE");

                entity.Property(e => e.EstimatedArrivalWorkEffId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ESTIMATED_ARRIVAL_WORK_EFF_ID");

                entity.Property(e => e.EstimatedReadyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ESTIMATED_READY_DATE");

                entity.Property(e => e.EstimatedShipCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ESTIMATED_SHIP_COST");

                entity.Property(e => e.EstimatedShipDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ESTIMATED_SHIP_DATE");

                entity.Property(e => e.EstimatedShipWorkEffId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ESTIMATED_SHIP_WORK_EFF_ID");

                entity.Property(e => e.HandlingInstructions)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("HANDLING_INSTRUCTIONS");

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LatestCancelDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LATEST_CANCEL_DATE");

                entity.Property(e => e.OriginContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORIGIN_CONTACT_MECH_ID");

                entity.Property(e => e.OriginFacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORIGIN_FACILITY_ID");

                entity.Property(e => e.OriginTelecomNumberId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORIGIN_TELECOM_NUMBER_ID");

                entity.Property(e => e.PartyIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID_FROM");

                entity.Property(e => e.PartyIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID_TO");

                entity.Property(e => e.PicklistBinId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PICKLIST_BIN_ID");

                entity.Property(e => e.PrimaryOrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_ORDER_ID");

                entity.Property(e => e.PrimaryReturnId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_RETURN_ID");

                entity.Property(e => e.PrimaryShipGroupSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_SHIP_GROUP_SEQ_ID");

                entity.Property(e => e.ShipmentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_TYPE_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.HasOne(d => d.CurrencyUom)
                    .WithMany(p => p.Shipments)
                    .HasForeignKey(d => d.CurrencyUomId)
                    .HasConstraintName("SHPMNT_CUOM");

                entity.HasOne(d => d.DestinationContactMech)
                    .WithMany(p => p.ShipmentDestinationContactMeches)
                    .HasForeignKey(d => d.DestinationContactMechId)
                    .HasConstraintName("SHPMNT_DPAD");

                entity.HasOne(d => d.DestinationFacility)
                    .WithMany(p => p.ShipmentDestinationFacilities)
                    .HasForeignKey(d => d.DestinationFacilityId)
                    .HasConstraintName("SHPMNT_DFAC");

                entity.HasOne(d => d.DestinationTelecomNumber)
                    .WithMany(p => p.ShipmentDestinationTelecomNumbers)
                    .HasForeignKey(d => d.DestinationTelecomNumberId)
                    .HasConstraintName("SHPMNT_DTCN");

                entity.HasOne(d => d.EstimatedArrivalWorkEff)
                    .WithMany(p => p.ShipmentEstimatedArrivalWorkEffs)
                    .HasForeignKey(d => d.EstimatedArrivalWorkEffId)
                    .HasConstraintName("SHPMNT_EARRWEFF");

                entity.HasOne(d => d.EstimatedShipWorkEff)
                    .WithMany(p => p.ShipmentEstimatedShipWorkEffs)
                    .HasForeignKey(d => d.EstimatedShipWorkEffId)
                    .HasConstraintName("SHPMNT_ESHWEFF");

                entity.HasOne(d => d.OriginContactMech)
                    .WithMany(p => p.ShipmentOriginContactMeches)
                    .HasForeignKey(d => d.OriginContactMechId)
                    .HasConstraintName("SHPMNT_OPAD");

                entity.HasOne(d => d.OriginFacility)
                    .WithMany(p => p.ShipmentOriginFacilities)
                    .HasForeignKey(d => d.OriginFacilityId)
                    .HasConstraintName("SHPMNT_OFAC");

                entity.HasOne(d => d.OriginTelecomNumber)
                    .WithMany(p => p.ShipmentOriginTelecomNumbers)
                    .HasForeignKey(d => d.OriginTelecomNumberId)
                    .HasConstraintName("SHPMNT_OTCN");

                entity.HasOne(d => d.PartyIdFromNavigation)
                    .WithMany(p => p.ShipmentPartyIdFromNavigations)
                    .HasForeignKey(d => d.PartyIdFrom)
                    .HasConstraintName("SHPMNT_PRTYFM");

                entity.HasOne(d => d.PartyIdToNavigation)
                    .WithMany(p => p.ShipmentPartyIdToNavigations)
                    .HasForeignKey(d => d.PartyIdTo)
                    .HasConstraintName("SHPMNT_PRTYTO");

                entity.HasOne(d => d.PicklistBin)
                    .WithMany(p => p.Shipments)
                    .HasForeignKey(d => d.PicklistBinId)
                    .HasConstraintName("SHPMNT_PKLSTBIN");

                entity.HasOne(d => d.PrimaryOrder)
                    .WithMany(p => p.Shipments)
                    .HasForeignKey(d => d.PrimaryOrderId)
                    .HasConstraintName("SHPMNT_PODR");

                entity.HasOne(d => d.PrimaryReturn)
                    .WithMany(p => p.Shipments)
                    .HasForeignKey(d => d.PrimaryReturnId)
                    .HasConstraintName("SHPMNT_PRTNHDR");

                entity.HasOne(d => d.ShipmentType)
                    .WithMany(p => p.Shipments)
                    .HasForeignKey(d => d.ShipmentTypeId)
                    .HasConstraintName("SHPMNT_TYPE");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Shipments)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("SHPMNT_STTS");
            });

            modelBuilder.Entity<ShipmentAttribute>(entity =>
            {
                entity.HasKey(e => new { e.ShipmentId, e.AttrName });

                entity.ToTable("SHIPMENT_ATTRIBUTE");

                entity.HasIndex(e => e.ShipmentId, "SHPMNT_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPMT_ATTRT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPMT_ATTRT_TXSTMP");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Shipment)
                    .WithMany(p => p.ShipmentAttributes)
                    .HasForeignKey(d => d.ShipmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHPMNT_ATTR");
            });

            modelBuilder.Entity<ShipmentBoxType>(entity =>
            {
                entity.ToTable("SHIPMENT_BOX_TYPE");

                entity.HasIndex(e => e.DimensionUomId, "SHMT_BXTP_DUOM");

                entity.HasIndex(e => e.WeightUomId, "SHMT_BXTP_WUOM");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPMT_BX_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPMT_BX_TP_TXSTMP");

                entity.Property(e => e.ShipmentBoxTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_BOX_TYPE_ID");

                entity.Property(e => e.BoxHeight)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("BOX_HEIGHT");

                entity.Property(e => e.BoxLength)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("BOX_LENGTH");

                entity.Property(e => e.BoxWeight)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("BOX_WEIGHT");

                entity.Property(e => e.BoxWidth)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("BOX_WIDTH");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DimensionUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DIMENSION_UOM_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.WeightUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WEIGHT_UOM_ID");

                entity.HasOne(d => d.DimensionUom)
                    .WithMany(p => p.ShipmentBoxTypeDimensionUoms)
                    .HasForeignKey(d => d.DimensionUomId)
                    .HasConstraintName("SHMT_BXTP_DUOM");

                entity.HasOne(d => d.WeightUom)
                    .WithMany(p => p.ShipmentBoxTypeWeightUoms)
                    .HasForeignKey(d => d.WeightUomId)
                    .HasConstraintName("SHMT_BXTP_WUOM");
            });

            modelBuilder.Entity<ShipmentContactMech>(entity =>
            {
                entity.HasKey(e => new { e.ShipmentId, e.ShipmentContactMechTypeId });

                entity.ToTable("SHIPMENT_CONTACT_MECH");

                entity.HasIndex(e => e.ShipmentId, "SHPMT_CMECH");

                entity.HasIndex(e => e.ContactMechId, "SHPMT_CMECH_CM");

                entity.HasIndex(e => e.ShipmentContactMechTypeId, "SHPMT_CMECH_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPT_CNT_MCH_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPT_CNT_MCH_TXSTP");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ID");

                entity.Property(e => e.ShipmentContactMechTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_CONTACT_MECH_TYPE_ID");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.ShipmentContactMeches)
                    .HasForeignKey(d => d.ContactMechId)
                    .HasConstraintName("SHPMT_CMECH_CM");

                entity.HasOne(d => d.ShipmentContactMechType)
                    .WithMany(p => p.ShipmentContactMeches)
                    .HasForeignKey(d => d.ShipmentContactMechTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHPMT_CMECH_TYPE");

                entity.HasOne(d => d.Shipment)
                    .WithMany(p => p.ShipmentContactMeches)
                    .HasForeignKey(d => d.ShipmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHPMT_CMECH");
            });

            modelBuilder.Entity<ShipmentContactMechType>(entity =>
            {
                entity.ToTable("SHIPMENT_CONTACT_MECH_TYPE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHT_CNT_MCH_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "SHT_CNT_MCH_TP_TXS");

                entity.Property(e => e.ShipmentContactMechTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_CONTACT_MECH_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<ShipmentCostEstimate>(entity =>
            {
                entity.ToTable("SHIPMENT_COST_ESTIMATE");

                entity.HasIndex(e => new { e.ShipmentMethodTypeId, e.CarrierPartyId, e.CarrierRoleTypeId }, "SHPMNT_CE_CSHMTH");

                entity.HasIndex(e => e.GeoIdFrom, "SHPMNT_CE_FGEO");

                entity.HasIndex(e => e.PartyId, "SHPMNT_CE_PARTY");

                entity.HasIndex(e => e.PriceBreakId, "SHPMNT_CE_PRC_QB");

                entity.HasIndex(e => e.PriceUomId, "SHPMNT_CE_PUOM");

                entity.HasIndex(e => e.QuantityBreakId, "SHPMNT_CE_QNT_QB");

                entity.HasIndex(e => e.QuantityUomId, "SHPMNT_CE_QUOM");

                entity.HasIndex(e => e.RoleTypeId, "SHPMNT_CE_ROLET");

                entity.HasIndex(e => e.GeoIdTo, "SHPMNT_CE_TGEO");

                entity.HasIndex(e => e.WeightBreakId, "SHPMNT_CE_WHT_QB");

                entity.HasIndex(e => e.WeightUomId, "SHPMNT_CE_WUOM");

                entity.HasIndex(e => e.ProductStoreShipMethId, "SHPMNT_PS_SH_METH");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPT_CST_EST_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPT_CST_EST_TXSTP");

                entity.Property(e => e.ShipmentCostEstimateId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_COST_ESTIMATE_ID");

                entity.Property(e => e.CarrierPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CARRIER_PARTY_ID");

                entity.Property(e => e.CarrierRoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CARRIER_ROLE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.FeaturePercent)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("FEATURE_PERCENT");

                entity.Property(e => e.FeaturePrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("FEATURE_PRICE");

                entity.Property(e => e.GeoIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_ID_FROM");

                entity.Property(e => e.GeoIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_ID_TO");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OrderFlatPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ORDER_FLAT_PRICE");

                entity.Property(e => e.OrderItemFlatPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ORDER_ITEM_FLAT_PRICE");

                entity.Property(e => e.OrderPricePercent)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ORDER_PRICE_PERCENT");

                entity.Property(e => e.OversizePrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("OVERSIZE_PRICE");

                entity.Property(e => e.OversizeUnit)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("OVERSIZE_UNIT");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.PriceBreakId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRICE_BREAK_ID");

                entity.Property(e => e.PriceUnitPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PRICE_UNIT_PRICE");

                entity.Property(e => e.PriceUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRICE_UOM_ID");

                entity.Property(e => e.ProductFeatureGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_GROUP_ID");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.ProductStoreShipMethId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_SHIP_METH_ID");

                entity.Property(e => e.QuantityBreakId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUANTITY_BREAK_ID");

                entity.Property(e => e.QuantityUnitPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("QUANTITY_UNIT_PRICE");

                entity.Property(e => e.QuantityUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUANTITY_UOM_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.ShipmentMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_METHOD_TYPE_ID");

                entity.Property(e => e.ShippingPricePercent)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("SHIPPING_PRICE_PERCENT");

                entity.Property(e => e.WeightBreakId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WEIGHT_BREAK_ID");

                entity.Property(e => e.WeightUnitPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("WEIGHT_UNIT_PRICE");

                entity.Property(e => e.WeightUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WEIGHT_UOM_ID");

                entity.HasOne(d => d.GeoIdFromNavigation)
                    .WithMany(p => p.ShipmentCostEstimateGeoIdFromNavigations)
                    .HasForeignKey(d => d.GeoIdFrom)
                    .HasConstraintName("SHPMNT_CE_FGEO");

                entity.HasOne(d => d.GeoIdToNavigation)
                    .WithMany(p => p.ShipmentCostEstimateGeoIdToNavigations)
                    .HasForeignKey(d => d.GeoIdTo)
                    .HasConstraintName("SHPMNT_CE_TGEO");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.ShipmentCostEstimates)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("SHPMNT_CE_PARTY");

                entity.HasOne(d => d.PriceBreak)
                    .WithMany(p => p.ShipmentCostEstimatePriceBreaks)
                    .HasForeignKey(d => d.PriceBreakId)
                    .HasConstraintName("SHPMNT_CE_PRC_QB");

                entity.HasOne(d => d.PriceUom)
                    .WithMany(p => p.ShipmentCostEstimatePriceUoms)
                    .HasForeignKey(d => d.PriceUomId)
                    .HasConstraintName("SHPMNT_CE_PUOM");

                entity.HasOne(d => d.ProductStoreShipMeth)
                    .WithMany(p => p.ShipmentCostEstimates)
                    .HasForeignKey(d => d.ProductStoreShipMethId)
                    .HasConstraintName("SHPMNT_PS_SH_METH");

                entity.HasOne(d => d.QuantityBreak)
                    .WithMany(p => p.ShipmentCostEstimateQuantityBreaks)
                    .HasForeignKey(d => d.QuantityBreakId)
                    .HasConstraintName("SHPMNT_CE_QNT_QB");

                entity.HasOne(d => d.QuantityUom)
                    .WithMany(p => p.ShipmentCostEstimateQuantityUoms)
                    .HasForeignKey(d => d.QuantityUomId)
                    .HasConstraintName("SHPMNT_CE_QUOM");

                entity.HasOne(d => d.RoleType)
                    .WithMany(p => p.ShipmentCostEstimates)
                    .HasForeignKey(d => d.RoleTypeId)
                    .HasConstraintName("SHPMNT_CE_ROLET");

                entity.HasOne(d => d.WeightBreak)
                    .WithMany(p => p.ShipmentCostEstimateWeightBreaks)
                    .HasForeignKey(d => d.WeightBreakId)
                    .HasConstraintName("SHPMNT_CE_WHT_QB");

                entity.HasOne(d => d.WeightUom)
                    .WithMany(p => p.ShipmentCostEstimateWeightUoms)
                    .HasForeignKey(d => d.WeightUomId)
                    .HasConstraintName("SHPMNT_CE_WUOM");

                entity.HasOne(d => d.CarrierShipmentMethod)
                    .WithMany(p => p.ShipmentCostEstimates)
                    .HasForeignKey(d => new { d.ShipmentMethodTypeId, d.CarrierPartyId, d.CarrierRoleTypeId })
                    .HasConstraintName("SHPMNT_CE_CSHMTH");
            });

            modelBuilder.Entity<ShipmentGatewayConfig>(entity =>
            {
                entity.ToTable("SHIPMENT_GATEWAY_CONFIG");

                entity.HasIndex(e => e.ShipmentGatewayConfTypeId, "SGC_SGCT");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPT_GTW_CNG_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPT_GTW_CNG_TXSTP");

                entity.Property(e => e.ShipmentGatewayConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_GATEWAY_CONFIG_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ShipmentGatewayConfTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_GATEWAY_CONF_TYPE_ID");

                entity.HasOne(d => d.ShipmentGatewayConfType)
                    .WithMany(p => p.ShipmentGatewayConfigs)
                    .HasForeignKey(d => d.ShipmentGatewayConfTypeId)
                    .HasConstraintName("SGC_SGCT");
            });

            modelBuilder.Entity<ShipmentGatewayConfigType>(entity =>
            {
                entity.HasKey(e => e.ShipmentGatewayConfTypeId)
                    .HasName("PK_SHIPMENT_GATEWAY_CONFIG_TYP");

                entity.ToTable("SHIPMENT_GATEWAY_CONFIG_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "SGCT_PAR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHT_GTW_CNG_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "SHT_GTW_CNG_TP_TXS");

                entity.Property(e => e.ShipmentGatewayConfTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_GATEWAY_CONF_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("SGCT_PAR");
            });

            modelBuilder.Entity<ShipmentGatewayDhl>(entity =>
            {
                entity.HasKey(e => e.ShipmentGatewayConfigId);

                entity.ToTable("SHIPMENT_GATEWAY_DHL");

                entity.HasIndex(e => e.ShipmentGatewayConfigId, "SGDHL_SGC");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPT_GTW_DHL_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPT_GTW_DHL_TXSTP");

                entity.Property(e => e.ShipmentGatewayConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_GATEWAY_CONFIG_ID");

                entity.Property(e => e.AccessAccountNbr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACCESS_ACCOUNT_NBR");

                entity.Property(e => e.AccessPassword)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACCESS_PASSWORD");

                entity.Property(e => e.AccessShippingKey)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACCESS_SHIPPING_KEY");

                entity.Property(e => e.AccessUserId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACCESS_USER_ID");

                entity.Property(e => e.ConnectTimeout).HasColumnName("CONNECT_TIMEOUT");

                entity.Property(e => e.ConnectUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CONNECT_URL");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.HeadAction)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("HEAD_ACTION");

                entity.Property(e => e.HeadVersion)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("HEAD_VERSION");

                entity.Property(e => e.LabelImageFormat)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LABEL_IMAGE_FORMAT");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.RateEstimateTemplate)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("RATE_ESTIMATE_TEMPLATE");

                entity.HasOne(d => d.ShipmentGatewayConfig)
                    .WithOne(p => p.ShipmentGatewayDhl)
                    .HasForeignKey<ShipmentGatewayDhl>(d => d.ShipmentGatewayConfigId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SGDHL_SGC");
            });

            modelBuilder.Entity<ShipmentGatewayFedex>(entity =>
            {
                entity.HasKey(e => e.ShipmentGatewayConfigId);

                entity.ToTable("SHIPMENT_GATEWAY_FEDEX");

                entity.HasIndex(e => e.ShipmentGatewayConfigId, "SGFED_SGC");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPT_GTW_FDX_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPT_GTW_FDX_TXSTP");

                entity.Property(e => e.ShipmentGatewayConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_GATEWAY_CONFIG_ID");

                entity.Property(e => e.AccessAccountNbr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACCESS_ACCOUNT_NBR");

                entity.Property(e => e.AccessMeterNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACCESS_METER_NUMBER");

                entity.Property(e => e.AccessUserKey)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACCESS_USER_KEY");

                entity.Property(e => e.AccessUserPwd)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACCESS_USER_PWD");

                entity.Property(e => e.ConnectSoapUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CONNECT_SOAP_URL");

                entity.Property(e => e.ConnectTimeout).HasColumnName("CONNECT_TIMEOUT");

                entity.Property(e => e.ConnectUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CONNECT_URL");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DefaultDropoffType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULT_DROPOFF_TYPE");

                entity.Property(e => e.DefaultPackagingType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULT_PACKAGING_TYPE");

                entity.Property(e => e.LabelImageType)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LABEL_IMAGE_TYPE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.RateEstimateTemplate)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("RATE_ESTIMATE_TEMPLATE");

                entity.Property(e => e.TemplateShipment)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TEMPLATE_SHIPMENT");

                entity.Property(e => e.TemplateSubscription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TEMPLATE_SUBSCRIPTION");

                entity.HasOne(d => d.ShipmentGatewayConfig)
                    .WithOne(p => p.ShipmentGatewayFedex)
                    .HasForeignKey<ShipmentGatewayFedex>(d => d.ShipmentGatewayConfigId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SGFED_SGC");
            });

            modelBuilder.Entity<ShipmentGatewayUp>(entity =>
            {
                entity.HasKey(e => e.ShipmentGatewayConfigId);

                entity.ToTable("SHIPMENT_GATEWAY_UPS");

                entity.HasIndex(e => e.ShipmentGatewayConfigId, "SGUPS_SGC");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPT_GTW_UPS_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPT_GTW_UPS_TXSTP");

                entity.Property(e => e.ShipmentGatewayConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_GATEWAY_CONFIG_ID");

                entity.Property(e => e.AccessLicenseNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACCESS_LICENSE_NUMBER");

                entity.Property(e => e.AccessPassword)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACCESS_PASSWORD");

                entity.Property(e => e.AccessUserId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACCESS_USER_ID");

                entity.Property(e => e.BillShipperAccountNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("BILL_SHIPPER_ACCOUNT_NUMBER");

                entity.Property(e => e.CodAllowCod)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COD_ALLOW_COD");

                entity.Property(e => e.CodFundsCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("COD_FUNDS_CODE");

                entity.Property(e => e.CodSurchargeAmount)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("COD_SURCHARGE_AMOUNT");

                entity.Property(e => e.CodSurchargeApplyToPackage)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("COD_SURCHARGE_APPLY_TO_PACKAGE");

                entity.Property(e => e.CodSurchargeCurrencyUomId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("COD_SURCHARGE_CURRENCY_UOM_ID");

                entity.Property(e => e.ConnectTimeout).HasColumnName("CONNECT_TIMEOUT");

                entity.Property(e => e.ConnectUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CONNECT_URL");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CustomerClassification)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_CLASSIFICATION");

                entity.Property(e => e.DefaultReturnLabelMemo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULT_RETURN_LABEL_MEMO");

                entity.Property(e => e.DefaultReturnLabelSubject)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULT_RETURN_LABEL_SUBJECT");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MaxEstimateWeight)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("MAX_ESTIMATE_WEIGHT");

                entity.Property(e => e.MinEstimateWeight)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("MIN_ESTIMATE_WEIGHT");

                entity.Property(e => e.SaveCertInfo)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SAVE_CERT_INFO");

                entity.Property(e => e.SaveCertPath)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SAVE_CERT_PATH");

                entity.Property(e => e.ShipperNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SHIPPER_NUMBER");

                entity.Property(e => e.ShipperPickupType)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SHIPPER_PICKUP_TYPE");

                entity.HasOne(d => d.ShipmentGatewayConfig)
                    .WithOne(p => p.ShipmentGatewayUp)
                    .HasForeignKey<ShipmentGatewayUp>(d => d.ShipmentGatewayConfigId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SGUPS_SGC");
            });

            modelBuilder.Entity<ShipmentGatewayUsp>(entity =>
            {
                entity.HasKey(e => e.ShipmentGatewayConfigId);

                entity.ToTable("SHIPMENT_GATEWAY_USPS");

                entity.HasIndex(e => e.ShipmentGatewayConfigId, "SGUSPS_SGC");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPT_GTW_USS_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPT_GTW_USS_TXSTP");

                entity.Property(e => e.ShipmentGatewayConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_GATEWAY_CONFIG_ID");

                entity.Property(e => e.AccessPassword)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACCESS_PASSWORD");

                entity.Property(e => e.AccessUserId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACCESS_USER_ID");

                entity.Property(e => e.ConnectTimeout).HasColumnName("CONNECT_TIMEOUT");

                entity.Property(e => e.ConnectUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CONNECT_URL");

                entity.Property(e => e.ConnectUrlLabels)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CONNECT_URL_LABELS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MaxEstimateWeight).HasColumnName("MAX_ESTIMATE_WEIGHT");

                entity.Property(e => e.Test)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TEST");

                entity.HasOne(d => d.ShipmentGatewayConfig)
                    .WithOne(p => p.ShipmentGatewayUsp)
                    .HasForeignKey<ShipmentGatewayUsp>(d => d.ShipmentGatewayConfigId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SGUSPS_SGC");
            });

            modelBuilder.Entity<ShipmentItem>(entity =>
            {
                entity.HasKey(e => new { e.ShipmentId, e.ShipmentItemSeqId });

                entity.ToTable("SHIPMENT_ITEM");

                entity.HasIndex(e => e.ProductId, "SHPMNT_ITM_PROD");

                entity.HasIndex(e => e.ShipmentId, "SHPMNT_ITM_SHPMT");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPMNT_ITM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPMNT_ITM_TXSTMP");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ID");

                entity.Property(e => e.ShipmentItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ITEM_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.ShipmentContentDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_CONTENT_DESCRIPTION");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ShipmentItems)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("SHPMNT_ITM_PROD");

                entity.HasOne(d => d.Shipment)
                    .WithMany(p => p.ShipmentItems)
                    .HasForeignKey(d => d.ShipmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHPMNT_ITM_SHPMT");
            });

            modelBuilder.Entity<ShipmentItemBilling>(entity =>
            {
                entity.HasKey(e => new { e.ShipmentId, e.ShipmentItemSeqId, e.InvoiceId, e.InvoiceItemSeqId });

                entity.ToTable("SHIPMENT_ITEM_BILLING");

                entity.HasIndex(e => new { e.InvoiceId, e.InvoiceItemSeqId }, "SHPMNT_ITBL_INIM");

                entity.HasIndex(e => new { e.ShipmentId, e.ShipmentItemSeqId }, "SHPMNT_ITBL_SPIM");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPT_ITM_BLG_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPT_ITM_BLG_TXSTP");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ID");

                entity.Property(e => e.ShipmentItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ITEM_SEQ_ID");

                entity.Property(e => e.InvoiceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ID");

                entity.Property(e => e.InvoiceItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ITEM_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.InvoiceI)
                    .WithMany(p => p.ShipmentItemBillings)
                    .HasForeignKey(d => new { d.InvoiceId, d.InvoiceItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHPMNT_ITBL_INIM");

                entity.HasOne(d => d.ShipmentI)
                    .WithMany(p => p.ShipmentItemBillings)
                    .HasForeignKey(d => new { d.ShipmentId, d.ShipmentItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHPMNT_ITBL_SPIM");
            });

            modelBuilder.Entity<ShipmentItemFeature>(entity =>
            {
                entity.HasKey(e => new { e.ShipmentId, e.ShipmentItemSeqId, e.ProductFeatureId });

                entity.ToTable("SHIPMENT_ITEM_FEATURE");

                entity.HasIndex(e => e.ProductFeatureId, "SHPMNT_ITFT_FEAT");

                entity.HasIndex(e => new { e.ShipmentId, e.ShipmentItemSeqId }, "SHPMNT_ITFT_SPIM");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPT_ITM_FTR_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPT_ITM_FTR_TXSTP");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ID");

                entity.Property(e => e.ShipmentItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ITEM_SEQ_ID");

                entity.Property(e => e.ProductFeatureId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ProductFeature)
                    .WithMany(p => p.ShipmentItemFeatures)
                    .HasForeignKey(d => d.ProductFeatureId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHPMNT_ITFT_FEAT");

                entity.HasOne(d => d.ShipmentI)
                    .WithMany(p => p.ShipmentItemFeatures)
                    .HasForeignKey(d => new { d.ShipmentId, d.ShipmentItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHPMNT_ITFT_SPIM");
            });

            modelBuilder.Entity<ShipmentMethodType>(entity =>
            {
                entity.ToTable("SHIPMENT_METHOD_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPMT_MTD_TP_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPMT_MTD_TP_TXSTP");

                entity.Property(e => e.ShipmentMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_METHOD_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");
            });

            modelBuilder.Entity<ShipmentPackage>(entity =>
            {
                entity.HasKey(e => new { e.ShipmentId, e.ShipmentPackageSeqId });

                entity.ToTable("SHIPMENT_PACKAGE");

                entity.HasIndex(e => e.ShipmentBoxTypeId, "SHPKG_BXTYP");

                entity.HasIndex(e => e.DimensionUomId, "SHPKG_DUOM");

                entity.HasIndex(e => e.ShipmentId, "SHPKG_SHPMNT");

                entity.HasIndex(e => e.WeightUomId, "SHPKG_WUOM");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPMNT_PCKG_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPMNT_PCKG_TXSTMP");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ID");

                entity.Property(e => e.ShipmentPackageSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_PACKAGE_SEQ_ID");

                entity.Property(e => e.BoxHeight)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("BOX_HEIGHT");

                entity.Property(e => e.BoxLength)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("BOX_LENGTH");

                entity.Property(e => e.BoxWidth)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("BOX_WIDTH");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_CREATED");

                entity.Property(e => e.DimensionUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DIMENSION_UOM_ID");

                entity.Property(e => e.InsuredValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("INSURED_VALUE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ShipmentBoxTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_BOX_TYPE_ID");

                entity.Property(e => e.Weight)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("WEIGHT");

                entity.Property(e => e.WeightUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WEIGHT_UOM_ID");

                entity.HasOne(d => d.DimensionUom)
                    .WithMany(p => p.ShipmentPackageDimensionUoms)
                    .HasForeignKey(d => d.DimensionUomId)
                    .HasConstraintName("SHPKG_DUOM");

                entity.HasOne(d => d.ShipmentBoxType)
                    .WithMany(p => p.ShipmentPackages)
                    .HasForeignKey(d => d.ShipmentBoxTypeId)
                    .HasConstraintName("SHPKG_BXTYP");

                entity.HasOne(d => d.Shipment)
                    .WithMany(p => p.ShipmentPackages)
                    .HasForeignKey(d => d.ShipmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHPKG_SHPMNT");

                entity.HasOne(d => d.WeightUom)
                    .WithMany(p => p.ShipmentPackageWeightUoms)
                    .HasForeignKey(d => d.WeightUomId)
                    .HasConstraintName("SHPKG_WUOM");
            });

            modelBuilder.Entity<ShipmentPackageContent>(entity =>
            {
                entity.HasKey(e => new { e.ShipmentId, e.ShipmentPackageSeqId, e.ShipmentItemSeqId });

                entity.ToTable("SHIPMENT_PACKAGE_CONTENT");

                entity.HasIndex(e => e.SubProductId, "PCK_CNTNT_PROD");

                entity.HasIndex(e => new { e.ShipmentId, e.ShipmentItemSeqId }, "PCK_CNTNT_SHITM");

                entity.HasIndex(e => new { e.ShipmentId, e.ShipmentPackageSeqId }, "PCK_CNTNT_SHPKG");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPT_PCG_CNT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPT_PCG_CNT_TXSTP");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ID");

                entity.Property(e => e.ShipmentPackageSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_PACKAGE_SEQ_ID");

                entity.Property(e => e.ShipmentItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ITEM_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.SubProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SUB_PRODUCT_ID");

                entity.Property(e => e.SubProductQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("SUB_PRODUCT_QUANTITY");

                entity.HasOne(d => d.SubProduct)
                    .WithMany(p => p.ShipmentPackageContents)
                    .HasForeignKey(d => d.SubProductId)
                    .HasConstraintName("PCK_CNTNT_PROD");

                entity.HasOne(d => d.ShipmentI)
                    .WithMany(p => p.ShipmentPackageContents)
                    .HasForeignKey(d => new { d.ShipmentId, d.ShipmentItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PCK_CNTNT_SHITM");

                entity.HasOne(d => d.Shipment)
                    .WithMany(p => p.ShipmentPackageContents)
                    .HasForeignKey(d => new { d.ShipmentId, d.ShipmentPackageSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PCK_CNTNT_SHPKG");
            });

            modelBuilder.Entity<ShipmentPackageRouteSeg>(entity =>
            {
                entity.HasKey(e => new { e.ShipmentId, e.ShipmentPackageSeqId, e.ShipmentRouteSegmentId });

                entity.ToTable("SHIPMENT_PACKAGE_ROUTE_SEG");

                entity.HasIndex(e => e.CurrencyUomId, "SHPKRTSG_CUOM");

                entity.HasIndex(e => new { e.ShipmentId, e.ShipmentRouteSegmentId }, "SHPKRTSG_RTSG");

                entity.HasIndex(e => new { e.ShipmentId, e.ShipmentPackageSeqId }, "SHPKRTSG_SHPKG");

                entity.HasIndex(e => e.CreatedTxStamp, "SHT_PCG_RT_SG_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHT_PCG_RT_SG_TXSP");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ID");

                entity.Property(e => e.ShipmentPackageSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_PACKAGE_SEQ_ID");

                entity.Property(e => e.ShipmentRouteSegmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ROUTE_SEGMENT_ID");

                entity.Property(e => e.BoxNumber)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("BOX_NUMBER");

                entity.Property(e => e.CodAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("COD_AMOUNT");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM_ID");

                entity.Property(e => e.InsuredAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("INSURED_AMOUNT");

                entity.Property(e => e.InternationalInvoice)
                    .HasColumnType("image")
                    .HasColumnName("INTERNATIONAL_INVOICE");

                entity.Property(e => e.LabelHtml)
                    .HasColumnType("text")
                    .HasColumnName("LABEL_HTML");

                entity.Property(e => e.LabelImage)
                    .HasColumnType("image")
                    .HasColumnName("LABEL_IMAGE");

                entity.Property(e => e.LabelIntlSignImage)
                    .HasColumnType("image")
                    .HasColumnName("LABEL_INTL_SIGN_IMAGE");

                entity.Property(e => e.LabelPrinted)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LABEL_PRINTED")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PackageOtherCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PACKAGE_OTHER_COST");

                entity.Property(e => e.PackageServiceCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PACKAGE_SERVICE_COST");

                entity.Property(e => e.PackageTransportCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PACKAGE_TRANSPORT_COST");

                entity.Property(e => e.TrackingCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TRACKING_CODE");

                entity.HasOne(d => d.CurrencyUom)
                    .WithMany(p => p.ShipmentPackageRouteSegs)
                    .HasForeignKey(d => d.CurrencyUomId)
                    .HasConstraintName("SHPKRTSG_CUOM");

                entity.HasOne(d => d.Shipment)
                    .WithMany(p => p.ShipmentPackageRouteSegs)
                    .HasForeignKey(d => new { d.ShipmentId, d.ShipmentPackageSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHPKRTSG_SHPKG");

                entity.HasOne(d => d.ShipmentNavigation)
                    .WithMany(p => p.ShipmentPackageRouteSegs)
                    .HasForeignKey(d => new { d.ShipmentId, d.ShipmentRouteSegmentId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHPKRTSG_RTSG");
            });

            modelBuilder.Entity<ShipmentReceipt>(entity =>
            {
                entity.HasKey(e => e.ReceiptId);

                entity.ToTable("SHIPMENT_RECEIPT");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPMNT_RCPT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPMNT_RCPT_TXSTMP");

                entity.HasIndex(e => e.InventoryItemId, "SHP_RCPT_INVITM");

                entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId }, "SHP_RCPT_ORDITM");

                entity.HasIndex(e => e.ProductId, "SHP_RCPT_PROD");

                entity.HasIndex(e => e.RejectionId, "SHP_RCPT_REJRSN");

                entity.HasIndex(e => new { e.ReturnId, e.ReturnItemSeqId }, "SHP_RCPT_RETINVITM");

                entity.HasIndex(e => new { e.ShipmentId, e.ShipmentPackageSeqId }, "SHP_RCPT_SHPKG");

                entity.HasIndex(e => e.ReceivedByUserLoginId, "SHP_RCPT_USERLGN");

                entity.Property(e => e.ReceiptId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RECEIPT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DatetimeReceived)
                    .HasColumnType("datetime")
                    .HasColumnName("DATETIME_RECEIVED");

                entity.Property(e => e.InventoryItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_ID");

                entity.Property(e => e.ItemDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.QuantityAccepted)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY_ACCEPTED");

                entity.Property(e => e.QuantityRejected)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY_REJECTED");

                entity.Property(e => e.ReceivedByUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("RECEIVED_BY_USER_LOGIN_ID");

                entity.Property(e => e.RejectionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REJECTION_ID");

                entity.Property(e => e.ReturnId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ID");

                entity.Property(e => e.ReturnItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ITEM_SEQ_ID");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ID");

                entity.Property(e => e.ShipmentItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ITEM_SEQ_ID");

                entity.Property(e => e.ShipmentPackageSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_PACKAGE_SEQ_ID");

                entity.HasOne(d => d.InventoryItem)
                    .WithMany(p => p.ShipmentReceipts)
                    .HasForeignKey(d => d.InventoryItemId)
                    .HasConstraintName("SHP_RCPT_INVITM");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ShipmentReceipts)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("SHP_RCPT_PROD");

                entity.HasOne(d => d.ReceivedByUserLogin)
                    .WithMany(p => p.ShipmentReceipts)
                    .HasForeignKey(d => d.ReceivedByUserLoginId)
                    .HasConstraintName("SHP_RCPT_USERLGN");

                entity.HasOne(d => d.Rejection)
                    .WithMany(p => p.ShipmentReceipts)
                    .HasForeignKey(d => d.RejectionId)
                    .HasConstraintName("SHP_RCPT_REJRSN");

                entity.HasOne(d => d.OrderI)
                    .WithMany(p => p.ShipmentReceipts)
                    .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                    .HasConstraintName("SHP_RCPT_ORDITM");

                entity.HasOne(d => d.ReturnI)
                    .WithMany(p => p.ShipmentReceipts)
                    .HasForeignKey(d => new { d.ReturnId, d.ReturnItemSeqId })
                    .HasConstraintName("SHP_RCPT_RETINVITM");

                entity.HasOne(d => d.Shipment)
                    .WithMany(p => p.ShipmentReceipts)
                    .HasForeignKey(d => new { d.ShipmentId, d.ShipmentPackageSeqId })
                    .HasConstraintName("SHP_RCPT_SHPKG");
            });

            modelBuilder.Entity<ShipmentReceiptRole>(entity =>
            {
                entity.HasKey(e => new { e.ReceiptId, e.PartyId, e.RoleTypeId });

                entity.ToTable("SHIPMENT_RECEIPT_ROLE");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPMT_RCT_RL_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPMT_RCT_RL_TXSTP");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "SHP_RCPTRL_PTRL");

                entity.HasIndex(e => e.PartyId, "SHP_RCPTRL_PTY");

                entity.HasIndex(e => e.ReceiptId, "SHP_RCPTRL_RCPT");

                entity.Property(e => e.ReceiptId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RECEIPT_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.ShipmentReceiptRoles)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHP_RCPTRL_PTY");

                entity.HasOne(d => d.Receipt)
                    .WithMany(p => p.ShipmentReceiptRoles)
                    .HasForeignKey(d => d.ReceiptId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHP_RCPTRL_RCPT");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.ShipmentReceiptRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHP_RCPTRL_PTRL");
            });

            modelBuilder.Entity<ShipmentRouteSegment>(entity =>
            {
                entity.HasKey(e => new { e.ShipmentId, e.ShipmentRouteSegmentId });

                entity.ToTable("SHIPMENT_ROUTE_SEGMENT");

                entity.HasIndex(e => e.BillingWeightUomId, "SHPKRTSG_BWUOM");

                entity.HasIndex(e => e.CarrierServiceStatusId, "SHPKRTSG_CSSTS");

                entity.HasIndex(e => e.CarrierPartyId, "SHPMT_RTSEG_CPTY");

                entity.HasIndex(e => e.CurrencyUomId, "SHPMT_RTSEG_CUOM");

                entity.HasIndex(e => e.DeliveryId, "SHPMT_RTSEG_DEL");

                entity.HasIndex(e => e.DestFacilityId, "SHPMT_RTSEG_DFAC");

                entity.HasIndex(e => e.DestContactMechId, "SHPMT_RTSEG_DPAD");

                entity.HasIndex(e => e.DestTelecomNumberId, "SHPMT_RTSEG_DTCN");

                entity.HasIndex(e => e.OriginFacilityId, "SHPMT_RTSEG_OFAC");

                entity.HasIndex(e => e.OriginContactMechId, "SHPMT_RTSEG_OPAD");

                entity.HasIndex(e => e.OriginTelecomNumberId, "SHPMT_RTSEG_OTCN");

                entity.HasIndex(e => e.ShipmentMethodTypeId, "SHPMT_RTSEG_SHMT");

                entity.HasIndex(e => e.ShipmentId, "SHPMT_RTSEG_SHPMT");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPMT_RT_SGT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPMT_RT_SGT_TXSTP");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ID");

                entity.Property(e => e.ShipmentRouteSegmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ROUTE_SEGMENT_ID");

                entity.Property(e => e.ActualArrivalDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ACTUAL_ARRIVAL_DATE");

                entity.Property(e => e.ActualCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ACTUAL_COST");

                entity.Property(e => e.ActualOtherCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ACTUAL_OTHER_COST");

                entity.Property(e => e.ActualServiceCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ACTUAL_SERVICE_COST");

                entity.Property(e => e.ActualStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ACTUAL_START_DATE");

                entity.Property(e => e.ActualTransportCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ACTUAL_TRANSPORT_COST");

                entity.Property(e => e.BillingWeight)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("BILLING_WEIGHT");

                entity.Property(e => e.BillingWeightUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_WEIGHT_UOM_ID");

                entity.Property(e => e.CarrierDeliveryZone)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CARRIER_DELIVERY_ZONE");

                entity.Property(e => e.CarrierPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CARRIER_PARTY_ID");

                entity.Property(e => e.CarrierRestrictionCodes)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CARRIER_RESTRICTION_CODES");

                entity.Property(e => e.CarrierRestrictionDesc)
                    .HasColumnType("text")
                    .HasColumnName("CARRIER_RESTRICTION_DESC");

                entity.Property(e => e.CarrierServiceStatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CARRIER_SERVICE_STATUS_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM_ID");

                entity.Property(e => e.DeliveryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERY_ID");

                entity.Property(e => e.DestContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEST_CONTACT_MECH_ID");

                entity.Property(e => e.DestFacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEST_FACILITY_ID");

                entity.Property(e => e.DestTelecomNumberId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DEST_TELECOM_NUMBER_ID");

                entity.Property(e => e.EstimatedArrivalDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ESTIMATED_ARRIVAL_DATE");

                entity.Property(e => e.EstimatedStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ESTIMATED_START_DATE");

                entity.Property(e => e.HomeDeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("HOME_DELIVERY_DATE");

                entity.Property(e => e.HomeDeliveryType)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("HOME_DELIVERY_TYPE");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OriginContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORIGIN_CONTACT_MECH_ID");

                entity.Property(e => e.OriginFacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORIGIN_FACILITY_ID");

                entity.Property(e => e.OriginTelecomNumberId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORIGIN_TELECOM_NUMBER_ID");

                entity.Property(e => e.ShipmentMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_METHOD_TYPE_ID");

                entity.Property(e => e.ThirdPartyAccountNumber)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("THIRD_PARTY_ACCOUNT_NUMBER");

                entity.Property(e => e.ThirdPartyCountryGeoCode)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("THIRD_PARTY_COUNTRY_GEO_CODE");

                entity.Property(e => e.ThirdPartyPostalCode)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("THIRD_PARTY_POSTAL_CODE");

                entity.Property(e => e.TrackingDigest)
                    .HasColumnType("text")
                    .HasColumnName("TRACKING_DIGEST");

                entity.Property(e => e.TrackingIdNumber)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TRACKING_ID_NUMBER");

                entity.Property(e => e.UpdatedByUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("UPDATED_BY_USER_LOGIN_ID");

                entity.Property(e => e.UpsHighValueReport)
                    .HasColumnType("image")
                    .HasColumnName("UPS_HIGH_VALUE_REPORT");

                entity.HasOne(d => d.BillingWeightUom)
                    .WithMany(p => p.ShipmentRouteSegmentBillingWeightUoms)
                    .HasForeignKey(d => d.BillingWeightUomId)
                    .HasConstraintName("SHPKRTSG_BWUOM");

                entity.HasOne(d => d.CarrierParty)
                    .WithMany(p => p.ShipmentRouteSegments)
                    .HasForeignKey(d => d.CarrierPartyId)
                    .HasConstraintName("SHPMT_RTSEG_CPTY");

                entity.HasOne(d => d.CarrierServiceStatus)
                    .WithMany(p => p.ShipmentRouteSegments)
                    .HasForeignKey(d => d.CarrierServiceStatusId)
                    .HasConstraintName("SHPKRTSG_CSSTS");

                entity.HasOne(d => d.CurrencyUom)
                    .WithMany(p => p.ShipmentRouteSegmentCurrencyUoms)
                    .HasForeignKey(d => d.CurrencyUomId)
                    .HasConstraintName("SHPMT_RTSEG_CUOM");

                entity.HasOne(d => d.Delivery)
                    .WithMany(p => p.ShipmentRouteSegments)
                    .HasForeignKey(d => d.DeliveryId)
                    .HasConstraintName("SHPMT_RTSEG_DEL");

                entity.HasOne(d => d.DestContactMech)
                    .WithMany(p => p.ShipmentRouteSegmentDestContactMeches)
                    .HasForeignKey(d => d.DestContactMechId)
                    .HasConstraintName("SHPMT_RTSEG_DPAD");

                entity.HasOne(d => d.DestFacility)
                    .WithMany(p => p.ShipmentRouteSegmentDestFacilities)
                    .HasForeignKey(d => d.DestFacilityId)
                    .HasConstraintName("SHPMT_RTSEG_DFAC");

                entity.HasOne(d => d.DestTelecomNumber)
                    .WithMany(p => p.ShipmentRouteSegmentDestTelecomNumbers)
                    .HasForeignKey(d => d.DestTelecomNumberId)
                    .HasConstraintName("SHPMT_RTSEG_DTCN");

                entity.HasOne(d => d.OriginContactMech)
                    .WithMany(p => p.ShipmentRouteSegmentOriginContactMeches)
                    .HasForeignKey(d => d.OriginContactMechId)
                    .HasConstraintName("SHPMT_RTSEG_OPAD");

                entity.HasOne(d => d.OriginFacility)
                    .WithMany(p => p.ShipmentRouteSegmentOriginFacilities)
                    .HasForeignKey(d => d.OriginFacilityId)
                    .HasConstraintName("SHPMT_RTSEG_OFAC");

                entity.HasOne(d => d.OriginTelecomNumber)
                    .WithMany(p => p.ShipmentRouteSegmentOriginTelecomNumbers)
                    .HasForeignKey(d => d.OriginTelecomNumberId)
                    .HasConstraintName("SHPMT_RTSEG_OTCN");

                entity.HasOne(d => d.Shipment)
                    .WithMany(p => p.ShipmentRouteSegments)
                    .HasForeignKey(d => d.ShipmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHPMT_RTSEG_SHPMT");

                entity.HasOne(d => d.ShipmentMethodType)
                    .WithMany(p => p.ShipmentRouteSegments)
                    .HasForeignKey(d => d.ShipmentMethodTypeId)
                    .HasConstraintName("SHPMT_RTSEG_SHMT");
            });

            modelBuilder.Entity<ShipmentStatus>(entity =>
            {
                entity.HasKey(e => new { e.StatusId, e.ShipmentId });

                entity.ToTable("SHIPMENT_STATUS");

                entity.HasIndex(e => e.ShipmentId, "SHPMNT_STTS_SHMT");

                entity.HasIndex(e => e.StatusId, "SHPMNT_STTS_STTS");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPMNT_STTS_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPMNT_STTS_TXSTMP");

                entity.HasIndex(e => e.ChangeByUserLoginId, "SHPMNT_STTS_USRLGN");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ID");

                entity.Property(e => e.ChangeByUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.StatusDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STATUS_DATE");

                entity.HasOne(d => d.ChangeByUserLogin)
                    .WithMany(p => p.ShipmentStatuses)
                    .HasForeignKey(d => d.ChangeByUserLoginId)
                    .HasConstraintName("SHPMNT_STTS_USRLGN");

                entity.HasOne(d => d.Shipment)
                    .WithMany(p => p.ShipmentStatuses)
                    .HasForeignKey(d => d.ShipmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHPMNT_STTS_SHMT");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ShipmentStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHPMNT_STTS_STTS");
            });

            modelBuilder.Entity<ShipmentTimeEstimate>(entity =>
            {
                entity.HasKey(e => new { e.ShipmentMethodTypeId, e.PartyId, e.RoleTypeId, e.GeoIdTo, e.GeoIdFrom, e.FromDate });

                entity.ToTable("SHIPMENT_TIME_ESTIMATE");

                entity.HasIndex(e => e.GeoIdFrom, "SHIPT_EST_GEO_FROM");

                entity.HasIndex(e => e.GeoIdTo, "SHIPT_EST_GEO_TO");

                entity.HasIndex(e => new { e.ShipmentMethodTypeId, e.PartyId, e.RoleTypeId }, "SHIPT_EST_METHOD");

                entity.HasIndex(e => e.LeadTimeUomId, "SHIPT_EST_UOM");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPMT_TM_EST_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPMT_TM_EST_TXSTP");

                entity.Property(e => e.ShipmentMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_METHOD_TYPE_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.GeoIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_ID_TO");

                entity.Property(e => e.GeoIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_ID_FROM");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LeadTime)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("LEAD_TIME");

                entity.Property(e => e.LeadTimeUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("LEAD_TIME_UOM_ID");

                entity.Property(e => e.SequenceNumber).HasColumnName("SEQUENCE_NUMBER");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.GeoIdFromNavigation)
                    .WithMany(p => p.ShipmentTimeEstimateGeoIdFromNavigations)
                    .HasForeignKey(d => d.GeoIdFrom)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHIPT_EST_GEO_FROM");

                entity.HasOne(d => d.GeoIdToNavigation)
                    .WithMany(p => p.ShipmentTimeEstimateGeoIdToNavigations)
                    .HasForeignKey(d => d.GeoIdTo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHIPT_EST_GEO_TO");

                entity.HasOne(d => d.LeadTimeUom)
                    .WithMany(p => p.ShipmentTimeEstimates)
                    .HasForeignKey(d => d.LeadTimeUomId)
                    .HasConstraintName("SHIPT_EST_UOM");

                entity.HasOne(d => d.CarrierShipmentMethod)
                    .WithMany(p => p.ShipmentTimeEstimates)
                    .HasForeignKey(d => new { d.ShipmentMethodTypeId, d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHIPT_EST_METHOD");
            });

            modelBuilder.Entity<ShipmentType>(entity =>
            {
                entity.ToTable("SHIPMENT_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPMNT_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPMNT_TP_TXSTMP");

                entity.HasIndex(e => e.ParentTypeId, "SHPMNT_TYPPAR");

                entity.Property(e => e.ShipmentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("SHPMNT_TYPPAR");
            });

            modelBuilder.Entity<ShipmentTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.ShipmentTypeId, e.AttrName });

                entity.ToTable("SHIPMENT_TYPE_ATTR");

                entity.HasIndex(e => e.ShipmentTypeId, "SHPMNT_TYPATR");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPMT_TP_ATR_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPMT_TP_ATR_TXSTP");

                entity.Property(e => e.ShipmentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ShipmentType)
                    .WithMany(p => p.ShipmentTypeAttrs)
                    .HasForeignKey(d => d.ShipmentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHPMNT_TYPATR");
            });

            modelBuilder.Entity<ShippingDocument>(entity =>
            {
                entity.HasKey(e => e.DocumentId);

                entity.ToTable("SHIPPING_DOCUMENT");

                entity.HasIndex(e => e.DocumentId, "SHPNG_DOC_DOC");

                entity.HasIndex(e => new { e.ShipmentId, e.ShipmentPackageSeqId }, "SHPNG_DOC_SHPKG");

                entity.HasIndex(e => new { e.ShipmentId, e.ShipmentItemSeqId }, "SHPNG_DOC_SMITM");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPPNG_DCMT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPPNG_DCMT_TXSTMP");

                entity.Property(e => e.DocumentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ID");

                entity.Property(e => e.ShipmentItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_ITEM_SEQ_ID");

                entity.Property(e => e.ShipmentPackageSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_PACKAGE_SEQ_ID");

                entity.HasOne(d => d.Document)
                    .WithOne(p => p.ShippingDocument)
                    .HasForeignKey<ShippingDocument>(d => d.DocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHPNG_DOC_DOC");

                entity.HasOne(d => d.ShipmentI)
                    .WithMany(p => p.ShippingDocuments)
                    .HasForeignKey(d => new { d.ShipmentId, d.ShipmentItemSeqId })
                    .HasConstraintName("SHPNG_DOC_SMITM");

                entity.HasOne(d => d.Shipment)
                    .WithMany(p => p.ShippingDocuments)
                    .HasForeignKey(d => new { d.ShipmentId, d.ShipmentPackageSeqId })
                    .HasConstraintName("SHPNG_DOC_SHPKG");
            });

            modelBuilder.Entity<ShoppingList>(entity =>
            {
                entity.ToTable("SHOPPING_LIST");

                entity.HasIndex(e => e.ContactMechId, "SHLIST_CMECH");

                entity.HasIndex(e => new { e.ShipmentMethodTypeId, e.CarrierPartyId, e.CarrierRoleTypeId }, "SHLIST_CSSM");

                entity.HasIndex(e => e.ParentShoppingListId, "SHLIST_PARENT");

                entity.HasIndex(e => e.ProductStoreId, "SHLIST_PRDS");

                entity.HasIndex(e => e.ProductPromoCodeId, "SHLIST_PRMCD");

                entity.HasIndex(e => e.PartyId, "SHLIST_PTY");

                entity.HasIndex(e => e.PaymentMethodId, "SHLIST_PYMETH");

                entity.HasIndex(e => e.RecurrenceInfoId, "SHLIST_RECINFO");

                entity.HasIndex(e => e.ShoppingListTypeId, "SHLIST_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPPNG_LST_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPPNG_LST_TXSTMP");

                entity.Property(e => e.ShoppingListId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHOPPING_LIST_ID");

                entity.Property(e => e.CarrierPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CARRIER_PARTY_ID");

                entity.Property(e => e.CarrierRoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CARRIER_ROLE_TYPE_ID");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrencyUom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_ACTIVE")
                    .IsFixedLength();

                entity.Property(e => e.IsPublic)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_PUBLIC")
                    .IsFixedLength();

                entity.Property(e => e.LastAdminModified)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_ADMIN_MODIFIED");

                entity.Property(e => e.LastOrderedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_ORDERED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ListName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LIST_NAME");

                entity.Property(e => e.ParentShoppingListId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_SHOPPING_LIST_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.PaymentMethodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_METHOD_ID");

                entity.Property(e => e.ProductPromoCodeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_PROMO_CODE_ID");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.RecurrenceInfoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RECURRENCE_INFO_ID");

                entity.Property(e => e.ShipmentMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMENT_METHOD_TYPE_ID");

                entity.Property(e => e.ShoppingListTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHOPPING_LIST_TYPE_ID");

                entity.Property(e => e.VisitorId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VISITOR_ID");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.ShoppingLists)
                    .HasForeignKey(d => d.ContactMechId)
                    .HasConstraintName("SHLIST_CMECH");

                entity.HasOne(d => d.ParentShoppingList)
                    .WithMany(p => p.InverseParentShoppingList)
                    .HasForeignKey(d => d.ParentShoppingListId)
                    .HasConstraintName("SHLIST_PARENT");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.ShoppingLists)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("SHLIST_PTY");

                entity.HasOne(d => d.PaymentMethod)
                    .WithMany(p => p.ShoppingLists)
                    .HasForeignKey(d => d.PaymentMethodId)
                    .HasConstraintName("SHLIST_PYMETH");

                entity.HasOne(d => d.ProductPromoCode)
                    .WithMany(p => p.ShoppingLists)
                    .HasForeignKey(d => d.ProductPromoCodeId)
                    .HasConstraintName("SHLIST_PRMCD");

                entity.HasOne(d => d.ProductStore)
                    .WithMany(p => p.ShoppingLists)
                    .HasForeignKey(d => d.ProductStoreId)
                    .HasConstraintName("SHLIST_PRDS");

                entity.HasOne(d => d.RecurrenceInfo)
                    .WithMany(p => p.ShoppingLists)
                    .HasForeignKey(d => d.RecurrenceInfoId)
                    .HasConstraintName("SHLIST_RECINFO");

                entity.HasOne(d => d.ShoppingListType)
                    .WithMany(p => p.ShoppingLists)
                    .HasForeignKey(d => d.ShoppingListTypeId)
                    .HasConstraintName("SHLIST_TYPE");

                entity.HasOne(d => d.CarrierShipmentMethod)
                    .WithMany(p => p.ShoppingLists)
                    .HasForeignKey(d => new { d.ShipmentMethodTypeId, d.CarrierPartyId, d.CarrierRoleTypeId })
                    .HasConstraintName("SHLIST_CSSM");
            });

            modelBuilder.Entity<ShoppingListItem>(entity =>
            {
                entity.HasKey(e => new { e.ShoppingListId, e.ShoppingListItemSeqId });

                entity.ToTable("SHOPPING_LIST_ITEM");

                entity.HasIndex(e => e.ShoppingListId, "SHLIST_ITEM_LIST");

                entity.HasIndex(e => e.ProductId, "SHLIST_ITEM_PROD");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPG_LST_ITM_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPG_LST_ITM_TXSTP");

                entity.Property(e => e.ShoppingListId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHOPPING_LIST_ID");

                entity.Property(e => e.ShoppingListItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHOPPING_LIST_ITEM_SEQ_ID");

                entity.Property(e => e.ConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONFIG_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ModifiedPrice)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("MODIFIED_PRICE");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.QuantityPurchased)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY_PURCHASED");

                entity.Property(e => e.ReservLength)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("RESERV_LENGTH");

                entity.Property(e => e.ReservPersons)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("RESERV_PERSONS");

                entity.Property(e => e.ReservStart)
                    .HasColumnType("datetime")
                    .HasColumnName("RESERV_START");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ShoppingListItems)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("SHLIST_ITEM_PROD");

                entity.HasOne(d => d.ShoppingList)
                    .WithMany(p => p.ShoppingListItems)
                    .HasForeignKey(d => d.ShoppingListId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHLIST_ITEM_LIST");
            });

            modelBuilder.Entity<ShoppingListItemSurvey>(entity =>
            {
                entity.HasKey(e => new { e.ShoppingListId, e.ShoppingListItemSeqId, e.SurveyResponseId });

                entity.ToTable("SHOPPING_LIST_ITEM_SURVEY");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHG_LST_ITM_SRV_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "SHG_LST_ITM_SRV_TS");

                entity.HasIndex(e => new { e.ShoppingListId, e.ShoppingListItemSeqId }, "SHLIST_ITSUR_ITEM");

                entity.HasIndex(e => e.ShoppingListId, "SHLIST_ITSUR_LIST");

                entity.HasIndex(e => e.SurveyResponseId, "SHLIST_ITSUR_RESP");

                entity.Property(e => e.ShoppingListId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHOPPING_LIST_ID");

                entity.Property(e => e.ShoppingListItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHOPPING_LIST_ITEM_SEQ_ID");

                entity.Property(e => e.SurveyResponseId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_RESPONSE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ShoppingList)
                    .WithMany(p => p.ShoppingListItemSurveys)
                    .HasForeignKey(d => d.ShoppingListId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHLIST_ITSUR_LIST");

                entity.HasOne(d => d.SurveyResponse)
                    .WithMany(p => p.ShoppingListItemSurveys)
                    .HasForeignKey(d => d.SurveyResponseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHLIST_ITSUR_RESP");

                entity.HasOne(d => d.ShoppingListI)
                    .WithMany(p => p.ShoppingListItemSurveys)
                    .HasForeignKey(d => new { d.ShoppingListId, d.ShoppingListItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHLIST_ITSUR_ITEM");
            });

            modelBuilder.Entity<ShoppingListType>(entity =>
            {
                entity.ToTable("SHOPPING_LIST_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "SHPPG_LST_TP_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHPPG_LST_TP_TXSTP");

                entity.Property(e => e.ShoppingListTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHOPPING_LIST_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<ShoppingListWorkEffort>(entity =>
            {
                entity.HasKey(e => new { e.ShoppingListId, e.WorkEffortId });

                entity.ToTable("SHOPPING_LIST_WORK_EFFORT");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SHG_LST_WRK_EFT_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "SHG_LST_WRK_EFT_TS");

                entity.HasIndex(e => e.ShoppingListId, "SHLISTWE_SHLST");

                entity.HasIndex(e => e.WorkEffortId, "SHLISTWE_WEFF");

                entity.Property(e => e.ShoppingListId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHOPPING_LIST_ID");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ShoppingList)
                    .WithMany(p => p.ShoppingListWorkEfforts)
                    .HasForeignKey(d => d.ShoppingListId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHLISTWE_SHLST");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.ShoppingListWorkEfforts)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SHLISTWE_WEFF");
            });

            modelBuilder.Entity<SkillType>(entity =>
            {
                entity.ToTable("SKILL_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "PARNT_SKILL_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "SKILL_TYPE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SKILL_TYPE_TXSTMP");

                entity.Property(e => e.SkillTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SKILL_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("PARNT_SKILL_TYPE");
            });

            modelBuilder.Entity<StandardLanguage>(entity =>
            {
                entity.ToTable("STANDARD_LANGUAGE");

                entity.HasIndex(e => e.CreatedTxStamp, "STNDRD_LNGG_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "STNDRD_LNGG_TXSTMP");

                entity.Property(e => e.StandardLanguageId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STANDARD_LANGUAGE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LangCharset)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LANG_CHARSET");

                entity.Property(e => e.LangCode2)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LANG_CODE2");

                entity.Property(e => e.LangCode3b)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LANG_CODE3B");

                entity.Property(e => e.LangCode3t)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LANG_CODE3T");

                entity.Property(e => e.LangFamily)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LANG_FAMILY");

                entity.Property(e => e.LangName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LANG_NAME");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<StatusItem>(entity =>
            {
                entity.HasKey(e => e.StatusId);

                entity.ToTable("STATUS_ITEM");

                entity.HasIndex(e => e.CreatedTxStamp, "STATUS_ITEM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "STATUS_ITEM_TXSTMP");

                entity.HasIndex(e => e.StatusTypeId, "STATUS_TO_TYPE");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SEQUENCE_ID");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_CODE");

                entity.Property(e => e.StatusTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_TYPE_ID");

                entity.HasOne(d => d.StatusType)
                    .WithMany(p => p.StatusItems)
                    .HasForeignKey(d => d.StatusTypeId)
                    .HasConstraintName("STATUS_TO_TYPE");
            });

            modelBuilder.Entity<StatusType>(entity =>
            {
                entity.ToTable("STATUS_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "STATUS_TYPE_PARENT");

                entity.HasIndex(e => e.CreatedTxStamp, "STATUS_TYPE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "STATUS_TYPE_TXSTMP");

                entity.Property(e => e.StatusTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("STATUS_TYPE_PARENT");
            });

            modelBuilder.Entity<StatusValidChange>(entity =>
            {
                entity.HasKey(e => new { e.StatusId, e.StatusIdTo });

                entity.ToTable("STATUS_VALID_CHANGE");

                entity.HasIndex(e => e.StatusId, "STATUS_CHG_MAIN");

                entity.HasIndex(e => e.StatusIdTo, "STATUS_CHG_TO");

                entity.HasIndex(e => e.CreatedTxStamp, "STS_VLD_CHG_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "STS_VLD_CHG_TXSTMP");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.StatusIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID_TO");

                entity.Property(e => e.ConditionExpression)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CONDITION_EXPRESSION");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.TransitionName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSITION_NAME");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.StatusValidChangeStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("STATUS_CHG_MAIN");

                entity.HasOne(d => d.StatusIdToNavigation)
                    .WithMany(p => p.StatusValidChangeStatusIdToNavigations)
                    .HasForeignKey(d => d.StatusIdTo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("STATUS_CHG_TO");
            });

            modelBuilder.Entity<Subscription>(entity =>
            {
                entity.ToTable("SUBSCRIPTION");

                entity.HasIndex(e => e.CreatedTxStamp, "SBSCRPTN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SBSCRPTN_TXSTMP");

                entity.HasIndex(e => e.AvailableTimeUomId, "SUBSC_ATU");

                entity.HasIndex(e => e.ContactMechId, "SUBSC_CONT_MECH");

                entity.HasIndex(e => e.CanclAutmExtTimeUomId, "SUBSC_CTU");

                entity.HasIndex(e => e.GracePeriodOnExpiryUomId, "SUBSC_GTU");

                entity.HasIndex(e => e.InventoryItemId, "SUBSC_INV_ITM");

                entity.HasIndex(e => e.MaxLifeTimeUomId, "SUBSC_MTU");

                entity.HasIndex(e => e.NeedTypeId, "SUBSC_NEED_TYPE");

                entity.HasIndex(e => e.OriginatedFromPartyId, "SUBSC_OPARTY");

                entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId }, "SUBSC_ORDERITM");

                entity.HasIndex(e => e.OriginatedFromRoleTypeId, "SUBSC_OROLE_TYPE");

                entity.HasIndex(e => e.PartyId, "SUBSC_PARTY");

                entity.HasIndex(e => e.ProductId, "SUBSC_PRODUCT");

                entity.HasIndex(e => e.ProductCategoryId, "SUBSC_PROD_CAT");

                entity.HasIndex(e => e.RoleTypeId, "SUBSC_ROLE_TYPE");

                entity.HasIndex(e => e.SubscriptionResourceId, "SUBSC_SRESRC");

                entity.HasIndex(e => e.SubscriptionTypeId, "SUBSC_TO_TYPE");

                entity.HasIndex(e => e.UseTimeUomId, "SUBSC_UTU");

                entity.Property(e => e.SubscriptionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SUBSCRIPTION_ID");

                entity.Property(e => e.AutomaticExtend)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AUTOMATIC_EXTEND")
                    .IsFixedLength();

                entity.Property(e => e.AvailableTime).HasColumnName("AVAILABLE_TIME");

                entity.Property(e => e.AvailableTimeUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AVAILABLE_TIME_UOM_ID");

                entity.Property(e => e.CanclAutmExtTime).HasColumnName("CANCL_AUTM_EXT_TIME");

                entity.Property(e => e.CanclAutmExtTimeUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CANCL_AUTM_EXT_TIME_UOM_ID");

                entity.Property(e => e.CommunicationEventId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COMMUNICATION_EVENT_ID");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.ExpirationCompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRATION_COMPLETED_DATE");

                entity.Property(e => e.ExternalSubscriptionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EXTERNAL_SUBSCRIPTION_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.GracePeriodOnExpiry).HasColumnName("GRACE_PERIOD_ON_EXPIRY");

                entity.Property(e => e.GracePeriodOnExpiryUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GRACE_PERIOD_ON_EXPIRY_UOM_ID");

                entity.Property(e => e.InventoryItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MaxLifeTime).HasColumnName("MAX_LIFE_TIME");

                entity.Property(e => e.MaxLifeTimeUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MAX_LIFE_TIME_UOM_ID");

                entity.Property(e => e.NeedTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("NEED_TYPE_ID");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.OriginatedFromPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORIGINATED_FROM_PARTY_ID");

                entity.Property(e => e.OriginatedFromRoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORIGINATED_FROM_ROLE_TYPE_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.PartyNeedId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_NEED_ID");

                entity.Property(e => e.ProductCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CATEGORY_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.PurchaseFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PURCHASE_FROM_DATE");

                entity.Property(e => e.PurchaseThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PURCHASE_THRU_DATE");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.SubscriptionResourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SUBSCRIPTION_RESOURCE_ID");

                entity.Property(e => e.SubscriptionTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SUBSCRIPTION_TYPE_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.Property(e => e.UseCountLimit).HasColumnName("USE_COUNT_LIMIT");

                entity.Property(e => e.UseTime).HasColumnName("USE_TIME");

                entity.Property(e => e.UseTimeUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("USE_TIME_UOM_ID");

                entity.HasOne(d => d.AvailableTimeUom)
                    .WithMany(p => p.SubscriptionAvailableTimeUoms)
                    .HasForeignKey(d => d.AvailableTimeUomId)
                    .HasConstraintName("SUBSC_ATU");

                entity.HasOne(d => d.CanclAutmExtTimeUom)
                    .WithMany(p => p.SubscriptionCanclAutmExtTimeUoms)
                    .HasForeignKey(d => d.CanclAutmExtTimeUomId)
                    .HasConstraintName("SUBSC_CTU");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.Subscriptions)
                    .HasForeignKey(d => d.ContactMechId)
                    .HasConstraintName("SUBSC_CONT_MECH");

                entity.HasOne(d => d.GracePeriodOnExpiryUom)
                    .WithMany(p => p.SubscriptionGracePeriodOnExpiryUoms)
                    .HasForeignKey(d => d.GracePeriodOnExpiryUomId)
                    .HasConstraintName("SUBSC_GTU");

                entity.HasOne(d => d.InventoryItem)
                    .WithMany(p => p.Subscriptions)
                    .HasForeignKey(d => d.InventoryItemId)
                    .HasConstraintName("SUBSC_INV_ITM");

                entity.HasOne(d => d.MaxLifeTimeUom)
                    .WithMany(p => p.SubscriptionMaxLifeTimeUoms)
                    .HasForeignKey(d => d.MaxLifeTimeUomId)
                    .HasConstraintName("SUBSC_MTU");

                entity.HasOne(d => d.NeedType)
                    .WithMany(p => p.Subscriptions)
                    .HasForeignKey(d => d.NeedTypeId)
                    .HasConstraintName("SUBSC_NEED_TYPE");

                entity.HasOne(d => d.OriginatedFromParty)
                    .WithMany(p => p.SubscriptionOriginatedFromParties)
                    .HasForeignKey(d => d.OriginatedFromPartyId)
                    .HasConstraintName("SUBSC_OPARTY");

                entity.HasOne(d => d.OriginatedFromRoleType)
                    .WithMany(p => p.SubscriptionOriginatedFromRoleTypes)
                    .HasForeignKey(d => d.OriginatedFromRoleTypeId)
                    .HasConstraintName("SUBSC_OROLE_TYPE");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.SubscriptionParties)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("SUBSC_PARTY");

                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.Subscriptions)
                    .HasForeignKey(d => d.ProductCategoryId)
                    .HasConstraintName("SUBSC_PROD_CAT");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Subscriptions)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("SUBSC_PRODUCT");

                entity.HasOne(d => d.RoleType)
                    .WithMany(p => p.SubscriptionRoleTypes)
                    .HasForeignKey(d => d.RoleTypeId)
                    .HasConstraintName("SUBSC_ROLE_TYPE");

                entity.HasOne(d => d.SubscriptionResource)
                    .WithMany(p => p.Subscriptions)
                    .HasForeignKey(d => d.SubscriptionResourceId)
                    .HasConstraintName("SUBSC_SRESRC");

                entity.HasOne(d => d.SubscriptionType)
                    .WithMany(p => p.Subscriptions)
                    .HasForeignKey(d => d.SubscriptionTypeId)
                    .HasConstraintName("SUBSC_TO_TYPE");

                entity.HasOne(d => d.UseTimeUom)
                    .WithMany(p => p.SubscriptionUseTimeUoms)
                    .HasForeignKey(d => d.UseTimeUomId)
                    .HasConstraintName("SUBSC_UTU");

                entity.HasOne(d => d.OrderI)
                    .WithMany(p => p.Subscriptions)
                    .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                    .HasConstraintName("SUBSC_ORDERITM");
            });

            modelBuilder.Entity<SubscriptionActivity>(entity =>
            {
                entity.ToTable("SUBSCRIPTION_ACTIVITY");

                entity.HasIndex(e => e.CreatedTxStamp, "SBSCRPN_ACTT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SBSCRPN_ACTT_TXSTP");

                entity.Property(e => e.SubscriptionActivityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SUBSCRIPTION_ACTIVITY_ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DateSent)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_SENT");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<SubscriptionAttribute>(entity =>
            {
                entity.HasKey(e => new { e.SubscriptionId, e.AttrName });

                entity.ToTable("SUBSCRIPTION_ATTRIBUTE");

                entity.HasIndex(e => e.CreatedTxStamp, "SBSCRPN_ATTT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SBSCRPN_ATTT_TXSTP");

                entity.HasIndex(e => e.SubscriptionId, "SUBSC_ATTR");

                entity.Property(e => e.SubscriptionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SUBSCRIPTION_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Subscription)
                    .WithMany(p => p.SubscriptionAttributes)
                    .HasForeignKey(d => d.SubscriptionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SUBSC_ATTR");
            });

            modelBuilder.Entity<SubscriptionCommEvent>(entity =>
            {
                entity.HasKey(e => new { e.SubscriptionId, e.CommunicationEventId });

                entity.ToTable("SUBSCRIPTION_COMM_EVENT");

                entity.HasIndex(e => e.CreatedTxStamp, "SBSCN_CMM_EVT_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SBSCN_CMM_EVT_TXSP");

                entity.HasIndex(e => e.CommunicationEventId, "SUBSC_COM_EVENT");

                entity.HasIndex(e => e.SubscriptionId, "SUBSC_SUBSC");

                entity.Property(e => e.SubscriptionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SUBSCRIPTION_ID");

                entity.Property(e => e.CommunicationEventId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COMMUNICATION_EVENT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.CommunicationEvent)
                    .WithMany(p => p.SubscriptionCommEvents)
                    .HasForeignKey(d => d.CommunicationEventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SUBSC_COM_EVENT");

                entity.HasOne(d => d.Subscription)
                    .WithMany(p => p.SubscriptionCommEvents)
                    .HasForeignKey(d => d.SubscriptionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SUBSC_SUBSC");
            });

            modelBuilder.Entity<SubscriptionFulfillmentPiece>(entity =>
            {
                entity.HasKey(e => new { e.SubscriptionActivityId, e.SubscriptionId })
                    .HasName("PK_SUBSCRIPTION_FULFILLMENT_PI");

                entity.ToTable("SUBSCRIPTION_FULFILLMENT_PIECE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SBSCN_FLFLT_PC_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "SBSCN_FLFLT_PC_TXS");

                entity.HasIndex(e => e.SubscriptionId, "SUBSC_FP");

                entity.HasIndex(e => e.SubscriptionActivityId, "SUBSC_FP_ACT");

                entity.Property(e => e.SubscriptionActivityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SUBSCRIPTION_ACTIVITY_ID");

                entity.Property(e => e.SubscriptionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SUBSCRIPTION_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.SubscriptionActivity)
                    .WithMany(p => p.SubscriptionFulfillmentPieces)
                    .HasForeignKey(d => d.SubscriptionActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SUBSC_FP_ACT");

                entity.HasOne(d => d.Subscription)
                    .WithMany(p => p.SubscriptionFulfillmentPieces)
                    .HasForeignKey(d => d.SubscriptionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SUBSC_FP");
            });

            modelBuilder.Entity<SubscriptionResource>(entity =>
            {
                entity.ToTable("SUBSCRIPTION_RESOURCE");

                entity.HasIndex(e => e.CreatedTxStamp, "SBSCRPN_RSC_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SBSCRPN_RSC_TXSTMP");

                entity.HasIndex(e => e.ContentId, "SUBSC_RES_CNTNT");

                entity.HasIndex(e => e.ParentResourceId, "SUBSC_RES_PARENT");

                entity.HasIndex(e => e.WebSiteId, "SUBSC_RES_WBSITE");

                entity.Property(e => e.SubscriptionResourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SUBSCRIPTION_RESOURCE_ID");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentResourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_RESOURCE_ID");

                entity.Property(e => e.ServiceNameOnExpiry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SERVICE_NAME_ON_EXPIRY");

                entity.Property(e => e.WebSiteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WEB_SITE_ID");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.SubscriptionResources)
                    .HasForeignKey(d => d.ContentId)
                    .HasConstraintName("SUBSC_RES_CNTNT");

                entity.HasOne(d => d.ParentResource)
                    .WithMany(p => p.InverseParentResource)
                    .HasForeignKey(d => d.ParentResourceId)
                    .HasConstraintName("SUBSC_RES_PARENT");

                entity.HasOne(d => d.WebSite)
                    .WithMany(p => p.SubscriptionResources)
                    .HasForeignKey(d => d.WebSiteId)
                    .HasConstraintName("SUBSC_RES_WBSITE");
            });

            modelBuilder.Entity<SubscriptionType>(entity =>
            {
                entity.ToTable("SUBSCRIPTION_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "SBSCRPTN_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SBSCRPTN_TP_TXSTMP");

                entity.HasIndex(e => e.ParentTypeId, "SUBSC_TYPE_PARENT");

                entity.Property(e => e.SubscriptionTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SUBSCRIPTION_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("SUBSC_TYPE_PARENT");
            });

            modelBuilder.Entity<SubscriptionTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.SubscriptionTypeId, e.AttrName });

                entity.ToTable("SUBSCRIPTION_TYPE_ATTR");

                entity.HasIndex(e => e.CreatedTxStamp, "SBSCRN_TP_ATR_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SBSCRN_TP_ATR_TXSP");

                entity.HasIndex(e => e.SubscriptionTypeId, "SUBSC_TYPE_ATTR");

                entity.Property(e => e.SubscriptionTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SUBSCRIPTION_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.SubscriptionType)
                    .WithMany(p => p.SubscriptionTypeAttrs)
                    .HasForeignKey(d => d.SubscriptionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SUBSC_TYPE_ATTR");
            });

            modelBuilder.Entity<SupplierPrefOrder>(entity =>
            {
                entity.ToTable("SUPPLIER_PREF_ORDER");

                entity.HasIndex(e => e.CreatedTxStamp, "SPPR_PRF_ORR_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SPPR_PRF_ORR_TXSTP");

                entity.Property(e => e.SupplierPrefOrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_PREF_ORDER_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<SupplierProduct>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.PartyId, e.CurrencyUomId, e.MinimumOrderQuantity, e.AvailableFromDate });

                entity.ToTable("SUPPLIER_PRODUCT");

                entity.HasIndex(e => e.CreatedTxStamp, "SPPLR_PRDCT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SPPLR_PRDCT_TXSTMP");

                entity.HasIndex(e => new { e.AgreementId, e.AgreementItemSeqId }, "SUPPL_PROD_AGRIT");

                entity.HasIndex(e => e.CurrencyUomId, "SUPPL_PROD_CUOM");

                entity.HasIndex(e => e.PartyId, "SUPPL_PROD_PARTY");

                entity.HasIndex(e => e.ProductId, "SUPPL_PROD_PROD");

                entity.HasIndex(e => e.QuantityUomId, "SUPPL_PROD_QUOM");

                entity.HasIndex(e => e.SupplierPrefOrderId, "SUPPL_PROD_SPORD");

                entity.HasIndex(e => e.SupplierRatingTypeId, "SUPPL_PROD_SRTPE");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.CurrencyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_UOM_ID");

                entity.Property(e => e.MinimumOrderQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("MINIMUM_ORDER_QUANTITY");

                entity.Property(e => e.AvailableFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AVAILABLE_FROM_DATE");

                entity.Property(e => e.AgreementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ID");

                entity.Property(e => e.AgreementItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                entity.Property(e => e.AvailableThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AVAILABLE_THRU_DATE");

                entity.Property(e => e.CanDropShip)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CAN_DROP_SHIP")
                    .IsFixedLength();

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastPrice)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("LAST_PRICE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OrderQtyIncrements)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ORDER_QTY_INCREMENTS");

                entity.Property(e => e.QuantityUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("QUANTITY_UOM_ID");

                entity.Property(e => e.ShippingPrice)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("SHIPPING_PRICE");

                entity.Property(e => e.StandardLeadTimeDays)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("STANDARD_LEAD_TIME_DAYS");

                entity.Property(e => e.SupplierPrefOrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_PREF_ORDER_ID");

                entity.Property(e => e.SupplierProductId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_PRODUCT_ID");

                entity.Property(e => e.SupplierProductName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_PRODUCT_NAME");

                entity.Property(e => e.SupplierRatingTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_RATING_TYPE_ID");

                entity.Property(e => e.UnitsIncluded)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("UNITS_INCLUDED");

                entity.HasOne(d => d.CurrencyUom)
                    .WithMany(p => p.SupplierProductCurrencyUoms)
                    .HasForeignKey(d => d.CurrencyUomId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SUPPL_PROD_CUOM");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.SupplierProducts)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SUPPL_PROD_PARTY");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.SupplierProducts)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SUPPL_PROD_PROD");

                entity.HasOne(d => d.QuantityUom)
                    .WithMany(p => p.SupplierProductQuantityUoms)
                    .HasForeignKey(d => d.QuantityUomId)
                    .HasConstraintName("SUPPL_PROD_QUOM");

                entity.HasOne(d => d.SupplierPrefOrder)
                    .WithMany(p => p.SupplierProducts)
                    .HasForeignKey(d => d.SupplierPrefOrderId)
                    .HasConstraintName("SUPPL_PROD_SPORD");

                entity.HasOne(d => d.SupplierRatingType)
                    .WithMany(p => p.SupplierProducts)
                    .HasForeignKey(d => d.SupplierRatingTypeId)
                    .HasConstraintName("SUPPL_PROD_SRTPE");

                entity.HasOne(d => d.AgreementI)
                    .WithMany(p => p.SupplierProducts)
                    .HasForeignKey(d => new { d.AgreementId, d.AgreementItemSeqId })
                    .HasConstraintName("SUPPL_PROD_AGRIT");
            });

            modelBuilder.Entity<SupplierProductFeature>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.ProductFeatureId });

                entity.ToTable("SUPPLIER_PRODUCT_FEATURE");

                entity.HasIndex(e => e.CreatedTxStamp, "SPPR_PRT_FTR_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SPPR_PRT_FTR_TXSTP");

                entity.HasIndex(e => e.ProductFeatureId, "SUPPL_FEAT_FEAT");

                entity.HasIndex(e => e.PartyId, "SUPPL_FEAT_PARTY");

                entity.HasIndex(e => e.UomId, "SUPPL_FEAT_UOM");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.ProductFeatureId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FEATURE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IdCode)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ID_CODE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.UomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UOM_ID");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.SupplierProductFeatures)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SUPPL_FEAT_PARTY");

                entity.HasOne(d => d.ProductFeature)
                    .WithMany(p => p.SupplierProductFeatures)
                    .HasForeignKey(d => d.ProductFeatureId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SUPPL_FEAT_FEAT");

                entity.HasOne(d => d.Uom)
                    .WithMany(p => p.SupplierProductFeatures)
                    .HasForeignKey(d => d.UomId)
                    .HasConstraintName("SUPPL_FEAT_UOM");
            });

            modelBuilder.Entity<SupplierRatingType>(entity =>
            {
                entity.ToTable("SUPPLIER_RATING_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "SPPR_RTG_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SPPR_RTG_TP_TXSTMP");

                entity.Property(e => e.SupplierRatingTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_RATING_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<Survey>(entity =>
            {
                entity.ToTable("SURVEY");

                entity.HasIndex(e => e.CreatedTxStamp, "SURVEY_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SURVEY_TXSTMP");

                entity.Property(e => e.SurveyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_ID");

                entity.Property(e => e.AcroFormContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACRO_FORM_CONTENT_ID");

                entity.Property(e => e.AllowMultiple)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ALLOW_MULTIPLE")
                    .IsFixedLength();

                entity.Property(e => e.AllowUpdate)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ALLOW_UPDATE")
                    .IsFixedLength();

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsAnonymous)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_ANONYMOUS")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ResponseService)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("RESPONSE_SERVICE");

                entity.Property(e => e.SubmitCaption)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SUBMIT_CAPTION");

                entity.Property(e => e.SurveyName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_NAME");
            });

            modelBuilder.Entity<SurveyApplType>(entity =>
            {
                entity.ToTable("SURVEY_APPL_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "SRV_APPL_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SRV_APPL_TP_TXSTMP");

                entity.Property(e => e.SurveyApplTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_APPL_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<SurveyMultiResp>(entity =>
            {
                entity.HasKey(e => new { e.SurveyId, e.SurveyMultiRespId });

                entity.ToTable("SURVEY_MULTI_RESP");

                entity.HasIndex(e => e.SurveyId, "SRVYMRSP_SRVY");

                entity.HasIndex(e => e.CreatedTxStamp, "SRV_MLT_RSP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SRV_MLT_RSP_TXSTMP");

                entity.Property(e => e.SurveyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_ID");

                entity.Property(e => e.SurveyMultiRespId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_MULTI_RESP_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MultiRespTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MULTI_RESP_TITLE");

                entity.HasOne(d => d.Survey)
                    .WithMany(p => p.SurveyMultiResps)
                    .HasForeignKey(d => d.SurveyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SRVYMRSP_SRVY");
            });

            modelBuilder.Entity<SurveyMultiRespColumn>(entity =>
            {
                entity.HasKey(e => new { e.SurveyId, e.SurveyMultiRespId, e.SurveyMultiRespColId });

                entity.ToTable("SURVEY_MULTI_RESP_COLUMN");

                entity.HasIndex(e => new { e.SurveyId, e.SurveyMultiRespId }, "SRVYMRSPCL_SMRESP");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SRV_MLT_RSP_CLN_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "SRV_MLT_RSP_CLN_TS");

                entity.Property(e => e.SurveyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_ID");

                entity.Property(e => e.SurveyMultiRespId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_MULTI_RESP_ID");

                entity.Property(e => e.SurveyMultiRespColId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_MULTI_RESP_COL_ID");

                entity.Property(e => e.ColumnTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("COLUMN_TITLE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.HasOne(d => d.Survey)
                    .WithMany(p => p.SurveyMultiRespColumns)
                    .HasForeignKey(d => new { d.SurveyId, d.SurveyMultiRespId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SRVYMRSPCL_SMRESP");
            });

            modelBuilder.Entity<SurveyPage>(entity =>
            {
                entity.HasKey(e => new { e.SurveyId, e.SurveyPageSeqId });

                entity.ToTable("SURVEY_PAGE");

                entity.HasIndex(e => e.SurveyId, "SRVYPAGE_SRVY");

                entity.HasIndex(e => e.CreatedTxStamp, "SURVEY_PAGE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SURVEY_PAGE_TXSTMP");

                entity.Property(e => e.SurveyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_ID");

                entity.Property(e => e.SurveyPageSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_PAGE_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PageName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PAGE_NAME");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.HasOne(d => d.Survey)
                    .WithMany(p => p.SurveyPages)
                    .HasForeignKey(d => d.SurveyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SRVYPAGE_SRVY");
            });

            modelBuilder.Entity<SurveyQuestion>(entity =>
            {
                entity.ToTable("SURVEY_QUESTION");

                entity.HasIndex(e => e.GeoId, "SRVYQST_GEO");

                entity.HasIndex(e => e.SurveyQuestionCategoryId, "SRVYQST_SRVYQTCT");

                entity.HasIndex(e => e.SurveyQuestionTypeId, "SRVYQST_SRVYQTP");

                entity.HasIndex(e => e.CreatedTxStamp, "SRV_QSTN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SRV_QSTN_TXSTMP");

                entity.Property(e => e.SurveyQuestionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_QUESTION_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.EnumTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ENUM_TYPE_ID");

                entity.Property(e => e.FormatString)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FORMAT_STRING");

                entity.Property(e => e.GeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GEO_ID");

                entity.Property(e => e.Hint)
                    .HasColumnType("text")
                    .HasColumnName("HINT");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Question)
                    .HasColumnType("text")
                    .HasColumnName("QUESTION");

                entity.Property(e => e.SurveyQuestionCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_QUESTION_CATEGORY_ID");

                entity.Property(e => e.SurveyQuestionTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_QUESTION_TYPE_ID");

                entity.HasOne(d => d.Geo)
                    .WithMany(p => p.SurveyQuestions)
                    .HasForeignKey(d => d.GeoId)
                    .HasConstraintName("SRVYQST_GEO");

                entity.HasOne(d => d.SurveyQuestionCategory)
                    .WithMany(p => p.SurveyQuestions)
                    .HasForeignKey(d => d.SurveyQuestionCategoryId)
                    .HasConstraintName("SRVYQST_SRVYQTCT");

                entity.HasOne(d => d.SurveyQuestionType)
                    .WithMany(p => p.SurveyQuestions)
                    .HasForeignKey(d => d.SurveyQuestionTypeId)
                    .HasConstraintName("SRVYQST_SRVYQTP");
            });

            modelBuilder.Entity<SurveyQuestionAppl>(entity =>
            {
                entity.HasKey(e => new { e.SurveyId, e.SurveyQuestionId, e.FromDate });

                entity.ToTable("SURVEY_QUESTION_APPL");

                entity.HasIndex(e => e.SurveyId, "SRVYQSTAPL_SRVY");

                entity.HasIndex(e => e.SurveyQuestionId, "SRVYQSTAPL_SRVYQ");

                entity.HasIndex(e => new { e.WithSurveyQuestionId, e.WithSurveyOptionSeqId }, "SRVYQSTAPL_SVQO");

                entity.HasIndex(e => e.CreatedTxStamp, "SRV_QSN_APL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SRV_QSN_APL_TXSTMP");

                entity.Property(e => e.SurveyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_ID");

                entity.Property(e => e.SurveyQuestionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_QUESTION_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.ExternalFieldRef)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EXTERNAL_FIELD_REF");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.RequiredField)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REQUIRED_FIELD")
                    .IsFixedLength();

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.SurveyMultiRespColId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_MULTI_RESP_COL_ID");

                entity.Property(e => e.SurveyMultiRespId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_MULTI_RESP_ID");

                entity.Property(e => e.SurveyPageSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_PAGE_SEQ_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.Property(e => e.WithSurveyOptionSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WITH_SURVEY_OPTION_SEQ_ID");

                entity.Property(e => e.WithSurveyQuestionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WITH_SURVEY_QUESTION_ID");

                entity.HasOne(d => d.Survey)
                    .WithMany(p => p.SurveyQuestionAppls)
                    .HasForeignKey(d => d.SurveyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SRVYQSTAPL_SRVY");

                entity.HasOne(d => d.SurveyQuestion)
                    .WithMany(p => p.SurveyQuestionAppls)
                    .HasForeignKey(d => d.SurveyQuestionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SRVYQSTAPL_SRVYQ");

                entity.HasOne(d => d.WithSurvey)
                    .WithMany(p => p.SurveyQuestionAppls)
                    .HasForeignKey(d => new { d.WithSurveyQuestionId, d.WithSurveyOptionSeqId })
                    .HasConstraintName("SRVYQSTAPL_SVQO");
            });

            modelBuilder.Entity<SurveyQuestionCategory>(entity =>
            {
                entity.ToTable("SURVEY_QUESTION_CATEGORY");

                entity.HasIndex(e => e.ParentCategoryId, "SRVYQSTCT_PAR");

                entity.HasIndex(e => e.CreatedTxStamp, "SRV_QSN_CTR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SRV_QSN_CTR_TXSTMP");

                entity.Property(e => e.SurveyQuestionCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_QUESTION_CATEGORY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_CATEGORY_ID");

                entity.HasOne(d => d.ParentCategory)
                    .WithMany(p => p.InverseParentCategory)
                    .HasForeignKey(d => d.ParentCategoryId)
                    .HasConstraintName("SRVYQSTCT_PAR");
            });

            modelBuilder.Entity<SurveyQuestionOption>(entity =>
            {
                entity.HasKey(e => new { e.SurveyQuestionId, e.SurveyOptionSeqId });

                entity.ToTable("SURVEY_QUESTION_OPTION");

                entity.HasIndex(e => e.SurveyQuestionId, "SRVYQSTOP_SRVYQ");

                entity.HasIndex(e => e.CreatedTxStamp, "SRV_QSN_OPN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SRV_QSN_OPN_TXSTMP");

                entity.Property(e => e.SurveyQuestionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_QUESTION_ID");

                entity.Property(e => e.SurveyOptionSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_OPTION_SEQ_ID");

                entity.Property(e => e.AmountBase)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AMOUNT_BASE");

                entity.Property(e => e.AmountBaseUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AMOUNT_BASE_UOM_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Duration).HasColumnName("DURATION");

                entity.Property(e => e.DurationUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DURATION_UOM_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.WeightFactor).HasColumnName("WEIGHT_FACTOR");

                entity.HasOne(d => d.SurveyQuestion)
                    .WithMany(p => p.SurveyQuestionOptions)
                    .HasForeignKey(d => d.SurveyQuestionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SRVYQSTOP_SRVYQ");
            });

            modelBuilder.Entity<SurveyQuestionType>(entity =>
            {
                entity.ToTable("SURVEY_QUESTION_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "SRV_QSTN_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SRV_QSTN_TP_TXSTMP");

                entity.Property(e => e.SurveyQuestionTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_QUESTION_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<SurveyResponse>(entity =>
            {
                entity.ToTable("SURVEY_RESPONSE");

                entity.HasIndex(e => e.SurveyId, "SRVYRSP_SRVY");

                entity.HasIndex(e => e.StatusId, "SRVYRSP_STTS");

                entity.HasIndex(e => e.CreatedTxStamp, "SRV_RSPNS_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SRV_RSPNS_TXSTMP");

                entity.Property(e => e.SurveyResponseId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_RESPONSE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GeneralFeedback)
                    .HasColumnType("text")
                    .HasColumnName("GENERAL_FEEDBACK");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.ReferenceId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCE_ID");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("RESPONSE_DATE");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.SurveyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_ID");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.SurveyResponses)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("SRVYRSP_STTS");

                entity.HasOne(d => d.Survey)
                    .WithMany(p => p.SurveyResponses)
                    .HasForeignKey(d => d.SurveyId)
                    .HasConstraintName("SRVYRSP_SRVY");
            });

            modelBuilder.Entity<SurveyResponseAnswer>(entity =>
            {
                entity.HasKey(e => new { e.SurveyResponseId, e.SurveyQuestionId, e.SurveyMultiRespColId });

                entity.ToTable("SURVEY_RESPONSE_ANSWER");

                entity.HasIndex(e => e.ContentId, "SRVYRSPA_CONT");

                entity.HasIndex(e => new { e.SurveyQuestionId, e.SurveyOptionSeqId }, "SRVYRSPA_OPT");

                entity.HasIndex(e => e.SurveyQuestionId, "SRVYRSPA_SVQU");

                entity.HasIndex(e => e.SurveyResponseId, "SRVYRSPA_SVRSP");

                entity.HasIndex(e => e.CreatedTxStamp, "SRV_RSPS_ANR_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SRV_RSPS_ANR_TXSTP");

                entity.Property(e => e.SurveyResponseId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_RESPONSE_ID");

                entity.Property(e => e.SurveyQuestionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_QUESTION_ID");

                entity.Property(e => e.SurveyMultiRespColId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_MULTI_RESP_COL_ID");

                entity.Property(e => e.AmountBase)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AMOUNT_BASE");

                entity.Property(e => e.AmountBaseUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AMOUNT_BASE_UOM_ID");

                entity.Property(e => e.AnsweredDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ANSWERED_DATE");

                entity.Property(e => e.BooleanResponse)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BOOLEAN_RESPONSE")
                    .IsFixedLength();

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrencyResponse)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("CURRENCY_RESPONSE");

                entity.Property(e => e.Duration).HasColumnName("DURATION");

                entity.Property(e => e.DurationUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DURATION_UOM_ID");

                entity.Property(e => e.FloatResponse).HasColumnName("FLOAT_RESPONSE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.NumericResponse).HasColumnName("NUMERIC_RESPONSE");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.SurveyMultiRespId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_MULTI_RESP_ID");

                entity.Property(e => e.SurveyOptionSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_OPTION_SEQ_ID");

                entity.Property(e => e.TextResponse)
                    .HasColumnType("text")
                    .HasColumnName("TEXT_RESPONSE");

                entity.Property(e => e.WeightFactor).HasColumnName("WEIGHT_FACTOR");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.SurveyResponseAnswers)
                    .HasForeignKey(d => d.ContentId)
                    .HasConstraintName("SRVYRSPA_CONT");

                entity.HasOne(d => d.SurveyQuestion)
                    .WithMany(p => p.SurveyResponseAnswers)
                    .HasForeignKey(d => d.SurveyQuestionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SRVYRSPA_SVQU");

                entity.HasOne(d => d.SurveyResponse)
                    .WithMany(p => p.SurveyResponseAnswers)
                    .HasForeignKey(d => d.SurveyResponseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SRVYRSPA_SVRSP");

                entity.HasOne(d => d.Survey)
                    .WithMany(p => p.SurveyResponseAnswers)
                    .HasForeignKey(d => new { d.SurveyQuestionId, d.SurveyOptionSeqId })
                    .HasConstraintName("SRVYRSPA_OPT");
            });

            modelBuilder.Entity<SurveyTrigger>(entity =>
            {
                entity.HasKey(e => new { e.SurveyId, e.SurveyApplTypeId, e.FromDate });

                entity.ToTable("SURVEY_TRIGGER");

                entity.HasIndex(e => e.SurveyId, "SRVYTRG_SRVY");

                entity.HasIndex(e => e.SurveyApplTypeId, "SRVYTRG_SRVYAPT");

                entity.HasIndex(e => e.CreatedTxStamp, "SRV_TRGGR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SRV_TRGGR_TXSTMP");

                entity.Property(e => e.SurveyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_ID");

                entity.Property(e => e.SurveyApplTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_APPL_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.SurveyApplType)
                    .WithMany(p => p.SurveyTriggers)
                    .HasForeignKey(d => d.SurveyApplTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SRVYTRG_SRVYAPT");

                entity.HasOne(d => d.Survey)
                    .WithMany(p => p.SurveyTriggers)
                    .HasForeignKey(d => d.SurveyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SRVYTRG_SRVY");
            });

            modelBuilder.Entity<SystemProperty>(entity =>
            {
                entity.HasKey(e => new { e.SystemResourceId, e.SystemPropertyId });

                entity.ToTable("SYSTEM_PROPERTY");

                entity.HasIndex(e => e.CreatedTxStamp, "SSTM_PRPRT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "SSTM_PRPRT_TXSTMP");

                entity.Property(e => e.SystemResourceId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SYSTEM_RESOURCE_ID");

                entity.Property(e => e.SystemPropertyId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SYSTEM_PROPERTY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SystemPropertyValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SYSTEM_PROPERTY_VALUE");
            });

            modelBuilder.Entity<TarpittedLoginView>(entity =>
            {
                entity.HasKey(e => new { e.ViewNameId, e.UserLoginId });

                entity.ToTable("TARPITTED_LOGIN_VIEW");

                entity.HasIndex(e => e.CreatedTxStamp, "TRPTD_LGN_VW_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TRPTD_LGN_VW_TXSTP");

                entity.Property(e => e.ViewNameId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("VIEW_NAME_ID");

                entity.Property(e => e.UserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USER_LOGIN_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.TarpitReleaseDateTime).HasColumnName("TARPIT_RELEASE_DATE_TIME");
            });

            modelBuilder.Entity<TaxAuthority>(entity =>
            {
                entity.HasKey(e => new { e.TaxAuthGeoId, e.TaxAuthPartyId });

                entity.ToTable("TAX_AUTHORITY");

                entity.HasIndex(e => e.TaxAuthGeoId, "TAXAUTH_TAGEO");

                entity.HasIndex(e => e.TaxAuthPartyId, "TAXAUTH_TAPARTY");

                entity.HasIndex(e => e.CreatedTxStamp, "TX_ATHRT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TX_ATHRT_TXSTMP");

                entity.Property(e => e.TaxAuthGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTH_GEO_ID");

                entity.Property(e => e.TaxAuthPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTH_PARTY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.IncludeTaxInPrice)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INCLUDE_TAX_IN_PRICE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.RequireTaxIdForExemption)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REQUIRE_TAX_ID_FOR_EXEMPTION")
                    .IsFixedLength();

                entity.Property(e => e.TaxIdFormatPattern)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TAX_ID_FORMAT_PATTERN");

                entity.HasOne(d => d.TaxAuthGeo)
                    .WithMany(p => p.TaxAuthorities)
                    .HasForeignKey(d => d.TaxAuthGeoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TAXAUTH_TAGEO");

                entity.HasOne(d => d.TaxAuthParty)
                    .WithMany(p => p.TaxAuthorities)
                    .HasForeignKey(d => d.TaxAuthPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TAXAUTH_TAPARTY");
            });

            modelBuilder.Entity<TaxAuthorityAssoc>(entity =>
            {
                entity.HasKey(e => new { e.TaxAuthGeoId, e.TaxAuthPartyId, e.ToTaxAuthGeoId, e.ToTaxAuthPartyId, e.FromDate });

                entity.ToTable("TAX_AUTHORITY_ASSOC");

                entity.HasIndex(e => e.TaxAuthorityAssocTypeId, "TAXAUTHASC_ASTP");

                entity.HasIndex(e => new { e.ToTaxAuthGeoId, e.ToTaxAuthPartyId }, "TAXAUTHASC_TOTXA");

                entity.HasIndex(e => new { e.TaxAuthGeoId, e.TaxAuthPartyId }, "TAXAUTHASC_TXA");

                entity.HasIndex(e => e.CreatedTxStamp, "TX_ATHT_ASC_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TX_ATHT_ASC_TXSTMP");

                entity.Property(e => e.TaxAuthGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTH_GEO_ID");

                entity.Property(e => e.TaxAuthPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTH_PARTY_ID");

                entity.Property(e => e.ToTaxAuthGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TO_TAX_AUTH_GEO_ID");

                entity.Property(e => e.ToTaxAuthPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TO_TAX_AUTH_PARTY_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.TaxAuthorityAssocTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTHORITY_ASSOC_TYPE_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.TaxAuthorityAssocType)
                    .WithMany(p => p.TaxAuthorityAssocs)
                    .HasForeignKey(d => d.TaxAuthorityAssocTypeId)
                    .HasConstraintName("TAXAUTHASC_ASTP");

                entity.HasOne(d => d.TaxAuth)
                    .WithMany(p => p.TaxAuthorityAssocTaxAuths)
                    .HasForeignKey(d => new { d.TaxAuthGeoId, d.TaxAuthPartyId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TAXAUTHASC_TXA");

                entity.HasOne(d => d.ToTaxAuth)
                    .WithMany(p => p.TaxAuthorityAssocToTaxAuths)
                    .HasForeignKey(d => new { d.ToTaxAuthGeoId, d.ToTaxAuthPartyId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TAXAUTHASC_TOTXA");
            });

            modelBuilder.Entity<TaxAuthorityAssocType>(entity =>
            {
                entity.ToTable("TAX_AUTHORITY_ASSOC_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "TX_ATT_ASC_TP_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TX_ATT_ASC_TP_TXSP");

                entity.Property(e => e.TaxAuthorityAssocTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTHORITY_ASSOC_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<TaxAuthorityCategory>(entity =>
            {
                entity.HasKey(e => new { e.TaxAuthGeoId, e.TaxAuthPartyId, e.ProductCategoryId });

                entity.ToTable("TAX_AUTHORITY_CATEGORY");

                entity.HasIndex(e => e.ProductCategoryId, "TAXAUTHCAT_CAT");

                entity.HasIndex(e => new { e.TaxAuthGeoId, e.TaxAuthPartyId }, "TAXAUTHCAT_TXA");

                entity.HasIndex(e => e.CreatedTxStamp, "TX_ATHT_CTR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TX_ATHT_CTR_TXSTMP");

                entity.Property(e => e.TaxAuthGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTH_GEO_ID");

                entity.Property(e => e.TaxAuthPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTH_PARTY_ID");

                entity.Property(e => e.ProductCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CATEGORY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.TaxAuthorityCategories)
                    .HasForeignKey(d => d.ProductCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TAXAUTHCAT_CAT");

                entity.HasOne(d => d.TaxAuth)
                    .WithMany(p => p.TaxAuthorityCategories)
                    .HasForeignKey(d => new { d.TaxAuthGeoId, d.TaxAuthPartyId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TAXAUTHCAT_TXA");
            });

            modelBuilder.Entity<TaxAuthorityGlAccount>(entity =>
            {
                entity.HasKey(e => new { e.TaxAuthGeoId, e.TaxAuthPartyId, e.OrganizationPartyId });

                entity.ToTable("TAX_AUTHORITY_GL_ACCOUNT");

                entity.HasIndex(e => e.GlAccountId, "TAXAUTHGLA_GLA");

                entity.HasIndex(e => e.OrganizationPartyId, "TAXAUTHGLA_OPTY");

                entity.HasIndex(e => new { e.TaxAuthGeoId, e.TaxAuthPartyId }, "TAXAUTHGLA_TXA");

                entity.HasIndex(e => e.CreatedTxStamp, "TX_ATT_GL_ACT_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TX_ATT_GL_ACT_TXSP");

                entity.Property(e => e.TaxAuthGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTH_GEO_ID");

                entity.Property(e => e.TaxAuthPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTH_PARTY_ID");

                entity.Property(e => e.OrganizationPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_PARTY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.GlAccount)
                    .WithMany(p => p.TaxAuthorityGlAccounts)
                    .HasForeignKey(d => d.GlAccountId)
                    .HasConstraintName("TAXAUTHGLA_GLA");

                entity.HasOne(d => d.OrganizationParty)
                    .WithMany(p => p.TaxAuthorityGlAccounts)
                    .HasForeignKey(d => d.OrganizationPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TAXAUTHGLA_OPTY");

                entity.HasOne(d => d.TaxAuth)
                    .WithMany(p => p.TaxAuthorityGlAccounts)
                    .HasForeignKey(d => new { d.TaxAuthGeoId, d.TaxAuthPartyId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TAXAUTHGLA_TXA");
            });

            modelBuilder.Entity<TaxAuthorityRateProduct>(entity =>
            {
                entity.HasKey(e => e.TaxAuthorityRateSeqId);

                entity.ToTable("TAX_AUTHORITY_RATE_PRODUCT");

                entity.HasIndex(e => e.ProductCategoryId, "TAXAUTHRTEP_PCAT");

                entity.HasIndex(e => e.ProductStoreId, "TAXAUTHRTEP_PSTR");

                entity.HasIndex(e => e.TaxAuthorityRateTypeId, "TAXAUTHRTEP_RTTP");

                entity.HasIndex(e => new { e.TaxAuthGeoId, e.TaxAuthPartyId }, "TAXAUTHRTEP_TXA");

                entity.HasIndex(e => e.CreatedTxStamp, "TX_ATT_RT_PRT_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TX_ATT_RT_PRT_TXSP");

                entity.Property(e => e.TaxAuthorityRateSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTHORITY_RATE_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.IsTaxInShippingPrice)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_TAX_IN_SHIPPING_PRICE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MinItemPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MIN_ITEM_PRICE");

                entity.Property(e => e.MinPurchase)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MIN_PURCHASE");

                entity.Property(e => e.ProductCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CATEGORY_ID");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.TaxAuthGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTH_GEO_ID");

                entity.Property(e => e.TaxAuthPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTH_PARTY_ID");

                entity.Property(e => e.TaxAuthorityRateTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTHORITY_RATE_TYPE_ID");

                entity.Property(e => e.TaxPercentage)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("TAX_PERCENTAGE");

                entity.Property(e => e.TaxPromotions)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TAX_PROMOTIONS")
                    .IsFixedLength();

                entity.Property(e => e.TaxShipping)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TAX_SHIPPING")
                    .IsFixedLength();

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.Property(e => e.TitleTransferEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TITLE_TRANSFER_ENUM_ID");

                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.TaxAuthorityRateProducts)
                    .HasForeignKey(d => d.ProductCategoryId)
                    .HasConstraintName("TAXAUTHRTEP_PCAT");

                entity.HasOne(d => d.ProductStore)
                    .WithMany(p => p.TaxAuthorityRateProducts)
                    .HasForeignKey(d => d.ProductStoreId)
                    .HasConstraintName("TAXAUTHRTEP_PSTR");

                entity.HasOne(d => d.TaxAuthorityRateType)
                    .WithMany(p => p.TaxAuthorityRateProducts)
                    .HasForeignKey(d => d.TaxAuthorityRateTypeId)
                    .HasConstraintName("TAXAUTHRTEP_RTTP");

                entity.HasOne(d => d.TaxAuth)
                    .WithMany(p => p.TaxAuthorityRateProducts)
                    .HasForeignKey(d => new { d.TaxAuthGeoId, d.TaxAuthPartyId })
                    .HasConstraintName("TAXAUTHRTEP_TXA");
            });

            modelBuilder.Entity<TaxAuthorityRateType>(entity =>
            {
                entity.ToTable("TAX_AUTHORITY_RATE_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "TX_ATT_RT_TP_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TX_ATT_RT_TP_TXSTP");

                entity.Property(e => e.TaxAuthorityRateTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TAX_AUTHORITY_RATE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<TechDataCalendar>(entity =>
            {
                entity.HasKey(e => e.CalendarId);

                entity.ToTable("TECH_DATA_CALENDAR");

                entity.HasIndex(e => e.CalendarWeekId, "CALENDAR_WEEK");

                entity.HasIndex(e => e.CreatedTxStamp, "TCH_DT_CLNR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TCH_DT_CLNR_TXSTMP");

                entity.Property(e => e.CalendarId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CALENDAR_ID");

                entity.Property(e => e.CalendarWeekId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CALENDAR_WEEK_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.CalendarWeek)
                    .WithMany(p => p.TechDataCalendars)
                    .HasForeignKey(d => d.CalendarWeekId)
                    .HasConstraintName("CALENDAR_WEEK");
            });

            modelBuilder.Entity<TechDataCalendarExcDay>(entity =>
            {
                entity.HasKey(e => new { e.CalendarId, e.ExceptionDateStartTime });

                entity.ToTable("TECH_DATA_CALENDAR_EXC_DAY");

                entity.HasIndex(e => e.CalendarId, "EXC_DAY_CALENDAR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TCH_CLR_EXC_D_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "TCH_CLR_EXC_D_TS");

                entity.Property(e => e.CalendarId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CALENDAR_ID");

                entity.Property(e => e.ExceptionDateStartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("EXCEPTION_DATE_START_TIME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.ExceptionCapacity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("EXCEPTION_CAPACITY");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.UsedCapacity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("USED_CAPACITY");

                entity.HasOne(d => d.Calendar)
                    .WithMany(p => p.TechDataCalendarExcDays)
                    .HasForeignKey(d => d.CalendarId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EXC_DAY_CALENDAR");
            });

            modelBuilder.Entity<TechDataCalendarExcWeek>(entity =>
            {
                entity.HasKey(e => new { e.CalendarId, e.ExceptionDateStart });

                entity.ToTable("TECH_DATA_CALENDAR_EXC_WEEK");

                entity.HasIndex(e => e.CalendarId, "EXC_WEEK_CALENDAR");

                entity.HasIndex(e => e.CalendarWeekId, "EXC_WEEK_WEEK");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TCH_CLR_EXC_WK_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "TCH_CLR_EXC_WK_TS");

                entity.Property(e => e.CalendarId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CALENDAR_ID");

                entity.Property(e => e.ExceptionDateStart)
                    .HasColumnType("datetime")
                    .HasColumnName("EXCEPTION_DATE_START");

                entity.Property(e => e.CalendarWeekId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CALENDAR_WEEK_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Calendar)
                    .WithMany(p => p.TechDataCalendarExcWeeks)
                    .HasForeignKey(d => d.CalendarId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EXC_WEEK_CALENDAR");

                entity.HasOne(d => d.CalendarWeek)
                    .WithMany(p => p.TechDataCalendarExcWeeks)
                    .HasForeignKey(d => d.CalendarWeekId)
                    .HasConstraintName("EXC_WEEK_WEEK");
            });

            modelBuilder.Entity<TechDataCalendarWeek>(entity =>
            {
                entity.HasKey(e => e.CalendarWeekId);

                entity.ToTable("TECH_DATA_CALENDAR_WEEK");

                entity.HasIndex(e => e.CreatedTxStamp, "TCH_DT_CLR_WK_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TCH_DT_CLR_WK_TXSP");

                entity.Property(e => e.CalendarWeekId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CALENDAR_WEEK_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.FridayCapacity).HasColumnName("FRIDAY_CAPACITY");

                entity.Property(e => e.FridayStartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("FRIDAY_START_TIME");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MondayCapacity).HasColumnName("MONDAY_CAPACITY");

                entity.Property(e => e.MondayStartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("MONDAY_START_TIME");

                entity.Property(e => e.SaturdayCapacity).HasColumnName("SATURDAY_CAPACITY");

                entity.Property(e => e.SaturdayStartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("SATURDAY_START_TIME");

                entity.Property(e => e.SundayCapacity).HasColumnName("SUNDAY_CAPACITY");

                entity.Property(e => e.SundayStartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("SUNDAY_START_TIME");

                entity.Property(e => e.ThursdayCapacity).HasColumnName("THURSDAY_CAPACITY");

                entity.Property(e => e.ThursdayStartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("THURSDAY_START_TIME");

                entity.Property(e => e.TuesdayCapacity).HasColumnName("TUESDAY_CAPACITY");

                entity.Property(e => e.TuesdayStartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("TUESDAY_START_TIME");

                entity.Property(e => e.WednesdayCapacity).HasColumnName("WEDNESDAY_CAPACITY");

                entity.Property(e => e.WednesdayStartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("WEDNESDAY_START_TIME");
            });

            modelBuilder.Entity<TelecomGatewayConfig>(entity =>
            {
                entity.ToTable("TELECOM_GATEWAY_CONFIG");

                entity.HasIndex(e => e.CreatedTxStamp, "TLM_GTW_CNG_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TLM_GTW_CNG_TXSTMP");

                entity.Property(e => e.TelecomGatewayConfigId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TELECOM_GATEWAY_CONFIG_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<TelecomMethodType>(entity =>
            {
                entity.ToTable("TELECOM_METHOD_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "TLCM_MTD_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TLCM_MTD_TP_TXSTMP");

                entity.Property(e => e.TelecomMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TELECOM_METHOD_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<TelecomNumber>(entity =>
            {
                entity.HasKey(e => e.ContactMechId);

                entity.ToTable("TELECOM_NUMBER");

                entity.HasIndex(e => e.AreaCode, "AREA_CODE_IDX");

                entity.HasIndex(e => e.ContactNumber, "CONTACT_NUMBER_IDX");

                entity.HasIndex(e => e.CountryCode, "COUNTRY_CODE_IDX");

                entity.HasIndex(e => e.ContactMechId, "TEL_NUM_CMECH");

                entity.HasIndex(e => e.CreatedTxStamp, "TLCM_NMBR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TLCM_NMBR_TXSTMP");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.AreaCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("AREA_CODE");

                entity.Property(e => e.AskForName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ASK_FOR_NAME");

                entity.Property(e => e.ContactNumber)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_NUMBER");

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY_CODE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ContactMech)
                    .WithOne(p => p.TelecomNumber)
                    .HasForeignKey<TelecomNumber>(d => d.ContactMechId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TEL_NUM_CMECH");
            });

            modelBuilder.Entity<TemporalExpression>(entity =>
            {
                entity.HasKey(e => e.TempExprId);

                entity.ToTable("TEMPORAL_EXPRESSION");

                entity.HasIndex(e => e.CreatedTxStamp, "TMPL_EXPRSN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TMPL_EXPRSN_TXSTMP");

                entity.Property(e => e.TempExprId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TEMP_EXPR_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Date1)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE1");

                entity.Property(e => e.Date2)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE2");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Integer1).HasColumnName("INTEGER1");

                entity.Property(e => e.Integer2).HasColumnName("INTEGER2");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.String1)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STRING1");

                entity.Property(e => e.String2)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STRING2");

                entity.Property(e => e.TempExprTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TEMP_EXPR_TYPE_ID");
            });

            modelBuilder.Entity<TemporalExpressionAssoc>(entity =>
            {
                entity.HasKey(e => new { e.FromTempExprId, e.ToTempExprId });

                entity.ToTable("TEMPORAL_EXPRESSION_ASSOC");

                entity.HasIndex(e => e.FromTempExprId, "TEMP_EXPR_FROM");

                entity.HasIndex(e => e.ToTempExprId, "TEMP_EXPR_TO");

                entity.HasIndex(e => e.CreatedTxStamp, "TML_EXPRN_ASC_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TML_EXPRN_ASC_TXSP");

                entity.Property(e => e.FromTempExprId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FROM_TEMP_EXPR_ID");

                entity.Property(e => e.ToTempExprId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TO_TEMP_EXPR_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.ExprAssocType)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EXPR_ASSOC_TYPE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.FromTempExpr)
                    .WithMany(p => p.TemporalExpressionAssocFromTempExprs)
                    .HasForeignKey(d => d.FromTempExprId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TEMP_EXPR_FROM");

                entity.HasOne(d => d.ToTempExpr)
                    .WithMany(p => p.TemporalExpressionAssocToTempExprs)
                    .HasForeignKey(d => d.ToTempExprId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TEMP_EXPR_TO");
            });

            modelBuilder.Entity<Tenant>(entity =>
            {
                entity.ToTable("TENANT");

                entity.HasIndex(e => e.CreatedTxStamp, "TENANT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TENANT_TXSTMP");

                entity.Property(e => e.TenantId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TENANT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Disabled)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DISABLED")
                    .IsFixedLength();

                entity.Property(e => e.InitialPath)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("INITIAL_PATH");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.TenantName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TENANT_NAME");
            });

            modelBuilder.Entity<TenantComponent>(entity =>
            {
                entity.HasKey(e => new { e.ComponentName, e.TenantId });

                entity.ToTable("TENANT_COMPONENT");

                entity.HasIndex(e => e.ComponentName, "COMP_CNT");

                entity.HasIndex(e => e.CreatedTxStamp, "TNNT_CMPNNT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TNNT_CMPNNT_TXSTMP");

                entity.HasIndex(e => e.TenantId, "TNTCOMP_TNT");

                entity.Property(e => e.ComponentName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("COMPONENT_NAME");

                entity.Property(e => e.TenantId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TENANT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.HasOne(d => d.ComponentNameNavigation)
                    .WithMany(p => p.TenantComponents)
                    .HasForeignKey(d => d.ComponentName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("COMP_CNT");

                entity.HasOne(d => d.Tenant)
                    .WithMany(p => p.TenantComponents)
                    .HasForeignKey(d => d.TenantId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TNTCOMP_TNT");
            });

            modelBuilder.Entity<TenantDataSource>(entity =>
            {
                entity.HasKey(e => new { e.TenantId, e.EntityGroupName });

                entity.ToTable("TENANT_DATA_SOURCE");

                entity.HasIndex(e => e.CreatedTxStamp, "TNNT_DT_SRC_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TNNT_DT_SRC_TXSTMP");

                entity.HasIndex(e => e.TenantId, "TNTDTSRC_TNT");

                entity.Property(e => e.TenantId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TENANT_ID");

                entity.Property(e => e.EntityGroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENTITY_GROUP_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.JdbcPassword)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("JDBC_PASSWORD");

                entity.Property(e => e.JdbcUri)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("JDBC_URI");

                entity.Property(e => e.JdbcUsername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("JDBC_USERNAME");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Tenant)
                    .WithMany(p => p.TenantDataSources)
                    .HasForeignKey(d => d.TenantId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TNTDTSRC_TNT");
            });

            modelBuilder.Entity<TenantDomainName>(entity =>
            {
                entity.HasKey(e => e.DomainName);

                entity.ToTable("TENANT_DOMAIN_NAME");

                entity.HasIndex(e => e.TenantId, "TNNT_DMNAM");

                entity.HasIndex(e => e.CreatedTxStamp, "TNNT_DMN_NM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TNNT_DMN_NM_TXSTMP");

                entity.Property(e => e.DomainName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DOMAIN_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.TenantId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TENANT_ID");

                entity.HasOne(d => d.Tenant)
                    .WithMany(p => p.TenantDomainNames)
                    .HasForeignKey(d => d.TenantId)
                    .HasConstraintName("TNNT_DMNAM");
            });

            modelBuilder.Entity<TenantKeyEncryptingKey>(entity =>
            {
                entity.HasKey(e => e.TenantId);

                entity.ToTable("TENANT_KEY_ENCRYPTING_KEY");

                entity.HasIndex(e => e.TenantId, "TNTKEK_TNT");

                entity.HasIndex(e => e.CreatedTxStamp, "TNT_K_ENCRG_K_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TNT_K_ENCRG_K_TXSP");

                entity.Property(e => e.TenantId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TENANT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.KekText)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("KEK_TEXT");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Tenant)
                    .WithOne(p => p.TenantKeyEncryptingKey)
                    .HasForeignKey<TenantKeyEncryptingKey>(d => d.TenantId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TNTKEK_TNT");
            });

            modelBuilder.Entity<TermType>(entity =>
            {
                entity.ToTable("TERM_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "TERM_TYPE_PAR");

                entity.HasIndex(e => e.CreatedTxStamp, "TERM_TYPE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TERM_TYPE_TXSTMP");

                entity.Property(e => e.TermTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TERM_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("TERM_TYPE_PAR");
            });

            modelBuilder.Entity<TermTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.TermTypeId, e.AttrName });

                entity.ToTable("TERM_TYPE_ATTR");

                entity.HasIndex(e => e.TermTypeId, "TERM_TYPATR_TTYP");

                entity.HasIndex(e => e.CreatedTxStamp, "TRM_TP_ATTR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TRM_TP_ATTR_TXSTMP");

                entity.Property(e => e.TermTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TERM_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.TermType)
                    .WithMany(p => p.TermTypeAttrs)
                    .HasForeignKey(d => d.TermTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TERM_TYPATR_TTYP");
            });

            modelBuilder.Entity<TerminationReason>(entity =>
            {
                entity.ToTable("TERMINATION_REASON");

                entity.HasIndex(e => e.CreatedTxStamp, "TRMNTN_RSN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TRMNTN_RSN_TXSTMP");

                entity.Property(e => e.TerminationReasonId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TERMINATION_REASON_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<TerminationType>(entity =>
            {
                entity.ToTable("TERMINATION_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "TERM_TYP_PAR");

                entity.HasIndex(e => e.CreatedTxStamp, "TRMNTN_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TRMNTN_TP_TXSTMP");

                entity.Property(e => e.TerminationTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TERMINATION_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("TERM_TYP_PAR");
            });

            modelBuilder.Entity<TestFieldType>(entity =>
            {
                entity.ToTable("TEST_FIELD_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "TST_FLD_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TST_FLD_TP_TXSTMP");

                entity.Property(e => e.TestFieldTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TEST_FIELD_TYPE_ID");

                entity.Property(e => e.BlobField)
                    .HasColumnType("image")
                    .HasColumnName("BLOB_FIELD");

                entity.Property(e => e.ByteArrayField)
                    .HasColumnType("image")
                    .HasColumnName("BYTE_ARRAY_FIELD");

                entity.Property(e => e.ClobField)
                    .HasColumnType("text")
                    .HasColumnName("CLOB_FIELD");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DateField)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_FIELD");

                entity.Property(e => e.DateTimeField)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_TIME_FIELD");

                entity.Property(e => e.FixedPointField)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("FIXED_POINT_FIELD");

                entity.Property(e => e.FloatingPointField).HasColumnName("FLOATING_POINT_FIELD");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.NumericField).HasColumnName("NUMERIC_FIELD");

                entity.Property(e => e.ObjectField)
                    .HasColumnType("image")
                    .HasColumnName("OBJECT_FIELD");

                entity.Property(e => e.TimeField)
                    .HasColumnType("datetime")
                    .HasColumnName("TIME_FIELD");
            });

            modelBuilder.Entity<Testing>(entity =>
            {
                entity.ToTable("TESTING");

                entity.HasIndex(e => e.TestingTypeId, "ENTITY_ENTY_TYP");

                entity.HasIndex(e => e.CreatedTxStamp, "TESTING_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TESTING_TXSTMP");

                entity.Property(e => e.TestingId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TESTING_ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.TestingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TESTING_DATE");

                entity.Property(e => e.TestingName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TESTING_NAME");

                entity.Property(e => e.TestingSize).HasColumnName("TESTING_SIZE");

                entity.Property(e => e.TestingTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TESTING_TYPE_ID");

                entity.HasOne(d => d.TestingType)
                    .WithMany(p => p.Testings)
                    .HasForeignKey(d => d.TestingTypeId)
                    .HasConstraintName("ENTITY_ENTY_TYP");
            });

            modelBuilder.Entity<TestingCrypto>(entity =>
            {
                entity.ToTable("TESTING_CRYPTO");

                entity.HasIndex(e => e.CreatedTxStamp, "TSTNG_CRPT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TSTNG_CRPT_TXSTMP");

                entity.Property(e => e.TestingCryptoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TESTING_CRYPTO_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.EncryptedValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENCRYPTED_VALUE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SaltedEncryptedValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SALTED_ENCRYPTED_VALUE");

                entity.Property(e => e.TestingCryptoTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TESTING_CRYPTO_TYPE_ID");

                entity.Property(e => e.UnencryptedValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UNENCRYPTED_VALUE");
            });

            modelBuilder.Entity<TestingItem>(entity =>
            {
                entity.HasKey(e => new { e.TestingId, e.TestingSeqId });

                entity.ToTable("TESTING_ITEM");

                entity.HasIndex(e => e.TestingId, "TESTING_IT_TEST");

                entity.HasIndex(e => e.CreatedTxStamp, "TSTNG_ITM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TSTNG_ITM_TXSTMP");

                entity.Property(e => e.TestingId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TESTING_ID");

                entity.Property(e => e.TestingSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TESTING_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.TestingHistory)
                    .HasColumnType("text")
                    .HasColumnName("TESTING_HISTORY");

                entity.HasOne(d => d.Testing)
                    .WithMany(p => p.TestingItems)
                    .HasForeignKey(d => d.TestingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TESTING_IT_TEST");
            });

            modelBuilder.Entity<TestingNode>(entity =>
            {
                entity.ToTable("TESTING_NODE");

                entity.HasIndex(e => e.PrimaryParentNodeId, "TESTNG_NDE_PARNT");

                entity.HasIndex(e => e.CreatedTxStamp, "TSTNG_ND_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TSTNG_ND_TXSTMP");

                entity.Property(e => e.TestingNodeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TESTING_NODE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PrimaryParentNodeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_PARENT_NODE_ID");

                entity.HasOne(d => d.PrimaryParentNode)
                    .WithMany(p => p.InversePrimaryParentNode)
                    .HasForeignKey(d => d.PrimaryParentNodeId)
                    .HasConstraintName("TESTNG_NDE_PARNT");
            });

            modelBuilder.Entity<TestingNodeMember>(entity =>
            {
                entity.HasKey(e => new { e.TestingNodeId, e.TestingId, e.FromDate });

                entity.ToTable("TESTING_NODE_MEMBER");

                entity.HasIndex(e => e.TestingId, "TESTING_NMBR_TEST");

                entity.HasIndex(e => e.TestingNodeId, "TEST_NMBR_NODE");

                entity.HasIndex(e => e.CreatedTxStamp, "TSTG_ND_MMR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TSTG_ND_MMR_TXSTMP");

                entity.Property(e => e.TestingNodeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TESTING_NODE_ID");

                entity.Property(e => e.TestingId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TESTING_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.ExtendFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXTEND_FROM_DATE");

                entity.Property(e => e.ExtendThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXTEND_THRU_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Testing)
                    .WithMany(p => p.TestingNodeMembers)
                    .HasForeignKey(d => d.TestingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TESTING_NMBR_TEST");

                entity.HasOne(d => d.TestingNode)
                    .WithMany(p => p.TestingNodeMembers)
                    .HasForeignKey(d => d.TestingNodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TEST_NMBR_NODE");
            });

            modelBuilder.Entity<TestingRemoveAll>(entity =>
            {
                entity.ToTable("TESTING_REMOVE_ALL");

                entity.HasIndex(e => e.CreatedTxStamp, "TSTG_RMV_ALL_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TSTG_RMV_ALL_TXSTP");

                entity.Property(e => e.TestingRemoveAllId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TESTING_REMOVE_ALL_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<TestingStatus>(entity =>
            {
                entity.ToTable("TESTING_STATUS");

                entity.HasIndex(e => e.StatusId, "TEST_STA_STSITM");

                entity.HasIndex(e => e.ChangeByUserLoginId, "TEST_STA_USRLGN");

                entity.HasIndex(e => e.CreatedTxStamp, "TSTNG_STTS_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TSTNG_STTS_TXSTMP");

                entity.Property(e => e.TestingStatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TESTING_STATUS_ID");

                entity.Property(e => e.ChangeByUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.StatusDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STATUS_DATE");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.TestingId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TESTING_ID");

                entity.HasOne(d => d.ChangeByUserLogin)
                    .WithMany(p => p.TestingStatuses)
                    .HasForeignKey(d => d.ChangeByUserLoginId)
                    .HasConstraintName("TEST_STA_USRLGN");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.TestingStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("TEST_STA_STSITM");
            });

            modelBuilder.Entity<TestingSubtype>(entity =>
            {
                entity.HasKey(e => e.TestingTypeId);

                entity.ToTable("TESTING_SUBTYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "TSTNG_SBTP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TSTNG_SBTP_TXSTMP");

                entity.Property(e => e.TestingTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TESTING_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SubtypeDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SUBTYPE_DESCRIPTION");
            });

            modelBuilder.Entity<TestingType>(entity =>
            {
                entity.ToTable("TESTING_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "TSTNG_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TSTNG_TP_TXSTMP");

                entity.Property(e => e.TestingTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TESTING_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<TimeEntry>(entity =>
            {
                entity.ToTable("TIME_ENTRY");

                entity.HasIndex(e => e.CreatedTxStamp, "TIME_ENTRY_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TIME_ENTRY_TXSTMP");

                entity.HasIndex(e => new { e.InvoiceId, e.InvoiceItemSeqId }, "TIME_ENT_INVIT");

                entity.HasIndex(e => e.PartyId, "TIME_ENT_PRTY");

                entity.HasIndex(e => e.RateTypeId, "TIME_ENT_RTTP");

                entity.HasIndex(e => e.TimesheetId, "TIME_ENT_TSHT");

                entity.HasIndex(e => e.WorkEffortId, "TIME_ENT_WEFF");

                entity.Property(e => e.TimeEntryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TIME_ENTRY_ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Hours).HasColumnName("HOURS");

                entity.Property(e => e.InvoiceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ID");

                entity.Property(e => e.InvoiceItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ITEM_SEQ_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RateTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RATE_TYPE_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.Property(e => e.TimesheetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TIMESHEET_ID");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.TimeEntries)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("TIME_ENT_PRTY");

                entity.HasOne(d => d.RateType)
                    .WithMany(p => p.TimeEntries)
                    .HasForeignKey(d => d.RateTypeId)
                    .HasConstraintName("TIME_ENT_RTTP");

                entity.HasOne(d => d.Timesheet)
                    .WithMany(p => p.TimeEntries)
                    .HasForeignKey(d => d.TimesheetId)
                    .HasConstraintName("TIME_ENT_TSHT");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.TimeEntries)
                    .HasForeignKey(d => d.WorkEffortId)
                    .HasConstraintName("TIME_ENT_WEFF");

                entity.HasOne(d => d.InvoiceI)
                    .WithMany(p => p.TimeEntries)
                    .HasForeignKey(d => new { d.InvoiceId, d.InvoiceItemSeqId })
                    .HasConstraintName("TIME_ENT_INVIT");
            });

            modelBuilder.Entity<Timesheet>(entity =>
            {
                entity.ToTable("TIMESHEET");

                entity.HasIndex(e => e.ApprovedByUserLoginId, "TIMESHEET_AB_UL");

                entity.HasIndex(e => e.ClientPartyId, "TIMESHEET_CPTY");

                entity.HasIndex(e => e.PartyId, "TIMESHEET_PRTY");

                entity.HasIndex(e => e.StatusId, "TIMESHEET_STS");

                entity.HasIndex(e => e.CreatedTxStamp, "TIMESHEET_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TIMESHEET_TXSTMP");

                entity.Property(e => e.TimesheetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TIMESHEET_ID");

                entity.Property(e => e.ApprovedByUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("APPROVED_BY_USER_LOGIN_ID");

                entity.Property(e => e.ClientPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CLIENT_PARTY_ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ApprovedByUserLogin)
                    .WithMany(p => p.Timesheets)
                    .HasForeignKey(d => d.ApprovedByUserLoginId)
                    .HasConstraintName("TIMESHEET_AB_UL");

                entity.HasOne(d => d.ClientParty)
                    .WithMany(p => p.TimesheetClientParties)
                    .HasForeignKey(d => d.ClientPartyId)
                    .HasConstraintName("TIMESHEET_CPTY");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.TimesheetParties)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("TIMESHEET_PRTY");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Timesheets)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("TIMESHEET_STS");
            });

            modelBuilder.Entity<TimesheetRole>(entity =>
            {
                entity.HasKey(e => new { e.TimesheetId, e.PartyId, e.RoleTypeId });

                entity.ToTable("TIMESHEET_ROLE");

                entity.HasIndex(e => e.PartyId, "TIMESHTRL_PRTY");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "TIMESHTRL_PTRL");

                entity.HasIndex(e => e.TimesheetId, "TIMESHTRL_TSHT");

                entity.HasIndex(e => e.CreatedTxStamp, "TMSHT_RL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TMSHT_RL_TXSTMP");

                entity.Property(e => e.TimesheetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TIMESHEET_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.TimesheetRoles)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TIMESHTRL_PRTY");

                entity.HasOne(d => d.Timesheet)
                    .WithMany(p => p.TimesheetRoles)
                    .HasForeignKey(d => d.TimesheetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TIMESHTRL_TSHT");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.TimesheetRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TIMESHTRL_PTRL");
            });

            modelBuilder.Entity<TrackingCode>(entity =>
            {
                entity.ToTable("TRACKING_CODE");

                entity.HasIndex(e => e.MarketingCampaignId, "TKNG_COD_MKCMPN");

                entity.HasIndex(e => e.TrackingCodeTypeId, "TKNG_COD_TYP");

                entity.HasIndex(e => e.CreatedTxStamp, "TRCKNG_CD_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TRCKNG_CD_TXSTMP");

                entity.Property(e => e.TrackingCodeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TRACKING_CODE_ID");

                entity.Property(e => e.BillableLifetime).HasColumnName("BILLABLE_LIFETIME");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.GroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_ID");

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MarketingCampaignId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MARKETING_CAMPAIGN_ID");

                entity.Property(e => e.OverrideCss)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("OVERRIDE_CSS");

                entity.Property(e => e.OverrideLogo)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("OVERRIDE_LOGO");

                entity.Property(e => e.ProdCatalogId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PROD_CATALOG_ID");

                entity.Property(e => e.RedirectUrl)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("REDIRECT_URL");

                entity.Property(e => e.SubgroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SUBGROUP_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.Property(e => e.TrackableLifetime).HasColumnName("TRACKABLE_LIFETIME");

                entity.Property(e => e.TrackingCodeTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TRACKING_CODE_TYPE_ID");

                entity.HasOne(d => d.MarketingCampaign)
                    .WithMany(p => p.TrackingCodes)
                    .HasForeignKey(d => d.MarketingCampaignId)
                    .HasConstraintName("TKNG_COD_MKCMPN");

                entity.HasOne(d => d.TrackingCodeType)
                    .WithMany(p => p.TrackingCodes)
                    .HasForeignKey(d => d.TrackingCodeTypeId)
                    .HasConstraintName("TKNG_COD_TYP");
            });

            modelBuilder.Entity<TrackingCodeOrder>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.TrackingCodeTypeId });

                entity.ToTable("TRACKING_CODE_ORDER");

                entity.HasIndex(e => e.OrderId, "TKNG_CODODR_ODR");

                entity.HasIndex(e => e.TrackingCodeId, "TKNG_CODODR_TKCD");

                entity.HasIndex(e => e.TrackingCodeTypeId, "TKNG_CODODR_TYP");

                entity.HasIndex(e => e.CreatedTxStamp, "TRCKG_CD_ORR_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TRCKG_CD_ORR_TXSTP");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.TrackingCodeTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TRACKING_CODE_TYPE_ID");

                entity.Property(e => e.AffiliateReferredTimeStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("AFFILIATE_REFERRED_TIME_STAMP");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.HasExported)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_EXPORTED")
                    .IsFixedLength();

                entity.Property(e => e.IsBillable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_BILLABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SiteId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SITE_ID");

                entity.Property(e => e.TrackingCodeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TRACKING_CODE_ID");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.TrackingCodeOrders)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TKNG_CODODR_ODR");

                entity.HasOne(d => d.TrackingCode)
                    .WithMany(p => p.TrackingCodeOrders)
                    .HasForeignKey(d => d.TrackingCodeId)
                    .HasConstraintName("TKNG_CODODR_TKCD");

                entity.HasOne(d => d.TrackingCodeType)
                    .WithMany(p => p.TrackingCodeOrders)
                    .HasForeignKey(d => d.TrackingCodeTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TKNG_CODODR_TYP");
            });

            modelBuilder.Entity<TrackingCodeOrderReturn>(entity =>
            {
                entity.HasKey(e => new { e.ReturnId, e.OrderId, e.TrackingCodeTypeId });

                entity.ToTable("TRACKING_CODE_ORDER_RETURN");

                entity.HasIndex(e => e.OrderId, "TKNG_CODODR_ODRTN");

                entity.HasIndex(e => e.ReturnId, "TKNG_CODODR_RTN");

                entity.HasIndex(e => e.TrackingCodeId, "TKNG_CODODR_RTNTCD");

                entity.HasIndex(e => e.TrackingCodeTypeId, "TKNG_CODODR_RTNTYP");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TRG_CD_ORR_RTN_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "TRG_CD_ORR_RTN_TXS");

                entity.Property(e => e.ReturnId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RETURN_ID");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.TrackingCodeTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TRACKING_CODE_TYPE_ID");

                entity.Property(e => e.AffiliateReferredTimeStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("AFFILIATE_REFERRED_TIME_STAMP");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.HasExported)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_EXPORTED")
                    .IsFixedLength();

                entity.Property(e => e.IsBillable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_BILLABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.SiteId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SITE_ID");

                entity.Property(e => e.TrackingCodeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TRACKING_CODE_ID");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.TrackingCodeOrderReturns)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TKNG_CODODR_ODRTN");

                entity.HasOne(d => d.Return)
                    .WithMany(p => p.TrackingCodeOrderReturns)
                    .HasForeignKey(d => d.ReturnId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TKNG_CODODR_RTN");

                entity.HasOne(d => d.TrackingCode)
                    .WithMany(p => p.TrackingCodeOrderReturns)
                    .HasForeignKey(d => d.TrackingCodeId)
                    .HasConstraintName("TKNG_CODODR_RTNTCD");

                entity.HasOne(d => d.TrackingCodeType)
                    .WithMany(p => p.TrackingCodeOrderReturns)
                    .HasForeignKey(d => d.TrackingCodeTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TKNG_CODODR_RTNTYP");
            });

            modelBuilder.Entity<TrackingCodeType>(entity =>
            {
                entity.ToTable("TRACKING_CODE_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "TRCKG_CD_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TRCKG_CD_TP_TXSTMP");

                entity.Property(e => e.TrackingCodeTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TRACKING_CODE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<TrackingCodeVisit>(entity =>
            {
                entity.HasKey(e => new { e.TrackingCodeId, e.VisitId, e.FromDate });

                entity.ToTable("TRACKING_CODE_VISIT");

                entity.HasIndex(e => e.SourceEnumId, "TKNG_CODVST_SRCEM");

                entity.HasIndex(e => e.TrackingCodeId, "TKNG_CODVST_TKCD");

                entity.HasIndex(e => e.CreatedTxStamp, "TRCKG_CD_VST_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TRCKG_CD_VST_TXSTP");

                entity.Property(e => e.TrackingCodeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TRACKING_CODE_ID");

                entity.Property(e => e.VisitId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VISIT_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SourceEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SOURCE_ENUM_ID");

                entity.HasOne(d => d.SourceEnum)
                    .WithMany(p => p.TrackingCodeVisits)
                    .HasForeignKey(d => d.SourceEnumId)
                    .HasConstraintName("TKNG_CODVST_SRCEM");

                entity.HasOne(d => d.TrackingCode)
                    .WithMany(p => p.TrackingCodeVisits)
                    .HasForeignKey(d => d.TrackingCodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TKNG_CODVST_TKCD");
            });

            modelBuilder.Entity<TrainingClassType>(entity =>
            {
                entity.ToTable("TRAINING_CLASS_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "TRAIN_TYPE_PAR");

                entity.HasIndex(e => e.CreatedTxStamp, "TRNG_CLS_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TRNG_CLS_TP_TXSTMP");

                entity.Property(e => e.TrainingClassTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TRAINING_CLASS_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("TRAIN_TYPE_PAR");
            });

            modelBuilder.Entity<TrainingRequest>(entity =>
            {
                entity.ToTable("TRAINING_REQUEST");

                entity.HasIndex(e => e.CreatedTxStamp, "TRNNG_RQST_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "TRNNG_RQST_TXSTMP");

                entity.Property(e => e.TrainingRequestId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TRAINING_REQUEST_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<UnemploymentClaim>(entity =>
            {
                entity.ToTable("UNEMPLOYMENT_CLAIM");

                entity.HasIndex(e => e.CreatedTxStamp, "UNMPLMT_CLM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "UNMPLMT_CLM_TXSTMP");

                entity.Property(e => e.UnemploymentClaimId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UNEMPLOYMENT_CLAIM_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PartyIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID_FROM");

                entity.Property(e => e.PartyIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID_TO");

                entity.Property(e => e.RoleTypeIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID_FROM");

                entity.Property(e => e.RoleTypeIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID_TO");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.Property(e => e.UnemploymentClaimDate)
                    .HasColumnType("datetime")
                    .HasColumnName("UNEMPLOYMENT_CLAIM_DATE");
            });

            modelBuilder.Entity<Uom>(entity =>
            {
                entity.ToTable("UOM");

                entity.HasIndex(e => e.UomTypeId, "UOM_TO_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "UOM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "UOM_TXSTMP");

                entity.Property(e => e.UomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UOM_ID");

                entity.Property(e => e.Abbreviation)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ABBREVIATION");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.NumericCode).HasColumnName("NUMERIC_CODE");

                entity.Property(e => e.UomTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UOM_TYPE_ID");

                entity.HasOne(d => d.UomType)
                    .WithMany(p => p.Uoms)
                    .HasForeignKey(d => d.UomTypeId)
                    .HasConstraintName("UOM_TO_TYPE");
            });

            modelBuilder.Entity<UomConversion>(entity =>
            {
                entity.HasKey(e => new { e.UomId, e.UomIdTo });

                entity.ToTable("UOM_CONVERSION");

                entity.HasIndex(e => e.CreatedTxStamp, "UM_CNVRSN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "UM_CNVRSN_TXSTMP");

                entity.HasIndex(e => e.UomId, "UOM_CONV_MAIN");

                entity.HasIndex(e => e.UomIdTo, "UOM_CONV_TO");

                entity.HasIndex(e => e.CustomMethodId, "UOM_CUSTOM_METHOD");

                entity.Property(e => e.UomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UOM_ID");

                entity.Property(e => e.UomIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UOM_ID_TO");

                entity.Property(e => e.ConversionFactor).HasColumnName("CONVERSION_FACTOR");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CustomMethodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_METHOD_ID");

                entity.Property(e => e.DecimalScale).HasColumnName("DECIMAL_SCALE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.RoundingMode)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROUNDING_MODE");

                entity.HasOne(d => d.CustomMethod)
                    .WithMany(p => p.UomConversions)
                    .HasForeignKey(d => d.CustomMethodId)
                    .HasConstraintName("UOM_CUSTOM_METHOD");

                entity.HasOne(d => d.Uom)
                    .WithMany(p => p.UomConversionUoms)
                    .HasForeignKey(d => d.UomId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UOM_CONV_MAIN");

                entity.HasOne(d => d.UomIdToNavigation)
                    .WithMany(p => p.UomConversionUomIdToNavigations)
                    .HasForeignKey(d => d.UomIdTo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UOM_CONV_TO");
            });

            modelBuilder.Entity<UomConversionDated>(entity =>
            {
                entity.HasKey(e => new { e.UomId, e.UomIdTo, e.FromDate });

                entity.ToTable("UOM_CONVERSION_DATED");

                entity.HasIndex(e => e.UomId, "DATE_UOM_CONV_MAIN");

                entity.HasIndex(e => e.UomIdTo, "DATE_UOM_CONV_TO");

                entity.HasIndex(e => e.CreatedTxStamp, "UM_CNVRN_DTD_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "UM_CNVRN_DTD_TXSTP");

                entity.HasIndex(e => e.CustomMethodId, "UOMD_CUSTOM_METHOD");

                entity.HasIndex(e => e.PurposeEnumId, "UOMD_PURPOSE_ENUM");

                entity.Property(e => e.UomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UOM_ID");

                entity.Property(e => e.UomIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UOM_ID_TO");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.ConversionFactor).HasColumnName("CONVERSION_FACTOR");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CustomMethodId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_METHOD_ID");

                entity.Property(e => e.DecimalScale).HasColumnName("DECIMAL_SCALE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PurposeEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PURPOSE_ENUM_ID");

                entity.Property(e => e.RoundingMode)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROUNDING_MODE");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.CustomMethod)
                    .WithMany(p => p.UomConversionDateds)
                    .HasForeignKey(d => d.CustomMethodId)
                    .HasConstraintName("UOMD_CUSTOM_METHOD");

                entity.HasOne(d => d.PurposeEnum)
                    .WithMany(p => p.UomConversionDateds)
                    .HasForeignKey(d => d.PurposeEnumId)
                    .HasConstraintName("UOMD_PURPOSE_ENUM");

                entity.HasOne(d => d.Uom)
                    .WithMany(p => p.UomConversionDatedUoms)
                    .HasForeignKey(d => d.UomId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DATE_UOM_CONV_MAIN");

                entity.HasOne(d => d.UomIdToNavigation)
                    .WithMany(p => p.UomConversionDatedUomIdToNavigations)
                    .HasForeignKey(d => d.UomIdTo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DATE_UOM_CONV_TO");
            });

            modelBuilder.Entity<UomGroup>(entity =>
            {
                entity.HasKey(e => new { e.UomGroupId, e.UomId });

                entity.ToTable("UOM_GROUP");

                entity.HasIndex(e => e.CreatedTxStamp, "UOM_GROUP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "UOM_GROUP_TXSTMP");

                entity.HasIndex(e => e.UomId, "UOM_GROUP_UOM");

                entity.Property(e => e.UomGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UOM_GROUP_ID");

                entity.Property(e => e.UomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UOM_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Uom)
                    .WithMany(p => p.UomGroups)
                    .HasForeignKey(d => d.UomId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UOM_GROUP_UOM");
            });

            modelBuilder.Entity<UomType>(entity =>
            {
                entity.ToTable("UOM_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "UOM_TYPE_PARENT");

                entity.HasIndex(e => e.CreatedTxStamp, "UOM_TYPE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "UOM_TYPE_TXSTMP");

                entity.Property(e => e.UomTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UOM_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("UOM_TYPE_PARENT");
            });

            modelBuilder.Entity<UserAgent>(entity =>
            {
                entity.ToTable("USER_AGENT");

                entity.HasIndex(e => e.BrowserTypeId, "UAGENT_BROWSER");

                entity.HasIndex(e => e.UserAgentMethodTypeId, "UAGENT_METHOD");

                entity.HasIndex(e => e.PlatformTypeId, "UAGENT_PLATFORM");

                entity.HasIndex(e => e.ProtocolTypeId, "UAGENT_PROTOCOL");

                entity.HasIndex(e => e.UserAgentTypeId, "UAGENT_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "USER_AGENT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "USER_AGENT_TXSTMP");

                entity.Property(e => e.UserAgentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("USER_AGENT_ID");

                entity.Property(e => e.BrowserTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BROWSER_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PlatformTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PLATFORM_TYPE_ID");

                entity.Property(e => e.ProtocolTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PROTOCOL_TYPE_ID");

                entity.Property(e => e.UserAgentMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("USER_AGENT_METHOD_TYPE_ID");

                entity.Property(e => e.UserAgentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("USER_AGENT_TYPE_ID");

                entity.HasOne(d => d.BrowserType)
                    .WithMany(p => p.UserAgents)
                    .HasForeignKey(d => d.BrowserTypeId)
                    .HasConstraintName("UAGENT_BROWSER");

                entity.HasOne(d => d.PlatformType)
                    .WithMany(p => p.UserAgents)
                    .HasForeignKey(d => d.PlatformTypeId)
                    .HasConstraintName("UAGENT_PLATFORM");

                entity.HasOne(d => d.ProtocolType)
                    .WithMany(p => p.UserAgents)
                    .HasForeignKey(d => d.ProtocolTypeId)
                    .HasConstraintName("UAGENT_PROTOCOL");

                entity.HasOne(d => d.UserAgentMethodType)
                    .WithMany(p => p.UserAgents)
                    .HasForeignKey(d => d.UserAgentMethodTypeId)
                    .HasConstraintName("UAGENT_METHOD");

                entity.HasOne(d => d.UserAgentType)
                    .WithMany(p => p.UserAgents)
                    .HasForeignKey(d => d.UserAgentTypeId)
                    .HasConstraintName("UAGENT_TYPE");
            });

            modelBuilder.Entity<UserAgentMethodType>(entity =>
            {
                entity.ToTable("USER_AGENT_METHOD_TYPE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "USR_AGT_MTD_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "USR_AGT_MTD_TP_TXS");

                entity.Property(e => e.UserAgentMethodTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("USER_AGENT_METHOD_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<UserAgentType>(entity =>
            {
                entity.ToTable("USER_AGENT_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "USR_AGNT_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "USR_AGNT_TP_TXSTMP");

                entity.Property(e => e.UserAgentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("USER_AGENT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<UserLogin>(entity =>
            {
                entity.ToTable("USER_LOGIN");

                entity.HasIndex(e => e.CreatedTxStamp, "USER_LOGIN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "USER_LOGIN_TXSTMP");

                entity.HasIndex(e => e.PartyId, "USER_PARTY");

                entity.Property(e => e.UserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USER_LOGIN_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrentPassword)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CURRENT_PASSWORD");

                entity.Property(e => e.DisabledBy)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DISABLED_BY");

                entity.Property(e => e.DisabledDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("DISABLED_DATE_TIME");

                entity.Property(e => e.Enabled)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ENABLED")
                    .IsFixedLength();

                entity.Property(e => e.ExternalAuthId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EXTERNAL_AUTH_ID");

                entity.Property(e => e.HasLoggedOut)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_LOGGED_OUT")
                    .IsFixedLength();

                entity.Property(e => e.IsSystem)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SYSTEM")
                    .IsFixedLength();

                entity.Property(e => e.LastCurrencyUom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("LAST_CURRENCY_UOM");

                entity.Property(e => e.LastLocale)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LAST_LOCALE");

                entity.Property(e => e.LastTimeZone)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAST_TIME_ZONE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.PasswordHint)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PASSWORD_HINT");

                entity.Property(e => e.RequirePasswordChange)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REQUIRE_PASSWORD_CHANGE")
                    .IsFixedLength();

                entity.Property(e => e.SuccessiveFailedLogins).HasColumnName("SUCCESSIVE_FAILED_LOGINS");

                entity.Property(e => e.UserLdapDn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USER_LDAP_DN");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.UserLogins)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("USER_PARTY");
            });

            modelBuilder.Entity<UserLoginHistory>(entity =>
            {
                entity.HasKey(e => new { e.UserLoginId, e.FromDate });

                entity.ToTable("USER_LOGIN_HISTORY");

                entity.HasIndex(e => e.PartyId, "USER_LH_PARTY");

                entity.HasIndex(e => e.UserLoginId, "USER_LH_USER");

                entity.HasIndex(e => e.CreatedTxStamp, "USR_LGN_HSR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "USR_LGN_HSR_TXSTMP");

                entity.Property(e => e.UserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USER_LOGIN_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OriginUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ORIGIN_USER_LOGIN_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.PasswordUsed)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PASSWORD_USED");

                entity.Property(e => e.SuccessfulLogin)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUCCESSFUL_LOGIN")
                    .IsFixedLength();

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.Property(e => e.VisitId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VISIT_ID");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.UserLoginHistories)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("USER_LH_PARTY");

                entity.HasOne(d => d.UserLogin)
                    .WithMany(p => p.UserLoginHistories)
                    .HasForeignKey(d => d.UserLoginId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("USER_LH_USER");
            });

            modelBuilder.Entity<UserLoginPasswordHistory>(entity =>
            {
                entity.HasKey(e => new { e.UserLoginId, e.FromDate });

                entity.ToTable("USER_LOGIN_PASSWORD_HISTORY");

                entity.HasIndex(e => e.UserLoginId, "USER_LPH_USER");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "USR_LGN_PSD_HSR_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "USR_LGN_PSD_HSR_TS");

                entity.Property(e => e.UserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USER_LOGIN_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrentPassword)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CURRENT_PASSWORD");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.UserLogin)
                    .WithMany(p => p.UserLoginPasswordHistories)
                    .HasForeignKey(d => d.UserLoginId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("USER_LPH_USER");
            });

            modelBuilder.Entity<UserLoginSecurityGroup>(entity =>
            {
                entity.HasKey(e => new { e.UserLoginId, e.GroupId, e.FromDate });

                entity.ToTable("USER_LOGIN_SECURITY_GROUP");

                entity.HasIndex(e => e.GroupId, "USER_SECGRP_GRP");

                entity.HasIndex(e => e.UserLoginId, "USER_SECGRP_USER");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "USR_LGN_SCT_GRP_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "USR_LGN_SCT_GRP_TS");

                entity.Property(e => e.UserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USER_LOGIN_ID");

                entity.Property(e => e.GroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.UserLoginSecurityGroups)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("USER_SECGRP_GRP");

                entity.HasOne(d => d.UserLogin)
                    .WithMany(p => p.UserLoginSecurityGroups)
                    .HasForeignKey(d => d.UserLoginId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("USER_SECGRP_USER");
            });

            modelBuilder.Entity<UserLoginSession>(entity =>
            {
                entity.HasKey(e => e.UserLoginId);

                entity.ToTable("USER_LOGIN_SESSION");

                entity.HasIndex(e => e.UserLoginId, "USER_SESSION_USER");

                entity.HasIndex(e => e.CreatedTxStamp, "USR_LGN_SSN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "USR_LGN_SSN_TXSTMP");

                entity.Property(e => e.UserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USER_LOGIN_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SavedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SAVED_DATE");

                entity.Property(e => e.SessionData)
                    .HasColumnType("text")
                    .HasColumnName("SESSION_DATA");

                entity.HasOne(d => d.UserLogin)
                    .WithOne(p => p.UserLoginSession)
                    .HasForeignKey<UserLoginSession>(d => d.UserLoginId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("USER_SESSION_USER");
            });

            modelBuilder.Entity<UserPrefGroupType>(entity =>
            {
                entity.ToTable("USER_PREF_GROUP_TYPE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "USR_PRF_GRP_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "USR_PRF_GRP_TP_TXS");

                entity.Property(e => e.UserPrefGroupTypeId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("USER_PREF_GROUP_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<UserPreference>(entity =>
            {
                entity.HasKey(e => new { e.UserLoginId, e.UserPrefTypeId });

                entity.ToTable("USER_PREFERENCE");

                entity.HasIndex(e => e.UserPrefGroupTypeId, "UP_USER_GROUP_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "USR_PRFRNC_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "USR_PRFRNC_TXSTMP");

                entity.Property(e => e.UserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USER_LOGIN_ID");

                entity.Property(e => e.UserPrefTypeId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("USER_PREF_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.UserPrefDataType)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("USER_PREF_DATA_TYPE");

                entity.Property(e => e.UserPrefGroupTypeId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("USER_PREF_GROUP_TYPE_ID");

                entity.Property(e => e.UserPrefValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("USER_PREF_VALUE");

                entity.HasOne(d => d.UserPrefGroupType)
                    .WithMany(p => p.UserPreferences)
                    .HasForeignKey(d => d.UserPrefGroupTypeId)
                    .HasConstraintName("UP_USER_GROUP_TYPE");
            });

            modelBuilder.Entity<ValidContactMechRole>(entity =>
            {
                entity.HasKey(e => new { e.RoleTypeId, e.ContactMechTypeId });

                entity.ToTable("VALID_CONTACT_MECH_ROLE");

                entity.HasIndex(e => e.ContactMechTypeId, "VAL_CMRLE_CMTYPE");

                entity.HasIndex(e => e.RoleTypeId, "VAL_CMRLE_ROLE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "VLD_CNT_MCH_RL_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "VLD_CNT_MCH_RL_TXS");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.ContactMechTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ContactMechType)
                    .WithMany(p => p.ValidContactMechRoles)
                    .HasForeignKey(d => d.ContactMechTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("VAL_CMRLE_CMTYPE");

                entity.HasOne(d => d.RoleType)
                    .WithMany(p => p.ValidContactMechRoles)
                    .HasForeignKey(d => d.RoleTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("VAL_CMRLE_ROLE");
            });

            modelBuilder.Entity<ValidResponsibility>(entity =>
            {
                entity.HasKey(e => new { e.EmplPositionTypeId, e.ResponsibilityTypeId, e.FromDate });

                entity.ToTable("VALID_RESPONSIBILITY");

                entity.HasIndex(e => e.EmplPositionTypeId, "VALID_RTY_EPSTP");

                entity.HasIndex(e => e.ResponsibilityTypeId, "VALID_RTY_RYTP");

                entity.HasIndex(e => e.CreatedTxStamp, "VLD_RSPNSBT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "VLD_RSPNSBT_TXSTMP");

                entity.Property(e => e.EmplPositionTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EMPL_POSITION_TYPE_ID");

                entity.Property(e => e.ResponsibilityTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RESPONSIBILITY_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.EmplPositionType)
                    .WithMany(p => p.ValidResponsibilities)
                    .HasForeignKey(d => d.EmplPositionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("VALID_RTY_EPSTP");

                entity.HasOne(d => d.ResponsibilityType)
                    .WithMany(p => p.ValidResponsibilities)
                    .HasForeignKey(d => d.ResponsibilityTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("VALID_RTY_RYTP");
            });

            modelBuilder.Entity<ValueLinkKey>(entity =>
            {
                entity.HasKey(e => e.MerchantId);

                entity.ToTable("VALUE_LINK_KEY");

                entity.HasIndex(e => e.CreatedTxStamp, "VL_LNK_K_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "VL_LNK_K_TXSTMP");

                entity.Property(e => e.MerchantId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("MERCHANT_ID");

                entity.Property(e => e.CreatedByTerminal)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_TERMINAL");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.ExchangeKey)
                    .HasColumnType("text")
                    .HasColumnName("EXCHANGE_KEY");

                entity.Property(e => e.LastModifiedByTerminal)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_TERMINAL");

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LastWorkingKey)
                    .HasColumnType("text")
                    .HasColumnName("LAST_WORKING_KEY");

                entity.Property(e => e.PrivateKey)
                    .HasColumnType("text")
                    .HasColumnName("PRIVATE_KEY");

                entity.Property(e => e.PublicKey)
                    .HasColumnType("text")
                    .HasColumnName("PUBLIC_KEY");

                entity.Property(e => e.WorkingKey)
                    .HasColumnType("text")
                    .HasColumnName("WORKING_KEY");

                entity.Property(e => e.WorkingKeyIndex).HasColumnName("WORKING_KEY_INDEX");
            });

            modelBuilder.Entity<VarianceReason>(entity =>
            {
                entity.ToTable("VARIANCE_REASON");

                entity.HasIndex(e => e.CreatedTxStamp, "VRNC_RSN_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "VRNC_RSN_TXSTMP");

                entity.Property(e => e.VarianceReasonId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VARIANCE_REASON_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<VarianceReasonGlAccount>(entity =>
            {
                entity.HasKey(e => new { e.VarianceReasonId, e.OrganizationPartyId });

                entity.ToTable("VARIANCE_REASON_GL_ACCOUNT");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "VRC_RSN_GL_ACT_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "VRC_RSN_GL_ACT_TXS");

                entity.HasIndex(e => e.GlAccountId, "VRGL_GLACCT");

                entity.HasIndex(e => e.OrganizationPartyId, "VRGL_PARTY");

                entity.HasIndex(e => e.VarianceReasonId, "VRGL_VREAS");

                entity.Property(e => e.VarianceReasonId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VARIANCE_REASON_ID");

                entity.Property(e => e.OrganizationPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_PARTY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GlAccountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCOUNT_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.GlAccount)
                    .WithMany(p => p.VarianceReasonGlAccounts)
                    .HasForeignKey(d => d.GlAccountId)
                    .HasConstraintName("VRGL_GLACCT");

                entity.HasOne(d => d.OrganizationParty)
                    .WithMany(p => p.VarianceReasonGlAccounts)
                    .HasForeignKey(d => d.OrganizationPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("VRGL_PARTY");

                entity.HasOne(d => d.VarianceReason)
                    .WithMany(p => p.VarianceReasonGlAccounts)
                    .HasForeignKey(d => d.VarianceReasonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("VRGL_VREAS");
            });

            modelBuilder.Entity<Vendor>(entity =>
            {
                entity.HasKey(e => e.PartyId);

                entity.ToTable("VENDOR");

                entity.HasIndex(e => e.PartyId, "VENDOR_PARTY");

                entity.HasIndex(e => e.CreatedTxStamp, "VENDOR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "VENDOR_TXSTMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ManifestCompanyName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANIFEST_COMPANY_NAME");

                entity.Property(e => e.ManifestCompanyTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANIFEST_COMPANY_TITLE");

                entity.Property(e => e.ManifestLogoUrl)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("MANIFEST_LOGO_URL");

                entity.Property(e => e.ManifestPolicies)
                    .HasColumnType("text")
                    .HasColumnName("MANIFEST_POLICIES");

                entity.HasOne(d => d.Party)
                    .WithOne(p => p.Vendor)
                    .HasForeignKey<Vendor>(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("VENDOR_PARTY");
            });

            modelBuilder.Entity<VendorProduct>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.VendorPartyId, e.ProductStoreGroupId });

                entity.ToTable("VENDOR_PRODUCT");

                entity.HasIndex(e => e.ProductId, "VENDPROD_PROD");

                entity.HasIndex(e => e.ProductStoreGroupId, "VENDPROD_PSGRP");

                entity.HasIndex(e => e.VendorPartyId, "VENDPROD_VPTY");

                entity.HasIndex(e => e.CreatedTxStamp, "VNDR_PRDCT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "VNDR_PRDCT_TXSTMP");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.VendorPartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VENDOR_PARTY_ID");

                entity.Property(e => e.ProductStoreGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_GROUP_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.VendorProducts)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("VENDPROD_PROD");

                entity.HasOne(d => d.ProductStoreGroup)
                    .WithMany(p => p.VendorProducts)
                    .HasForeignKey(d => d.ProductStoreGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("VENDPROD_PSGRP");

                entity.HasOne(d => d.VendorParty)
                    .WithMany(p => p.VendorProducts)
                    .HasForeignKey(d => d.VendorPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("VENDPROD_VPTY");
            });

            modelBuilder.Entity<VideoDataResource>(entity =>
            {
                entity.HasKey(e => e.DataResourceId);

                entity.ToTable("VIDEO_DATA_RESOURCE");

                entity.HasIndex(e => e.DataResourceId, "DATA_REC_VIDEO");

                entity.HasIndex(e => e.CreatedTxStamp, "VD_DT_RSRC_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "VD_DT_RSRC_TXSTMP");

                entity.Property(e => e.DataResourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DATA_RESOURCE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.VideoData)
                    .HasColumnType("image")
                    .HasColumnName("VIDEO_DATA");

                entity.HasOne(d => d.DataResource)
                    .WithOne(p => p.VideoDataResource)
                    .HasForeignKey<VideoDataResource>(d => d.DataResourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DATA_REC_VIDEO");
            });

            modelBuilder.Entity<Visit>(entity =>
            {
                entity.ToTable("VISIT");

                entity.HasIndex(e => e.ThruDate, "VISIT_THRU_IDX");

                entity.HasIndex(e => e.UserAgentId, "VISIT_USER_AGNT");

                entity.HasIndex(e => e.VisitorId, "VISIT_VISITOR");

                entity.Property(e => e.VisitId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VISIT_ID");

                entity.Property(e => e.ClientHostName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CLIENT_HOST_NAME");

                entity.Property(e => e.ClientIpAddress)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CLIENT_IP_ADDRESS");

                entity.Property(e => e.ClientIpCountryGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CLIENT_IP_COUNTRY_GEO_ID");

                entity.Property(e => e.ClientIpIspName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CLIENT_IP_ISP_NAME");

                entity.Property(e => e.ClientIpPostalCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CLIENT_IP_POSTAL_CODE");

                entity.Property(e => e.ClientIpStateProvGeoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CLIENT_IP_STATE_PROV_GEO_ID");

                entity.Property(e => e.ClientUser)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CLIENT_USER");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.Cookie)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("COOKIE");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.InitialLocale)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INITIAL_LOCALE");

                entity.Property(e => e.InitialReferrer)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("INITIAL_REFERRER");

                entity.Property(e => e.InitialRequest)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("INITIAL_REQUEST");

                entity.Property(e => e.InitialUserAgent)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("INITIAL_USER_AGENT");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.ServerHostName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SERVER_HOST_NAME");

                entity.Property(e => e.ServerIpAddress)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SERVER_IP_ADDRESS");

                entity.Property(e => e.SessionId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SESSION_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.Property(e => e.UserAgentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("USER_AGENT_ID");

                entity.Property(e => e.UserCreated)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USER_CREATED")
                    .IsFixedLength();

                entity.Property(e => e.UserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USER_LOGIN_ID");

                entity.Property(e => e.VisitorId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VISITOR_ID");

                entity.Property(e => e.WebappName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("WEBAPP_NAME");

                entity.HasOne(d => d.UserAgent)
                    .WithMany(p => p.Visits)
                    .HasForeignKey(d => d.UserAgentId)
                    .HasConstraintName("VISIT_USER_AGNT");

                entity.HasOne(d => d.Visitor)
                    .WithMany(p => p.Visits)
                    .HasForeignKey(d => d.VisitorId)
                    .HasConstraintName("VISIT_VISITOR");
            });

            modelBuilder.Entity<Visitor>(entity =>
            {
                entity.ToTable("VISITOR");

                entity.HasIndex(e => e.CreatedTxStamp, "VISITOR_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "VISITOR_TXSTMP");

                entity.Property(e => e.VisitorId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VISITOR_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.UserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USER_LOGIN_ID");
            });

            modelBuilder.Entity<VisualTheme>(entity =>
            {
                entity.ToTable("VISUAL_THEME");

                entity.HasIndex(e => e.CreatedTxStamp, "VSL_THM_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "VSL_THM_TXSTMP");

                entity.HasIndex(e => e.VisualThemeSetId, "VT_THEME_SET");

                entity.Property(e => e.VisualThemeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VISUAL_THEME_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.VisualThemeSetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VISUAL_THEME_SET_ID");

                entity.HasOne(d => d.VisualThemeSet)
                    .WithMany(p => p.VisualThemes)
                    .HasForeignKey(d => d.VisualThemeSetId)
                    .HasConstraintName("VT_THEME_SET");
            });

            modelBuilder.Entity<VisualThemeResource>(entity =>
            {
                entity.HasKey(e => new { e.VisualThemeId, e.ResourceTypeEnumId, e.SequenceId });

                entity.ToTable("VISUAL_THEME_RESOURCE");

                entity.HasIndex(e => e.CreatedTxStamp, "VSL_THM_RSC_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "VSL_THM_RSC_TXSTMP");

                entity.HasIndex(e => e.VisualThemeId, "VT_RES_THEME");

                entity.HasIndex(e => e.ResourceTypeEnumId, "VT_RES_TYPE_ENUM");

                entity.Property(e => e.VisualThemeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VISUAL_THEME_ID");

                entity.Property(e => e.ResourceTypeEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RESOURCE_TYPE_ENUM_ID");

                entity.Property(e => e.SequenceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SEQUENCE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ResourceValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("RESOURCE_VALUE");

                entity.HasOne(d => d.ResourceTypeEnum)
                    .WithMany(p => p.VisualThemeResources)
                    .HasForeignKey(d => d.ResourceTypeEnumId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("VT_RES_TYPE_ENUM");

                entity.HasOne(d => d.VisualTheme)
                    .WithMany(p => p.VisualThemeResources)
                    .HasForeignKey(d => d.VisualThemeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("VT_RES_THEME");
            });

            modelBuilder.Entity<VisualThemeSet>(entity =>
            {
                entity.ToTable("VISUAL_THEME_SET");

                entity.HasIndex(e => e.CreatedTxStamp, "VSL_THM_ST_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "VSL_THM_ST_TXSTMP");

                entity.Property(e => e.VisualThemeSetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VISUAL_THEME_SET_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<WebAnalyticsConfig>(entity =>
            {
                entity.HasKey(e => new { e.WebSiteId, e.WebAnalyticsTypeId });

                entity.ToTable("WEB_ANALYTICS_CONFIG");

                entity.HasIndex(e => e.CreatedTxStamp, "WB_ANLTS_CNG_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WB_ANLTS_CNG_TXSTP");

                entity.Property(e => e.WebSiteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WEB_SITE_ID");

                entity.Property(e => e.WebAnalyticsTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WEB_ANALYTICS_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.WebAnalyticsCode)
                    .HasColumnType("text")
                    .HasColumnName("WEB_ANALYTICS_CODE");
            });

            modelBuilder.Entity<WebAnalyticsType>(entity =>
            {
                entity.ToTable("WEB_ANALYTICS_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "WANA_TYP_PARENT");

                entity.HasIndex(e => e.CreatedTxStamp, "WB_ANLTS_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WB_ANLTS_TP_TXSTMP");

                entity.Property(e => e.WebAnalyticsTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WEB_ANALYTICS_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("WANA_TYP_PARENT");
            });

            modelBuilder.Entity<WebPage>(entity =>
            {
                entity.ToTable("WEB_PAGE");

                entity.HasIndex(e => e.ContentId, "WEB_PAGE_CONTENT");

                entity.HasIndex(e => e.WebSiteId, "WEB_PAGE_SITE");

                entity.HasIndex(e => e.CreatedTxStamp, "WEB_PAGE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WEB_PAGE_TXSTMP");

                entity.Property(e => e.WebPageId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WEB_PAGE_ID");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PageName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PAGE_NAME");

                entity.Property(e => e.WebSiteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WEB_SITE_ID");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.WebPages)
                    .HasForeignKey(d => d.ContentId)
                    .HasConstraintName("WEB_PAGE_CONTENT");

                entity.HasOne(d => d.WebSite)
                    .WithMany(p => p.WebPages)
                    .HasForeignKey(d => d.WebSiteId)
                    .HasConstraintName("WEB_PAGE_SITE");
            });

            modelBuilder.Entity<WebPreferenceType>(entity =>
            {
                entity.ToTable("WEB_PREFERENCE_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "WB_PRFRC_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WB_PRFRC_TP_TXSTMP");

                entity.Property(e => e.WebPreferenceTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WEB_PREFERENCE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<WebSite>(entity =>
            {
                entity.ToTable("WEB_SITE");

                entity.HasIndex(e => e.ProductStoreId, "WEB_SITE_PRDS");

                entity.HasIndex(e => e.VisualThemeSetId, "WEB_SITE_THEME_SET");

                entity.HasIndex(e => e.CreatedTxStamp, "WEB_SITE_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WEB_SITE_TXSTMP");

                entity.Property(e => e.WebSiteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WEB_SITE_ID");

                entity.Property(e => e.AllowProductStoreChange)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ALLOW_PRODUCT_STORE_CHANGE")
                    .IsFixedLength();

                entity.Property(e => e.CookieDomain)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COOKIE_DOMAIN");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DisplayMaintenancePage)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DISPLAY_MAINTENANCE_PAGE")
                    .IsFixedLength();

                entity.Property(e => e.EnableHttps)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ENABLE_HTTPS")
                    .IsFixedLength();

                entity.Property(e => e.HostedPathAlias)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("HOSTED_PATH_ALIAS");

                entity.Property(e => e.HttpHost)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("HTTP_HOST");

                entity.Property(e => e.HttpPort)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("HTTP_PORT");

                entity.Property(e => e.HttpsHost)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("HTTPS_HOST");

                entity.Property(e => e.HttpsPort)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("HTTPS_PORT");

                entity.Property(e => e.IsDefault)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_DEFAULT")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ProductStoreId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_STORE_ID");

                entity.Property(e => e.SecureContentPrefix)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SECURE_CONTENT_PREFIX");

                entity.Property(e => e.SiteName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SITE_NAME");

                entity.Property(e => e.StandardContentPrefix)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("STANDARD_CONTENT_PREFIX");

                entity.Property(e => e.VisualThemeSetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VISUAL_THEME_SET_ID");

                entity.Property(e => e.WebappPath)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("WEBAPP_PATH");

                entity.HasOne(d => d.ProductStore)
                    .WithMany(p => p.WebSites)
                    .HasForeignKey(d => d.ProductStoreId)
                    .HasConstraintName("WEB_SITE_PRDS");

                entity.HasOne(d => d.VisualThemeSet)
                    .WithMany(p => p.WebSites)
                    .HasForeignKey(d => d.VisualThemeSetId)
                    .HasConstraintName("WEB_SITE_THEME_SET");
            });

            modelBuilder.Entity<WebSiteContactList>(entity =>
            {
                entity.HasKey(e => new { e.WebSiteId, e.ContactListId, e.FromDate });

                entity.ToTable("WEB_SITE_CONTACT_LIST");

                entity.HasIndex(e => e.ContactListId, "CNTCT_LST_WEB_SITE");

                entity.HasIndex(e => e.CreatedTxStamp, "WB_ST_CNT_LST_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WB_ST_CNT_LST_TXSP");

                entity.HasIndex(e => e.WebSiteId, "WEB_SITE_CNTCT_LST");

                entity.Property(e => e.WebSiteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WEB_SITE_ID");

                entity.Property(e => e.ContactListId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_LIST_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ContactList)
                    .WithMany(p => p.WebSiteContactLists)
                    .HasForeignKey(d => d.ContactListId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CNTCT_LST_WEB_SITE");

                entity.HasOne(d => d.WebSite)
                    .WithMany(p => p.WebSiteContactLists)
                    .HasForeignKey(d => d.WebSiteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WEB_SITE_CNTCT_LST");
            });

            modelBuilder.Entity<WebSiteContent>(entity =>
            {
                entity.HasKey(e => new { e.WebSiteId, e.ContentId, e.WebSiteContentTypeId, e.FromDate });

                entity.ToTable("WEB_SITE_CONTENT");

                entity.HasIndex(e => e.CreatedTxStamp, "WB_ST_CNTNT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WB_ST_CNTNT_TXSTMP");

                entity.HasIndex(e => e.ContentId, "WSCTNT_CONTENT");

                entity.HasIndex(e => e.WebSiteId, "WSCTNT_WEBSITE");

                entity.HasIndex(e => e.WebSiteContentTypeId, "WSCTNT_WSCTTYPE");

                entity.Property(e => e.WebSiteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WEB_SITE_ID");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.WebSiteContentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WEB_SITE_CONTENT_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.WebSiteContents)
                    .HasForeignKey(d => d.ContentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WSCTNT_CONTENT");

                entity.HasOne(d => d.WebSiteContentType)
                    .WithMany(p => p.WebSiteContents)
                    .HasForeignKey(d => d.WebSiteContentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WSCTNT_WSCTTYPE");

                entity.HasOne(d => d.WebSite)
                    .WithMany(p => p.WebSiteContents)
                    .HasForeignKey(d => d.WebSiteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WSCTNT_WEBSITE");
            });

            modelBuilder.Entity<WebSiteContentType>(entity =>
            {
                entity.ToTable("WEB_SITE_CONTENT_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "WB_ST_CNT_TP_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WB_ST_CNT_TP_TXSTP");

                entity.HasIndex(e => e.ParentTypeId, "WSCT_TYPE_PARENT");

                entity.Property(e => e.WebSiteContentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WEB_SITE_CONTENT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("WSCT_TYPE_PARENT");
            });

            modelBuilder.Entity<WebSitePathAlias>(entity =>
            {
                entity.HasKey(e => new { e.WebSiteId, e.PathAlias, e.FromDate });

                entity.ToTable("WEB_SITE_PATH_ALIAS");

                entity.HasIndex(e => e.CreatedTxStamp, "WB_ST_PTH_ALS_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WB_ST_PTH_ALS_TXSP");

                entity.HasIndex(e => e.ContentId, "WSPATH_CONTENT");

                entity.HasIndex(e => e.WebSiteId, "WSPATH_WEBSITE");

                entity.Property(e => e.WebSiteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WEB_SITE_ID");

                entity.Property(e => e.PathAlias)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PATH_ALIAS");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.AliasTo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALIAS_TO");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MapKey)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MAP_KEY");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.WebSitePathAliases)
                    .HasForeignKey(d => d.ContentId)
                    .HasConstraintName("WSPATH_CONTENT");

                entity.HasOne(d => d.WebSite)
                    .WithMany(p => p.WebSitePathAliases)
                    .HasForeignKey(d => d.WebSiteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WSPATH_WEBSITE");
            });

            modelBuilder.Entity<WebSitePublishPoint>(entity =>
            {
                entity.HasKey(e => e.ContentId);

                entity.ToTable("WEB_SITE_PUBLISH_POINT");

                entity.HasIndex(e => e.ContentId, "WBSTPP_CONTENT");

                entity.HasIndex(e => e.CreatedTxStamp, "WB_ST_PBH_PNT_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WB_ST_PBH_PNT_TXSP");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.AboutContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ABOUT_CONTENT_ID");

                entity.Property(e => e.ContentDept)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_DEPT");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LeftBarId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("LEFT_BAR_ID");

                entity.Property(e => e.LineLogo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LINE_LOGO");

                entity.Property(e => e.Logo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LOGO");

                entity.Property(e => e.MedallionLogo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MEDALLION_LOGO");

                entity.Property(e => e.RightBarId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RIGHT_BAR_ID");

                entity.Property(e => e.StyleSheetFile)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("STYLE_SHEET_FILE");

                entity.Property(e => e.TemplateTitle)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TEMPLATE_TITLE");

                entity.HasOne(d => d.Content)
                    .WithOne(p => p.WebSitePublishPoint)
                    .HasForeignKey<WebSitePublishPoint>(d => d.ContentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WBSTPP_CONTENT");
            });

            modelBuilder.Entity<WebSiteRole>(entity =>
            {
                entity.HasKey(e => new { e.PartyId, e.RoleTypeId, e.WebSiteId, e.FromDate });

                entity.ToTable("WEB_SITE_ROLE");

                entity.HasIndex(e => e.CreatedTxStamp, "WB_ST_RL_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WB_ST_RL_TXSTMP");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "WSRLE_PTYRLE");

                entity.HasIndex(e => e.WebSiteId, "WSRLE_WSITE");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.WebSiteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WEB_SITE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.WebSite)
                    .WithMany(p => p.WebSiteRoles)
                    .HasForeignKey(d => d.WebSiteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WSRLE_WSITE");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.WebSiteRoles)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WSRLE_PTYRLE");
            });

            modelBuilder.Entity<WebUserPreference>(entity =>
            {
                entity.HasKey(e => new { e.UserLoginId, e.PartyId, e.VisitId, e.WebPreferenceTypeId });

                entity.ToTable("WEB_USER_PREFERENCE");

                entity.HasIndex(e => e.CreatedTxStamp, "WB_USR_PRFRC_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WB_USR_PRFRC_TXSTP");

                entity.HasIndex(e => e.PartyId, "WEB_PREF_PARTY");

                entity.HasIndex(e => e.WebPreferenceTypeId, "WEB_PREF_TYPE");

                entity.HasIndex(e => e.UserLoginId, "WEB_PREF_USER");

                entity.Property(e => e.UserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USER_LOGIN_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.VisitId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VISIT_ID");

                entity.Property(e => e.WebPreferenceTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WEB_PREFERENCE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.WebPreferenceValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("WEB_PREFERENCE_VALUE");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.WebUserPreferences)
                    .HasForeignKey(d => d.PartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WEB_PREF_PARTY");

                entity.HasOne(d => d.UserLogin)
                    .WithMany(p => p.WebUserPreferences)
                    .HasForeignKey(d => d.UserLoginId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WEB_PREF_USER");

                entity.HasOne(d => d.WebPreferenceType)
                    .WithMany(p => p.WebUserPreferences)
                    .HasForeignKey(d => d.WebPreferenceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WEB_PREF_TYPE");
            });

            modelBuilder.Entity<WorkEffort>(entity =>
            {
                entity.ToTable("WORK_EFFORT");

                entity.HasIndex(e => e.AccommodationMapId, "WK_EFFRT_ACC_MAP");

                entity.HasIndex(e => e.AccommodationSpotId, "WK_EFFRT_ACC_SPOT");

                entity.HasIndex(e => e.CurrentStatusId, "WK_EFFRT_CURSTTS");

                entity.HasIndex(e => e.EstimateCalcMethod, "WK_EFFRT_CUS_MET");

                entity.HasIndex(e => e.FacilityId, "WK_EFFRT_FACILITY");

                entity.HasIndex(e => e.FixedAssetId, "WK_EFFRT_FXDASST");

                entity.HasIndex(e => e.MoneyUomId, "WK_EFFRT_MON_UOM");

                entity.HasIndex(e => e.NoteId, "WK_EFFRT_NOTE");

                entity.HasIndex(e => e.WorkEffortParentId, "WK_EFFRT_PARENT");

                entity.HasIndex(e => e.WorkEffortPurposeTypeId, "WK_EFFRT_PRPTYP");

                entity.HasIndex(e => e.RecurrenceInfoId, "WK_EFFRT_RECINFO");

                entity.HasIndex(e => e.RuntimeDataId, "WK_EFFRT_RNTMDTA");

                entity.HasIndex(e => e.ScopeEnumId, "WK_EFFRT_SC_ENUM");

                entity.HasIndex(e => e.TempExprId, "WK_EFFRT_TEMPEXPR");

                entity.HasIndex(e => e.WorkEffortTypeId, "WK_EFFRT_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "WORK_EFFORT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WORK_EFFORT_TXSTMP");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.AccommodationMapId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACCOMMODATION_MAP_ID");

                entity.Property(e => e.AccommodationSpotId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ACCOMMODATION_SPOT_ID");

                entity.Property(e => e.ActualCompletionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ACTUAL_COMPLETION_DATE");

                entity.Property(e => e.ActualMilliSeconds).HasColumnName("ACTUAL_MILLI_SECONDS");

                entity.Property(e => e.ActualSetupMillis).HasColumnName("ACTUAL_SETUP_MILLIS");

                entity.Property(e => e.ActualStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ACTUAL_START_DATE");

                entity.Property(e => e.CreatedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY_USER_LOGIN");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrentStatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CURRENT_STATUS_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.EstimateCalcMethod)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ESTIMATE_CALC_METHOD");

                entity.Property(e => e.EstimatedCompletionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ESTIMATED_COMPLETION_DATE");

                entity.Property(e => e.EstimatedMilliSeconds).HasColumnName("ESTIMATED_MILLI_SECONDS");

                entity.Property(e => e.EstimatedSetupMillis).HasColumnName("ESTIMATED_SETUP_MILLIS");

                entity.Property(e => e.EstimatedStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ESTIMATED_START_DATE");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.FixedAssetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_ID");

                entity.Property(e => e.InfoUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("INFO_URL");

                entity.Property(e => e.LastModifiedByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.LastStatusUpdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_STATUS_UPDATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LocationDesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_DESC");

                entity.Property(e => e.MoneyUomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("MONEY_UOM_ID");

                entity.Property(e => e.NoteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("NOTE_ID");

                entity.Property(e => e.PercentComplete).HasColumnName("PERCENT_COMPLETE");

                entity.Property(e => e.Priority).HasColumnName("PRIORITY");

                entity.Property(e => e.QuantityProduced)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY_PRODUCED");

                entity.Property(e => e.QuantityRejected)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY_REJECTED");

                entity.Property(e => e.QuantityToProduce)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY_TO_PRODUCE");

                entity.Property(e => e.RecurrenceInfoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RECURRENCE_INFO_ID");

                entity.Property(e => e.Reserv2ndPPPerc)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("RESERV2ND_P_P_PERC");

                entity.Property(e => e.ReservNthPPPerc)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("RESERV_NTH_P_P_PERC");

                entity.Property(e => e.ReservPersons)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("RESERV_PERSONS");

                entity.Property(e => e.RevisionNumber).HasColumnName("REVISION_NUMBER");

                entity.Property(e => e.RuntimeDataId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("RUNTIME_DATA_ID");

                entity.Property(e => e.ScopeEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SCOPE_ENUM_ID");

                entity.Property(e => e.SendNotificationEmail)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SEND_NOTIFICATION_EMAIL")
                    .IsFixedLength();

                entity.Property(e => e.ServiceLoaderName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERVICE_LOADER_NAME");

                entity.Property(e => e.ShowAsEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHOW_AS_ENUM_ID");

                entity.Property(e => e.SourceReferenceId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SOURCE_REFERENCE_ID");

                entity.Property(e => e.SpecialTerms)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SPECIAL_TERMS");

                entity.Property(e => e.TempExprId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TEMP_EXPR_ID");

                entity.Property(e => e.TimeTransparency).HasColumnName("TIME_TRANSPARENCY");

                entity.Property(e => e.TotalMilliSecondsAllowed).HasColumnName("TOTAL_MILLI_SECONDS_ALLOWED");

                entity.Property(e => e.TotalMoneyAllowed)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("TOTAL_MONEY_ALLOWED");

                entity.Property(e => e.UniversalId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("UNIVERSAL_ID");

                entity.Property(e => e.WorkEffortName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_NAME");

                entity.Property(e => e.WorkEffortParentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_PARENT_ID");

                entity.Property(e => e.WorkEffortPurposeTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_PURPOSE_TYPE_ID");

                entity.Property(e => e.WorkEffortTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_TYPE_ID");

                entity.HasOne(d => d.AccommodationMap)
                    .WithMany(p => p.WorkEfforts)
                    .HasForeignKey(d => d.AccommodationMapId)
                    .HasConstraintName("WK_EFFRT_ACC_MAP");

                entity.HasOne(d => d.AccommodationSpot)
                    .WithMany(p => p.WorkEfforts)
                    .HasForeignKey(d => d.AccommodationSpotId)
                    .HasConstraintName("WK_EFFRT_ACC_SPOT");

                entity.HasOne(d => d.CurrentStatus)
                    .WithMany(p => p.WorkEfforts)
                    .HasForeignKey(d => d.CurrentStatusId)
                    .HasConstraintName("WK_EFFRT_CURSTTS");

                entity.HasOne(d => d.EstimateCalcMethodNavigation)
                    .WithMany(p => p.WorkEfforts)
                    .HasForeignKey(d => d.EstimateCalcMethod)
                    .HasConstraintName("WK_EFFRT_CUS_MET");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.WorkEfforts)
                    .HasForeignKey(d => d.FacilityId)
                    .HasConstraintName("WK_EFFRT_FACILITY");

                entity.HasOne(d => d.FixedAsset)
                    .WithMany(p => p.WorkEfforts)
                    .HasForeignKey(d => d.FixedAssetId)
                    .HasConstraintName("WK_EFFRT_FXDASST");

                entity.HasOne(d => d.MoneyUom)
                    .WithMany(p => p.WorkEfforts)
                    .HasForeignKey(d => d.MoneyUomId)
                    .HasConstraintName("WK_EFFRT_MON_UOM");

                entity.HasOne(d => d.Note)
                    .WithMany(p => p.WorkEfforts)
                    .HasForeignKey(d => d.NoteId)
                    .HasConstraintName("WK_EFFRT_NOTE");

                entity.HasOne(d => d.RecurrenceInfo)
                    .WithMany(p => p.WorkEfforts)
                    .HasForeignKey(d => d.RecurrenceInfoId)
                    .HasConstraintName("WK_EFFRT_RECINFO");

                entity.HasOne(d => d.RuntimeData)
                    .WithMany(p => p.WorkEfforts)
                    .HasForeignKey(d => d.RuntimeDataId)
                    .HasConstraintName("WK_EFFRT_RNTMDTA");

                entity.HasOne(d => d.ScopeEnum)
                    .WithMany(p => p.WorkEfforts)
                    .HasForeignKey(d => d.ScopeEnumId)
                    .HasConstraintName("WK_EFFRT_SC_ENUM");

                entity.HasOne(d => d.TempExpr)
                    .WithMany(p => p.WorkEfforts)
                    .HasForeignKey(d => d.TempExprId)
                    .HasConstraintName("WK_EFFRT_TEMPEXPR");

                entity.HasOne(d => d.WorkEffortParent)
                    .WithMany(p => p.InverseWorkEffortParent)
                    .HasForeignKey(d => d.WorkEffortParentId)
                    .HasConstraintName("WK_EFFRT_PARENT");

                entity.HasOne(d => d.WorkEffortPurposeType)
                    .WithMany(p => p.WorkEfforts)
                    .HasForeignKey(d => d.WorkEffortPurposeTypeId)
                    .HasConstraintName("WK_EFFRT_PRPTYP");

                entity.HasOne(d => d.WorkEffortType)
                    .WithMany(p => p.WorkEfforts)
                    .HasForeignKey(d => d.WorkEffortTypeId)
                    .HasConstraintName("WK_EFFRT_TYPE");
            });

            modelBuilder.Entity<WorkEffortAssoc>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortIdFrom, e.WorkEffortIdTo, e.WorkEffortAssocTypeId, e.FromDate });

                entity.ToTable("WORK_EFFORT_ASSOC");

                entity.HasIndex(e => e.WorkEffortIdFrom, "WK_EFFRTASSC_FWE");

                entity.HasIndex(e => e.WorkEffortIdTo, "WK_EFFRTASSC_TWE");

                entity.HasIndex(e => e.WorkEffortAssocTypeId, "WK_EFFRTASSC_TYP");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFFT_ASC_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFFT_ASC_TXSTP");

                entity.Property(e => e.WorkEffortIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID_FROM");

                entity.Property(e => e.WorkEffortIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID_TO");

                entity.Property(e => e.WorkEffortAssocTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ASSOC_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.SequenceNum).HasColumnName("SEQUENCE_NUM");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.WorkEffortAssocType)
                    .WithMany(p => p.WorkEffortAssocs)
                    .HasForeignKey(d => d.WorkEffortAssocTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WK_EFFRTASSC_TYP");

                entity.HasOne(d => d.WorkEffortIdFromNavigation)
                    .WithMany(p => p.WorkEffortAssocWorkEffortIdFromNavigations)
                    .HasForeignKey(d => d.WorkEffortIdFrom)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WK_EFFRTASSC_FWE");

                entity.HasOne(d => d.WorkEffortIdToNavigation)
                    .WithMany(p => p.WorkEffortAssocWorkEffortIdToNavigations)
                    .HasForeignKey(d => d.WorkEffortIdTo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WK_EFFRTASSC_TWE");
            });

            modelBuilder.Entity<WorkEffortAssocAttribute>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortIdFrom, e.WorkEffortIdTo, e.WorkEffortAssocTypeId, e.AttrName });

                entity.ToTable("WORK_EFFORT_ASSOC_ATTRIBUTE");

                entity.HasIndex(e => new { e.WorkEffortIdFrom, e.WorkEffortIdTo, e.WorkEffortAssocTypeId, e.FromDate }, "WK_EFFRTASSC_ATTR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFT_ASC_ATT_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFT_ASC_ATT_TS");

                entity.Property(e => e.WorkEffortIdFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID_FROM");

                entity.Property(e => e.WorkEffortIdTo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID_TO");

                entity.Property(e => e.WorkEffortAssocTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ASSOC_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.WorkEffortAssoc)
                    .WithMany(p => p.WorkEffortAssocAttributes)
                    .HasForeignKey(d => new { d.WorkEffortIdFrom, d.WorkEffortIdTo, d.WorkEffortAssocTypeId, d.FromDate })
                    .HasConstraintName("WK_EFFRTASSC_ATTR");
            });

            modelBuilder.Entity<WorkEffortAssocType>(entity =>
            {
                entity.ToTable("WORK_EFFORT_ASSOC_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "WK_EFFRTASSC_TPAR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFT_ASC_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFT_ASC_TP_TXS");

                entity.Property(e => e.WorkEffortAssocTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ASSOC_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("WK_EFFRTASSC_TPAR");
            });

            modelBuilder.Entity<WorkEffortAssocTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortAssocTypeId, e.AttrName });

                entity.ToTable("WORK_EFFORT_ASSOC_TYPE_ATTR");

                entity.HasIndex(e => e.WorkEffortAssocTypeId, "WK_EFFRTASSC_TATR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_ASC_TP_ATR_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_ASC_TP_ATR_TS");

                entity.Property(e => e.WorkEffortAssocTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ASSOC_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.WorkEffortAssocType)
                    .WithMany(p => p.WorkEffortAssocTypeAttrs)
                    .HasForeignKey(d => d.WorkEffortAssocTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WK_EFFRTASSC_TATR");
            });

            modelBuilder.Entity<WorkEffortAttribute>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortId, e.AttrName });

                entity.ToTable("WORK_EFFORT_ATTRIBUTE");

                entity.HasIndex(e => e.WorkEffortId, "WK_EFFRT_ATTR_WE");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFT_ATTT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFT_ATTT_TXSTP");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DESCRIPTION");

                entity.Property(e => e.AttrValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_VALUE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.WorkEffortAttributes)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WK_EFFRT_ATTR_WE");
            });

            modelBuilder.Entity<WorkEffortBilling>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortId, e.InvoiceId, e.InvoiceItemSeqId });

                entity.ToTable("WORK_EFFORT_BILLING");

                entity.HasIndex(e => new { e.InvoiceId, e.InvoiceItemSeqId }, "WK_EFFBLNG_INVITM");

                entity.HasIndex(e => e.WorkEffortId, "WK_EFFBLNG_WEFF");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFFT_BLG_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFFT_BLG_TXSTP");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.InvoiceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ID");

                entity.Property(e => e.InvoiceItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_ITEM_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Percentage).HasColumnName("PERCENTAGE");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.WorkEffortBillings)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WK_EFFBLNG_WEFF");

                entity.HasOne(d => d.InvoiceI)
                    .WithMany(p => p.WorkEffortBillings)
                    .HasForeignKey(d => new { d.InvoiceId, d.InvoiceItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WK_EFFBLNG_INVITM");
            });

            modelBuilder.Entity<WorkEffortContactMechNew>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortId, e.ContactMechId, e.FromDate })
                    .HasName("PK_WORK_EFFORT_CONTACT_MECH_NE");

                entity.ToTable("WORK_EFFORT_CONTACT_MECH_NEW");

                entity.HasIndex(e => e.ContactMechId, "WKEFF_CMECH_CMECH");

                entity.HasIndex(e => e.WorkEffortId, "WKEFF_CMECH_WKEFF");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_CNT_MCH_NW_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_CNT_MCH_NW_TS");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.WorkEffortContactMechNews)
                    .HasForeignKey(d => d.ContactMechId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_CMECH_CMECH");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.WorkEffortContactMechNews)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_CMECH_WKEFF");
            });

            modelBuilder.Entity<WorkEffortContent>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortId, e.ContentId, e.WorkEffortContentTypeId, e.FromDate });

                entity.ToTable("WORK_EFFORT_CONTENT");

                entity.HasIndex(e => e.ContentId, "WKEFF_CNT_CNT");

                entity.HasIndex(e => e.WorkEffortContentTypeId, "WKEFF_CNT_WCTP");

                entity.HasIndex(e => e.WorkEffortId, "WKEFF_CNT_WKEFF");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFFT_CNT_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFFT_CNT_TXSTP");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.ContentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTENT_ID");

                entity.Property(e => e.WorkEffortContentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_CONTENT_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.WorkEffortContents)
                    .HasForeignKey(d => d.ContentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_CNT_CNT");

                entity.HasOne(d => d.WorkEffortContentType)
                    .WithMany(p => p.WorkEffortContents)
                    .HasForeignKey(d => d.WorkEffortContentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_CNT_WCTP");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.WorkEffortContents)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_CNT_WKEFF");
            });

            modelBuilder.Entity<WorkEffortContentType>(entity =>
            {
                entity.ToTable("WORK_EFFORT_CONTENT_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "WEFFCTP_TP_PAR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFT_CNT_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFT_CNT_TP_TXS");

                entity.Property(e => e.WorkEffortContentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_CONTENT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("WEFFCTP_TP_PAR");
            });

            modelBuilder.Entity<WorkEffortCostCalc>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortId, e.CostComponentTypeId, e.FromDate });

                entity.ToTable("WORK_EFFORT_COST_CALC");

                entity.HasIndex(e => e.CostComponentCalcId, "WK_EFFRT_COS_CCC");

                entity.HasIndex(e => e.CostComponentTypeId, "WK_EFFRT_COS_CCT");

                entity.HasIndex(e => e.WorkEffortId, "WK_EFFRT_COS_WEF");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFT_CST_CLC_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFT_CST_CLC_TS");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.CostComponentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COST_COMPONENT_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CostComponentCalcId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("COST_COMPONENT_CALC_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.CostComponentCalc)
                    .WithMany(p => p.WorkEffortCostCalcs)
                    .HasForeignKey(d => d.CostComponentCalcId)
                    .HasConstraintName("WK_EFFRT_COS_CCC");

                entity.HasOne(d => d.CostComponentType)
                    .WithMany(p => p.WorkEffortCostCalcs)
                    .HasForeignKey(d => d.CostComponentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WK_EFFRT_COS_CCT");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.WorkEffortCostCalcs)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WK_EFFRT_COS_WEF");
            });

            modelBuilder.Entity<WorkEffortDeliverableProd>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortId, e.DeliverableId })
                    .HasName("PK_WORK_EFFORT_DELIVERABLE_PRO");

                entity.ToTable("WORK_EFFORT_DELIVERABLE_PROD");

                entity.HasIndex(e => e.DeliverableId, "WKEFF_DELPRD_DEL");

                entity.HasIndex(e => e.WorkEffortId, "WKEFF_DELPRD_WEFF");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFT_DLL_PRD_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFT_DLL_PRD_TS");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.DeliverableId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERABLE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Deliverable)
                    .WithMany(p => p.WorkEffortDeliverableProds)
                    .HasForeignKey(d => d.DeliverableId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_DELPRD_DEL");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.WorkEffortDeliverableProds)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_DELPRD_WEFF");
            });

            modelBuilder.Entity<WorkEffortEventReminder>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortId, e.SequenceId });

                entity.ToTable("WORK_EFFORT_EVENT_REMINDER");

                entity.HasIndex(e => e.ContactMechId, "WE_EVENT_REMIND_CM");

                entity.HasIndex(e => e.PartyId, "WE_EVENT_REMIND_PY");

                entity.HasIndex(e => e.WorkEffortId, "WE_EVENT_REMIND_WE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFT_EVT_RMR_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFT_EVT_RMR_TS");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.SequenceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SEQUENCE_ID");

                entity.Property(e => e.ContactMechId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_MECH_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.CurrentCount).HasColumnName("CURRENT_COUNT");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LocaleId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("LOCALE_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.ReminderDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("REMINDER_DATE_TIME");

                entity.Property(e => e.ReminderOffset).HasColumnName("REMINDER_OFFSET");

                entity.Property(e => e.RepeatCount).HasColumnName("REPEAT_COUNT");

                entity.Property(e => e.RepeatInterval).HasColumnName("REPEAT_INTERVAL");

                entity.Property(e => e.TimeZoneId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TIME_ZONE_ID");

                entity.HasOne(d => d.ContactMech)
                    .WithMany(p => p.WorkEffortEventReminders)
                    .HasForeignKey(d => d.ContactMechId)
                    .HasConstraintName("WE_EVENT_REMIND_CM");

                entity.HasOne(d => d.Party)
                    .WithMany(p => p.WorkEffortEventReminders)
                    .HasForeignKey(d => d.PartyId)
                    .HasConstraintName("WE_EVENT_REMIND_PY");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.WorkEffortEventReminders)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WE_EVENT_REMIND_WE");
            });

            modelBuilder.Entity<WorkEffortFixedAssetAssign>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortId, e.FixedAssetId, e.FromDate })
                    .HasName("PK_WORK_EFFORT_FIXED_ASSET_ASS");

                entity.ToTable("WORK_EFFORT_FIXED_ASSET_ASSIGN");

                entity.HasIndex(e => e.AvailabilityStatusId, "WKEFF_FXDAA_AVAIL");

                entity.HasIndex(e => e.FixedAssetId, "WKEFF_FXDAA_FXAS");

                entity.HasIndex(e => e.StatusId, "WKEFF_FXDAA_STTS");

                entity.HasIndex(e => e.WorkEffortId, "WKEFF_FXDAA_WEFF");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_FXD_AST_ASN_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_FXD_AST_ASN_TS");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.FixedAssetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.AllocatedCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ALLOCATED_COST");

                entity.Property(e => e.AvailabilityStatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AVAILABILITY_STATUS_ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.AvailabilityStatus)
                    .WithMany(p => p.WorkEffortFixedAssetAssignAvailabilityStatuses)
                    .HasForeignKey(d => d.AvailabilityStatusId)
                    .HasConstraintName("WKEFF_FXDAA_AVAIL");

                entity.HasOne(d => d.FixedAsset)
                    .WithMany(p => p.WorkEffortFixedAssetAssigns)
                    .HasForeignKey(d => d.FixedAssetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_FXDAA_FXAS");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.WorkEffortFixedAssetAssignStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("WKEFF_FXDAA_STTS");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.WorkEffortFixedAssetAssigns)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_FXDAA_WEFF");
            });

            modelBuilder.Entity<WorkEffortFixedAssetStd>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortId, e.FixedAssetTypeId });

                entity.ToTable("WORK_EFFORT_FIXED_ASSET_STD");

                entity.HasIndex(e => e.FixedAssetTypeId, "WKEFF_FASTD_FAT");

                entity.HasIndex(e => e.WorkEffortId, "WKEFF_FASTD_WEFF");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_FXD_AST_STD_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_FXD_AST_STD_TS");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.FixedAssetTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_ASSET_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.EstimatedCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ESTIMATED_COST");

                entity.Property(e => e.EstimatedDuration).HasColumnName("ESTIMATED_DURATION");

                entity.Property(e => e.EstimatedQuantity).HasColumnName("ESTIMATED_QUANTITY");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.FixedAssetType)
                    .WithMany(p => p.WorkEffortFixedAssetStds)
                    .HasForeignKey(d => d.FixedAssetTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_FASTD_FAT");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.WorkEffortFixedAssetStds)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_FASTD_WEFF");
            });

            modelBuilder.Entity<WorkEffortGoodStandard>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortId, e.ProductId, e.WorkEffortGoodStdTypeId, e.FromDate });

                entity.ToTable("WORK_EFFORT_GOOD_STANDARD");

                entity.HasIndex(e => e.ProductId, "WKEFF_GDSTD_PROD");

                entity.HasIndex(e => e.StatusId, "WKEFF_GDSTD_STTS");

                entity.HasIndex(e => e.WorkEffortGoodStdTypeId, "WKEFF_GDSTD_TYPE");

                entity.HasIndex(e => e.WorkEffortId, "WKEFF_GDSTD_WEFF");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFT_GD_STD_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFT_GD_STD_TXS");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_ID");

                entity.Property(e => e.WorkEffortGoodStdTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_GOOD_STD_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.EstimatedCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ESTIMATED_COST");

                entity.Property(e => e.EstimatedQuantity).HasColumnName("ESTIMATED_QUANTITY");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.WorkEffortGoodStandards)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_GDSTD_PROD");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.WorkEffortGoodStandards)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("WKEFF_GDSTD_STTS");

                entity.HasOne(d => d.WorkEffortGoodStdType)
                    .WithMany(p => p.WorkEffortGoodStandards)
                    .HasForeignKey(d => d.WorkEffortGoodStdTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_GDSTD_TYPE");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.WorkEffortGoodStandards)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_GDSTD_WEFF");
            });

            modelBuilder.Entity<WorkEffortGoodStandardType>(entity =>
            {
                entity.HasKey(e => e.WorkEffortGoodStdTypeId)
                    .HasName("PK_WORK_EFFORT_GOOD_STANDARD_T");

                entity.ToTable("WORK_EFFORT_GOOD_STANDARD_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "WKEFF_GDSTD_TPAR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_GD_STD_TP_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_GD_STD_TP_TS");

                entity.Property(e => e.WorkEffortGoodStdTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_GOOD_STD_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("WKEFF_GDSTD_TPAR");
            });

            modelBuilder.Entity<WorkEffortIcalDatum>(entity =>
            {
                entity.HasKey(e => e.WorkEffortId);

                entity.ToTable("WORK_EFFORT_ICAL_DATA");

                entity.HasIndex(e => e.WorkEffortId, "WKEFF_ICAL_DATA");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFT_ICL_DT_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFT_ICL_DT_TXS");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.IcalData)
                    .HasColumnType("text")
                    .HasColumnName("ICAL_DATA");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.WorkEffort)
                    .WithOne(p => p.WorkEffortIcalDatum)
                    .HasForeignKey<WorkEffortIcalDatum>(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_ICAL_DATA");
            });

            modelBuilder.Entity<WorkEffortInventoryAssign>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortId, e.InventoryItemId })
                    .HasName("PK_WORK_EFFORT_INVENTORY_ASSIG");

                entity.ToTable("WORK_EFFORT_INVENTORY_ASSIGN");

                entity.HasIndex(e => e.InventoryItemId, "WKEFF_INVAS_INVIT");

                entity.HasIndex(e => e.StatusId, "WKEFF_INVAS_STTS");

                entity.HasIndex(e => e.WorkEffortId, "WKEFF_INVAS_WEFF");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFT_INR_ASN_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFT_INR_ASN_TS");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.InventoryItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.HasOne(d => d.InventoryItem)
                    .WithMany(p => p.WorkEffortInventoryAssigns)
                    .HasForeignKey(d => d.InventoryItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_INVAS_INVIT");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.WorkEffortInventoryAssigns)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("WKEFF_INVAS_STTS");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.WorkEffortInventoryAssigns)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_INVAS_WEFF");
            });

            modelBuilder.Entity<WorkEffortInventoryProduced>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortId, e.InventoryItemId })
                    .HasName("PK_WORK_EFFORT_INVENTORY_PRODU");

                entity.ToTable("WORK_EFFORT_INVENTORY_PRODUCED");

                entity.HasIndex(e => e.InventoryItemId, "WKEFF_INVPD_INVIT");

                entity.HasIndex(e => e.WorkEffortId, "WKEFF_INVPD_WEFF");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFT_INR_PRD_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFT_INR_PRD_TS");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.InventoryItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_ITEM_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.InventoryItem)
                    .WithMany(p => p.WorkEffortInventoryProduceds)
                    .HasForeignKey(d => d.InventoryItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_INVPD_INVIT");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.WorkEffortInventoryProduceds)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_INVPD_WEFF");
            });

            modelBuilder.Entity<WorkEffortKeyword>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortId, e.Keyword });

                entity.ToTable("WORK_EFFORT_KEYWORD");

                entity.HasIndex(e => e.Keyword, "WEFF_KWD_KWD");

                entity.HasIndex(e => e.WorkEffortId, "WEFF_KWD_WEFF");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFFT_KWD_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFFT_KWD_TXSTP");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.Keyword)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("KEYWORD");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.RelevancyWeight).HasColumnName("RELEVANCY_WEIGHT");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.WorkEffortKeywords)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WEFF_KWD_WEFF");
            });

            modelBuilder.Entity<WorkEffortNote>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortId, e.NoteId });

                entity.ToTable("WORK_EFFORT_NOTE");

                entity.HasIndex(e => e.NoteId, "WKEFF_NTE_NOTE");

                entity.HasIndex(e => e.WorkEffortId, "WKEFF_NTE_WEFF");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFFT_NT_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFFT_NT_TXSTMP");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.NoteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("NOTE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.InternalNote)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INTERNAL_NOTE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.Note)
                    .WithMany(p => p.WorkEffortNotes)
                    .HasForeignKey(d => d.NoteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_NTE_NOTE");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.WorkEffortNotes)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_NTE_WEFF");
            });

            modelBuilder.Entity<WorkEffortPartyAssignment>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortId, e.PartyId, e.RoleTypeId, e.FromDate })
                    .HasName("PK_WORK_EFFORT_PARTY_ASSIGNMEN");

                entity.ToTable("WORK_EFFORT_PARTY_ASSIGNMENT");

                entity.HasIndex(e => e.AssignedByUserLoginId, "WKEFF_PA_ABUSRLOG");

                entity.HasIndex(e => e.AvailabilityStatusId, "WKEFF_PA_AVSTTS");

                entity.HasIndex(e => e.DelegateReasonEnumId, "WKEFF_PA_DELR_ENM");

                entity.HasIndex(e => e.ExpectationEnumId, "WKEFF_PA_EXP_ENUM");

                entity.HasIndex(e => e.FacilityId, "WKEFF_PA_FACILITY");

                entity.HasIndex(e => new { e.PartyId, e.RoleTypeId }, "WKEFF_PA_PRTY_ROLE");

                entity.HasIndex(e => e.StatusId, "WKEFF_PA_STTS");

                entity.HasIndex(e => e.WorkEffortId, "WKEFF_PA_WE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFT_PRT_AST_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFT_PRT_AST_TS");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARTY_ID");

                entity.Property(e => e.RoleTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_TYPE_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.AssignedByUserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ASSIGNED_BY_USER_LOGIN_ID");

                entity.Property(e => e.AvailabilityStatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AVAILABILITY_STATUS_ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.DelegateReasonEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("DELEGATE_REASON_ENUM_ID");

                entity.Property(e => e.ExpectationEnumId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("EXPECTATION_ENUM_ID");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.MustRsvp)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MUST_RSVP")
                    .IsFixedLength();

                entity.Property(e => e.StatusDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("STATUS_DATE_TIME");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.AssignedByUserLogin)
                    .WithMany(p => p.WorkEffortPartyAssignments)
                    .HasForeignKey(d => d.AssignedByUserLoginId)
                    .HasConstraintName("WKEFF_PA_ABUSRLOG");

                entity.HasOne(d => d.AvailabilityStatus)
                    .WithMany(p => p.WorkEffortPartyAssignmentAvailabilityStatuses)
                    .HasForeignKey(d => d.AvailabilityStatusId)
                    .HasConstraintName("WKEFF_PA_AVSTTS");

                entity.HasOne(d => d.DelegateReasonEnum)
                    .WithMany(p => p.WorkEffortPartyAssignmentDelegateReasonEnums)
                    .HasForeignKey(d => d.DelegateReasonEnumId)
                    .HasConstraintName("WKEFF_PA_DELR_ENM");

                entity.HasOne(d => d.ExpectationEnum)
                    .WithMany(p => p.WorkEffortPartyAssignmentExpectationEnums)
                    .HasForeignKey(d => d.ExpectationEnumId)
                    .HasConstraintName("WKEFF_PA_EXP_ENUM");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.WorkEffortPartyAssignments)
                    .HasForeignKey(d => d.FacilityId)
                    .HasConstraintName("WKEFF_PA_FACILITY");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.WorkEffortPartyAssignmentStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("WKEFF_PA_STTS");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.WorkEffortPartyAssignments)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_PA_WE");

                entity.HasOne(d => d.PartyRole)
                    .WithMany(p => p.WorkEffortPartyAssignments)
                    .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_PA_PRTY_ROLE");
            });

            modelBuilder.Entity<WorkEffortPurposeType>(entity =>
            {
                entity.ToTable("WORK_EFFORT_PURPOSE_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "WK_EFFRT_PTYPE_PAR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFT_PRS_TP_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFT_PRS_TP_TXS");

                entity.Property(e => e.WorkEffortPurposeTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_PURPOSE_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("WK_EFFRT_PTYPE_PAR");
            });

            modelBuilder.Entity<WorkEffortReview>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortId, e.UserLoginId, e.ReviewDate });

                entity.ToTable("WORK_EFFORT_REVIEW");

                entity.HasIndex(e => e.StatusId, "WEFF_REVIEW_STTS");

                entity.HasIndex(e => e.UserLoginId, "WEFF_REVIEW_UL");

                entity.HasIndex(e => e.WorkEffortId, "WEFF_REVIEW_WEFF");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFFT_RVW_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFFT_RVW_TXSTP");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.UserLoginId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USER_LOGIN_ID");

                entity.Property(e => e.ReviewDate)
                    .HasColumnType("datetime")
                    .HasColumnName("REVIEW_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.PostedAnonymous)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("POSTED_ANONYMOUS")
                    .IsFixedLength();

                entity.Property(e => e.Rating).HasColumnName("RATING");

                entity.Property(e => e.ReviewText)
                    .HasColumnType("text")
                    .HasColumnName("REVIEW_TEXT");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.WorkEffortReviews)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("WEFF_REVIEW_STTS");

                entity.HasOne(d => d.UserLogin)
                    .WithMany(p => p.WorkEffortReviews)
                    .HasForeignKey(d => d.UserLoginId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WEFF_REVIEW_UL");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.WorkEffortReviews)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WEFF_REVIEW_WEFF");
            });

            modelBuilder.Entity<WorkEffortSearchConstraint>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortSearchResultId, e.ConstraintSeqId })
                    .HasName("PK_WORK_EFFORT_SEARCH_CONSTRAI");

                entity.ToTable("WORK_EFFORT_SEARCH_CONSTRAINT");

                entity.HasIndex(e => e.WorkEffortSearchResultId, "WEFF_SCHRSI_RES");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFT_SRH_CNT_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFT_SRH_CNT_TS");

                entity.Property(e => e.WorkEffortSearchResultId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_SEARCH_RESULT_ID");

                entity.Property(e => e.ConstraintSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CONSTRAINT_SEQ_ID");

                entity.Property(e => e.AnyPrefix)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ANY_PREFIX")
                    .IsFixedLength();

                entity.Property(e => e.AnySuffix)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ANY_SUFFIX")
                    .IsFixedLength();

                entity.Property(e => e.ConstraintName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CONSTRAINT_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.HighValue)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("HIGH_VALUE");

                entity.Property(e => e.IncludeSubWorkEfforts)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INCLUDE_SUB_WORK_EFFORTS")
                    .IsFixedLength();

                entity.Property(e => e.InfoString)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("INFO_STRING");

                entity.Property(e => e.IsAnd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_AND")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.LowValue)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LOW_VALUE");

                entity.Property(e => e.RemoveStems)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REMOVE_STEMS")
                    .IsFixedLength();

                entity.HasOne(d => d.WorkEffortSearchResult)
                    .WithMany(p => p.WorkEffortSearchConstraints)
                    .HasForeignKey(d => d.WorkEffortSearchResultId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WEFF_SCHRSI_RES");
            });

            modelBuilder.Entity<WorkEffortSearchResult>(entity =>
            {
                entity.ToTable("WORK_EFFORT_SEARCH_RESULT");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFT_SRH_RST_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFT_SRH_RST_TS");

                entity.Property(e => e.WorkEffortSearchResultId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_SEARCH_RESULT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.IsAscending)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_ASCENDING")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.NumResults).HasColumnName("NUM_RESULTS");

                entity.Property(e => e.OrderByName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_BY_NAME");

                entity.Property(e => e.SearchDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SEARCH_DATE");

                entity.Property(e => e.SecondsTotal).HasColumnName("SECONDS_TOTAL");

                entity.Property(e => e.VisitId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VISIT_ID");
            });

            modelBuilder.Entity<WorkEffortSkillStandard>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortId, e.SkillTypeId });

                entity.ToTable("WORK_EFFORT_SKILL_STANDARD");

                entity.HasIndex(e => e.SkillTypeId, "WKEFF_SKLSTD_SKTP");

                entity.HasIndex(e => e.WorkEffortId, "WKEFF_SKLSTD_WEFF");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFT_SKL_STD_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFT_SKL_STD_TS");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.SkillTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SKILL_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.EstimatedCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ESTIMATED_COST");

                entity.Property(e => e.EstimatedDuration).HasColumnName("ESTIMATED_DURATION");

                entity.Property(e => e.EstimatedNumPeople).HasColumnName("ESTIMATED_NUM_PEOPLE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.SkillType)
                    .WithMany(p => p.WorkEffortSkillStandards)
                    .HasForeignKey(d => d.SkillTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_SKLSTD_SKTP");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.WorkEffortSkillStandards)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_SKLSTD_WEFF");
            });

            modelBuilder.Entity<WorkEffortStatus>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortId, e.StatusId, e.StatusDatetime });

                entity.ToTable("WORK_EFFORT_STATUS");

                entity.HasIndex(e => e.SetByUserLogin, "WKEFF_STTS_SB_UL");

                entity.HasIndex(e => e.StatusId, "WKEFF_STTS_STTS");

                entity.HasIndex(e => e.WorkEffortId, "WKEFF_STTS_WE");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFFT_STS_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFFT_STS_TXSTP");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.StatusDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("STATUS_DATETIME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.Reason)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REASON");

                entity.Property(e => e.SetByUserLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SET_BY_USER_LOGIN");

                entity.HasOne(d => d.SetByUserLoginNavigation)
                    .WithMany(p => p.WorkEffortStatuses)
                    .HasForeignKey(d => d.SetByUserLogin)
                    .HasConstraintName("WKEFF_STTS_SB_UL");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.WorkEffortStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_STTS_STTS");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.WorkEffortStatuses)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_STTS_WE");
            });

            modelBuilder.Entity<WorkEffortSurveyAppl>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortId, e.SurveyId, e.FromDate });

                entity.ToTable("WORK_EFFORT_SURVEY_APPL");

                entity.HasIndex(e => e.SurveyId, "WKEF_SURVAPL_PSSA");

                entity.HasIndex(e => e.SurveyId, "WKEF_SURVAPL_SVY");

                entity.HasIndex(e => e.WorkEffortId, "WKEF_SURVAPL_WKE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFT_SRV_APL_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFT_SRV_APL_TS");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.SurveyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ThruDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THRU_DATE");

                entity.HasOne(d => d.Survey)
                    .WithMany(p => p.WorkEffortSurveyAppls)
                    .HasForeignKey(d => d.SurveyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEF_SURVAPL_PSSA");

                entity.HasOne(d => d.SurveyNavigation)
                    .WithMany(p => p.WorkEffortSurveyAppls)
                    .HasForeignKey(d => d.SurveyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEF_SURVAPL_SVY");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.WorkEffortSurveyAppls)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEF_SURVAPL_WKE");
            });

            modelBuilder.Entity<WorkEffortTransBox>(entity =>
            {
                entity.HasKey(e => new { e.ProcessWorkEffortId, e.ToActivityId, e.TransitionId });

                entity.ToTable("WORK_EFFORT_TRANS_BOX");

                entity.HasIndex(e => e.ProcessWorkEffortId, "WKEFF_TXBX_WE");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFT_TRS_BX_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFT_TRS_BX_TXS");

                entity.Property(e => e.ProcessWorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PROCESS_WORK_EFFORT_ID");

                entity.Property(e => e.ToActivityId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TO_ACTIVITY_ID");

                entity.Property(e => e.TransitionId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TRANSITION_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.ProcessWorkEffort)
                    .WithMany(p => p.WorkEffortTransBoxes)
                    .HasForeignKey(d => d.ProcessWorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WKEFF_TXBX_WE");
            });

            modelBuilder.Entity<WorkEffortType>(entity =>
            {
                entity.ToTable("WORK_EFFORT_TYPE");

                entity.HasIndex(e => e.ParentTypeId, "WK_EFFRT_TYPE_PAR");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFFT_TP_TXCRTS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFFT_TP_TXSTMP");

                entity.Property(e => e.WorkEffortTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.HasTable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAS_TABLE")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ParentTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_TYPE_ID");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InverseParentType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("WK_EFFRT_TYPE_PAR");
            });

            modelBuilder.Entity<WorkEffortTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortTypeId, e.AttrName });

                entity.ToTable("WORK_EFFORT_TYPE_ATTR");

                entity.HasIndex(e => e.WorkEffortTypeId, "WK_EFFRT_TYPE_ATR");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_EFT_TP_ATR_TXP");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_EFT_TP_ATR_TXS");

                entity.Property(e => e.WorkEffortTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.HasOne(d => d.WorkEffortType)
                    .WithMany(p => p.WorkEffortTypeAttrs)
                    .HasForeignKey(d => d.WorkEffortTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WK_EFFRT_TYPE_ATR");
            });

            modelBuilder.Entity<WorkOrderItemFulfillment>(entity =>
            {
                entity.HasKey(e => new { e.WorkEffortId, e.OrderId, e.OrderItemSeqId });

                entity.ToTable("WORK_ORDER_ITEM_FULFILLMENT");

                entity.HasIndex(e => e.OrderId, "WORDER_ITFMT_OHDR");

                entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId }, "WORDER_ITFMT_OITM");

                entity.HasIndex(e => e.WorkEffortId, "WORDER_ITFMT_WEFRT");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_ORR_ITM_FLT_TP");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_ORR_ITM_FLT_TS");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ID");

                entity.Property(e => e.OrderItemSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ITEM_SEQ_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ShipGroupSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SHIP_GROUP_SEQ_ID");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.WorkOrderItemFulfillments)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WORDER_ITFMT_OHDR");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.WorkOrderItemFulfillments)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WORDER_ITFMT_WEFRT");

                entity.HasOne(d => d.OrderI)
                    .WithMany(p => p.WorkOrderItemFulfillments)
                    .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WORDER_ITFMT_OITM");
            });

            modelBuilder.Entity<WorkReqFulfType>(entity =>
            {
                entity.ToTable("WORK_REQ_FULF_TYPE");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_RQ_FLF_TP_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_RQ_FLF_TP_TXSP");

                entity.Property(e => e.WorkReqFulfTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_REQ_FULF_TYPE_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");
            });

            modelBuilder.Entity<WorkRequirementFulfillment>(entity =>
            {
                entity.HasKey(e => new { e.RequirementId, e.WorkEffortId })
                    .HasName("PK_WORK_REQUIREMENT_FULFILLMEN");

                entity.ToTable("WORK_REQUIREMENT_FULFILLMENT");

                entity.HasIndex(e => e.RequirementId, "WORK_REQFL_REQ");

                entity.HasIndex(e => e.WorkEffortId, "WORK_REQFL_WEFF");

                entity.HasIndex(e => e.WorkReqFulfTypeId, "WORK_REQFL_WRFT");

                entity.HasIndex(e => e.CreatedTxStamp, "WRK_RQT_FLFLT_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "WRK_RQT_FLFLT_TXSP");

                entity.Property(e => e.RequirementId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("REQUIREMENT_ID");

                entity.Property(e => e.WorkEffortId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_EFFORT_ID");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.WorkReqFulfTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WORK_REQ_FULF_TYPE_ID");

                entity.HasOne(d => d.Requirement)
                    .WithMany(p => p.WorkRequirementFulfillments)
                    .HasForeignKey(d => d.RequirementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WORK_REQFL_REQ");

                entity.HasOne(d => d.WorkEffort)
                    .WithMany(p => p.WorkRequirementFulfillments)
                    .HasForeignKey(d => d.WorkEffortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WORK_REQFL_WEFF");

                entity.HasOne(d => d.WorkReqFulfType)
                    .WithMany(p => p.WorkRequirementFulfillments)
                    .HasForeignKey(d => d.WorkReqFulfTypeId)
                    .HasConstraintName("WORK_REQFL_WRFT");
            });

            modelBuilder.Entity<X509IssuerProvision>(entity =>
            {
                entity.HasKey(e => e.CertProvisionId);

                entity.ToTable("X509_ISSUER_PROVISION");

                entity.HasIndex(e => e.CreatedTxStamp, "X59_ISR_PRVN_TXCRS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "X59_ISR_PRVN_TXSTP");

                entity.Property(e => e.CertProvisionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CERT_PROVISION_ID");

                entity.Property(e => e.CityLocality)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CITY_LOCALITY");

                entity.Property(e => e.CommonName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMON_NAME");

                entity.Property(e => e.Country)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.OrganizationName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_NAME");

                entity.Property(e => e.OrganizationalUnit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATIONAL_UNIT");

                entity.Property(e => e.SerialNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SERIAL_NUMBER");

                entity.Property(e => e.StateProvince)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("STATE_PROVINCE");
            });

            modelBuilder.Entity<ZipSalesRuleLookup>(entity =>
            {
                entity.HasKey(e => new { e.StateCode, e.City, e.County, e.FromDate });

                entity.ToTable("ZIP_SALES_RULE_LOOKUP");

                entity.HasIndex(e => e.CreatedTxStamp, "ZP_SLS_RL_LKP_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ZP_SLS_RL_LKP_TXSP");

                entity.Property(e => e.StateCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("STATE_CODE");

                entity.Property(e => e.City)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CITY");

                entity.Property(e => e.County)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("COUNTY");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.IdCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ID_CODE");

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.ShipCond)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SHIP_COND");

                entity.Property(e => e.Taxable)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TAXABLE");
            });

            modelBuilder.Entity<ZipSalesTaxLookup>(entity =>
            {
                entity.HasKey(e => new { e.ZipCode, e.StateCode, e.City, e.County, e.FromDate });

                entity.ToTable("ZIP_SALES_TAX_LOOKUP");

                entity.HasIndex(e => e.CreatedTxStamp, "ZP_SLS_TX_LKP_TXCS");

                entity.HasIndex(e => e.LastUpdatedTxStamp, "ZP_SLS_TX_LKP_TXSP");

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ZIP_CODE");

                entity.Property(e => e.StateCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("STATE_CODE");

                entity.Property(e => e.City)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CITY");

                entity.Property(e => e.County)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("COUNTY");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.CityLocalSalesTax)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("CITY_LOCAL_SALES_TAX");

                entity.Property(e => e.CityLocalUseTax)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("CITY_LOCAL_USE_TAX");

                entity.Property(e => e.CitySalesTax)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("CITY_SALES_TAX");

                entity.Property(e => e.CityUseTax)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("CITY_USE_TAX");

                entity.Property(e => e.ComboSalesTax)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("COMBO_SALES_TAX");

                entity.Property(e => e.ComboUseTax)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("COMBO_USE_TAX");

                entity.Property(e => e.CountyDefault)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("COUNTY_DEFAULT")
                    .IsFixedLength();

                entity.Property(e => e.CountyFips)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("COUNTY_FIPS");

                entity.Property(e => e.CountyLocalSalesTax)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("COUNTY_LOCAL_SALES_TAX");

                entity.Property(e => e.CountyLocalUseTax)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("COUNTY_LOCAL_USE_TAX");

                entity.Property(e => e.CountySalesTax)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("COUNTY_SALES_TAX");

                entity.Property(e => e.CountyUseTax)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("COUNTY_USE_TAX");

                entity.Property(e => e.CreatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_STAMP");

                entity.Property(e => e.CreatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATED_TX_STAMP");

                entity.Property(e => e.GeneralDefault)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("GENERAL_DEFAULT")
                    .IsFixedLength();

                entity.Property(e => e.GeoCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("GEO_CODE");

                entity.Property(e => e.InsideCity)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INSIDE_CITY")
                    .IsFixedLength();

                entity.Property(e => e.LastUpdatedStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_STAMP");

                entity.Property(e => e.LastUpdatedTxStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TX_STAMP");

                entity.Property(e => e.StateSalesTax)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("STATE_SALES_TAX");

                entity.Property(e => e.StateUseTax)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("STATE_USE_TAX");
            });
            
            modelBuilder.Entity<ServiceSpecification>(entity =>
            {
                entity.HasKey(ss => new { ss.ServiceSpecificationId });
                 entity.ToTable("SERVICE_SPECIFICATION");
                 
                 entity.HasOne(ss => ss.Make)
                 .WithMany(pc => pc.ServiceSpecificationsAsMake)
                .HasForeignKey(ss => ss.MakeId)
                .OnDelete(DeleteBehavior.ClientSetNull);
                
                entity.HasOne(ss => ss.Model)
                .WithMany(pc => pc.ServiceSpecificationsAsModel)
                .HasForeignKey(ss => ss.ModelId)
                .OnDelete(DeleteBehavior.ClientSetNull);
            });
            
             modelBuilder.Entity<ServiceRate>(entity =>
                {
                 entity.HasKey(s => new { s.ServiceRateId });
                 entity.ToTable("SERVICE_RATES");
                 
                 entity.HasOne(sr => sr.MakeProductCategory)
                .WithMany(pc => pc.ServiceRatesAsMake)
                .HasForeignKey(sr => sr.MakeId)
                .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(sr => sr.ModelProductCategory)
                    .WithMany(pc => pc.ServiceRatesAsModel)
                    .HasForeignKey(sr => sr.ModelId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(sr => sr.ProductStore)
                    .WithMany(ps => ps.ServiceRates)
                    .HasForeignKey(sr => sr.ProductStoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
                    
                });
            
            modelBuilder.Entity<Vehicle>(entity =>
                {
                    entity.HasKey(v => v.VehicleId);
                    entity.ToTable("VEHICLES");
                    
                    entity.Property(v => v.VehicleId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VEHICLE_ID");
    
                    entity.HasOne(v => v.OwnerParty)
                        .WithMany(p => p.Vehicles)
                        .HasForeignKey(v => v.FromPartyId);
                
                    entity.HasOne(v => v.Make)
                        .WithMany(pc => pc.VehiclesAsMake)
                        .HasForeignKey(v => v.MakeId);
                
                    entity.HasOne(v => v.Model)
                        .WithMany(pc => pc.VehiclesAsModel)
                        .HasForeignKey(v => v.ModelId);
                
                    entity.HasOne(v => v.VehicleType)
                        .WithMany(pc => pc.VehiclesAsVehicleType)
                        .HasForeignKey(v => v.VehicleTypeId);
                
                    entity.HasOne(v => v.TransmissionType)
                        .WithMany(pc => pc.VehiclesAsTransmissionType)
                        .HasForeignKey(v => v.TransmissionTypeId);
                
                    entity.HasOne(v => v.ExteriorColor)
                        .WithMany(pc => pc.VehiclesAsExteriorColor)
                        .HasForeignKey(v => v.ExteriorColorId);
                
                    entity.HasOne(v => v.InteriorColor)
                        .WithMany(pc => pc.VehiclesAsInteriorColor)
                        .HasForeignKey(v => v.InteriorColorId);
                });

                
              
                
               
                
                 modelBuilder.Entity<VehicleContent>(entity =>
                 {
                    entity.HasKey(vc => new { vc.VehicleId, vc.ContentId });
                    entity.ToTable("VEHICLE_CONTENTS");
                    
                    entity.HasOne(vc => vc.Vehicle) // VehicleContent has one Vehicle
                        .WithMany(v => v.VehicleContents) // Vehicle has many VehicleContents
                        .HasForeignKey(vc => vc.VehicleId); // Use VehicleId as the foreign key
                        
                    entity.HasOne(vc => vc.Content) // VehicleContent has one Content
                        .WithMany(c => c.VehicleContents) // Content has many VehicleContents
                        .HasForeignKey(vc => vc.ContentId); // Use ContentId as the foreign key
                 });
               
                 
                modelBuilder.Entity<VehicleAnnotation>(entity =>
                 {
                    entity.HasKey(va => new { va.VehicleAnnotationId });
                    entity.ToTable("VEHICLE_ANNOTATIONS");
                    
                    entity.HasKey(e => e.VehicleAnnotationId);
                // Other property configurations

                entity.HasOne(va => va.Vehicle)
                    .WithMany(v => v.VehicleAnnotations)
                    .HasForeignKey(va => va.VehicleId);

                entity.HasOne(va => va.Annotation)
                    .WithMany(a => a.VehicleAnnotations)
                    .HasForeignKey(va => va.AnnotationId);
                 });
                 
                modelBuilder.Entity<Annotation>(entity =>
                 {
                    entity.HasKey(a => new { a.AnnotationId });
                    entity.ToTable("ANNOTATIONS");
                    
                    
                 });
                 
                modelBuilder
                  .Entity<PartyView>()
                  .ToView("PartyView")
                  .HasKey(t => t.FromPartyId);
                
                modelBuilder
                  .Entity<GlAccountHierarchyView>()
                  .ToView("GlAccountHierarchyView")
                  .HasKey(t => t.GlAccountId);
                
            
            foreach (var foreignKey in modelBuilder.Model.GetEntityTypes().SelectMany(e => e.GetForeignKeys()))
                {
                    foreignKey.DeleteBehavior = DeleteBehavior.NoAction;
                }

        }
        
       

    }

