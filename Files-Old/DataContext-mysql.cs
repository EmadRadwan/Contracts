using Domain;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

namespace Persistence;

public class DataContext : IdentityDbContext<AppUserLogin, SecurityGroup, string,
    ApplicationUserClaim, ApplicationUserRole, ApplicationUserLogin,
    SecurityGroupPermission, ApplicationUserToken>
{
    public DataContext()
    {
    }

    public DataContext(DbContextOptions<DataContext> options)
        : base(options)
    {
    }

    public DbSet<Serial> Serials { get; set; }
    public DbSet<AccommodationClass> AccommodationClasses { get; set; }
    public DbSet<AccommodationMap> AccommodationMaps { get; set; }
    public DbSet<AccommodationMapType> AccommodationMapTypes { get; set; }
    public DbSet<AccommodationSpot> AccommodationSpots { get; set; }
    public DbSet<AcctgTran> AcctgTrans { get; set; }
    public DbSet<AcctgTransAttribute> AcctgTransAttributes { get; set; }
    public DbSet<AcctgTransEntry> AcctgTransEntries { get; set; }
    public DbSet<AcctgTransEntryType> AcctgTransEntryTypes { get; set; }
    public DbSet<AcctgTransType> AcctgTransTypes { get; set; }
    public DbSet<AcctgTransTypeAttr> AcctgTransTypeAttrs { get; set; }
    public DbSet<Addendum> Addendums { get; set; }
    public DbSet<AddressMatchMap> AddressMatchMaps { get; set; }
    public DbSet<Affiliate> Affiliates { get; set; }
    public DbSet<Agreement> Agreements { get; set; }
    public DbSet<AgreementAttribute> AgreementAttributes { get; set; }
    public DbSet<AgreementContent> AgreementContents { get; set; }
    public DbSet<AgreementContentType> AgreementContentTypes { get; set; }
    public DbSet<AgreementEmploymentAppl> AgreementEmploymentAppls { get; set; }
    public DbSet<AgreementFacilityAppl> AgreementFacilityAppls { get; set; }
    public DbSet<AgreementGeographicalApplic> AgreementGeographicalApplics { get; set; }
    public DbSet<AgreementItem> AgreementItems { get; set; }
    public DbSet<AgreementItemAttribute> AgreementItemAttributes { get; set; }
    public DbSet<AgreementItemType> AgreementItemTypes { get; set; }
    public DbSet<AgreementItemTypeAttr> AgreementItemTypeAttrs { get; set; }
    public DbSet<AgreementPartyApplic> AgreementPartyApplics { get; set; }
    public DbSet<AgreementProductAppl> AgreementProductAppls { get; set; }
    public DbSet<AgreementPromoAppl> AgreementPromoAppls { get; set; }
    public DbSet<AgreementRole> AgreementRoles { get; set; }
    public DbSet<AgreementTerm> AgreementTerms { get; set; }
    public DbSet<AgreementTermAttribute> AgreementTermAttributes { get; set; }
    public DbSet<AgreementType> AgreementTypes { get; set; }
    public DbSet<AgreementTypeAttr> AgreementTypeAttrs { get; set; }
    public DbSet<AgreementWorkEffortApplic> AgreementWorkEffortApplics { get; set; }
    public DbSet<AllocationPlanHeader> AllocationPlanHeaders { get; set; }
    public DbSet<AllocationPlanItem> AllocationPlanItems { get; set; }
    public DbSet<AllocationPlanType> AllocationPlanTypes { get; set; }
    public DbSet<ApplicationSandbox> ApplicationSandboxes { get; set; }
    public DbSet<AudioDataResource> AudioDataResources { get; set; }
    public DbSet<BenefitType> BenefitTypes { get; set; }
    public DbSet<BillingAccount> BillingAccounts { get; set; }
    public DbSet<BillingAccountRole> BillingAccountRoles { get; set; }
    public DbSet<BillingAccountTerm> BillingAccountTerms { get; set; }
    public DbSet<BillingAccountTermAttr> BillingAccountTermAttrs { get; set; }
    public DbSet<BrowserType> BrowserTypes { get; set; }
    public DbSet<Budget> Budgets { get; set; }
    public DbSet<BudgetAttribute> BudgetAttributes { get; set; }
    public DbSet<BudgetItem> BudgetItems { get; set; }
    public DbSet<BudgetItemAttribute> BudgetItemAttributes { get; set; }
    public DbSet<BudgetItemType> BudgetItemTypes { get; set; }
    public DbSet<BudgetItemTypeAttr> BudgetItemTypeAttrs { get; set; }
    public DbSet<BudgetReview> BudgetReviews { get; set; }
    public DbSet<BudgetReviewResultType> BudgetReviewResultTypes { get; set; }
    public DbSet<BudgetRevision> BudgetRevisions { get; set; }
    public DbSet<BudgetRevisionImpact> BudgetRevisionImpacts { get; set; }
    public DbSet<BudgetRole> BudgetRoles { get; set; }
    public DbSet<BudgetScenario> BudgetScenarios { get; set; }
    public DbSet<BudgetScenarioApplication> BudgetScenarioApplications { get; set; }
    public DbSet<BudgetScenarioRule> BudgetScenarioRules { get; set; }
    public DbSet<BudgetStatu> BudgetStatus { get; set; }
    public DbSet<BudgetType> BudgetTypes { get; set; }
    public DbSet<BudgetTypeAttr> BudgetTypeAttrs { get; set; }
    public DbSet<CarrierShipmentBoxType> CarrierShipmentBoxTypes { get; set; }
    public DbSet<CarrierShipmentMethod> CarrierShipmentMethods { get; set; }
    public DbSet<CartAbandonedLine> CartAbandonedLines { get; set; }
    public DbSet<CatalinaSession> CatalinaSessions { get; set; }
    public DbSet<CharacterSet> CharacterSets { get; set; }
    public DbSet<CheckAccount> CheckAccounts { get; set; }
    public DbSet<CommContentAssocType> CommContentAssocTypes { get; set; }
    public DbSet<CommEventContentAssoc> CommEventContentAssocs { get; set; }
    public DbSet<CommunicationEvent> CommunicationEvents { get; set; }
    public DbSet<CommunicationEventOrder> CommunicationEventOrders { get; set; }
    public DbSet<CommunicationEventProduct> CommunicationEventProducts { get; set; }
    public DbSet<CommunicationEventPrpTyp> CommunicationEventPrpTyps { get; set; }
    public DbSet<CommunicationEventPurpose> CommunicationEventPurposes { get; set; }
    public DbSet<CommunicationEventReturn> CommunicationEventReturns { get; set; }
    public DbSet<CommunicationEventRole> CommunicationEventRoles { get; set; }
    public DbSet<CommunicationEventType> CommunicationEventTypes { get; set; }
    public DbSet<CommunicationEventWorkEff> CommunicationEventWorkEffs { get; set; }
    public DbSet<ConfigOptionProductOption> ConfigOptionProductOptions { get; set; }
    public DbSet<ContactList> ContactLists { get; set; }
    public DbSet<ContactListCommStatus> ContactListCommStatuses { get; set; }
    public DbSet<ContactListParty> ContactListParties { get; set; }
    public DbSet<ContactListPartyStatus> ContactListPartyStatuses { get; set; }
    public DbSet<ContactListType> ContactListTypes { get; set; }
    public DbSet<ContactMech> ContactMeches { get; set; }
    public DbSet<ContactMechAttribute> ContactMechAttributes { get; set; }
    public DbSet<ContactMechLink> ContactMechLinks { get; set; }
    public DbSet<ContactMechPurposeType> ContactMechPurposeTypes { get; set; }
    public DbSet<ContactMechType> ContactMechTypes { get; set; }
    public DbSet<ContactMechTypeAttr> ContactMechTypeAttrs { get; set; }
    public DbSet<ContactMechTypePurpose> ContactMechTypePurposes { get; set; }
    public DbSet<Container> Containers { get; set; }
    public DbSet<ContainerGeoPoint> ContainerGeoPoints { get; set; }
    public DbSet<ContainerType> ContainerTypes { get; set; }
    public DbSet<Content> Contents { get; set; }
    public DbSet<ContentApproval> ContentApprovals { get; set; }
    public DbSet<ContentAssoc> ContentAssocs { get; set; }
    public DbSet<ContentAssocPredicate> ContentAssocPredicates { get; set; }
    public DbSet<ContentAssocType> ContentAssocTypes { get; set; }
    public DbSet<ContentAttribute> ContentAttributes { get; set; }
    public DbSet<ContentKeyword> ContentKeywords { get; set; }
    public DbSet<ContentMetaData> ContentMetaDatas { get; set; }
    public DbSet<ContentOperation> ContentOperations { get; set; }
    public DbSet<ContentPurpose> ContentPurposes { get; set; }
    public DbSet<ContentPurposeOperation> ContentPurposeOperations { get; set; }
    public DbSet<ContentPurposeType> ContentPurposeTypes { get; set; }
    public DbSet<ContentRevision> ContentRevisions { get; set; }
    public DbSet<ContentRevisionItem> ContentRevisionItems { get; set; }
    public DbSet<ContentRole> ContentRoles { get; set; }
    public DbSet<ContentSearchConstraint> ContentSearchConstraints { get; set; }
    public DbSet<ContentSearchResult> ContentSearchResults { get; set; }
    public DbSet<ContentType> ContentTypes { get; set; }
    public DbSet<ContentTypeAttr> ContentTypeAttrs { get; set; }
    public DbSet<CostComponent> CostComponents { get; set; }
    public DbSet<CostComponentAttribute> CostComponentAttributes { get; set; }
    public DbSet<CostComponentCalc> CostComponentCalcs { get; set; }
    public DbSet<CostComponentType> CostComponentTypes { get; set; }
    public DbSet<CostComponentTypeAttr> CostComponentTypeAttrs { get; set; }
    public DbSet<CountryAddressFormat> CountryAddressFormats { get; set; }
    public DbSet<CountryCapital> CountryCapitals { get; set; }
    public DbSet<CountryCode> CountryCodes { get; set; }
    public DbSet<CountryTeleCode> CountryTeleCodes { get; set; }
    public DbSet<CreditCard> CreditCards { get; set; }
    public DbSet<CreditCardTypeGlAccount> CreditCardTypeGlAccounts { get; set; }
    public DbSet<CustRequest> CustRequests { get; set; }
    public DbSet<CustRequestAttribute> CustRequestAttributes { get; set; }
    public DbSet<CustRequestCategory> CustRequestCategories { get; set; }
    public DbSet<CustRequestCommEvent> CustRequestCommEvents { get; set; }
    public DbSet<CustRequestContent> CustRequestContents { get; set; }
    public DbSet<CustRequestItem> CustRequestItems { get; set; }
    public DbSet<CustRequestItemNote> CustRequestItemNotes { get; set; }
    public DbSet<CustRequestItemWorkEffort> CustRequestItemWorkEfforts { get; set; }
    public DbSet<CustRequestNote> CustRequestNotes { get; set; }
    public DbSet<CustRequestParty> CustRequestParties { get; set; }
    public DbSet<CustRequestResolution> CustRequestResolutions { get; set; }
    public DbSet<CustRequestStatu> CustRequestStatus { get; set; }
    public DbSet<CustRequestType> CustRequestTypes { get; set; }
    public DbSet<CustRequestTypeAttr> CustRequestTypeAttrs { get; set; }
    public DbSet<CustRequestWorkEffort> CustRequestWorkEfforts { get; set; }
    public DbSet<CustomMethod> CustomMethods { get; set; }
    public DbSet<CustomMethodType> CustomMethodTypes { get; set; }
    public DbSet<CustomScreen> CustomScreens { get; set; }
    public DbSet<CustomScreenType> CustomScreenTypes { get; set; }
    public DbSet<CustomTimePeriod> CustomTimePeriods { get; set; }
    public DbSet<DataCategory> DataCategories { get; set; }
    public DbSet<DataResource> DataResources { get; set; }
    public DbSet<DataResourceAttribute> DataResourceAttributes { get; set; }
    public DbSet<DataResourceMetaData> DataResourceMetaDatas { get; set; }
    public DbSet<DataResourcePurpose> DataResourcePurposes { get; set; }
    public DbSet<DataResourceRole> DataResourceRoles { get; set; }
    public DbSet<DataResourceType> DataResourceTypes { get; set; }
    public DbSet<DataResourceTypeAttr> DataResourceTypeAttrs { get; set; }
    public DbSet<DataSource> DataSources { get; set; }
    public DbSet<DataSourceType> DataSourceTypes { get; set; }
    public DbSet<DataTemplateType> DataTemplateTypes { get; set; }
    public DbSet<Deduction> Deductions { get; set; }
    public DbSet<DeductionType> DeductionTypes { get; set; }
    public DbSet<Deliverable> Deliverables { get; set; }
    public DbSet<DeliverableType> DeliverableTypes { get; set; }
    public DbSet<Delivery> Deliveries { get; set; }
    public DbSet<DesiredFeature> DesiredFeatures { get; set; }
    public DbSet<Document> Documents { get; set; }
    public DbSet<DocumentAttribute> DocumentAttributes { get; set; }
    public DbSet<DocumentType> DocumentTypes { get; set; }
    public DbSet<DocumentTypeAttr> DocumentTypeAttrs { get; set; }
    public DbSet<EbayConfig> EbayConfigs { get; set; }
    public DbSet<EbayShippingMethod> EbayShippingMethods { get; set; }
    public DbSet<EftAccount> EftAccounts { get; set; }
    public DbSet<ElectronicText> ElectronicTexts { get; set; }
    public DbSet<EmailAddressVerification> EmailAddressVerifications { get; set; }
    public DbSet<EmailTemplateSetting> EmailTemplateSettings { get; set; }
    public DbSet<EmplLeave> EmplLeaves { get; set; }
    public DbSet<EmplLeaveReasonType> EmplLeaveReasonTypes { get; set; }
    public DbSet<EmplLeaveType> EmplLeaveTypes { get; set; }
    public DbSet<EmplPosition> EmplPositions { get; set; }
    public DbSet<EmplPositionClassType> EmplPositionClassTypes { get; set; }
    public DbSet<EmplPositionFulfillment> EmplPositionFulfillments { get; set; }
    public DbSet<EmplPositionReportingStruct> EmplPositionReportingStructs { get; set; }
    public DbSet<EmplPositionResponsibility> EmplPositionResponsibilities { get; set; }
    public DbSet<EmplPositionType> EmplPositionTypes { get; set; }
    public DbSet<EmplPositionTypeClass> EmplPositionTypeClasses { get; set; }
    public DbSet<EmplPositionTypeRateNew> EmplPositionTypeRateNews { get; set; }
    public DbSet<Employment> Employments { get; set; }
    public DbSet<EmploymentApp> EmploymentApps { get; set; }
    public DbSet<EmploymentAppSourceType> EmploymentAppSourceTypes { get; set; }
    public DbSet<EntityAuditLog> EntityAuditLogs { get; set; }
    public DbSet<EntityGroup> EntityGroups { get; set; }
    public DbSet<EntityGroupEntry> EntityGroupEntries { get; set; }
    public DbSet<EntityKeyStore> EntityKeyStores { get; set; }
    public DbSet<EntitySync> EntitySyncs { get; set; }
    public DbSet<EntitySyncHistory> EntitySyncHistories { get; set; }
    public DbSet<EntitySyncInclude> EntitySyncIncludes { get; set; }
    public DbSet<EntitySyncIncludeGroup> EntitySyncIncludeGroups { get; set; }
    public DbSet<EntitySyncRemove> EntitySyncRemoves { get; set; }
    public DbSet<Enumeration> Enumerations { get; set; }
    public DbSet<EnumerationType> EnumerationTypes { get; set; }

    public DbSet<ExcelImportHistory> ExcelImportHistories { get; set; }
    public DbSet<Facility> Facilities { get; set; }
    public DbSet<FacilityAssocType> FacilityAssocTypes { get; set; }
    public DbSet<FacilityAttribute> FacilityAttributes { get; set; }
    public DbSet<FacilityCalendar> FacilityCalendars { get; set; }
    public DbSet<FacilityCalendarType> FacilityCalendarTypes { get; set; }
    public DbSet<FacilityCarrierShipment> FacilityCarrierShipments { get; set; }
    public DbSet<FacilityContactMech> FacilityContactMeches { get; set; }
    public DbSet<FacilityContactMechPurpose> FacilityContactMechPurposes { get; set; }
    public DbSet<FacilityContent> FacilityContents { get; set; }
    public DbSet<FacilityGroup> FacilityGroups { get; set; }
    public DbSet<FacilityGroupMember> FacilityGroupMembers { get; set; }
    public DbSet<FacilityGroupRole> FacilityGroupRoles { get; set; }
    public DbSet<FacilityGroupRollup> FacilityGroupRollups { get; set; }
    public DbSet<FacilityGroupType> FacilityGroupTypes { get; set; }
    public DbSet<FacilityLocation> FacilityLocations { get; set; }
    public DbSet<FacilityLocationGeoPoint> FacilityLocationGeoPoints { get; set; }
    public DbSet<FacilityParty> FacilityParties { get; set; }
    public DbSet<FacilityType> FacilityTypes { get; set; }
    public DbSet<FacilityTypeAttr> FacilityTypeAttrs { get; set; }
    public DbSet<FileExtension> FileExtensions { get; set; }
    public DbSet<FinAccount> FinAccounts { get; set; }
    public DbSet<FinAccountAttribute> FinAccountAttributes { get; set; }
    public DbSet<FinAccountAuth> FinAccountAuths { get; set; }
    public DbSet<FinAccountRole> FinAccountRoles { get; set; }
    public DbSet<FinAccountStatu> FinAccountStatus { get; set; }
    public DbSet<FinAccountTran> FinAccountTrans { get; set; }
    public DbSet<FinAccountTransAttribute> FinAccountTransAttributes { get; set; }
    public DbSet<FinAccountTransType> FinAccountTransTypes { get; set; }
    public DbSet<FinAccountTransTypeAttr> FinAccountTransTypeAttrs { get; set; }
    public DbSet<FinAccountType> FinAccountTypes { get; set; }
    public DbSet<FinAccountTypeAttr> FinAccountTypeAttrs { get; set; }
    public DbSet<FinAccountTypeGlAccount> FinAccountTypeGlAccounts { get; set; }
    public DbSet<FixedAsset> FixedAssets { get; set; }
    public DbSet<FixedAssetAttribute> FixedAssetAttributes { get; set; }
    public DbSet<FixedAssetDepMethod> FixedAssetDepMethods { get; set; }
    public DbSet<FixedAssetGeoPoint> FixedAssetGeoPoints { get; set; }
    public DbSet<FixedAssetIdent> FixedAssetIdents { get; set; }
    public DbSet<FixedAssetIdentType> FixedAssetIdentTypes { get; set; }
    public DbSet<FixedAssetMaint> FixedAssetMaints { get; set; }
    public DbSet<FixedAssetMaintOrder> FixedAssetMaintOrders { get; set; }
    public DbSet<FixedAssetMeter> FixedAssetMeters { get; set; }
    public DbSet<FixedAssetProduct> FixedAssetProducts { get; set; }
    public DbSet<FixedAssetProductType> FixedAssetProductTypes { get; set; }
    public DbSet<FixedAssetRegistration> FixedAssetRegistrations { get; set; }
    public DbSet<FixedAssetStdCost> FixedAssetStdCosts { get; set; }
    public DbSet<FixedAssetStdCostType> FixedAssetStdCostTypes { get; set; }
    public DbSet<FixedAssetType> FixedAssetTypes { get; set; }
    public DbSet<FixedAssetTypeAttr> FixedAssetTypeAttrs { get; set; }
    public DbSet<FixedAssetTypeGlAccount> FixedAssetTypeGlAccounts { get; set; }
    public DbSet<FtpAddress> FtpAddresses { get; set; }
    public DbSet<Geo> Geos { get; set; }
    public DbSet<GeoAssoc> GeoAssocs { get; set; }
    public DbSet<GeoAssocType> GeoAssocTypes { get; set; }
    public DbSet<GeoPoint> GeoPoints { get; set; }
    public DbSet<GeoType> GeoTypes { get; set; }
    public DbSet<GiftCard> GiftCards { get; set; }
    public DbSet<GiftCardFulfillment> GiftCardFulfillments { get; set; }
    public DbSet<GitHubUser> GitHubUsers { get; set; }
    public DbSet<GlAccount> GlAccounts { get; set; }
    public DbSet<GlAccountCategory> GlAccountCategories { get; set; }
    public DbSet<GlAccountCategoryMember> GlAccountCategoryMembers { get; set; }
    public DbSet<GlAccountCategoryType> GlAccountCategoryTypes { get; set; }
    public DbSet<GlAccountClass> GlAccountClasses { get; set; }
    public DbSet<GlAccountGroup> GlAccountGroups { get; set; }
    public DbSet<GlAccountGroupMember> GlAccountGroupMembers { get; set; }
    public DbSet<GlAccountGroupType> GlAccountGroupTypes { get; set; }
    public DbSet<GlAccountHistory> GlAccountHistories { get; set; }
    public DbSet<GlAccountOrganization> GlAccountOrganizations { get; set; }
    public DbSet<GlAccountRole> GlAccountRoles { get; set; }
    public DbSet<GlAccountType> GlAccountTypes { get; set; }
    public DbSet<GlAccountTypeDefault> GlAccountTypeDefaults { get; set; }
    public DbSet<GlBudgetXref> GlBudgetXrefs { get; set; }
    public DbSet<GlFiscalType> GlFiscalTypes { get; set; }
    public DbSet<GlJournal> GlJournals { get; set; }
    public DbSet<GlReconciliation> GlReconciliations { get; set; }
    public DbSet<GlReconciliationEntry> GlReconciliationEntries { get; set; }
    public DbSet<GlResourceType> GlResourceTypes { get; set; }
    public DbSet<GlXbrlClass> GlXbrlClasses { get; set; }
    public DbSet<GoodIdentification> GoodIdentifications { get; set; }
    public DbSet<GoodIdentificationType> GoodIdentificationTypes { get; set; }
    public DbSet<ImageDataResource> ImageDataResources { get; set; }
    public DbSet<InventoryItem> InventoryItems { get; set; }
    public DbSet<InventoryItemAttribute> InventoryItemAttributes { get; set; }
    public DbSet<InventoryItemDetail> InventoryItemDetails { get; set; }
    public DbSet<InventoryItemLabel> InventoryItemLabels { get; set; }
    public DbSet<InventoryItemLabelAppl> InventoryItemLabelAppls { get; set; }
    public DbSet<InventoryItemLabelType> InventoryItemLabelTypes { get; set; }
    public DbSet<InventoryItemStatu> InventoryItemStatus { get; set; }
    public DbSet<InventoryItemTempRe> InventoryItemTempRes { get; set; }
    public DbSet<InventoryItemType> InventoryItemTypes { get; set; }
    public DbSet<InventoryItemTypeAttr> InventoryItemTypeAttrs { get; set; }
    public DbSet<InventoryItemVariance> InventoryItemVariances { get; set; }
    public DbSet<InventoryTransfer> InventoryTransfers { get; set; }
    public DbSet<Invoice> Invoices { get; set; }
    public DbSet<InvoiceAttribute> InvoiceAttributes { get; set; }
    public DbSet<InvoiceContactMech> InvoiceContactMeches { get; set; }
    public DbSet<InvoiceContent> InvoiceContents { get; set; }
    public DbSet<InvoiceContentType> InvoiceContentTypes { get; set; }
    public DbSet<InvoiceItem> InvoiceItems { get; set; }
    public DbSet<InvoiceItemAssoc> InvoiceItemAssocs { get; set; }
    public DbSet<InvoiceItemAssocType> InvoiceItemAssocTypes { get; set; }
    public DbSet<InvoiceItemAttribute> InvoiceItemAttributes { get; set; }
    public DbSet<InvoiceItemType> InvoiceItemTypes { get; set; }
    public DbSet<InvoiceItemTypeAttr> InvoiceItemTypeAttrs { get; set; }
    public DbSet<InvoiceItemTypeGlAccount> InvoiceItemTypeGlAccounts { get; set; }
    public DbSet<InvoiceItemTypeMap> InvoiceItemTypeMaps { get; set; }
    public DbSet<InvoiceNote> InvoiceNotes { get; set; }
    public DbSet<InvoiceRole> InvoiceRoles { get; set; }
    public DbSet<InvoiceStatu> InvoiceStatus { get; set; }
    public DbSet<InvoiceTerm> InvoiceTerms { get; set; }
    public DbSet<InvoiceTermAttribute> InvoiceTermAttributes { get; set; }
    public DbSet<InvoiceType> InvoiceTypes { get; set; }
    public DbSet<InvoiceTypeAttr> InvoiceTypeAttrs { get; set; }
    public DbSet<ItemIssuance> ItemIssuances { get; set; }
    public DbSet<ItemIssuanceRole> ItemIssuanceRoles { get; set; }
    public DbSet<JavaResource> JavaResources { get; set; }
    public DbSet<JobInterview> JobInterviews { get; set; }
    public DbSet<JobInterviewType> JobInterviewTypes { get; set; }
    public DbSet<JobManagerLock> JobManagerLocks { get; set; }
    public DbSet<JobRequisition> JobRequisitions { get; set; }
    public DbSet<JobSandbox> JobSandboxes { get; set; }
    public DbSet<KeywordThesauru> KeywordThesaurus { get; set; }
    public DbSet<LinkedInUser> LinkedInUsers { get; set; }
    public DbSet<Lot> Lots { get; set; }
    public DbSet<MarketInterest> MarketInterests { get; set; }
    public DbSet<MarketingCampaign> MarketingCampaigns { get; set; }
    public DbSet<MarketingCampaignNote> MarketingCampaignNotes { get; set; }
    public DbSet<MarketingCampaignPrice> MarketingCampaignPrices { get; set; }
    public DbSet<MarketingCampaignPromo> MarketingCampaignPromoes { get; set; }
    public DbSet<MarketingCampaignRole> MarketingCampaignRoles { get; set; }
    public DbSet<MetaDataPredicate> MetaDataPredicates { get; set; }
    public DbSet<MimeType> MimeTypes { get; set; }
    public DbSet<MimeTypeHtmlTemplate> MimeTypeHtmlTemplates { get; set; }
    public DbSet<MrpEvent> MrpEvents { get; set; }
    public DbSet<MrpEventType> MrpEventTypes { get; set; }
    public DbSet<Msg91GatewayConfig> Msg91GatewayConfig { get; set; }
    public DbSet<NeedType> NeedTypes { get; set; }
    public DbSet<NoteData> NoteDatas { get; set; }
    public DbSet<OAuth2GitHub> OAuth2GitHub { get; set; }
    public DbSet<OAuth2LinkedIn> OAuth2LinkedIn { get; set; }
    public DbSet<OrderAdjustment> OrderAdjustments { get; set; }
    public DbSet<OrderAdjustmentAttribute> OrderAdjustmentAttributes { get; set; }
    public DbSet<OrderAdjustmentBilling> OrderAdjustmentBillings { get; set; }
    public DbSet<OrderAdjustmentType> OrderAdjustmentTypes { get; set; }
    public DbSet<OrderAdjustmentTypeAttr> OrderAdjustmentTypeAttrs { get; set; }
    public DbSet<OrderAttribute> OrderAttributes { get; set; }
    public DbSet<OrderBlacklist> OrderBlacklists { get; set; }
    public DbSet<OrderBlacklistType> OrderBlacklistTypes { get; set; }
    public DbSet<OrderContactMech> OrderContactMeches { get; set; }
    public DbSet<OrderContent> OrderContents { get; set; }
    public DbSet<OrderContentType> OrderContentTypes { get; set; }
    public DbSet<OrderDeliverySchedule> OrderDeliverySchedules { get; set; }
    public DbSet<OrderHeader> OrderHeaders { get; set; }
    public DbSet<OrderHeaderNote> OrderHeaderNotes { get; set; }
    public DbSet<OrderHeaderWorkEffort> OrderHeaderWorkEfforts { get; set; }
    public DbSet<OrderItem> OrderItems { get; set; }
    public DbSet<OrderItemAssoc> OrderItemAssocs { get; set; }
    public DbSet<OrderItemAssocType> OrderItemAssocTypes { get; set; }
    public DbSet<OrderItemAttribute> OrderItemAttributes { get; set; }
    public DbSet<OrderItemBilling> OrderItemBillings { get; set; }
    public DbSet<OrderItemChange> OrderItemChanges { get; set; }
    public DbSet<OrderItemContactMech> OrderItemContactMeches { get; set; }
    public DbSet<OrderItemGroup> OrderItemGroups { get; set; }
    public DbSet<OrderItemGroupOrder> OrderItemGroupOrders { get; set; }
    public DbSet<OrderItemPriceInfo> OrderItemPriceInfoes { get; set; }
    public DbSet<OrderItemRole> OrderItemRoles { get; set; }
    public DbSet<OrderItemShipGroup> OrderItemShipGroups { get; set; }
    public DbSet<OrderItemShipGroupAssoc> OrderItemShipGroupAssocs { get; set; }
    public DbSet<OrderItemShipGrpInvRe> OrderItemShipGrpInvRes { get; set; }
    public DbSet<OrderItemType> OrderItemTypes { get; set; }
    public DbSet<OrderItemTypeAttr> OrderItemTypeAttrs { get; set; }
    public DbSet<OrderNotification> OrderNotifications { get; set; }
    public DbSet<OrderPaymentPreference> OrderPaymentPreferences { get; set; }
    public DbSet<OrderProductPromoCode> OrderProductPromoCodes { get; set; }
    public DbSet<OrderRequirementCommitment> OrderRequirementCommitments { get; set; }
    public DbSet<OrderRole> OrderRoles { get; set; }
    public DbSet<OrderShipment> OrderShipments { get; set; }
    public DbSet<OrderStatu> OrderStatus { get; set; }
    public DbSet<OrderSummaryEntry> OrderSummaryEntries { get; set; }
    public DbSet<OrderTerm> OrderTerms { get; set; }
    public DbSet<OrderTermAttribute> OrderTermAttributes { get; set; }
    public DbSet<OrderType> OrderTypes { get; set; }
    public DbSet<OrderTypeAttr> OrderTypeAttrs { get; set; }
    public DbSet<OtherDataResource> OtherDataResources { get; set; }
    public DbSet<Party> Parties { get; set; }
    public DbSet<PartyAcctgPreference> PartyAcctgPreferences { get; set; }
    public DbSet<PartyAttribute> PartyAttributes { get; set; }
    public DbSet<PartyBenefit> PartyBenefits { get; set; }
    public DbSet<PartyCarrierAccount> PartyCarrierAccounts { get; set; }
    public DbSet<PartyClassification> PartyClassifications { get; set; }
    public DbSet<PartyClassificationGroup> PartyClassificationGroups { get; set; }
    public DbSet<PartyClassificationType> PartyClassificationTypes { get; set; }
    public DbSet<PartyContactMech> PartyContactMeches { get; set; }
    public DbSet<PartyContactMechPurpose> PartyContactMechPurposes { get; set; }
    public DbSet<PartyContent> PartyContents { get; set; }
    public DbSet<PartyContentType> PartyContentTypes { get; set; }
    public DbSet<PartyDataSource> PartyDataSources { get; set; }
    public DbSet<PartyFixedAssetAssignment> PartyFixedAssetAssignments { get; set; }
    public DbSet<PartyGeoPoint> PartyGeoPoints { get; set; }
    public DbSet<PartyGlAccount> PartyGlAccounts { get; set; }
    public DbSet<PartyGroup> PartyGroups { get; set; }
    public DbSet<PartyIcsAvsOverride> PartyIcsAvsOverrides { get; set; }
    public DbSet<PartyIdentification> PartyIdentifications { get; set; }
    public DbSet<PartyIdentificationType> PartyIdentificationTypes { get; set; }
    public DbSet<PartyInvitation> PartyInvitations { get; set; }
    public DbSet<PartyInvitationGroupAssoc> PartyInvitationGroupAssocs { get; set; }
    public DbSet<PartyInvitationRoleAssoc> PartyInvitationRoleAssocs { get; set; }
    public DbSet<PartyNameHistory> PartyNameHistories { get; set; }
    public DbSet<PartyNeed> PartyNeeds { get; set; }
    public DbSet<PartyNote> PartyNotes { get; set; }
    public DbSet<PartyPrefDocTypeTpl> PartyPrefDocTypeTpls { get; set; }
    public DbSet<PartyProfileDefault> PartyProfileDefaults { get; set; }
    public DbSet<PartyQual> PartyQuals { get; set; }
    public DbSet<PartyQualType> PartyQualTypes { get; set; }
    public DbSet<PartyRateNew> PartyRateNews { get; set; }
    public DbSet<PartyRelationship> PartyRelationships { get; set; }
    public DbSet<PartyRelationshipType> PartyRelationshipTypes { get; set; }
    public DbSet<PartyResume> PartyResumes { get; set; }
    public DbSet<PartyRole> PartyRoles { get; set; }
    public DbSet<PartySkill> PartySkills { get; set; }
    public DbSet<PartyStatus> PartyStatuses { get; set; }
    public DbSet<PartyTaxAuthInfo> PartyTaxAuthInfoes { get; set; }
    public DbSet<PartyType> PartyTypes { get; set; }
    public DbSet<PartyTypeAttr> PartyTypeAttrs { get; set; }
    public DbSet<PayGrade> PayGrades { get; set; }
    public DbSet<PayHistory> PayHistories { get; set; }
    public DbSet<PayPalPaymentMethod> PayPalPaymentMethods { get; set; }
    public DbSet<Payment> Payments { get; set; }
    public DbSet<PaymentApplication> PaymentApplications { get; set; }
    public DbSet<PaymentAttribute> PaymentAttributes { get; set; }
    public DbSet<PaymentBudgetAllocation> PaymentBudgetAllocations { get; set; }
    public DbSet<PaymentContent> PaymentContents { get; set; }
    public DbSet<PaymentContentType> PaymentContentTypes { get; set; }
    public DbSet<PaymentGatewayAuthorizeNet> PaymentGatewayAuthorizeNets { get; set; }
    public DbSet<PaymentGatewayClearCommerce> PaymentGatewayClearCommerces { get; set; }
    public DbSet<PaymentGatewayConfig> PaymentGatewayConfigs { get; set; }
    public DbSet<PaymentGatewayConfigType> PaymentGatewayConfigTypes { get; set; }
    public DbSet<PaymentGatewayCyberSource> PaymentGatewayCyberSources { get; set; }
    public DbSet<PaymentGatewayEway> PaymentGatewayEways { get; set; }
    public DbSet<PaymentGatewayFirstData> PaymentGatewayFirstDatas { get; set; }
    public DbSet<PaymentGatewayOrbital> PaymentGatewayOrbitals { get; set; }
    public DbSet<PaymentGatewayPayPal> PaymentGatewayPayPals { get; set; }
    public DbSet<PaymentGatewayPayflowPro> PaymentGatewayPayflowProes { get; set; }
    public DbSet<PaymentGatewayRespMsg> PaymentGatewayRespMsgs { get; set; }
    public DbSet<PaymentGatewayResponse> PaymentGatewayResponses { get; set; }
    public DbSet<PaymentGatewaySagePay> PaymentGatewaySagePays { get; set; }
    public DbSet<PaymentGatewaySecurePay> PaymentGatewaySecurePays { get; set; }
    public DbSet<PaymentGatewayWorldPay> PaymentGatewayWorldPays { get; set; }
    public DbSet<PaymentGlAccountTypeMap> PaymentGlAccountTypeMaps { get; set; }
    public DbSet<PaymentGroup> PaymentGroups { get; set; }
    public DbSet<PaymentGroupMember> PaymentGroupMembers { get; set; }
    public DbSet<PaymentGroupType> PaymentGroupTypes { get; set; }
    public DbSet<PaymentMethod> PaymentMethods { get; set; }
    public DbSet<PaymentMethodType> PaymentMethodTypes { get; set; }
    public DbSet<PaymentMethodTypeGlAccount> PaymentMethodTypeGlAccounts { get; set; }
    public DbSet<PaymentType> PaymentTypes { get; set; }
    public DbSet<PaymentTypeAttr> PaymentTypeAttrs { get; set; }
    public DbSet<PayrollPreference> PayrollPreferences { get; set; }
    public DbSet<PerfRatingType> PerfRatingTypes { get; set; }
    public DbSet<PerfReview> PerfReviews { get; set; }
    public DbSet<PerfReviewItem> PerfReviewItems { get; set; }
    public DbSet<PerfReviewItemType> PerfReviewItemTypes { get; set; }
    public DbSet<PerformanceNote> PerformanceNotes { get; set; }
    public DbSet<PeriodType> PeriodTypes { get; set; }
    public DbSet<Person> Persons { get; set; }
    public DbSet<PersonTraining> PersonTrainings { get; set; }
    public DbSet<PhysicalInventory> PhysicalInventories { get; set; }
    public DbSet<Picklist> Picklists { get; set; }
    public DbSet<PicklistBin> PicklistBins { get; set; }
    public DbSet<PicklistItem> PicklistItems { get; set; }
    public DbSet<PicklistRole> PicklistRoles { get; set; }
    public DbSet<PicklistStatu> PicklistStatus { get; set; }
    public DbSet<PicklistStatusHistory> PicklistStatusHistories { get; set; }
    public DbSet<PlatformType> PlatformTypes { get; set; }
    public DbSet<PortalPage> PortalPages { get; set; }
    public DbSet<PortalPageColumn> PortalPageColumns { get; set; }
    public DbSet<PortalPagePortlet> PortalPagePortlets { get; set; }
    public DbSet<PortalPortlet> PortalPortlets { get; set; }
    public DbSet<PortletAttribute> PortletAttributes { get; set; }
    public DbSet<PortletCategory> PortletCategories { get; set; }
    public DbSet<PortletPortletCategory> PortletPortletCategories { get; set; }
    public DbSet<PosTerminal> PosTerminals { get; set; }
    public DbSet<PosTerminalInternTx> PosTerminalInternTxes { get; set; }
    public DbSet<PosTerminalLog> PosTerminalLogs { get; set; }
    public DbSet<PosTerminalState> PosTerminalStates { get; set; }
    public DbSet<PostalAddress> PostalAddresses { get; set; }
    public DbSet<PostalAddressBoundary> PostalAddressBoundaries { get; set; }
    public DbSet<PriorityType> PriorityTypes { get; set; }
    public DbSet<ProdCatalog> ProdCatalogs { get; set; }
    public DbSet<ProdCatalogCategory> ProdCatalogCategories { get; set; }
    public DbSet<ProdCatalogCategoryType> ProdCatalogCategoryTypes { get; set; }
    public DbSet<ProdCatalogInvFacility> ProdCatalogInvFacilities { get; set; }
    public DbSet<ProdCatalogRole> ProdCatalogRoles { get; set; }
    public DbSet<ProdConfItemContent> ProdConfItemContents { get; set; }
    public DbSet<ProdConfItemContentType> ProdConfItemContentTypes { get; set; }
    public DbSet<ProdPromoCodeContactMech> ProdPromoCodeContactMeches { get; set; }
    public DbSet<Product> Products { get; set; }
    public DbSet<ProductAssoc> ProductAssocs { get; set; }
    public DbSet<ProductAssocType> ProductAssocTypes { get; set; }
    public DbSet<ProductAttribute> ProductAttributes { get; set; }
    public DbSet<ProductAverageCost> ProductAverageCosts { get; set; }
    public DbSet<ProductAverageCostType> ProductAverageCostTypes { get; set; }
    public DbSet<ProductCalculatedInfo> ProductCalculatedInfoes { get; set; }
    public DbSet<ProductCategory> ProductCategories { get; set; }
    public DbSet<ProductCategoryAttribute> ProductCategoryAttributes { get; set; }
    public DbSet<ProductCategoryContent> ProductCategoryContents { get; set; }
    public DbSet<ProductCategoryContentType> ProductCategoryContentTypes { get; set; }
    public DbSet<ProductCategoryGlAccount> ProductCategoryGlAccounts { get; set; }
    public DbSet<ProductCategoryLink> ProductCategoryLinks { get; set; }
    public DbSet<ProductCategoryMember> ProductCategoryMembers { get; set; }
    public DbSet<ProductCategoryRole> ProductCategoryRoles { get; set; }
    public DbSet<ProductCategoryRollup> ProductCategoryRollups { get; set; }
    public DbSet<ProductCategoryType> ProductCategoryTypes { get; set; }
    public DbSet<ProductCategoryTypeAttr> ProductCategoryTypeAttrs { get; set; }
    public DbSet<ProductConfig> ProductConfigs { get; set; }
    public DbSet<ProductConfigConfig> ProductConfigConfigs { get; set; }
    public DbSet<ProductConfigItem> ProductConfigItems { get; set; }
    public DbSet<ProductConfigOption> ProductConfigOptions { get; set; }
    public DbSet<ProductConfigOptionIactn> ProductConfigOptionIactns { get; set; }
    public DbSet<ProductConfigProduct> ProductConfigProducts { get; set; }
    public DbSet<ProductConfigStat> ProductConfigStats { get; set; }
    public DbSet<ProductContent> ProductContents { get; set; }
    public DbSet<ProductContentType> ProductContentTypes { get; set; }
    public DbSet<ProductCostComponentCalc> ProductCostComponentCalcs { get; set; }
    public DbSet<ProductFacility> ProductFacilities { get; set; }
    public DbSet<ProductFacilityAssoc> ProductFacilityAssocs { get; set; }
    public DbSet<ProductFacilityLocation> ProductFacilityLocations { get; set; }
    public DbSet<ProductFeature> ProductFeatures { get; set; }
    public DbSet<ProductFeatureAppl> ProductFeatureAppls { get; set; }
    public DbSet<ProductFeatureApplAttr> ProductFeatureApplAttrs { get; set; }
    public DbSet<ProductFeatureApplType> ProductFeatureApplTypes { get; set; }
    public DbSet<ProductFeatureCatGrpAppl> ProductFeatureCatGrpAppls { get; set; }
    public DbSet<ProductFeatureCategory> ProductFeatureCategories { get; set; }
    public DbSet<ProductFeatureCategoryAppl> ProductFeatureCategoryAppls { get; set; }
    public DbSet<ProductFeatureDataResource> ProductFeatureDataResources { get; set; }
    public DbSet<ProductFeatureGroup> ProductFeatureGroups { get; set; }
    public DbSet<ProductFeatureGroupAppl> ProductFeatureGroupAppls { get; set; }
    public DbSet<ProductFeatureIactn> ProductFeatureIactns { get; set; }
    public DbSet<ProductFeatureIactnType> ProductFeatureIactnTypes { get; set; }
    public DbSet<ProductFeaturePrice> ProductFeaturePrices { get; set; }
    public DbSet<ProductFeatureType> ProductFeatureTypes { get; set; }
    public DbSet<ProductGeo> ProductGeos { get; set; }
    public DbSet<ProductGlAccount> ProductGlAccounts { get; set; }
    public DbSet<ProductGroupOrder> ProductGroupOrders { get; set; }
    public DbSet<ProductKeywordNew> ProductKeywordNews { get; set; }
    public DbSet<ProductMaint> ProductMaints { get; set; }
    public DbSet<ProductMaintType> ProductMaintTypes { get; set; }
    public DbSet<ProductManufacturingRule> ProductManufacturingRules { get; set; }
    public DbSet<ProductMeter> ProductMeters { get; set; }
    public DbSet<ProductMeterType> ProductMeterTypes { get; set; }
    public DbSet<ProductOrderItem> ProductOrderItems { get; set; }
    public DbSet<ProductPaymentMethodType> ProductPaymentMethodTypes { get; set; }
    public DbSet<ProductPrice> ProductPrices { get; set; }
    public DbSet<ProductPriceAction> ProductPriceActions { get; set; }
    public DbSet<ProductPriceActionType> ProductPriceActionTypes { get; set; }
    public DbSet<ProductPriceAutoNotice> ProductPriceAutoNotices { get; set; }
    public DbSet<ProductPriceChange> ProductPriceChanges { get; set; }
    public DbSet<ProductPriceCond> ProductPriceConds { get; set; }
    public DbSet<ProductPricePurpose> ProductPricePurposes { get; set; }
    public DbSet<ProductPriceRule> ProductPriceRules { get; set; }
    public DbSet<ProductPriceType> ProductPriceTypes { get; set; }
    public DbSet<ProductPromo> ProductPromoes { get; set; }
    public DbSet<ProductPromoAction> ProductPromoActions { get; set; }
    public DbSet<ProductPromoCategory> ProductPromoCategories { get; set; }
    public DbSet<ProductPromoCode> ProductPromoCodes { get; set; }
    public DbSet<ProductPromoCodeEmail> ProductPromoCodeEmails { get; set; }
    public DbSet<ProductPromoCodeParty> ProductPromoCodeParties { get; set; }
    public DbSet<ProductPromoCond> ProductPromoConds { get; set; }
    public DbSet<ProductPromoContent> ProductPromoContents { get; set; }
    public DbSet<ProductPromoProduct> ProductPromoProducts { get; set; }
    public DbSet<ProductPromoRule> ProductPromoRules { get; set; }
    public DbSet<ProductPromoUse> ProductPromice { get; set; }
    public DbSet<ProductReview> ProductReviews { get; set; }
    public DbSet<ProductRole> ProductRoles { get; set; }
    public DbSet<ProductSearchConstraint> ProductSearchConstraints { get; set; }
    public DbSet<ProductSearchResult> ProductSearchResults { get; set; }
    public DbSet<ProductStore> ProductStores { get; set; }
    public DbSet<ProductStoreCatalog> ProductStoreCatalogs { get; set; }
    public DbSet<ProductStoreEmailSetting> ProductStoreEmailSettings { get; set; }
    public DbSet<ProductStoreFacility> ProductStoreFacilities { get; set; }
    public DbSet<ProductStoreFinActSetting> ProductStoreFinActSettings { get; set; }
    public DbSet<ProductStoreGroup> ProductStoreGroups { get; set; }
    public DbSet<ProductStoreGroupMember> ProductStoreGroupMembers { get; set; }
    public DbSet<ProductStoreGroupRole> ProductStoreGroupRoles { get; set; }
    public DbSet<ProductStoreGroupRollup> ProductStoreGroupRollups { get; set; }
    public DbSet<ProductStoreGroupType> ProductStoreGroupTypes { get; set; }
    public DbSet<ProductStoreKeywordOvrd> ProductStoreKeywordOvrds { get; set; }
    public DbSet<ProductStorePaymentSetting> ProductStorePaymentSettings { get; set; }
    public DbSet<ProductStorePromoAppl> ProductStorePromoAppls { get; set; }
    public DbSet<ProductStoreRole> ProductStoreRoles { get; set; }
    public DbSet<ProductStoreShipmentMeth> ProductStoreShipmentMeths { get; set; }
    public DbSet<ProductStoreSurveyAppl> ProductStoreSurveyAppls { get; set; }
    public DbSet<ProductStoreTelecomSetting> ProductStoreTelecomSettings { get; set; }
    public DbSet<ProductStoreVendorPayment> ProductStoreVendorPayments { get; set; }
    public DbSet<ProductStoreVendorShipment> ProductStoreVendorShipments { get; set; }
    public DbSet<ProductSubscriptionResource> ProductSubscriptionResources { get; set; }
    public DbSet<ProductType> ProductTypes { get; set; }
    public DbSet<ProductTypeAttr> ProductTypeAttrs { get; set; }
    public DbSet<ProtectedView> ProtectedViews { get; set; }
    public DbSet<ProtocolType> ProtocolTypes { get; set; }
    public DbSet<QuantityBreak> QuantityBreaks { get; set; }
    public DbSet<QuantityBreakType> QuantityBreakTypes { get; set; }
    public DbSet<Quote> Quotes { get; set; }
    public DbSet<QuoteAdjustment> QuoteAdjustments { get; set; }
    public DbSet<QuoteAttribute> QuoteAttributes { get; set; }
    public DbSet<QuoteCoefficient> QuoteCoefficients { get; set; }
    public DbSet<QuoteItem> QuoteItems { get; set; }
    public DbSet<QuoteNote> QuoteNotes { get; set; }
    public DbSet<QuoteRole> QuoteRoles { get; set; }
    public DbSet<QuoteTerm> QuoteTerms { get; set; }
    public DbSet<QuoteTermAttribute> QuoteTermAttributes { get; set; }
    public DbSet<QuoteType> QuoteTypes { get; set; }
    public DbSet<QuoteTypeAttr> QuoteTypeAttrs { get; set; }
    public DbSet<QuoteWorkEffort> QuoteWorkEfforts { get; set; }
    public DbSet<RateAmount> RateAmounts { get; set; }
    public DbSet<RateType> RateTypes { get; set; }
    public DbSet<RecurrenceInfo> RecurrenceInfoes { get; set; }
    public DbSet<RecurrenceRule> RecurrenceRules { get; set; }
    public DbSet<RejectionReason> RejectionReasons { get; set; }
    public DbSet<ReorderGuideline> ReorderGuidelines { get; set; }
    public DbSet<Requirement> Requirements { get; set; }
    public DbSet<RequirementAttribute> RequirementAttributes { get; set; }
    public DbSet<RequirementBudgetAllocation> RequirementBudgetAllocations { get; set; }
    public DbSet<RequirementCustRequest> RequirementCustRequests { get; set; }
    public DbSet<RequirementRole> RequirementRoles { get; set; }
    public DbSet<RequirementStatu> RequirementStatus { get; set; }
    public DbSet<RequirementType> RequirementTypes { get; set; }
    public DbSet<RequirementTypeAttr> RequirementTypeAttrs { get; set; }
    public DbSet<RespondingParty> RespondingParties { get; set; }
    public DbSet<ResponsibilityType> ResponsibilityTypes { get; set; }
    public DbSet<ReturnAdjustment> ReturnAdjustments { get; set; }
    public DbSet<ReturnAdjustmentType> ReturnAdjustmentTypes { get; set; }
    public DbSet<ReturnContactMech> ReturnContactMeches { get; set; }
    public DbSet<ReturnHeader> ReturnHeaders { get; set; }
    public DbSet<ReturnHeaderType> ReturnHeaderTypes { get; set; }
    public DbSet<ReturnItem> ReturnItems { get; set; }
    public DbSet<ReturnItemBilling> ReturnItemBillings { get; set; }
    public DbSet<ReturnItemResponse> ReturnItemResponses { get; set; }
    public DbSet<ReturnItemShipment> ReturnItemShipments { get; set; }
    public DbSet<ReturnItemType> ReturnItemTypes { get; set; }
    public DbSet<ReturnItemTypeMap> ReturnItemTypeMaps { get; set; }
    public DbSet<ReturnReason> ReturnReasons { get; set; }
    public DbSet<ReturnStatu> ReturnStatus { get; set; }
    public DbSet<ReturnType> ReturnTypes { get; set; }
    public DbSet<RoleType> RoleTypes { get; set; }
    public DbSet<RoleTypeAttr> RoleTypeAttrs { get; set; }
    public DbSet<RuntimeData> RuntimeDatas { get; set; }
    public DbSet<SalaryStepNew> SalaryStepNews { get; set; }
    public DbSet<SaleType> SaleTypes { get; set; }
    public DbSet<SalesForecast> SalesForecasts { get; set; }
    public DbSet<SalesForecastDetail> SalesForecastDetails { get; set; }
    public DbSet<SalesForecastHistory> SalesForecastHistories { get; set; }
    public DbSet<SalesOpportunity> SalesOpportunities { get; set; }
    public DbSet<SalesOpportunityCompetitor> SalesOpportunityCompetitors { get; set; }
    public DbSet<SalesOpportunityHistory> SalesOpportunityHistories { get; set; }
    public DbSet<SalesOpportunityQuote> SalesOpportunityQuotes { get; set; }
    public DbSet<SalesOpportunityRole> SalesOpportunityRoles { get; set; }
    public DbSet<SalesOpportunityStage> SalesOpportunityStages { get; set; }
    public DbSet<SalesOpportunityTrckCode> SalesOpportunityTrckCodes { get; set; }
    public DbSet<SalesOpportunityWorkEffort> SalesOpportunityWorkEfforts { get; set; }
    public DbSet<SecurityPermission> SecurityPermissions { get; set; }
    public DbSet<SegmentGroup> SegmentGroups { get; set; }
    public DbSet<SegmentGroupClassification> SegmentGroupClassifications { get; set; }
    public DbSet<SegmentGroupGeo> SegmentGroupGeos { get; set; }
    public DbSet<SegmentGroupRole> SegmentGroupRoles { get; set; }
    public DbSet<SegmentGroupType> SegmentGroupTypes { get; set; }
    public DbSet<SequenceValueItem> SequenceValueItems { get; set; }
    public DbSet<ServerHit> ServerHits { get; set; }
    public DbSet<ServerHitBin> ServerHitBins { get; set; }
    public DbSet<ServerHitType> ServerHitTypes { get; set; }
    public DbSet<ServiceSemaphore> ServiceSemaphores { get; set; }
    public DbSet<SettlementTerm> SettlementTerms { get; set; }
    public DbSet<Shipment> Shipments { get; set; }
    public DbSet<ShipmentAttribute> ShipmentAttributes { get; set; }
    public DbSet<ShipmentBoxType> ShipmentBoxTypes { get; set; }
    public DbSet<ShipmentContactMech> ShipmentContactMeches { get; set; }
    public DbSet<ShipmentContactMechType> ShipmentContactMechTypes { get; set; }
    public DbSet<ShipmentCostEstimate> ShipmentCostEstimates { get; set; }
    public DbSet<ShipmentGatewayConfig> ShipmentGatewayConfigs { get; set; }
    public DbSet<ShipmentGatewayConfigType> ShipmentGatewayConfigTypes { get; set; }
    public DbSet<ShipmentGatewayDhl> ShipmentGatewayDhls { get; set; }
    public DbSet<ShipmentGatewayFedex> ShipmentGatewayFedexes { get; set; }
    public DbSet<ShipmentGatewayUp> ShipmentGatewayUps { get; set; }
    public DbSet<ShipmentGatewayUsp> ShipmentGatewayUsps { get; set; }
    public DbSet<ShipmentItem> ShipmentItems { get; set; }
    public DbSet<ShipmentItemBilling> ShipmentItemBillings { get; set; }
    public DbSet<ShipmentItemFeature> ShipmentItemFeatures { get; set; }
    public DbSet<ShipmentMethodType> ShipmentMethodTypes { get; set; }
    public DbSet<ShipmentPackage> ShipmentPackages { get; set; }
    public DbSet<ShipmentPackageContent> ShipmentPackageContents { get; set; }
    public DbSet<ShipmentPackageRouteSeg> ShipmentPackageRouteSegs { get; set; }
    public DbSet<ShipmentReceipt> ShipmentReceipts { get; set; }
    public DbSet<ShipmentReceiptRole> ShipmentReceiptRoles { get; set; }
    public DbSet<ShipmentRouteSegment> ShipmentRouteSegments { get; set; }
    public DbSet<ShipmentStatu> ShipmentStatus { get; set; }
    public DbSet<ShipmentTimeEstimate> ShipmentTimeEstimates { get; set; }
    public DbSet<ShipmentType> ShipmentTypes { get; set; }
    public DbSet<ShipmentTypeAttr> ShipmentTypeAttrs { get; set; }
    public DbSet<ShippingDocument> ShippingDocuments { get; set; }
    public DbSet<ShoppingList> ShoppingLists { get; set; }
    public DbSet<ShoppingListItem> ShoppingListItems { get; set; }
    public DbSet<ShoppingListItemSurvey> ShoppingListItemSurveys { get; set; }
    public DbSet<ShoppingListType> ShoppingListTypes { get; set; }
    public DbSet<ShoppingListWorkEffort> ShoppingListWorkEfforts { get; set; }
    public DbSet<SkillType> SkillTypes { get; set; }
    public DbSet<StandardLanguage> StandardLanguages { get; set; }
    public DbSet<StatusItem> StatusItems { get; set; }
    public DbSet<StatusType> StatusTypes { get; set; }
    public DbSet<StatusValidChange> StatusValidChanges { get; set; }
    public DbSet<Subscription> Subscriptions { get; set; }
    public DbSet<SubscriptionActivity> SubscriptionActivities { get; set; }
    public DbSet<SubscriptionAttribute> SubscriptionAttributes { get; set; }
    public DbSet<SubscriptionCommEvent> SubscriptionCommEvents { get; set; }
    public DbSet<SubscriptionFulfillmentPiece> SubscriptionFulfillmentPieces { get; set; }
    public DbSet<SubscriptionResource> SubscriptionResources { get; set; }
    public DbSet<SubscriptionType> SubscriptionTypes { get; set; }
    public DbSet<SubscriptionTypeAttr> SubscriptionTypeAttrs { get; set; }
    public DbSet<SupplierPrefOrder> SupplierPrefOrders { get; set; }
    public DbSet<SupplierProduct> SupplierProducts { get; set; }
    public DbSet<SupplierProductFeature> SupplierProductFeatures { get; set; }
    public DbSet<SupplierRatingType> SupplierRatingTypes { get; set; }
    public DbSet<Survey> Surveys { get; set; }
    public DbSet<SurveyApplType> SurveyApplTypes { get; set; }
    public DbSet<SurveyMultiResp> SurveyMultiResps { get; set; }
    public DbSet<SurveyMultiRespColumn> SurveyMultiRespColumns { get; set; }
    public DbSet<SurveyPage> SurveyPages { get; set; }
    public DbSet<SurveyQuestion> SurveyQuestions { get; set; }
    public DbSet<SurveyQuestionAppl> SurveyQuestionAppls { get; set; }
    public DbSet<SurveyQuestionCategory> SurveyQuestionCategories { get; set; }
    public DbSet<SurveyQuestionOption> SurveyQuestionOptions { get; set; }
    public DbSet<SurveyQuestionType> SurveyQuestionTypes { get; set; }
    public DbSet<SurveyResponse> SurveyResponses { get; set; }
    public DbSet<SurveyResponseAnswer> SurveyResponseAnswers { get; set; }
    public DbSet<SurveyTrigger> SurveyTriggers { get; set; }
    public DbSet<SystemProperty> SystemProperties { get; set; }
    public DbSet<TarpittedLoginView> TarpittedLoginViews { get; set; }
    public DbSet<TaxAuthority> TaxAuthorities { get; set; }
    public DbSet<TaxAuthorityAssoc> TaxAuthorityAssocs { get; set; }
    public DbSet<TaxAuthorityAssocType> TaxAuthorityAssocTypes { get; set; }
    public DbSet<TaxAuthorityCategory> TaxAuthorityCategories { get; set; }
    public DbSet<TaxAuthorityGlAccount> TaxAuthorityGlAccounts { get; set; }
    public DbSet<TaxAuthorityRateProduct> TaxAuthorityRateProducts { get; set; }
    public DbSet<TaxAuthorityRateType> TaxAuthorityRateTypes { get; set; }
    public DbSet<TechDataCalendar> TechDataCalendars { get; set; }
    public DbSet<TechDataCalendarExcDay> TechDataCalendarExcDays { get; set; }
    public DbSet<TechDataCalendarExcWeek> TechDataCalendarExcWeeks { get; set; }
    public DbSet<TechDataCalendarWeek> TechDataCalendarWeeks { get; set; }
    public DbSet<TelecomGatewayConfig> TelecomGatewayConfigs { get; set; }
    public DbSet<TelecomMethodType> TelecomMethodTypes { get; set; }
    public DbSet<TelecomNumber> TelecomNumbers { get; set; }
    public DbSet<TemporalExpression> TemporalExpressions { get; set; }
    public DbSet<TemporalExpressionAssoc> TemporalExpressionAssocs { get; set; }
    public DbSet<TermType> TermTypes { get; set; }
    public DbSet<TermTypeAttr> TermTypeAttrs { get; set; }
    public DbSet<TerminationReason> TerminationReasons { get; set; }
    public DbSet<TerminationType> TerminationTypes { get; set; }
    public DbSet<ThirdPartyLogin> ThirdPartyLogins { get; set; }
    public DbSet<TimeEntry> TimeEntries { get; set; }
    public DbSet<Timesheet> Timesheets { get; set; }
    public DbSet<TimesheetRole> TimesheetRoles { get; set; }
    public DbSet<TrackingCode> TrackingCodes { get; set; }
    public DbSet<TrackingCodeOrder> TrackingCodeOrders { get; set; }
    public DbSet<TrackingCodeOrderReturn> TrackingCodeOrderReturns { get; set; }
    public DbSet<TrackingCodeType> TrackingCodeTypes { get; set; }
    public DbSet<TrackingCodeVisit> TrackingCodeVisits { get; set; }
    public DbSet<TrainingClassType> TrainingClassTypes { get; set; }
    public DbSet<TrainingRequest> TrainingRequests { get; set; }
    public DbSet<UnemploymentClaim> UnemploymentClaims { get; set; }
    public DbSet<Uom> Uoms { get; set; }
    public DbSet<UomConversion> UomConversions { get; set; }
    public DbSet<UomConversionDated> UomConversionDateds { get; set; }
    public DbSet<UomGroup> UomGroups { get; set; }
    public DbSet<UomType> UomTypes { get; set; }
    public DbSet<UserAgent> UserAgents { get; set; }
    public DbSet<UserAgentMethodType> UserAgentMethodTypes { get; set; }
    public DbSet<UserAgentType> UserAgentTypes { get; set; }
    public DbSet<UserLoginHistory> UserLoginHistories { get; set; }
    public DbSet<UserLoginPasswordHistory> UserLoginPasswordHistories { get; set; }
    public DbSet<UserLoginSecurityGroup> UserLoginSecurityGroups { get; set; }
    public DbSet<UserLoginSession> UserLoginSessions { get; set; }
    public DbSet<UserPrefGroupType> UserPrefGroupTypes { get; set; }
    public DbSet<UserPreference> UserPreferences { get; set; }
    public DbSet<ValidContactMechRole> ValidContactMechRoles { get; set; }
    public DbSet<ValidResponsibility> ValidResponsibilities { get; set; }
    public DbSet<ValueLinkKey> ValueLinkKeys { get; set; }
    public DbSet<VarianceReason> VarianceReasons { get; set; }
    public DbSet<VarianceReasonGlAccount> VarianceReasonGlAccounts { get; set; }
    public DbSet<Vendor> Vendors { get; set; }
    public DbSet<VendorProduct> VendorProducts { get; set; }
    public DbSet<VideoDataResource> VideoDataResources { get; set; }
    public DbSet<Visit> Visits { get; set; }
    public DbSet<Visitor> Visitors { get; set; }
    public DbSet<VisualTheme> VisualThemes { get; set; }
    public DbSet<VisualThemeResource> VisualThemeResources { get; set; }
    public DbSet<VisualThemeSet> VisualThemeSets { get; set; }
    public DbSet<WebAnalyticsConfig> WebAnalyticsConfigs { get; set; }
    public DbSet<WebAnalyticsType> WebAnalyticsTypes { get; set; }
    public DbSet<WebPage> WebPages { get; set; }
    public DbSet<WebPreferenceType> WebPreferenceTypes { get; set; }
    public DbSet<WebSite> WebSites { get; set; }
    public DbSet<WebSiteContactList> WebSiteContactLists { get; set; }
    public DbSet<WebSiteContent> WebSiteContents { get; set; }
    public DbSet<WebSiteContentType> WebSiteContentTypes { get; set; }
    public DbSet<WebSitePathAlia> WebSitePathAlias { get; set; }
    public DbSet<WebSitePublishPoint> WebSitePublishPoints { get; set; }
    public DbSet<WebSiteRole> WebSiteRoles { get; set; }
    public DbSet<WebUserPreference> WebUserPreferences { get; set; }
    public DbSet<WorkEffort> WorkEfforts { get; set; }
    public DbSet<WorkEffortAssoc> WorkEffortAssocs { get; set; }
    public DbSet<WorkEffortAssocAttribute> WorkEffortAssocAttributes { get; set; }
    public DbSet<WorkEffortAssocType> WorkEffortAssocTypes { get; set; }
    public DbSet<WorkEffortAssocTypeAttr> WorkEffortAssocTypeAttrs { get; set; }
    public DbSet<WorkEffortAttribute> WorkEffortAttributes { get; set; }
    public DbSet<WorkEffortBilling> WorkEffortBillings { get; set; }
    public DbSet<WorkEffortContactMechNew> WorkEffortContactMechNews { get; set; }
    public DbSet<WorkEffortContent> WorkEffortContents { get; set; }
    public DbSet<WorkEffortContentType> WorkEffortContentTypes { get; set; }
    public DbSet<WorkEffortCostCalc> WorkEffortCostCalcs { get; set; }
    public DbSet<WorkEffortDeliverableProd> WorkEffortDeliverableProds { get; set; }
    public DbSet<WorkEffortEventReminder> WorkEffortEventReminders { get; set; }
    public DbSet<WorkEffortFixedAssetAssign> WorkEffortFixedAssetAssigns { get; set; }
    public DbSet<WorkEffortFixedAssetStd> WorkEffortFixedAssetStds { get; set; }
    public DbSet<WorkEffortGoodStandard> WorkEffortGoodStandards { get; set; }
    public DbSet<WorkEffortGoodStandardType> WorkEffortGoodStandardTypes { get; set; }
    public DbSet<WorkEffortIcalData> WorkEffortIcalDatas { get; set; }
    public DbSet<WorkEffortInventoryAssign> WorkEffortInventoryAssigns { get; set; }
    public DbSet<WorkEffortInventoryProduced> WorkEffortInventoryProduceds { get; set; }
    public DbSet<WorkEffortKeyword> WorkEffortKeywords { get; set; }
    public DbSet<WorkEffortNote> WorkEffortNotes { get; set; }
    public DbSet<WorkEffortPartyAssignment> WorkEffortPartyAssignments { get; set; }
    public DbSet<WorkEffortPurposeType> WorkEffortPurposeTypes { get; set; }
    public DbSet<WorkEffortReview> WorkEffortReviews { get; set; }
    public DbSet<WorkEffortSearchConstraint> WorkEffortSearchConstraints { get; set; }
    public DbSet<WorkEffortSearchResult> WorkEffortSearchResults { get; set; }
    public DbSet<WorkEffortSkillStandard> WorkEffortSkillStandards { get; set; }
    public DbSet<WorkEffortStatu> WorkEffortStatus { get; set; }
    public DbSet<WorkEffortSurveyAppl> WorkEffortSurveyAppls { get; set; }
    public DbSet<WorkEffortTransBox> WorkEffortTransBoxes { get; set; }
    public DbSet<WorkEffortType> WorkEffortTypes { get; set; }
    public DbSet<WorkEffortTypeAttr> WorkEffortTypeAttrs { get; set; }
    public DbSet<WorkOrderItemFulfillment> WorkOrderItemFulfillments { get; set; }
    public DbSet<WorkReqFulfType> WorkReqFulfTypes { get; set; }
    public DbSet<WorkRequirementFulfillment> WorkRequirementFulfillments { get; set; }
    public DbSet<X509IssuerProvision> X509IssuerProvision { get; set; }
    public DbSet<ZipSalesRuleLookup> ZipSalesRuleLookups { get; set; }
    public DbSet<ZipSalesTaxLookup> ZipSalesTaxLookups { get; set; }


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);


        modelBuilder.Entity<AccommodationClass>(entity =>
        {
            entity.ToTable("ACCOMMODATION_CLASS");


            entity.HasIndex(e => e.ParentClassId)
                .HasName("ACCOMM_CLASS_PAR");

            entity.Property(e => e.AccommodationClassId)
                .HasColumnName("ACCOMMODATION_CLASS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.ParentClassId)
                .HasColumnName("PARENT_CLASS_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentClass)
                .WithMany(p => p.InverseParentClass)
                .HasForeignKey(d => d.ParentClassId)
                .HasConstraintName("ACCOMM_CLASS_PAR");
        });

        modelBuilder.Entity<AccommodationMap>(entity =>
        {
            entity.ToTable("ACCOMMODATION_MAP");

            entity.HasIndex(e => e.AccommodationClassId)
                .HasName("ACMD_MAP_CLASS");

            entity.HasIndex(e => e.AccommodationMapTypeId)
                .HasName("ACMD_MAP_TYPE");


            entity.HasIndex(e => e.FixedAssetId)
                .HasName("ACMD_MAP_FA");


            entity.Property(e => e.AccommodationMapId)
                .HasColumnName("ACCOMMODATION_MAP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AccommodationClassId)
                .HasColumnName("ACCOMMODATION_CLASS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AccommodationMapTypeId)
                .HasColumnName("ACCOMMODATION_MAP_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FixedAssetId)
                .HasColumnName("FIXED_ASSET_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.NumberOfSpaces)
                .HasColumnName("NUMBER_OF_SPACES")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.AccommodationClass)
                .WithMany(p => p.AccommodationMaps)
                .HasForeignKey(d => d.AccommodationClassId)
                .HasConstraintName("ACMD_MAP_CLASS");

            entity.HasOne(d => d.AccommodationMapType)
                .WithMany(p => p.AccommodationMaps)
                .HasForeignKey(d => d.AccommodationMapTypeId)
                .HasConstraintName("ACMD_MAP_TYPE");

            entity.HasOne(d => d.FixedAsset)
                .WithMany(p => p.AccommodationMaps)
                .HasForeignKey(d => d.FixedAssetId)
                .HasConstraintName("ACMD_MAP_FA");
        });

        modelBuilder.Entity<AccommodationMapType>(entity =>
        {
            entity.ToTable("ACCOMMODATION_MAP_TYPE");


            entity.Property(e => e.AccommodationMapTypeId)
                .HasColumnName("ACCOMMODATION_MAP_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<AccommodationSpot>(entity =>
        {
            entity.ToTable("ACCOMMODATION_SPOT");

            entity.HasIndex(e => e.AccommodationClassId)
                .HasName("ACCOM_CLASS");


            entity.HasIndex(e => e.FixedAssetId)
                .HasName("SPOT_FA");


            entity.Property(e => e.AccommodationSpotId)
                .HasColumnName("ACCOMMODATION_SPOT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AccommodationClassId)
                .HasColumnName("ACCOMMODATION_CLASS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.FixedAssetId)
                .HasColumnName("FIXED_ASSET_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.NumberOfSpaces)
                .HasColumnName("NUMBER_OF_SPACES")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.AccommodationClass)
                .WithMany(p => p.AccommodationSpots)
                .HasForeignKey(d => d.AccommodationClassId)
                .HasConstraintName("ACCOM_CLASS");

            entity.HasOne(d => d.FixedAsset)
                .WithMany(p => p.AccommodationSpots)
                .HasForeignKey(d => d.FixedAssetId)
                .HasConstraintName("SPOT_FA");
        });

        modelBuilder.Entity<AcctgTran>(entity =>
        {
            entity.HasKey(e => e.AcctgTransId)
                .HasName("PRIMARY");

            entity.ToTable("ACCTG_TRANS");

            entity.HasIndex(e => e.AcctgTransTypeId)
                .HasName("ACCTTX_TYPE");


            entity.HasIndex(e => e.FinAccountTransId)
                .HasName("ACCTTX_FNACTTR");

            entity.HasIndex(e => e.FixedAssetId)
                .HasName("ACCTTX_FASSET");

            entity.HasIndex(e => e.GlFiscalTypeId)
                .HasName("ACCTTX_GLFST");

            entity.HasIndex(e => e.GlJournalId)
                .HasName("ACCTTX_GLJRNL");

            entity.HasIndex(e => e.GroupStatusId)
                .HasName("ACCTTX_GRPSTTS");

            entity.HasIndex(e => e.InventoryItemId)
                .HasName("ACCTTX_INVITEM");

            entity.HasIndex(e => e.InvoiceId)
                .HasName("ACCTTX_INVOICE");


            entity.HasIndex(e => e.PartyId)
                .HasName("ACCTTX_PARTY");

            entity.HasIndex(e => e.PaymentId)
                .HasName("ACCTTX_PAYMENT");

            entity.HasIndex(e => e.PhysicalInventoryId)
                .HasName("ACCTTX_PHS_INV");

            entity.HasIndex(e => e.ReceiptId)
                .HasName("ACCTTX_SHIPRCPT");

            entity.HasIndex(e => e.RoleTypeId)
                .HasName("ACCTTX_ROLETYP");

            entity.HasIndex(e => e.ShipmentId)
                .HasName("ACCTTX_SHIPMENT");

            entity.HasIndex(e => e.WorkEffortId)
                .HasName("ACCTTX_WEFF");

            entity.HasIndex(e => new { e.InventoryItemId, e.PhysicalInventoryId })
                .HasName("ACCTTX_INVITEMVAR");

            entity.Property(e => e.AcctgTransId)
                .HasColumnName("ACCTG_TRANS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AcctgTransTypeId)
                .HasColumnName("ACCTG_TRANS_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedDate)
                .HasColumnName("CREATED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.FinAccountTransId)
                .HasColumnName("FIN_ACCOUNT_TRANS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FixedAssetId)
                .HasColumnName("FIXED_ASSET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GlFiscalTypeId)
                .HasColumnName("GL_FISCAL_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GlJournalId)
                .HasColumnName("GL_JOURNAL_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GroupStatusId)
                .HasColumnName("GROUP_STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InventoryItemId)
                .HasColumnName("INVENTORY_ITEM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceId)
                .HasColumnName("INVOICE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.IsPosted)
                .HasColumnName("IS_POSTED")
                .HasColumnType("char(1)");

            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.LastModifiedDate)
                .HasColumnName("LAST_MODIFIED_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentId)
                .HasColumnName("PAYMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PhysicalInventoryId)
                .HasColumnName("PHYSICAL_INVENTORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PostedDate)
                .HasColumnName("POSTED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ReceiptId)
                .HasColumnName("RECEIPT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ScheduledPostingDate)
                .HasColumnName("SCHEDULED_POSTING_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ShipmentId)
                .HasColumnName("SHIPMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TheirAcctgTransId)
                .HasColumnName("THEIR_ACCTG_TRANS_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.TransactionDate)
                .HasColumnName("TRANSACTION_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.VoucherDate)
                .HasColumnName("VOUCHER_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.VoucherRef)
                .HasColumnName("VOUCHER_REF")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.AcctgTransType)
                .WithMany(p => p.AcctgTrans)
                .HasForeignKey(d => d.AcctgTransTypeId)
                .HasConstraintName("ACCTTX_TYPE");

            entity.HasOne(d => d.FinAccountTrans)
                .WithMany(p => p.AcctgTrans)
                .HasForeignKey(d => d.FinAccountTransId)
                .HasConstraintName("ACCTTX_FNACTTR");

            entity.HasOne(d => d.FixedAsset)
                .WithMany(p => p.AcctgTrans)
                .HasForeignKey(d => d.FixedAssetId)
                .HasConstraintName("ACCTTX_FASSET");

            entity.HasOne(d => d.GlFiscalType)
                .WithMany(p => p.AcctgTrans)
                .HasForeignKey(d => d.GlFiscalTypeId)
                .HasConstraintName("ACCTTX_GLFST");

            entity.HasOne(d => d.GlJournal)
                .WithMany(p => p.AcctgTrans)
                .HasForeignKey(d => d.GlJournalId)
                .HasConstraintName("ACCTTX_GLJRNL");

            entity.HasOne(d => d.GroupStatus)
                .WithMany(p => p.AcctgTrans)
                .HasForeignKey(d => d.GroupStatusId)
                .HasConstraintName("ACCTTX_GRPSTTS");

            entity.HasOne(d => d.InventoryItem)
                .WithMany(p => p.AcctgTrans)
                .HasForeignKey(d => d.InventoryItemId)
                .HasConstraintName("ACCTTX_INVITEM");

            entity.HasOne(d => d.Invoice)
                .WithMany(p => p.AcctgTrans)
                .HasForeignKey(d => d.InvoiceId)
                .HasConstraintName("ACCTTX_INVOICE");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.AcctgTrans)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("ACCTTX_PARTY");

            entity.HasOne(d => d.Payment)
                .WithMany(p => p.AcctgTrans)
                .HasForeignKey(d => d.PaymentId)
                .HasConstraintName("ACCTTX_PAYMENT");

            entity.HasOne(d => d.PhysicalInventory)
                .WithMany(p => p.AcctgTrans)
                .HasForeignKey(d => d.PhysicalInventoryId)
                .HasConstraintName("ACCTTX_PHS_INV");

            entity.HasOne(d => d.Receipt)
                .WithMany(p => p.AcctgTrans)
                .HasForeignKey(d => d.ReceiptId)
                .HasConstraintName("ACCTTX_SHIPRCPT");

            entity.HasOne(d => d.RoleType)
                .WithMany(p => p.AcctgTrans)
                .HasForeignKey(d => d.RoleTypeId)
                .HasConstraintName("ACCTTX_ROLETYP");

            entity.HasOne(d => d.Shipment)
                .WithMany(p => p.AcctgTrans)
                .HasForeignKey(d => d.ShipmentId)
                .HasConstraintName("ACCTTX_SHIPMENT");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.AcctgTrans)
                .HasForeignKey(d => d.WorkEffortId)
                .HasConstraintName("ACCTTX_WEFF");

            entity.HasOne(d => d.InventoryItemVariance)
                .WithMany(p => p.AcctgTrans)
                .HasForeignKey(d => new { d.InventoryItemId, d.PhysicalInventoryId })
                .HasConstraintName("ACCTTX_INVITEMVAR");
        });

        modelBuilder.Entity<AcctgTransAttribute>(entity =>
        {
            entity.HasKey(e => new { e.AcctgTransId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("ACCTG_TRANS_ATTRIBUTE");

            entity.HasIndex(e => e.AcctgTransId)
                .HasName("ACCTTX_ATTR");


            entity.Property(e => e.AcctgTransId)
                .HasColumnName("ACCTG_TRANS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.AcctgTrans)
                .WithMany(p => p.AcctgTransAttributes)
                .HasForeignKey(d => d.AcctgTransId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ACCTTX_ATTR");
        });

        modelBuilder.Entity<AcctgTransEntry>(entity =>
        {
            entity.HasKey(e => new { e.AcctgTransId, e.AcctgTransEntrySeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("ACCTG_TRANS_ENTRY");

            entity.HasIndex(e => e.AcctgTransEntryTypeId)
                .HasName("ACCTTXENT_ATET");

            entity.HasIndex(e => e.AcctgTransId)
                .HasName("ACCTTXENT_ACTX");


            entity.HasIndex(e => e.CurrencyUomId)
                .HasName("ACCTTXENT_CURNCY");

            entity.HasIndex(e => e.GlAccountId)
                .HasName("ACCTTXENT_GLACT");

            entity.HasIndex(e => e.GlAccountTypeId)
                .HasName("ACCTTXENT_GLACTT");

            entity.HasIndex(e => e.InventoryItemId)
                .HasName("ACCTTXENT_INVITEM");


            entity.HasIndex(e => e.OrigCurrencyUomId)
                .HasName("ACCTTXENT_OCURNCY");

            entity.HasIndex(e => e.PartyId)
                .HasName("ACCTTXENT_PARTY");

            entity.HasIndex(e => e.ReconcileStatusId)
                .HasName("ACCTTXENT_RCSTS");

            entity.HasIndex(e => e.RoleTypeId)
                .HasName("ACCTTXENT_RLTYP");

            entity.HasIndex(e => e.SettlementTermId)
                .HasName("ACCTTXENT_STLEN");

            entity.HasIndex(e => new { e.GlAccountId, e.OrganizationPartyId })
                .HasName("ACCTTXENT_GLACOG");

            entity.Property(e => e.AcctgTransId)
                .HasColumnName("ACCTG_TRANS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AcctgTransEntrySeqId)
                .HasColumnName("ACCTG_TRANS_ENTRY_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AcctgTransEntryTypeId)
                .HasColumnName("ACCTG_TRANS_ENTRY_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrencyUomId)
                .HasColumnName("CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DebitCreditFlag)
                .HasColumnName("DEBIT_CREDIT_FLAG")
                .HasColumnType("char(1)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.DueDate)
                .HasColumnName("DUE_DATE")
                .HasColumnType("date");

            entity.Property(e => e.GlAccountId)
                .HasColumnName("GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GlAccountTypeId)
                .HasColumnName("GL_ACCOUNT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GroupId)
                .HasColumnName("GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InventoryItemId)
                .HasColumnName("INVENTORY_ITEM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.IsSummary)
                .HasColumnName("IS_SUMMARY")
                .HasColumnType("char(1)");


            entity.Property(e => e.OrganizationPartyId)
                .HasColumnName("ORGANIZATION_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrigAmount)
                .HasColumnName("ORIG_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.OrigCurrencyUomId)
                .HasColumnName("ORIG_CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.ReconcileStatusId)
                .HasColumnName("RECONCILE_STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SettlementTermId)
                .HasColumnName("SETTLEMENT_TERM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TaxId)
                .HasColumnName("TAX_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TheirPartyId)
                .HasColumnName("THEIR_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TheirProductId)
                .HasColumnName("THEIR_PRODUCT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.VoucherRef)
                .HasColumnName("VOUCHER_REF")
                .HasColumnType("varchar(60)");

            entity.HasOne(d => d.AcctgTransEntryType)
                .WithMany(p => p.AcctgTransEntries)
                .HasForeignKey(d => d.AcctgTransEntryTypeId)
                .HasConstraintName("ACCTTXENT_ATET");

            entity.HasOne(d => d.AcctgTrans)
                .WithMany(p => p.AcctgTransEntries)
                .HasForeignKey(d => d.AcctgTransId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ACCTTXENT_ACTX");

            entity.HasOne(d => d.CurrencyUom)
                .WithMany(p => p.AcctgTransEntryCurrencyUoms)
                .HasForeignKey(d => d.CurrencyUomId)
                .HasConstraintName("ACCTTXENT_CURNCY");

            entity.HasOne(d => d.GlAccount)
                .WithMany(p => p.AcctgTransEntries)
                .HasForeignKey(d => d.GlAccountId)
                .HasConstraintName("ACCTTXENT_GLACT");

            entity.HasOne(d => d.GlAccountType)
                .WithMany(p => p.AcctgTransEntries)
                .HasForeignKey(d => d.GlAccountTypeId)
                .HasConstraintName("ACCTTXENT_GLACTT");

            entity.HasOne(d => d.InventoryItem)
                .WithMany(p => p.AcctgTransEntries)
                .HasForeignKey(d => d.InventoryItemId)
                .HasConstraintName("ACCTTXENT_INVITEM");

            entity.HasOne(d => d.OrigCurrencyUom)
                .WithMany(p => p.AcctgTransEntryOrigCurrencyUoms)
                .HasForeignKey(d => d.OrigCurrencyUomId)
                .HasConstraintName("ACCTTXENT_OCURNCY");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.AcctgTransEntries)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("ACCTTXENT_PARTY");

            entity.HasOne(d => d.ReconcileStatus)
                .WithMany(p => p.AcctgTransEntries)
                .HasForeignKey(d => d.ReconcileStatusId)
                .HasConstraintName("ACCTTXENT_RCSTS");

            entity.HasOne(d => d.RoleType)
                .WithMany(p => p.AcctgTransEntries)
                .HasForeignKey(d => d.RoleTypeId)
                .HasConstraintName("ACCTTXENT_RLTYP");

            entity.HasOne(d => d.SettlementTerm)
                .WithMany(p => p.AcctgTransEntries)
                .HasForeignKey(d => d.SettlementTermId)
                .HasConstraintName("ACCTTXENT_STLEN");

            entity.HasOne(d => d.GlAccountOrganization)
                .WithMany(p => p.AcctgTransEntries)
                .HasForeignKey(d => new { d.GlAccountId, d.OrganizationPartyId })
                .HasConstraintName("ACCTTXENT_GLACOG");
        });

        modelBuilder.Entity<AcctgTransEntryType>(entity =>
        {
            entity.ToTable("ACCTG_TRANS_ENTRY_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("ACCTTXE_TYPE_PAR");

            entity.Property(e => e.AcctgTransEntryTypeId)
                .HasColumnName("ACCTG_TRANS_ENTRY_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("ACCTTXE_TYPE_PAR");
        });

        modelBuilder.Entity<AcctgTransType>(entity =>
        {
            entity.ToTable("ACCTG_TRANS_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("ACCTTX_TYPE_PAR");

            entity.Property(e => e.AcctgTransTypeId)
                .HasColumnName("ACCTG_TRANS_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("ACCTTX_TYPE_PAR");
        });

        modelBuilder.Entity<AcctgTransTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.AcctgTransTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("ACCTG_TRANS_TYPE_ATTR");

            entity.HasIndex(e => e.AcctgTransTypeId)
                .HasName("ACCTTX_TYPE_ATTR");


            entity.Property(e => e.AcctgTransTypeId)
                .HasColumnName("ACCTG_TRANS_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.AcctgTransType)
                .WithMany(p => p.AcctgTransTypeAttrs)
                .HasForeignKey(d => d.AcctgTransTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ACCTTX_TYPE_ATTR");
        });

        modelBuilder.Entity<Addendum>(entity =>
        {
            entity.ToTable("ADDENDUM");

            entity.HasIndex(e => e.AgreementId)
                .HasName("ADDNDM_AGRMNT");


            entity.HasIndex(e => new { e.AgreementId, e.AgreementItemSeqId })
                .HasName("ADDNDM_AGRMNT_ITM");

            entity.Property(e => e.AddendumId)
                .HasColumnName("ADDENDUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AddendumCreationDate)
                .HasColumnName("ADDENDUM_CREATION_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.AddendumEffectiveDate)
                .HasColumnName("ADDENDUM_EFFECTIVE_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.AddendumText)
                .HasColumnName("ADDENDUM_TEXT")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AgreementId)
                .HasColumnName("AGREEMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AgreementItemSeqId)
                .HasColumnName("AGREEMENT_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Agreement)
                .WithMany(p => p.Addendums)
                .HasForeignKey(d => d.AgreementId)
                .HasConstraintName("ADDNDM_AGRMNT");

            entity.HasOne(d => d.AgreementI)
                .WithMany(p => p.Addendums)
                .HasForeignKey(d => new { d.AgreementId, d.AgreementItemSeqId })
                .HasConstraintName("ADDNDM_AGRMNT_ITM");
        });

        modelBuilder.Entity<AddressMatchMap>(entity =>
        {
            entity.HasKey(e => new { e.MapKey, e.MapValue })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("ADDRESS_MATCH_MAP");


            entity.Property(e => e.MapKey)
                .HasColumnName("MAP_KEY")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.MapValue)
                .HasColumnName("MAP_VALUE")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");
        });

        modelBuilder.Entity<Affiliate>(entity =>
        {
            entity.HasKey(e => e.PartyId)
                .HasName("PRIMARY");

            entity.ToTable("AFFILIATE");


            entity.HasIndex(e => e.PartyId)
                .HasName("AFFILIATE_PARTY");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AffiliateDescription)
                .HasColumnName("AFFILIATE_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AffiliateName)
                .HasColumnName("AFFILIATE_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DateTimeApproved)
                .HasColumnName("DATE_TIME_APPROVED")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.DateTimeCreated)
                .HasColumnName("DATE_TIME_CREATED")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SitePageViews)
                .HasColumnName("SITE_PAGE_VIEWS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.SiteType)
                .HasColumnName("SITE_TYPE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.SiteVisitors)
                .HasColumnName("SITE_VISITORS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.YearEstablished)
                .HasColumnName("YEAR_ESTABLISHED")
                .HasColumnType("varchar(10)");

            entity.HasOne(d => d.Party)
                .WithOne(p => p.Affiliate)
                .HasForeignKey<Affiliate>(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AFFILIATE_PARTY");

            entity.HasOne(d => d.PartyNavigation)
                .WithOne(p => p.Affiliate)
                .HasForeignKey<Affiliate>(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AFFILIATE_PGRP");
        });

        modelBuilder.Entity<Agreement>(entity =>
        {
            entity.ToTable("AGREEMENT");

            entity.HasIndex(e => e.AgreementTypeId)
                .HasName("AGRMNT_TYPE");


            entity.HasIndex(e => e.ProductId)
                .HasName("AGRMNT_PRODUCT");

            entity.HasIndex(e => new { e.PartyIdFrom, e.RoleTypeIdFrom })
                .HasName("AGRMNT_FPRTYRLE");

            entity.HasIndex(e => new { e.PartyIdTo, e.RoleTypeIdTo })
                .HasName("AGRMNT_TPRTYRLE");

            entity.Property(e => e.AgreementId)
                .HasColumnName("AGREEMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AgreementDate)
                .HasColumnName("AGREEMENT_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.AgreementTypeId)
                .HasColumnName("AGREEMENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PartyIdFrom)
                .HasColumnName("PARTY_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyIdTo)
                .HasColumnName("PARTY_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.RoleTypeIdFrom)
                .HasColumnName("ROLE_TYPE_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeIdTo)
                .HasColumnName("ROLE_TYPE_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TextData)
                .HasColumnName("TEXT_DATA")
                .HasColumnType("longtext");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.AgreementType)
                .WithMany(p => p.Agreements)
                .HasForeignKey(d => d.AgreementTypeId)
                .HasConstraintName("AGRMNT_TYPE");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.Agreements)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("AGRMNT_PRODUCT");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.AgreementPartyRoles)
                .HasForeignKey(d => new { d.PartyIdFrom, d.RoleTypeIdFrom })
                .HasConstraintName("AGRMNT_FPRTYRLE");

            entity.HasOne(d => d.PartyRoleNavigation)
                .WithMany(p => p.AgreementPartyRoleNavigations)
                .HasForeignKey(d => new { d.PartyIdTo, d.RoleTypeIdTo })
                .HasConstraintName("AGRMNT_TPRTYRLE");
        });

        modelBuilder.Entity<AgreementAttribute>(entity =>
        {
            entity.HasKey(e => new { e.AgreementId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("AGREEMENT_ATTRIBUTE");

            entity.HasIndex(e => e.AgreementId)
                .HasName("AGRMNT_ATTR");


            entity.Property(e => e.AgreementId)
                .HasColumnName("AGREEMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Agreement)
                .WithMany(p => p.AgreementAttributes)
                .HasForeignKey(d => d.AgreementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AGRMNT_ATTR");
        });

        modelBuilder.Entity<AgreementContent>(entity =>
        {
            entity.HasKey(e => new
                    { e.ContentId, e.AgreementId, e.AgreementItemSeqId, e.AgreementContentTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0 });

            entity.ToTable("AGREEMENT_CONTENT");

            entity.HasIndex(e => e.AgreementContentTypeId)
                .HasName("AG_CNT_TYPE");

            entity.HasIndex(e => e.AgreementId)
                .HasName("AG_CNT_PROD");

            entity.HasIndex(e => e.ContentId)
                .HasName("AG_CNT_CNT");


            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AgreementId)
                .HasColumnName("AGREEMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AgreementItemSeqId)
                .HasColumnName("AGREEMENT_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AgreementContentTypeId)
                .HasColumnName("AGREEMENT_CONTENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.AgreementContentType)
                .WithMany(p => p.AgreementContents)
                .HasForeignKey(d => d.AgreementContentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AG_CNT_TYPE");

            entity.HasOne(d => d.Agreement)
                .WithMany(p => p.AgreementContents)
                .HasForeignKey(d => d.AgreementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AG_CNT_PROD");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.AgreementContents)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AG_CNT_CNT");
        });

        modelBuilder.Entity<AgreementContentType>(entity =>
        {
            entity.ToTable("AGREEMENT_CONTENT_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("AGCT_TYP_PARENT");

            entity.Property(e => e.AgreementContentTypeId)
                .HasColumnName("AGREEMENT_CONTENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("AGCT_TYP_PARENT");
        });

        modelBuilder.Entity<AgreementEmploymentAppl>(entity =>
        {
            entity.HasKey(e => new
                {
                    e.AgreementId, e.AgreementItemSeqId, e.PartyIdTo, e.PartyIdFrom, e.RoleTypeIdTo,
                    e.RoleTypeIdFrom, e.FromDate
                })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0, 0, 0 });

            entity.ToTable("AGREEMENT_EMPLOYMENT_APPL");


            entity.HasIndex(e => new { e.AgreementId, e.AgreementItemSeqId })
                .HasName("AGRMNT_EMPL_AITM");

            entity.HasIndex(e => new { e.RoleTypeIdFrom, e.RoleTypeIdTo, e.PartyIdFrom, e.PartyIdTo, e.FromDate })
                .HasName("AGRMNT_EMPL_APPL");

            entity.Property(e => e.AgreementId)
                .HasColumnName("AGREEMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AgreementItemSeqId)
                .HasColumnName("AGREEMENT_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyIdTo)
                .HasColumnName("PARTY_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyIdFrom)
                .HasColumnName("PARTY_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeIdTo)
                .HasColumnName("ROLE_TYPE_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeIdFrom)
                .HasColumnName("ROLE_TYPE_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.AgreementDate)
                .HasColumnName("AGREEMENT_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.AgreementI)
                .WithMany(p => p.AgreementEmploymentAppls)
                .HasForeignKey(d => new { d.AgreementId, d.AgreementItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AGRMNT_EMPL_AITM");

            entity.HasOne(d => d.Employment)
                .WithMany(p => p.AgreementEmploymentAppls)
                .HasForeignKey(
                    d => new { d.RoleTypeIdFrom, d.RoleTypeIdTo, d.PartyIdFrom, d.PartyIdTo, d.FromDate })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AGRMNT_EMPL_APPL");
        });

        modelBuilder.Entity<AgreementFacilityAppl>(entity =>
        {
            entity.HasKey(e => new { e.AgreementId, e.AgreementItemSeqId, e.FacilityId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("AGREEMENT_FACILITY_APPL");


            entity.HasIndex(e => e.FacilityId)
                .HasName("AGRMNT_FACLT_PRD");


            entity.HasIndex(e => new { e.AgreementId, e.AgreementItemSeqId })
                .HasName("AGRMNT_FACLT_AITM");

            entity.Property(e => e.AgreementId)
                .HasColumnName("AGREEMENT_ID");

            entity.Property(e => e.AgreementItemSeqId)
                .HasColumnName("AGREEMENT_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Facility)
                .WithMany(p => p.AgreementFacilityAppls)
                .HasForeignKey(d => d.FacilityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AGRMNT_FACLT_PRD");

            entity.HasOne(d => d.AgreementI)
                .WithMany(p => p.AgreementFacilityAppls)
                .HasForeignKey(d => new { d.AgreementId, d.AgreementItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AGRMNT_FACLT_AITM");
        });

        modelBuilder.Entity<AgreementGeographicalApplic>(entity =>
        {
            entity.HasKey(e => new { e.AgreementId, e.AgreementItemSeqId, e.GeoId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("AGREEMENT_GEOGRAPHICAL_APPLIC");

            entity.HasIndex(e => e.AgreementId)
                .HasName("AGRMNT_GEOAP_AGR");


            entity.HasIndex(e => e.GeoId)
                .HasName("AGRMNT_GEOAP_GEO");


            entity.HasIndex(e => new { e.AgreementId, e.AgreementItemSeqId })
                .HasName("AGRMNT_GEOAP_AGRI");

            entity.Property(e => e.AgreementId)
                .HasColumnName("AGREEMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AgreementItemSeqId)
                .HasColumnName("AGREEMENT_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GeoId)
                .HasColumnName("GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Agreement)
                .WithMany(p => p.AgreementGeographicalApplics)
                .HasForeignKey(d => d.AgreementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AGRMNT_GEOAP_AGR");

            entity.HasOne(d => d.Geo)
                .WithMany(p => p.AgreementGeographicalApplics)
                .HasForeignKey(d => d.GeoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AGRMNT_GEOAP_GEO");

            entity.HasOne(d => d.AgreementI)
                .WithMany(p => p.AgreementGeographicalApplics)
                .HasForeignKey(d => new { d.AgreementId, d.AgreementItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AGRMNT_GEOAP_AGRI");
        });

        modelBuilder.Entity<AgreementItem>(entity =>
        {
            entity.HasKey(e => new { e.AgreementId, e.AgreementItemSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("AGREEMENT_ITEM");

            entity.HasIndex(e => e.AgreementId)
                .HasName("AGRMNT_ITEM_AGR");

            entity.HasIndex(e => e.AgreementItemTypeId)
                .HasName("AGRMNT_ITEM_TYPE");


            entity.Property(e => e.AgreementId)
                .HasColumnName("AGREEMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AgreementItemSeqId)
                .HasColumnName("AGREEMENT_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AgreementImage).HasColumnName("AGREEMENT_IMAGE");

            entity.Property(e => e.AgreementItemTypeId)
                .HasColumnName("AGREEMENT_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AgreementText)
                .HasColumnName("AGREEMENT_TEXT")
                .HasColumnType("longtext");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrencyUomId)
                .HasColumnName("CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");


            entity.HasOne(d => d.Agreement)
                .WithMany(p => p.AgreementItems)
                .HasForeignKey(d => d.AgreementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AGRMNT_ITEM_AGR");

            entity.HasOne(d => d.AgreementItemType)
                .WithMany(p => p.AgreementItems)
                .HasForeignKey(d => d.AgreementItemTypeId)
                .HasConstraintName("AGRMNT_ITEM_TYPE");
        });

        modelBuilder.Entity<AgreementItemAttribute>(entity =>
        {
            entity.HasKey(e => new { e.AgreementId, e.AgreementItemSeqId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("AGREEMENT_ITEM_ATTRIBUTE");


            entity.HasIndex(e => new { e.AgreementId, e.AgreementItemSeqId })
                .HasName("AGRMNT_ITEM_ATTR");

            entity.Property(e => e.AgreementId)
                .HasColumnName("AGREEMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AgreementItemSeqId)
                .HasColumnName("AGREEMENT_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.AgreementI)
                .WithMany(p => p.AgreementItemAttributes)
                .HasForeignKey(d => new { d.AgreementId, d.AgreementItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AGRMNT_ITEM_ATTR");
        });

        modelBuilder.Entity<AgreementItemType>(entity =>
        {
            entity.ToTable("AGREEMENT_ITEM_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("AGRMNT_TYPEPAR");

            entity.Property(e => e.AgreementItemTypeId)
                .HasColumnName("AGREEMENT_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("AGRMNT_TYPEPAR");
        });

        modelBuilder.Entity<AgreementItemTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.AgreementItemTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("AGREEMENT_ITEM_TYPE_ATTR");

            entity.HasIndex(e => e.AgreementItemTypeId)
                .HasName("AGRMNT_ITEM_TYPATR");


            entity.Property(e => e.AgreementItemTypeId)
                .HasColumnName("AGREEMENT_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.AgreementItemType)
                .WithMany(p => p.AgreementItemTypeAttrs)
                .HasForeignKey(d => d.AgreementItemTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AGRMNT_ITEM_TYPATR");
        });

        modelBuilder.Entity<AgreementPartyApplic>(entity =>
        {
            entity.HasKey(e => new { e.AgreementId, e.AgreementItemSeqId, e.PartyId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("AGREEMENT_PARTY_APPLIC");

            entity.HasIndex(e => e.AgreementId)
                .HasName("AGRMNT_PTYA_AGR");


            entity.HasIndex(e => e.PartyId)
                .HasName("AGRMNT_PTYA_PTY");

            entity.Property(e => e.AgreementId)
                .HasColumnName("AGREEMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AgreementItemSeqId)
                .HasColumnName("AGREEMENT_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Agreement)
                .WithMany(p => p.AgreementPartyApplics)
                .HasForeignKey(d => d.AgreementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AGRMNT_PTYA_AGR");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.AgreementPartyApplics)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AGRMNT_PTYA_PTY");
        });

        modelBuilder.Entity<AgreementProductAppl>(entity =>
        {
            entity.HasKey(e => new { e.AgreementId, e.AgreementItemSeqId, e.ProductId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("AGREEMENT_PRODUCT_APPL");


            entity.HasIndex(e => e.ProductId)
                .HasName("AGRMNT_PRDA_PRD");

            entity.HasIndex(e => new { e.AgreementId, e.AgreementItemSeqId })
                .HasName("AGRMNT_PRDA_AITM");

            entity.Property(e => e.AgreementId)
                .HasColumnName("AGREEMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AgreementItemSeqId)
                .HasColumnName("AGREEMENT_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Price)
                .HasColumnName("PRICE")
                .HasColumnType("decimal(18,3)");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.AgreementProductAppls)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AGRMNT_PRDA_PRD");

            entity.HasOne(d => d.AgreementI)
                .WithMany(p => p.AgreementProductAppls)
                .HasForeignKey(d => new { d.AgreementId, d.AgreementItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AGRMNT_PRDA_AITM");
        });

        modelBuilder.Entity<AgreementPromoAppl>(entity =>
        {
            entity.HasKey(e => new { e.AgreementId, e.AgreementItemSeqId, e.ProductPromoId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("AGREEMENT_PROMO_APPL");


            entity.HasIndex(e => e.ProductPromoId)
                .HasName("AGRMNT_PROM_PRO");

            entity.HasIndex(e => new { e.AgreementId, e.AgreementItemSeqId })
                .HasName("AGRMNT_PROM_AITM");

            entity.Property(e => e.AgreementId)
                .HasColumnName("AGREEMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AgreementItemSeqId)
                .HasColumnName("AGREEMENT_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoId)
                .HasColumnName("PRODUCT_PROMO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ProductPromo)
                .WithMany(p => p.AgreementPromoAppls)
                .HasForeignKey(d => d.ProductPromoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AGRMNT_PROM_PRO");

            entity.HasOne(d => d.AgreementI)
                .WithMany(p => p.AgreementPromoAppls)
                .HasForeignKey(d => new { d.AgreementId, d.AgreementItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AGRMNT_PROM_AITM");
        });

        modelBuilder.Entity<AgreementRole>(entity =>
        {
            entity.HasKey(e => new { e.AgreementId, e.PartyId, e.RoleTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("AGREEMENT_ROLE");

            entity.HasIndex(e => e.AgreementId)
                .HasName("AGRMNT_ROLE_AGR");


            entity.HasIndex(e => e.PartyId)
                .HasName("AGRMNT_ROLE_PTY");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("AGRMNT_ROLE_PRLE");

            entity.Property(e => e.AgreementId)
                .HasColumnName("AGREEMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Agreement)
                .WithMany(p => p.AgreementRoles)
                .HasForeignKey(d => d.AgreementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AGRMNT_ROLE_AGR");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.AgreementRoles)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AGRMNT_ROLE_PTY");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.AgreementRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AGRMNT_ROLE_PRLE");
        });

        modelBuilder.Entity<AgreementTerm>(entity =>
        {
            entity.ToTable("AGREEMENT_TERM");

            entity.HasIndex(e => e.AgreementId)
                .HasName("AGRMNT_TERM_AGR");


            entity.HasIndex(e => e.InvoiceItemTypeId)
                .HasName("AGRMNT_TERM_IIT");


            entity.HasIndex(e => e.TermTypeId)
                .HasName("AGRMNT_TERM_TTYP");

            entity.HasIndex(e => new { e.AgreementId, e.AgreementItemSeqId })
                .HasName("AGRMNT_TERM_AITM");

            entity.Property(e => e.AgreementTermId)
                .HasColumnName("AGREEMENT_TERM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AgreementId)
                .HasColumnName("AGREEMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AgreementItemSeqId)
                .HasColumnName("AGREEMENT_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.InvoiceItemTypeId)
                .HasColumnName("INVOICE_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.MaxQuantity).HasColumnName("MAX_QUANTITY");

            entity.Property(e => e.MinQuantity).HasColumnName("MIN_QUANTITY");

            entity.Property(e => e.TermDays)
                .HasColumnName("TERM_DAYS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.TermTypeId)
                .HasColumnName("TERM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TermValue)
                .HasColumnName("TERM_VALUE")
                .HasColumnType("decimal(18,3)");

            entity.Property(e => e.TextValue)
                .HasColumnName("TEXT_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Agreement)
                .WithMany(p => p.AgreementTerms)
                .HasForeignKey(d => d.AgreementId)
                .HasConstraintName("AGRMNT_TERM_AGR");

            entity.HasOne(d => d.InvoiceItemType)
                .WithMany(p => p.AgreementTerms)
                .HasForeignKey(d => d.InvoiceItemTypeId)
                .HasConstraintName("AGRMNT_TERM_IIT");

            entity.HasOne(d => d.TermType)
                .WithMany(p => p.AgreementTerms)
                .HasForeignKey(d => d.TermTypeId)
                .HasConstraintName("AGRMNT_TERM_TTYP");

            entity.HasOne(d => d.AgreementI)
                .WithMany(p => p.AgreementTerms)
                .HasForeignKey(d => new { d.AgreementId, d.AgreementItemSeqId })
                .HasConstraintName("AGRMNT_TERM_AITM");
        });

        modelBuilder.Entity<AgreementTermAttribute>(entity =>
        {
            entity.HasKey(e => new { e.AgreementTermId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("AGREEMENT_TERM_ATTRIBUTE");

            entity.HasIndex(e => e.AgreementTermId)
                .HasName("AGRMNT_TERM_ATTR");


            entity.Property(e => e.AgreementTermId)
                .HasColumnName("AGREEMENT_TERM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.AgreementTerm)
                .WithMany(p => p.AgreementTermAttributes)
                .HasForeignKey(d => d.AgreementTermId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AGRMNT_TERM_ATTR");
        });

        modelBuilder.Entity<AgreementType>(entity =>
        {
            entity.ToTable("AGREEMENT_TYPE");

            entity.HasIndex(e => e.ParentTypeId)
                .HasName("AGRMNT_TYPE_PAR");

            entity.Property(e => e.AgreementTypeId)
                .HasColumnName("AGREEMENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("AGRMNT_TYPE_PAR");
        });

        modelBuilder.Entity<AgreementTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.AgreementTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("AGREEMENT_TYPE_ATTR");

            entity.HasIndex(e => e.AgreementTypeId)
                .HasName("AGRMNT_TYPE_ATTR");


            entity.Property(e => e.AgreementTypeId)
                .HasColumnName("AGREEMENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.AgreementType)
                .WithMany(p => p.AgreementTypeAttrs)
                .HasForeignKey(d => d.AgreementTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AGRMNT_TYPE_ATTR");
        });

        modelBuilder.Entity<AgreementWorkEffortApplic>(entity =>
        {
            entity.HasKey(e => new { e.AgreementId, e.AgreementItemSeqId, e.WorkEffortId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("AGREEMENT_WORK_EFFORT_APPLIC");

            entity.HasIndex(e => e.AgreementId)
                .HasName("AGRMNT_WEA_AGRMNT");


            entity.HasIndex(e => e.WorkEffortId)
                .HasName("AGRMNT_WEA_WE");

            entity.Property(e => e.AgreementId)
                .HasColumnName("AGREEMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AgreementItemSeqId)
                .HasColumnName("AGREEMENT_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Agreement)
                .WithMany(p => p.AgreementWorkEffortApplics)
                .HasForeignKey(d => d.AgreementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AGRMNT_WEA_AGRMNT");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.AgreementWorkEffortApplics)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AGRMNT_WEA_WE");
        });

        modelBuilder.Entity<AllocationPlanHeader>(entity =>
        {
            entity.HasKey(e => new { e.PlanId, e.ProductId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("ALLOCATION_PLAN_HEADER");

            entity.HasIndex(e => e.CreatedByUserLogin)
                .HasName("ALC_PLN_HDR_CBUL");


            entity.HasIndex(e => e.LastModifiedByUserLogin)
                .HasName("ALC_PLN_HDR_LMUL");


            entity.HasIndex(e => e.PlanTypeId)
                .HasName("ALC_PLN_HDR_TYP");

            entity.HasIndex(e => e.StatusId)
                .HasName("ALC_PLN_HDR_STS");

            entity.Property(e => e.PlanId)
                .HasColumnName("PLAN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");


            entity.Property(e => e.PlanName)
                .HasColumnName("PLAN_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.PlanTypeId)
                .HasColumnName("PLAN_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.CreatedByUserLoginNavigation)
                .WithMany(p => p.AllocationPlanHeaderCreatedByUserLoginNavigations)
                .HasForeignKey(d => d.CreatedByUserLogin)
                .HasConstraintName("ALC_PLN_HDR_CBUL");

            entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                .WithMany(p => p.AllocationPlanHeaderLastModifiedByUserLoginNavigations)
                .HasForeignKey(d => d.LastModifiedByUserLogin)
                .HasConstraintName("ALC_PLN_HDR_LMUL");

            entity.HasOne(d => d.PlanType)
                .WithMany(p => p.AllocationPlanHeaders)
                .HasForeignKey(d => d.PlanTypeId)
                .HasConstraintName("ALC_PLN_HDR_TYP");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.AllocationPlanHeaders)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("ALC_PLN_HDR_STS");
        });

        modelBuilder.Entity<AllocationPlanItem>(entity =>
        {
            entity.HasKey(e => new { e.PlanId, e.PlanItemSeqId, e.ProductId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("ALLOCATION_PLAN_ITEM");

            entity.HasIndex(e => e.CreatedByUserLogin)
                .HasName("ALC_PLN_ITM_CBUL");


            entity.HasIndex(e => e.LastModifiedByUserLogin)
                .HasName("ALC_PLN_ITM_LMUL");


            entity.HasIndex(e => e.OrderId)
                .HasName("ALC_PLN_ITM_ODRHDR");

            entity.HasIndex(e => e.PlanMethodEnumId)
                .HasName("ALC_PLN_ITM_ENUM");

            entity.HasIndex(e => e.StatusId)
                .HasName("ALC_PLN_ITM_STS");

            entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId })
                .HasName("ALC_PLN_ITM_ODRITM");

            entity.HasIndex(e => new { e.PlanId, e.ProductId })
                .HasName("ALC_PLN_ITM_HDR");

            entity.Property(e => e.PlanId)
                .HasColumnName("PLAN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PlanItemSeqId)
                .HasColumnName("PLAN_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.AllocatedQuantity)
                .HasColumnName("ALLOCATED_QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");


            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PlanMethodEnumId)
                .HasColumnName("PLAN_METHOD_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PrioritySeqId)
                .HasColumnName("PRIORITY_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.CreatedByUserLoginNavigation)
                .WithMany(p => p.AllocationPlanItemCreatedByUserLoginNavigations)
                .HasForeignKey(d => d.CreatedByUserLogin)
                .HasConstraintName("ALC_PLN_ITM_CBUL");

            entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                .WithMany(p => p.AllocationPlanItemLastModifiedByUserLoginNavigations)
                .HasForeignKey(d => d.LastModifiedByUserLogin)
                .HasConstraintName("ALC_PLN_ITM_LMUL");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.AllocationPlanItems)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("ALC_PLN_ITM_ODRHDR");

            entity.HasOne(d => d.PlanMethodEnum)
                .WithMany(p => p.AllocationPlanItems)
                .HasForeignKey(d => d.PlanMethodEnumId)
                .HasConstraintName("ALC_PLN_ITM_ENUM");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.AllocationPlanItems)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("ALC_PLN_ITM_STS");

            entity.HasOne(d => d.OrderI)
                .WithMany(p => p.AllocationPlanItems)
                .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                .HasConstraintName("ALC_PLN_ITM_ODRITM");

            entity.HasOne(d => d.P)
                .WithMany(p => p.AllocationPlanItems)
                .HasForeignKey(d => new { d.PlanId, d.ProductId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ALC_PLN_ITM_HDR");
        });

        modelBuilder.Entity<AllocationPlanType>(entity =>
        {
            entity.HasKey(e => e.PlanTypeId)
                .HasName("PRIMARY");

            entity.ToTable("ALLOCATION_PLAN_TYPE");


            entity.Property(e => e.PlanTypeId)
                .HasColumnName("PLAN_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");
        });

        modelBuilder.Entity<ApplicationSandbox>(entity =>
        {
            entity.HasKey(e => e.ApplicationId)
                .HasName("PRIMARY");

            entity.ToTable("APPLICATION_SANDBOX");


            entity.HasIndex(e => e.RuntimeDataId)
                .HasName("APP_SNDBX_RNTMDTA");

            entity.HasIndex(e => new { e.WorkEffortId, e.PartyId, e.RoleTypeId, e.FromDate })
                .HasName("APP_SNDBX_WEPA");

            entity.Property(e => e.ApplicationId)
                .HasColumnName("APPLICATION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RuntimeDataId)
                .HasColumnName("RUNTIME_DATA_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.RuntimeData)
                .WithMany(p => p.ApplicationSandboxes)
                .HasForeignKey(d => d.RuntimeDataId)
                .HasConstraintName("APP_SNDBX_RNTMDTA");

            entity.HasOne(d => d.WorkEffortPartyAssignment)
                .WithMany(p => p.ApplicationSandboxes)
                .HasForeignKey(d => new { d.WorkEffortId, d.PartyId, d.RoleTypeId, d.FromDate })
                .HasConstraintName("APP_SNDBX_WEPA");
        });

        modelBuilder.Entity<AudioDataResource>(entity =>
        {
            entity.HasKey(e => e.DataResourceId)
                .HasName("PRIMARY");

            entity.ToTable("AUDIO_DATA_RESOURCE");


            entity.HasIndex(e => e.DataResourceId)
                .HasName("DATA_REC_AUDIO");


            entity.Property(e => e.DataResourceId)
                .HasColumnName("DATA_RESOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AudioData).HasColumnName("AUDIO_DATA");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.DataResource)
                .WithOne(p => p.AudioDataResource)
                .HasForeignKey<AudioDataResource>(d => d.DataResourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DATA_REC_AUDIO");
        });

        modelBuilder.Entity<BenefitType>(entity =>
        {
            entity.ToTable("BENEFIT_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("BEN_TYPE_PAR");

            entity.Property(e => e.BenefitTypeId)
                .HasColumnName("BENEFIT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BenefitName)
                .HasColumnName("BENEFIT_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.EmployerPaidPercentage).HasColumnName("EMPLOYER_PAID_PERCENTAGE");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("BEN_TYPE_PAR");
        });

        modelBuilder.Entity<BillingAccount>(entity =>
        {
            entity.ToTable("BILLING_ACCOUNT");

            entity.HasIndex(e => e.AccountCurrencyUomId)
                .HasName("BILLACCT_CUOM");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("BILLACCT_CMECH");


            entity.Property(e => e.BillingAccountId)
                .HasColumnName("BILLING_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AccountCurrencyUomId)
                .HasColumnName("ACCOUNT_CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AccountLimit)
                .HasColumnName("ACCOUNT_LIMIT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ExternalAccountId)
                .HasColumnName("EXTERNAL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.AccountCurrencyUom)
                .WithMany(p => p.BillingAccounts)
                .HasForeignKey(d => d.AccountCurrencyUomId)
                .HasConstraintName("BILLACCT_CUOM");

            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.BillingAccounts)
                .HasForeignKey(d => d.ContactMechId)
                .HasConstraintName("BILLACCT_CMECH");

            entity.HasOne(d => d.ContactMechNavigation)
                .WithMany(p => p.BillingAccounts)
                .HasForeignKey(d => d.ContactMechId)
                .HasConstraintName("BILLACCT_PADDR");
        });

        modelBuilder.Entity<BillingAccountRole>(entity =>
        {
            entity.HasKey(e => new { e.BillingAccountId, e.PartyId, e.RoleTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("BILLING_ACCOUNT_ROLE");

            entity.HasIndex(e => e.BillingAccountId)
                .HasName("BILLACCT_ROLE");


            entity.HasIndex(e => e.PartyId)
                .HasName("BILLACCT_RL_PARTY");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("BILLACCT_RL_PTRL");

            entity.Property(e => e.BillingAccountId)
                .HasColumnName("BILLING_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.BillingAccount)
                .WithMany(p => p.BillingAccountRoles)
                .HasForeignKey(d => d.BillingAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("BILLACCT_ROLE");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.BillingAccountRoles)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("BILLACCT_RL_PARTY");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.BillingAccountRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("BILLACCT_RL_PTRL");
        });

        modelBuilder.Entity<BillingAccountTerm>(entity =>
        {
            entity.ToTable("BILLING_ACCOUNT_TERM");

            entity.HasIndex(e => e.BillingAccountId)
                .HasName("BILLACCT_TRM_BACT");


            entity.HasIndex(e => e.TermTypeId)
                .HasName("BILLACCT_TRM_TRM");

            entity.HasIndex(e => e.UomId)
                .HasName("BILLACCT_TRM_UOM");

            entity.Property(e => e.BillingAccountTermId)
                .HasColumnName("BILLING_ACCOUNT_TERM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BillingAccountId)
                .HasColumnName("BILLING_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.TermDays)
                .HasColumnName("TERM_DAYS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.TermTypeId)
                .HasColumnName("TERM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TermValue)
                .HasColumnName("TERM_VALUE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.UomId)
                .HasColumnName("UOM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.BillingAccount)
                .WithMany(p => p.BillingAccountTerms)
                .HasForeignKey(d => d.BillingAccountId)
                .HasConstraintName("BILLACCT_TRM_BACT");

            entity.HasOne(d => d.TermType)
                .WithMany(p => p.BillingAccountTerms)
                .HasForeignKey(d => d.TermTypeId)
                .HasConstraintName("BILLACCT_TRM_TRM");

            entity.HasOne(d => d.Uom)
                .WithMany(p => p.BillingAccountTerms)
                .HasForeignKey(d => d.UomId)
                .HasConstraintName("BILLACCT_TRM_UOM");
        });

        modelBuilder.Entity<BillingAccountTermAttr>(entity =>
        {
            entity.HasKey(e => new { e.BillingAccountTermId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("BILLING_ACCOUNT_TERM_ATTR");

            entity.HasIndex(e => e.BillingAccountTermId)
                .HasName("BILLACCT_TRM_ATTR");


            entity.Property(e => e.BillingAccountTermId)
                .HasColumnName("BILLING_ACCOUNT_TERM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.BillingAccountTerm)
                .WithMany(p => p.BillingAccountTermAttrs)
                .HasForeignKey(d => d.BillingAccountTermId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("BILLACCT_TRM_ATTR");
        });

        modelBuilder.Entity<BrowserType>(entity =>
        {
            entity.ToTable("BROWSER_TYPE");


            entity.Property(e => e.BrowserTypeId)
                .HasColumnName("BROWSER_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BrowserName)
                .HasColumnName("BROWSER_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.BrowserVersion)
                .HasColumnName("BROWSER_VERSION")
                .HasColumnType("varchar(10)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");
        });

        modelBuilder.Entity<Budget>(entity =>
        {
            entity.ToTable("BUDGET");

            entity.HasIndex(e => e.BudgetTypeId)
                .HasName("BUDGET_BGTTYP");


            entity.HasIndex(e => e.CustomTimePeriodId)
                .HasName("BUDGET_CTP");


            entity.Property(e => e.BudgetId)
                .HasColumnName("BUDGET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BudgetTypeId)
                .HasColumnName("BUDGET_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CustomTimePeriodId)
                .HasColumnName("CUSTOM_TIME_PERIOD_ID")
                .HasColumnType("varchar(36)");


            entity.HasOne(d => d.BudgetType)
                .WithMany(p => p.Budgets)
                .HasForeignKey(d => d.BudgetTypeId)
                .HasConstraintName("BUDGET_BGTTYP");

            entity.HasOne(d => d.CustomTimePeriod)
                .WithMany(p => p.Budgets)
                .HasForeignKey(d => d.CustomTimePeriodId)
                .HasConstraintName("BUDGET_CTP");
        });

        modelBuilder.Entity<BudgetAttribute>(entity =>
        {
            entity.HasKey(e => new { e.BudgetId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("BUDGET_ATTRIBUTE");

            entity.HasIndex(e => e.BudgetId)
                .HasName("BUDGET_ATTR_BDGT");


            entity.Property(e => e.BudgetId)
                .HasColumnName("BUDGET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Budget)
                .WithMany(p => p.BudgetAttributes)
                .HasForeignKey(d => d.BudgetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("BUDGET_ATTR_BDGT");
        });

        modelBuilder.Entity<BudgetItem>(entity =>
        {
            entity.HasKey(e => new { e.BudgetId, e.BudgetItemSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("BUDGET_ITEM");

            entity.HasIndex(e => e.BudgetId)
                .HasName("BDGTITM_TO_BDGT");

            entity.HasIndex(e => e.BudgetItemTypeId)
                .HasName("BUDGET_ITEM_BTYP");


            entity.Property(e => e.BudgetId)
                .HasColumnName("BUDGET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BudgetItemSeqId)
                .HasColumnName("BUDGET_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.BudgetItemTypeId)
                .HasColumnName("BUDGET_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Justification)
                .HasColumnName("JUSTIFICATION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.Purpose)
                .HasColumnName("PURPOSE")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.Budget)
                .WithMany(p => p.BudgetItems)
                .HasForeignKey(d => d.BudgetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("BDGTITM_TO_BDGT");

            entity.HasOne(d => d.BudgetItemType)
                .WithMany(p => p.BudgetItems)
                .HasForeignKey(d => d.BudgetItemTypeId)
                .HasConstraintName("BUDGET_ITEM_BTYP");
        });

        modelBuilder.Entity<BudgetItemAttribute>(entity =>
        {
            entity.HasKey(e => new { e.BudgetId, e.BudgetItemSeqId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("BUDGET_ITEM_ATTRIBUTE");


            entity.HasIndex(e => new { e.BudgetId, e.BudgetItemSeqId })
                .HasName("BUDGET_ITEM_ATTR");

            entity.Property(e => e.BudgetId)
                .HasColumnName("BUDGET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BudgetItemSeqId)
                .HasColumnName("BUDGET_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.BudgetI)
                .WithMany(p => p.BudgetItemAttributes)
                .HasForeignKey(d => new { d.BudgetId, d.BudgetItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("BUDGET_ITEM_ATTR");
        });

        modelBuilder.Entity<BudgetItemType>(entity =>
        {
            entity.ToTable("BUDGET_ITEM_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("BUDGET_ITM_TYPPAR");

            entity.Property(e => e.BudgetItemTypeId)
                .HasColumnName("BUDGET_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("BUDGET_ITM_TYPPAR");
        });

        modelBuilder.Entity<BudgetItemTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.BudgetItemTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("BUDGET_ITEM_TYPE_ATTR");

            entity.HasIndex(e => e.BudgetItemTypeId)
                .HasName("BUDGET_ITMTYPATTR");


            entity.Property(e => e.BudgetItemTypeId)
                .HasColumnName("BUDGET_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.BudgetItemType)
                .WithMany(p => p.BudgetItemTypeAttrs)
                .HasForeignKey(d => d.BudgetItemTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("BUDGET_ITMTYPATTR");
        });

        modelBuilder.Entity<BudgetReview>(entity =>
        {
            entity.HasKey(e => new { e.BudgetId, e.BudgetReviewId, e.PartyId, e.BudgetReviewResultTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("BUDGET_REVIEW");

            entity.HasIndex(e => e.BudgetId)
                .HasName("BUDGET_RVW_BDGT");

            entity.HasIndex(e => e.BudgetReviewResultTypeId)
                .HasName("BUDGET_RVW_RTYPE");


            entity.HasIndex(e => e.PartyId)
                .HasName("BUDGET_RVW_PARTY");

            entity.Property(e => e.BudgetId)
                .HasColumnName("BUDGET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BudgetReviewId)
                .HasColumnName("BUDGET_REVIEW_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BudgetReviewResultTypeId)
                .HasColumnName("BUDGET_REVIEW_RESULT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ReviewDate)
                .HasColumnName("REVIEW_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Budget)
                .WithMany(p => p.BudgetReviews)
                .HasForeignKey(d => d.BudgetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("BUDGET_RVW_BDGT");

            entity.HasOne(d => d.BudgetReviewResultType)
                .WithMany(p => p.BudgetReviews)
                .HasForeignKey(d => d.BudgetReviewResultTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("BUDGET_RVW_RTYPE");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.BudgetReviews)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("BUDGET_RVW_PARTY");
        });

        modelBuilder.Entity<BudgetReviewResultType>(entity =>
        {
            entity.ToTable("BUDGET_REVIEW_RESULT_TYPE");


            entity.Property(e => e.BudgetReviewResultTypeId)
                .HasColumnName("BUDGET_REVIEW_RESULT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<BudgetRevision>(entity =>
        {
            entity.HasKey(e => new { e.BudgetId, e.RevisionSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("BUDGET_REVISION");

            entity.HasIndex(e => e.BudgetId)
                .HasName("BUDGET_RVSN_BDGT");


            entity.Property(e => e.BudgetId)
                .HasColumnName("BUDGET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RevisionSeqId)
                .HasColumnName("REVISION_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DateRevised)
                .HasColumnName("DATE_REVISED")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Budget)
                .WithMany(p => p.BudgetRevisions)
                .HasForeignKey(d => d.BudgetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("BUDGET_RVSN_BDGT");
        });

        modelBuilder.Entity<BudgetRevisionImpact>(entity =>
        {
            entity.HasKey(e => new { e.BudgetId, e.BudgetItemSeqId, e.RevisionSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("BUDGET_REVISION_IMPACT");

            entity.HasIndex(e => e.BudgetId)
                .HasName("BUDGET_RNIMP_BDGT");


            entity.HasIndex(e => new { e.BudgetId, e.BudgetItemSeqId })
                .HasName("BUDGET_RNIMP_BITM");

            entity.HasIndex(e => new { e.BudgetId, e.RevisionSeqId })
                .HasName("BUDGET_RNIMP_REV");

            entity.Property(e => e.BudgetId)
                .HasColumnName("BUDGET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BudgetItemSeqId)
                .HasColumnName("BUDGET_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RevisionSeqId)
                .HasColumnName("REVISION_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AddDeleteFlag)
                .HasColumnName("ADD_DELETE_FLAG")
                .HasColumnType("char(1)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.RevisedAmount)
                .HasColumnName("REVISED_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.RevisionReason)
                .HasColumnName("REVISION_REASON")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.Budget)
                .WithMany(p => p.BudgetRevisionImpacts)
                .HasForeignKey(d => d.BudgetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("BUDGET_RNIMP_BDGT");

            entity.HasOne(d => d.BudgetI)
                .WithMany(p => p.BudgetRevisionImpacts)
                .HasForeignKey(d => new { d.BudgetId, d.BudgetItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("BUDGET_RNIMP_BITM");

            entity.HasOne(d => d.BudgetRevision)
                .WithMany(p => p.BudgetRevisionImpacts)
                .HasForeignKey(d => new { d.BudgetId, d.RevisionSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("BUDGET_RNIMP_REV");
        });

        modelBuilder.Entity<BudgetRole>(entity =>
        {
            entity.HasKey(e => new { e.BudgetId, e.PartyId, e.RoleTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("BUDGET_ROLE");

            entity.HasIndex(e => e.BudgetId)
                .HasName("BUDGET_ROLE_BDGT");


            entity.HasIndex(e => e.PartyId)
                .HasName("BUDGET_ROLE_PARTY");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("BUDGET_ROLE_PROLE");

            entity.Property(e => e.BudgetId)
                .HasColumnName("BUDGET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Budget)
                .WithMany(p => p.BudgetRoles)
                .HasForeignKey(d => d.BudgetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("BUDGET_ROLE_BDGT");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.BudgetRoles)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("BUDGET_ROLE_PARTY");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.BudgetRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("BUDGET_ROLE_PROLE");
        });

        modelBuilder.Entity<BudgetScenario>(entity =>
        {
            entity.ToTable("BUDGET_SCENARIO");


            entity.Property(e => e.BudgetScenarioId)
                .HasColumnName("BUDGET_SCENARIO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<BudgetScenarioApplication>(entity =>
        {
            entity.HasKey(e => new { e.BudgetScenarioApplicId, e.BudgetScenarioId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("BUDGET_SCENARIO_APPLICATION");

            entity.HasIndex(e => e.BudgetId)
                .HasName("BUDGET_SAPL_BDGT");

            entity.HasIndex(e => e.BudgetScenarioId)
                .HasName("BUDGET_SAPL_BSCN");


            entity.HasIndex(e => new { e.BudgetId, e.BudgetItemSeqId })
                .HasName("BUDGET_SAPL_BITM");

            entity.Property(e => e.BudgetScenarioApplicId)
                .HasColumnName("BUDGET_SCENARIO_APPLIC_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BudgetScenarioId)
                .HasColumnName("BUDGET_SCENARIO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AmountChange)
                .HasColumnName("AMOUNT_CHANGE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.BudgetId)
                .HasColumnName("BUDGET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BudgetItemSeqId)
                .HasColumnName("BUDGET_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PercentageChange)
                .HasColumnName("PERCENTAGE_CHANGE")
                .HasColumnType("decimal(18,6)");

            entity.HasOne(d => d.Budget)
                .WithMany(p => p.BudgetScenarioApplications)
                .HasForeignKey(d => d.BudgetId)
                .HasConstraintName("BUDGET_SAPL_BDGT");

            entity.HasOne(d => d.BudgetScenario)
                .WithMany(p => p.BudgetScenarioApplications)
                .HasForeignKey(d => d.BudgetScenarioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("BUDGET_SAPL_BSCN");

            entity.HasOne(d => d.BudgetI)
                .WithMany(p => p.BudgetScenarioApplications)
                .HasForeignKey(d => new { d.BudgetId, d.BudgetItemSeqId })
                .HasConstraintName("BUDGET_SAPL_BITM");
        });

        modelBuilder.Entity<BudgetScenarioRule>(entity =>
        {
            entity.HasKey(e => new { e.BudgetScenarioId, e.BudgetItemTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("BUDGET_SCENARIO_RULE");

            entity.HasIndex(e => e.BudgetItemTypeId)
                .HasName("BUDGET_SRLE_BITP");

            entity.HasIndex(e => e.BudgetScenarioId)
                .HasName("BUDGET_SRLE_BSCN");


            entity.Property(e => e.BudgetScenarioId)
                .HasColumnName("BUDGET_SCENARIO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BudgetItemTypeId)
                .HasColumnName("BUDGET_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AmountChange)
                .HasColumnName("AMOUNT_CHANGE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PercentageChange)
                .HasColumnName("PERCENTAGE_CHANGE")
                .HasColumnType("decimal(18,6)");

            entity.HasOne(d => d.BudgetItemType)
                .WithMany(p => p.BudgetScenarioRules)
                .HasForeignKey(d => d.BudgetItemTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("BUDGET_SRLE_BITP");

            entity.HasOne(d => d.BudgetScenario)
                .WithMany(p => p.BudgetScenarioRules)
                .HasForeignKey(d => d.BudgetScenarioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("BUDGET_SRLE_BSCN");
        });

        modelBuilder.Entity<BudgetStatu>(entity =>
        {
            entity.HasKey(e => new { e.BudgetId, e.StatusId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("BUDGET_STATUS");

            entity.HasIndex(e => e.BudgetId)
                .HasName("BUDGET_STTS_BDGT");

            entity.HasIndex(e => e.ChangedByUserLoginId)
                .HasName("BUDGET_STTS_USRLGN");


            entity.HasIndex(e => e.StatusId)
                .HasName("BUDGET_STTS_STTS");

            entity.Property(e => e.BudgetId)
                .HasColumnName("BUDGET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ChangedByUserLoginId)
                .HasColumnName("CHANGE_BY_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.StatusDate)
                .HasColumnName("STATUS_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Budget)
                .WithMany(p => p.BudgetStatus)
                .HasForeignKey(d => d.BudgetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("BUDGET_STTS_BDGT");

            entity.HasOne(d => d.ChangeByUserLogin)
                .WithMany(p => p.BudgetStatus)
                .HasForeignKey(d => d.ChangedByUserLoginId)
                .HasConstraintName("BUDGET_STTS_USRLGN");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.BudgetStatus)
                .HasForeignKey(d => d.StatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("BUDGET_STTS_STTS");
        });

        modelBuilder.Entity<BudgetType>(entity =>
        {
            entity.ToTable("BUDGET_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("BUDGET_TYPE_PAR");

            entity.Property(e => e.BudgetTypeId)
                .HasColumnName("BUDGET_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("BUDGET_TYPE_PAR");
        });

        modelBuilder.Entity<BudgetTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.BudgetTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("BUDGET_TYPE_ATTR");

            entity.HasIndex(e => e.BudgetTypeId)
                .HasName("BUDGET_TPATR_BT");


            entity.Property(e => e.BudgetTypeId)
                .HasColumnName("BUDGET_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.BudgetType)
                .WithMany(p => p.BudgetTypeAttrs)
                .HasForeignKey(d => d.BudgetTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("BUDGET_TPATR_BT");
        });

        modelBuilder.Entity<CarrierShipmentBoxType>(entity =>
        {
            entity.HasKey(e => new { e.ShipmentBoxTypeId, e.PartyId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("CARRIER_SHIPMENT_BOX_TYPE");


            entity.HasIndex(e => e.PartyId)
                .HasName("CARR_SHBX_PARTY");

            entity.HasIndex(e => e.ShipmentBoxTypeId)
                .HasName("CARR_SHBX_TYPE");

            entity.Property(e => e.ShipmentBoxTypeId)
                .HasColumnName("SHIPMENT_BOX_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.OversizeCode)
                .HasColumnName("OVERSIZE_CODE")
                .HasColumnType("varchar(10)");

            entity.Property(e => e.PackagingTypeCode)
                .HasColumnName("PACKAGING_TYPE_CODE")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.CarrierShipmentBoxTypes)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CARR_SHBX_PARTY");

            entity.HasOne(d => d.ShipmentBoxType)
                .WithMany(p => p.CarrierShipmentBoxTypes)
                .HasForeignKey(d => d.ShipmentBoxTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CARR_SHBX_TYPE");
        });

        modelBuilder.Entity<CarrierShipmentMethod>(entity =>
        {
            entity.HasKey(e => new { e.ShipmentMethodTypeId, e.PartyId, e.RoleTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("CARRIER_SHIPMENT_METHOD");


            entity.HasIndex(e => e.PartyId)
                .HasName("CARR_SHMETH_PARTY");

            entity.HasIndex(e => e.ShipmentMethodTypeId)
                .HasName("CARR_SHMETH_TYPE");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("CARR_SHMETH_PROLE");

            entity.Property(e => e.ShipmentMethodTypeId)
                .HasColumnName("SHIPMENT_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CarrierServiceCode)
                .HasColumnName("CARRIER_SERVICE_CODE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNumber)
                .HasColumnName("SEQUENCE_NUMBER")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.CarrierShipmentMethods)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CARR_SHMETH_PARTY");

            entity.HasOne(d => d.ShipmentMethodType)
                .WithMany(p => p.CarrierShipmentMethods)
                .HasForeignKey(d => d.ShipmentMethodTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CARR_SHMETH_TYPE");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.CarrierShipmentMethods)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CARR_SHMETH_PROLE");
        });

        modelBuilder.Entity<CartAbandonedLine>(entity =>
        {
            entity.HasKey(e => new { e.VisitId, e.CartAbandonedLineSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("CART_ABANDONED_LINE");


            entity.HasIndex(e => e.ProdCatalogId)
                .HasName("CART_ABLN_PRDCAT");

            entity.HasIndex(e => e.ProductId)
                .HasName("CART_ABLN_PRD");

            entity.Property(e => e.VisitId)
                .HasColumnName("VISIT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CartAbandonedLineSeqId)
                .HasColumnName("CART_ABANDONED_LINE_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ConfigId)
                .HasColumnName("CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ProdCatalogId)
                .HasColumnName("PROD_CATALOG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.Reserv2ndPPPerc)
                .HasColumnName("RESERV2ND_P_P_PERC")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReservLength)
                .HasColumnName("RESERV_LENGTH")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReservNthPPPerc)
                .HasColumnName("RESERV_NTH_P_P_PERC")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReservPersons)
                .HasColumnName("RESERV_PERSONS")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReservStart)
                .HasColumnName("RESERV_START")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.TotalWithAdjustments)
                .HasColumnName("TOTAL_WITH_ADJUSTMENTS")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.UnitPrice)
                .HasColumnName("UNIT_PRICE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.WasReserved)
                .HasColumnName("WAS_RESERVED")
                .HasColumnType("char(1)");

            entity.HasOne(d => d.ProdCatalog)
                .WithMany(p => p.CartAbandonedLines)
                .HasForeignKey(d => d.ProdCatalogId)
                .HasConstraintName("CART_ABLN_PRDCAT");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.CartAbandonedLines)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("CART_ABLN_PRD");
        });

        modelBuilder.Entity<CatalinaSession>(entity =>
        {
            entity.HasKey(e => e.SessionId)
                .HasName("PRIMARY");

            entity.ToTable("CATALINA_SESSION");


            entity.Property(e => e.SessionId)
                .HasColumnName("SESSION_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.IsValid)
                .HasColumnName("IS_VALID")
                .HasColumnType("char(1)");

            entity.Property(e => e.LastAccessed)
                .HasColumnName("LAST_ACCESSED")
                .HasColumnType("decimal(20,0)");


            entity.Property(e => e.MaxIdle)
                .HasColumnName("MAX_IDLE")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.SessionInfo).HasColumnName("SESSION_INFO");

            entity.Property(e => e.SessionSize)
                .HasColumnName("SESSION_SIZE")
                .HasColumnType("decimal(20,0)");
        });

        modelBuilder.Entity<CharacterSet>(entity =>
        {
            entity.ToTable("CHARACTER_SET");


            entity.Property(e => e.CharacterSetId)
                .HasColumnName("CHARACTER_SET_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<CheckAccount>(entity =>
        {
            entity.HasKey(e => e.PaymentMethodId)
                .HasName("PRIMARY");

            entity.ToTable("CHECK_ACCOUNT");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("CACCT_CMECH");


            entity.HasIndex(e => e.PaymentMethodId)
                .HasName("CACCT_PMETH");

            entity.Property(e => e.PaymentMethodId)
                .HasColumnName("PAYMENT_METHOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AccountNumber)
                .HasColumnName("ACCOUNT_NUMBER")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AccountType)
                .HasColumnName("ACCOUNT_TYPE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.BankName)
                .HasColumnName("BANK_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.BranchCode)
                .HasColumnName("BRANCH_CODE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CompanyNameOnAccount)
                .HasColumnName("COMPANY_NAME_ON_ACCOUNT")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.NameOnAccount)
                .HasColumnName("NAME_ON_ACCOUNT")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.RoutingNumber)
                .HasColumnName("ROUTING_NUMBER")
                .HasColumnType("varchar(60)");

            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.CheckAccounts)
                .HasForeignKey(d => d.ContactMechId)
                .HasConstraintName("CACCT_CMECH");

            entity.HasOne(d => d.ContactMechNavigation)
                .WithMany(p => p.CheckAccounts)
                .HasForeignKey(d => d.ContactMechId)
                .HasConstraintName("CACCT_PADDR");

            entity.HasOne(d => d.PaymentMethod)
                .WithOne(p => p.CheckAccount)
                .HasForeignKey<CheckAccount>(d => d.PaymentMethodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CACCT_PMETH");
        });

        modelBuilder.Entity<CommContentAssocType>(entity =>
        {
            entity.ToTable("COMM_CONTENT_ASSOC_TYPE");


            entity.Property(e => e.CommContentAssocTypeId)
                .HasColumnName("COMM_CONTENT_ASSOC_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<CommEventContentAssoc>(entity =>
        {
            entity.HasKey(e => new { e.ContentId, e.CommunicationEventId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("COMM_EVENT_CONTENT_ASSOC");

            entity.HasIndex(e => e.CommContentAssocTypeId)
                .HasName("COMMEV_CA_TYP");

            entity.HasIndex(e => e.CommunicationEventId)
                .HasName("COMMEV_CA_COMMEV");

            entity.HasIndex(e => e.ContentId)
                .HasName("COMMEV_CA_FROM");


            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CommunicationEventId)
                .HasColumnName("COMMUNICATION_EVENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CommContentAssocTypeId)
                .HasColumnName("COMM_CONTENT_ASSOC_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.CommContentAssocType)
                .WithMany(p => p.CommEventContentAssocs)
                .HasForeignKey(d => d.CommContentAssocTypeId)
                .HasConstraintName("COMMEV_CA_TYP");

            entity.HasOne(d => d.CommunicationEvent)
                .WithMany(p => p.CommEventContentAssocs)
                .HasForeignKey(d => d.CommunicationEventId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("COMMEV_CA_COMMEV");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.CommEventContentAssocs)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("COMMEV_CA_FROM");
        });

        modelBuilder.Entity<CommunicationEvent>(entity =>
        {
            entity.ToTable("COMMUNICATION_EVENT");

            entity.HasIndex(e => e.CommunicationEventTypeId)
                .HasName("COM_EVNT_TYPE");

            entity.HasIndex(e => e.ContactListId)
                .HasName("COM_EVNT_CLST");

            entity.HasIndex(e => e.ContactMechIdFrom)
                .HasName("COM_EVNT_FCM");

            entity.HasIndex(e => e.ContactMechIdTo)
                .HasName("COM_EVNT_TCM");

            entity.HasIndex(e => e.ContactMechTypeId)
                .HasName("COM_EVNT_CMTP");

            entity.HasIndex(e => e.ContentMimeTypeId)
                .HasName("COM_EVNT_MIMETYPE");


            entity.HasIndex(e => e.MessageId)
                .HasName("COMMEVT_MSG_ID")
                .IsUnique();

            entity.HasIndex(e => e.PartyIdFrom)
                .HasName("COM_EVNT_FPTY");

            entity.HasIndex(e => e.PartyIdTo)
                .HasName("COM_EVNT_TPTY");

            entity.HasIndex(e => e.ReasonEnumId)
                .HasName("COM_EVNT_RESENUM");

            entity.HasIndex(e => e.RoleTypeIdFrom)
                .HasName("COM_EVNT_FRTYP");

            entity.HasIndex(e => e.RoleTypeIdTo)
                .HasName("COM_EVNT_TRTYP");

            entity.HasIndex(e => e.StatusId)
                .HasName("COM_EVNT_STTS");

            entity.Property(e => e.CommunicationEventId)
                .HasColumnName("COMMUNICATION_EVENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BccString)
                .HasColumnName("BCC_STRING")
                .HasColumnType("longtext");

            entity.Property(e => e.CcString)
                .HasColumnName("CC_STRING")
                .HasColumnType("longtext");

            entity.Property(e => e.CommunicationEventTypeId)
                .HasColumnName("COMMUNICATION_EVENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactListId)
                .HasColumnName("CONTACT_LIST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechIdFrom)
                .HasColumnName("CONTACT_MECH_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechIdTo)
                .HasColumnName("CONTACT_MECH_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechTypeId)
                .HasColumnName("CONTACT_MECH_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Content)
                .HasColumnName("CONTENT")
                .HasColumnType("longtext");

            entity.Property(e => e.ContentMimeTypeId)
                .HasColumnName("CONTENT_MIME_TYPE_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DatetimeEnded)
                .HasColumnName("DATETIME_ENDED")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.DatetimeStarted)
                .HasColumnName("DATETIME_STARTED")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.EntryDate)
                .HasColumnName("ENTRY_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.FromString)
                .HasColumnName("FROM_STRING")
                .HasColumnType("longtext");

            entity.Property(e => e.HeaderString)
                .HasColumnName("HEADER_STRING")
                .HasColumnType("longtext");


            entity.Property(e => e.MessageId)
                .HasColumnName("MESSAGE_ID")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.Note)
                .HasColumnName("NOTE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.OrigCommEventId)
                .HasColumnName("ORIG_COMM_EVENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ParentCommEventId)
                .HasColumnName("PARENT_COMM_EVENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyIdFrom)
                .HasColumnName("PARTY_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyIdTo)
                .HasColumnName("PARTY_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReasonEnumId)
                .HasColumnName("REASON_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeIdFrom)
                .HasColumnName("ROLE_TYPE_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeIdTo)
                .HasColumnName("ROLE_TYPE_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Subject)
                .HasColumnName("SUBJECT")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ToStrings)
                .HasColumnName("TO_STRING")
                .HasColumnType("longtext");

            entity.HasOne(d => d.CommunicationEventType)
                .WithMany(p => p.CommunicationEvents)
                .HasForeignKey(d => d.CommunicationEventTypeId)
                .HasConstraintName("COM_EVNT_TYPE");

            entity.HasOne(d => d.ContactList)
                .WithMany(p => p.CommunicationEvents)
                .HasForeignKey(d => d.ContactListId)
                .HasConstraintName("COM_EVNT_CLST");

            entity.HasOne(d => d.ContactMechIdFromNavigation)
                .WithMany(p => p.CommunicationEventContactMechIdFromNavigations)
                .HasForeignKey(d => d.ContactMechIdFrom)
                .HasConstraintName("COM_EVNT_FCM");

            entity.HasOne(d => d.ContactMechIdToNavigation)
                .WithMany(p => p.CommunicationEventContactMechIdToNavigations)
                .HasForeignKey(d => d.ContactMechIdTo)
                .HasConstraintName("COM_EVNT_TCM");

            entity.HasOne(d => d.ContactMechType)
                .WithMany(p => p.CommunicationEvents)
                .HasForeignKey(d => d.ContactMechTypeId)
                .HasConstraintName("COM_EVNT_CMTP");

            entity.HasOne(d => d.ContentMimeType)
                .WithMany(p => p.CommunicationEvents)
                .HasForeignKey(d => d.ContentMimeTypeId)
                .HasConstraintName("COM_EVNT_MIMETYPE");

            entity.HasOne(d => d.PartyIdFromNavigation)
                .WithMany(p => p.CommunicationEventPartyIdFromNavigations)
                .HasForeignKey(d => d.PartyIdFrom)
                .HasConstraintName("COM_EVNT_FPTY");

            entity.HasOne(d => d.PartyIdToNavigation)
                .WithMany(p => p.CommunicationEventPartyIdToNavigations)
                .HasForeignKey(d => d.PartyIdTo)
                .HasConstraintName("COM_EVNT_TPTY");

            entity.HasOne(d => d.ReasonEnum)
                .WithMany(p => p.CommunicationEvents)
                .HasForeignKey(d => d.ReasonEnumId)
                .HasConstraintName("COM_EVNT_RESENUM");

            entity.HasOne(d => d.RoleTypeIdFromNavigation)
                .WithMany(p => p.CommunicationEventRoleTypeIdFromNavigations)
                .HasForeignKey(d => d.RoleTypeIdFrom)
                .HasConstraintName("COM_EVNT_FRTYP");

            entity.HasOne(d => d.RoleTypeIdToNavigation)
                .WithMany(p => p.CommunicationEventRoleTypeIdToNavigations)
                .HasForeignKey(d => d.RoleTypeIdTo)
                .HasConstraintName("COM_EVNT_TRTYP");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.CommunicationEvents)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("COM_EVNT_STTS");
        });

        modelBuilder.Entity<CommunicationEventOrder>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.CommunicationEventId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("COMMUNICATION_EVENT_ORDER");

            entity.HasIndex(e => e.CommunicationEventId)
                .HasName("COMEV_ORDER_CMEV");


            entity.HasIndex(e => e.OrderId)
                .HasName("COMEV_ORDER_ORDER");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CommunicationEventId)
                .HasColumnName("COMMUNICATION_EVENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.CommunicationEvent)
                .WithMany(p => p.CommunicationEventOrders)
                .HasForeignKey(d => d.CommunicationEventId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("COMEV_ORDER_CMEV");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.CommunicationEventOrders)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("COMEV_ORDER_ORDER");
        });

        modelBuilder.Entity<CommunicationEventProduct>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.CommunicationEventId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("COMMUNICATION_EVENT_PRODUCT");

            entity.HasIndex(e => e.CommunicationEventId)
                .HasName("COMEV_PROD_CMEV");


            entity.HasIndex(e => e.ProductId)
                .HasName("COMEV_PROD_PROD");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.CommunicationEventId)
                .HasColumnName("COMMUNICATION_EVENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.CommunicationEvent)
                .WithMany(p => p.CommunicationEventProducts)
                .HasForeignKey(d => d.CommunicationEventId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("COMEV_PROD_CMEV");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.CommunicationEventProducts)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("COMEV_PROD_PROD");
        });

        modelBuilder.Entity<CommunicationEventPrpTyp>(entity =>
        {
            entity.ToTable("COMMUNICATION_EVENT_PRP_TYP");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("COM_EVNT_PRP_TYP");

            entity.Property(e => e.CommunicationEventPrpTypId)
                .HasColumnName("COMMUNICATION_EVENT_PRP_TYP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("COM_EVNT_PRP_TYP");
        });

        modelBuilder.Entity<CommunicationEventPurpose>(entity =>
        {
            entity.HasKey(e => new { e.CommunicationEventPrpTypId, e.CommunicationEventId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("COMMUNICATION_EVENT_PURPOSE");

            entity.HasIndex(e => e.CommunicationEventId)
                .HasName("COM_EVNT_PRP_EVNT");

            entity.HasIndex(e => e.CommunicationEventPrpTypId)
                .HasName("COM_EVNT_PRP_TYPE");


            entity.Property(e => e.CommunicationEventPrpTypId)
                .HasColumnName("COMMUNICATION_EVENT_PRP_TYP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CommunicationEventId)
                .HasColumnName("COMMUNICATION_EVENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.CommunicationEvent)
                .WithMany(p => p.CommunicationEventPurposes)
                .HasForeignKey(d => d.CommunicationEventId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("COM_EVNT_PRP_EVNT");

            entity.HasOne(d => d.CommunicationEventPrpTyp)
                .WithMany(p => p.CommunicationEventPurposes)
                .HasForeignKey(d => d.CommunicationEventPrpTypId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("COM_EVNT_PRP_TYPE");
        });

        modelBuilder.Entity<CommunicationEventReturn>(entity =>
        {
            entity.HasKey(e => new { e.ReturnId, e.CommunicationEventId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("COMMUNICATION_EVENT_RETURN");

            entity.HasIndex(e => e.CommunicationEventId)
                .HasName("COMEV_RETURN_CMEV");


            entity.HasIndex(e => e.ReturnId)
                .HasName("COMEV_ORDER_RETURN");

            entity.Property(e => e.ReturnId)
                .HasColumnName("RETURN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CommunicationEventId)
                .HasColumnName("COMMUNICATION_EVENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.CommunicationEvent)
                .WithMany(p => p.CommunicationEventReturns)
                .HasForeignKey(d => d.CommunicationEventId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("COMEV_RETURN_CMEV");

            entity.HasOne(d => d.Return)
                .WithMany(p => p.CommunicationEventReturns)
                .HasForeignKey(d => d.ReturnId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("COMEV_ORDER_RETURN");
        });

        modelBuilder.Entity<CommunicationEventRole>(entity =>
        {
            entity.HasKey(e => new { e.CommunicationEventId, e.PartyId, e.RoleTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("COMMUNICATION_EVENT_ROLE");

            entity.HasIndex(e => e.CommunicationEventId)
                .HasName("COM_EVRL_CMEV");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("COM_EVRL_CMCH");


            entity.HasIndex(e => e.PartyId)
                .HasName("COM_EVRL_PTY");

            entity.HasIndex(e => e.StatusId)
                .HasName("COM_EVRL_STTS");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("COM_EVRL_PRLE");

            entity.Property(e => e.CommunicationEventId)
                .HasColumnName("COMMUNICATION_EVENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.CommunicationEvent)
                .WithMany(p => p.CommunicationEventRoles)
                .HasForeignKey(d => d.CommunicationEventId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("COM_EVRL_CMEV");

            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.CommunicationEventRoles)
                .HasForeignKey(d => d.ContactMechId)
                .HasConstraintName("COM_EVRL_CMCH");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.CommunicationEventRoles)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("COM_EVRL_PTY");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.CommunicationEventRoles)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("COM_EVRL_STTS");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.CommunicationEventRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("COM_EVRL_PRLE");
        });

        modelBuilder.Entity<CommunicationEventType>(entity =>
        {
            entity.ToTable("COMMUNICATION_EVENT_TYPE");

            entity.HasIndex(e => e.ContactMechTypeId)
                .HasName("COM_EVNT_TYPE_CMT");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("COM_EVNT_TYPE_PAR");

            entity.Property(e => e.CommunicationEventTypeId)
                .HasColumnName("COMMUNICATION_EVENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechTypeId)
                .HasColumnName("CONTACT_MECH_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ContactMechType)
                .WithMany(p => p.CommunicationEventTypes)
                .HasForeignKey(d => d.ContactMechTypeId)
                .HasConstraintName("COM_EVNT_TYPE_CMT");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("COM_EVNT_TYPE_PAR");
        });

        modelBuilder.Entity<CommunicationEventWorkEff>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortId, e.CommunicationEventId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("COMMUNICATION_EVENT_WORK_EFF");

            entity.HasIndex(e => e.CommunicationEventId)
                .HasName("COMEV_WEFF_CMEV");


            entity.HasIndex(e => e.WorkEffortId)
                .HasName("COMEV_WEFF_WEFF");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CommunicationEventId)
                .HasColumnName("COMMUNICATION_EVENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.CommunicationEvent)
                .WithMany(p => p.CommunicationEventWorkEffs)
                .HasForeignKey(d => d.CommunicationEventId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("COMEV_WEFF_CMEV");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.CommunicationEventWorkEffs)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("COMEV_WEFF_WEFF");
        });

        modelBuilder.Entity<ConfigOptionProductOption>(entity =>
        {
            entity.HasKey(e => new { e.ConfigId, e.ConfigItemId, e.ConfigOptionId, e.SequenceNum, e.ProductId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0 });

            entity.ToTable("CONFIG_OPTION_PRODUCT_OPTION");


            entity.HasIndex(e => new { e.ConfigItemId, e.ConfigOptionId, e.ProductId })
                .HasName("PROD_OPTN_PROD");

            entity.HasIndex(e => new { e.ConfigId, e.ConfigItemId, e.ConfigOptionId, e.SequenceNum })
                .HasName("PROD_OPTN_CONF");

            entity.Property(e => e.ConfigId)
                .HasColumnName("CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ConfigItemId)
                .HasColumnName("CONFIG_ITEM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ConfigOptionId)
                .HasColumnName("CONFIG_OPTION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.ProductOptionId)
                .HasColumnName("PRODUCT_OPTION_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ProductConfigProduct)
                .WithMany(p => p.ConfigOptionProductOptions)
                .HasForeignKey(d => new { d.ConfigItemId, d.ConfigOptionId, d.ProductId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_OPTN_PROD");

            entity.HasOne(d => d.ProductConfigConfig)
                .WithMany(p => p.ConfigOptionProductOptions)
                .HasForeignKey(d => new { d.ConfigId, d.ConfigItemId, d.ConfigOptionId, d.SequenceNum })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_OPTN_CONF");
        });

        modelBuilder.Entity<ContactList>(entity =>
        {
            entity.ToTable("CONTACT_LIST");

            entity.HasIndex(e => e.ContactListTypeId)
                .HasName("CNCT_LST_TYP");

            entity.HasIndex(e => e.ContactMechTypeId)
                .HasName("CNCT_LST_CMCHTP");

            entity.HasIndex(e => e.CreatedByUserLogin)
                .HasName("CNCT_LST_CBUL");


            entity.HasIndex(e => e.LastModifiedByUserLogin)
                .HasName("CNCT_LST_LMUL");


            entity.HasIndex(e => e.MarketingCampaignId)
                .HasName("CNCT_LST_MKCMPN");

            entity.HasIndex(e => e.OwnerPartyId)
                .HasName("CNCT_LST_OPTY");

            entity.Property(e => e.ContactListId)
                .HasColumnName("CONTACT_LIST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ContactListName)
                .HasColumnName("CONTACT_LIST_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.ContactListTypeId)
                .HasColumnName("CONTACT_LIST_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechTypeId)
                .HasColumnName("CONTACT_MECH_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.IsPublic)
                .HasColumnName("IS_PUBLIC")
                .HasColumnType("char(1)");

            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");


            entity.Property(e => e.MarketingCampaignId)
                .HasColumnName("MARKETING_CAMPAIGN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OptOutScreen)
                .HasColumnName("OPT_OUT_SCREEN")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.OwnerPartyId)
                .HasColumnName("OWNER_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SingleUse)
                .HasColumnName("SINGLE_USE")
                .HasColumnType("char(1)");

            entity.Property(e => e.VerifyEmailFrom)
                .HasColumnName("VERIFY_EMAIL_FROM")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.VerifyEmailScreen)
                .HasColumnName("VERIFY_EMAIL_SCREEN")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.VerifyEmailSubject)
                .HasColumnName("VERIFY_EMAIL_SUBJECT")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.VerifyEmailWebSiteId)
                .HasColumnName("VERIFY_EMAIL_WEB_SITE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ContactListType)
                .WithMany(p => p.ContactLists)
                .HasForeignKey(d => d.ContactListTypeId)
                .HasConstraintName("CNCT_LST_TYP");

            entity.HasOne(d => d.ContactMechType)
                .WithMany(p => p.ContactLists)
                .HasForeignKey(d => d.ContactMechTypeId)
                .HasConstraintName("CNCT_LST_CMCHTP");

            entity.HasOne(d => d.CreatedByUserLoginNavigation)
                .WithMany(p => p.ContactListCreatedByUserLoginNavigations)
                .HasForeignKey(d => d.CreatedByUserLogin)
                .HasConstraintName("CNCT_LST_CBUL");

            entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                .WithMany(p => p.ContactListLastModifiedByUserLoginNavigations)
                .HasForeignKey(d => d.LastModifiedByUserLogin)
                .HasConstraintName("CNCT_LST_LMUL");

            entity.HasOne(d => d.MarketingCampaign)
                .WithMany(p => p.ContactLists)
                .HasForeignKey(d => d.MarketingCampaignId)
                .HasConstraintName("CNCT_LST_MKCMPN");

            entity.HasOne(d => d.OwnerParty)
                .WithMany(p => p.ContactLists)
                .HasForeignKey(d => d.OwnerPartyId)
                .HasConstraintName("CNCT_LST_OPTY");
        });

        modelBuilder.Entity<ContactListCommStatus>(entity =>
        {
            entity.HasKey(e => new { e.ContactListId, e.CommunicationEventId, e.ContactMechId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("CONTACT_LIST_COMM_STATUS");

            entity.HasIndex(e => e.ChangedByUserLoginId)
                .HasName("CNCT_LST_CST_ST_UL");

            entity.HasIndex(e => e.CommunicationEventId)
                .HasName("CNCT_LST_CST_CE");

            entity.HasIndex(e => e.ContactListId)
                .HasName("CNCT_LST_CST_CL");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("CNCT_LST_CST_CM");


            entity.HasIndex(e => e.MessageId)
                .HasName("CNTLSTCST_MSG_ID")
                .IsUnique();

            entity.HasIndex(e => e.PartyId)
                .HasName("CNCT_LST_CST_PT");

            entity.HasIndex(e => e.StatusId)
                .HasName("CNCT_LST_CST_ST");

            entity.Property(e => e.ContactListId)
                .HasColumnName("CONTACT_LIST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CommunicationEventId)
                .HasColumnName("COMMUNICATION_EVENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ChangedByUserLoginId)
                .HasColumnName("CHANGE_BY_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.MessageId)
                .HasColumnName("MESSAGE_ID")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ChangeByUserLogin)
                .WithMany(p => p.ContactListCommStatus)
                .HasForeignKey(d => d.ChangedByUserLoginId)
                .HasConstraintName("CNCT_LST_CST_ST_UL");

            entity.HasOne(d => d.CommunicationEvent)
                .WithMany(p => p.ContactListCommStatus)
                .HasForeignKey(d => d.CommunicationEventId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CNCT_LST_CST_CE");

            entity.HasOne(d => d.ContactList)
                .WithMany(p => p.ContactListCommStatus)
                .HasForeignKey(d => d.ContactListId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CNCT_LST_CST_CL");

            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.ContactListCommStatus)
                .HasForeignKey(d => d.ContactMechId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CNCT_LST_CST_CM");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.ContactListCommStatus)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("CNCT_LST_CST_PT");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.ContactListCommStatus)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("CNCT_LST_CST_ST");
        });

        modelBuilder.Entity<ContactListParty>(entity =>
        {
            entity.HasKey(e => new { e.ContactListId, e.PartyId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("CONTACT_LIST_PARTY");

            entity.HasIndex(e => e.ContactListId)
                .HasName("CNCT_LSTPTY_CLST");


            entity.HasIndex(e => e.PartyId)
                .HasName("CNCT_LSTPTY_PTY");

            entity.HasIndex(e => e.PreferredContactMechId)
                .HasName("CNCT_LSTPTY_PCM");

            entity.HasIndex(e => e.StatusId)
                .HasName("CNCT_LSTPTY_STS");

            entity.Property(e => e.ContactListId)
                .HasColumnName("CONTACT_LIST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PreferredContactMechId)
                .HasColumnName("PREFERRED_CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ContactList)
                .WithMany(p => p.ContactListParties)
                .HasForeignKey(d => d.ContactListId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CNCT_LSTPTY_CLST");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.ContactListParties)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CNCT_LSTPTY_PTY");

            entity.HasOne(d => d.PreferredContactMech)
                .WithMany(p => p.ContactListParties)
                .HasForeignKey(d => d.PreferredContactMechId)
                .HasConstraintName("CNCT_LSTPTY_PCM");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.ContactListParties)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("CNCT_LSTPTY_STS");
        });

        modelBuilder.Entity<ContactListPartyStatus>(entity =>
        {
            entity.HasKey(e => new { e.ContactListId, e.PartyId, e.FromDate, e.StatusDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("CONTACT_LIST_PARTY_STATUS");


            entity.HasIndex(e => new { e.ContactListId, e.PartyId, e.FromDate })
                .HasName("CTLSTPTST_CLP");

            entity.Property(e => e.ContactListId)
                .HasColumnName("CONTACT_LIST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.StatusDate)
                .HasColumnName("STATUS_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.OptInVerifyCode)
                .HasColumnName("OPT_IN_VERIFY_CODE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.SetByUserLoginId)
                .HasColumnName("SET_BY_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ContactListParty)
                .WithMany(p => p.ContactListPartyStatus)
                .HasForeignKey(d => new { d.ContactListId, d.PartyId, d.FromDate })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CTLSTPTST_CLP");
        });

        modelBuilder.Entity<ContactListType>(entity =>
        {
            entity.ToTable("CONTACT_LIST_TYPE");


            entity.Property(e => e.ContactListTypeId)
                .HasColumnName("CONTACT_LIST_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<ContactMech>(entity =>
        {
            entity.ToTable("CONTACT_MECH");

            entity.HasIndex(e => e.ContactMechTypeId)
                .HasName("CONT_MECH_TYPE");


            entity.HasIndex(e => e.InfoString)
                .HasName("INFO_STRING_IDX");


            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechTypeId)
                .HasColumnName("CONTACT_MECH_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.InfoString)
                .HasColumnName("INFO_STRING")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.ContactMechType)
                .WithMany(p => p.ContactMeches)
                .HasForeignKey(d => d.ContactMechTypeId)
                .HasConstraintName("CONT_MECH_TYPE");
        });

        modelBuilder.Entity<ContactMechAttribute>(entity =>
        {
            entity.HasKey(e => new { e.ContactMechId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("CONTACT_MECH_ATTRIBUTE");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("CONT_MECH_ATTR");


            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.ContactMechAttributes)
                .HasForeignKey(d => d.ContactMechId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CONT_MECH_ATTR");
        });

        modelBuilder.Entity<ContactMechLink>(entity =>
        {
            entity.HasKey(e => new { e.ContactMechIdFrom, e.ContactMechIdTo })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("CONTACT_MECH_LINK");

            entity.HasIndex(e => e.ContactMechIdFrom)
                .HasName("CONT_MECH_FCMECH");

            entity.HasIndex(e => e.ContactMechIdTo)
                .HasName("CONT_MECH_TCMECH");


            entity.Property(e => e.ContactMechIdFrom)
                .HasColumnName("CONTACT_MECH_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechIdTo)
                .HasColumnName("CONTACT_MECH_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ContactMechIdFromNavigation)
                .WithMany(p => p.ContactMechLinkContactMechIdFromNavigations)
                .HasForeignKey(d => d.ContactMechIdFrom)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CONT_MECH_FCMECH");

            entity.HasOne(d => d.ContactMechIdToNavigation)
                .WithMany(p => p.ContactMechLinkContactMechIdToNavigations)
                .HasForeignKey(d => d.ContactMechIdTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CONT_MECH_TCMECH");
        });

        modelBuilder.Entity<ContactMechPurposeType>(entity =>
        {
            entity.ToTable("CONTACT_MECH_PURPOSE_TYPE");


            entity.Property(e => e.ContactMechPurposeTypeId)
                .HasColumnName("CONTACT_MECH_PURPOSE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");
        });

        modelBuilder.Entity<ContactMechType>(entity =>
        {
            entity.ToTable("CONTACT_MECH_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("CONT_MECH_TYP_PAR");

            entity.Property(e => e.ContactMechTypeId)
                .HasColumnName("CONTACT_MECH_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("CONT_MECH_TYP_PAR");
        });

        modelBuilder.Entity<ContactMechTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.ContactMechTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("CONTACT_MECH_TYPE_ATTR");

            entity.HasIndex(e => e.ContactMechTypeId)
                .HasName("CONT_MECH_TYP_ATR");


            entity.Property(e => e.ContactMechTypeId)
                .HasColumnName("CONTACT_MECH_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.ContactMechType)
                .WithMany(p => p.ContactMechTypeAttrs)
                .HasForeignKey(d => d.ContactMechTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CONT_MECH_TYP_ATR");
        });

        modelBuilder.Entity<ContactMechTypePurpose>(entity =>
        {
            entity.HasKey(e => new { e.ContactMechTypeId, e.ContactMechPurposeTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("CONTACT_MECH_TYPE_PURPOSE");

            entity.HasIndex(e => e.ContactMechPurposeTypeId)
                .HasName("CONT_MECH_TP_PRPTP");

            entity.HasIndex(e => e.ContactMechTypeId)
                .HasName("CONT_MECH_TP_TYPE");


            entity.Property(e => e.ContactMechTypeId)
                .HasColumnName("CONTACT_MECH_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechPurposeTypeId)
                .HasColumnName("CONTACT_MECH_PURPOSE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ContactMechPurposeType)
                .WithMany(p => p.ContactMechTypePurposes)
                .HasForeignKey(d => d.ContactMechPurposeTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CONT_MECH_TP_PRPTP");

            entity.HasOne(d => d.ContactMechType)
                .WithMany(p => p.ContactMechTypePurposes)
                .HasForeignKey(d => d.ContactMechTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CONT_MECH_TP_TYPE");
        });

        modelBuilder.Entity<Container>(entity =>
        {
            entity.ToTable("CONTAINER");

            entity.HasIndex(e => e.ContainerTypeId)
                .HasName("CONTAINER_CTTYP");


            entity.HasIndex(e => e.FacilityId)
                .HasName("CONTAINER_FACILITY");


            entity.Property(e => e.ContainerId)
                .HasColumnName("CONTAINER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContainerTypeId)
                .HasColumnName("CONTAINER_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");


            entity.HasOne(d => d.ContainerType)
                .WithMany(p => p.Containers)
                .HasForeignKey(d => d.ContainerTypeId)
                .HasConstraintName("CONTAINER_CTTYP");

            entity.HasOne(d => d.Facility)
                .WithMany(p => p.Containers)
                .HasForeignKey(d => d.FacilityId)
                .HasConstraintName("CONTAINER_FACILITY");
        });

        modelBuilder.Entity<ContainerGeoPoint>(entity =>
        {
            entity.HasKey(e => new { e.ContainerId, e.GeoPointId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("CONTAINER_GEO_POINT");

            entity.HasIndex(e => e.ContainerId)
                .HasName("CONTNRGEOPT_CONTNR");


            entity.HasIndex(e => e.GeoPointId)
                .HasName("CONTNRGEOPT_GEOPT");


            entity.Property(e => e.ContainerId)
                .HasColumnName("CONTAINER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GeoPointId)
                .HasColumnName("GEO_POINT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Container)
                .WithMany(p => p.ContainerGeoPoints)
                .HasForeignKey(d => d.ContainerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CONTNRGEOPT_CONTNR");

            entity.HasOne(d => d.GeoPoint)
                .WithMany(p => p.ContainerGeoPoints)
                .HasForeignKey(d => d.GeoPointId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CONTNRGEOPT_GEOPT");
        });

        modelBuilder.Entity<ContainerType>(entity =>
        {
            entity.ToTable("CONTAINER_TYPE");


            entity.Property(e => e.ContainerTypeId)
                .HasColumnName("CONTAINER_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<Content>(entity =>
        {
            entity.ToTable("CONTENT");

            entity.HasIndex(e => e.CharacterSetId)
                .HasName("CONTENT_CHST");

            entity.HasIndex(e => e.ContentTypeId)
                .HasName("CONTENT_TO_TYPE");

            entity.HasIndex(e => e.CreatedByUserLogin)
                .HasName("CONTENT_CB_ULGN");


            entity.HasIndex(e => e.CustomMethodId)
                .HasName("CONTENT_CUSTMET");

            entity.HasIndex(e => e.DataResourceId)
                .HasName("CONTENT_TO_DATA");

            entity.HasIndex(e => e.DataSourceId)
                .HasName("CONTENT_DTSRC");

            entity.HasIndex(e => e.DecoratorContentId)
                .HasName("CONTENT_DCNTNT");

            entity.HasIndex(e => e.InstanceOfContentId)
                .HasName("CONTENT_IOFCNT");

            entity.HasIndex(e => e.LastModifiedByUserLogin)
                .HasName("CONTENT_LMB_ULGN");


            entity.HasIndex(e => e.OwnerContentId)
                .HasName("CONTENT_PCNTNT");

            entity.HasIndex(e => e.PrivilegeEnumId)
                .HasName("CONTENT_PRIVENM");

            entity.HasIndex(e => e.StatusId)
                .HasName("CONTENT_STATUS");

            entity.HasIndex(e => e.TemplateDataResourceId)
                .HasName("CONTENT_TO_TMPDATA");

            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CharacterSetId)
                .HasColumnName("CHARACTER_SET_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.ChildBranchCount)
                .HasColumnName("CHILD_BRANCH_COUNT")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ChildLeafCount)
                .HasColumnName("CHILD_LEAF_COUNT")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ContentName)
                .HasColumnName("CONTENT_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ContentTypeId)
                .HasColumnName("CONTENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedDate)
                .HasColumnName("CREATED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CustomMethodId)
                .HasColumnName("CUSTOM_METHOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DataResourceId)
                .HasColumnName("DATA_RESOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DataSourceId)
                .HasColumnName("DATA_SOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DecoratorContentId)
                .HasColumnName("DECORATOR_CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.InstanceOfContentId)
                .HasColumnName("INSTANCE_OF_CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.LastModifiedDate)
                .HasColumnName("LAST_MODIFIED_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.LocaleString)
                .HasColumnName("LOCALE_STRING")
                .HasColumnType("varchar(10)");

            entity.Property(e => e.MimeTypeId)
                .HasColumnName("MIME_TYPE_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.OwnerContentId)
                .HasColumnName("OWNER_CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PrivilegeEnumId)
                .HasColumnName("PRIVILEGE_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ServiceName)
                .HasColumnName("SERVICE_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TemplateDataResourceId)
                .HasColumnName("TEMPLATE_DATA_RESOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.CharacterSet)
                .WithMany(p => p.Contents)
                .HasForeignKey(d => d.CharacterSetId)
                .HasConstraintName("CONTENT_CHST");

            entity.HasOne(d => d.ContentType)
                .WithMany(p => p.Contents)
                .HasForeignKey(d => d.ContentTypeId)
                .HasConstraintName("CONTENT_TO_TYPE");

            entity.HasOne(d => d.CreatedByUserLoginNavigation)
                .WithMany(p => p.ContentCreatedByUserLoginNavigations)
                .HasForeignKey(d => d.CreatedByUserLogin)
                .HasConstraintName("CONTENT_CB_ULGN");

            entity.HasOne(d => d.CustomMethod)
                .WithMany(p => p.Contents)
                .HasForeignKey(d => d.CustomMethodId)
                .HasConstraintName("CONTENT_CUSTMET");

            entity.HasOne(d => d.DataResource)
                .WithMany(p => p.ContentDataResources)
                .HasForeignKey(d => d.DataResourceId)
                .HasConstraintName("CONTENT_TO_DATA");

            entity.HasOne(d => d.DataSource)
                .WithMany(p => p.Contents)
                .HasForeignKey(d => d.DataSourceId)
                .HasConstraintName("CONTENT_DTSRC");

            entity.HasOne(d => d.DecoratorContent)
                .WithMany(p => p.InverseDecoratorContent)
                .HasForeignKey(d => d.DecoratorContentId)
                .HasConstraintName("CONTENT_DCNTNT");

            entity.HasOne(d => d.InstanceOfContent)
                .WithMany(p => p.InverseInstanceOfContent)
                .HasForeignKey(d => d.InstanceOfContentId)
                .HasConstraintName("CONTENT_IOFCNT");

            entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                .WithMany(p => p.ContentLastModifiedByUserLoginNavigations)
                .HasForeignKey(d => d.LastModifiedByUserLogin)
                .HasConstraintName("CONTENT_LMB_ULGN");

            entity.HasOne(d => d.OwnerContent)
                .WithMany(p => p.InverseOwnerContent)
                .HasForeignKey(d => d.OwnerContentId)
                .HasConstraintName("CONTENT_PCNTNT");

            entity.HasOne(d => d.PrivilegeEnum)
                .WithMany(p => p.Contents)
                .HasForeignKey(d => d.PrivilegeEnumId)
                .HasConstraintName("CONTENT_PRIVENM");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.Contents)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("CONTENT_STATUS");

            entity.HasOne(d => d.TemplateDataResource)
                .WithMany(p => p.ContentTemplateDataResources)
                .HasForeignKey(d => d.TemplateDataResourceId)
                .HasConstraintName("CONTENT_TO_TMPDATA");
        });

        modelBuilder.Entity<ContentApproval>(entity =>
        {
            entity.ToTable("CONTENT_APPROVAL");

            entity.HasIndex(e => e.ApprovalStatusId)
                .HasName("CNTNTAPPR_APSI");

            entity.HasIndex(e => e.ContentId)
                .HasName("CNTNTAPPR_CNT");


            entity.HasIndex(e => e.PartyId)
                .HasName("CNTNTAPPR_PTY");

            entity.HasIndex(e => e.RoleTypeId)
                .HasName("CNTNTAPPR_RLTP");

            entity.Property(e => e.ContentApprovalId)
                .HasColumnName("CONTENT_APPROVAL_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ApprovalDate)
                .HasColumnName("APPROVAL_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ApprovalStatusId)
                .HasColumnName("APPROVAL_STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContentRevisionSeqId)
                .HasColumnName("CONTENT_REVISION_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.ApprovalStatus)
                .WithMany(p => p.ContentApprovals)
                .HasForeignKey(d => d.ApprovalStatusId)
                .HasConstraintName("CNTNTAPPR_APSI");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.ContentApprovals)
                .HasForeignKey(d => d.ContentId)
                .HasConstraintName("CNTNTAPPR_CNT");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.ContentApprovals)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("CNTNTAPPR_PTY");

            entity.HasOne(d => d.RoleType)
                .WithMany(p => p.ContentApprovals)
                .HasForeignKey(d => d.RoleTypeId)
                .HasConstraintName("CNTNTAPPR_RLTP");
        });

        modelBuilder.Entity<ContentAssoc>(entity =>
        {
            entity.HasKey(e => new { e.ContentId, e.ContentIdTo, e.ContentAssocTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("CONTENT_ASSOC");

            entity.HasIndex(e => e.ContentAssocPredicateId)
                .HasName("CONTENTASSC_PRED");

            entity.HasIndex(e => e.ContentAssocTypeId)
                .HasName("CONTENTASSC_TYP");

            entity.HasIndex(e => e.ContentId)
                .HasName("CONTENTASSC_FROM");

            entity.HasIndex(e => e.ContentIdTo)
                .HasName("CONTENTASSC_TO");

            entity.HasIndex(e => e.CreatedByUserLogin)
                .HasName("CONTENTASSC_CBUSR");


            entity.HasIndex(e => e.DataSourceId)
                .HasName("CONTENTASSC_DTSRC");

            entity.HasIndex(e => e.LastModifiedByUserLogin)
                .HasName("CONTENTASSC_LMBUR");


            entity.HasIndex(e => new { e.ContentIdTo, e.ContentAssocTypeId, e.ThruDate })
                .HasName("CONTENTASSC_TOQRY");

            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContentIdTo)
                .HasColumnName("CONTENT_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContentAssocTypeId)
                .HasColumnName("CONTENT_ASSOC_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ContentAssocPredicateId)
                .HasColumnName("CONTENT_ASSOC_PREDICATE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedDate)
                .HasColumnName("CREATED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DataSourceId)
                .HasColumnName("DATA_SOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.LastModifiedDate)
                .HasColumnName("LAST_MODIFIED_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.LeftCoordinate)
                .HasColumnName("LEFT_COORDINATE")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.MapKey)
                .HasColumnName("MAP_KEY")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.UpperCoordinate)
                .HasColumnName("UPPER_COORDINATE")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.ContentAssocPredicate)
                .WithMany(p => p.ContentAssocs)
                .HasForeignKey(d => d.ContentAssocPredicateId)
                .HasConstraintName("CONTENTASSC_PRED");

            entity.HasOne(d => d.ContentAssocType)
                .WithMany(p => p.ContentAssocs)
                .HasForeignKey(d => d.ContentAssocTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CONTENTASSC_TYP");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.ContentAssocContents)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CONTENTASSC_FROM");

            entity.HasOne(d => d.ContentIdToNavigation)
                .WithMany(p => p.ContentAssocContentIdToNavigations)
                .HasForeignKey(d => d.ContentIdTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CONTENTASSC_TO");

            entity.HasOne(d => d.CreatedByUserLoginNavigation)
                .WithMany(p => p.ContentAssocCreatedByUserLoginNavigations)
                .HasForeignKey(d => d.CreatedByUserLogin)
                .HasConstraintName("CONTENTASSC_CBUSR");

            entity.HasOne(d => d.DataSource)
                .WithMany(p => p.ContentAssocs)
                .HasForeignKey(d => d.DataSourceId)
                .HasConstraintName("CONTENTASSC_DTSRC");

            entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                .WithMany(p => p.ContentAssocLastModifiedByUserLoginNavigations)
                .HasForeignKey(d => d.LastModifiedByUserLogin)
                .HasConstraintName("CONTENTASSC_LMBUR");
        });

        modelBuilder.Entity<ContentAssocPredicate>(entity =>
        {
            entity.ToTable("CONTENT_ASSOC_PREDICATE");


            entity.Property(e => e.ContentAssocPredicateId)
                .HasColumnName("CONTENT_ASSOC_PREDICATE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<ContentAssocType>(entity =>
        {
            entity.ToTable("CONTENT_ASSOC_TYPE");


            entity.Property(e => e.ContentAssocTypeId)
                .HasColumnName("CONTENT_ASSOC_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<ContentAttribute>(entity =>
        {
            entity.HasKey(e => new { e.ContentId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("CONTENT_ATTRIBUTE");

            entity.HasIndex(e => e.ContentId)
                .HasName("CONTENT_ATTR");


            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Content)
                .WithMany(p => p.ContentAttributes)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CONTENT_ATTR");
        });

        modelBuilder.Entity<ContentKeyword>(entity =>
        {
            entity.HasKey(e => new { e.ContentId, e.Keyword })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("CONTENT_KEYWORD");

            entity.HasIndex(e => e.ContentId)
                .HasName("CNT_KWD_CNT");


            entity.HasIndex(e => e.Keyword)
                .HasName("CNT_KWD_KWD");


            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Keyword)
                .HasColumnName("KEYWORD")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.RelevancyWeight)
                .HasColumnName("RELEVANCY_WEIGHT")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.ContentKeywords)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CNT_KWD_CNT");
        });

        modelBuilder.Entity<ContentMetaData>(entity =>
        {
            entity.HasKey(e => new { e.ContentId, e.MetaDataPredicateId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("CONTENT_META_DATA");

            entity.HasIndex(e => e.ContentId)
                .HasName("CONTENTMD_CNTNT");


            entity.HasIndex(e => e.DataSourceId)
                .HasName("CONTENTMD_DTSRC");


            entity.HasIndex(e => e.MetaDataPredicateId)
                .HasName("CONTENTMD_DMDPRD");

            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.MetaDataPredicateId)
                .HasColumnName("META_DATA_PREDICATE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DataSourceId)
                .HasColumnName("DATA_SOURCE_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.MetaDataValue)
                .HasColumnName("META_DATA_VALUE")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.ContentMetaDatas)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CONTENTMD_CNTNT");

            entity.HasOne(d => d.DataSource)
                .WithMany(p => p.ContentMetaDatas)
                .HasForeignKey(d => d.DataSourceId)
                .HasConstraintName("CONTENTMD_DTSRC");

            entity.HasOne(d => d.MetaDataPredicate)
                .WithMany(p => p.ContentMetaDatas)
                .HasForeignKey(d => d.MetaDataPredicateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CONTENTMD_DMDPRD");
        });

        modelBuilder.Entity<ContentOperation>(entity =>
        {
            entity.ToTable("CONTENT_OPERATION");


            entity.Property(e => e.ContentOperationId)
                .HasColumnName("CONTENT_OPERATION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<ContentPurpose>(entity =>
        {
            entity.HasKey(e => new { e.ContentId, e.ContentPurposeTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("CONTENT_PURPOSE");

            entity.HasIndex(e => e.ContentId)
                .HasName("CONTENT_PRP");

            entity.HasIndex(e => e.ContentPurposeTypeId)
                .HasName("CONTENT_PRP_TYPE");


            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContentPurposeTypeId)
                .HasColumnName("CONTENT_PURPOSE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.ContentPurposes)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CONTENT_PRP");

            entity.HasOne(d => d.ContentPurposeType)
                .WithMany(p => p.ContentPurposes)
                .HasForeignKey(d => d.ContentPurposeTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CONTENT_PRP_TYPE");
        });

        modelBuilder.Entity<ContentPurposeOperation>(entity =>
        {
            entity.HasKey(e => new
                    { e.ContentPurposeTypeId, e.ContentOperationId, e.RoleTypeId, e.StatusId, e.PrivilegeEnumId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0 });

            entity.ToTable("CONTENT_PURPOSE_OPERATION");

            entity.HasIndex(e => e.ContentOperationId)
                .HasName("CONTENT_PRO_OPER");

            entity.HasIndex(e => e.ContentPurposeTypeId)
                .HasName("CONTENT_PRO_TYPE");


            entity.HasIndex(e => e.PrivilegeEnumId)
                .HasName("CONTENT_PRO_PEI");

            entity.HasIndex(e => e.RoleTypeId)
                .HasName("CONTENT_PRO_RLT");

            entity.HasIndex(e => e.StatusId)
                .HasName("CONTENT_PRO_STI");

            entity.Property(e => e.ContentPurposeTypeId)
                .HasColumnName("CONTENT_PURPOSE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContentOperationId)
                .HasColumnName("CONTENT_OPERATION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PrivilegeEnumId)
                .HasColumnName("PRIVILEGE_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ContentOperation)
                .WithMany(p => p.ContentPurposeOperations)
                .HasForeignKey(d => d.ContentOperationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CONTENT_PRO_OPER");

            entity.HasOne(d => d.ContentPurposeType)
                .WithMany(p => p.ContentPurposeOperations)
                .HasForeignKey(d => d.ContentPurposeTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CONTENT_PRO_TYPE");

            entity.HasOne(d => d.PrivilegeEnum)
                .WithMany(p => p.ContentPurposeOperations)
                .HasForeignKey(d => d.PrivilegeEnumId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CONTENT_PRO_PEI");

            entity.HasOne(d => d.RoleType)
                .WithMany(p => p.ContentPurposeOperations)
                .HasForeignKey(d => d.RoleTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CONTENT_PRO_RLT");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.ContentPurposeOperations)
                .HasForeignKey(d => d.StatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CONTENT_PRO_STI");
        });

        modelBuilder.Entity<ContentPurposeType>(entity =>
        {
            entity.ToTable("CONTENT_PURPOSE_TYPE");


            entity.Property(e => e.ContentPurposeTypeId)
                .HasColumnName("CONTENT_PURPOSE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<ContentRevision>(entity =>
        {
            entity.HasKey(e => new { e.ContentId, e.ContentRevisionSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("CONTENT_REVISION");

            entity.HasIndex(e => e.CommittedByPartyId)
                .HasName("CNTNTREV_CBPTY");

            entity.HasIndex(e => e.ContentId)
                .HasName("CNTNTREV_CNT");


            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContentRevisionSeqId)
                .HasColumnName("CONTENT_REVISION_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CommittedByPartyId)
                .HasColumnName("COMMITTED_BY_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.CommittedByParty)
                .WithMany(p => p.ContentRevisions)
                .HasForeignKey(d => d.CommittedByPartyId)
                .HasConstraintName("CNTNTREV_CBPTY");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.ContentRevisions)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CNTNTREV_CNT");
        });

        modelBuilder.Entity<ContentRevisionItem>(entity =>
        {
            entity.HasKey(e => new { e.ContentId, e.ContentRevisionSeqId, e.ItemContentId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("CONTENT_REVISION_ITEM");


            entity.HasIndex(e => e.NewDataResourceId)
                .HasName("CNTNTREVIT_NEWDR");

            entity.HasIndex(e => e.OldDataResourceId)
                .HasName("CNTNTREVIT_OLDDR");

            entity.HasIndex(e => new { e.ContentId, e.ContentRevisionSeqId })
                .HasName("CNTNTREVIT_CNTREV");

            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContentRevisionSeqId)
                .HasColumnName("CONTENT_REVISION_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ItemContentId)
                .HasColumnName("ITEM_CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.NewDataResourceId)
                .HasColumnName("NEW_DATA_RESOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OldDataResourceId)
                .HasColumnName("OLD_DATA_RESOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.NewDataResource)
                .WithMany(p => p.ContentRevisionItemNewDataResources)
                .HasForeignKey(d => d.NewDataResourceId)
                .HasConstraintName("CNTNTREVIT_NEWDR");

            entity.HasOne(d => d.OldDataResource)
                .WithMany(p => p.ContentRevisionItemOldDataResources)
                .HasForeignKey(d => d.OldDataResourceId)
                .HasConstraintName("CNTNTREVIT_OLDDR");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.ContentRevisionItems)
                .HasForeignKey(d => new { d.ContentId, d.ContentRevisionSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CNTNTREVIT_CNTREV");
        });

        modelBuilder.Entity<ContentRole>(entity =>
        {
            entity.HasKey(e => new { e.ContentId, e.PartyId, e.RoleTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("CONTENT_ROLE");

            entity.HasIndex(e => e.ContentId)
                .HasName("CNTNT_RL_CNTNT");


            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("CNTNT_RL_PTRL");

            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.ContentRoles)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CNTNT_RL_CNTNT");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.ContentRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CNTNT_RL_PTRL");
        });

        modelBuilder.Entity<ContentSearchConstraint>(entity =>
        {
            entity.HasKey(e => new { e.ContentSearchResultId, e.ConstraintSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("CONTENT_SEARCH_CONSTRAINT");

            entity.HasIndex(e => e.ContentSearchResultId)
                .HasName("CNT_SCHRSI_RES");


            entity.Property(e => e.ContentSearchResultId)
                .HasColumnName("CONTENT_SEARCH_RESULT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ConstraintSeqId)
                .HasColumnName("CONSTRAINT_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AnyPrefix)
                .HasColumnName("ANY_PREFIX")
                .HasColumnType("char(1)");

            entity.Property(e => e.AnySuffix)
                .HasColumnName("ANY_SUFFIX")
                .HasColumnType("char(1)");

            entity.Property(e => e.ConstraintName)
                .HasColumnName("CONSTRAINT_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.HighValue)
                .HasColumnName("HIGH_VALUE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.IncludeSubCategories)
                .HasColumnName("INCLUDE_SUB_CATEGORIES")
                .HasColumnType("char(1)");

            entity.Property(e => e.InfoString)
                .HasColumnName("INFO_STRING")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.IsAnd)
                .HasColumnName("IS_AND")
                .HasColumnType("char(1)");


            entity.Property(e => e.LowValue)
                .HasColumnName("LOW_VALUE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.RemoveStems)
                .HasColumnName("REMOVE_STEMS")
                .HasColumnType("char(1)");

            entity.HasOne(d => d.ContentSearchResult)
                .WithMany(p => p.ContentSearchConstraints)
                .HasForeignKey(d => d.ContentSearchResultId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CNT_SCHRSI_RES");
        });

        modelBuilder.Entity<ContentSearchResult>(entity =>
        {
            entity.ToTable("CONTENT_SEARCH_RESULT");


            entity.Property(e => e.ContentSearchResultId)
                .HasColumnName("CONTENT_SEARCH_RESULT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.IsAscending)
                .HasColumnName("IS_ASCENDING")
                .HasColumnType("char(1)");


            entity.Property(e => e.NumResults)
                .HasColumnName("NUM_RESULTS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.OrderByName)
                .HasColumnName("ORDER_BY_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.SearchDate)
                .HasColumnName("SEARCH_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.SecondsTotal).HasColumnName("SECONDS_TOTAL");

            entity.Property(e => e.VisitId)
                .HasColumnName("VISIT_ID")
                .HasColumnType("varchar(36)");
        });

        modelBuilder.Entity<ContentType>(entity =>
        {
            entity.ToTable("CONTENT_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("CNTNT_TYPE_PARENT");

            entity.Property(e => e.ContentTypeId)
                .HasColumnName("CONTENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("CNTNT_TYPE_PARENT");
        });

        modelBuilder.Entity<ContentTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.ContentTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("CONTENT_TYPE_ATTR");

            entity.HasIndex(e => e.ContentTypeId)
                .HasName("CONTENT_TPAT_TYP");


            entity.Property(e => e.ContentTypeId)
                .HasColumnName("CONTENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.ContentType)
                .WithMany(p => p.ContentTypeAttrs)
                .HasForeignKey(d => d.ContentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CONTENT_TPAT_TYP");
        });

        modelBuilder.Entity<CostComponent>(entity =>
        {
            entity.ToTable("COST_COMPONENT");

            entity.HasIndex(e => e.CostComponentCalcId)
                .HasName("COST_COMP_CALC");

            entity.HasIndex(e => e.CostComponentTypeId)
                .HasName("COST_COMP_TYPE");

            entity.HasIndex(e => e.CostUomId)
                .HasName("COST_COMP_CUOM");


            entity.HasIndex(e => e.FixedAssetId)
                .HasName("COST_COMP_FXADSST");

            entity.HasIndex(e => e.GeoId)
                .HasName("COST_COMP_GEO");


            entity.HasIndex(e => e.PartyId)
                .HasName("COST_COMP_PARTY");

            entity.HasIndex(e => e.ProductFeatureId)
                .HasName("COST_COMP_PRODFEAT");

            entity.HasIndex(e => e.ProductId)
                .HasName("COST_COMP_PRODUCT");

            entity.HasIndex(e => e.WorkEffortId)
                .HasName("COST_COMP_WEFF");

            entity.Property(e => e.CostComponentId)
                .HasColumnName("COST_COMPONENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Cost)
                .HasColumnName("COST")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.CostComponentCalcId)
                .HasColumnName("COST_COMPONENT_CALC_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CostComponentTypeId)
                .HasColumnName("COST_COMPONENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CostUomId)
                .HasColumnName("COST_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FixedAssetId)
                .HasColumnName("FIXED_ASSET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.GeoId)
                .HasColumnName("GEO_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductFeatureId)
                .HasColumnName("PRODUCT_FEATURE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.CostComponentCalc)
                .WithMany(p => p.CostComponents)
                .HasForeignKey(d => d.CostComponentCalcId)
                .HasConstraintName("COST_COMP_CALC");

            entity.HasOne(d => d.CostComponentType)
                .WithMany(p => p.CostComponents)
                .HasForeignKey(d => d.CostComponentTypeId)
                .HasConstraintName("COST_COMP_TYPE");

            entity.HasOne(d => d.CostUom)
                .WithMany(p => p.CostComponents)
                .HasForeignKey(d => d.CostUomId)
                .HasConstraintName("COST_COMP_CUOM");

            entity.HasOne(d => d.FixedAsset)
                .WithMany(p => p.CostComponents)
                .HasForeignKey(d => d.FixedAssetId)
                .HasConstraintName("COST_COMP_FXADSST");

            entity.HasOne(d => d.Geo)
                .WithMany(p => p.CostComponents)
                .HasForeignKey(d => d.GeoId)
                .HasConstraintName("COST_COMP_GEO");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.CostComponents)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("COST_COMP_PARTY");

            entity.HasOne(d => d.ProductFeature)
                .WithMany(p => p.CostComponents)
                .HasForeignKey(d => d.ProductFeatureId)
                .HasConstraintName("COST_COMP_PRODFEAT");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.CostComponents)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("COST_COMP_PRODUCT");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.CostComponents)
                .HasForeignKey(d => d.WorkEffortId)
                .HasConstraintName("COST_COMP_WEFF");
        });

        modelBuilder.Entity<CostComponentAttribute>(entity =>
        {
            entity.HasKey(e => new { e.CostComponentId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("COST_COMPONENT_ATTRIBUTE");

            entity.HasIndex(e => e.CostComponentId)
                .HasName("COST_COMP_ATTR");


            entity.Property(e => e.CostComponentId)
                .HasColumnName("COST_COMPONENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.CostComponent)
                .WithMany(p => p.CostComponentAttributes)
                .HasForeignKey(d => d.CostComponentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("COST_COMP_ATTR");
        });

        modelBuilder.Entity<CostComponentCalc>(entity =>
        {
            entity.ToTable("COST_COMPONENT_CALC");

            entity.HasIndex(e => e.CostCustomMethodId)
                .HasName("COST_COM_CMET");

            entity.HasIndex(e => e.CostGlAccountTypeId)
                .HasName("COST_COM_CGLAT");


            entity.HasIndex(e => e.CurrencyUomId)
                .HasName("COST_COM_CUOM");


            entity.HasIndex(e => e.OffsettingGlAccountTypeId)
                .HasName("COST_COM_OGLAT");

            entity.Property(e => e.CostComponentCalcId)
                .HasColumnName("COST_COMPONENT_CALC_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CostCustomMethodId)
                .HasColumnName("COST_CUSTOM_METHOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CostGlAccountTypeId)
                .HasColumnName("COST_GL_ACCOUNT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrencyUomId)
                .HasColumnName("CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.FixedCost)
                .HasColumnName("FIXED_COST")
                .HasColumnType("decimal(18,2)");


            entity.Property(e => e.OffsettingGlAccountTypeId)
                .HasColumnName("OFFSETTING_GL_ACCOUNT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PerMilliSecond)
                .HasColumnName("PER_MILLI_SECOND")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.VariableCost)
                .HasColumnName("VARIABLE_COST")
                .HasColumnType("decimal(18,2)");

            entity.HasOne(d => d.CostCustomMethod)
                .WithMany(p => p.CostComponentCalcs)
                .HasForeignKey(d => d.CostCustomMethodId)
                .HasConstraintName("COST_COM_CMET");

            entity.HasOne(d => d.CostGlAccountType)
                .WithMany(p => p.CostComponentCalcCostGlAccountTypes)
                .HasForeignKey(d => d.CostGlAccountTypeId)
                .HasConstraintName("COST_COM_CGLAT");

            entity.HasOne(d => d.CurrencyUom)
                .WithMany(p => p.CostComponentCalcs)
                .HasForeignKey(d => d.CurrencyUomId)
                .HasConstraintName("COST_COM_CUOM");

            entity.HasOne(d => d.OffsettingGlAccountType)
                .WithMany(p => p.CostComponentCalcOffsettingGlAccountTypes)
                .HasForeignKey(d => d.OffsettingGlAccountTypeId)
                .HasConstraintName("COST_COM_OGLAT");
        });

        modelBuilder.Entity<CostComponentType>(entity =>
        {
            entity.ToTable("COST_COMPONENT_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("COST_COMP_TYPE_PAR");

            entity.Property(e => e.CostComponentTypeId)
                .HasColumnName("COST_COMPONENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("COST_COMP_TYPE_PAR");
        });

        modelBuilder.Entity<CostComponentTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.CostComponentTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("COST_COMPONENT_TYPE_ATTR");

            entity.HasIndex(e => e.CostComponentTypeId)
                .HasName("COST_COMP_TATTR");


            entity.Property(e => e.CostComponentTypeId)
                .HasColumnName("COST_COMPONENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.CostComponentType)
                .WithMany(p => p.CostComponentTypeAttrs)
                .HasForeignKey(d => d.CostComponentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("COST_COMP_TATTR");
        });

        modelBuilder.Entity<CountryAddressFormat>(entity =>
        {
            entity.HasKey(e => e.GeoId)
                .HasName("PRIMARY");

            entity.ToTable("COUNTRY_ADDRESS_FORMAT");


            entity.HasIndex(e => e.GeoAssocTypeId)
                .HasName("CNY_ADR_GEO_TYPE");

            entity.HasIndex(e => e.GeoId)
                .HasName("CNY_ADR_GEO");


            entity.Property(e => e.GeoId)
                .HasColumnName("GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AddressFormat)
                .HasColumnName("ADDRESS_FORMAT")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GeoAssocTypeId)
                .HasColumnName("GEO_ASSOC_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.HasPostalCodeExt)
                .HasColumnName("HAS_POSTAL_CODE_EXT")
                .HasColumnType("char(1)");


            entity.Property(e => e.PostalCodeRegex)
                .HasColumnName("POSTAL_CODE_REGEX")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.RequirePostalCode)
                .HasColumnName("REQUIRE_POSTAL_CODE")
                .HasColumnType("char(1)");

            entity.Property(e => e.RequirePostalCodeExt)
                .HasColumnName("REQUIRE_POSTAL_CODE_EXT")
                .HasColumnType("char(1)");

            entity.Property(e => e.RequireStateProvinceId)
                .HasColumnName("REQUIRE_STATE_PROVINCE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.GeoAssocType)
                .WithMany(p => p.CountryAddressFormats)
                .HasForeignKey(d => d.GeoAssocTypeId)
                .HasConstraintName("CNY_ADR_GEO_TYPE");

            entity.HasOne(d => d.Geo)
                .WithOne(p => p.CountryAddressFormat)
                .HasForeignKey<CountryAddressFormat>(d => d.GeoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CNY_ADR_GEO");
        });

        modelBuilder.Entity<CountryCapital>(entity =>
        {
            entity.HasKey(e => e.CountryCode)
                .HasName("PRIMARY");

            entity.ToTable("COUNTRY_CAPITAL");

            entity.HasIndex(e => e.CountryCode)
                .HasName("CNTRY_CAP_TO_CODE");


            entity.Property(e => e.CountryCode)
                .HasColumnName("COUNTRY_CODE")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CountryCapital1)
                .HasColumnName("COUNTRY_CAPITAL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.CountryCodeNavigation)
                .WithOne(p => p.CountryCapital)
                .HasForeignKey<CountryCapital>(d => d.CountryCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CNTRY_CAP_TO_CODE");
        });

        modelBuilder.Entity<CountryCode>(entity =>
        {
            entity.HasKey(e => e.CountryCode1)
                .HasName("PRIMARY");

            entity.ToTable("COUNTRY_CODE");


            entity.Property(e => e.CountryCode1)
                .HasColumnName("COUNTRY_CODE")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CountryAbbr)
                .HasColumnName("COUNTRY_ABBR")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CountryName)
                .HasColumnName("COUNTRY_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CountryNumber)
                .HasColumnName("COUNTRY_NUMBER")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");
        });

        modelBuilder.Entity<CountryTeleCode>(entity =>
        {
            entity.HasKey(e => e.CountryCode)
                .HasName("PRIMARY");

            entity.ToTable("COUNTRY_TELE_CODE");

            entity.HasIndex(e => e.CountryCode)
                .HasName("CNTRY_TELE_TO_CODE");


            entity.Property(e => e.CountryCode)
                .HasColumnName("COUNTRY_CODE")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.TeleCode)
                .HasColumnName("TELE_CODE")
                .HasColumnType("varchar(60)");

            entity.HasOne(d => d.CountryCodeNavigation)
                .WithOne(p => p.CountryTeleCode)
                .HasForeignKey<CountryTeleCode>(d => d.CountryCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CNTRY_TELE_TO_CODE");
        });

        modelBuilder.Entity<CreditCard>(entity =>
        {
            entity.HasKey(e => e.PaymentMethodId)
                .HasName("PRIMARY");

            entity.ToTable("CREDIT_CARD");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("CREDCARD_CMECH");


            entity.HasIndex(e => e.PaymentMethodId)
                .HasName("CREDCARD_PMNTMETH");

            entity.Property(e => e.PaymentMethodId)
                .HasColumnName("PAYMENT_METHOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CardNumber)
                .HasColumnName("CARD_NUMBER")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CardType)
                .HasColumnName("CARD_TYPE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CompanyNameOnCard)
                .HasColumnName("COMPANY_NAME_ON_CARD")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.ConsecutiveFailedAuths)
                .HasColumnName("CONSECUTIVE_FAILED_AUTHS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ConsecutiveFailedNsf)
                .HasColumnName("CONSECUTIVE_FAILED_NSF")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ExpireDate)
                .HasColumnName("EXPIRE_DATE")
                .HasColumnType("varchar(7)");

            entity.Property(e => e.FirstNameOnCard)
                .HasColumnName("FIRST_NAME_ON_CARD")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.IssueNumber)
                .HasColumnName("ISSUE_NUMBER")
                .HasColumnType("varchar(7)");

            entity.Property(e => e.LastFailedAuthDate)
                .HasColumnName("LAST_FAILED_AUTH_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.LastFailedNsfDate)
                .HasColumnName("LAST_FAILED_NSF_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.LastNameOnCard)
                .HasColumnName("LAST_NAME_ON_CARD")
                .HasColumnType("varchar(100)");


            entity.Property(e => e.MiddleNameOnCard)
                .HasColumnName("MIDDLE_NAME_ON_CARD")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.SuffixOnCard)
                .HasColumnName("SUFFIX_ON_CARD")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.TitleOnCard)
                .HasColumnName("TITLE_ON_CARD")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.ValidFromDate)
                .HasColumnName("VALID_FROM_DATE")
                .HasColumnType("varchar(7)");

            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.CreditCards)
                .HasForeignKey(d => d.ContactMechId)
                .HasConstraintName("CREDCARD_CMECH");

            entity.HasOne(d => d.ContactMechNavigation)
                .WithMany(p => p.CreditCards)
                .HasForeignKey(d => d.ContactMechId)
                .HasConstraintName("CREDCARD_PADDR");

            entity.HasOne(d => d.PaymentMethod)
                .WithOne(p => p.CreditCard)
                .HasForeignKey<CreditCard>(d => d.PaymentMethodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CREDCARD_PMNTMETH");
        });

        modelBuilder.Entity<CreditCardTypeGlAccount>(entity =>
        {
            entity.HasKey(e => new { e.CardType, e.OrganizationPartyId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("CREDIT_CARD_TYPE_GL_ACCOUNT");


            entity.Property(e => e.CardType)
                .HasColumnName("CARD_TYPE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.OrganizationPartyId)
                .HasColumnName("ORGANIZATION_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GlAccountId)
                .HasColumnName("GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");
        });

        modelBuilder.Entity<CustRequest>(entity =>
        {
            entity.ToTable("CUST_REQUEST");


            entity.HasIndex(e => e.CurrencyUomId)
                .HasName("CUST_REQ_CUOM");

            entity.HasIndex(e => e.CustRequestCategoryId)
                .HasName("CUST_REQ_CAT");

            entity.HasIndex(e => e.CustRequestTypeId)
                .HasName("CUST_REQ_TYPE");

            entity.HasIndex(e => e.FromPartyId)
                .HasName("CUST_REQ_FRMPTY");

            entity.HasIndex(e => e.FulfillContactMechId)
                .HasName("CUST_REQ_FULCM");


            entity.HasIndex(e => e.MaximumAmountUomId)
                .HasName("CUST_REQ_AUOM");

            entity.HasIndex(e => e.ParentCustRequestId)
                .HasName("CUST_REQ_PARENT");

            entity.HasIndex(e => e.ProductStoreId)
                .HasName("CUST_REQ_PRDS");

            entity.HasIndex(e => e.SalesChannelEnumId)
                .HasName("CUST_REQ_CHANNEL");

            entity.HasIndex(e => e.StatusId)
                .HasName("CUST_REQ_STATUS");

            entity.Property(e => e.CustRequestId)
                .HasColumnName("CUST_REQUEST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Billed)
                .HasColumnName("BILLED")
                .HasColumnType("char(1)");

            entity.Property(e => e.ClosedDateTime)
                .HasColumnName("CLOSED_DATE_TIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedDate)
                .HasColumnName("CREATED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrencyUomId)
                .HasColumnName("CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CustEstimatedMilliSeconds).HasColumnName("CUST_ESTIMATED_MILLI_SECONDS");

            entity.Property(e => e.CustRequestCategoryId)
                .HasColumnName("CUST_REQUEST_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CustRequestDate)
                .HasColumnName("CUST_REQUEST_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CustRequestName)
                .HasColumnName("CUST_REQUEST_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.CustRequestTypeId)
                .HasColumnName("CUST_REQUEST_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CustSequenceNum)
                .HasColumnName("CUST_SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.FromPartyId)
                .HasColumnName("FROM_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FulfillContactMechId)
                .HasColumnName("FULFILL_CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InternalComment)
                .HasColumnName("INTERNAL_COMMENT")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.LastModifiedDate)
                .HasColumnName("LAST_MODIFIED_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.MaximumAmountUomId)
                .HasColumnName("MAXIMUM_AMOUNT_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OpenDateTime)
                .HasColumnName("OPEN_DATE_TIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ParentCustRequestId)
                .HasColumnName("PARENT_CUST_REQUEST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Priority)
                .HasColumnName("PRIORITY")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Reason)
                .HasColumnName("REASON")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ResponseRequiredDate)
                .HasColumnName("RESPONSE_REQUIRED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.SalesChannelEnumId)
                .HasColumnName("SALES_CHANNEL_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.CurrencyUom)
                .WithMany(p => p.CustRequestCurrencyUoms)
                .HasForeignKey(d => d.CurrencyUomId)
                .HasConstraintName("CUST_REQ_CUOM");

            entity.HasOne(d => d.CustRequestCategory)
                .WithMany(p => p.CustRequests)
                .HasForeignKey(d => d.CustRequestCategoryId)
                .HasConstraintName("CUST_REQ_CAT");

            entity.HasOne(d => d.CustRequestType)
                .WithMany(p => p.CustRequests)
                .HasForeignKey(d => d.CustRequestTypeId)
                .HasConstraintName("CUST_REQ_TYPE");

            entity.HasOne(d => d.FromParty)
                .WithMany(p => p.CustRequests)
                .HasForeignKey(d => d.FromPartyId)
                .HasConstraintName("CUST_REQ_FRMPTY");

            entity.HasOne(d => d.FulfillContactMech)
                .WithMany(p => p.CustRequests)
                .HasForeignKey(d => d.FulfillContactMechId)
                .HasConstraintName("CUST_REQ_FULCM");

            entity.HasOne(d => d.MaximumAmountUom)
                .WithMany(p => p.CustRequestMaximumAmountUoms)
                .HasForeignKey(d => d.MaximumAmountUomId)
                .HasConstraintName("CUST_REQ_AUOM");

            entity.HasOne(d => d.ParentCustRequest)
                .WithMany(p => p.InverseParentCustRequest)
                .HasForeignKey(d => d.ParentCustRequestId)
                .HasConstraintName("CUST_REQ_PARENT");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.CustRequests)
                .HasForeignKey(d => d.ProductStoreId)
                .HasConstraintName("CUST_REQ_PRDS");

            entity.HasOne(d => d.SalesChannelEnum)
                .WithMany(p => p.CustRequests)
                .HasForeignKey(d => d.SalesChannelEnumId)
                .HasConstraintName("CUST_REQ_CHANNEL");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.CustRequests)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("CUST_REQ_STATUS");
        });

        modelBuilder.Entity<CustRequestAttribute>(entity =>
        {
            entity.HasKey(e => new { e.CustRequestId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("CUST_REQUEST_ATTRIBUTE");


            entity.HasIndex(e => e.CustRequestId)
                .HasName("CUST_REQ_ATTR");


            entity.Property(e => e.CustRequestId)
                .HasColumnName("CUST_REQUEST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.CustRequest)
                .WithMany(p => p.CustRequestAttributes)
                .HasForeignKey(d => d.CustRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CUST_REQ_ATTR");
        });

        modelBuilder.Entity<CustRequestCategory>(entity =>
        {
            entity.ToTable("CUST_REQUEST_CATEGORY");


            entity.HasIndex(e => e.CustRequestTypeId)
                .HasName("CUST_RQCT_TYPE");


            entity.Property(e => e.CustRequestCategoryId)
                .HasColumnName("CUST_REQUEST_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CustRequestTypeId)
                .HasColumnName("CUST_REQUEST_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.CustRequestType)
                .WithMany(p => p.CustRequestCategories)
                .HasForeignKey(d => d.CustRequestTypeId)
                .HasConstraintName("CUST_RQCT_TYPE");
        });

        modelBuilder.Entity<CustRequestCommEvent>(entity =>
        {
            entity.HasKey(e => new { e.CustRequestId, e.CommunicationEventId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("CUST_REQUEST_COMM_EVENT");

            entity.HasIndex(e => e.CommunicationEventId)
                .HasName("CUSTREQ_CEV_CEV");


            entity.HasIndex(e => e.CustRequestId)
                .HasName("CUSTREQ_CEV_CRQ");


            entity.Property(e => e.CustRequestId)
                .HasColumnName("CUST_REQUEST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CommunicationEventId)
                .HasColumnName("COMMUNICATION_EVENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.CommunicationEvent)
                .WithMany(p => p.CustRequestCommEvents)
                .HasForeignKey(d => d.CommunicationEventId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CUSTREQ_CEV_CEV");

            entity.HasOne(d => d.CustRequest)
                .WithMany(p => p.CustRequestCommEvents)
                .HasForeignKey(d => d.CustRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CUSTREQ_CEV_CRQ");
        });

        modelBuilder.Entity<CustRequestContent>(entity =>
        {
            entity.HasKey(e => new { e.CustRequestId, e.ContentId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("CUST_REQUEST_CONTENT");

            entity.HasIndex(e => e.ContentId)
                .HasName("CUSTREQ_CNT_CNT");


            entity.HasIndex(e => e.CustRequestId)
                .HasName("CUSTREQ_CNT_CUSTRQ");


            entity.Property(e => e.CustRequestId)
                .HasColumnName("CUST_REQUEST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.CustRequestContents)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CUSTREQ_CNT_CNT");

            entity.HasOne(d => d.CustRequest)
                .WithMany(p => p.CustRequestContents)
                .HasForeignKey(d => d.CustRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CUSTREQ_CNT_CUSTRQ");
        });

        modelBuilder.Entity<CustRequestItem>(entity =>
        {
            entity.HasKey(e => new { e.CustRequestId, e.CustRequestItemSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("CUST_REQUEST_ITEM");


            entity.HasIndex(e => e.CustRequestId)
                .HasName("CUST_REQITM_CREQ");

            entity.HasIndex(e => e.CustRequestResolutionId)
                .HasName("CUST_REQITM_RES");


            entity.HasIndex(e => e.ProductId)
                .HasName("CUST_REQITM_PRD");

            entity.HasIndex(e => e.StatusId)
                .HasName("CUST_REQITM_STTS");

            entity.Property(e => e.CustRequestId)
                .HasColumnName("CUST_REQUEST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CustRequestItemSeqId)
                .HasColumnName("CUST_REQUEST_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ConfigId)
                .HasColumnName("CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CustRequestResolutionId)
                .HasColumnName("CUST_REQUEST_RESOLUTION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.MaximumAmount)
                .HasColumnName("MAXIMUM_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.Priority)
                .HasColumnName("PRIORITY")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.RequiredByDate)
                .HasColumnName("REQUIRED_BY_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ReservLength)
                .HasColumnName("RESERV_LENGTH")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReservPersons)
                .HasColumnName("RESERV_PERSONS")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReservStart)
                .HasColumnName("RESERV_START")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.SelectedAmount)
                .HasColumnName("SELECTED_AMOUNT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Story)
                .HasColumnName("STORY")
                .HasColumnType("longtext");

            entity.HasOne(d => d.CustRequest)
                .WithMany(p => p.CustRequestItems)
                .HasForeignKey(d => d.CustRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CUST_REQITM_CREQ");

            entity.HasOne(d => d.CustRequestResolution)
                .WithMany(p => p.CustRequestItems)
                .HasForeignKey(d => d.CustRequestResolutionId)
                .HasConstraintName("CUST_REQITM_RES");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.CustRequestItems)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("CUST_REQITM_PRD");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.CustRequestItems)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("CUST_REQITM_STTS");
        });

        modelBuilder.Entity<CustRequestItemNote>(entity =>
        {
            entity.HasKey(e => new { e.CustRequestId, e.CustRequestItemSeqId, e.NoteId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("CUST_REQUEST_ITEM_NOTE");


            entity.HasIndex(e => e.NoteId)
                .HasName("CUST_REQ_NOTE");

            entity.HasIndex(e => new { e.CustRequestId, e.CustRequestItemSeqId })
                .HasName("CUST_REQ_ITNT");

            entity.Property(e => e.CustRequestId)
                .HasColumnName("CUST_REQUEST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CustRequestItemSeqId)
                .HasColumnName("CUST_REQUEST_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.NoteId)
                .HasColumnName("NOTE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Note)
                .WithMany(p => p.CustRequestItemNotes)
                .HasForeignKey(d => d.NoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CUST_REQ_NOTE");

            entity.HasOne(d => d.CustRequestI)
                .WithMany(p => p.CustRequestItemNotes)
                .HasForeignKey(d => new { d.CustRequestId, d.CustRequestItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CUST_REQ_ITNT");
        });

        modelBuilder.Entity<CustRequestItemWorkEffort>(entity =>
        {
            entity.HasKey(e => new { e.CustRequestId, e.CustRequestItemSeqId, e.WorkEffortId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("CUST_REQUEST_ITEM_WORK_EFFORT");


            entity.HasIndex(e => e.WorkEffortId)
                .HasName("CUST_REQ_WEFF");

            entity.HasIndex(e => new { e.CustRequestId, e.CustRequestItemSeqId })
                .HasName("WORK_REQFL_CSTRQ");

            entity.Property(e => e.CustRequestId)
                .HasColumnName("CUST_REQUEST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CustRequestItemSeqId)
                .HasColumnName("CUST_REQUEST_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.CustRequestItemWorkEfforts)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CUST_REQ_WEFF");

            entity.HasOne(d => d.CustRequestI)
                .WithMany(p => p.CustRequestItemWorkEfforts)
                .HasForeignKey(d => new { d.CustRequestId, d.CustRequestItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WORK_REQFL_CSTRQ");
        });

        modelBuilder.Entity<CustRequestNote>(entity =>
        {
            entity.HasKey(e => new { e.CustRequestId, e.NoteId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("CUST_REQUEST_NOTE");


            entity.HasIndex(e => e.CustRequestId)
                .HasName("CRQ_CR");


            entity.HasIndex(e => e.NoteId)
                .HasName("CRQ_NOTE");

            entity.Property(e => e.CustRequestId)
                .HasColumnName("CUST_REQUEST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.NoteId)
                .HasColumnName("NOTE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.CustRequest)
                .WithMany(p => p.CustRequestNotes)
                .HasForeignKey(d => d.CustRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CRQ_CR");

            entity.HasOne(d => d.Note)
                .WithMany(p => p.CustRequestNotes)
                .HasForeignKey(d => d.NoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CRQ_NOTE");
        });

        modelBuilder.Entity<CustRequestParty>(entity =>
        {
            entity.HasKey(e => new { e.CustRequestId, e.PartyId, e.RoleTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("CUST_REQUEST_PARTY");


            entity.HasIndex(e => e.CustRequestId)
                .HasName("CREQ_RL_CRQST");


            entity.HasIndex(e => e.PartyId)
                .HasName("CREQ_RL_PARTY");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("CREQ_RL_PROLE");

            entity.Property(e => e.CustRequestId)
                .HasColumnName("CUST_REQUEST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.CustRequest)
                .WithMany(p => p.CustRequestParties)
                .HasForeignKey(d => d.CustRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CREQ_RL_CRQST");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.CustRequestParties)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CREQ_RL_PARTY");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.CustRequestParties)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CREQ_RL_PROLE");
        });

        modelBuilder.Entity<CustRequestResolution>(entity =>
        {
            entity.ToTable("CUST_REQUEST_RESOLUTION");


            entity.HasIndex(e => e.CustRequestTypeId)
                .HasName("CUST_RQRS_TYPE");


            entity.Property(e => e.CustRequestResolutionId)
                .HasColumnName("CUST_REQUEST_RESOLUTION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CustRequestTypeId)
                .HasColumnName("CUST_REQUEST_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.CustRequestType)
                .WithMany(p => p.CustRequestResolutions)
                .HasForeignKey(d => d.CustRequestTypeId)
                .HasConstraintName("CUST_RQRS_TYPE");
        });

        modelBuilder.Entity<CustRequestStatu>(entity =>
        {
            entity.HasKey(e => e.CustRequestStatusId)
                .HasName("PRIMARY");

            entity.ToTable("CUST_REQUEST_STATUS");

            entity.HasIndex(e => e.ChangedByUserLoginId)
                .HasName("CUST_RQSTTS_USRLGN");


            entity.HasIndex(e => e.CustRequestId)
                .HasName("CUST_REQ_STRQ");


            entity.HasIndex(e => e.StatusId)
                .HasName("CUST_REQST_STTS");

            entity.Property(e => e.CustRequestStatusId)
                .HasColumnName("CUST_REQUEST_STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ChangedByUserLoginId)
                .HasColumnName("CHANGE_BY_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CustRequestId)
                .HasColumnName("CUST_REQUEST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CustRequestItemSeqId)
                .HasColumnName("CUST_REQUEST_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.StatusDate)
                .HasColumnName("STATUS_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ChangeByUserLogin)
                .WithMany(p => p.CustRequestStatus)
                .HasForeignKey(d => d.ChangedByUserLoginId)
                .HasConstraintName("CUST_RQSTTS_USRLGN");

            entity.HasOne(d => d.CustRequest)
                .WithMany(p => p.CustRequestStatus)
                .HasForeignKey(d => d.CustRequestId)
                .HasConstraintName("CUST_REQ_STRQ");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.CustRequestStatus)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("CUST_REQST_STTS");
        });

        modelBuilder.Entity<CustRequestType>(entity =>
        {
            entity.ToTable("CUST_REQUEST_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("CUST_REQ_TYPE_PAR");

            entity.HasIndex(e => e.PartyId)
                .HasName("CUST_PTY_PARTY");

            entity.Property(e => e.CustRequestTypeId)
                .HasColumnName("CUST_REQUEST_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("CUST_REQ_TYPE_PAR");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.CustRequestTypes)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("CUST_PTY_PARTY");
        });

        modelBuilder.Entity<CustRequestTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.CustRequestTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("CUST_REQUEST_TYPE_ATTR");


            entity.HasIndex(e => e.CustRequestTypeId)
                .HasName("CUST_REQ_TYPE_ATTR");


            entity.Property(e => e.CustRequestTypeId)
                .HasColumnName("CUST_REQUEST_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.CustRequestType)
                .WithMany(p => p.CustRequestTypeAttrs)
                .HasForeignKey(d => d.CustRequestTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CUST_REQ_TYPE_ATTR");
        });

        modelBuilder.Entity<CustRequestWorkEffort>(entity =>
        {
            entity.HasKey(e => new { e.CustRequestId, e.WorkEffortId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("CUST_REQUEST_WORK_EFFORT");


            entity.HasIndex(e => e.CustRequestId)
                .HasName("CSTREQ_WF_CREQ");


            entity.HasIndex(e => e.WorkEffortId)
                .HasName("CSTREQ_WF_WEFF");

            entity.Property(e => e.CustRequestId)
                .HasColumnName("CUST_REQUEST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.CustRequest)
                .WithMany(p => p.CustRequestWorkEfforts)
                .HasForeignKey(d => d.CustRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CSTREQ_WF_CREQ");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.CustRequestWorkEfforts)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CSTREQ_WF_WEFF");
        });

        modelBuilder.Entity<CustomMethod>(entity =>
        {
            entity.ToTable("CUSTOM_METHOD");


            entity.HasIndex(e => e.CustomMethodTypeId)
                .HasName("CME_TO_TYPE");


            entity.Property(e => e.CustomMethodId)
                .HasColumnName("CUSTOM_METHOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CustomMethodName)
                .HasColumnName("CUSTOM_METHOD_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CustomMethodTypeId)
                .HasColumnName("CUSTOM_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.CustomMethodType)
                .WithMany(p => p.CustomMethods)
                .HasForeignKey(d => d.CustomMethodTypeId)
                .HasConstraintName("CME_TO_TYPE");
        });

        modelBuilder.Entity<CustomMethodType>(entity =>
        {
            entity.ToTable("CUSTOM_METHOD_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("CME_TYPE_PARENT");

            entity.Property(e => e.CustomMethodTypeId)
                .HasColumnName("CUSTOM_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("CME_TYPE_PARENT");
        });

        modelBuilder.Entity<CustomScreen>(entity =>
        {
            entity.ToTable("CUSTOM_SCREEN");


            entity.HasIndex(e => e.CustomScreenTypeId)
                .HasName("CSCR_TO_TYPE");


            entity.Property(e => e.CustomScreenId)
                .HasColumnName("CUSTOM_SCREEN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CustomScreenLocation)
                .HasColumnName("CUSTOM_SCREEN_LOCATION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CustomScreenName)
                .HasColumnName("CUSTOM_SCREEN_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CustomScreenTypeId)
                .HasColumnName("CUSTOM_SCREEN_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.CustomScreenType)
                .WithMany(p => p.CustomScreens)
                .HasForeignKey(d => d.CustomScreenTypeId)
                .HasConstraintName("CSCR_TO_TYPE");
        });

        modelBuilder.Entity<CustomScreenType>(entity =>
        {
            entity.ToTable("CUSTOM_SCREEN_TYPE");


            entity.Property(e => e.CustomScreenTypeId)
                .HasColumnName("CUSTOM_SCREEN_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");
        });

        modelBuilder.Entity<CustomTimePeriod>(entity =>
        {
            entity.ToTable("CUSTOM_TIME_PERIOD");


            entity.HasIndex(e => e.OrganizationPartyId)
                .HasName("ORG_PRD_PARTY");

            entity.HasIndex(e => e.ParentPeriodId)
                .HasName("ORG_PRD_PARPER");

            entity.HasIndex(e => e.PeriodTypeId)
                .HasName("ORG_PRD_PERTYP");

            entity.Property(e => e.CustomTimePeriodId)
                .HasColumnName("CUSTOM_TIME_PERIOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.IsClosed)
                .HasColumnName("IS_CLOSED")
                .HasColumnType("char(1)");


            entity.Property(e => e.OrganizationPartyId)
                .HasColumnName("ORGANIZATION_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ParentPeriodId)
                .HasColumnName("PARENT_PERIOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PeriodName)
                .HasColumnName("PERIOD_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.PeriodNum)
                .HasColumnName("PERIOD_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.PeriodTypeId)
                .HasColumnName("PERIOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.OrganizationParty)
                .WithMany(p => p.CustomTimePeriods)
                .HasForeignKey(d => d.OrganizationPartyId)
                .HasConstraintName("ORG_PRD_PARTY");

            entity.HasOne(d => d.ParentPeriod)
                .WithMany(p => p.InverseParentPeriod)
                .HasForeignKey(d => d.ParentPeriodId)
                .HasConstraintName("ORG_PRD_PARPER");

            entity.HasOne(d => d.PeriodType)
                .WithMany(p => p.CustomTimePeriods)
                .HasForeignKey(d => d.PeriodTypeId)
                .HasConstraintName("ORG_PRD_PERTYP");
        });

        modelBuilder.Entity<DataCategory>(entity =>
        {
            entity.ToTable("DATA_CATEGORY");


            entity.HasIndex(e => e.ParentCategoryId)
                .HasName("DATA_CAT_PARENT");

            entity.Property(e => e.DataCategoryId)
                .HasColumnName("DATA_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CategoryName)
                .HasColumnName("CATEGORY_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ParentCategoryId)
                .HasColumnName("PARENT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentCategory)
                .WithMany(p => p.InverseParentCategory)
                .HasForeignKey(d => d.ParentCategoryId)
                .HasConstraintName("DATA_CAT_PARENT");
        });

        modelBuilder.Entity<DataResource>(entity =>
        {
            entity.ToTable("DATA_RESOURCE");

            entity.HasIndex(e => e.CharacterSetId)
                .HasName("DATA_REC_CHST");

            entity.HasIndex(e => e.CreatedByUserLogin)
                .HasName("DATA_REC_CB_ULGN");


            entity.HasIndex(e => e.DataCategoryId)
                .HasName("DATA_REC_TO_CAT");

            entity.HasIndex(e => e.DataResourceTypeId)
                .HasName("DATA_REC_TO_TYPE");

            entity.HasIndex(e => e.DataSourceId)
                .HasName("DATA_REC_DTSRC");

            entity.HasIndex(e => e.DataTemplateTypeId)
                .HasName("DATA_REC_TO_TTP");

            entity.HasIndex(e => e.LastModifiedByUserLogin)
                .HasName("DATA_REC_LMB_ULGN");


            entity.HasIndex(e => e.StatusId)
                .HasName("DTRSRC_STATUS");

            entity.HasIndex(e => e.SurveyId)
                .HasName("DATA_REC_SURVEY");

            entity.HasIndex(e => e.SurveyResponseId)
                .HasName("DATA_REC_SVRSP");

            entity.Property(e => e.DataResourceId)
                .HasColumnName("DATA_RESOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CharacterSetId)
                .HasColumnName("CHARACTER_SET_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedDate)
                .HasColumnName("CREATED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DataCategoryId)
                .HasColumnName("DATA_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DataResourceName)
                .HasColumnName("DATA_RESOURCE_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.DataResourceTypeId)
                .HasColumnName("DATA_RESOURCE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DataSourceId)
                .HasColumnName("DATA_SOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DataTemplateTypeId)
                .HasColumnName("DATA_TEMPLATE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.IsPublic)
                .HasColumnName("IS_PUBLIC")
                .HasColumnType("char(1)");

            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.LastModifiedDate)
                .HasColumnName("LAST_MODIFIED_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.LocaleString)
                .HasColumnName("LOCALE_STRING")
                .HasColumnType("varchar(10)");

            entity.Property(e => e.MimeTypeId)
                .HasColumnName("MIME_TYPE_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.ObjectInfo)
                .HasColumnName("OBJECT_INFO")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.RelatedDetailId)
                .HasColumnName("RELATED_DETAIL_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SurveyId)
                .HasColumnName("SURVEY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SurveyResponseId)
                .HasColumnName("SURVEY_RESPONSE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.CharacterSet)
                .WithMany(p => p.DataResources)
                .HasForeignKey(d => d.CharacterSetId)
                .HasConstraintName("DATA_REC_CHST");

            entity.HasOne(d => d.CreatedByUserLoginNavigation)
                .WithMany(p => p.DataResourceCreatedByUserLoginNavigations)
                .HasForeignKey(d => d.CreatedByUserLogin)
                .HasConstraintName("DATA_REC_CB_ULGN");

            entity.HasOne(d => d.DataCategory)
                .WithMany(p => p.DataResources)
                .HasForeignKey(d => d.DataCategoryId)
                .HasConstraintName("DATA_REC_TO_CAT");

            entity.HasOne(d => d.DataResourceType)
                .WithMany(p => p.DataResources)
                .HasForeignKey(d => d.DataResourceTypeId)
                .HasConstraintName("DATA_REC_TO_TYPE");

            entity.HasOne(d => d.DataSource)
                .WithMany(p => p.DataResources)
                .HasForeignKey(d => d.DataSourceId)
                .HasConstraintName("DATA_REC_DTSRC");

            entity.HasOne(d => d.DataTemplateType)
                .WithMany(p => p.DataResources)
                .HasForeignKey(d => d.DataTemplateTypeId)
                .HasConstraintName("DATA_REC_TO_TTP");

            entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                .WithMany(p => p.DataResourceLastModifiedByUserLoginNavigations)
                .HasForeignKey(d => d.LastModifiedByUserLogin)
                .HasConstraintName("DATA_REC_LMB_ULGN");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.DataResources)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("DTRSRC_STATUS");

            entity.HasOne(d => d.Survey)
                .WithMany(p => p.DataResources)
                .HasForeignKey(d => d.SurveyId)
                .HasConstraintName("DATA_REC_SURVEY");

            entity.HasOne(d => d.SurveyResponse)
                .WithMany(p => p.DataResources)
                .HasForeignKey(d => d.SurveyResponseId)
                .HasConstraintName("DATA_REC_SVRSP");
        });

        modelBuilder.Entity<DataResourceAttribute>(entity =>
        {
            entity.HasKey(e => new { e.DataResourceId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("DATA_RESOURCE_ATTRIBUTE");


            entity.HasIndex(e => e.DataResourceId)
                .HasName("DATA_REC_ATTR");


            entity.Property(e => e.DataResourceId)
                .HasColumnName("DATA_RESOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.DataResource)
                .WithMany(p => p.DataResourceAttributes)
                .HasForeignKey(d => d.DataResourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DATA_REC_ATTR");
        });

        modelBuilder.Entity<DataResourceMetaData>(entity =>
        {
            entity.HasKey(e => new { e.DataResourceId, e.MetaDataPredicateId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("DATA_RESOURCE_META_DATA");


            entity.HasIndex(e => e.DataResourceId)
                .HasName("DATA_MD_DATREC");

            entity.HasIndex(e => e.DataSourceId)
                .HasName("DATA_MD_DTSRC");


            entity.HasIndex(e => e.MetaDataPredicateId)
                .HasName("DATA_MD_DMDPRD");

            entity.Property(e => e.DataResourceId)
                .HasColumnName("DATA_RESOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.MetaDataPredicateId)
                .HasColumnName("META_DATA_PREDICATE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DataSourceId)
                .HasColumnName("DATA_SOURCE_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.MetaDataValue)
                .HasColumnName("META_DATA_VALUE")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.DataResource)
                .WithMany(p => p.DataResourceMetaDatas)
                .HasForeignKey(d => d.DataResourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DATA_MD_DATREC");

            entity.HasOne(d => d.DataSource)
                .WithMany(p => p.DataResourceMetaDatas)
                .HasForeignKey(d => d.DataSourceId)
                .HasConstraintName("DATA_MD_DTSRC");

            entity.HasOne(d => d.MetaDataPredicate)
                .WithMany(p => p.DataResourceMetaDatas)
                .HasForeignKey(d => d.MetaDataPredicateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DATA_MD_DMDPRD");
        });

        modelBuilder.Entity<DataResourcePurpose>(entity =>
        {
            entity.HasKey(e => new { e.DataResourceId, e.ContentPurposeTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("DATA_RESOURCE_PURPOSE");

            entity.HasIndex(e => e.ContentPurposeTypeId)
                .HasName("DATA_REC_PRP_TYPE");


            entity.HasIndex(e => e.DataResourceId)
                .HasName("DATA_REC_PRP");


            entity.Property(e => e.DataResourceId)
                .HasColumnName("DATA_RESOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContentPurposeTypeId)
                .HasColumnName("CONTENT_PURPOSE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ContentPurposeType)
                .WithMany(p => p.DataResourcePurposes)
                .HasForeignKey(d => d.ContentPurposeTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DATA_REC_PRP_TYPE");

            entity.HasOne(d => d.DataResource)
                .WithMany(p => p.DataResourcePurposes)
                .HasForeignKey(d => d.DataResourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DATA_REC_PRP");
        });

        modelBuilder.Entity<DataResourceRole>(entity =>
        {
            entity.HasKey(e => new { e.DataResourceId, e.PartyId, e.RoleTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("DATA_RESOURCE_ROLE");


            entity.HasIndex(e => e.DataResourceId)
                .HasName("DATARECRL_DATREC");


            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("DATARECRL_PTRL");

            entity.Property(e => e.DataResourceId)
                .HasColumnName("DATA_RESOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.DataResource)
                .WithMany(p => p.DataResourceRoles)
                .HasForeignKey(d => d.DataResourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DATARECRL_DATREC");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.DataResourceRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DATARECRL_PTRL");
        });

        modelBuilder.Entity<DataResourceType>(entity =>
        {
            entity.ToTable("DATA_RESOURCE_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("DATA_OBTYPE_PARENT");

            entity.Property(e => e.DataResourceTypeId)
                .HasColumnName("DATA_RESOURCE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("DATA_OBTYPE_PARENT");
        });

        modelBuilder.Entity<DataResourceTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.DataResourceTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("DATA_RESOURCE_TYPE_ATTR");


            entity.HasIndex(e => e.DataResourceTypeId)
                .HasName("DATA_OBTYPE_ATTR");


            entity.Property(e => e.DataResourceTypeId)
                .HasColumnName("DATA_RESOURCE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.DataResourceType)
                .WithMany(p => p.DataResourceTypeAttrs)
                .HasForeignKey(d => d.DataResourceTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DATA_OBTYPE_ATTR");
        });

        modelBuilder.Entity<DataSource>(entity =>
        {
            entity.ToTable("DATA_SOURCE");


            entity.HasIndex(e => e.DataSourceTypeId)
                .HasName("DATA_SRC_TYP");


            entity.Property(e => e.DataSourceId)
                .HasColumnName("DATA_SOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DataSourceTypeId)
                .HasColumnName("DATA_SOURCE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.DataSourceType)
                .WithMany(p => p.DataSources)
                .HasForeignKey(d => d.DataSourceTypeId)
                .HasConstraintName("DATA_SRC_TYP");
        });

        modelBuilder.Entity<DataSourceType>(entity =>
        {
            entity.ToTable("DATA_SOURCE_TYPE");


            entity.Property(e => e.DataSourceTypeId)
                .HasColumnName("DATA_SOURCE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<DataTemplateType>(entity =>
        {
            entity.ToTable("DATA_TEMPLATE_TYPE");


            entity.Property(e => e.DataTemplateTypeId)
                .HasColumnName("DATA_TEMPLATE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.Extension)
                .HasColumnName("EXTENSION")
                .HasColumnType("varchar(60)");
        });

        modelBuilder.Entity<Deduction>(entity =>
        {
            entity.ToTable("DEDUCTION");


            entity.HasIndex(e => e.DeductionTypeId)
                .HasName("DEDCTN_DEDTYP");


            entity.HasIndex(e => e.PaymentId)
                .HasName("DEDCTN_PMNT");

            entity.Property(e => e.DeductionId)
                .HasColumnName("DEDUCTION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DeductionTypeId)
                .HasColumnName("DEDUCTION_TYPE_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.PaymentId)
                .HasColumnName("PAYMENT_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.DeductionType)
                .WithMany(p => p.Deductions)
                .HasForeignKey(d => d.DeductionTypeId)
                .HasConstraintName("DEDCTN_DEDTYP");

            entity.HasOne(d => d.Payment)
                .WithMany(p => p.Deductions)
                .HasForeignKey(d => d.PaymentId)
                .HasConstraintName("DEDCTN_PMNT");
        });

        modelBuilder.Entity<DeductionType>(entity =>
        {
            entity.ToTable("DEDUCTION_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("DEDUCT_TYP_PAR");

            entity.Property(e => e.DeductionTypeId)
                .HasColumnName("DEDUCTION_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("DEDUCT_TYP_PAR");
        });

        modelBuilder.Entity<Deliverable>(entity =>
        {
            entity.ToTable("DELIVERABLE");


            entity.HasIndex(e => e.DeliverableTypeId)
                .HasName("DELIVERABLE_DLTYP");


            entity.Property(e => e.DeliverableId)
                .HasColumnName("DELIVERABLE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DeliverableName)
                .HasColumnName("DELIVERABLE_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.DeliverableTypeId)
                .HasColumnName("DELIVERABLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.DeliverableType)
                .WithMany(p => p.Deliverables)
                .HasForeignKey(d => d.DeliverableTypeId)
                .HasConstraintName("DELIVERABLE_DLTYP");
        });

        modelBuilder.Entity<DeliverableType>(entity =>
        {
            entity.ToTable("DELIVERABLE_TYPE");


            entity.Property(e => e.DeliverableTypeId)
                .HasColumnName("DELIVERABLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<Delivery>(entity =>
        {
            entity.ToTable("DELIVERY");


            entity.HasIndex(e => e.DestFacilityId)
                .HasName("DELIV_DFAC");

            entity.HasIndex(e => e.FixedAssetId)
                .HasName("DELIV_FXAS");


            entity.HasIndex(e => e.OriginFacilityId)
                .HasName("DELIV_OFAC");

            entity.Property(e => e.DeliveryId)
                .HasColumnName("DELIVERY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ActualArrivalDate)
                .HasColumnName("ACTUAL_ARRIVAL_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ActualStartDate)
                .HasColumnName("ACTUAL_START_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DestFacilityId)
                .HasColumnName("DEST_FACILITY_ID");

            entity.Property(e => e.EndMileage)
                .HasColumnName("END_MILEAGE")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.EstimatedArrivalDate)
                .HasColumnName("ESTIMATED_ARRIVAL_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.EstimatedStartDate)
                .HasColumnName("ESTIMATED_START_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.FixedAssetId)
                .HasColumnName("FIXED_ASSET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FuelUsed)
                .HasColumnName("FUEL_USED")
                .HasColumnType("decimal(18,6)");


            entity.Property(e => e.OriginFacilityId)
                .HasColumnName("ORIGIN_FACILITY_ID");

            entity.Property(e => e.StartMileage)
                .HasColumnName("START_MILEAGE")
                .HasColumnType("decimal(18,6)");

            entity.HasOne(d => d.DestFacility)
                .WithMany(p => p.DeliveryDestFacilities)
                .HasForeignKey(d => d.DestFacilityId)
                .HasConstraintName("DELIV_DFAC");

            entity.HasOne(d => d.FixedAsset)
                .WithMany(p => p.Deliveries)
                .HasForeignKey(d => d.FixedAssetId)
                .HasConstraintName("DELIV_FXAS");

            entity.HasOne(d => d.OriginFacility)
                .WithMany(p => p.DeliveryOriginFacilities)
                .HasForeignKey(d => d.OriginFacilityId)
                .HasConstraintName("DELIV_OFAC");
        });

        modelBuilder.Entity<DesiredFeature>(entity =>
        {
            entity.HasKey(e => new { e.DesiredFeatureId, e.RequirementId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("DESIRED_FEATURE");


            entity.HasIndex(e => e.ProductFeatureId)
                .HasName("DES_FEAT_PFEAT");

            entity.HasIndex(e => e.RequirementId)
                .HasName("DES_FEAT_REQ");

            entity.Property(e => e.DesiredFeatureId)
                .HasColumnName("DESIRED_FEATURE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RequirementId)
                .HasColumnName("REQUIREMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.OptionalInd)
                .HasColumnName("OPTIONAL_IND")
                .HasColumnType("char(1)");

            entity.Property(e => e.ProductFeatureId)
                .HasColumnName("PRODUCT_FEATURE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ProductFeature)
                .WithMany(p => p.DesiredFeatures)
                .HasForeignKey(d => d.ProductFeatureId)
                .HasConstraintName("DES_FEAT_PFEAT");

            entity.HasOne(d => d.Requirement)
                .WithMany(p => p.DesiredFeatures)
                .HasForeignKey(d => d.RequirementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DES_FEAT_REQ");
        });

        modelBuilder.Entity<Document>(entity =>
        {
            entity.ToTable("DOCUMENT");


            entity.HasIndex(e => e.DocumentTypeId)
                .HasName("DOCUMENT_TO_TYPE");


            entity.Property(e => e.DocumentId)
                .HasColumnName("DOCUMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DateCreated)
                .HasColumnName("DATE_CREATED")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.DocumentLocation)
                .HasColumnName("DOCUMENT_LOCATION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.DocumentText)
                .HasColumnName("DOCUMENT_TEXT")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.DocumentTypeId)
                .HasColumnName("DOCUMENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ImageData).HasColumnName("IMAGE_DATA");


            entity.HasOne(d => d.DocumentType)
                .WithMany(p => p.Documents)
                .HasForeignKey(d => d.DocumentTypeId)
                .HasConstraintName("DOCUMENT_TO_TYPE");
        });

        modelBuilder.Entity<DocumentAttribute>(entity =>
        {
            entity.HasKey(e => new { e.DocumentId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("DOCUMENT_ATTRIBUTE");


            entity.HasIndex(e => e.DocumentId)
                .HasName("DOCUMENT_ATTR");


            entity.Property(e => e.DocumentId)
                .HasColumnName("DOCUMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Document)
                .WithMany(p => p.DocumentAttributes)
                .HasForeignKey(d => d.DocumentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DOCUMENT_ATTR");
        });

        modelBuilder.Entity<DocumentType>(entity =>
        {
            entity.ToTable("DOCUMENT_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("DOC_TYPE_PARENT");

            entity.Property(e => e.DocumentTypeId)
                .HasColumnName("DOCUMENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("DOC_TYPE_PARENT");
        });

        modelBuilder.Entity<DocumentTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.DocumentTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("DOCUMENT_TYPE_ATTR");


            entity.HasIndex(e => e.DocumentTypeId)
                .HasName("DOC_TYPE_ATTR");


            entity.Property(e => e.DocumentTypeId)
                .HasColumnName("DOCUMENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.DocumentType)
                .WithMany(p => p.DocumentTypeAttrs)
                .HasForeignKey(d => d.DocumentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DOC_TYPE_ATTR");
        });

        modelBuilder.Entity<EbayConfig>(entity =>
        {
            entity.HasKey(e => e.ProductStoreId)
                .HasName("PRIMARY");

            entity.ToTable("EBAY_CONFIG");


            entity.HasIndex(e => e.ProductStoreId)
                .HasName("EBY_PROD_STORE");

            entity.HasIndex(e => e.WebSiteId)
                .HasName("EBY_WEBSITE");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AppId)
                .HasColumnName("APP_ID")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CertId)
                .HasColumnName("CERT_ID")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CompatibilityLevel)
                .HasColumnName("COMPATIBILITY_LEVEL")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CustomXml)
                .HasColumnName("CUSTOM_XML")
                .HasColumnType("longtext");

            entity.Property(e => e.DevId)
                .HasColumnName("DEV_ID")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.SiteId)
                .HasColumnName("SITE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Token)
                .HasColumnName("TOKEN")
                .HasColumnType("longtext");

            entity.Property(e => e.WebSiteId)
                .HasColumnName("WEB_SITE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.XmlGatewayUri)
                .HasColumnName("XML_GATEWAY_URI")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.ProductStore)
                .WithOne(p => p.EbayConfig)
                .HasForeignKey<EbayConfig>(d => d.ProductStoreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EBY_PROD_STORE");

            entity.HasOne(d => d.WebSite)
                .WithMany(p => p.EbayConfigs)
                .HasForeignKey(d => d.WebSiteId)
                .HasConstraintName("EBY_WEBSITE");
        });

        modelBuilder.Entity<EbayShippingMethod>(entity =>
        {
            entity.HasKey(e => new { e.ShipmentMethodName, e.ProductStoreId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("EBAY_SHIPPING_METHOD");

            entity.HasIndex(e => e.CarrierPartyId)
                .HasName("EBYSM_CRIER_PRTY");


            entity.HasIndex(e => e.MethodTypeEnumId)
                .HasName("EBYSM_TPE_ENUM");

            entity.HasIndex(e => e.ProductStoreId)
                .HasName("EBYSM_PRD_STRE");

            entity.HasIndex(e => e.ShipmentMethodTypeId)
                .HasName("EBYSM_SHMETH_TPE");

            entity.Property(e => e.ShipmentMethodName)
                .HasColumnName("SHIPMENT_METHOD_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AdditionalAmount)
                .HasColumnName("ADDITIONAL_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.AdditionalPercent)
                .HasColumnName("ADDITIONAL_PERCENT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.CarrierPartyId)
                .HasColumnName("CARRIER_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.MethodTypeEnumId)
                .HasColumnName("METHOD_TYPE_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentMethodTypeId)
                .HasColumnName("SHIPMENT_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.CarrierParty)
                .WithMany(p => p.EbayShippingMethods)
                .HasForeignKey(d => d.CarrierPartyId)
                .HasConstraintName("EBYSM_CRIER_PRTY");

            entity.HasOne(d => d.MethodTypeEnum)
                .WithMany(p => p.EbayShippingMethods)
                .HasForeignKey(d => d.MethodTypeEnumId)
                .HasConstraintName("EBYSM_TPE_ENUM");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.EbayShippingMethods)
                .HasForeignKey(d => d.ProductStoreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EBYSM_PRD_STRE");

            entity.HasOne(d => d.ShipmentMethodType)
                .WithMany(p => p.EbayShippingMethods)
                .HasForeignKey(d => d.ShipmentMethodTypeId)
                .HasConstraintName("EBYSM_SHMETH_TPE");
        });

        modelBuilder.Entity<EftAccount>(entity =>
        {
            entity.HasKey(e => e.PaymentMethodId)
                .HasName("PRIMARY");

            entity.ToTable("EFT_ACCOUNT");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("EFTACCT_CMECH");


            entity.HasIndex(e => e.PaymentMethodId)
                .HasName("EFTACCT_PMETH");

            entity.Property(e => e.PaymentMethodId)
                .HasColumnName("PAYMENT_METHOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AccountNumber)
                .HasColumnName("ACCOUNT_NUMBER")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AccountType)
                .HasColumnName("ACCOUNT_TYPE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.BankName)
                .HasColumnName("BANK_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.CompanyNameOnAccount)
                .HasColumnName("COMPANY_NAME_ON_ACCOUNT")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.NameOnAccount)
                .HasColumnName("NAME_ON_ACCOUNT")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.RoutingNumber)
                .HasColumnName("ROUTING_NUMBER")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.YearsAtBank)
                .HasColumnName("YEARS_AT_BANK")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.EftAccounts)
                .HasForeignKey(d => d.ContactMechId)
                .HasConstraintName("EFTACCT_CMECH");

            entity.HasOne(d => d.ContactMechNavigation)
                .WithMany(p => p.EftAccounts)
                .HasForeignKey(d => d.ContactMechId)
                .HasConstraintName("EFTACCT_PADDR");

            entity.HasOne(d => d.PaymentMethod)
                .WithOne(p => p.EftAccount)
                .HasForeignKey<EftAccount>(d => d.PaymentMethodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EFTACCT_PMETH");
        });

        modelBuilder.Entity<ElectronicText>(entity =>
        {
            entity.HasKey(e => e.DataResourceId)
                .HasName("PRIMARY");

            entity.ToTable("ELECTRONIC_TEXT");


            entity.HasIndex(e => e.DataResourceId)
                .HasName("DATA_REC_TEXT");


            entity.Property(e => e.DataResourceId)
                .HasColumnName("DATA_RESOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.TextData)
                .HasColumnName("TEXT_DATA")
                .HasColumnType("longtext");

            entity.HasOne(d => d.DataResource)
                .WithOne(p => p.ElectronicText)
                .HasForeignKey<ElectronicText>(d => d.DataResourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DATA_REC_TEXT");
        });

        modelBuilder.Entity<EmailAddressVerification>(entity =>
        {
            entity.HasKey(e => e.EmailAddress)
                .HasName("PRIMARY");

            entity.ToTable("EMAIL_ADDRESS_VERIFICATION");


            entity.HasIndex(e => e.VerifyHash)
                .HasName("EMAIL_VERIFY_HASH")
                .IsUnique();

            entity.Property(e => e.EmailAddress)
                .HasColumnName("EMAIL_ADDRESS")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ExpireDate)
                .HasColumnName("EXPIRE_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.VerifyHash)
                .HasColumnName("VERIFY_HASH")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<EmailTemplateSetting>(entity =>
        {
            entity.ToTable("EMAIL_TEMPLATE_SETTING");


            entity.HasIndex(e => e.EmailType)
                .HasName("EMAILSET_ENUM");


            entity.Property(e => e.EmailTemplateSettingId)
                .HasColumnName("EMAIL_TEMPLATE_SETTING_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BccAddress)
                .HasColumnName("BCC_ADDRESS")
                .HasColumnType("varchar(320)");

            entity.Property(e => e.BodyScreenLocation)
                .HasColumnName("BODY_SCREEN_LOCATION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CcAddress)
                .HasColumnName("CC_ADDRESS")
                .HasColumnType("varchar(320)");

            entity.Property(e => e.ContentType)
                .HasColumnName("CONTENT_TYPE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.EmailType)
                .HasColumnName("EMAIL_TYPE")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromAddress)
                .HasColumnName("FROM_ADDRESS")
                .HasColumnType("varchar(320)");


            entity.Property(e => e.Subject)
                .HasColumnName("SUBJECT")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.XslfoAttachScreenLocation)
                .HasColumnName("XSLFO_ATTACH_SCREEN_LOCATION")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.EmailTypeNavigation)
                .WithMany(p => p.EmailTemplateSettings)
                .HasForeignKey(d => d.EmailType)
                .HasConstraintName("EMAILSET_ENUM");
        });

        modelBuilder.Entity<EmplLeave>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.LeaveTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("EMPL_LEAVE");

            entity.HasIndex(e => e.ApproverPartyId)
                .HasName("EMPL_LEAVE_APPR");


            entity.HasIndex(e => e.EmplLeaveReasonTypeId)
                .HasName("EMP_LEAV_REAS_ELTP");


            entity.HasIndex(e => e.LeaveStatus)
                .HasName("EMPL_LEAVE_STS");

            entity.HasIndex(e => e.LeaveTypeId)
                .HasName("EMPL_LEAVE_ELETP");

            entity.HasIndex(e => e.PartyId)
                .HasName("EMPL_LEAVE_PRTY");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.LeaveTypeId)
                .HasColumnName("LEAVE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ApproverPartyId)
                .HasColumnName("APPROVER_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.EmplLeaveReasonTypeId)
                .HasColumnName("EMPL_LEAVE_REASON_TYPE_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.LeaveStatus)
                .HasColumnName("LEAVE_STATUS")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ApproverParty)
                .WithMany(p => p.EmplLeaveApproverParties)
                .HasForeignKey(d => d.ApproverPartyId)
                .HasConstraintName("EMPL_LEAVE_APPR");

            entity.HasOne(d => d.EmplLeaveReasonType)
                .WithMany(p => p.EmplLeaves)
                .HasForeignKey(d => d.EmplLeaveReasonTypeId)
                .HasConstraintName("EMP_LEAV_REAS_ELTP");

            entity.HasOne(d => d.LeaveStatusNavigation)
                .WithMany(p => p.EmplLeaves)
                .HasForeignKey(d => d.LeaveStatus)
                .HasConstraintName("EMPL_LEAVE_STS");

            entity.HasOne(d => d.LeaveType)
                .WithMany(p => p.EmplLeaves)
                .HasForeignKey(d => d.LeaveTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EMPL_LEAVE_ELETP");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.EmplLeaveParties)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EMPL_LEAVE_PRTY");
        });

        modelBuilder.Entity<EmplLeaveReasonType>(entity =>
        {
            entity.ToTable("EMPL_LEAVE_REASON_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("EMPL_REASON_TPAR");

            entity.Property(e => e.EmplLeaveReasonTypeId)
                .HasColumnName("EMPL_LEAVE_REASON_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("EMPL_REASON_TPAR");
        });

        modelBuilder.Entity<EmplLeaveType>(entity =>
        {
            entity.HasKey(e => e.LeaveTypeId)
                .HasName("PRIMARY");

            entity.ToTable("EMPL_LEAVE_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("EMPL_LEAVE_TPAR");

            entity.Property(e => e.LeaveTypeId)
                .HasColumnName("LEAVE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("EMPL_LEAVE_TPAR");
        });

        modelBuilder.Entity<EmplPosition>(entity =>
        {
            entity.ToTable("EMPL_POSITION");


            entity.HasIndex(e => e.PartyId)
                .HasName("EMPL_POS_PRTY");

            entity.HasIndex(e => e.StatusId)
                .HasName("EMPL_POS_STTS");

            entity.Property(e => e.EmplPositionId)
                .HasColumnName("EMPL_POSITION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ActualFromDate)
                .HasColumnName("ACTUAL_FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ActualThruDate)
                .HasColumnName("ACTUAL_THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.BudgetId)
                .HasColumnName("BUDGET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BudgetItemSeqId)
                .HasColumnName("BUDGET_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.EmplPositionTypeId)
                .HasColumnName("EMPL_POSITION_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.EstimatedFromDate)
                .HasColumnName("ESTIMATED_FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.EstimatedThruDate)
                .HasColumnName("ESTIMATED_THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ExemptFlag)
                .HasColumnName("EXEMPT_FLAG")
                .HasColumnType("char(1)");

            entity.Property(e => e.FulltimeFlag)
                .HasColumnName("FULLTIME_FLAG")
                .HasColumnType("char(1)");


            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SalaryFlag)
                .HasColumnName("SALARY_FLAG")
                .HasColumnType("char(1)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TemporaryFlag)
                .HasColumnName("TEMPORARY_FLAG")
                .HasColumnType("char(1)");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.EmplPositions)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("EMPL_POS_PRTY");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.EmplPositions)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("EMPL_POS_STTS");
        });

        modelBuilder.Entity<EmplPositionClassType>(entity =>
        {
            entity.ToTable("EMPL_POSITION_CLASS_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("EMPL_CLS_TYP_PAR");

            entity.Property(e => e.EmplPositionClassTypeId)
                .HasColumnName("EMPL_POSITION_CLASS_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("EMPL_CLS_TYP_PAR");
        });

        modelBuilder.Entity<EmplPositionFulfillment>(entity =>
        {
            entity.HasKey(e => new { e.EmplPositionId, e.PartyId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("EMPL_POSITION_FULFILLMENT");


            entity.HasIndex(e => e.EmplPositionId)
                .HasName("EMPL_PSFLMT_EMPS");


            entity.HasIndex(e => e.PartyId)
                .HasName("EMPL_PSFLMT_PRTY");

            entity.Property(e => e.EmplPositionId)
                .HasColumnName("EMPL_POSITION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.EmplPosition)
                .WithMany(p => p.EmplPositionFulfillments)
                .HasForeignKey(d => d.EmplPositionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EMPL_PSFLMT_EMPS");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.EmplPositionFulfillments)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EMPL_PSFLMT_PRTY");
        });

        modelBuilder.Entity<EmplPositionReportingStruct>(entity =>
        {
            entity.HasKey(e => new { e.EmplPositionIdReportingTo, e.EmplPositionIdManagedBy, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("EMPL_POSITION_REPORTING_STRUCT");


            entity.HasIndex(e => e.EmplPositionIdManagedBy)
                .HasName("EMPL_PSRPS_EMPSM");

            entity.HasIndex(e => e.EmplPositionIdReportingTo)
                .HasName("EMPL_PSRPS_EMPSR");


            entity.Property(e => e.EmplPositionIdReportingTo)
                .HasColumnName("EMPL_POSITION_ID_REPORTING_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.EmplPositionIdManagedBy)
                .HasColumnName("EMPL_POSITION_ID_MANAGED_BY")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PrimaryFlag)
                .HasColumnName("PRIMARY_FLAG")
                .HasColumnType("char(1)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.EmplPositionIdManagedByNavigation)
                .WithMany(p => p.EmplPositionReportingStructEmplPositionIdManagedByNavigations)
                .HasForeignKey(d => d.EmplPositionIdManagedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EMPL_PSRPS_EMPSM");

            entity.HasOne(d => d.EmplPositionIdReportingToNavigation)
                .WithMany(p => p.EmplPositionReportingStructEmplPositionIdReportingToNavigations)
                .HasForeignKey(d => d.EmplPositionIdReportingTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EMPL_PSRPS_EMPSR");
        });

        modelBuilder.Entity<EmplPositionResponsibility>(entity =>
        {
            entity.HasKey(e => new { e.EmplPositionId, e.ResponsibilityTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("EMPL_POSITION_RESPONSIBILITY");


            entity.HasIndex(e => e.EmplPositionId)
                .HasName("EMPL_PSRTY_EMPS");


            entity.HasIndex(e => e.ResponsibilityTypeId)
                .HasName("EMPL_PSRTY_RYTP");

            entity.Property(e => e.EmplPositionId)
                .HasColumnName("EMPL_POSITION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ResponsibilityTypeId)
                .HasColumnName("RESPONSIBILITY_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.EmplPosition)
                .WithMany(p => p.EmplPositionResponsibilities)
                .HasForeignKey(d => d.EmplPositionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EMPL_PSRTY_EMPS");

            entity.HasOne(d => d.ResponsibilityType)
                .WithMany(p => p.EmplPositionResponsibilities)
                .HasForeignKey(d => d.ResponsibilityTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EMPL_PSRTY_RYTP");
        });

        modelBuilder.Entity<EmplPositionType>(entity =>
        {
            entity.ToTable("EMPL_POSITION_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("EMPL_POSI_TYP_PAR");

            entity.Property(e => e.EmplPositionTypeId)
                .HasColumnName("EMPL_POSITION_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("EMPL_POSI_TYP_PAR");
        });

        modelBuilder.Entity<EmplPositionTypeClass>(entity =>
        {
            entity.HasKey(e => new { e.EmplPositionTypeId, e.EmplPositionClassTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("EMPL_POSITION_TYPE_CLASS");


            entity.HasIndex(e => e.EmplPositionClassTypeId)
                .HasName("EMPL_PSTPCS_EPCTP");

            entity.HasIndex(e => e.EmplPositionTypeId)
                .HasName("EMPL_PSTPCS_EPTP");


            entity.Property(e => e.EmplPositionTypeId)
                .HasColumnName("EMPL_POSITION_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.EmplPositionClassTypeId)
                .HasColumnName("EMPL_POSITION_CLASS_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.StandardHoursPerWeek).HasColumnName("STANDARD_HOURS_PER_WEEK");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.EmplPositionClassType)
                .WithMany(p => p.EmplPositionTypeClasses)
                .HasForeignKey(d => d.EmplPositionClassTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EMPL_PSTPCS_EPCTP");

            entity.HasOne(d => d.EmplPositionType)
                .WithMany(p => p.EmplPositionTypeClasses)
                .HasForeignKey(d => d.EmplPositionTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EMPL_PSTPCS_EPTP");
        });

        modelBuilder.Entity<EmplPositionTypeRateNew>(entity =>
        {
            entity.HasKey(e => new { e.EmplPositionTypeId, e.RateTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("EMPL_POSITION_TYPE_RATE_NEW");


            entity.HasIndex(e => e.EmplPositionTypeId)
                .HasName("EMPL_PTPRT_EPTP");


            entity.Property(e => e.EmplPositionTypeId)
                .HasColumnName("EMPL_POSITION_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RateTypeId)
                .HasColumnName("RATE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PayGradeId)
                .HasColumnName("PAY_GRADE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SalaryStepSeqId)
                .HasColumnName("SALARY_STEP_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.EmplPositionType)
                .WithMany(p => p.EmplPositionTypeRateNews)
                .HasForeignKey(d => d.EmplPositionTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EMPL_PTPRT_EPTP");
        });

        modelBuilder.Entity<Employment>(entity =>
        {
            entity.HasKey(e => new { e.RoleTypeIdFrom, e.RoleTypeIdTo, e.PartyIdFrom, e.PartyIdTo, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0 });

            entity.ToTable("EMPLOYMENT");


            entity.HasIndex(e => e.PartyIdFrom)
                .HasName("EMPLMNT_FPTY");

            entity.HasIndex(e => e.PartyIdTo)
                .HasName("EMPLMNT_TPTY");

            entity.HasIndex(e => new { e.PartyIdFrom, e.RoleTypeIdFrom })
                .HasName("EMPLMNT_FPTRL");

            entity.HasIndex(e => new { e.PartyIdTo, e.RoleTypeIdTo })
                .HasName("EMPLMNT_TPTRL");

            entity.Property(e => e.RoleTypeIdFrom)
                .HasColumnName("ROLE_TYPE_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeIdTo)
                .HasColumnName("ROLE_TYPE_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyIdFrom)
                .HasColumnName("PARTY_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyIdTo)
                .HasColumnName("PARTY_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.TerminationReasonId)
                .HasColumnName("TERMINATION_REASON_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TerminationTypeId)
                .HasColumnName("TERMINATION_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.PartyIdFromNavigation)
                .WithMany(p => p.EmploymentPartyIdFromNavigations)
                .HasForeignKey(d => d.PartyIdFrom)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EMPLMNT_FPTY");

            entity.HasOne(d => d.PartyIdToNavigation)
                .WithMany(p => p.EmploymentPartyIdToNavigations)
                .HasForeignKey(d => d.PartyIdTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EMPLMNT_TPTY");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.EmploymentPartyRoles)
                .HasForeignKey(d => new { d.PartyIdFrom, d.RoleTypeIdFrom })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EMPLMNT_FPTRL");

            entity.HasOne(d => d.PartyRoleNavigation)
                .WithMany(p => p.EmploymentPartyRoleNavigations)
                .HasForeignKey(d => new { d.PartyIdTo, d.RoleTypeIdTo })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EMPLMNT_TPTRL");
        });

        modelBuilder.Entity<EmploymentApp>(entity =>
        {
            entity.HasKey(e => e.ApplicationId)
                .HasName("PRIMARY");

            entity.ToTable("EMPLOYMENT_APP");

            entity.HasIndex(e => e.ApproverPartyId)
                .HasName("EMPLMNT_APP_APER");


            entity.HasIndex(e => e.JobRequisitionId)
                .HasName("EMPLMNT_APP_JBRQ");


            entity.Property(e => e.ApplicationId)
                .HasColumnName("APPLICATION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ApplicationDate)
                .HasColumnName("APPLICATION_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ApplyingPartyId)
                .HasColumnName("APPLYING_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ApproverPartyId)
                .HasColumnName("APPROVER_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.EmplPositionId)
                .HasColumnName("EMPL_POSITION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.EmploymentAppSourceTypeId)
                .HasColumnName("EMPLOYMENT_APP_SOURCE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.JobRequisitionId)
                .HasColumnName("JOB_REQUISITION_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.ReferredByPartyId)
                .HasColumnName("REFERRED_BY_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ApproverParty)
                .WithMany(p => p.EmploymentApps)
                .HasForeignKey(d => d.ApproverPartyId)
                .HasConstraintName("EMPLMNT_APP_APER");

            entity.HasOne(d => d.JobRequisition)
                .WithMany(p => p.EmploymentApps)
                .HasForeignKey(d => d.JobRequisitionId)
                .HasConstraintName("EMPLMNT_APP_JBRQ");
        });

        modelBuilder.Entity<EmploymentAppSourceType>(entity =>
        {
            entity.ToTable("EMPLOYMENT_APP_SOURCE_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("EMPL_APP_SRC_TYP");

            entity.Property(e => e.EmploymentAppSourceTypeId)
                .HasColumnName("EMPLOYMENT_APP_SOURCE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("EMPL_APP_SRC_TYP");
        });

        modelBuilder.Entity<EntityAuditLog>(entity =>
        {
            entity.HasKey(e => e.AuditHistorySeqId)
                .HasName("PRIMARY");

            entity.ToTable("ENTITY_AUDIT_LOG");


            entity.Property(e => e.AuditHistorySeqId)
                .HasColumnName("AUDIT_HISTORY_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ChangedByInfo)
                .HasColumnName("CHANGED_BY_INFO")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ChangedDate)
                .HasColumnName("CHANGED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ChangedEntityName)
                .HasColumnName("CHANGED_ENTITY_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ChangedFieldName)
                .HasColumnName("CHANGED_FIELD_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ChangedSessionInfo)
                .HasColumnName("CHANGED_SESSION_INFO")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.NewValueText)
                .HasColumnName("NEW_VALUE_TEXT")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.OldValueText)
                .HasColumnName("OLD_VALUE_TEXT")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.PkCombinedValueText)
                .HasColumnName("PK_COMBINED_VALUE_TEXT")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<EntityGroup>(entity =>
        {
            entity.ToTable("ENTITY_GROUP");


            entity.Property(e => e.EntityGroupId)
                .HasColumnName("ENTITY_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.EntityGroupName)
                .HasColumnName("ENTITY_GROUP_NAME")
                .HasColumnType("varchar(100)");
        });

        modelBuilder.Entity<EntityGroupEntry>(entity =>
        {
            entity.HasKey(e => new { e.EntityGroupId, e.EntityOrPackage })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("ENTITY_GROUP_ENTRY");


            entity.HasIndex(e => e.EntityGroupId)
                .HasName("ENTGRP_GRP");


            entity.Property(e => e.EntityGroupId)
                .HasColumnName("ENTITY_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.EntityOrPackage)
                .HasColumnName("ENTITY_OR_PACKAGE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ApplEnumId)
                .HasColumnName("APPL_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.EntityGroup)
                .WithMany(p => p.EntityGroupEntries)
                .HasForeignKey(d => d.EntityGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ENTGRP_GRP");
        });

        modelBuilder.Entity<EntityKeyStore>(entity =>
        {
            entity.HasKey(e => e.KeyName)
                .HasName("PRIMARY");

            entity.ToTable("ENTITY_KEY_STORE");


            entity.Property(e => e.KeyName)
                .HasColumnName("KEY_NAME")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.KeyText)
                .HasColumnName("KEY_TEXT")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<EntitySync>(entity =>
        {
            entity.ToTable("ENTITY_SYNC");


            entity.Property(e => e.EntitySyncId)
                .HasColumnName("ENTITY_SYNC_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ForPullOnly)
                .HasColumnName("FOR_PULL_ONLY")
                .HasColumnType("char(1)");

            entity.Property(e => e.ForPushOnly)
                .HasColumnName("FOR_PUSH_ONLY")
                .HasColumnType("char(1)");

            entity.Property(e => e.KeepRemoveInfoHours).HasColumnName("KEEP_REMOVE_INFO_HOURS");

            entity.Property(e => e.LastHistoryStartDate)
                .HasColumnName("LAST_HISTORY_START_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.LastSuccessfulSynchTime)
                .HasColumnName("LAST_SUCCESSFUL_SYNCH_TIME")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.MaxRunningNoUpdateMillis)
                .HasColumnName("MAX_RUNNING_NO_UPDATE_MILLIS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.OfflineSyncSplitMillis)
                .HasColumnName("OFFLINE_SYNC_SPLIT_MILLIS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.PreOfflineSynchTime)
                .HasColumnName("PRE_OFFLINE_SYNCH_TIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.RunStatusId)
                .HasColumnName("RUN_STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SyncEndBufferMillis)
                .HasColumnName("SYNC_END_BUFFER_MILLIS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.SyncSplitMillis)
                .HasColumnName("SYNC_SPLIT_MILLIS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.TargetDelegatorName)
                .HasColumnName("TARGET_DELEGATOR_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.TargetServiceName)
                .HasColumnName("TARGET_SERVICE_NAME")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<EntitySyncHistory>(entity =>
        {
            entity.HasKey(e => new { e.EntitySyncId, e.StartDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("ENTITY_SYNC_HISTORY");


            entity.HasIndex(e => e.EntitySyncId)
                .HasName("ENTSYNC_HSTSNC");


            entity.Property(e => e.EntitySyncId)
                .HasColumnName("ENTITY_SYNC_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StartDate)
                .HasColumnName("START_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.BeginningSynchTime)
                .HasColumnName("BEGINNING_SYNCH_TIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.LastCandidateEndTime)
                .HasColumnName("LAST_CANDIDATE_END_TIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.LastSplitStartTime)
                .HasColumnName("LAST_SPLIT_START_TIME")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.LastSuccessfulSynchTime)
                .HasColumnName("LAST_SUCCESSFUL_SYNCH_TIME")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PerSplitMaxItems)
                .HasColumnName("PER_SPLIT_MAX_ITEMS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.PerSplitMaxMillis)
                .HasColumnName("PER_SPLIT_MAX_MILLIS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.PerSplitMinItems)
                .HasColumnName("PER_SPLIT_MIN_ITEMS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.PerSplitMinMillis)
                .HasColumnName("PER_SPLIT_MIN_MILLIS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.RunStatusId)
                .HasColumnName("RUN_STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RunningTimeMillis)
                .HasColumnName("RUNNING_TIME_MILLIS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ToCreateInserted)
                .HasColumnName("TO_CREATE_INSERTED")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ToCreateNotUpdated)
                .HasColumnName("TO_CREATE_NOT_UPDATED")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ToCreateUpdated)
                .HasColumnName("TO_CREATE_UPDATED")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ToRemoveAlreadyDeleted)
                .HasColumnName("TO_REMOVE_ALREADY_DELETED")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ToRemoveDeleted)
                .HasColumnName("TO_REMOVE_DELETED")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ToStoreInserted)
                .HasColumnName("TO_STORE_INSERTED")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ToStoreNotUpdated)
                .HasColumnName("TO_STORE_NOT_UPDATED")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ToStoreUpdated)
                .HasColumnName("TO_STORE_UPDATED")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.TotalRowsExported)
                .HasColumnName("TOTAL_ROWS_EXPORTED")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.TotalRowsToCreate)
                .HasColumnName("TOTAL_ROWS_TO_CREATE")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.TotalRowsToRemove)
                .HasColumnName("TOTAL_ROWS_TO_REMOVE")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.TotalRowsToStore)
                .HasColumnName("TOTAL_ROWS_TO_STORE")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.TotalSplits)
                .HasColumnName("TOTAL_SPLITS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.TotalStoreCalls)
                .HasColumnName("TOTAL_STORE_CALLS")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.EntitySync)
                .WithMany(p => p.EntitySyncHistories)
                .HasForeignKey(d => d.EntitySyncId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ENTSYNC_HSTSNC");
        });

        modelBuilder.Entity<EntitySyncInclude>(entity =>
        {
            entity.HasKey(e => new { e.EntitySyncId, e.EntityOrPackage })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("ENTITY_SYNC_INCLUDE");


            entity.HasIndex(e => e.EntitySyncId)
                .HasName("ENTSYNC_INCSNC");


            entity.Property(e => e.EntitySyncId)
                .HasColumnName("ENTITY_SYNC_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.EntityOrPackage)
                .HasColumnName("ENTITY_OR_PACKAGE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ApplEnumId)
                .HasColumnName("APPL_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.EntitySync)
                .WithMany(p => p.EntitySyncIncludes)
                .HasForeignKey(d => d.EntitySyncId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ENTSYNC_INCSNC");
        });

        modelBuilder.Entity<EntitySyncIncludeGroup>(entity =>
        {
            entity.HasKey(e => new { e.EntitySyncId, e.EntityGroupId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("ENTITY_SYNC_INCLUDE_GROUP");


            entity.HasIndex(e => e.EntityGroupId)
                .HasName("ENTSNCGU_GRP");

            entity.HasIndex(e => e.EntitySyncId)
                .HasName("ENTSNCGU_SNC");


            entity.Property(e => e.EntitySyncId)
                .HasColumnName("ENTITY_SYNC_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.EntityGroupId)
                .HasColumnName("ENTITY_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.EntityGroup)
                .WithMany(p => p.EntitySyncIncludeGroups)
                .HasForeignKey(d => d.EntityGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ENTSNCGU_GRP");

            entity.HasOne(d => d.EntitySync)
                .WithMany(p => p.EntitySyncIncludeGroups)
                .HasForeignKey(d => d.EntitySyncId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ENTSNCGU_SNC");
        });

        modelBuilder.Entity<EntitySyncRemove>(entity =>
        {
            entity.ToTable("ENTITY_SYNC_REMOVE");


            entity.Property(e => e.EntitySyncRemoveId)
                .HasColumnName("ENTITY_SYNC_REMOVE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PrimaryKeyRemoved)
                .HasColumnName("PRIMARY_KEY_REMOVED")
                .HasColumnType("longtext");
        });

        modelBuilder.Entity<Enumeration>(entity =>
        {
            entity.HasKey(e => e.EnumId)
                .HasName("PRIMARY");

            entity.ToTable("ENUMERATION");


            entity.HasIndex(e => e.EnumTypeId)
                .HasName("ENUM_TO_TYPE");


            entity.Property(e => e.EnumId)
                .HasColumnName("ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.EnumCode)
                .HasColumnName("ENUM_CODE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.EnumTypeId)
                .HasColumnName("ENUM_TYPE_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.SequenceId)
                .HasColumnName("SEQUENCE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.EnumType)
                .WithMany(p => p.Enumerations)
                .HasForeignKey(d => d.EnumTypeId)
                .HasConstraintName("ENUM_TO_TYPE");
        });

        modelBuilder.Entity<EnumerationType>(entity =>
        {
            entity.HasKey(e => e.EnumTypeId)
                .HasName("PRIMARY");

            entity.ToTable("ENUMERATION_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("ENUM_TYPE_PARENT");

            entity.Property(e => e.EnumTypeId)
                .HasColumnName("ENUM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("ENUM_TYPE_PARENT");
        });


        modelBuilder.Entity<ExcelImportHistory>(entity =>
        {
            entity.HasKey(e => new { e.UserLoginId, e.SequenceNum })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("EXCEL_IMPORT_HISTORY");


            entity.HasIndex(e => e.StatusId)
                .HasName("EXCELIMPORT_STATUS");

            entity.HasIndex(e => e.ThruReasonId)
                .HasName("EXCELIMPORT_REASON");

            entity.HasIndex(e => e.UserLoginId)
                .HasName("EXCELIMPORT_USERLG");

            entity.Property(e => e.UserLoginId)
                .HasColumnName("USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FileName)
                .HasColumnName("FILE_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.LogFileName)
                .HasColumnName("LOG_FILE_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThreadName)
                .HasColumnName("THREAD_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ThruReasonId)
                .HasColumnName("THRU_REASON_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.ExcelImportHistoryStatus)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("EXCELIMPORT_STATUS");

            entity.HasOne(d => d.ThruReason)
                .WithMany(p => p.ExcelImportHistoryThruReasons)
                .HasForeignKey(d => d.ThruReasonId)
                .HasConstraintName("EXCELIMPORT_REASON");

            entity.HasOne(d => d.UserLogin)
                .WithMany(p => p.ExcelImportHistories)
                .HasForeignKey(d => d.UserLoginId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EXCELIMPORT_USERLG");
        });

        modelBuilder.Entity<Facility>(entity =>
        {
            entity.ToTable("FACILITY");


            entity.HasIndex(e => e.DefaultDimensionUomId)
                .HasName("FAC_DEF_DUOM");

            entity.HasIndex(e => e.DefaultInventoryItemTypeId)
                .HasName("FAC_INVITM_TYPE");

            entity.HasIndex(e => e.DefaultWeightUomId)
                .HasName("FAC_DEF_WUOM");

            entity.HasIndex(e => e.FacilitySizeUomId)
                .HasName("FACILITY_SUOM");

            entity.HasIndex(e => e.FacilityTypeId)
                .HasName("FACILITY_FCTYP");

            entity.HasIndex(e => e.GeoPointId)
                .HasName("FACILITY_GEOPT");


            entity.HasIndex(e => e.OwnerPartyId)
                .HasName("FACILITY_OWNER");

            entity.HasIndex(e => e.ParentFacilityId)
                .HasName("FACILITY_PARENT");

            entity.HasIndex(e => e.PrimaryFacilityGroupId)
                .HasName("FACILITY_PGRP");

            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.ClosedDate)
                .HasColumnName("CLOSED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DefaultDaysToShip)
                .HasColumnName("DEFAULT_DAYS_TO_SHIP")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.DefaultDimensionUomId)
                .HasColumnName("DEFAULT_DIMENSION_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DefaultInventoryItemTypeId)
                .HasColumnName("DEFAULT_INVENTORY_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DefaultWeightUomId)
                .HasColumnName("DEFAULT_WEIGHT_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.FacilityLevel)
                .HasColumnName("FACILITY_LEVEL")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.FacilityName)
                .HasColumnName("FACILITY_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.FacilitySize)
                .HasColumnName("FACILITY_SIZE")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.FacilitySizeUomId)
                .HasColumnName("FACILITY_SIZE_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FacilityTypeId)
                .HasColumnName("FACILITY_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GeoPointId)
                .HasColumnName("GEO_POINT_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.OpenedDate)
                .HasColumnName("OPENED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.OwnerPartyId)
                .HasColumnName("OWNER_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ParentFacilityId)
                .HasColumnName("PARENT_FACILITY_ID");

            entity.Property(e => e.PrimaryFacilityGroupId)
                .HasColumnName("PRIMARY_FACILITY_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SquareFootage)
                .HasColumnName("SQUARE_FOOTAGE")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.DefaultDimensionUom)
                .WithMany(p => p.FacilityDefaultDimensionUoms)
                .HasForeignKey(d => d.DefaultDimensionUomId)
                .HasConstraintName("FAC_DEF_DUOM");

            entity.HasOne(d => d.DefaultInventoryItemType)
                .WithMany(p => p.Facilities)
                .HasForeignKey(d => d.DefaultInventoryItemTypeId)
                .HasConstraintName("FAC_INVITM_TYPE");

            entity.HasOne(d => d.DefaultWeightUom)
                .WithMany(p => p.FacilityDefaultWeightUoms)
                .HasForeignKey(d => d.DefaultWeightUomId)
                .HasConstraintName("FAC_DEF_WUOM");

            entity.HasOne(d => d.FacilitySizeUom)
                .WithMany(p => p.FacilityFacilitySizeUoms)
                .HasForeignKey(d => d.FacilitySizeUomId)
                .HasConstraintName("FACILITY_SUOM");

            entity.HasOne(d => d.FacilityType)
                .WithMany(p => p.Facilities)
                .HasForeignKey(d => d.FacilityTypeId)
                .HasConstraintName("FACILITY_FCTYP");

            entity.HasOne(d => d.GeoPoint)
                .WithMany(p => p.Facilities)
                .HasForeignKey(d => d.GeoPointId)
                .HasConstraintName("FACILITY_GEOPT");

            entity.HasOne(d => d.OwnerParty)
                .WithMany(p => p.Facilities)
                .HasForeignKey(d => d.OwnerPartyId)
                .HasConstraintName("FACILITY_OWNER");

            entity.HasOne(d => d.ParentFacility)
                .WithMany(p => p.InverseParentFacility)
                .HasForeignKey(d => d.ParentFacilityId)
                .HasConstraintName("FACILITY_PARENT");

            entity.HasOne(d => d.PrimaryFacilityGroup)
                .WithMany(p => p.Facilities)
                .HasForeignKey(d => d.PrimaryFacilityGroupId)
                .HasConstraintName("FACILITY_PGRP");
        });

        modelBuilder.Entity<FacilityAssocType>(entity =>
        {
            entity.ToTable("FACILITY_ASSOC_TYPE");


            entity.Property(e => e.FacilityAssocTypeId)
                .HasColumnName("FACILITY_ASSOC_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<FacilityAttribute>(entity =>
        {
            entity.HasKey(e => new { e.FacilityId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("FACILITY_ATTRIBUTE");


            entity.HasIndex(e => e.FacilityId)
                .HasName("FACILITY_ATTR");


            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Facility)
                .WithMany(p => p.FacilityAttributes)
                .HasForeignKey(d => d.FacilityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FACILITY_ATTR");
        });

        modelBuilder.Entity<FacilityCalendar>(entity =>
        {
            entity.HasKey(e => new { e.FacilityId, e.CalendarId, e.FacilityCalendarTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("FACILITY_CALENDAR");


            entity.HasIndex(e => e.FacilityCalendarTypeId)
                .HasName("FACILITY_CAL_TYPE");

            entity.HasIndex(e => e.FacilityId)
                .HasName("FACILITY_CAL_FAC");


            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.CalendarId)
                .HasColumnName("CALENDAR_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FacilityCalendarTypeId)
                .HasColumnName("FACILITY_CALENDAR_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.FacilityCalendarType)
                .WithMany(p => p.FacilityCalendars)
                .HasForeignKey(d => d.FacilityCalendarTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FACILITY_CAL_TYPE");

            entity.HasOne(d => d.Facility)
                .WithMany(p => p.FacilityCalendars)
                .HasForeignKey(d => d.FacilityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FACILITY_CAL_FAC");
        });

        modelBuilder.Entity<FacilityCalendarType>(entity =>
        {
            entity.ToTable("FACILITY_CALENDAR_TYPE");


            entity.Property(e => e.FacilityCalendarTypeId)
                .HasColumnName("FACILITY_CALENDAR_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");
        });

        modelBuilder.Entity<FacilityCarrierShipment>(entity =>
        {
            entity.HasKey(e => new { e.FacilityId, e.PartyId, e.RoleTypeId, e.ShipmentMethodTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("FACILITY_CARRIER_SHIPMENT");


            entity.HasIndex(e => e.FacilityId)
                .HasName("FACILITY_CSH_FAC");


            entity.HasIndex(e => e.PartyId)
                .HasName("FACILITY_CSH_PTY");

            entity.HasIndex(e => e.ShipmentMethodTypeId)
                .HasName("FACILITY_CSH_STP");

            entity.HasIndex(e => new { e.ShipmentMethodTypeId, e.PartyId, e.RoleTypeId })
                .HasName("FACILITY_CSH_CSM");

            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentMethodTypeId)
                .HasColumnName("SHIPMENT_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Facility)
                .WithMany(p => p.FacilityCarrierShipments)
                .HasForeignKey(d => d.FacilityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FACILITY_CSH_FAC");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.FacilityCarrierShipments)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FACILITY_CSH_PTY");

            entity.HasOne(d => d.ShipmentMethodType)
                .WithMany(p => p.FacilityCarrierShipments)
                .HasForeignKey(d => d.ShipmentMethodTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FACILITY_CSH_STP");

            entity.HasOne(d => d.CarrierShipmentMethod)
                .WithMany(p => p.FacilityCarrierShipments)
                .HasForeignKey(d => new { d.ShipmentMethodTypeId, d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FACILITY_CSH_CSM");
        });

        modelBuilder.Entity<FacilityContactMech>(entity =>
        {
            entity.HasKey(e => new { e.FacilityId, e.ContactMechId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("FACILITY_CONTACT_MECH");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("FACIL_CMECH_CMECH");


            entity.HasIndex(e => e.FacilityId)
                .HasName("FACIL_CMECH_FACIL");


            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Extension)
                .HasColumnName("EXTENSION")
                .HasColumnType("varchar(10)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.FacilityContactMeches)
                .HasForeignKey(d => d.ContactMechId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FACIL_CMECH_CMECH");

            entity.HasOne(d => d.Facility)
                .WithMany(p => p.FacilityContactMeches)
                .HasForeignKey(d => d.FacilityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FACIL_CMECH_FACIL");
        });

        modelBuilder.Entity<FacilityContactMechPurpose>(entity =>
        {
            entity.HasKey(e => new { e.FacilityId, e.ContactMechId, e.ContactMechPurposeTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("FACILITY_CONTACT_MECH_PURPOSE");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("FACIL_CMPRP_CMECH");

            entity.HasIndex(e => e.ContactMechPurposeTypeId)
                .HasName("FACIL_CMPRP_TYPE");


            entity.HasIndex(e => e.FacilityId)
                .HasName("FACIL_CMPRP_FACIL");


            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechPurposeTypeId)
                .HasColumnName("CONTACT_MECH_PURPOSE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.FacilityContactMechPurposes)
                .HasForeignKey(d => d.ContactMechId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FACIL_CMPRP_CMECH");

            entity.HasOne(d => d.ContactMechPurposeType)
                .WithMany(p => p.FacilityContactMechPurposes)
                .HasForeignKey(d => d.ContactMechPurposeTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FACIL_CMPRP_TYPE");

            entity.HasOne(d => d.Facility)
                .WithMany(p => p.FacilityContactMechPurposes)
                .HasForeignKey(d => d.FacilityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FACIL_CMPRP_FACIL");
        });

        modelBuilder.Entity<FacilityContent>(entity =>
        {
            entity.HasKey(e => new { e.FacilityId, e.ContentId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("FACILITY_CONTENT");

            entity.HasIndex(e => e.ContentId)
                .HasName("FAC_CNT_CNT");


            entity.HasIndex(e => e.FacilityId)
                .HasName("FAC_CNT_FAC");


            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.FacilityContents)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FAC_CNT_CNT");

            entity.HasOne(d => d.Facility)
                .WithMany(p => p.FacilityContents)
                .HasForeignKey(d => d.FacilityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FAC_CNT_FAC");
        });

        modelBuilder.Entity<FacilityGroup>(entity =>
        {
            entity.ToTable("FACILITY_GROUP");


            entity.HasIndex(e => e.FacilityGroupTypeId)
                .HasName("FACILITY_GP_TYPE");


            entity.HasIndex(e => e.PrimaryParentGroupId)
                .HasName("FACILITY_GP_PGRP");

            entity.Property(e => e.FacilityGroupId)
                .HasColumnName("FACILITY_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.FacilityGroupName)
                .HasColumnName("FACILITY_GROUP_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.FacilityGroupTypeId)
                .HasColumnName("FACILITY_GROUP_TYPE_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.PrimaryParentGroupId)
                .HasColumnName("PRIMARY_PARENT_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.FacilityGroupType)
                .WithMany(p => p.FacilityGroups)
                .HasForeignKey(d => d.FacilityGroupTypeId)
                .HasConstraintName("FACILITY_GP_TYPE");

            entity.HasOne(d => d.PrimaryParentGroup)
                .WithMany(p => p.InversePrimaryParentGroup)
                .HasForeignKey(d => d.PrimaryParentGroupId)
                .HasConstraintName("FACILITY_GP_PGRP");
        });

        modelBuilder.Entity<FacilityGroupMember>(entity =>
        {
            entity.HasKey(e => new { e.FacilityId, e.FacilityGroupId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("FACILITY_GROUP_MEMBER");


            entity.HasIndex(e => e.FacilityGroupId)
                .HasName("FACILITY_MEM_FGRP");

            entity.HasIndex(e => e.FacilityId)
                .HasName("FACILITY_MEM_FAC");


            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.FacilityGroupId)
                .HasColumnName("FACILITY_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.FacilityGroup)
                .WithMany(p => p.FacilityGroupMembers)
                .HasForeignKey(d => d.FacilityGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FACILITY_MEM_FGRP");

            entity.HasOne(d => d.Facility)
                .WithMany(p => p.FacilityGroupMembers)
                .HasForeignKey(d => d.FacilityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FACILITY_MEM_FAC");
        });

        modelBuilder.Entity<FacilityGroupRole>(entity =>
        {
            entity.HasKey(e => new { e.FacilityGroupId, e.PartyId, e.RoleTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("FACILITY_GROUP_ROLE");


            entity.HasIndex(e => e.FacilityGroupId)
                .HasName("FGROUP_RLE_FGRP");


            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("FGROUP_RLE_PTRLE");

            entity.Property(e => e.FacilityGroupId)
                .HasColumnName("FACILITY_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.FacilityGroup)
                .WithMany(p => p.FacilityGroupRoles)
                .HasForeignKey(d => d.FacilityGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FGROUP_RLE_FGRP");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.FacilityGroupRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FGROUP_RLE_PTRLE");
        });

        modelBuilder.Entity<FacilityGroupRollup>(entity =>
        {
            entity.HasKey(e => new { e.FacilityGroupId, e.ParentFacilityGroupId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("FACILITY_GROUP_ROLLUP");


            entity.HasIndex(e => e.FacilityGroupId)
                .HasName("FGRP_FRLP_CURRENT");


            entity.HasIndex(e => e.ParentFacilityGroupId)
                .HasName("FGRP_FRLP_PARENT");

            entity.Property(e => e.FacilityGroupId)
                .HasColumnName("FACILITY_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ParentFacilityGroupId)
                .HasColumnName("PARENT_FACILITY_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.FacilityGroup)
                .WithMany(p => p.FacilityGroupRollupFacilityGroups)
                .HasForeignKey(d => d.FacilityGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FGRP_FRLP_CURRENT");

            entity.HasOne(d => d.ParentFacilityGroup)
                .WithMany(p => p.FacilityGroupRollupParentFacilityGroups)
                .HasForeignKey(d => d.ParentFacilityGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FGRP_FRLP_PARENT");
        });

        modelBuilder.Entity<FacilityGroupType>(entity =>
        {
            entity.ToTable("FACILITY_GROUP_TYPE");


            entity.Property(e => e.FacilityGroupTypeId)
                .HasColumnName("FACILITY_GROUP_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<FacilityLocation>(entity =>
        {
            entity.HasKey(e => new { e.FacilityId, e.LocationSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("FACILITY_LOCATION");


            entity.HasIndex(e => e.FacilityId)
                .HasName("FACILITY_LOC_FAC");

            entity.HasIndex(e => e.GeoPointId)
                .HasName("FACILITY_LOC_GEOPT");


            entity.HasIndex(e => e.LocationTypeEnumId)
                .HasName("FACILITY_LOC_TENM");

            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.LocationSeqId)
                .HasColumnName("LOCATION_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AisleId)
                .HasColumnName("AISLE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AreaId)
                .HasColumnName("AREA_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GeoPointId)
                .HasColumnName("GEO_POINT_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.LevelId)
                .HasColumnName("LEVEL_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.LocationTypeEnumId)
                .HasColumnName("LOCATION_TYPE_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PositionId)
                .HasColumnName("POSITION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SectionId)
                .HasColumnName("SECTION_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Facility)
                .WithMany(p => p.FacilityLocations)
                .HasForeignKey(d => d.FacilityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FACILITY_LOC_FAC");

            entity.HasOne(d => d.GeoPoint)
                .WithMany(p => p.FacilityLocations)
                .HasForeignKey(d => d.GeoPointId)
                .HasConstraintName("FACILITY_LOC_GEOPT");

            entity.HasOne(d => d.LocationTypeEnum)
                .WithMany(p => p.FacilityLocations)
                .HasForeignKey(d => d.LocationTypeEnumId)
                .HasConstraintName("FACILITY_LOC_TENM");
        });

        modelBuilder.Entity<FacilityLocationGeoPoint>(entity =>
        {
            entity.HasKey(e => new { e.FacilityId, e.LocationSeqId, e.GeoPointId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("FACILITY_LOCATION_GEO_POINT");


            entity.HasIndex(e => e.GeoPointId)
                .HasName("FACLOCGEOPT_GEOPT");


            entity.HasIndex(e => new { e.FacilityId, e.LocationSeqId })
                .HasName("FACLOCGEOPT_FACLOC");

            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.LocationSeqId)
                .HasColumnName("LOCATION_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GeoPointId)
                .HasColumnName("GEO_POINT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.GeoPoint)
                .WithMany(p => p.FacilityLocationGeoPoints)
                .HasForeignKey(d => d.GeoPointId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FACLOCGEOPT_GEOPT");

            entity.HasOne(d => d.FacilityLocation)
                .WithMany(p => p.FacilityLocationGeoPoints)
                .HasForeignKey(d => new { d.FacilityId, d.LocationSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FACLOCGEOPT_FACLOC");
        });

        modelBuilder.Entity<FacilityParty>(entity =>
        {
            entity.HasKey(e => new { e.FacilityId, e.PartyId, e.RoleTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("FACILITY_PARTY");


            entity.HasIndex(e => e.FacilityId)
                .HasName("FACILITY_RLE_FACI");


            entity.HasIndex(e => e.PartyId)
                .HasName("FACILITY_RLE_PRT");

            entity.HasIndex(e => e.RoleTypeId)
                .HasName("FACILITY_RLE_ROL");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("FACILITY_PRTY_ROLE");

            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Facility)
                .WithMany(p => p.FacilityParties)
                .HasForeignKey(d => d.FacilityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FACILITY_RLE_FACI");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.FacilityParties)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FACILITY_RLE_PRT");

            entity.HasOne(d => d.RoleType)
                .WithMany(p => p.FacilityParties)
                .HasForeignKey(d => d.RoleTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FACILITY_RLE_ROL");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.FacilityParties)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FACILITY_PRTY_ROLE");
        });

        modelBuilder.Entity<FacilityType>(entity =>
        {
            entity.ToTable("FACILITY_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("FACILITY_TYPEPAR");

            entity.Property(e => e.FacilityTypeId)
                .HasColumnName("FACILITY_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)")
                .IsRequired(false);

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("FACILITY_TYPEPAR");
        });

        modelBuilder.Entity<FacilityTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.FacilityTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("FACILITY_TYPE_ATTR");


            entity.HasIndex(e => e.FacilityTypeId)
                .HasName("FACILITY_TPAT_FT");


            entity.Property(e => e.FacilityTypeId)
                .HasColumnName("FACILITY_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.FacilityType)
                .WithMany(p => p.FacilityTypeAttrs)
                .HasForeignKey(d => d.FacilityTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FACILITY_TPAT_FT");
        });

        modelBuilder.Entity<FileExtension>(entity =>
        {
            entity.ToTable("FILE_EXTENSION");


            entity.HasIndex(e => e.MimeTypeId)
                .HasName("FILEEXT_MMTYP");

            entity.Property(e => e.FileExtensionId)
                .HasColumnName("FILE_EXTENSION_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.MimeTypeId)
                .HasColumnName("MIME_TYPE_ID")
                .HasColumnType("varchar(250)");

            entity.HasOne(d => d.MimeType)
                .WithMany(p => p.FileExtensions)
                .HasForeignKey(d => d.MimeTypeId)
                .HasConstraintName("FILEEXT_MMTYP");
        });

        modelBuilder.Entity<FinAccount>(entity =>
        {
            entity.ToTable("FIN_ACCOUNT");


            entity.HasIndex(e => e.CurrencyUomId)
                .HasName("FINACCT_CURUOM");

            entity.HasIndex(e => e.FinAccountTypeId)
                .HasName("FINACCT_TYPE");


            entity.HasIndex(e => e.OrganizationPartyId)
                .HasName("FINACCT_ORGPTY");

            entity.HasIndex(e => e.OwnerPartyId)
                .HasName("FINACCT_OWNPTY");

            entity.HasIndex(e => e.PostToGlAccountId)
                .HasName("FINACCT_GLAC");

            entity.HasIndex(e => e.ReplenishPaymentId)
                .HasName("FINACCT_PAYMETH");

            entity.Property(e => e.FinAccountId)
                .HasColumnName("FIN_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ActualBalance)
                .HasColumnName("ACTUAL_BALANCE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.AvailableBalance)
                .HasColumnName("AVAILABLE_BALANCE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrencyUomId)
                .HasColumnName("CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FinAccountCode)
                .HasColumnName("FIN_ACCOUNT_CODE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.FinAccountName)
                .HasColumnName("FIN_ACCOUNT_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.FinAccountPin)
                .HasColumnName("FIN_ACCOUNT_PIN")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.FinAccountTypeId)
                .HasColumnName("FIN_ACCOUNT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.IsRefundable)
                .HasColumnName("IS_REFUNDABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.OrganizationPartyId)
                .HasColumnName("ORGANIZATION_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OwnerPartyId)
                .HasColumnName("OWNER_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PostToGlAccountId)
                .HasColumnName("POST_TO_GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReplenishLevel)
                .HasColumnName("REPLENISH_LEVEL")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.ReplenishPaymentId)
                .HasColumnName("REPLENISH_PAYMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.CurrencyUom)
                .WithMany(p => p.FinAccounts)
                .HasForeignKey(d => d.CurrencyUomId)
                .HasConstraintName("FINACCT_CURUOM");

            entity.HasOne(d => d.FinAccountType)
                .WithMany(p => p.FinAccounts)
                .HasForeignKey(d => d.FinAccountTypeId)
                .HasConstraintName("FINACCT_TYPE");

            entity.HasOne(d => d.OrganizationParty)
                .WithMany(p => p.FinAccountOrganizationParties)
                .HasForeignKey(d => d.OrganizationPartyId)
                .HasConstraintName("FINACCT_ORGPTY");

            entity.HasOne(d => d.OwnerParty)
                .WithMany(p => p.FinAccountOwnerParties)
                .HasForeignKey(d => d.OwnerPartyId)
                .HasConstraintName("FINACCT_OWNPTY");

            entity.HasOne(d => d.PostToGlAccount)
                .WithMany(p => p.FinAccounts)
                .HasForeignKey(d => d.PostToGlAccountId)
                .HasConstraintName("FINACCT_GLAC");

            entity.HasOne(d => d.ReplenishPayment)
                .WithMany(p => p.FinAccounts)
                .HasForeignKey(d => d.ReplenishPaymentId)
                .HasConstraintName("FINACCT_PAYMETH");
        });

        modelBuilder.Entity<FinAccountAttribute>(entity =>
        {
            entity.HasKey(e => new { e.FinAccountId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("FIN_ACCOUNT_ATTRIBUTE");


            entity.HasIndex(e => e.FinAccountId)
                .HasName("FINACCT_ATTR");


            entity.Property(e => e.FinAccountId)
                .HasColumnName("FIN_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.FinAccount)
                .WithMany(p => p.FinAccountAttributes)
                .HasForeignKey(d => d.FinAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FINACCT_ATTR");
        });

        modelBuilder.Entity<FinAccountAuth>(entity =>
        {
            entity.ToTable("FIN_ACCOUNT_AUTH");


            entity.HasIndex(e => e.FinAccountId)
                .HasName("FINACT_AUTH_FINACT");


            entity.Property(e => e.FinAccountAuthId)
                .HasColumnName("FIN_ACCOUNT_AUTH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.AuthorizationDate)
                .HasColumnName("AUTHORIZATION_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrencyUomId)
                .HasColumnName("CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FinAccountId)
                .HasColumnName("FIN_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.FinAccount)
                .WithMany(p => p.FinAccountAuths)
                .HasForeignKey(d => d.FinAccountId)
                .HasConstraintName("FINACT_AUTH_FINACT");
        });

        modelBuilder.Entity<FinAccountRole>(entity =>
        {
            entity.HasKey(e => new { e.FinAccountId, e.PartyId, e.RoleTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("FIN_ACCOUNT_ROLE");


            entity.HasIndex(e => e.FinAccountId)
                .HasName("FIN_ACT_RL_FNACT");


            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("FIN_ACT_RL_RTRL");

            entity.Property(e => e.FinAccountId)
                .HasColumnName("FIN_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.FinAccount)
                .WithMany(p => p.FinAccountRoles)
                .HasForeignKey(d => d.FinAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FIN_ACT_RL_FNACT");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.FinAccountRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FIN_ACT_RL_RTRL");
        });

        modelBuilder.Entity<FinAccountStatu>(entity =>
        {
            entity.HasKey(e => new { e.FinAccountId, e.StatusId, e.StatusDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("FIN_ACCOUNT_STATUS");

            entity.HasIndex(e => e.ChangedByUserLoginId)
                .HasName("FINACT_STTS_USER");


            entity.HasIndex(e => e.FinAccountId)
                .HasName("FINACT_STTS_FNA");


            entity.HasIndex(e => e.StatusId)
                .HasName("FINACT_STTS_STI");

            entity.Property(e => e.FinAccountId)
                .HasColumnName("FIN_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusDate)
                .HasColumnName("STATUS_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ChangedByUserLoginId)
                .HasColumnName("CHANGE_BY_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.StatusEndDate)
                .HasColumnName("STATUS_END_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ChangeByUserLogin)
                .WithMany(p => p.FinAccountStatus)
                .HasForeignKey(d => d.ChangedByUserLoginId)
                .HasConstraintName("FINACT_STTS_USER");

            entity.HasOne(d => d.FinAccount)
                .WithMany(p => p.FinAccountStatus)
                .HasForeignKey(d => d.FinAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FINACT_STTS_FNA");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.FinAccountStatus)
                .HasForeignKey(d => d.StatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FINACT_STTS_STI");
        });

        modelBuilder.Entity<FinAccountTran>(entity =>
        {
            entity.HasKey(e => e.FinAccountTransId)
                .HasName("PRIMARY");

            entity.ToTable("FIN_ACCOUNT_TRANS");


            entity.HasIndex(e => e.FinAccountId)
                .HasName("FIN_ACT_TX_FNACT");

            entity.HasIndex(e => e.FinAccountTransTypeId)
                .HasName("FINACCT_TX_TYPE");

            entity.HasIndex(e => e.GlReconciliationId)
                .HasName("FIN_ACT_TX_GLREC");


            entity.HasIndex(e => e.PartyId)
                .HasName("FIN_ACT_TX_PARTY");

            entity.HasIndex(e => e.PaymentId)
                .HasName("FIN_ACT_TX_PMT");

            entity.HasIndex(e => e.PerformedByPartyId)
                .HasName("FIN_ACT_TX_PBPTY");

            entity.HasIndex(e => e.ReasonEnumId)
                .HasName("FIN_ACT_REAS_ENUM");

            entity.HasIndex(e => e.StatusId)
                .HasName("FIN_ACT_TX_STI");

            entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId })
                .HasName("FIN_ACT_TX_ODITM");

            entity.Property(e => e.FinAccountTransId)
                .HasColumnName("FIN_ACCOUNT_TRANS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.EntryDate)
                .HasColumnName("ENTRY_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.FinAccountId)
                .HasColumnName("FIN_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FinAccountTransTypeId)
                .HasColumnName("FIN_ACCOUNT_TRANS_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GlReconciliationId)
                .HasColumnName("GL_RECONCILIATION_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentId)
                .HasColumnName("PAYMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PerformedByPartyId)
                .HasColumnName("PERFORMED_BY_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReasonEnumId)
                .HasColumnName("REASON_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TransactionDate)
                .HasColumnName("TRANSACTION_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.FinAccount)
                .WithMany(p => p.FinAccountTrans)
                .HasForeignKey(d => d.FinAccountId)
                .HasConstraintName("FIN_ACT_TX_FNACT");

            entity.HasOne(d => d.FinAccountTransType)
                .WithMany(p => p.FinAccountTrans)
                .HasForeignKey(d => d.FinAccountTransTypeId)
                .HasConstraintName("FINACCT_TX_TYPE");

            entity.HasOne(d => d.GlReconciliation)
                .WithMany(p => p.FinAccountTrans)
                .HasForeignKey(d => d.GlReconciliationId)
                .HasConstraintName("FIN_ACT_TX_GLREC");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.FinAccountTranParties)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("FIN_ACT_TX_PARTY");

            entity.HasOne(d => d.Payment)
                .WithMany(p => p.FinAccountTrans)
                .HasForeignKey(d => d.PaymentId)
                .HasConstraintName("FIN_ACT_TX_PMT");

            entity.HasOne(d => d.PerformedByParty)
                .WithMany(p => p.FinAccountTranPerformedByParties)
                .HasForeignKey(d => d.PerformedByPartyId)
                .HasConstraintName("FIN_ACT_TX_PBPTY");

            entity.HasOne(d => d.ReasonEnum)
                .WithMany(p => p.FinAccountTrans)
                .HasForeignKey(d => d.ReasonEnumId)
                .HasConstraintName("FIN_ACT_REAS_ENUM");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.FinAccountTrans)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("FIN_ACT_TX_STI");

            entity.HasOne(d => d.OrderI)
                .WithMany(p => p.FinAccountTrans)
                .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                .HasConstraintName("FIN_ACT_TX_ODITM");
        });

        modelBuilder.Entity<FinAccountTransAttribute>(entity =>
        {
            entity.HasKey(e => new { e.FinAccountTransId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("FIN_ACCOUNT_TRANS_ATTRIBUTE");


            entity.HasIndex(e => e.FinAccountTransId)
                .HasName("FINACCT_TX_ATTR");


            entity.Property(e => e.FinAccountTransId)
                .HasColumnName("FIN_ACCOUNT_TRANS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.FinAccountTrans)
                .WithMany(p => p.FinAccountTransAttributes)
                .HasForeignKey(d => d.FinAccountTransId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FINACCT_TX_ATTR");
        });

        modelBuilder.Entity<FinAccountTransType>(entity =>
        {
            entity.ToTable("FIN_ACCOUNT_TRANS_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("FINACCT_TX_TYPPAR");

            entity.Property(e => e.FinAccountTransTypeId)
                .HasColumnName("FIN_ACCOUNT_TRANS_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("FINACCT_TX_TYPPAR");
        });

        modelBuilder.Entity<FinAccountTransTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.FinAccountTransTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("FIN_ACCOUNT_TRANS_TYPE_ATTR");


            entity.HasIndex(e => e.FinAccountTransTypeId)
                .HasName("FINACCT_TX_TYPATR");


            entity.Property(e => e.FinAccountTransTypeId)
                .HasColumnName("FIN_ACCOUNT_TRANS_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.FinAccountTransType)
                .WithMany(p => p.FinAccountTransTypeAttrs)
                .HasForeignKey(d => d.FinAccountTransTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FINACCT_TX_TYPATR");
        });

        modelBuilder.Entity<FinAccountType>(entity =>
        {
            entity.ToTable("FIN_ACCOUNT_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("FINACCT_TYPE_PAR");

            entity.HasIndex(e => e.ReplenishEnumId)
                .HasName("FINACCT_TYPE_RENUM");

            entity.Property(e => e.FinAccountTypeId)
                .HasColumnName("FIN_ACCOUNT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");

            entity.Property(e => e.IsRefundable)
                .HasColumnName("IS_REFUNDABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReplenishEnumId)
                .HasColumnName("REPLENISH_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("FINACCT_TYPE_PAR");

            entity.HasOne(d => d.ReplenishEnum)
                .WithMany(p => p.FinAccountTypes)
                .HasForeignKey(d => d.ReplenishEnumId)
                .HasConstraintName("FINACCT_TYPE_RENUM");
        });

        modelBuilder.Entity<FinAccountTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.FinAccountTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("FIN_ACCOUNT_TYPE_ATTR");


            entity.HasIndex(e => e.FinAccountTypeId)
                .HasName("FINACCT_TYPE_ATTR");


            entity.Property(e => e.FinAccountTypeId)
                .HasColumnName("FIN_ACCOUNT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.FinAccountType)
                .WithMany(p => p.FinAccountTypeAttrs)
                .HasForeignKey(d => d.FinAccountTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FINACCT_TYPE_ATTR");
        });

        modelBuilder.Entity<FinAccountTypeGlAccount>(entity =>
        {
            entity.HasKey(e => new { e.FinAccountTypeId, e.OrganizationPartyId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("FIN_ACCOUNT_TYPE_GL_ACCOUNT");


            entity.HasIndex(e => e.FinAccountTypeId)
                .HasName("FINACCT_TGA_PMT");

            entity.HasIndex(e => e.GlAccountId)
                .HasName("FINACCT_TGA_GLAC");


            entity.HasIndex(e => e.OrganizationPartyId)
                .HasName("FINACCT_TGA_OPTY");

            entity.Property(e => e.FinAccountTypeId)
                .HasColumnName("FIN_ACCOUNT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrganizationPartyId)
                .HasColumnName("ORGANIZATION_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GlAccountId)
                .HasColumnName("GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");


            entity.HasOne(d => d.FinAccountType)
                .WithMany(p => p.FinAccountTypeGlAccounts)
                .HasForeignKey(d => d.FinAccountTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FINACCT_TGA_PMT");

            entity.HasOne(d => d.GlAccount)
                .WithMany(p => p.FinAccountTypeGlAccounts)
                .HasForeignKey(d => d.GlAccountId)
                .HasConstraintName("FINACCT_TGA_GLAC");

            entity.HasOne(d => d.OrganizationParty)
                .WithMany(p => p.FinAccountTypeGlAccounts)
                .HasForeignKey(d => d.OrganizationPartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FINACCT_TGA_OPTY");
        });

        modelBuilder.Entity<FixedAsset>(entity =>
        {
            entity.ToTable("FIXED_ASSET");

            entity.HasIndex(e => e.AcquireOrderId)
                .HasName("FIXEDAST_ORDHDR");

            entity.HasIndex(e => e.CalendarId)
                .HasName("FIXEDAST_CALENDAR");

            entity.HasIndex(e => e.ClassEnumId)
                .HasName("FIXEDAST_CLSENM");


            entity.HasIndex(e => e.FixedAssetTypeId)
                .HasName("FIXEDAST_TYPE");

            entity.HasIndex(e => e.InstanceOfProductId)
                .HasName("FIXEDAST_IOPROD");


            entity.HasIndex(e => e.LocatedAtFacilityId)
                .HasName("FIXEDAST_FAC");

            entity.HasIndex(e => e.ParentFixedAssetId)
                .HasName("FIXEDAST_PAR");

            entity.HasIndex(e => e.PartyId)
                .HasName("FIXEDAST_PARTY");

            entity.HasIndex(e => e.RoleTypeId)
                .HasName("FIXEDAST_ROLETYP");

            entity.HasIndex(e => e.UomId)
                .HasName("FIXEDAST_UOM");

            entity.HasIndex(e => new { e.AcquireOrderId, e.AcquireOrderItemSeqId })
                .HasName("FIXEDAST_ORDITM");

            entity.Property(e => e.FixedAssetId)
                .HasColumnName("FIXED_ASSET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AcquireOrderId)
                .HasColumnName("ACQUIRE_ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AcquireOrderItemSeqId)
                .HasColumnName("ACQUIRE_ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ActualEndOfLife)
                .HasColumnName("ACTUAL_END_OF_LIFE")
                .HasColumnType("date");

            entity.Property(e => e.CalendarId)
                .HasColumnName("CALENDAR_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ClassEnumId)
                .HasColumnName("CLASS_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DateAcquired)
                .HasColumnName("DATE_ACQUIRED")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.DateLastServiced)
                .HasColumnName("DATE_LAST_SERVICED")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.DateNextService)
                .HasColumnName("DATE_NEXT_SERVICE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Depreciation)
                .HasColumnName("DEPRECIATION")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.ExpectedEndOfLife)
                .HasColumnName("EXPECTED_END_OF_LIFE")
                .HasColumnType("date");

            entity.Property(e => e.FixedAssetName)
                .HasColumnName("FIXED_ASSET_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.FixedAssetTypeId)
                .HasColumnName("FIXED_ASSET_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InstanceOfProductId)
                .HasColumnName("INSTANCE_OF_PRODUCT_ID")
                .HasColumnType("char(36)");


            entity.Property(e => e.LocatedAtFacilityId)
                .HasColumnName("LOCATED_AT_FACILITY_ID");

            entity.Property(e => e.LocatedAtLocationSeqId)
                .HasColumnName("LOCATED_AT_LOCATION_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ParentFixedAssetId)
                .HasColumnName("PARENT_FIXED_ASSET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductionCapacity)
                .HasColumnName("PRODUCTION_CAPACITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.PurchaseCost)
                .HasColumnName("PURCHASE_COST")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.PurchaseCostUomId)
                .HasColumnName("PURCHASE_COST_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SalvageValue)
                .HasColumnName("SALVAGE_VALUE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.SerialNumber)
                .HasColumnName("SERIAL_NUMBER")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.UomId)
                .HasColumnName("UOM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.AcquireOrder)
                .WithMany(p => p.FixedAssets)
                .HasForeignKey(d => d.AcquireOrderId)
                .HasConstraintName("FIXEDAST_ORDHDR");

            entity.HasOne(d => d.Calendar)
                .WithMany(p => p.FixedAssets)
                .HasForeignKey(d => d.CalendarId)
                .HasConstraintName("FIXEDAST_CALENDAR");

            entity.HasOne(d => d.ClassEnum)
                .WithMany(p => p.FixedAssets)
                .HasForeignKey(d => d.ClassEnumId)
                .HasConstraintName("FIXEDAST_CLSENM");

            entity.HasOne(d => d.FixedAssetType)
                .WithMany(p => p.FixedAssets)
                .HasForeignKey(d => d.FixedAssetTypeId)
                .HasConstraintName("FIXEDAST_TYPE");

            entity.HasOne(d => d.InstanceOfProduct)
                .WithMany(p => p.FixedAssets)
                .HasForeignKey(d => d.InstanceOfProductId)
                .HasConstraintName("FIXEDAST_IOPROD");

            entity.HasOne(d => d.LocatedAtFacility)
                .WithMany(p => p.FixedAssets)
                .HasForeignKey(d => d.LocatedAtFacilityId)
                .HasConstraintName("FIXEDAST_FAC");

            entity.HasOne(d => d.ParentFixedAsset)
                .WithMany(p => p.InverseParentFixedAsset)
                .HasForeignKey(d => d.ParentFixedAssetId)
                .HasConstraintName("FIXEDAST_PAR");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.FixedAssets)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("FIXEDAST_PARTY");

            entity.HasOne(d => d.RoleType)
                .WithMany(p => p.FixedAssets)
                .HasForeignKey(d => d.RoleTypeId)
                .HasConstraintName("FIXEDAST_ROLETYP");

            entity.HasOne(d => d.Uom)
                .WithMany(p => p.FixedAssets)
                .HasForeignKey(d => d.UomId)
                .HasConstraintName("FIXEDAST_UOM");

            entity.HasOne(d => d.AcquireOrderI)
                .WithMany(p => p.FixedAssets)
                .HasForeignKey(d => new { d.AcquireOrderId, d.AcquireOrderItemSeqId })
                .HasConstraintName("FIXEDAST_ORDITM");
        });

        modelBuilder.Entity<FixedAssetAttribute>(entity =>
        {
            entity.HasKey(e => new { e.FixedAssetId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("FIXED_ASSET_ATTRIBUTE");


            entity.HasIndex(e => e.FixedAssetId)
                .HasName("FIXEDAST_ATTR");


            entity.Property(e => e.FixedAssetId)
                .HasColumnName("FIXED_ASSET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.FixedAsset)
                .WithMany(p => p.FixedAssetAttributes)
                .HasForeignKey(d => d.FixedAssetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FIXEDAST_ATTR");
        });

        modelBuilder.Entity<FixedAssetDepMethod>(entity =>
        {
            entity.HasKey(e => new { e.DepreciationCustomMethodId, e.FixedAssetId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("FIXED_ASSET_DEP_METHOD");


            entity.HasIndex(e => e.DepreciationCustomMethodId)
                .HasName("FIXDAST_DM_CMET");

            entity.HasIndex(e => e.FixedAssetId)
                .HasName("FIXDAST_DM_FXAST");


            entity.Property(e => e.DepreciationCustomMethodId)
                .HasColumnName("DEPRECIATION_CUSTOM_METHOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FixedAssetId)
                .HasColumnName("FIXED_ASSET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.DepreciationCustomMethod)
                .WithMany(p => p.FixedAssetDepMethods)
                .HasForeignKey(d => d.DepreciationCustomMethodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FIXDAST_DM_CMET");

            entity.HasOne(d => d.FixedAsset)
                .WithMany(p => p.FixedAssetDepMethods)
                .HasForeignKey(d => d.FixedAssetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FIXDAST_DM_FXAST");
        });

        modelBuilder.Entity<FixedAssetGeoPoint>(entity =>
        {
            entity.HasKey(e => new { e.FixedAssetId, e.GeoPointId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("FIXED_ASSET_GEO_POINT");


            entity.HasIndex(e => e.FixedAssetId)
                .HasName("FXDASTGEOPT_FXDAST");

            entity.HasIndex(e => e.GeoPointId)
                .HasName("FXDASTGEOPT_GEOPT");


            entity.Property(e => e.FixedAssetId)
                .HasColumnName("FIXED_ASSET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GeoPointId)
                .HasColumnName("GEO_POINT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.FixedAsset)
                .WithMany(p => p.FixedAssetGeoPoints)
                .HasForeignKey(d => d.FixedAssetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FXDASTGEOPT_FXDAST");

            entity.HasOne(d => d.GeoPoint)
                .WithMany(p => p.FixedAssetGeoPoints)
                .HasForeignKey(d => d.GeoPointId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FXDASTGEOPT_GEOPT");
        });

        modelBuilder.Entity<FixedAssetIdent>(entity =>
        {
            entity.HasKey(e => new { e.FixedAssetId, e.FixedAssetIdentTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("FIXED_ASSET_IDENT");


            entity.HasIndex(e => e.FixedAssetId)
                .HasName("FIXDASTID_FXAST");

            entity.HasIndex(e => e.FixedAssetIdentTypeId)
                .HasName("FIXDASTID_IDTYP");


            entity.Property(e => e.FixedAssetId)
                .HasColumnName("FIXED_ASSET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FixedAssetIdentTypeId)
                .HasColumnName("FIXED_ASSET_IDENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.IdValue)
                .HasColumnName("ID_VALUE")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.FixedAsset)
                .WithMany(p => p.FixedAssetIdents)
                .HasForeignKey(d => d.FixedAssetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FIXDASTID_FXAST");

            entity.HasOne(d => d.FixedAssetIdentType)
                .WithMany(p => p.FixedAssetIdents)
                .HasForeignKey(d => d.FixedAssetIdentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FIXDASTID_IDTYP");
        });

        modelBuilder.Entity<FixedAssetIdentType>(entity =>
        {
            entity.ToTable("FIXED_ASSET_IDENT_TYPE");


            entity.Property(e => e.FixedAssetIdentTypeId)
                .HasColumnName("FIXED_ASSET_IDENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<FixedAssetMaint>(entity =>
        {
            entity.HasKey(e => new { e.FixedAssetId, e.MaintHistSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("FIXED_ASSET_MAINT");


            entity.HasIndex(e => e.FixedAssetId)
                .HasName("FXDASTMNT_FXAST");

            entity.HasIndex(e => e.IntervalMeterTypeId)
                .HasName("FXDASTMNT_PDMTTYP");

            entity.HasIndex(e => e.IntervalUomId)
                .HasName("FXDASTMNT_INTUOM");


            entity.HasIndex(e => e.ProductMaintTypeId)
                .HasName("FXDASTMNT_PMNTP");

            entity.HasIndex(e => e.PurchaseOrderId)
                .HasName("FXDASTMNT_PURORD");

            entity.HasIndex(e => e.ScheduleWorkEffortId)
                .HasName("FXDASTMNT_SCHWE");

            entity.HasIndex(e => e.StatusId)
                .HasName("FXDASTMNT_SI");

            entity.Property(e => e.FixedAssetId)
                .HasColumnName("FIXED_ASSET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.MaintHistSeqId)
                .HasColumnName("MAINT_HIST_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.IntervalMeterTypeId)
                .HasColumnName("INTERVAL_METER_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.IntervalQuantity)
                .HasColumnName("INTERVAL_QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.IntervalUomId)
                .HasColumnName("INTERVAL_UOM_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.ProductMaintSeqId)
                .HasColumnName("PRODUCT_MAINT_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductMaintTypeId)
                .HasColumnName("PRODUCT_MAINT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PurchaseOrderId)
                .HasColumnName("PURCHASE_ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ScheduleWorkEffortId)
                .HasColumnName("SCHEDULE_WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.FixedAsset)
                .WithMany(p => p.FixedAssetMaints)
                .HasForeignKey(d => d.FixedAssetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FXDASTMNT_FXAST");

            entity.HasOne(d => d.IntervalMeterType)
                .WithMany(p => p.FixedAssetMaints)
                .HasForeignKey(d => d.IntervalMeterTypeId)
                .HasConstraintName("FXDASTMNT_PDMTTYP");

            entity.HasOne(d => d.IntervalUom)
                .WithMany(p => p.FixedAssetMaints)
                .HasForeignKey(d => d.IntervalUomId)
                .HasConstraintName("FXDASTMNT_INTUOM");

            entity.HasOne(d => d.ProductMaintType)
                .WithMany(p => p.FixedAssetMaints)
                .HasForeignKey(d => d.ProductMaintTypeId)
                .HasConstraintName("FXDASTMNT_PMNTP");

            entity.HasOne(d => d.PurchaseOrder)
                .WithMany(p => p.FixedAssetMaints)
                .HasForeignKey(d => d.PurchaseOrderId)
                .HasConstraintName("FXDASTMNT_PURORD");

            entity.HasOne(d => d.ScheduleWorkEffort)
                .WithMany(p => p.FixedAssetMaints)
                .HasForeignKey(d => d.ScheduleWorkEffortId)
                .HasConstraintName("FXDASTMNT_SCHWE");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.FixedAssetMaints)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("FXDASTMNT_SI");
        });

        modelBuilder.Entity<FixedAssetMaintOrder>(entity =>
        {
            entity.HasKey(e => new { e.FixedAssetId, e.MaintHistSeqId, e.OrderId, e.OrderItemSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("FIXED_ASSET_MAINT_ORDER");


            entity.HasIndex(e => e.FixedAssetId)
                .HasName("FXDASTMNT_ORD_FXAS");


            entity.HasIndex(e => e.OrderId)
                .HasName("FXDASTMNT_ORD");

            entity.Property(e => e.FixedAssetId)
                .HasColumnName("FIXED_ASSET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.MaintHistSeqId)
                .HasColumnName("MAINT_HIST_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.FixedAsset)
                .WithMany(p => p.FixedAssetMaintOrders)
                .HasForeignKey(d => d.FixedAssetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FXDASTMNT_ORD_FXAS");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.FixedAssetMaintOrders)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FXDASTMNT_ORD");
        });

        modelBuilder.Entity<FixedAssetMeter>(entity =>
        {
            entity.HasKey(e => new { e.FixedAssetId, e.ProductMeterTypeId, e.ReadingDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("FIXED_ASSET_METER");


            entity.HasIndex(e => e.ProductMeterTypeId)
                .HasName("FXDASTMTR_PMTYP");

            entity.HasIndex(e => new { e.FixedAssetId, e.MaintHistSeqId })
                .HasName("FXDASTMTR_FAMNT");

            entity.Property(e => e.FixedAssetId)
                .HasColumnName("FIXED_ASSET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductMeterTypeId)
                .HasColumnName("PRODUCT_METER_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReadingDate)
                .HasColumnName("READING_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.MaintHistSeqId)
                .HasColumnName("MAINT_HIST_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.MeterValue)
                .HasColumnName("METER_VALUE")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReadingReasonEnumId)
                .HasColumnName("READING_REASON_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ProductMeterType)
                .WithMany(p => p.FixedAssetMeters)
                .HasForeignKey(d => d.ProductMeterTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FXDASTMTR_PMTYP");

            entity.HasOne(d => d.FixedAssetMaint)
                .WithMany(p => p.FixedAssetMeters)
                .HasForeignKey(d => new { d.FixedAssetId, d.MaintHistSeqId })
                .HasConstraintName("FXDASTMTR_FAMNT");
        });

        modelBuilder.Entity<FixedAssetProduct>(entity =>
        {
            entity.HasKey(e => new { e.FixedAssetId, e.ProductId, e.FixedAssetProductTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("FIXED_ASSET_PRODUCT");


            entity.HasIndex(e => e.FixedAssetId)
                .HasName("FIXDASTPRD_FA");

            entity.HasIndex(e => e.FixedAssetProductTypeId)
                .HasName("FIXDASTPRD_FAPT");


            entity.HasIndex(e => e.ProductId)
                .HasName("FIXDASTPRD_PRD");

            entity.HasIndex(e => e.QuantityUomId)
                .HasName("FIXDASTPRD_UOM");

            entity.Property(e => e.FixedAssetId)
                .HasColumnName("FIXED_ASSET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.FixedAssetProductTypeId)
                .HasColumnName("FIXED_ASSET_PRODUCT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.QuantityUomId)
                .HasColumnName("QUANTITY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.FixedAsset)
                .WithMany(p => p.FixedAssetProducts)
                .HasForeignKey(d => d.FixedAssetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FIXDASTPRD_FA");

            entity.HasOne(d => d.FixedAssetProductType)
                .WithMany(p => p.FixedAssetProducts)
                .HasForeignKey(d => d.FixedAssetProductTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FIXDASTPRD_FAPT");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.FixedAssetProducts)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FIXDASTPRD_PRD");

            entity.HasOne(d => d.QuantityUom)
                .WithMany(p => p.FixedAssetProducts)
                .HasForeignKey(d => d.QuantityUomId)
                .HasConstraintName("FIXDASTPRD_UOM");
        });

        modelBuilder.Entity<FixedAssetProductType>(entity =>
        {
            entity.ToTable("FIXED_ASSET_PRODUCT_TYPE");


            entity.Property(e => e.FixedAssetProductTypeId)
                .HasColumnName("FIXED_ASSET_PRODUCT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<FixedAssetRegistration>(entity =>
        {
            entity.HasKey(e => new { e.FixedAssetId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("FIXED_ASSET_REGISTRATION");


            entity.HasIndex(e => e.FixedAssetId)
                .HasName("FIXDASTREG_FXAST");

            entity.HasIndex(e => e.GovAgencyPartyId)
                .HasName("FIXDASTREG_GVAPTY");


            entity.Property(e => e.FixedAssetId)
                .HasColumnName("FIXED_ASSET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GovAgencyPartyId)
                .HasColumnName("GOV_AGENCY_PARTY_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.LicenseNumber)
                .HasColumnName("LICENSE_NUMBER")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.RegistrationDate)
                .HasColumnName("REGISTRATION_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.RegistrationNumber)
                .HasColumnName("REGISTRATION_NUMBER")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.FixedAsset)
                .WithMany(p => p.FixedAssetRegistrations)
                .HasForeignKey(d => d.FixedAssetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FIXDASTREG_FXAST");

            entity.HasOne(d => d.GovAgencyParty)
                .WithMany(p => p.FixedAssetRegistrations)
                .HasForeignKey(d => d.GovAgencyPartyId)
                .HasConstraintName("FIXDASTREG_GVAPTY");
        });

        modelBuilder.Entity<FixedAssetStdCost>(entity =>
        {
            entity.HasKey(e => new { e.FixedAssetId, e.FixedAssetStdCostTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("FIXED_ASSET_STD_COST");

            entity.HasIndex(e => e.AmountUomId)
                .HasName("FIXASTCO_AMCURR");


            entity.HasIndex(e => e.FixedAssetId)
                .HasName("FIXASTCO_FIXAST");

            entity.HasIndex(e => e.FixedAssetStdCostTypeId)
                .HasName("FIXASTCO_TYPCOS");


            entity.Property(e => e.FixedAssetId)
                .HasColumnName("FIXED_ASSET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FixedAssetStdCostTypeId)
                .HasColumnName("FIXED_ASSET_STD_COST_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.AmountUomId)
                .HasColumnName("AMOUNT_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.AmountUom)
                .WithMany(p => p.FixedAssetStdCosts)
                .HasForeignKey(d => d.AmountUomId)
                .HasConstraintName("FIXASTCO_AMCURR");

            entity.HasOne(d => d.FixedAsset)
                .WithMany(p => p.FixedAssetStdCosts)
                .HasForeignKey(d => d.FixedAssetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FIXASTCO_FIXAST");

            entity.HasOne(d => d.FixedAssetStdCostType)
                .WithMany(p => p.FixedAssetStdCosts)
                .HasForeignKey(d => d.FixedAssetStdCostTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FIXASTCO_TYPCOS");
        });

        modelBuilder.Entity<FixedAssetStdCostType>(entity =>
        {
            entity.ToTable("FIXED_ASSET_STD_COST_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("FIXASTCO_TYPPAR");

            entity.Property(e => e.FixedAssetStdCostTypeId)
                .HasColumnName("FIXED_ASSET_STD_COST_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("FIXASTCO_TYPPAR");
        });

        modelBuilder.Entity<FixedAssetType>(entity =>
        {
            entity.ToTable("FIXED_ASSET_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("FIXEDAST_TYPPAR");

            entity.Property(e => e.FixedAssetTypeId)
                .HasColumnName("FIXED_ASSET_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("FIXEDAST_TYPPAR");
        });

        modelBuilder.Entity<FixedAssetTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.FixedAssetTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("FIXED_ASSET_TYPE_ATTR");


            entity.HasIndex(e => e.FixedAssetTypeId)
                .HasName("FIXEDAST_TYPATTR");


            entity.Property(e => e.FixedAssetTypeId)
                .HasColumnName("FIXED_ASSET_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.FixedAssetType)
                .WithMany(p => p.FixedAssetTypeAttrs)
                .HasForeignKey(d => d.FixedAssetTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FIXEDAST_TYPATTR");
        });

        modelBuilder.Entity<FixedAssetTypeGlAccount>(entity =>
        {
            entity.HasKey(e => new { e.FixedAssetTypeId, e.FixedAssetId, e.OrganizationPartyId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("FIXED_ASSET_TYPE_GL_ACCOUNT");

            entity.HasIndex(e => e.AccDepGlAccountId)
                .HasName("FATGL_ACCDGL");

            entity.HasIndex(e => e.AssetGlAccountId)
                .HasName("FATGL_AGL");


            entity.HasIndex(e => e.DepGlAccountId)
                .HasName("FATGL_DGL");


            entity.HasIndex(e => e.LossGlAccountId)
                .HasName("FATGL_LGL");

            entity.HasIndex(e => e.OrganizationPartyId)
                .HasName("FATGL_OP");

            entity.HasIndex(e => e.ProfitGlAccountId)
                .HasName("FATGL_PGL");

            entity.Property(e => e.FixedAssetTypeId)
                .HasColumnName("FIXED_ASSET_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FixedAssetId)
                .HasColumnName("FIXED_ASSET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrganizationPartyId)
                .HasColumnName("ORGANIZATION_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AccDepGlAccountId)
                .HasColumnName("ACC_DEP_GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AssetGlAccountId)
                .HasColumnName("ASSET_GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DepGlAccountId)
                .HasColumnName("DEP_GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.LossGlAccountId)
                .HasColumnName("LOSS_GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProfitGlAccountId)
                .HasColumnName("PROFIT_GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.AccDepGlAccount)
                .WithMany(p => p.FixedAssetTypeGlAccountAccDepGlAccounts)
                .HasForeignKey(d => d.AccDepGlAccountId)
                .HasConstraintName("FATGL_ACCDGL");

            entity.HasOne(d => d.AssetGlAccount)
                .WithMany(p => p.FixedAssetTypeGlAccountAssetGlAccounts)
                .HasForeignKey(d => d.AssetGlAccountId)
                .HasConstraintName("FATGL_AGL");

            entity.HasOne(d => d.DepGlAccount)
                .WithMany(p => p.FixedAssetTypeGlAccountDepGlAccounts)
                .HasForeignKey(d => d.DepGlAccountId)
                .HasConstraintName("FATGL_DGL");

            entity.HasOne(d => d.LossGlAccount)
                .WithMany(p => p.FixedAssetTypeGlAccountLossGlAccounts)
                .HasForeignKey(d => d.LossGlAccountId)
                .HasConstraintName("FATGL_LGL");

            entity.HasOne(d => d.OrganizationParty)
                .WithMany(p => p.FixedAssetTypeGlAccounts)
                .HasForeignKey(d => d.OrganizationPartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FATGL_OP");

            entity.HasOne(d => d.ProfitGlAccount)
                .WithMany(p => p.FixedAssetTypeGlAccountProfitGlAccounts)
                .HasForeignKey(d => d.ProfitGlAccountId)
                .HasConstraintName("FATGL_PGL");
        });

        modelBuilder.Entity<FtpAddress>(entity =>
        {
            entity.HasKey(e => e.ContactMechId)
                .HasName("PRIMARY");

            entity.ToTable("FTP_ADDRESS");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("FTP_SRV_CMECH");


            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BinaryTransfer)
                .HasColumnName("BINARY_TRANSFER")
                .HasColumnType("char(1)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DefaultTimeout)
                .HasColumnName("DEFAULT_TIMEOUT")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.FilePath)
                .HasColumnName("FILE_PATH")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.FtpPassword)
                .HasColumnName("FTP_PASSWORD")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.Hostname)
                .HasColumnName("HOSTNAME")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.PassiveMode)
                .HasColumnName("PASSIVE_MODE")
                .HasColumnType("char(1)");

            entity.Property(e => e.Port)
                .HasColumnName("PORT")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.Username)
                .HasColumnName("USERNAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ZipFile)
                .HasColumnName("ZIP_FILE")
                .HasColumnType("char(1)");

            entity.HasOne(d => d.ContactMech)
                .WithOne(p => p.FtpAddress)
                .HasForeignKey<FtpAddress>(d => d.ContactMechId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FTP_SRV_CMECH");
        });

        modelBuilder.Entity<Geo>(entity =>
        {
            entity.ToTable("GEO");


            entity.HasIndex(e => e.GeoTypeId)
                .HasName("GEO_TO_TYPE");


            entity.Property(e => e.GeoId)
                .HasColumnName("GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Abbreviation)
                .HasColumnName("ABBREVIATION")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GeoCode)
                .HasColumnName("GEO_CODE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.GeoName)
                .HasColumnName("GEO_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.GeoSecCode)
                .HasColumnName("GEO_SEC_CODE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.GeoTypeId)
                .HasColumnName("GEO_TYPE_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.WellKnownText)
                .HasColumnName("WELL_KNOWN_TEXT")
                .HasColumnType("longtext");

            entity.HasOne(d => d.GeoType)
                .WithMany(p => p.Geos)
                .HasForeignKey(d => d.GeoTypeId)
                .HasConstraintName("GEO_TO_TYPE");
        });

        modelBuilder.Entity<GeoAssoc>(entity =>
        {
            entity.HasKey(e => new { e.GeoId, e.GeoIdTo })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("GEO_ASSOC");


            entity.HasIndex(e => e.GeoAssocTypeId)
                .HasName("GEO_ASSC_TO_TYPE");

            entity.HasIndex(e => e.GeoId)
                .HasName("GEO_ASSC_TO_MAIN");

            entity.HasIndex(e => e.GeoIdTo)
                .HasName("GEO_ASSC_TO_ASSC");


            entity.Property(e => e.GeoId)
                .HasColumnName("GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GeoIdTo)
                .HasColumnName("GEO_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GeoAssocTypeId)
                .HasColumnName("GEO_ASSOC_TYPE_ID")
                .HasColumnType("varchar(36)");


            entity.HasOne(d => d.GeoAssocType)
                .WithMany(p => p.GeoAssocs)
                .HasForeignKey(d => d.GeoAssocTypeId)
                .HasConstraintName("GEO_ASSC_TO_TYPE");

            entity.HasOne(d => d.Geo)
                .WithMany(p => p.GeoAssocGeos)
                .HasForeignKey(d => d.GeoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("GEO_ASSC_TO_MAIN");

            entity.HasOne(d => d.GeoIdToNavigation)
                .WithMany(p => p.GeoAssocGeoIdToNavigations)
                .HasForeignKey(d => d.GeoIdTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("GEO_ASSC_TO_ASSC");
        });

        modelBuilder.Entity<GeoAssocType>(entity =>
        {
            entity.ToTable("GEO_ASSOC_TYPE");


            entity.Property(e => e.GeoAssocTypeId)
                .HasColumnName("GEO_ASSOC_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<GeoPoint>(entity =>
        {
            entity.ToTable("GEO_POINT");


            entity.HasIndex(e => e.DataSourceId)
                .HasName("GEOPOINT_DTSRC");

            entity.HasIndex(e => e.ElevationUomId)
                .HasName("GPT_ELEV_UOM");

            entity.HasIndex(e => e.GeoPointTypeEnumId)
                .HasName("GEOPOINT_TYPE");


            entity.Property(e => e.GeoPointId)
                .HasColumnName("GEO_POINT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DataSourceId)
                .HasColumnName("DATA_SOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.Elevation)
                .HasColumnName("ELEVATION")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ElevationUomId)
                .HasColumnName("ELEVATION_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GeoPointTypeEnumId)
                .HasColumnName("GEO_POINT_TYPE_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Information)
                .HasColumnName("INFORMATION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.Latitude)
                .IsRequired()
                .HasColumnName("LATITUDE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.Longitude)
                .IsRequired()
                .HasColumnName("LONGITUDE")
                .HasColumnType("varchar(60)");

            entity.HasOne(d => d.DataSource)
                .WithMany(p => p.GeoPoints)
                .HasForeignKey(d => d.DataSourceId)
                .HasConstraintName("GEOPOINT_DTSRC");

            entity.HasOne(d => d.ElevationUom)
                .WithMany(p => p.GeoPoints)
                .HasForeignKey(d => d.ElevationUomId)
                .HasConstraintName("GPT_ELEV_UOM");

            entity.HasOne(d => d.GeoPointTypeEnum)
                .WithMany(p => p.GeoPoints)
                .HasForeignKey(d => d.GeoPointTypeEnumId)
                .HasConstraintName("GEOPOINT_TYPE");
        });

        modelBuilder.Entity<GeoType>(entity =>
        {
            entity.ToTable("GEO_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("GEO_TYPE_PARENT");

            entity.Property(e => e.GeoTypeId)
                .HasColumnName("GEO_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("GEO_TYPE_PARENT");
        });

        modelBuilder.Entity<GiftCard>(entity =>
        {
            entity.HasKey(e => e.PaymentMethodId)
                .HasName("PRIMARY");

            entity.ToTable("GIFT_CARD");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("GIFTCARD_CMECH");


            entity.HasIndex(e => e.PaymentMethodId)
                .HasName("GIFTCARD_PMNTMETH");

            entity.Property(e => e.PaymentMethodId)
                .HasColumnName("PAYMENT_METHOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CardNumber)
                .HasColumnName("CARD_NUMBER")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ExpireDate)
                .HasColumnName("EXPIRE_DATE")
                .HasColumnType("varchar(7)");


            entity.Property(e => e.PinNumber)
                .HasColumnName("PIN_NUMBER")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.GiftCards)
                .HasForeignKey(d => d.ContactMechId)
                .HasConstraintName("GIFTCARD_CMECH");

            entity.HasOne(d => d.ContactMechNavigation)
                .WithMany(p => p.GiftCards)
                .HasForeignKey(d => d.ContactMechId)
                .HasConstraintName("GIFTCARD_PADDR");

            entity.HasOne(d => d.PaymentMethod)
                .WithOne(p => p.GiftCard)
                .HasForeignKey<GiftCard>(d => d.PaymentMethodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("GIFTCARD_PMNTMETH");
        });

        modelBuilder.Entity<GiftCardFulfillment>(entity =>
        {
            entity.HasKey(e => e.FulfillmentId)
                .HasName("PRIMARY");

            entity.ToTable("GIFT_CARD_FULFILLMENT");


            entity.HasIndex(e => e.OrderId)
                .HasName("GC_FILL_ODRH");

            entity.HasIndex(e => e.PartyId)
                .HasName("GC_FILL_PARTY");

            entity.HasIndex(e => e.SurveyResponseId)
                .HasName("GC_FILL_SURVY");

            entity.HasIndex(e => e.TypeEnumId)
                .HasName("GC_FILL_ENUM");

            entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId })
                .HasName("GC_FILL_ODRI");

            entity.Property(e => e.FulfillmentId)
                .HasColumnName("FULFILLMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.AuthCode)
                .HasColumnName("AUTH_CODE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CardNumber)
                .HasColumnName("CARD_NUMBER")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FulfillmentDate)
                .HasColumnName("FULFILLMENT_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.MerchantId)
                .HasColumnName("MERCHANT_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PinNumber)
                .HasColumnName("PIN_NUMBER")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ReferenceNum)
                .HasColumnName("REFERENCE_NUM")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.ResponseCode)
                .HasColumnName("RESPONSE_CODE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.SurveyResponseId)
                .HasColumnName("SURVEY_RESPONSE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TypeEnumId)
                .HasColumnName("TYPE_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.GiftCardFulfillments)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("GC_FILL_ODRH");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.GiftCardFulfillments)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("GC_FILL_PARTY");

            entity.HasOne(d => d.SurveyResponse)
                .WithMany(p => p.GiftCardFulfillments)
                .HasForeignKey(d => d.SurveyResponseId)
                .HasConstraintName("GC_FILL_SURVY");

            entity.HasOne(d => d.TypeEnum)
                .WithMany(p => p.GiftCardFulfillments)
                .HasForeignKey(d => d.TypeEnumId)
                .HasConstraintName("GC_FILL_ENUM");

            entity.HasOne(d => d.OrderI)
                .WithMany(p => p.GiftCardFulfillments)
                .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                .HasConstraintName("GC_FILL_ODRI");
        });

        modelBuilder.Entity<GitHubUser>(entity =>
        {
            entity.ToTable("GIT_HUB_USER");


            entity.HasIndex(e => e.ProductStoreId)
                .HasName("GITHUB_USER_STORE");

            entity.Property(e => e.GitHubUserId)
                .HasColumnName("GIT_HUB_USER_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.AccessToken)
                .HasColumnName("ACCESS_TOKEN")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.EnvPrefix)
                .HasColumnName("ENV_PREFIX")
                .HasColumnType("varchar(60)");


            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TokenType)
                .HasColumnName("TOKEN_TYPE")
                .HasColumnType("varchar(60)");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.GitHubUsers)
                .HasForeignKey(d => d.ProductStoreId)
                .HasConstraintName("GITHUB_USER_STORE");
        });

        modelBuilder.Entity<GlAccount>(entity =>
        {
            entity.ToTable("GL_ACCOUNT");

            entity.HasIndex(e => e.AccountCode)
                .HasName("GLACCT_UNQCD")
                .IsUnique();


            entity.HasIndex(e => e.GlAccountClassId)
                .HasName("GLACCT_CLSS");

            entity.HasIndex(e => e.GlAccountTypeId)
                .HasName("GLACCT_TYPE");

            entity.HasIndex(e => e.GlResourceTypeId)
                .HasName("GLACCT_REC");

            entity.HasIndex(e => e.GlXbrlClassId)
                .HasName("GLACCT_XBRLCLS");


            entity.HasIndex(e => e.ParentGlAccountId)
                .HasName("GLACCT_PAR");

            entity.Property(e => e.GlAccountId)
                .HasColumnName("GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AccountCode)
                .HasColumnName("ACCOUNT_CODE")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.AccountName)
                .HasColumnName("ACCOUNT_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ExternalId)
                .HasColumnName("EXTERNAL_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GlAccountClassId)
                .HasColumnName("GL_ACCOUNT_CLASS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GlAccountTypeId)
                .HasColumnName("GL_ACCOUNT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GlResourceTypeId)
                .HasColumnName("GL_RESOURCE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GlXbrlClassId)
                .HasColumnName("GL_XBRL_CLASS_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.ParentGlAccountId)
                .HasColumnName("PARENT_GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.HasOne(d => d.GlAccountClass)
                .WithMany(p => p.GlAccounts)
                .HasForeignKey(d => d.GlAccountClassId)
                .HasConstraintName("GLACCT_CLSS");

            entity.HasOne(d => d.GlAccountType)
                .WithMany(p => p.GlAccounts)
                .HasForeignKey(d => d.GlAccountTypeId)
                .HasConstraintName("GLACCT_TYPE");

            entity.HasOne(d => d.GlResourceType)
                .WithMany(p => p.GlAccounts)
                .HasForeignKey(d => d.GlResourceTypeId)
                .HasConstraintName("GLACCT_REC");

            entity.HasOne(d => d.GlXbrlClass)
                .WithMany(p => p.GlAccounts)
                .HasForeignKey(d => d.GlXbrlClassId)
                .HasConstraintName("GLACCT_XBRLCLS");

            entity.HasOne(d => d.ParentGlAccount)
                .WithMany(p => p.InverseParentGlAccount)
                .HasForeignKey(d => d.ParentGlAccountId)
                .HasConstraintName("GLACCT_PAR");
        });

        modelBuilder.Entity<GlAccountCategory>(entity =>
        {
            entity.ToTable("GL_ACCOUNT_CATEGORY");


            entity.HasIndex(e => e.GlAccountCategoryTypeId)
                .HasName("GLACT_CAT_TP");


            entity.Property(e => e.GlAccountCategoryId)
                .HasColumnName("GL_ACCOUNT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.GlAccountCategoryTypeId)
                .HasColumnName("GL_ACCOUNT_CATEGORY_TYPE_ID")
                .HasColumnType("varchar(36)");


            entity.HasOne(d => d.GlAccountCategoryType)
                .WithMany(p => p.GlAccountCategories)
                .HasForeignKey(d => d.GlAccountCategoryTypeId)
                .HasConstraintName("GLACT_CAT_TP");
        });

        modelBuilder.Entity<GlAccountCategoryMember>(entity =>
        {
            entity.HasKey(e => new { e.GlAccountId, e.GlAccountCategoryId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("GL_ACCOUNT_CATEGORY_MEMBER");


            entity.HasIndex(e => e.GlAccountCategoryId)
                .HasName("GLACT_CATMBR_CAT");

            entity.HasIndex(e => e.GlAccountId)
                .HasName("GLACT_CATMBR_AC");


            entity.Property(e => e.GlAccountId)
                .HasColumnName("GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GlAccountCategoryId)
                .HasColumnName("GL_ACCOUNT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.AmountPercentage)
                .HasColumnName("AMOUNT_PERCENTAGE")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.GlAccountCategory)
                .WithMany(p => p.GlAccountCategoryMembers)
                .HasForeignKey(d => d.GlAccountCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("GLACT_CATMBR_CAT");

            entity.HasOne(d => d.GlAccount)
                .WithMany(p => p.GlAccountCategoryMembers)
                .HasForeignKey(d => d.GlAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("GLACT_CATMBR_AC");
        });

        modelBuilder.Entity<GlAccountCategoryType>(entity =>
        {
            entity.ToTable("GL_ACCOUNT_CATEGORY_TYPE");


            entity.Property(e => e.GlAccountCategoryTypeId)
                .HasColumnName("GL_ACCOUNT_CATEGORY_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<GlAccountClass>(entity =>
        {
            entity.ToTable("GL_ACCOUNT_CLASS");


            entity.HasIndex(e => e.ParentClassId)
                .HasName("GLACTCLS_PAR");

            entity.Property(e => e.GlAccountClassId)
                .HasColumnName("GL_ACCOUNT_CLASS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.IsAssetClass)
                .HasColumnName("IS_ASSET_CLASS")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentClassId)
                .HasColumnName("PARENT_CLASS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.ParentClass)
                .WithMany(p => p.InverseParentClass)
                .HasForeignKey(d => d.ParentClassId)
                .HasConstraintName("GLACTCLS_PAR");
        });

        modelBuilder.Entity<GlAccountGroup>(entity =>
        {
            entity.ToTable("GL_ACCOUNT_GROUP");


            entity.HasIndex(e => e.GlAccountGroupTypeId)
                .HasName("GLACT_GRP_TP");


            entity.Property(e => e.GlAccountGroupId)
                .HasColumnName("GL_ACCOUNT_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.GlAccountGroupTypeId)
                .HasColumnName("GL_ACCOUNT_GROUP_TYPE_ID")
                .HasColumnType("varchar(36)");


            entity.HasOne(d => d.GlAccountGroupType)
                .WithMany(p => p.GlAccountGroups)
                .HasForeignKey(d => d.GlAccountGroupTypeId)
                .HasConstraintName("GLACT_GRP_TP");
        });

        modelBuilder.Entity<GlAccountGroupMember>(entity =>
        {
            entity.HasKey(e => new { e.GlAccountId, e.GlAccountGroupTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("GL_ACCOUNT_GROUP_MEMBER");


            entity.HasIndex(e => e.GlAccountGroupId)
                .HasName("GLACT_GPMBR_GP");

            entity.HasIndex(e => e.GlAccountGroupTypeId)
                .HasName("GLACT_GPMBR_TP");

            entity.HasIndex(e => e.GlAccountId)
                .HasName("GLACT_GPMBR_AC");


            entity.Property(e => e.GlAccountId)
                .HasColumnName("GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GlAccountGroupTypeId)
                .HasColumnName("GL_ACCOUNT_GROUP_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GlAccountGroupId)
                .HasColumnName("GL_ACCOUNT_GROUP_ID")
                .HasColumnType("varchar(36)");


            entity.HasOne(d => d.GlAccountGroup)
                .WithMany(p => p.GlAccountGroupMembers)
                .HasForeignKey(d => d.GlAccountGroupId)
                .HasConstraintName("GLACT_GPMBR_GP");

            entity.HasOne(d => d.GlAccountGroupType)
                .WithMany(p => p.GlAccountGroupMembers)
                .HasForeignKey(d => d.GlAccountGroupTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("GLACT_GPMBR_TP");

            entity.HasOne(d => d.GlAccount)
                .WithMany(p => p.GlAccountGroupMembers)
                .HasForeignKey(d => d.GlAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("GLACT_GPMBR_AC");
        });

        modelBuilder.Entity<GlAccountGroupType>(entity =>
        {
            entity.ToTable("GL_ACCOUNT_GROUP_TYPE");


            entity.Property(e => e.GlAccountGroupTypeId)
                .HasColumnName("GL_ACCOUNT_GROUP_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<GlAccountHistory>(entity =>
        {
            entity.HasKey(e => new { e.GlAccountId, e.OrganizationPartyId, e.CustomTimePeriodId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("GL_ACCOUNT_HISTORY");


            entity.HasIndex(e => e.CustomTimePeriodId)
                .HasName("GLACCT_HST_CTP");

            entity.HasIndex(e => e.GlAccountId)
                .HasName("GLACCT_HST_GLA");


            entity.HasIndex(e => e.OrganizationPartyId)
                .HasName("GLACCT_HST_PARTY");

            entity.Property(e => e.GlAccountId)
                .HasColumnName("GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrganizationPartyId)
                .HasColumnName("ORGANIZATION_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CustomTimePeriodId)
                .HasColumnName("CUSTOM_TIME_PERIOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.EndingBalance)
                .HasColumnName("ENDING_BALANCE")
                .HasColumnType("decimal(18,2)");


            entity.Property(e => e.OpeningBalance)
                .HasColumnName("OPENING_BALANCE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.PostedCredits)
                .HasColumnName("POSTED_CREDITS")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.PostedDebits)
                .HasColumnName("POSTED_DEBITS")
                .HasColumnType("decimal(18,2)");

            entity.HasOne(d => d.CustomTimePeriod)
                .WithMany(p => p.GlAccountHistories)
                .HasForeignKey(d => d.CustomTimePeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("GLACCT_HST_CTP");

            entity.HasOne(d => d.GlAccount)
                .WithMany(p => p.GlAccountHistories)
                .HasForeignKey(d => d.GlAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("GLACCT_HST_GLA");

            entity.HasOne(d => d.OrganizationParty)
                .WithMany(p => p.GlAccountHistories)
                .HasForeignKey(d => d.OrganizationPartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("GLACCT_HST_PARTY");
        });

        modelBuilder.Entity<GlAccountOrganization>(entity =>
        {
            entity.HasKey(e => new { e.GlAccountId, e.OrganizationPartyId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("GL_ACCOUNT_ORGANIZATION");


            entity.HasIndex(e => e.GlAccountId)
                .HasName("GLACCT_ORG_GLA");


            entity.HasIndex(e => e.OrganizationPartyId)
                .HasName("GLACCT_ORG_PARTY");

            entity.Property(e => e.GlAccountId)
                .HasColumnName("GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrganizationPartyId)
                .HasColumnName("ORGANIZATION_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.GlAccount)
                .WithMany(p => p.GlAccountOrganizations)
                .HasForeignKey(d => d.GlAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("GLACCT_ORG_GLA");

            entity.HasOne(d => d.OrganizationParty)
                .WithMany(p => p.GlAccountOrganizations)
                .HasForeignKey(d => d.OrganizationPartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("GLACCT_ORG_PARTY");
        });

        modelBuilder.Entity<GlAccountRole>(entity =>
        {
            entity.HasKey(e => new { e.GlAccountId, e.PartyId, e.RoleTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("GL_ACCOUNT_ROLE");


            entity.HasIndex(e => e.GlAccountId)
                .HasName("GLACCT_RL_GLA");


            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("GLACCT_RL_PTRLE");

            entity.Property(e => e.GlAccountId)
                .HasColumnName("GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.GlAccount)
                .WithMany(p => p.GlAccountRoles)
                .HasForeignKey(d => d.GlAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("GLACCT_RL_GLA");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.GlAccountRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("GLACCT_RL_PTRLE");
        });

        modelBuilder.Entity<GlAccountType>(entity =>
        {
            entity.ToTable("GL_ACCOUNT_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("GLACTTY_PAR");

            entity.Property(e => e.GlAccountTypeId)
                .HasColumnName("GL_ACCOUNT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("GLACTTY_PAR");
        });

        modelBuilder.Entity<GlAccountTypeDefault>(entity =>
        {
            entity.HasKey(e => new { e.GlAccountTypeId, e.OrganizationPartyId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("GL_ACCOUNT_TYPE_DEFAULT");


            entity.HasIndex(e => e.GlAccountId)
                .HasName("GLACCT_TPDF_GLA");

            entity.HasIndex(e => e.GlAccountTypeId)
                .HasName("GLACCT_TPDF_GLAT");


            entity.HasIndex(e => e.OrganizationPartyId)
                .HasName("GLACCT_TPDF_OPTY");

            entity.Property(e => e.GlAccountTypeId)
                .HasColumnName("GL_ACCOUNT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrganizationPartyId)
                .HasColumnName("ORGANIZATION_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GlAccountId)
                .HasColumnName("GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");


            entity.HasOne(d => d.GlAccount)
                .WithMany(p => p.GlAccountTypeDefaults)
                .HasForeignKey(d => d.GlAccountId)
                .HasConstraintName("GLACCT_TPDF_GLA");

            entity.HasOne(d => d.GlAccountType)
                .WithMany(p => p.GlAccountTypeDefaults)
                .HasForeignKey(d => d.GlAccountTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("GLACCT_TPDF_GLAT");

            entity.HasOne(d => d.OrganizationParty)
                .WithMany(p => p.GlAccountTypeDefaults)
                .HasForeignKey(d => d.OrganizationPartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("GLACCT_TPDF_OPTY");
        });

        modelBuilder.Entity<GlBudgetXref>(entity =>
        {
            entity.HasKey(e => new { e.GlAccountId, e.BudgetItemTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("GL_BUDGET_XREF");

            entity.HasIndex(e => e.BudgetItemTypeId)
                .HasName("GL_BDGT_XRF_BIT");


            entity.HasIndex(e => e.GlAccountId)
                .HasName("GL_BDGT_XRF_GLA");


            entity.Property(e => e.GlAccountId)
                .HasColumnName("GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BudgetItemTypeId)
                .HasColumnName("BUDGET_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.AllocationPercentage)
                .HasColumnName("ALLOCATION_PERCENTAGE")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.BudgetItemType)
                .WithMany(p => p.GlBudgetXrefs)
                .HasForeignKey(d => d.BudgetItemTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("GL_BDGT_XRF_BIT");

            entity.HasOne(d => d.GlAccount)
                .WithMany(p => p.GlBudgetXrefs)
                .HasForeignKey(d => d.GlAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("GL_BDGT_XRF_GLA");
        });

        modelBuilder.Entity<GlFiscalType>(entity =>
        {
            entity.ToTable("GL_FISCAL_TYPE");


            entity.Property(e => e.GlFiscalTypeId)
                .HasColumnName("GL_FISCAL_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<GlJournal>(entity =>
        {
            entity.ToTable("GL_JOURNAL");


            entity.HasIndex(e => e.OrganizationPartyId)
                .HasName("GLJOURN_PARTY");

            entity.Property(e => e.GlJournalId)
                .HasColumnName("GL_JOURNAL_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GlJournalName)
                .HasColumnName("GL_JOURNAL_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.IsPosted)
                .HasColumnName("IS_POSTED")
                .HasColumnType("char(1)");


            entity.Property(e => e.OrganizationPartyId)
                .HasColumnName("ORGANIZATION_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PostedDate)
                .HasColumnName("POSTED_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.OrganizationParty)
                .WithMany(p => p.GlJournals)
                .HasForeignKey(d => d.OrganizationPartyId)
                .HasConstraintName("GLJOURN_PARTY");
        });

        modelBuilder.Entity<GlReconciliation>(entity =>
        {
            entity.ToTable("GL_RECONCILIATION");


            entity.HasIndex(e => e.GlAccountId)
                .HasName("GLREC_GLACCT");


            entity.HasIndex(e => e.OrganizationPartyId)
                .HasName("GLREC_GLPARTY");

            entity.HasIndex(e => e.StatusId)
                .HasName("GLREC_STI");

            entity.Property(e => e.GlReconciliationId)
                .HasColumnName("GL_RECONCILIATION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedDate)
                .HasColumnName("CREATED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.GlAccountId)
                .HasColumnName("GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GlReconciliationName)
                .HasColumnName("GL_RECONCILIATION_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.LastModifiedDate)
                .HasColumnName("LAST_MODIFIED_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.OpeningBalance)
                .HasColumnName("OPENING_BALANCE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.OrganizationPartyId)
                .HasColumnName("ORGANIZATION_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReconciledBalance)
                .HasColumnName("RECONCILED_BALANCE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.ReconciledDate)
                .HasColumnName("RECONCILED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.GlAccount)
                .WithMany(p => p.GlReconciliations)
                .HasForeignKey(d => d.GlAccountId)
                .HasConstraintName("GLREC_GLACCT");

            entity.HasOne(d => d.OrganizationParty)
                .WithMany(p => p.GlReconciliations)
                .HasForeignKey(d => d.OrganizationPartyId)
                .HasConstraintName("GLREC_GLPARTY");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.GlReconciliations)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("GLREC_STI");
        });

        modelBuilder.Entity<GlReconciliationEntry>(entity =>
        {
            entity.HasKey(e => new { e.GlReconciliationId, e.AcctgTransId, e.AcctgTransEntrySeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("GL_RECONCILIATION_ENTRY");


            entity.HasIndex(e => e.GlReconciliationId)
                .HasName("GL_RECENT_GLREC");


            entity.HasIndex(e => new { e.AcctgTransId, e.AcctgTransEntrySeqId })
                .HasName("GL_RECENT_ACTTXE");

            entity.Property(e => e.GlReconciliationId)
                .HasColumnName("GL_RECONCILIATION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AcctgTransId)
                .HasColumnName("ACCTG_TRANS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AcctgTransEntrySeqId)
                .HasColumnName("ACCTG_TRANS_ENTRY_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ReconciledAmount)
                .HasColumnName("RECONCILED_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.HasOne(d => d.GlReconciliation)
                .WithMany(p => p.GlReconciliationEntries)
                .HasForeignKey(d => d.GlReconciliationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("GL_RECENT_GLREC");

            entity.HasOne(d => d.AcctgTrans)
                .WithMany(p => p.GlReconciliationEntries)
                .HasForeignKey(d => new { d.AcctgTransId, d.AcctgTransEntrySeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("GL_RECENT_ACTTXE");
        });

        modelBuilder.Entity<GlResourceType>(entity =>
        {
            entity.ToTable("GL_RESOURCE_TYPE");


            entity.Property(e => e.GlResourceTypeId)
                .HasColumnName("GL_RESOURCE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<GlXbrlClass>(entity =>
        {
            entity.ToTable("GL_XBRL_CLASS");


            entity.HasIndex(e => e.ParentGlXbrlClassId)
                .HasName("GL_XBRL_CLSPAR");

            entity.Property(e => e.GlXbrlClassId)
                .HasColumnName("GL_XBRL_CLASS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.ParentGlXbrlClassId)
                .HasColumnName("PARENT_GL_XBRL_CLASS_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentGlXbrlClass)
                .WithMany(p => p.InverseParentGlXbrlClass)
                .HasForeignKey(d => d.ParentGlXbrlClassId)
                .HasConstraintName("GL_XBRL_CLSPAR");
        });

        modelBuilder.Entity<GoodIdentification>(entity =>
        {
            entity.HasKey(e => new { e.GoodIdentificationTypeId, e.ProductId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("GOOD_IDENTIFICATION");


            entity.HasIndex(e => e.GoodIdentificationTypeId)
                .HasName("GOOD_ID_TYPE");

            entity.HasIndex(e => e.IdValue)
                .HasName("GOOD_ID_VALIDX");


            entity.HasIndex(e => e.ProductId)
                .HasName("GOOD_ID_PRODICT");

            entity.Property(e => e.GoodIdentificationTypeId)
                .HasColumnName("GOOD_IDENTIFICATION_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.IdValue)
                .HasColumnName("ID_VALUE")
                .HasColumnType("varchar(60)");


            entity.HasOne(d => d.GoodIdentificationType)
                .WithMany(p => p.GoodIdentifications)
                .HasForeignKey(d => d.GoodIdentificationTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("GOOD_ID_TYPE");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.GoodIdentifications)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("GOOD_ID_PRODICT");
        });

        modelBuilder.Entity<GoodIdentificationType>(entity =>
        {
            entity.ToTable("GOOD_IDENTIFICATION_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("GOOD_ID_TYPE_PAR");

            entity.Property(e => e.GoodIdentificationTypeId)
                .HasColumnName("GOOD_IDENTIFICATION_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("GOOD_ID_TYPE_PAR");
        });

        modelBuilder.Entity<ImageDataResource>(entity =>
        {
            entity.HasKey(e => e.DataResourceId)
                .HasName("PRIMARY");

            entity.ToTable("IMAGE_DATA_RESOURCE");


            entity.HasIndex(e => e.DataResourceId)
                .HasName("DATA_REC_IMAGE");


            entity.Property(e => e.DataResourceId)
                .HasColumnName("DATA_RESOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ImageData).HasColumnName("IMAGE_DATA");


            entity.HasOne(d => d.DataResource)
                .WithOne(p => p.ImageDataResource)
                .HasForeignKey<ImageDataResource>(d => d.DataResourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DATA_REC_IMAGE");
        });

        modelBuilder.Entity<InventoryItem>(entity =>
        {
            entity.ToTable("INVENTORY_ITEM");

            entity.HasIndex(e => e.ActivationNumber)
                .HasName("INVITEM_ACTNM")
                .IsUnique();

            entity.HasIndex(e => e.ContainerId)
                .HasName("INV_ITEM_CONTAINER");


            entity.HasIndex(e => e.CurrencyUomId)
                .HasName("INV_ITEM_CUOM");

            entity.HasIndex(e => e.FacilityId)
                .HasName("INV_ITEM_FACILITY");

            entity.HasIndex(e => e.FixedAssetId)
                .HasName("IYIM_FAST");

            entity.HasIndex(e => e.InventoryItemTypeId)
                .HasName("INV_ITEM_TYPE");


            entity.HasIndex(e => e.LotId)
                .HasName("INV_ITEM_LOT");

            entity.HasIndex(e => e.OwnerPartyId)
                .HasName("INV_ITEM_OWNPARTY");

            entity.HasIndex(e => e.PartyId)
                .HasName("INV_ITEM_PARTY");

            entity.HasIndex(e => e.ProductId)
                .HasName("INV_ITEM_PRODUCT");

            entity.HasIndex(e => e.SerialNumber)
                .HasName("INV_ITEM_SN");

            entity.HasIndex(e => e.SoftIdentifier)
                .HasName("INVITEM_SOFID")
                .IsUnique();

            entity.HasIndex(e => e.StatusId)
                .HasName("INV_ITEM_STTSITM");

            entity.HasIndex(e => e.UomId)
                .HasName("INV_ITEM_UOM");

            entity.Property(e => e.InventoryItemId)
                .HasColumnName("INVENTORY_ITEM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AccountingQuantityTotal)
                .HasColumnName("ACCOUNTING_QUANTITY_TOTAL")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ActivationNumber)
                .HasColumnName("ACTIVATION_NUMBER")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ActivationValidThru)
                .HasColumnName("ACTIVATION_VALID_THRU")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.AvailableToPromise)
                .HasColumnName("AVAILABLE_TO_PROMISE")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.AvailableToPromiseTotal)
                .HasColumnName("AVAILABLE_TO_PROMISE_TOTAL")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.BinNumber)
                .HasColumnName("BIN_NUMBER")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ContainerId)
                .HasColumnName("CONTAINER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrencyUomId)
                .HasColumnName("CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DatetimeManufactured)
                .HasColumnName("DATETIME_MANUFACTURED")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.DatetimeReceived)
                .HasColumnName("DATETIME_RECEIVED")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ExpireDate)
                .HasColumnName("EXPIRE_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.FixedAssetId)
                .HasColumnName("FIXED_ASSET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InventoryItemTypeId)
                .HasColumnName("INVENTORY_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.LocationSeqId)
                .HasColumnName("LOCATION_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.LotId)
                .HasColumnName("LOT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OwnerPartyId)
                .HasColumnName("OWNER_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.QuantityOnHand)
                .HasColumnName("QUANTITY_ON_HAND")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.QuantityOnHandTotal)
                .HasColumnName("QUANTITY_ON_HAND_TOTAL")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.SerialNumber)
                .HasColumnName("SERIAL_NUMBER")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.SoftIdentifier)
                .HasColumnName("SOFT_IDENTIFIER")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.UnitCost)
                .HasColumnName("UNIT_COST")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.UomId)
                .HasColumnName("UOM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Container)
                .WithMany(p => p.InventoryItems)
                .HasForeignKey(d => d.ContainerId)
                .HasConstraintName("INV_ITEM_CONTAINER");

            entity.HasOne(d => d.CurrencyUom)
                .WithMany(p => p.InventoryItemCurrencyUoms)
                .HasForeignKey(d => d.CurrencyUomId)
                .HasConstraintName("INV_ITEM_CUOM");

            entity.HasOne(d => d.Facility)
                .WithMany(p => p.InventoryItems)
                .HasForeignKey(d => d.FacilityId)
                .HasConstraintName("INV_ITEM_FACILITY");

            entity.HasOne(d => d.FixedAsset)
                .WithMany(p => p.InventoryItems)
                .HasForeignKey(d => d.FixedAssetId)
                .HasConstraintName("IYIM_FAST");

            entity.HasOne(d => d.InventoryItemType)
                .WithMany(p => p.InventoryItems)
                .HasForeignKey(d => d.InventoryItemTypeId)
                .HasConstraintName("INV_ITEM_TYPE");

            entity.HasOne(d => d.Lot)
                .WithMany(p => p.InventoryItems)
                .HasForeignKey(d => d.LotId)
                .HasConstraintName("INV_ITEM_LOT");

            entity.HasOne(d => d.OwnerParty)
                .WithMany(p => p.InventoryItemOwnerParties)
                .HasForeignKey(d => d.OwnerPartyId)
                .HasConstraintName("INV_ITEM_OWNPARTY");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.InventoryItemParties)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("INV_ITEM_PARTY");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.InventoryItems)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("INV_ITEM_PRODUCT");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.InventoryItems)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("INV_ITEM_STTSITM");

            entity.HasOne(d => d.Uom)
                .WithMany(p => p.InventoryItemUoms)
                .HasForeignKey(d => d.UomId)
                .HasConstraintName("INV_ITEM_UOM");
        });

        modelBuilder.Entity<InventoryItemAttribute>(entity =>
        {
            entity.HasKey(e => new { e.InventoryItemId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("INVENTORY_ITEM_ATTRIBUTE");


            entity.HasIndex(e => e.InventoryItemId)
                .HasName("INV_ITEM_ATTR");


            entity.Property(e => e.InventoryItemId)
                .HasColumnName("INVENTORY_ITEM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.InventoryItem)
                .WithMany(p => p.InventoryItemAttributes)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INV_ITEM_ATTR");
        });

        modelBuilder.Entity<InventoryItemDetail>(entity =>
        {
            entity.HasKey(e => new { e.InventoryItemId, e.InventoryItemDetailSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("INVENTORY_ITEM_DETAIL");


            entity.HasIndex(e => e.InventoryItemId)
                .HasName("INV_ITDTL_INVIT");

            entity.HasIndex(e => e.ItemIssuanceId)
                .HasName("INV_ITDTL_ITMIS");


            entity.HasIndex(e => e.PhysicalInventoryId)
                .HasName("INV_ITDTL_PHINV");

            entity.HasIndex(e => e.ReasonEnumId)
                .HasName("INV_ITDTL_REAS");

            entity.HasIndex(e => e.ReceiptId)
                .HasName("INV_ITDTL_SHRCT");

            entity.HasIndex(e => e.WorkEffortId)
                .HasName("INV_ITDTL_WEFF");

            entity.HasIndex(e => new { e.FixedAssetId, e.MaintHistSeqId })
                .HasName("INV_ITDTL_FAMNT");

            entity.Property(e => e.InventoryItemId)
                .HasColumnName("INVENTORY_ITEM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InventoryItemDetailSeqId)
                .HasColumnName("INVENTORY_ITEM_DETAIL_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AccountingQuantityDiff)
                .HasColumnName("ACCOUNTING_QUANTITY_DIFF")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.AvailableToPromiseDiff)
                .HasColumnName("AVAILABLE_TO_PROMISE_DIFF")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.EffectiveDate)
                .HasColumnName("EFFECTIVE_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.FixedAssetId)
                .HasColumnName("FIXED_ASSET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ItemIssuanceId)
                .HasColumnName("ITEM_ISSUANCE_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.MaintHistSeqId)
                .HasColumnName("MAINT_HIST_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PhysicalInventoryId)
                .HasColumnName("PHYSICAL_INVENTORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.QuantityOnHandDiff)
                .HasColumnName("QUANTITY_ON_HAND_DIFF")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReasonEnumId)
                .HasColumnName("REASON_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReceiptId)
                .HasColumnName("RECEIPT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReturnId)
                .HasColumnName("RETURN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReturnItemSeqId)
                .HasColumnName("RETURN_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipGroupSeqId)
                .HasColumnName("SHIP_GROUP_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentId)
                .HasColumnName("SHIPMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentItemSeqId)
                .HasColumnName("SHIPMENT_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.UnitCost)
                .HasColumnName("UNIT_COST")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.InventoryItem)
                .WithMany(p => p.InventoryItemDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INV_ITDTL_INVIT");

            entity.HasOne(d => d.ItemIssuance)
                .WithMany(p => p.InventoryItemDetails)
                .HasForeignKey(d => d.ItemIssuanceId)
                .HasConstraintName("INV_ITDTL_ITMIS");

            entity.HasOne(d => d.PhysicalInventory)
                .WithMany(p => p.InventoryItemDetails)
                .HasForeignKey(d => d.PhysicalInventoryId)
                .HasConstraintName("INV_ITDTL_PHINV");

            entity.HasOne(d => d.ReasonEnum)
                .WithMany(p => p.InventoryItemDetails)
                .HasForeignKey(d => d.ReasonEnumId)
                .HasConstraintName("INV_ITDTL_REAS");

            entity.HasOne(d => d.Receipt)
                .WithMany(p => p.InventoryItemDetails)
                .HasForeignKey(d => d.ReceiptId)
                .HasConstraintName("INV_ITDTL_SHRCT");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.InventoryItemDetails)
                .HasForeignKey(d => d.WorkEffortId)
                .HasConstraintName("INV_ITDTL_WEFF");

            entity.HasOne(d => d.FixedAssetMaint)
                .WithMany(p => p.InventoryItemDetails)
                .HasForeignKey(d => new { d.FixedAssetId, d.MaintHistSeqId })
                .HasConstraintName("INV_ITDTL_FAMNT");
        });

        modelBuilder.Entity<InventoryItemLabel>(entity =>
        {
            entity.ToTable("INVENTORY_ITEM_LABEL");


            entity.HasIndex(e => e.InventoryItemLabelTypeId)
                .HasName("INV_ITLA_TYPE");


            entity.Property(e => e.InventoryItemLabelId)
                .HasColumnName("INVENTORY_ITEM_LABEL_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.InventoryItemLabelTypeId)
                .HasColumnName("INVENTORY_ITEM_LABEL_TYPE_ID")
                .HasColumnType("varchar(36)");


            entity.HasOne(d => d.InventoryItemLabelType)
                .WithMany(p => p.InventoryItemLabels)
                .HasForeignKey(d => d.InventoryItemLabelTypeId)
                .HasConstraintName("INV_ITLA_TYPE");
        });

        modelBuilder.Entity<InventoryItemLabelAppl>(entity =>
        {
            entity.HasKey(e => new { e.InventoryItemId, e.InventoryItemLabelTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("INVENTORY_ITEM_LABEL_APPL");


            entity.HasIndex(e => e.InventoryItemId)
                .HasName("INV_ITLAP_ITEM");

            entity.HasIndex(e => e.InventoryItemLabelId)
                .HasName("INV_ITLAP_LAB");

            entity.HasIndex(e => e.InventoryItemLabelTypeId)
                .HasName("INV_ITLAP_TYPE");


            entity.Property(e => e.InventoryItemId)
                .HasColumnName("INVENTORY_ITEM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InventoryItemLabelTypeId)
                .HasColumnName("INVENTORY_ITEM_LABEL_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.InventoryItemLabelId)
                .HasColumnName("INVENTORY_ITEM_LABEL_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.InventoryItem)
                .WithMany(p => p.InventoryItemLabelAppls)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INV_ITLAP_ITEM");

            entity.HasOne(d => d.InventoryItemLabel)
                .WithMany(p => p.InventoryItemLabelAppls)
                .HasForeignKey(d => d.InventoryItemLabelId)
                .HasConstraintName("INV_ITLAP_LAB");

            entity.HasOne(d => d.InventoryItemLabelType)
                .WithMany(p => p.InventoryItemLabelAppls)
                .HasForeignKey(d => d.InventoryItemLabelTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INV_ITLAP_TYPE");
        });

        modelBuilder.Entity<InventoryItemLabelType>(entity =>
        {
            entity.ToTable("INVENTORY_ITEM_LABEL_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("INV_ITLT_TYPPAR");

            entity.Property(e => e.InventoryItemLabelTypeId)
                .HasColumnName("INVENTORY_ITEM_LABEL_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("INV_ITLT_TYPPAR");
        });

        modelBuilder.Entity<InventoryItemStatu>(entity =>
        {
            entity.HasKey(e => new { e.InventoryItemId, e.StatusId, e.StatusDatetime })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("INVENTORY_ITEM_STATUS");

            entity.HasIndex(e => e.ChangedByUserLoginId)
                .HasName("INV_ITEM_STTS_USER");


            entity.HasIndex(e => e.InventoryItemId)
                .HasName("INV_ITEM_STTS_II");


            entity.HasIndex(e => e.StatusId)
                .HasName("INV_ITEM_STTS_SI");

            entity.Property(e => e.InventoryItemId)
                .HasColumnName("INVENTORY_ITEM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusDatetime)
                .HasColumnName("STATUS_DATETIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ChangedByUserLoginId)
                .HasColumnName("CHANGE_BY_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.OwnerPartyId)
                .HasColumnName("OWNER_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusEndDatetime)
                .HasColumnName("STATUS_END_DATETIME")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ChangeByUserLogin)
                .WithMany(p => p.InventoryItemStatus)
                .HasForeignKey(d => d.ChangedByUserLoginId)
                .HasConstraintName("INV_ITEM_STTS_USER");

            entity.HasOne(d => d.InventoryItem)
                .WithMany(p => p.InventoryItemStatus)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INV_ITEM_STTS_II");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.InventoryItemStatus)
                .HasForeignKey(d => d.StatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INV_ITEM_STTS_SI");
        });

        modelBuilder.Entity<InventoryItemTempRe>(entity =>
        {
            entity.HasKey(e => new { e.VisitId, e.ProductId, e.ProductStoreId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("INVENTORY_ITEM_TEMP_RES");


            entity.HasIndex(e => e.ProductId)
                .HasName("INV_ITEM_TR_PROD");

            entity.HasIndex(e => e.ProductStoreId)
                .HasName("INV_ITEM_TR_PRDS");

            entity.Property(e => e.VisitId)
                .HasColumnName("VISIT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReservedDate)
                .HasColumnName("RESERVED_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.InventoryItemTempRes)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INV_ITEM_TR_PROD");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.InventoryItemTempRes)
                .HasForeignKey(d => d.ProductStoreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INV_ITEM_TR_PRDS");
        });

        modelBuilder.Entity<InventoryItemType>(entity =>
        {
            entity.ToTable("INVENTORY_ITEM_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("INV_ITEM_TYPPAR");

            entity.Property(e => e.InventoryItemTypeId)
                .HasColumnName("INVENTORY_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("INV_ITEM_TYPPAR");
        });

        modelBuilder.Entity<InventoryItemTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.InventoryItemTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("INVENTORY_ITEM_TYPE_ATTR");


            entity.HasIndex(e => e.InventoryItemTypeId)
                .HasName("INV_ITEM_TYP_ATTR");


            entity.Property(e => e.InventoryItemTypeId)
                .HasColumnName("INVENTORY_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.InventoryItemType)
                .WithMany(p => p.InventoryItemTypeAttrs)
                .HasForeignKey(d => d.InventoryItemTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INV_ITEM_TYP_ATTR");
        });

        modelBuilder.Entity<InventoryItemVariance>(entity =>
        {
            entity.HasKey(e => new { e.InventoryItemId, e.PhysicalInventoryId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("INVENTORY_ITEM_VARIANCE");


            entity.HasIndex(e => e.InventoryItemId)
                .HasName("INV_ITEM_VAR_ITEM");


            entity.HasIndex(e => e.PhysicalInventoryId)
                .HasName("INV_ITEM_VAR_PINV");

            entity.HasIndex(e => e.VarianceReasonId)
                .HasName("INV_ITEM_VAR_RSN");

            entity.Property(e => e.InventoryItemId)
                .HasColumnName("INVENTORY_ITEM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PhysicalInventoryId)
                .HasColumnName("PHYSICAL_INVENTORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AvailableToPromiseVar)
                .HasColumnName("AVAILABLE_TO_PROMISE_VAR")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.QuantityOnHandVar)
                .HasColumnName("QUANTITY_ON_HAND_VAR")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.VarianceReasonId)
                .HasColumnName("VARIANCE_REASON_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.InventoryItem)
                .WithMany(p => p.InventoryItemVariances)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INV_ITEM_VAR_ITEM");

            entity.HasOne(d => d.PhysicalInventory)
                .WithMany(p => p.InventoryItemVariances)
                .HasForeignKey(d => d.PhysicalInventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INV_ITEM_VAR_PINV");

            entity.HasOne(d => d.VarianceReason)
                .WithMany(p => p.InventoryItemVariances)
                .HasForeignKey(d => d.VarianceReasonId)
                .HasConstraintName("INV_ITEM_VAR_RSN");
        });

        modelBuilder.Entity<InventoryTransfer>(entity =>
        {
            entity.ToTable("INVENTORY_TRANSFER");

            entity.HasIndex(e => e.ContainerId)
                .HasName("INV_XFER_CONT");

            entity.HasIndex(e => e.ContainerIdTo)
                .HasName("INV_XFER_TCNT");


            entity.HasIndex(e => e.FacilityId)
                .HasName("INV_XFER_FAC");

            entity.HasIndex(e => e.FacilityIdTo)
                .HasName("INV_XFER_TFAC");

            entity.HasIndex(e => e.InventoryItemId)
                .HasName("INV_XFER_ITEM");

            entity.HasIndex(e => e.ItemIssuanceId)
                .HasName("INV_XFER_ISSU");


            entity.HasIndex(e => e.StatusId)
                .HasName("INV_XFER_STTS");

            entity.Property(e => e.InventoryTransferId)
                .HasColumnName("INVENTORY_TRANSFER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ContainerId)
                .HasColumnName("CONTAINER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContainerIdTo)
                .HasColumnName("CONTAINER_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.FacilityIdTo)
                .HasColumnName("FACILITY_ID_TO");

            entity.Property(e => e.InventoryItemId)
                .HasColumnName("INVENTORY_ITEM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ItemIssuanceId)
                .HasColumnName("ITEM_ISSUANCE_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.LocationSeqId)
                .HasColumnName("LOCATION_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.LocationSeqIdTo)
                .HasColumnName("LOCATION_SEQ_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReceiveDate)
                .HasColumnName("RECEIVE_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.SendDate)
                .HasColumnName("SEND_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Container)
                .WithMany(p => p.InventoryTransferContainers)
                .HasForeignKey(d => d.ContainerId)
                .HasConstraintName("INV_XFER_CONT");

            entity.HasOne(d => d.ContainerIdToNavigation)
                .WithMany(p => p.InventoryTransferContainerIdToNavigations)
                .HasForeignKey(d => d.ContainerIdTo)
                .HasConstraintName("INV_XFER_TCNT");

            entity.HasOne(d => d.Facility)
                .WithMany(p => p.InventoryTransferFacilities)
                .HasForeignKey(d => d.FacilityId)
                .HasConstraintName("INV_XFER_FAC");

            entity.HasOne(d => d.FacilityIdToNavigation)
                .WithMany(p => p.InventoryTransferFacilityIdToNavigations)
                .HasForeignKey(d => d.FacilityIdTo)
                .HasConstraintName("INV_XFER_TFAC");

            entity.HasOne(d => d.InventoryItem)
                .WithMany(p => p.InventoryTransfers)
                .HasForeignKey(d => d.InventoryItemId)
                .HasConstraintName("INV_XFER_ITEM");

            entity.HasOne(d => d.ItemIssuance)
                .WithMany(p => p.InventoryTransfers)
                .HasForeignKey(d => d.ItemIssuanceId)
                .HasConstraintName("INV_XFER_ISSU");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.InventoryTransfers)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("INV_XFER_STTS");
        });

        modelBuilder.Entity<Invoice>(entity =>
        {
            entity.ToTable("INVOICE");

            entity.HasIndex(e => e.BillingAccountId)
                .HasName("INVOICE_BILLACCT");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("INVOICE_CMECH");


            entity.HasIndex(e => e.CurrencyUomId)
                .HasName("INVOICE_CUOM");

            entity.HasIndex(e => e.InvoiceTypeId)
                .HasName("INVOICE_INVTYP");


            entity.HasIndex(e => e.PartyId)
                .HasName("INVOICE_PARTY");

            entity.HasIndex(e => e.PartyIdFrom)
                .HasName("INVOICE_PARTY_FRM");

            entity.HasIndex(e => e.RecurrenceInfoId)
                .HasName("INVOICE_RECINFO");

            entity.HasIndex(e => e.RoleTypeId)
                .HasName("INVOICE_ROLETYP");

            entity.HasIndex(e => e.StatusId)
                .HasName("INVOICE_STTSITM");

            entity.Property(e => e.InvoiceId)
                .HasColumnName("INVOICE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BillingAccountId)
                .HasColumnName("BILLING_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrencyUomId)
                .HasColumnName("CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.DueDate)
                .HasColumnName("DUE_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.InvoiceDate)
                .HasColumnName("INVOICE_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.InvoiceMessage)
                .HasColumnName("INVOICE_MESSAGE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.InvoiceTypeId)
                .HasColumnName("INVOICE_TYPE_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.PaidDate)
                .HasColumnName("PAID_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyIdFrom)
                .HasColumnName("PARTY_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RecurrenceInfoId)
                .HasColumnName("RECURRENCE_INFO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReferenceNumber)
                .HasColumnName("REFERENCE_NUMBER")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.BillingAccount)
                .WithMany(p => p.Invoices)
                .HasForeignKey(d => d.BillingAccountId)
                .HasConstraintName("INVOICE_BILLACCT");

            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.Invoices)
                .HasForeignKey(d => d.ContactMechId)
                .HasConstraintName("INVOICE_CMECH");

            entity.HasOne(d => d.CurrencyUom)
                .WithMany(p => p.Invoices)
                .HasForeignKey(d => d.CurrencyUomId)
                .HasConstraintName("INVOICE_CUOM");

            entity.HasOne(d => d.InvoiceType)
                .WithMany(p => p.Invoices)
                .HasForeignKey(d => d.InvoiceTypeId)
                .HasConstraintName("INVOICE_INVTYP");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.InvoiceParties)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("INVOICE_PARTY");

            entity.HasOne(d => d.PartyIdFromNavigation)
                .WithMany(p => p.InvoicePartyIdFromNavigations)
                .HasForeignKey(d => d.PartyIdFrom)
                .HasConstraintName("INVOICE_PARTY_FRM");

            entity.HasOne(d => d.RecurrenceInfo)
                .WithMany(p => p.Invoices)
                .HasForeignKey(d => d.RecurrenceInfoId)
                .HasConstraintName("INVOICE_RECINFO");

            entity.HasOne(d => d.RoleType)
                .WithMany(p => p.Invoices)
                .HasForeignKey(d => d.RoleTypeId)
                .HasConstraintName("INVOICE_ROLETYP");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.Invoices)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("INVOICE_STTSITM");
        });

        modelBuilder.Entity<InvoiceAttribute>(entity =>
        {
            entity.HasKey(e => new { e.InvoiceId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("INVOICE_ATTRIBUTE");


            entity.HasIndex(e => e.InvoiceId)
                .HasName("INVOICE_ATTR");


            entity.Property(e => e.InvoiceId)
                .HasColumnName("INVOICE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Invoice)
                .WithMany(p => p.InvoiceAttributes)
                .HasForeignKey(d => d.InvoiceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INVOICE_ATTR");
        });

        modelBuilder.Entity<InvoiceContactMech>(entity =>
        {
            entity.HasKey(e => new { e.InvoiceId, e.ContactMechPurposeTypeId, e.ContactMechId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("INVOICE_CONTACT_MECH");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("INVOICE_CMECH_CM");

            entity.HasIndex(e => e.ContactMechPurposeTypeId)
                .HasName("INVOICE_CMECH_CMPT");


            entity.HasIndex(e => e.InvoiceId)
                .HasName("INVOICE_CMECH_HDR");


            entity.Property(e => e.InvoiceId)
                .HasColumnName("INVOICE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechPurposeTypeId)
                .HasColumnName("CONTACT_MECH_PURPOSE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.InvoiceContactMeches)
                .HasForeignKey(d => d.ContactMechId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INVOICE_CMECH_CM");

            entity.HasOne(d => d.ContactMechPurposeType)
                .WithMany(p => p.InvoiceContactMeches)
                .HasForeignKey(d => d.ContactMechPurposeTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INVOICE_CMECH_CMPT");

            entity.HasOne(d => d.Invoice)
                .WithMany(p => p.InvoiceContactMeches)
                .HasForeignKey(d => d.InvoiceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INVOICE_CMECH_HDR");
        });

        modelBuilder.Entity<InvoiceContent>(entity =>
        {
            entity.HasKey(e => new { e.ContentId, e.InvoiceId, e.InvoiceContentTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("INVOICE_CONTENT");

            entity.HasIndex(e => e.ContentId)
                .HasName("INV_CNT_CNT");


            entity.HasIndex(e => e.InvoiceContentTypeId)
                .HasName("INV_CNT_TYPE");

            entity.HasIndex(e => e.InvoiceId)
                .HasName("INV_CNT_PROD");


            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceId)
                .HasColumnName("INVOICE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceContentTypeId)
                .HasColumnName("INVOICE_CONTENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.InvoiceContents)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INV_CNT_CNT");

            entity.HasOne(d => d.InvoiceContentType)
                .WithMany(p => p.InvoiceContents)
                .HasForeignKey(d => d.InvoiceContentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INV_CNT_TYPE");

            entity.HasOne(d => d.Invoice)
                .WithMany(p => p.InvoiceContents)
                .HasForeignKey(d => d.InvoiceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INV_CNT_PROD");
        });

        modelBuilder.Entity<InvoiceContentType>(entity =>
        {
            entity.ToTable("INVOICE_CONTENT_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("INVCT_TYP_PARENT");

            entity.Property(e => e.InvoiceContentTypeId)
                .HasColumnName("INVOICE_CONTENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("INVCT_TYP_PARENT");
        });

        modelBuilder.Entity<InvoiceItem>(entity =>
        {
            entity.HasKey(e => new { e.InvoiceId, e.InvoiceItemSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("INVOICE_ITEM");


            entity.HasIndex(e => e.InventoryItemId)
                .HasName("INVCE_ITM_INVITM");

            entity.HasIndex(e => e.InvoiceId)
                .HasName("INVCE_ITM_INVCE");

            entity.HasIndex(e => e.InvoiceItemTypeId)
                .HasName("INVOICE_ITMITYP");


            entity.HasIndex(e => e.OverrideGlAccountId)
                .HasName("INVCE_ITM_ORGLA");

            entity.HasIndex(e => e.OverrideOrgPartyId)
                .HasName("INVCE_ITM_OVRPTY");

            entity.HasIndex(e => e.ProductFeatureId)
                .HasName("INVCE_ITM_PRDFT");

            entity.HasIndex(e => e.ProductId)
                .HasName("INVCE_ITM_PROD");

            entity.HasIndex(e => e.SalesOpportunityId)
                .HasName("INVCE_ITM_SLSOPP");

            entity.HasIndex(e => e.TaxAuthGeoId)
                .HasName("INVCE_ITM_TAXGEO");

            entity.HasIndex(e => e.TaxAuthPartyId)
                .HasName("INVCE_ITM_TAXPTY");

            entity.HasIndex(e => e.TaxAuthorityRateSeqId)
                .HasName("INVOICE_ITM_TARP");

            entity.HasIndex(e => e.UomId)
                .HasName("INVCE_ITM_UOM");

            entity.HasIndex(e => new { e.ParentInvoiceId, e.ParentInvoiceItemSeqId })
                .HasName("INVCE_ITM_PINVIT");

            entity.Property(e => e.InvoiceId)
                .HasColumnName("INVOICE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceItemSeqId)
                .HasColumnName("INVOICE_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,3)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.InventoryItemId)
                .HasColumnName("INVENTORY_ITEM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceItemTypeId)
                .HasColumnName("INVOICE_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.OverrideGlAccountId)
                .HasColumnName("OVERRIDE_GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OverrideOrgPartyId)
                .HasColumnName("OVERRIDE_ORG_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ParentInvoiceId)
                .HasColumnName("PARENT_INVOICE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ParentInvoiceItemSeqId)
                .HasColumnName("PARENT_INVOICE_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductFeatureId)
                .HasColumnName("PRODUCT_FEATURE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.SalesOpportunityId)
                .HasColumnName("SALES_OPPORTUNITY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TaxAuthGeoId)
                .HasColumnName("TAX_AUTH_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TaxAuthPartyId)
                .HasColumnName("TAX_AUTH_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TaxAuthorityRateSeqId)
                .HasColumnName("TAX_AUTHORITY_RATE_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TaxableFlag)
                .HasColumnName("TAXABLE_FLAG")
                .HasColumnType("char(1)");

            entity.Property(e => e.UomId)
                .HasColumnName("UOM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.InventoryItem)
                .WithMany(p => p.InvoiceItems)
                .HasForeignKey(d => d.InventoryItemId)
                .HasConstraintName("INVCE_ITM_INVITM");

            entity.HasOne(d => d.Invoice)
                .WithMany(p => p.InvoiceItems)
                .HasForeignKey(d => d.InvoiceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INVCE_ITM_INVCE");

            entity.HasOne(d => d.InvoiceItemType)
                .WithMany(p => p.InvoiceItems)
                .HasForeignKey(d => d.InvoiceItemTypeId)
                .HasConstraintName("INVOICE_ITMITYP");

            entity.HasOne(d => d.OverrideGlAccount)
                .WithMany(p => p.InvoiceItems)
                .HasForeignKey(d => d.OverrideGlAccountId)
                .HasConstraintName("INVCE_ITM_ORGLA");

            entity.HasOne(d => d.OverrideOrgParty)
                .WithMany(p => p.InvoiceItemOverrideOrgParties)
                .HasForeignKey(d => d.OverrideOrgPartyId)
                .HasConstraintName("INVCE_ITM_OVRPTY");

            entity.HasOne(d => d.ProductFeature)
                .WithMany(p => p.InvoiceItems)
                .HasForeignKey(d => d.ProductFeatureId)
                .HasConstraintName("INVCE_ITM_PRDFT");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.InvoiceItems)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("INVCE_ITM_PROD");

            entity.HasOne(d => d.SalesOpportunity)
                .WithMany(p => p.InvoiceItems)
                .HasForeignKey(d => d.SalesOpportunityId)
                .HasConstraintName("INVCE_ITM_SLSOPP");

            entity.HasOne(d => d.TaxAuthGeo)
                .WithMany(p => p.InvoiceItems)
                .HasForeignKey(d => d.TaxAuthGeoId)
                .HasConstraintName("INVCE_ITM_TAXGEO");

            entity.HasOne(d => d.TaxAuthParty)
                .WithMany(p => p.InvoiceItemTaxAuthParties)
                .HasForeignKey(d => d.TaxAuthPartyId)
                .HasConstraintName("INVCE_ITM_TAXPTY");

            entity.HasOne(d => d.TaxAuthorityRateSeq)
                .WithMany(p => p.InvoiceItems)
                .HasForeignKey(d => d.TaxAuthorityRateSeqId)
                .HasConstraintName("INVOICE_ITM_TARP");

            entity.HasOne(d => d.Uom)
                .WithMany(p => p.InvoiceItems)
                .HasForeignKey(d => d.UomId)
                .HasConstraintName("INVCE_ITM_UOM");

            entity.HasOne(d => d.ParentInvoiceI)
                .WithMany(p => p.InverseParentInvoiceI)
                .HasForeignKey(d => new { d.ParentInvoiceId, d.ParentInvoiceItemSeqId })
                .HasConstraintName("INVCE_ITM_PINVIT");
        });

        modelBuilder.Entity<InvoiceItemAssoc>(entity =>
        {
            entity.HasKey(e => new
                {
                    e.InvoiceIdFrom, e.InvoiceItemSeqIdFrom, e.InvoiceIdTo, e.InvoiceItemSeqIdTo,
                    e.InvoiceItemAssocTypeId, e.FromDate
                })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0, 0 });

            entity.ToTable("INVOICE_ITEM_ASSOC");


            entity.HasIndex(e => e.InvoiceItemAssocTypeId)
                .HasName("INITMASCTYP_IIASC");


            entity.HasIndex(e => new { e.InvoiceIdFrom, e.InvoiceItemSeqIdFrom })
                .HasName("INITMASC_FIITM");

            entity.HasIndex(e => new { e.InvoiceIdTo, e.InvoiceItemSeqIdTo })
                .HasName("INITMASC_TIITM");

            entity.Property(e => e.InvoiceIdFrom)
                .HasColumnName("INVOICE_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceItemSeqIdFrom)
                .HasColumnName("INVOICE_ITEM_SEQ_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceIdTo)
                .HasColumnName("INVOICE_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceItemSeqIdTo)
                .HasColumnName("INVOICE_ITEM_SEQ_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceItemAssocTypeId)
                .HasColumnName("INVOICE_ITEM_ASSOC_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PartyIdFrom)
                .HasColumnName("PARTY_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyIdTo)
                .HasColumnName("PARTY_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.InvoiceItemAssocType)
                .WithMany(p => p.InvoiceItemAssocs)
                .HasForeignKey(d => d.InvoiceItemAssocTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INITMASCTYP_IIASC");

            entity.HasOne(d => d.InvoiceI)
                .WithMany(p => p.InvoiceItemAssocInvoiceIs)
                .HasForeignKey(d => new { d.InvoiceIdFrom, d.InvoiceItemSeqIdFrom })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INITMASC_FIITM");

            entity.HasOne(d => d.InvoiceINavigation)
                .WithMany(p => p.InvoiceItemAssocInvoiceINavigations)
                .HasForeignKey(d => new { d.InvoiceIdTo, d.InvoiceItemSeqIdTo })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INITMASC_TIITM");
        });

        modelBuilder.Entity<InvoiceItemAssocType>(entity =>
        {
            entity.ToTable("INVOICE_ITEM_ASSOC_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("INITMASCTYP_PRNT");

            entity.Property(e => e.InvoiceItemAssocTypeId)
                .HasColumnName("INVOICE_ITEM_ASSOC_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("INITMASCTYP_PRNT");
        });

        modelBuilder.Entity<InvoiceItemAttribute>(entity =>
        {
            entity.HasKey(e => new { e.InvoiceId, e.InvoiceItemSeqId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("INVOICE_ITEM_ATTRIBUTE");


            entity.HasIndex(e => new { e.InvoiceId, e.InvoiceItemSeqId })
                .HasName("INVOICE_IMAT_ITM");

            entity.Property(e => e.InvoiceId)
                .HasColumnName("INVOICE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceItemSeqId)
                .HasColumnName("INVOICE_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.InvoiceI)
                .WithMany(p => p.InvoiceItemAttributes)
                .HasForeignKey(d => new { d.InvoiceId, d.InvoiceItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INVOICE_IMAT_ITM");
        });

        modelBuilder.Entity<InvoiceItemType>(entity =>
        {
            entity.ToTable("INVOICE_ITEM_TYPE");


            entity.HasIndex(e => e.DefaultGlAccountId)
                .HasName("INVOICE_ITM_DGLAC");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("INVOICE_ITEM_TPAR");

            entity.Property(e => e.InvoiceItemTypeId)
                .HasColumnName("INVOICE_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DefaultGlAccountId)
                .HasColumnName("DEFAULT_GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.DefaultGlAccount)
                .WithMany(p => p.InvoiceItemTypes)
                .HasForeignKey(d => d.DefaultGlAccountId)
                .HasConstraintName("INVOICE_ITM_DGLAC");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("INVOICE_ITEM_TPAR");
        });

        modelBuilder.Entity<InvoiceItemTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.InvoiceItemTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("INVOICE_ITEM_TYPE_ATTR");


            entity.HasIndex(e => e.InvoiceItemTypeId)
                .HasName("INVOICE_ITEM_TATR");


            entity.Property(e => e.InvoiceItemTypeId)
                .HasColumnName("INVOICE_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.InvoiceItemType)
                .WithMany(p => p.InvoiceItemTypeAttrs)
                .HasForeignKey(d => d.InvoiceItemTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INVOICE_ITEM_TATR");
        });

        modelBuilder.Entity<InvoiceItemTypeGlAccount>(entity =>
        {
            entity.HasKey(e => new { e.InvoiceItemTypeId, e.OrganizationPartyId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("INVOICE_ITEM_TYPE_GL_ACCOUNT");


            entity.HasIndex(e => e.GlAccountId)
                .HasName("INVOICE_ITGA_GLAC");

            entity.HasIndex(e => e.InvoiceItemTypeId)
                .HasName("INVOICE_ITGA_IIT");


            entity.HasIndex(e => e.OrganizationPartyId)
                .HasName("INVOICE_ITGA_OPTY");

            entity.Property(e => e.InvoiceItemTypeId)
                .HasColumnName("INVOICE_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrganizationPartyId)
                .HasColumnName("ORGANIZATION_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GlAccountId)
                .HasColumnName("GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");


            entity.HasOne(d => d.GlAccount)
                .WithMany(p => p.InvoiceItemTypeGlAccounts)
                .HasForeignKey(d => d.GlAccountId)
                .HasConstraintName("INVOICE_ITGA_GLAC");

            entity.HasOne(d => d.InvoiceItemType)
                .WithMany(p => p.InvoiceItemTypeGlAccounts)
                .HasForeignKey(d => d.InvoiceItemTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INVOICE_ITGA_IIT");

            entity.HasOne(d => d.OrganizationParty)
                .WithMany(p => p.InvoiceItemTypeGlAccounts)
                .HasForeignKey(d => d.OrganizationPartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INVOICE_ITGA_OPTY");
        });

        modelBuilder.Entity<InvoiceItemTypeMap>(entity =>
        {
            entity.HasKey(e => new { e.InvoiceItemMapKey, e.InvoiceTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("INVOICE_ITEM_TYPE_MAP");


            entity.HasIndex(e => e.InvoiceItemTypeId)
                .HasName("INVOICE_ITEM_MAP");

            entity.HasIndex(e => e.InvoiceTypeId)
                .HasName("INVITMMAP_INVTYP");


            entity.Property(e => e.InvoiceItemMapKey)
                .HasColumnName("INVOICE_ITEM_MAP_KEY")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceTypeId)
                .HasColumnName("INVOICE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.InvoiceItemTypeId)
                .HasColumnName("INVOICE_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");


            entity.HasOne(d => d.InvoiceItemType)
                .WithMany(p => p.InvoiceItemTypeMaps)
                .HasForeignKey(d => d.InvoiceItemTypeId)
                .HasConstraintName("INVOICE_ITEM_MAP");

            entity.HasOne(d => d.InvoiceType)
                .WithMany(p => p.InvoiceItemTypeMaps)
                .HasForeignKey(d => d.InvoiceTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INVITMMAP_INVTYP");
        });

        modelBuilder.Entity<InvoiceNote>(entity =>
        {
            entity.HasKey(e => new { e.InvoiceId, e.NoteId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("INVOICE_NOTE");


            entity.HasIndex(e => e.InvoiceId)
                .HasName("INVOICE_NOTE_INV");


            entity.HasIndex(e => e.NoteId)
                .HasName("INVOICE_NOTE_NOTE");

            entity.Property(e => e.InvoiceId)
                .HasColumnName("INVOICE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.NoteId)
                .HasColumnName("NOTE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Invoice)
                .WithMany(p => p.InvoiceNotes)
                .HasForeignKey(d => d.InvoiceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INVOICE_NOTE_INV");

            entity.HasOne(d => d.Note)
                .WithMany(p => p.InvoiceNotes)
                .HasForeignKey(d => d.NoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INVOICE_NOTE_NOTE");
        });

        modelBuilder.Entity<InvoiceRole>(entity =>
        {
            entity.HasKey(e => new { e.InvoiceId, e.PartyId, e.RoleTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("INVOICE_ROLE");


            entity.HasIndex(e => e.InvoiceId)
                .HasName("INVCE_RLE_INVCE");


            entity.HasIndex(e => e.PartyId)
                .HasName("INVCE_RLE_PARTY");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("INVCE_RLE_PTRL");

            entity.Property(e => e.InvoiceId)
                .HasColumnName("INVOICE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DatetimePerformed)
                .HasColumnName("DATETIME_PERFORMED")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Percentage)
                .HasColumnName("PERCENTAGE")
                .HasColumnType("decimal(18,6)");

            entity.HasOne(d => d.Invoice)
                .WithMany(p => p.InvoiceRoles)
                .HasForeignKey(d => d.InvoiceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INVCE_RLE_INVCE");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.InvoiceRoles)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INVCE_RLE_PARTY");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.InvoiceRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INVCE_RLE_PTRL");
        });

        modelBuilder.Entity<InvoiceStatu>(entity =>
        {
            entity.HasKey(e => new { e.StatusId, e.InvoiceId, e.StatusDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("INVOICE_STATUS");

            entity.HasIndex(e => e.ChangedByUserLoginId)
                .HasName("INV_STTS_USRLGN");


            entity.HasIndex(e => e.InvoiceId)
                .HasName("INVCE_STS_INVCE");


            entity.HasIndex(e => e.StatusId)
                .HasName("INVCE_STS_STSITM");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceId)
                .HasColumnName("INVOICE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusDate)
                .HasColumnName("STATUS_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ChangedByUserLoginId)
                .HasColumnName("CHANGE_BY_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ChangeByUserLogin)
                .WithMany(p => p.InvoiceStatus)
                .HasForeignKey(d => d.ChangedByUserLoginId)
                .HasConstraintName("INV_STTS_USRLGN");

            entity.HasOne(d => d.Invoice)
                .WithMany(p => p.InvoiceStatus)
                .HasForeignKey(d => d.InvoiceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INVCE_STS_INVCE");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.InvoiceStatus)
                .HasForeignKey(d => d.StatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INVCE_STS_STSITM");
        });

        modelBuilder.Entity<InvoiceTerm>(entity =>
        {
            entity.ToTable("INVOICE_TERM");


            entity.HasIndex(e => e.InvoiceId)
                .HasName("INVCE_TRM_INVCE");


            entity.HasIndex(e => e.TermTypeId)
                .HasName("INVCE_TRM_TRM");

            entity.Property(e => e.InvoiceTermId)
                .HasColumnName("INVOICE_TERM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.InvoiceId)
                .HasColumnName("INVOICE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceItemSeqId)
                .HasColumnName("INVOICE_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.TermDays)
                .HasColumnName("TERM_DAYS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.TermTypeId)
                .HasColumnName("TERM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TermValue)
                .HasColumnName("TERM_VALUE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.TextValue)
                .HasColumnName("TEXT_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.UomId)
                .HasColumnName("UOM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Invoice)
                .WithMany(p => p.InvoiceTerms)
                .HasForeignKey(d => d.InvoiceId)
                .HasConstraintName("INVCE_TRM_INVCE");

            entity.HasOne(d => d.TermType)
                .WithMany(p => p.InvoiceTerms)
                .HasForeignKey(d => d.TermTypeId)
                .HasConstraintName("INVCE_TRM_TRM");
        });

        modelBuilder.Entity<InvoiceTermAttribute>(entity =>
        {
            entity.HasKey(e => new { e.InvoiceTermId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("INVOICE_TERM_ATTRIBUTE");


            entity.HasIndex(e => e.InvoiceTermId)
                .HasName("INVOICE_TRM_ATTR");


            entity.Property(e => e.InvoiceTermId)
                .HasColumnName("INVOICE_TERM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.InvoiceTerm)
                .WithMany(p => p.InvoiceTermAttributes)
                .HasForeignKey(d => d.InvoiceTermId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INVOICE_TRM_ATTR");
        });

        modelBuilder.Entity<InvoiceType>(entity =>
        {
            entity.ToTable("INVOICE_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("INVOICE_TYPE_PAR");

            entity.Property(e => e.InvoiceTypeId)
                .HasColumnName("INVOICE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("INVOICE_TYPE_PAR");
        });

        modelBuilder.Entity<InvoiceTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.InvoiceTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("INVOICE_TYPE_ATTR");


            entity.HasIndex(e => e.InvoiceTypeId)
                .HasName("INVOICE_TPAT_TYP");


            entity.Property(e => e.InvoiceTypeId)
                .HasColumnName("INVOICE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.InvoiceType)
                .WithMany(p => p.InvoiceTypeAttrs)
                .HasForeignKey(d => d.InvoiceTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INVOICE_TPAT_TYP");
        });

        modelBuilder.Entity<ItemIssuance>(entity =>
        {
            entity.ToTable("ITEM_ISSUANCE");


            entity.HasIndex(e => e.InventoryItemId)
                .HasName("ITEM_ISS_INVITM");

            entity.HasIndex(e => e.IssuedByUserLoginId)
                .HasName("ITEM_ISS_IBUL");


            entity.HasIndex(e => new { e.FixedAssetId, e.MaintHistSeqId })
                .HasName("ITEM_ISS_FAMNT");

            entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId })
                .HasName("ITEM_ISS_ORITM");

            entity.HasIndex(e => new { e.ShipmentId, e.ShipmentItemSeqId })
                .HasName("ITEM_ISS_SHITM");

            entity.Property(e => e.ItemIssuanceId)
                .HasColumnName("ITEM_ISSUANCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CancelQuantity)
                .HasColumnName("CANCEL_QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FixedAssetId)
                .HasColumnName("FIXED_ASSET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InventoryItemId)
                .HasColumnName("INVENTORY_ITEM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.IssuedByUserLoginId)
                .HasColumnName("ISSUED_BY_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.IssuedDateTime)
                .HasColumnName("ISSUED_DATE_TIME")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.MaintHistSeqId)
                .HasColumnName("MAINT_HIST_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ShipGroupSeqId)
                .HasColumnName("SHIP_GROUP_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentId)
                .HasColumnName("SHIPMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentItemSeqId)
                .HasColumnName("SHIPMENT_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.InventoryItem)
                .WithMany(p => p.ItemIssuances)
                .HasForeignKey(d => d.InventoryItemId)
                .HasConstraintName("ITEM_ISS_INVITM");

            entity.HasOne(d => d.IssuedByUserLogin)
                .WithMany(p => p.ItemIssuances)
                .HasForeignKey(d => d.IssuedByUserLoginId)
                .HasConstraintName("ITEM_ISS_IBUL");

            entity.HasOne(d => d.FixedAssetMaint)
                .WithMany(p => p.ItemIssuances)
                .HasForeignKey(d => new { d.FixedAssetId, d.MaintHistSeqId })
                .HasConstraintName("ITEM_ISS_FAMNT");

            entity.HasOne(d => d.OrderI)
                .WithMany(p => p.ItemIssuances)
                .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                .HasConstraintName("ITEM_ISS_ORITM");

            entity.HasOne(d => d.ShipmentI)
                .WithMany(p => p.ItemIssuances)
                .HasForeignKey(d => new { d.ShipmentId, d.ShipmentItemSeqId })
                .HasConstraintName("ITEM_ISS_SHITM");
        });

        modelBuilder.Entity<ItemIssuanceRole>(entity =>
        {
            entity.HasKey(e => new { e.ItemIssuanceId, e.PartyId, e.RoleTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("ITEM_ISSUANCE_ROLE");


            entity.HasIndex(e => e.ItemIssuanceId)
                .HasName("ITEM_ISSRL_ITMIS");


            entity.HasIndex(e => e.PartyId)
                .HasName("ITEM_ISSRL_PTY");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("ITEM_ISSRL_PTRL");

            entity.Property(e => e.ItemIssuanceId)
                .HasColumnName("ITEM_ISSUANCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ItemIssuance)
                .WithMany(p => p.ItemIssuanceRoles)
                .HasForeignKey(d => d.ItemIssuanceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ITEM_ISSRL_ITMIS");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.ItemIssuanceRoles)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ITEM_ISSRL_PTY");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.ItemIssuanceRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ITEM_ISSRL_PTRL");
        });

        modelBuilder.Entity<JavaResource>(entity =>
        {
            entity.HasKey(e => e.ResourceName)
                .HasName("PRIMARY");

            entity.ToTable("JAVA_RESOURCE");


            entity.Property(e => e.ResourceName)
                .HasColumnName("RESOURCE_NAME")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ResourceValue).HasColumnName("RESOURCE_VALUE");
        });

        modelBuilder.Entity<JobInterview>(entity =>
        {
            entity.ToTable("JOB_INTERVIEW");


            entity.HasIndex(e => e.GradeSecuredEnumId)
                .HasName("JOB_INTW_ENUM");

            entity.HasIndex(e => e.JobInterviewTypeId)
                .HasName("JOB_INTW_INTYP");

            entity.HasIndex(e => e.JobIntervieweePartyId)
                .HasName("JOB_INTW_IEPR");

            entity.HasIndex(e => e.JobInterviewerPartyId)
                .HasName("JOB_INTW_IRPR");

            entity.HasIndex(e => e.JobRequisitionId)
                .HasName("JOB_INTW_JBREQ");


            entity.Property(e => e.JobInterviewId)
                .HasColumnName("JOB_INTERVIEW_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GradeSecuredEnumId)
                .HasColumnName("GRADE_SECURED_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.JobInterviewDate)
                .HasColumnName("JOB_INTERVIEW_DATE")
                .HasColumnType("date");

            entity.Property(e => e.JobInterviewResult)
                .HasColumnName("JOB_INTERVIEW_RESULT")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.JobInterviewTypeId)
                .HasColumnName("JOB_INTERVIEW_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.JobIntervieweePartyId)
                .HasColumnName("JOB_INTERVIEWEE_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.JobInterviewerPartyId)
                .HasColumnName("JOB_INTERVIEWER_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.JobRequisitionId)
                .HasColumnName("JOB_REQUISITION_ID")
                .HasColumnType("varchar(36)");


            entity.HasOne(d => d.GradeSecuredEnum)
                .WithMany(p => p.JobInterviews)
                .HasForeignKey(d => d.GradeSecuredEnumId)
                .HasConstraintName("JOB_INTW_ENUM");

            entity.HasOne(d => d.JobInterviewType)
                .WithMany(p => p.JobInterviews)
                .HasForeignKey(d => d.JobInterviewTypeId)
                .HasConstraintName("JOB_INTW_INTYP");

            entity.HasOne(d => d.JobIntervieweeParty)
                .WithMany(p => p.JobInterviewJobIntervieweeParties)
                .HasForeignKey(d => d.JobIntervieweePartyId)
                .HasConstraintName("JOB_INTW_IEPR");

            entity.HasOne(d => d.JobInterviewerParty)
                .WithMany(p => p.JobInterviewJobInterviewerParties)
                .HasForeignKey(d => d.JobInterviewerPartyId)
                .HasConstraintName("JOB_INTW_IRPR");

            entity.HasOne(d => d.JobRequisition)
                .WithMany(p => p.JobInterviews)
                .HasForeignKey(d => d.JobRequisitionId)
                .HasConstraintName("JOB_INTW_JBREQ");
        });

        modelBuilder.Entity<JobInterviewType>(entity =>
        {
            entity.ToTable("JOB_INTERVIEW_TYPE");


            entity.Property(e => e.JobInterviewTypeId)
                .HasColumnName("JOB_INTERVIEW_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<JobManagerLock>(entity =>
        {
            entity.HasKey(e => new { e.InstanceId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("JOB_MANAGER_LOCK");


            entity.HasIndex(e => e.ReasonEnumId)
                .HasName("JOBLK_ENUM_REAS");

            entity.Property(e => e.InstanceId)
                .HasColumnName("INSTANCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedDate)
                .HasColumnName("CREATED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.LastModifiedDate)
                .HasColumnName("LAST_MODIFIED_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ReasonEnumId)
                .HasColumnName("REASON_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ReasonEnum)
                .WithMany(p => p.JobManagerLocks)
                .HasForeignKey(d => d.ReasonEnumId)
                .HasConstraintName("JOBLK_ENUM_REAS");
        });

        modelBuilder.Entity<JobRequisition>(entity =>
        {
            entity.ToTable("JOB_REQUISITION");


            entity.HasIndex(e => e.ExamTypeEnumId)
                .HasName("JOB_REQ_ENUMEXM");

            entity.HasIndex(e => e.JobPostingTypeEnumId)
                .HasName("JOB_REQ_ENUMJBP");


            entity.HasIndex(e => e.SkillTypeId)
                .HasName("JOB_REQ_SKTYP");

            entity.Property(e => e.JobRequisitionId)
                .HasColumnName("JOB_REQUISITION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Age)
                .HasColumnName("AGE")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DurationMonths)
                .HasColumnName("DURATION_MONTHS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ExamTypeEnumId)
                .HasColumnName("EXAM_TYPE_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ExperienceMonths)
                .HasColumnName("EXPERIENCE_MONTHS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ExperienceYears)
                .HasColumnName("EXPERIENCE_YEARS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.Gender)
                .HasColumnName("GENDER")
                .HasColumnType("char(1)");

            entity.Property(e => e.JobLocation)
                .HasColumnName("JOB_LOCATION")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.JobPostingTypeEnumId)
                .HasColumnName("JOB_POSTING_TYPE_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.JobRequisitionDate)
                .HasColumnName("JOB_REQUISITION_DATE")
                .HasColumnType("date");


            entity.Property(e => e.NoOfResources)
                .HasColumnName("NO_OF_RESOURCES")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.Qualification)
                .HasColumnName("QUALIFICATION")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.RequiredOnDate)
                .HasColumnName("REQUIRED_ON_DATE")
                .HasColumnType("date");

            entity.Property(e => e.SkillTypeId)
                .HasColumnName("SKILL_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ExamTypeEnum)
                .WithMany(p => p.JobRequisitionExamTypeEnums)
                .HasForeignKey(d => d.ExamTypeEnumId)
                .HasConstraintName("JOB_REQ_ENUMEXM");

            entity.HasOne(d => d.JobPostingTypeEnum)
                .WithMany(p => p.JobRequisitionJobPostingTypeEnums)
                .HasForeignKey(d => d.JobPostingTypeEnumId)
                .HasConstraintName("JOB_REQ_ENUMJBP");

            entity.HasOne(d => d.SkillType)
                .WithMany(p => p.JobRequisitions)
                .HasForeignKey(d => d.SkillTypeId)
                .HasConstraintName("JOB_REQ_SKTYP");
        });

        modelBuilder.Entity<JobSandbox>(entity =>
        {
            entity.HasKey(e => e.JobId)
                .HasName("PRIMARY");

            entity.ToTable("JOB_SANDBOX");

            entity.HasIndex(e => e.AuthUserLoginId)
                .HasName("JOB_SNDBX_AUSRLGN");


            entity.HasIndex(e => e.RecurrenceInfoId)
                .HasName("JOB_SNDBX_RECINFO");

            entity.HasIndex(e => e.RunAsUser)
                .HasName("JOB_SNDBX_USRLGN");

            entity.HasIndex(e => e.RuntimeDataId)
                .HasName("JOB_SNDBX_RNTMDTA");

            entity.HasIndex(e => e.StatusId)
                .HasName("JOB_SNDBX_STTS");

            entity.HasIndex(e => e.TempExprId)
                .HasName("JOB_SNDBX_TEMPEXPR");

            entity.HasIndex(e => new { e.RunByInstanceId, e.StatusId })
                .HasName("JOB_SNDBX_RUNSTAT");

            entity.Property(e => e.JobId)
                .HasColumnName("JOB_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AuthUserLoginId)
                .HasColumnName("AUTH_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CancelDateTime)
                .HasColumnName("CANCEL_DATE_TIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrentRecurrenceCount)
                .HasColumnName("CURRENT_RECURRENCE_COUNT")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.CurrentRetryCount)
                .HasColumnName("CURRENT_RETRY_COUNT")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.FinishDateTime)
                .HasColumnName("FINISH_DATE_TIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.JobName)
                .HasColumnName("JOB_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.JobResult)
                .HasColumnName("JOB_RESULT")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.LoaderName)
                .HasColumnName("LOADER_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.MaxRecurrenceCount)
                .HasColumnName("MAX_RECURRENCE_COUNT")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.MaxRetry)
                .HasColumnName("MAX_RETRY")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ParentJobId)
                .HasColumnName("PARENT_JOB_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PoolId)
                .HasColumnName("POOL_ID")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.PreviousJobId)
                .HasColumnName("PREVIOUS_JOB_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Priority)
                .HasColumnName("PRIORITY")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.RecurrenceInfoId)
                .HasColumnName("RECURRENCE_INFO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RecurrenceTimeZone)
                .HasColumnName("RECURRENCE_TIME_ZONE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.RunAsUser)
                .HasColumnName("RUN_AS_USER")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.RunByInstanceId)
                .HasColumnName("RUN_BY_INSTANCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RunTime)
                .HasColumnName("RUN_TIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.RuntimeDataId)
                .HasColumnName("RUNTIME_DATA_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ServiceName)
                .HasColumnName("SERVICE_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.StartDateTime)
                .HasColumnName("START_DATE_TIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TempExprId)
                .HasColumnName("TEMP_EXPR_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.AuthUserLogin)
                .WithMany(p => p.JobSandboxAuthUserLogins)
                .HasForeignKey(d => d.AuthUserLoginId)
                .HasConstraintName("JOB_SNDBX_AUSRLGN");

            entity.HasOne(d => d.RecurrenceInfo)
                .WithMany(p => p.JobSandboxes)
                .HasForeignKey(d => d.RecurrenceInfoId)
                .HasConstraintName("JOB_SNDBX_RECINFO");

            entity.HasOne(d => d.RunAsUserNavigation)
                .WithMany(p => p.JobSandboxRunAsUserNavigations)
                .HasForeignKey(d => d.RunAsUser)
                .HasConstraintName("JOB_SNDBX_USRLGN");

            entity.HasOne(d => d.RuntimeData)
                .WithMany(p => p.JobSandboxes)
                .HasForeignKey(d => d.RuntimeDataId)
                .HasConstraintName("JOB_SNDBX_RNTMDTA");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.JobSandboxes)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("JOB_SNDBX_STTS");

            entity.HasOne(d => d.TempExpr)
                .WithMany(p => p.JobSandboxes)
                .HasForeignKey(d => d.TempExprId)
                .HasConstraintName("JOB_SNDBX_TEMPEXPR");
        });

        modelBuilder.Entity<KeywordThesauru>(entity =>
        {
            entity.HasKey(e => new { e.EnteredKeyword, e.AlternateKeyword })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("KEYWORD_THESAURUS");


            entity.HasIndex(e => e.RelationshipEnumId)
                .HasName("KW_THRS_RLENM");

            entity.Property(e => e.EnteredKeyword)
                .HasColumnName("ENTERED_KEYWORD")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AlternateKeyword)
                .HasColumnName("ALTERNATE_KEYWORD")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.RelationshipEnumId)
                .HasColumnName("RELATIONSHIP_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.RelationshipEnum)
                .WithMany(p => p.KeywordThesaurus)
                .HasForeignKey(d => d.RelationshipEnumId)
                .HasConstraintName("KW_THRS_RLENM");
        });

        modelBuilder.Entity<LinkedInUser>(entity =>
        {
            entity.ToTable("LINKED_IN_USER");


            entity.HasIndex(e => e.ProductStoreId)
                .HasName("LINKEDIN_USER");

            entity.Property(e => e.LinkedInUserId)
                .HasColumnName("LINKED_IN_USER_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.AccessToken)
                .HasColumnName("ACCESS_TOKEN")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.EnvPrefix)
                .HasColumnName("ENV_PREFIX")
                .HasColumnType("varchar(60)");


            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.LinkedInUsers)
                .HasForeignKey(d => d.ProductStoreId)
                .HasConstraintName("LINKEDIN_USER");
        });

        modelBuilder.Entity<Lot>(entity =>
        {
            entity.ToTable("LOT");


            entity.Property(e => e.LotId)
                .HasColumnName("LOT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CreationDate)
                .HasColumnName("CREATION_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ExpirationDate)
                .HasColumnName("EXPIRATION_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");
        });

        modelBuilder.Entity<MarketInterest>(entity =>
        {
            entity.HasKey(e => new { e.ProductCategoryId, e.PartyClassificationGroupId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("MARKET_INTEREST");


            entity.HasIndex(e => e.PartyClassificationGroupId)
                .HasName("MARKET_INT_PCGRP");

            entity.HasIndex(e => e.ProductCategoryId)
                .HasName("MARKET_INT_PCAT");

            entity.Property(e => e.ProductCategoryId)
                .HasColumnName("PRODUCT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyClassificationGroupId)
                .HasColumnName("PARTY_CLASSIFICATION_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.PartyClassificationGroup)
                .WithMany(p => p.MarketInterests)
                .HasForeignKey(d => d.PartyClassificationGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("MARKET_INT_PCGRP");

            entity.HasOne(d => d.ProductCategory)
                .WithMany(p => p.MarketInterests)
                .HasForeignKey(d => d.ProductCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("MARKET_INT_PCAT");
        });

        modelBuilder.Entity<MarketingCampaign>(entity =>
        {
            entity.ToTable("MARKETING_CAMPAIGN");


            entity.HasIndex(e => e.CurrencyUomId)
                .HasName("MKTGCPN_CUOM");


            entity.HasIndex(e => e.ParentCampaignId)
                .HasName("MKTGCPN_PRNT");

            entity.HasIndex(e => e.StatusId)
                .HasName("MKTGCPN_STS");

            entity.Property(e => e.MarketingCampaignId)
                .HasColumnName("MARKETING_CAMPAIGN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ActualCost)
                .HasColumnName("ACTUAL_COST")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.BudgetedCost)
                .HasColumnName("BUDGETED_COST")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.CampaignName)
                .HasColumnName("CAMPAIGN_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.CampaignSummary)
                .HasColumnName("CAMPAIGN_SUMMARY")
                .HasColumnType("longtext");

            entity.Property(e => e.ConvertedLeads)
                .HasColumnName("CONVERTED_LEADS")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrencyUomId)
                .HasColumnName("CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.EstimatedCost)
                .HasColumnName("ESTIMATED_COST")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.ExpectedResponsePercent).HasColumnName("EXPECTED_RESPONSE_PERCENT");

            entity.Property(e => e.ExpectedRevenue)
                .HasColumnName("EXPECTED_REVENUE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.IsActive)
                .HasColumnName("IS_ACTIVE")
                .HasColumnType("char(1)");

            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");


            entity.Property(e => e.NumSent)
                .HasColumnName("NUM_SENT")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ParentCampaignId)
                .HasColumnName("PARENT_CAMPAIGN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StartDate)
                .HasColumnName("START_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.CurrencyUom)
                .WithMany(p => p.MarketingCampaigns)
                .HasForeignKey(d => d.CurrencyUomId)
                .HasConstraintName("MKTGCPN_CUOM");

            entity.HasOne(d => d.ParentCampaign)
                .WithMany(p => p.InverseParentCampaign)
                .HasForeignKey(d => d.ParentCampaignId)
                .HasConstraintName("MKTGCPN_PRNT");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.MarketingCampaigns)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("MKTGCPN_STS");
        });

        modelBuilder.Entity<MarketingCampaignNote>(entity =>
        {
            entity.HasKey(e => new { e.MarketingCampaignId, e.NoteId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("MARKETING_CAMPAIGN_NOTE");


            entity.HasIndex(e => e.MarketingCampaignId)
                .HasName("MKTGCPN_NOTE_CMPN");

            entity.HasIndex(e => e.NoteId)
                .HasName("MKTGCPN_NOTE_NOTE");

            entity.Property(e => e.MarketingCampaignId)
                .HasColumnName("MARKETING_CAMPAIGN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.NoteId)
                .HasColumnName("NOTE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.MarketingCampaign)
                .WithMany(p => p.MarketingCampaignNotes)
                .HasForeignKey(d => d.MarketingCampaignId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("MKTGCPN_NOTE_CMPN");

            entity.HasOne(d => d.Note)
                .WithMany(p => p.MarketingCampaignNotes)
                .HasForeignKey(d => d.NoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("MKTGCPN_NOTE_NOTE");
        });

        modelBuilder.Entity<MarketingCampaignPrice>(entity =>
        {
            entity.HasKey(e => new { e.MarketingCampaignId, e.ProductPriceRuleId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("MARKETING_CAMPAIGN_PRICE");


            entity.HasIndex(e => e.MarketingCampaignId)
                .HasName("MKTGCPN_PRICE_MC");

            entity.HasIndex(e => e.ProductPriceRuleId)
                .HasName("MKTGCPN_PRICE_PP");

            entity.Property(e => e.MarketingCampaignId)
                .HasColumnName("MARKETING_CAMPAIGN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPriceRuleId)
                .HasColumnName("PRODUCT_PRICE_RULE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.MarketingCampaign)
                .WithMany(p => p.MarketingCampaignPrices)
                .HasForeignKey(d => d.MarketingCampaignId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("MKTGCPN_PRICE_MC");

            entity.HasOne(d => d.ProductPriceRule)
                .WithMany(p => p.MarketingCampaignPrices)
                .HasForeignKey(d => d.ProductPriceRuleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("MKTGCPN_PRICE_PP");
        });

        modelBuilder.Entity<MarketingCampaignPromo>(entity =>
        {
            entity.HasKey(e => new { e.MarketingCampaignId, e.ProductPromoId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("MARKETING_CAMPAIGN_PROMO");


            entity.HasIndex(e => e.MarketingCampaignId)
                .HasName("MKTGCPN_PROMO_MC");

            entity.HasIndex(e => e.ProductPromoId)
                .HasName("MKTGCPN_PROMO_PP");

            entity.Property(e => e.MarketingCampaignId)
                .HasColumnName("MARKETING_CAMPAIGN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoId)
                .HasColumnName("PRODUCT_PROMO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.MarketingCampaign)
                .WithMany(p => p.MarketingCampaignPromoes)
                .HasForeignKey(d => d.MarketingCampaignId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("MKTGCPN_PROMO_MC");

            entity.HasOne(d => d.ProductPromo)
                .WithMany(p => p.MarketingCampaignPromoes)
                .HasForeignKey(d => d.ProductPromoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("MKTGCPN_PROMO_PP");
        });

        modelBuilder.Entity<MarketingCampaignRole>(entity =>
        {
            entity.HasKey(e => new { e.MarketingCampaignId, e.PartyId, e.RoleTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("MARKETING_CAMPAIGN_ROLE");


            entity.HasIndex(e => e.MarketingCampaignId)
                .HasName("MKTGCPN_ROLE_MC");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("MKTGCPN_ROLE_PR");

            entity.Property(e => e.MarketingCampaignId)
                .HasColumnName("MARKETING_CAMPAIGN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.MarketingCampaign)
                .WithMany(p => p.MarketingCampaignRoles)
                .HasForeignKey(d => d.MarketingCampaignId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("MKTGCPN_ROLE_MC");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.MarketingCampaignRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("MKTGCPN_ROLE_PR");
        });

        modelBuilder.Entity<MetaDataPredicate>(entity =>
        {
            entity.ToTable("META_DATA_PREDICATE");


            entity.Property(e => e.MetaDataPredicateId)
                .HasColumnName("META_DATA_PREDICATE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<MimeType>(entity =>
        {
            entity.ToTable("MIME_TYPE");


            entity.Property(e => e.MimeTypeId)
                .HasColumnName("MIME_TYPE_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<MimeTypeHtmlTemplate>(entity =>
        {
            entity.HasKey(e => e.MimeTypeId)
                .HasName("PRIMARY");

            entity.ToTable("MIME_TYPE_HTML_TEMPLATE");


            entity.HasIndex(e => e.MimeTypeId)
                .HasName("MIMETYPE_TPL_MT");

            entity.Property(e => e.MimeTypeId)
                .HasColumnName("MIME_TYPE_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.TemplateLocation)
                .HasColumnName("TEMPLATE_LOCATION")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.MimeType)
                .WithOne(p => p.MimeTypeHtmlTemplate)
                .HasForeignKey<MimeTypeHtmlTemplate>(d => d.MimeTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("MIMETYPE_TPL_MT");
        });

        modelBuilder.Entity<MrpEvent>(entity =>
        {
            entity.HasKey(e => new { e.MrpId, e.ProductId, e.EventDate, e.MrpEventTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("MRP_EVENT");


            entity.HasIndex(e => e.FacilityId)
                .HasName("MRPEV_FAC");


            entity.HasIndex(e => e.MrpEventTypeId)
                .HasName("MRPEV_TYP");

            entity.HasIndex(e => e.ProductId)
                .HasName("MRPEV_PROD");

            entity.Property(e => e.MrpId)
                .HasColumnName("MRP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.EventDate)
                .HasColumnName("EVENT_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.MrpEventTypeId)
                .HasColumnName("MRP_EVENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.EventName)
                .HasColumnName("EVENT_NAME")
                .HasColumnType("longtext");

            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.FacilityIdTo)
                .HasColumnName("FACILITY_ID_TO");

            entity.Property(e => e.IsLate)
                .HasColumnName("IS_LATE")
                .HasColumnType("char(1)");


            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

            entity.HasOne(d => d.Facility)
                .WithMany(p => p.MrpEvents)
                .HasForeignKey(d => d.FacilityId)
                .HasConstraintName("MRPEV_FAC");

            entity.HasOne(d => d.MrpEventType)
                .WithMany(p => p.MrpEvents)
                .HasForeignKey(d => d.MrpEventTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("MRPEV_TYP");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.MrpEvents)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("MRPEV_PROD");
        });

        modelBuilder.Entity<MrpEventType>(entity =>
        {
            entity.ToTable("MRP_EVENT_TYPE");


            entity.Property(e => e.MrpEventTypeId)
                .HasColumnName("MRP_EVENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<Msg91GatewayConfig>(entity =>
        {
            entity.HasKey(e => e.TelecomGatewayConfigId)
                .HasName("PRIMARY");

            entity.ToTable("MSG91_GATEWAY_CONFIG");


            entity.HasIndex(e => e.TelecomGatewayConfigId)
                .HasName("MSG_TGC");

            entity.Property(e => e.TelecomGatewayConfigId)
                .HasColumnName("TELECOM_GATEWAY_CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ApiUrl)
                .HasColumnName("API_URL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.Authkey)
                .HasColumnName("AUTHKEY")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.Country)
                .HasColumnName("COUNTRY")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Route)
                .HasColumnName("ROUTE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.Sender)
                .HasColumnName("SENDER")
                .HasColumnType("varchar(60)");

            entity.HasOne(d => d.TelecomGatewayConfig)
                .WithOne(p => p.Msg91GatewayConfig)
                .HasForeignKey<Msg91GatewayConfig>(d => d.TelecomGatewayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("MSG_TGC");
        });

        modelBuilder.Entity<NeedType>(entity =>
        {
            entity.ToTable("NEED_TYPE");


            entity.Property(e => e.NeedTypeId)
                .HasColumnName("NEED_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<NoteData>(entity =>
        {
            entity.HasKey(e => e.NoteId)
                .HasName("PRIMARY");

            entity.ToTable("NOTE_DATA");


            entity.HasIndex(e => e.NoteName)
                .HasName("systemInfo");

            entity.HasIndex(e => e.NoteParty)
                .HasName("NOTE_DATA_PTY");

            entity.Property(e => e.NoteId)
                .HasColumnName("NOTE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.MoreInfoItemId)
                .HasColumnName("MORE_INFO_ITEM_ID")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.MoreInfoItemName)
                .HasColumnName("MORE_INFO_ITEM_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.MoreInfoUrl)
                .HasColumnName("MORE_INFO_URL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.NoteDateTime)
                .HasColumnName("NOTE_DATE_TIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.NoteInfo)
                .HasColumnName("NOTE_INFO")
                .HasColumnType("longtext");

            entity.Property(e => e.NoteName)
                .HasColumnName("NOTE_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.NoteParty)
                .HasColumnName("NOTE_PARTY")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.NotePartyNavigation)
                .WithMany(p => p.NoteDatas)
                .HasForeignKey(d => d.NoteParty)
                .HasConstraintName("NOTE_DATA_PTY");
        });

        modelBuilder.Entity<OAuth2GitHub>(entity =>
        {
            entity.HasKey(e => new { e.ProductStoreId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("O_AUTH2_GIT_HUB");


            entity.HasIndex(e => e.ProductStoreId)
                .HasName("STORE_OAUTH_GITHUB");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ClientId)
                .HasColumnName("CLIENT_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.ClientSecret)
                .HasColumnName("CLIENT_SECRET")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.IconUrl)
                .HasColumnName("ICON_URL")
                .HasColumnType("varchar(2000)");


            entity.Property(e => e.LocalRedirectUri)
                .HasColumnName("LOCAL_REDIRECT_URI")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.ReturnUrl)
                .HasColumnName("RETURN_URL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.OAuth2GitHub)
                .HasForeignKey(d => d.ProductStoreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("STORE_OAUTH_GITHUB");
        });

        modelBuilder.Entity<OAuth2LinkedIn>(entity =>
        {
            entity.HasKey(e => new { e.ProductStoreId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("O_AUTH2_LINKED_IN");


            entity.HasIndex(e => e.ProductStoreId)
                .HasName("OAUTH2_LINKEDIN");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ApiKey)
                .HasColumnName("API_KEY")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.IconUrl)
                .HasColumnName("ICON_URL")
                .HasColumnType("varchar(2000)");


            entity.Property(e => e.LiveReturnUrl)
                .HasColumnName("LIVE_RETURN_URL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.LocalRedirectUri)
                .HasColumnName("LOCAL_REDIRECT_URI")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.SecretKey)
                .HasColumnName("SECRET_KEY")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.TestReturnUrl)
                .HasColumnName("TEST_RETURN_URL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.OAuth2LinkedIn)
                .HasForeignKey(d => d.ProductStoreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("OAUTH2_LINKEDIN");
        });

        modelBuilder.Entity<OrderAdjustment>(entity =>
        {
            entity.ToTable("ORDER_ADJUSTMENT");

            entity.HasIndex(e => e.CreatedByUserLogin)
                .HasName("ORDER_ADJ_USERL");


            entity.HasIndex(e => e.OrderAdjustmentTypeId)
                .HasName("ORDER_ADJ_TYPE");

            entity.HasIndex(e => e.OrderId)
                .HasName("ORDER_ADJ_OHEAD");

            entity.HasIndex(e => e.OverrideGlAccountId)
                .HasName("ORDER_ADJ_OGLA");

            entity.HasIndex(e => e.PrimaryGeoId)
                .HasName("ORDER_ADJ_PRGEO");

            entity.HasIndex(e => e.ProductPromoId)
                .HasName("ORDER_ADJ_PROMO");

            entity.HasIndex(e => e.SecondaryGeoId)
                .HasName("ORDER_ADJ_SCGEO");

            entity.HasIndex(e => e.TaxAuthorityRateSeqId)
                .HasName("ORDER_ADJ_TARP");

            entity.HasIndex(e => new { e.TaxAuthGeoId, e.TaxAuthPartyId })
                .HasName("ORDER_ADJ_TXA");

            entity.Property(e => e.OrderAdjustmentId)
                .HasColumnName("ORDER_ADJUSTMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,3)");

            entity.Property(e => e.AmountAlreadyIncluded)
                .HasColumnName("AMOUNT_ALREADY_INCLUDED")
                .HasColumnType("decimal(18,3)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CorrespondingProductId)
                .HasColumnName("CORRESPONDING_PRODUCT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedDate)
                .HasColumnName("CREATED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CustomerReferenceId)
                .HasColumnName("CUSTOMER_REFERENCE_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ExemptAmount)
                .HasColumnName("EXEMPT_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.IncludeInShipping)
                .HasColumnName("INCLUDE_IN_SHIPPING")
                .HasColumnType("char(1)");

            entity.Property(e => e.IncludeInTax)
                .HasColumnName("INCLUDE_IN_TAX")
                .HasColumnType("char(1)");

            entity.Property(e => e.IsManual)
                .HasColumnName("IS_MANUAL")
                .HasColumnType("char(1)");

            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.LastModifiedDate)
                .HasColumnName("LAST_MODIFIED_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.OrderAdjustmentTypeId)
                .HasColumnName("ORDER_ADJUSTMENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OriginalAdjustmentId)
                .HasColumnName("ORIGINAL_ADJUSTMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OverrideGlAccountId)
                .HasColumnName("OVERRIDE_GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PrimaryGeoId)
                .HasColumnName("PRIMARY_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductFeatureId)
                .HasColumnName("PRODUCT_FEATURE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoActionSeqId)
                .HasColumnName("PRODUCT_PROMO_ACTION_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoId)
                .HasColumnName("PRODUCT_PROMO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoRuleId)
                .HasColumnName("PRODUCT_PROMO_RULE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RecurringAmount)
                .HasColumnName("RECURRING_AMOUNT")
                .HasColumnType("decimal(18,3)");

            entity.Property(e => e.SecondaryGeoId)
                .HasColumnName("SECONDARY_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipGroupSeqId)
                .HasColumnName("SHIP_GROUP_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SourcePercentage)
                .HasColumnName("SOURCE_PERCENTAGE")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.SourceReferenceId)
                .HasColumnName("SOURCE_REFERENCE_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.TaxAuthGeoId)
                .HasColumnName("TAX_AUTH_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TaxAuthPartyId)
                .HasColumnName("TAX_AUTH_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TaxAuthorityRateSeqId)
                .HasColumnName("TAX_AUTHORITY_RATE_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.CreatedByUserLoginNavigation)
                .WithMany(p => p.OrderAdjustments)
                .HasForeignKey(d => d.CreatedByUserLogin)
                .HasConstraintName("ORDER_ADJ_USERL");

            entity.HasOne(d => d.OrderAdjustmentType)
                .WithMany(p => p.OrderAdjustments)
                .HasForeignKey(d => d.OrderAdjustmentTypeId)
                .HasConstraintName("ORDER_ADJ_TYPE");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.OrderAdjustments)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("ORDER_ADJ_OHEAD");

            entity.HasOne(d => d.OverrideGlAccount)
                .WithMany(p => p.OrderAdjustments)
                .HasForeignKey(d => d.OverrideGlAccountId)
                .HasConstraintName("ORDER_ADJ_OGLA");

            entity.HasOne(d => d.PrimaryGeo)
                .WithMany(p => p.OrderAdjustmentPrimaryGeos)
                .HasForeignKey(d => d.PrimaryGeoId)
                .HasConstraintName("ORDER_ADJ_PRGEO");

            entity.HasOne(d => d.ProductPromo)
                .WithMany(p => p.OrderAdjustments)
                .HasForeignKey(d => d.ProductPromoId)
                .HasConstraintName("ORDER_ADJ_PROMO");

            entity.HasOne(d => d.SecondaryGeo)
                .WithMany(p => p.OrderAdjustmentSecondaryGeos)
                .HasForeignKey(d => d.SecondaryGeoId)
                .HasConstraintName("ORDER_ADJ_SCGEO");

            entity.HasOne(d => d.TaxAuthorityRateSeq)
                .WithMany(p => p.OrderAdjustments)
                .HasForeignKey(d => d.TaxAuthorityRateSeqId)
                .HasConstraintName("ORDER_ADJ_TARP");

            entity.HasOne(d => d.TaxAuth)
                .WithMany(p => p.OrderAdjustments)
                .HasForeignKey(d => new { d.TaxAuthGeoId, d.TaxAuthPartyId })
                .HasConstraintName("ORDER_ADJ_TXA");
        });

        modelBuilder.Entity<OrderAdjustmentAttribute>(entity =>
        {
            entity.HasKey(e => new { e.OrderAdjustmentId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("ORDER_ADJUSTMENT_ATTRIBUTE");


            entity.HasIndex(e => e.OrderAdjustmentId)
                .HasName("ORDER_ADJ_ATTR");

            entity.Property(e => e.OrderAdjustmentId)
                .HasColumnName("ORDER_ADJUSTMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.OrderAdjustment)
                .WithMany(p => p.OrderAdjustmentAttributes)
                .HasForeignKey(d => d.OrderAdjustmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ADJ_ATTR");
        });

        modelBuilder.Entity<OrderAdjustmentBilling>(entity =>
        {
            entity.HasKey(e => new { e.OrderAdjustmentId, e.InvoiceId, e.InvoiceItemSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("ORDER_ADJUSTMENT_BILLING");


            entity.HasIndex(e => e.OrderAdjustmentId)
                .HasName("ORDER_ADJBLNG_OA");

            entity.HasIndex(e => new { e.InvoiceId, e.InvoiceItemSeqId })
                .HasName("ORDER_ADJBLNG_IITM");

            entity.Property(e => e.OrderAdjustmentId)
                .HasColumnName("ORDER_ADJUSTMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceId)
                .HasColumnName("INVOICE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceItemSeqId)
                .HasColumnName("INVOICE_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.OrderAdjustment)
                .WithMany(p => p.OrderAdjustmentBillings)
                .HasForeignKey(d => d.OrderAdjustmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ADJBLNG_OA");

            entity.HasOne(d => d.InvoiceI)
                .WithMany(p => p.OrderAdjustmentBillings)
                .HasForeignKey(d => new { d.InvoiceId, d.InvoiceItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ADJBLNG_IITM");
        });

        modelBuilder.Entity<OrderAdjustmentType>(entity =>
        {
            entity.ToTable("ORDER_ADJUSTMENT_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("ORDER_ADJ_TYPPAR");

            entity.Property(e => e.OrderAdjustmentTypeId)
                .HasColumnName("ORDER_ADJUSTMENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("ORDER_ADJ_TYPPAR");
        });

        modelBuilder.Entity<OrderAdjustmentTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.OrderAdjustmentTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("ORDER_ADJUSTMENT_TYPE_ATTR");


            entity.HasIndex(e => e.OrderAdjustmentTypeId)
                .HasName("ORDER_ADJ_TYPATTR");

            entity.Property(e => e.OrderAdjustmentTypeId)
                .HasColumnName("ORDER_ADJUSTMENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.OrderAdjustmentType)
                .WithMany(p => p.OrderAdjustmentTypeAttrs)
                .HasForeignKey(d => d.OrderAdjustmentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ADJ_TYPATTR");
        });

        modelBuilder.Entity<OrderAttribute>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("ORDER_ATTRIBUTE");


            entity.HasIndex(e => e.OrderId)
                .HasName("ORDER_ATTR_HDR");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Order)
                .WithMany(p => p.OrderAttributes)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ATTR_HDR");
        });

        modelBuilder.Entity<OrderBlacklist>(entity =>
        {
            entity.HasKey(e => new { e.BlacklistString, e.OrderBlacklistTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("ORDER_BLACKLIST");


            entity.HasIndex(e => e.OrderBlacklistTypeId)
                .HasName("ORDER_BKL_TYPE");

            entity.Property(e => e.BlacklistString)
                .HasColumnName("BLACKLIST_STRING")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.OrderBlacklistTypeId)
                .HasColumnName("ORDER_BLACKLIST_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.OrderBlacklistType)
                .WithMany(p => p.OrderBlacklists)
                .HasForeignKey(d => d.OrderBlacklistTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_BKL_TYPE");
        });

        modelBuilder.Entity<OrderBlacklistType>(entity =>
        {
            entity.ToTable("ORDER_BLACKLIST_TYPE");


            entity.Property(e => e.OrderBlacklistTypeId)
                .HasColumnName("ORDER_BLACKLIST_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<OrderContactMech>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.ContactMechPurposeTypeId, e.ContactMechId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("ORDER_CONTACT_MECH");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("ORDER_CMECH_CM");

            entity.HasIndex(e => e.ContactMechPurposeTypeId)
                .HasName("ORDER_CMECH_CMPT");


            entity.HasIndex(e => e.OrderId)
                .HasName("ORDER_CMECH_HDR");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechPurposeTypeId)
                .HasColumnName("CONTACT_MECH_PURPOSE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.OrderContactMeches)
                .HasForeignKey(d => d.ContactMechId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_CMECH_CM");

            entity.HasOne(d => d.ContactMechPurposeType)
                .WithMany(p => p.OrderContactMeches)
                .HasForeignKey(d => d.ContactMechPurposeTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_CMECH_CMPT");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.OrderContactMeches)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_CMECH_HDR");
        });

        modelBuilder.Entity<OrderContent>(entity =>
        {
            entity.HasKey(e => new { e.ContentId, e.OrderId, e.OrderItemSeqId, e.OrderContentTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0 });

            entity.ToTable("ORDER_CONTENT");

            entity.HasIndex(e => e.ContentId)
                .HasName("ORD_CNT_CNT");


            entity.HasIndex(e => e.OrderContentTypeId)
                .HasName("ORD_CNT_TYPE");

            entity.HasIndex(e => e.OrderId)
                .HasName("ORD_CNT_PROD");

            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderContentTypeId)
                .HasColumnName("ORDER_CONTENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.OrderContents)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORD_CNT_CNT");

            entity.HasOne(d => d.OrderContentType)
                .WithMany(p => p.OrderContents)
                .HasForeignKey(d => d.OrderContentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORD_CNT_TYPE");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.OrderContents)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORD_CNT_PROD");
        });

        modelBuilder.Entity<OrderContentType>(entity =>
        {
            entity.ToTable("ORDER_CONTENT_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("ORDCT_TYP_PARENT");

            entity.Property(e => e.OrderContentTypeId)
                .HasColumnName("ORDER_CONTENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("ORDCT_TYP_PARENT");
        });

        modelBuilder.Entity<OrderDeliverySchedule>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.OrderItemSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("ORDER_DELIVERY_SCHEDULE");


            entity.HasIndex(e => e.OrderId)
                .HasName("ORDER_DELSCH_OHDR");

            entity.HasIndex(e => e.StatusId)
                .HasName("ORDER_DELSCH_STTS");

            entity.HasIndex(e => e.TotalCubicUomId)
                .HasName("ORDER_DELSCH_TCUOM");

            entity.HasIndex(e => e.TotalWeightUomId)
                .HasName("ORDER_DELSCH_TWUOM");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Cartons)
                .HasColumnName("CARTONS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.EstimatedReadyDate)
                .HasColumnName("ESTIMATED_READY_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SkidsPallets)
                .HasColumnName("SKIDS_PALLETS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TotalCubicSize)
                .HasColumnName("TOTAL_CUBIC_SIZE")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.TotalCubicUomId)
                .HasColumnName("TOTAL_CUBIC_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TotalWeight)
                .HasColumnName("TOTAL_WEIGHT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.TotalWeightUomId)
                .HasColumnName("TOTAL_WEIGHT_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.UnitsPieces)
                .HasColumnName("UNITS_PIECES")
                .HasColumnType("decimal(18,6)");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.OrderDeliverySchedules)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_DELSCH_OHDR");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.OrderDeliverySchedules)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("ORDER_DELSCH_STTS");

            entity.HasOne(d => d.TotalCubicUom)
                .WithMany(p => p.OrderDeliveryScheduleTotalCubicUoms)
                .HasForeignKey(d => d.TotalCubicUomId)
                .HasConstraintName("ORDER_DELSCH_TCUOM");

            entity.HasOne(d => d.TotalWeightUom)
                .WithMany(p => p.OrderDeliveryScheduleTotalWeightUoms)
                .HasForeignKey(d => d.TotalWeightUomId)
                .HasConstraintName("ORDER_DELSCH_TWUOM");
        });

        modelBuilder.Entity<OrderHeader>(entity =>
        {
            entity.HasKey(e => e.OrderId)
                .HasName("PRIMARY");

            entity.ToTable("ORDER_HEADER");

            entity.HasIndex(e => e.AutoOrderShoppingListId)
                .HasName("ORDER_HDR_AOSHLST");

            entity.HasIndex(e => e.BillingAccountId)
                .HasName("ORDER_HDR_BACCT");

            entity.HasIndex(e => e.CreatedBy)
                .HasName("ORDER_HDR_CBUL");


            entity.HasIndex(e => e.CurrencyUom)
                .HasName("ORDER_HDR_CUOM");

            entity.HasIndex(e => e.ExternalId)
                .HasName("ORDEREXT_ID_IDX");


            entity.HasIndex(e => e.OrderTypeId)
                .HasName("ORDER_HDR_TYPE");

            entity.HasIndex(e => e.OriginFacilityId)
                .HasName("ORDER_HDR_OFAC");

            entity.HasIndex(e => e.ProductStoreId)
                .HasName("ORDER_HDR_PDSTR");

            entity.HasIndex(e => e.SalesChannelEnumId)
                .HasName("ORDER_HDR_SCENUM");

            entity.HasIndex(e => e.StatusId)
                .HasName("ORDER_HDR_STTS");

            entity.HasIndex(e => e.SyncStatusId)
                .HasName("ORDER_HDR_SYST");

            entity.HasIndex(e => e.WebSiteId)
                .HasName("ORDER_HDR_WS");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AgreementId)
                .HasColumnName("AGREEMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AutoOrderShoppingListId)
                .HasColumnName("AUTO_ORDER_SHOPPING_LIST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BillingAccountId)
                .HasColumnName("BILLING_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedBy)
                .HasColumnName("CREATED_BY")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrencyUom)
                .HasColumnName("CURRENCY_UOM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.EntryDate)
                .HasColumnName("ENTRY_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ExternalId)
                .HasColumnName("EXTERNAL_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FirstAttemptOrderId)
                .HasColumnName("FIRST_ATTEMPT_ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GrandTotal)
                .HasColumnName("GRAND_TOTAL")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.InternalCode)
                .HasColumnName("INTERNAL_CODE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.InvoicePerShipment)
                .HasColumnName("INVOICE_PER_SHIPMENT")
                .HasColumnType("char(1)");

            entity.Property(e => e.IsRushOrder)
                .HasColumnName("IS_RUSH_ORDER")
                .HasColumnType("char(1)");

            entity.Property(e => e.IsViewed)
                .HasColumnName("IS_VIEWED")
                .HasColumnType("char(1)");


            entity.Property(e => e.NeedsInventoryIssuance)
                .HasColumnName("NEEDS_INVENTORY_ISSUANCE")
                .HasColumnType("char(1)");

            entity.Property(e => e.OrderDate)
                .HasColumnName("ORDER_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.OrderName)
                .HasColumnName("ORDER_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.OrderTypeId)
                .HasColumnName("ORDER_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OriginFacilityId)
                .HasColumnName("ORIGIN_FACILITY_ID");

            entity.Property(e => e.PickSheetPrintedDate)
                .HasColumnName("PICK_SHEET_PRINTED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Priority)
                .HasColumnName("PRIORITY")
                .HasColumnType("char(1)");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RemainingSubTotal)
                .HasColumnName("REMAINING_SUB_TOTAL")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.SalesChannelEnumId)
                .HasColumnName("SALES_CHANNEL_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SyncStatusId)
                .HasColumnName("SYNC_STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TerminalId)
                .HasColumnName("TERMINAL_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.TransactionId)
                .HasColumnName("TRANSACTION_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.VisitId)
                .HasColumnName("VISIT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WebSiteId)
                .HasColumnName("WEB_SITE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.AutoOrderShoppingList)
                .WithMany(p => p.OrderHeaders)
                .HasForeignKey(d => d.AutoOrderShoppingListId)
                .HasConstraintName("ORDER_HDR_AOSHLST");

            entity.HasOne(d => d.BillingAccount)
                .WithMany(p => p.OrderHeaders)
                .HasForeignKey(d => d.BillingAccountId)
                .HasConstraintName("ORDER_HDR_BACCT");

            entity.HasOne(d => d.CreatedByNavigation)
                .WithMany(p => p.OrderHeaders)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("ORDER_HDR_CBUL");

            entity.HasOne(d => d.CurrencyUomNavigation)
                .WithMany(p => p.OrderHeaders)
                .HasForeignKey(d => d.CurrencyUom)
                .HasConstraintName("ORDER_HDR_CUOM");

            entity.HasOne(d => d.OrderType)
                .WithMany(p => p.OrderHeaders)
                .HasForeignKey(d => d.OrderTypeId)
                .HasConstraintName("ORDER_HDR_TYPE");

            entity.HasOne(d => d.OriginFacility)
                .WithMany(p => p.OrderHeaders)
                .HasForeignKey(d => d.OriginFacilityId)
                .HasConstraintName("ORDER_HDR_OFAC");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.OrderHeaders)
                .HasForeignKey(d => d.ProductStoreId)
                .HasConstraintName("ORDER_HDR_PDSTR");

            entity.HasOne(d => d.SalesChannelEnum)
                .WithMany(p => p.OrderHeaders)
                .HasForeignKey(d => d.SalesChannelEnumId)
                .HasConstraintName("ORDER_HDR_SCENUM");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.OrderHeaderStatus)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("ORDER_HDR_STTS");

            entity.HasOne(d => d.SyncStatus)
                .WithMany(p => p.OrderHeaderSyncStatus)
                .HasForeignKey(d => d.SyncStatusId)
                .HasConstraintName("ORDER_HDR_SYST");

            entity.HasOne(d => d.WebSite)
                .WithMany(p => p.OrderHeaders)
                .HasForeignKey(d => d.WebSiteId)
                .HasConstraintName("ORDER_HDR_WS");
        });

        modelBuilder.Entity<OrderHeaderNote>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.NoteId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("ORDER_HEADER_NOTE");


            entity.HasIndex(e => e.NoteId)
                .HasName("ORDER_HDRNT_NOTE");

            entity.HasIndex(e => e.OrderId)
                .HasName("ORDER_HDRNT_HDR");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.NoteId)
                .HasColumnName("NOTE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.InternalNote)
                .HasColumnName("INTERNAL_NOTE")
                .HasColumnType("char(1)");


            entity.HasOne(d => d.Note)
                .WithMany(p => p.OrderHeaderNotes)
                .HasForeignKey(d => d.NoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_HDRNT_NOTE");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.OrderHeaderNotes)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_HDRNT_HDR");
        });

        modelBuilder.Entity<OrderHeaderWorkEffort>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.WorkEffortId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("ORDER_HEADER_WORK_EFFORT");


            entity.HasIndex(e => e.OrderId)
                .HasName("ORDERHDWE_OH");

            entity.HasIndex(e => e.WorkEffortId)
                .HasName("ORDERHDWE_WEFF");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Order)
                .WithMany(p => p.OrderHeaderWorkEfforts)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDERHDWE_OH");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.OrderHeaderWorkEfforts)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDERHDWE_WEFF");
        });

        modelBuilder.Entity<OrderItem>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.OrderItemSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("ORDER_ITEM");

            entity.HasIndex(e => e.ChangedByUserLoginId)
                .HasName("ORDER_ITEM_USRLGN");


            entity.HasIndex(e => e.DontCancelSetUserLogin)
                .HasName("ORDER_ITEM_DCUL");

            entity.HasIndex(e => e.ExternalId)
                .HasName("ORDITMEXT_ID_IDX");

            entity.HasIndex(e => e.FromInventoryItemId)
                .HasName("ORDER_ITEM_FMINV");


            entity.HasIndex(e => e.OrderId)
                .HasName("ORDER_ITEM_HDR");

            entity.HasIndex(e => e.OrderItemTypeId)
                .HasName("ORDER_ITEM_ORTYP");

            entity.HasIndex(e => e.OverrideGlAccountId)
                .HasName("ORDER_ITEM_OGLA");

            entity.HasIndex(e => e.ProductId)
                .HasName("ORDER_ITEM_PRODUCT");

            entity.HasIndex(e => e.RecurringFreqUomId)
                .HasName("ORDER_ITEM_RFUOM");

            entity.HasIndex(e => e.SalesOpportunityId)
                .HasName("ORDER_ITEM_SLSOPP");

            entity.HasIndex(e => e.StatusId)
                .HasName("ORDER_ITEM_STTS");

            entity.HasIndex(e => e.SyncStatusId)
                .HasName("ORDER_ITEM_SYST");

            entity.HasIndex(e => new { e.OrderId, e.OrderItemGroupSeqId })
                .HasName("ORDER_ITEM_ITGRP");

            entity.HasIndex(e => new { e.QuoteId, e.QuoteItemSeqId })
                .HasName("ORDER_ITEM_QUIT");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AutoCancelDate)
                .HasColumnName("AUTO_CANCEL_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.BudgetId)
                .HasColumnName("BUDGET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BudgetItemSeqId)
                .HasColumnName("BUDGET_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CancelBackOrderDate)
                .HasColumnName("CANCEL_BACK_ORDER_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CancelQuantity)
                .HasColumnName("CANCEL_QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ChangedByUserLoginId)
                .HasColumnName("CHANGE_BY_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CorrespondingPoId)
                .HasColumnName("CORRESPONDING_PO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DeploymentId)
                .HasColumnName("DEPLOYMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DontCancelSetDate)
                .HasColumnName("DONT_CANCEL_SET_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.DontCancelSetUserLogin)
                .HasColumnName("DONT_CANCEL_SET_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.EstimatedDeliveryDate)
                .HasColumnName("ESTIMATED_DELIVERY_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.EstimatedShipDate)
                .HasColumnName("ESTIMATED_SHIP_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ExternalId)
                .HasColumnName("EXTERNAL_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromInventoryItemId)
                .HasColumnName("FROM_INVENTORY_ITEM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.IsItemGroupPrimary)
                .HasColumnName("IS_ITEM_GROUP_PRIMARY")
                .HasColumnType("char(1)");

            entity.Property(e => e.IsModifiedPrice)
                .HasColumnName("IS_MODIFIED_PRICE")
                .HasColumnType("char(1)");

            entity.Property(e => e.IsPromo)
                .HasColumnName("IS_PROMO")
                .HasColumnType("char(1)");

            entity.Property(e => e.ItemDescription)
                .HasColumnName("ITEM_DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.OrderItemGroupSeqId)
                .HasColumnName("ORDER_ITEM_GROUP_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemTypeId)
                .HasColumnName("ORDER_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OverrideGlAccountId)
                .HasColumnName("OVERRIDE_GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProdCatalogId)
                .HasColumnName("PROD_CATALOG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductCategoryId)
                .HasColumnName("PRODUCT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductFeatureId)
                .HasColumnName("PRODUCT_FEATURE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.QuoteId)
                .HasColumnName("QUOTE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.QuoteItemSeqId)
                .HasColumnName("QUOTE_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RecurringFreqUomId)
                .HasColumnName("RECURRING_FREQ_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReserveAfterDate)
                .HasColumnName("RESERVE_AFTER_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.SalesOpportunityId)
                .HasColumnName("SALES_OPPORTUNITY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SelectedAmount)
                .HasColumnName("SELECTED_AMOUNT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ShipAfterDate)
                .HasColumnName("SHIP_AFTER_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ShipBeforeDate)
                .HasColumnName("SHIP_BEFORE_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ShoppingListId)
                .HasColumnName("SHOPPING_LIST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShoppingListItemSeqId)
                .HasColumnName("SHOPPING_LIST_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SubscriptionId)
                .HasColumnName("SUBSCRIPTION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SupplierProductId)
                .HasColumnName("SUPPLIER_PRODUCT_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.SyncStatusId)
                .HasColumnName("SYNC_STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.UnitAverageCost)
                .HasColumnName("UNIT_AVERAGE_COST")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.UnitListPrice)
                .HasColumnName("UNIT_LIST_PRICE")
                .HasColumnType("decimal(18,3)");

            entity.Property(e => e.UnitPrice)
                .HasColumnName("UNIT_PRICE")
                .HasColumnType("decimal(18,3)");

            entity.Property(e => e.UnitRecurringPrice)
                .HasColumnName("UNIT_RECURRING_PRICE")
                .HasColumnType("decimal(18,2)");

            entity.HasOne(d => d.ChangeByUserLogin)
                .WithMany(p => p.OrderItemChangeByUserLogins)
                .HasForeignKey(d => d.ChangedByUserLoginId)
                .HasConstraintName("ORDER_ITEM_USRLGN");

            entity.HasOne(d => d.DontCancelSetUserLoginNavigation)
                .WithMany(p => p.OrderItemDontCancelSetUserLoginNavigations)
                .HasForeignKey(d => d.DontCancelSetUserLogin)
                .HasConstraintName("ORDER_ITEM_DCUL");

            entity.HasOne(d => d.FromInventoryItem)
                .WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.FromInventoryItemId)
                .HasConstraintName("ORDER_ITEM_FMINV");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ITEM_HDR");

            entity.HasOne(d => d.OrderItemType)
                .WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.OrderItemTypeId)
                .HasConstraintName("ORDER_ITEM_ORTYP");

            entity.HasOne(d => d.OverrideGlAccount)
                .WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.OverrideGlAccountId)
                .HasConstraintName("ORDER_ITEM_OGLA");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("ORDER_ITEM_PRODUCT");

            entity.HasOne(d => d.RecurringFreqUom)
                .WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.RecurringFreqUomId)
                .HasConstraintName("ORDER_ITEM_RFUOM");

            entity.HasOne(d => d.SalesOpportunity)
                .WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.SalesOpportunityId)
                .HasConstraintName("ORDER_ITEM_SLSOPP");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.OrderItemStatus)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("ORDER_ITEM_STTS");

            entity.HasOne(d => d.SyncStatus)
                .WithMany(p => p.OrderItemSyncStatus)
                .HasForeignKey(d => d.SyncStatusId)
                .HasConstraintName("ORDER_ITEM_SYST");

            entity.HasOne(d => d.OrderI)
                .WithMany(p => p.OrderItems)
                .HasForeignKey(d => new { d.OrderId, d.OrderItemGroupSeqId })
                .HasConstraintName("ORDER_ITEM_ITGRP");

            entity.HasOne(d => d.QuoteI)
                .WithMany(p => p.OrderItems)
                .HasForeignKey(d => new { d.QuoteId, d.QuoteItemSeqId })
                .HasConstraintName("ORDER_ITEM_QUIT");
        });

        modelBuilder.Entity<OrderItemAssoc>(entity =>
        {
            entity.HasKey(e => new
                {
                    e.OrderId, e.OrderItemSeqId, e.ShipGroupSeqId, e.ToOrderId, e.ToOrderItemSeqId,
                    e.ToShipGroupSeqId, e.OrderItemAssocTypeId
                })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0, 0, 0 });

            entity.ToTable("ORDER_ITEM_ASSOC");


            entity.HasIndex(e => e.OrderId)
                .HasName("ORDER_ITASS_FRHD");

            entity.HasIndex(e => e.OrderItemAssocTypeId)
                .HasName("ORDER_ITASS_TYPE");

            entity.HasIndex(e => e.ToOrderId)
                .HasName("ORDER_ITASS_TOHD");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipGroupSeqId)
                .HasColumnName("SHIP_GROUP_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ToOrderId)
                .HasColumnName("TO_ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ToOrderItemSeqId)
                .HasColumnName("TO_ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ToShipGroupSeqId)
                .HasColumnName("TO_SHIP_GROUP_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemAssocTypeId)
                .HasColumnName("ORDER_ITEM_ASSOC_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.OrderItemAssocOrders)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ITASS_FRHD");

            entity.HasOne(d => d.OrderItemAssocType)
                .WithMany(p => p.OrderItemAssocs)
                .HasForeignKey(d => d.OrderItemAssocTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ITASS_TYPE");

            entity.HasOne(d => d.ToOrder)
                .WithMany(p => p.OrderItemAssocToOrders)
                .HasForeignKey(d => d.ToOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ITASS_TOHD");
        });

        modelBuilder.Entity<OrderItemAssocType>(entity =>
        {
            entity.ToTable("ORDER_ITEM_ASSOC_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("ORDER_ITAS_TYPPAR");

            entity.Property(e => e.OrderItemAssocTypeId)
                .HasColumnName("ORDER_ITEM_ASSOC_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("ORDER_ITAS_TYPPAR");
        });

        modelBuilder.Entity<OrderItemAttribute>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.OrderItemSeqId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("ORDER_ITEM_ATTRIBUTE");


            entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId })
                .HasName("ORDER_ITEM_ATTR");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.OrderI)
                .WithMany(p => p.OrderItemAttributes)
                .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ITEM_ATTR");
        });

        modelBuilder.Entity<OrderItemBilling>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.OrderItemSeqId, e.InvoiceId, e.InvoiceItemSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("ORDER_ITEM_BILLING");


            entity.HasIndex(e => e.ItemIssuanceId)
                .HasName("ORDER_ITBLNG_IISS");


            entity.HasIndex(e => e.OrderId)
                .HasName("ORDER_ITBLNG_OHDR");

            entity.HasIndex(e => e.ShipmentReceiptId)
                .HasName("ORDER_ITBL_SHIPRCP");

            entity.HasIndex(e => new { e.InvoiceId, e.InvoiceItemSeqId })
                .HasName("ORDER_ITBLNG_IITM");

            entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId })
                .HasName("ORDER_ITBLNG_OITM");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceId)
                .HasColumnName("INVOICE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceItemSeqId)
                .HasColumnName("INVOICE_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ItemIssuanceId)
                .HasColumnName("ITEM_ISSUANCE_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ShipmentReceiptId)
                .HasColumnName("SHIPMENT_RECEIPT_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ItemIssuance)
                .WithMany(p => p.OrderItemBillings)
                .HasForeignKey(d => d.ItemIssuanceId)
                .HasConstraintName("ORDER_ITBLNG_IISS");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.OrderItemBillings)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ITBLNG_OHDR");

            entity.HasOne(d => d.ShipmentReceipt)
                .WithMany(p => p.OrderItemBillings)
                .HasForeignKey(d => d.ShipmentReceiptId)
                .HasConstraintName("ORDER_ITBL_SHIPRCP");

            entity.HasOne(d => d.InvoiceI)
                .WithMany(p => p.OrderItemBillings)
                .HasForeignKey(d => new { d.InvoiceId, d.InvoiceItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ITBLNG_IITM");

            entity.HasOne(d => d.OrderI)
                .WithMany(p => p.OrderItemBillings)
                .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ITBLNG_OITM");
        });

        modelBuilder.Entity<OrderItemChange>(entity =>
        {
            entity.ToTable("ORDER_ITEM_CHANGE");

            entity.HasIndex(e => e.ChangeTypeEnumId)
                .HasName("ORDER_ITCH_TYPE");

            entity.HasIndex(e => e.ChangeUserLogin)
                .HasName("ORDER_ITCH_USER");


            entity.HasIndex(e => e.ReasonEnumId)
                .HasName("ORDER_ITCH_REAS");

            entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId })
                .HasName("ORDER_ITCH_OITM");

            entity.Property(e => e.OrderItemChangeId)
                .HasColumnName("ORDER_ITEM_CHANGE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CancelQuantity)
                .HasColumnName("CANCEL_QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ChangeComments)
                .HasColumnName("CHANGE_COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ChangeDatetime)
                .HasColumnName("CHANGE_DATETIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ChangeTypeEnumId)
                .HasColumnName("CHANGE_TYPE_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ChangeUserLogin)
                .HasColumnName("CHANGE_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ItemDescription)
                .HasColumnName("ITEM_DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReasonEnumId)
                .HasColumnName("REASON_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.UnitPrice)
                .HasColumnName("UNIT_PRICE")
                .HasColumnType("decimal(18,2)");

            entity.HasOne(d => d.ChangeTypeEnum)
                .WithMany(p => p.OrderItemChangeChangeTypeEnums)
                .HasForeignKey(d => d.ChangeTypeEnumId)
                .HasConstraintName("ORDER_ITCH_TYPE");

            entity.HasOne(d => d.ChangeUserLoginNavigation)
                .WithMany(p => p.OrderItemChanges)
                .HasForeignKey(d => d.ChangeUserLogin)
                .HasConstraintName("ORDER_ITCH_USER");

            entity.HasOne(d => d.ReasonEnum)
                .WithMany(p => p.OrderItemChangeReasonEnums)
                .HasForeignKey(d => d.ReasonEnumId)
                .HasConstraintName("ORDER_ITCH_REAS");

            entity.HasOne(d => d.OrderI)
                .WithMany(p => p.OrderItemChanges)
                .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                .HasConstraintName("ORDER_ITCH_OITM");
        });

        modelBuilder.Entity<OrderItemContactMech>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.OrderItemSeqId, e.ContactMechPurposeTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("ORDER_ITEM_CONTACT_MECH");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("ORDER_ITCM_CMECH");

            entity.HasIndex(e => e.ContactMechPurposeTypeId)
                .HasName("ORDER_ITCM_CMPT");


            entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId })
                .HasName("ORDER_ITCM_OITM");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechPurposeTypeId)
                .HasColumnName("CONTACT_MECH_PURPOSE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.OrderItemContactMeches)
                .HasForeignKey(d => d.ContactMechId)
                .HasConstraintName("ORDER_ITCM_CMECH");

            entity.HasOne(d => d.ContactMechPurposeType)
                .WithMany(p => p.OrderItemContactMeches)
                .HasForeignKey(d => d.ContactMechPurposeTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ITCM_CMPT");

            entity.HasOne(d => d.OrderI)
                .WithMany(p => p.OrderItemContactMeches)
                .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ITCM_OITM");
        });

        modelBuilder.Entity<OrderItemGroup>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.OrderItemGroupSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("ORDER_ITEM_GROUP");


            entity.HasIndex(e => e.OrderId)
                .HasName("ORDERITMGRP_HDR");

            entity.HasIndex(e => new { e.OrderId, e.ParentGroupSeqId })
                .HasName("ORDERITMGRP_PGRP");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemGroupSeqId)
                .HasColumnName("ORDER_ITEM_GROUP_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GroupName)
                .HasColumnName("GROUP_NAME")
                .HasColumnType("varchar(100)");


            entity.Property(e => e.ParentGroupSeqId)
                .HasColumnName("PARENT_GROUP_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.OrderItemGroups)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDERITMGRP_HDR");

            entity.HasOne(d => d.OrderItemGroupNavigation)
                .WithMany(p => p.InverseOrderItemGroupNavigation)
                .HasForeignKey(d => new { d.OrderId, d.ParentGroupSeqId })
                .HasConstraintName("ORDERITMGRP_PGRP");
        });

        modelBuilder.Entity<OrderItemGroupOrder>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.OrderItemSeqId, e.GroupOrderId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("ORDER_ITEM_GROUP_ORDER");


            entity.HasIndex(e => e.GroupOrderId)
                .HasName("OIGO_GROUP_ORDER");


            entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId })
                .HasName("OIGO_ORDER_ITEM");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GroupOrderId)
                .HasColumnName("GROUP_ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.GroupOrder)
                .WithMany(p => p.OrderItemGroupOrders)
                .HasForeignKey(d => d.GroupOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("OIGO_GROUP_ORDER");

            entity.HasOne(d => d.OrderI)
                .WithMany(p => p.OrderItemGroupOrders)
                .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("OIGO_ORDER_ITEM");
        });

        modelBuilder.Entity<OrderItemPriceInfo>(entity =>
        {
            entity.ToTable("ORDER_ITEM_PRICE_INFO");


            entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId })
                .HasName("ORDER_OIPI_OITM");

            entity.HasIndex(e => new { e.ProductPriceRuleId, e.ProductPriceActionSeqId })
                .HasName("ORDER_OIPI_PRAI");

            entity.Property(e => e.OrderItemPriceInfoId)
                .HasColumnName("ORDER_ITEM_PRICE_INFO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.ModifyAmount)
                .HasColumnName("MODIFY_AMOUNT")
                .HasColumnType("decimal(18,3)");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPriceActionSeqId)
                .HasColumnName("PRODUCT_PRICE_ACTION_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPriceRuleId)
                .HasColumnName("PRODUCT_PRICE_RULE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RateCode)
                .HasColumnName("RATE_CODE")
                .HasColumnType("varchar(60)");

            entity.HasOne(d => d.OrderI)
                .WithMany(p => p.OrderItemPriceInfoes)
                .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                .HasConstraintName("ORDER_OIPI_OITM");

            entity.HasOne(d => d.ProductPrice)
                .WithMany(p => p.OrderItemPriceInfoes)
                .HasForeignKey(d => new { d.ProductPriceRuleId, d.ProductPriceActionSeqId })
                .HasConstraintName("ORDER_OIPI_PRAI");
        });

        modelBuilder.Entity<OrderItemRole>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.OrderItemSeqId, e.PartyId, e.RoleTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("ORDER_ITEM_ROLE");


            entity.HasIndex(e => e.OrderId)
                .HasName("ORDER_ITRL_OHDR");

            entity.HasIndex(e => e.PartyId)
                .HasName("ORDER_ITRL_PARTY");

            entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId })
                .HasName("ORDER_ITRL_OITM");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("ORDER_ITRL_PTRLE");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Order)
                .WithMany(p => p.OrderItemRoles)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ITRL_OHDR");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.OrderItemRoles)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ITRL_PARTY");

            entity.HasOne(d => d.OrderI)
                .WithMany(p => p.OrderItemRoles)
                .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ITRL_OITM");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.OrderItemRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ITRL_PTRLE");
        });

        modelBuilder.Entity<OrderItemShipGroup>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.ShipGroupSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("ORDER_ITEM_SHIP_GROUP");

            entity.HasIndex(e => e.CarrierPartyId)
                .HasName("ORDER_ITSG_CPRTY");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("ORDER_ITSG_CNTM");


            entity.HasIndex(e => e.FacilityId)
                .HasName("ORDER_ITSG_FAC");


            entity.HasIndex(e => e.OrderId)
                .HasName("ORDER_ITSG_ORDH");

            entity.HasIndex(e => e.ShipmentMethodTypeId)
                .HasName("ORDER_ITSG_SHMTP");

            entity.HasIndex(e => e.SupplierAgreementId)
                .HasName("ORDER_ITSG_SAGR");

            entity.HasIndex(e => e.SupplierPartyId)
                .HasName("ORDER_ITSG_SPRTY");

            entity.HasIndex(e => e.TelecomContactMechId)
                .HasName("ORDER_ITSG_TCNB");

            entity.HasIndex(e => e.VendorPartyId)
                .HasName("ORDER_ITSG_VPRTY");

            entity.HasIndex(e => new { e.CarrierPartyId, e.CarrierRoleTypeId })
                .HasName("ORDER_ITSG_CPRLE");

            entity.HasIndex(e => new { e.ShipmentMethodTypeId, e.CarrierPartyId, e.CarrierRoleTypeId })
                .HasName("ORDER_ITSG_CSHM");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipGroupSeqId)
                .HasColumnName("SHIP_GROUP_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CarrierPartyId)
                .HasColumnName("CARRIER_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CarrierRoleTypeId)
                .HasColumnName("CARRIER_ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.EstimatedDeliveryDate)
                .HasColumnName("ESTIMATED_DELIVERY_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.EstimatedShipDate)
                .HasColumnName("ESTIMATED_SHIP_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.GiftMessage)
                .HasColumnName("GIFT_MESSAGE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.IsGift)
                .HasColumnName("IS_GIFT")
                .HasColumnType("char(1)");


            entity.Property(e => e.MaySplit)
                .HasColumnName("MAY_SPLIT")
                .HasColumnType("char(1)");

            entity.Property(e => e.ShipAfterDate)
                .HasColumnName("SHIP_AFTER_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ShipByDate)
                .HasColumnName("SHIP_BY_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ShipmentMethodTypeId)
                .HasColumnName("SHIPMENT_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShippingInstructions)
                .HasColumnName("SHIPPING_INSTRUCTIONS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.SupplierAgreementId)
                .HasColumnName("SUPPLIER_AGREEMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SupplierPartyId)
                .HasColumnName("SUPPLIER_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TelecomContactMechId)
                .HasColumnName("TELECOM_CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TrackingNumber)
                .HasColumnName("TRACKING_NUMBER")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.VendorPartyId)
                .HasColumnName("VENDOR_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.CarrierParty)
                .WithMany(p => p.OrderItemShipGroupCarrierParties)
                .HasForeignKey(d => d.CarrierPartyId)
                .HasConstraintName("ORDER_ITSG_CPRTY");

            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.OrderItemShipGroupContactMeches)
                .HasForeignKey(d => d.ContactMechId)
                .HasConstraintName("ORDER_ITSG_CNTM");

            entity.HasOne(d => d.ContactMechNavigation)
                .WithMany(p => p.OrderItemShipGroups)
                .HasForeignKey(d => d.ContactMechId)
                .HasConstraintName("ORDER_ITSG_PADR");

            entity.HasOne(d => d.Facility)
                .WithMany(p => p.OrderItemShipGroups)
                .HasForeignKey(d => d.FacilityId)
                .HasConstraintName("ORDER_ITSG_FAC");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.OrderItemShipGroups)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ITSG_ORDH");

            entity.HasOne(d => d.ShipmentMethodType)
                .WithMany(p => p.OrderItemShipGroups)
                .HasForeignKey(d => d.ShipmentMethodTypeId)
                .HasConstraintName("ORDER_ITSG_SHMTP");

            entity.HasOne(d => d.SupplierAgreement)
                .WithMany(p => p.OrderItemShipGroups)
                .HasForeignKey(d => d.SupplierAgreementId)
                .HasConstraintName("ORDER_ITSG_SAGR");

            entity.HasOne(d => d.SupplierParty)
                .WithMany(p => p.OrderItemShipGroupSupplierParties)
                .HasForeignKey(d => d.SupplierPartyId)
                .HasConstraintName("ORDER_ITSG_SPRTY");

            entity.HasOne(d => d.TelecomContactMech)
                .WithMany(p => p.OrderItemShipGroupTelecomContactMeches)
                .HasForeignKey(d => d.TelecomContactMechId)
                .HasConstraintName("ORDER_ITSG_TCNT");

            entity.HasOne(d => d.TelecomContactMechNavigation)
                .WithMany(p => p.OrderItemShipGroups)
                .HasForeignKey(d => d.TelecomContactMechId)
                .HasConstraintName("ORDER_ITSG_TCNB");

            entity.HasOne(d => d.VendorParty)
                .WithMany(p => p.OrderItemShipGroupVendorParties)
                .HasForeignKey(d => d.VendorPartyId)
                .HasConstraintName("ORDER_ITSG_VPRTY");

            entity.HasOne(d => d.Carrier)
                .WithMany(p => p.OrderItemShipGroups)
                .HasForeignKey(d => new { d.CarrierPartyId, d.CarrierRoleTypeId })
                .HasConstraintName("ORDER_ITSG_CPRLE");

            entity.HasOne(d => d.CarrierShipmentMethod)
                .WithMany(p => p.OrderItemShipGroups)
                .HasForeignKey(d => new { d.ShipmentMethodTypeId, d.CarrierPartyId, d.CarrierRoleTypeId })
                .HasConstraintName("ORDER_ITSG_CSHM");
        });

        modelBuilder.Entity<OrderItemShipGroupAssoc>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.OrderItemSeqId, e.ShipGroupSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("ORDER_ITEM_SHIP_GROUP_ASSOC");


            entity.HasIndex(e => e.OrderId)
                .HasName("ORDER_ISGA_ORDH");

            entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId })
                .HasName("ORDER_ISGA_ORDI");

            entity.HasIndex(e => new { e.OrderId, e.ShipGroupSeqId })
                .HasName("ORDER_ISGA_OISG");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipGroupSeqId)
                .HasColumnName("SHIP_GROUP_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CancelQuantity)
                .HasColumnName("CANCEL_QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.OrderItemShipGroupAssocs)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ISGA_ORDH");

            entity.HasOne(d => d.OrderI)
                .WithMany(p => p.OrderItemShipGroupAssocs)
                .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ISGA_ORDI");

            entity.HasOne(d => d.OrderItemShipGroup)
                .WithMany(p => p.OrderItemShipGroupAssocs)
                .HasForeignKey(d => new { d.OrderId, d.ShipGroupSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ISGA_OISG");
        });

        modelBuilder.Entity<OrderItemShipGrpInvRe>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.ShipGroupSeqId, e.OrderItemSeqId, e.InventoryItemId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("ORDER_ITEM_SHIP_GRP_INV_RES");


            entity.HasIndex(e => e.InventoryItemId)
                .HasName("ORDER_ITIR_INVITM");


            entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId })
                .HasName("ORDER_ITIR_OITM");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipGroupSeqId)
                .HasColumnName("SHIP_GROUP_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InventoryItemId)
                .HasColumnName("INVENTORY_ITEM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedDatetime)
                .HasColumnName("CREATED_DATETIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrentPromisedDate)
                .HasColumnName("CURRENT_PROMISED_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PickStartDate)
                .HasColumnName("PICK_START_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Priority)
                .HasColumnName("PRIORITY")
                .HasColumnType("char(1)");

            entity.Property(e => e.PromisedDatetime)
                .HasColumnName("PROMISED_DATETIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.QuantityNotAvailable)
                .HasColumnName("QUANTITY_NOT_AVAILABLE")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReserveOrderEnumId)
                .HasColumnName("RESERVE_ORDER_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReservedDatetime)
                .HasColumnName("RESERVED_DATETIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.SequenceId)
                .HasColumnName("SEQUENCE_ID")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.InventoryItem)
                .WithMany(p => p.OrderItemShipGrpInvRes)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ITIR_INVITM");

            entity.HasOne(d => d.OrderI)
                .WithMany(p => p.OrderItemShipGrpInvRes)
                .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ITIR_OITM");
        });

        modelBuilder.Entity<OrderItemType>(entity =>
        {
            entity.ToTable("ORDER_ITEM_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("ORDER_ITEM_TYPPAR");

            entity.Property(e => e.OrderItemTypeId)
                .HasColumnName("ORDER_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("ORDER_ITEM_TYPPAR");
        });

        modelBuilder.Entity<OrderItemTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.OrderItemTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("ORDER_ITEM_TYPE_ATTR");


            entity.HasIndex(e => e.OrderItemTypeId)
                .HasName("ORDER_ITEM_TYPATR");

            entity.Property(e => e.OrderItemTypeId)
                .HasColumnName("ORDER_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.OrderItemType)
                .WithMany(p => p.OrderItemTypeAttrs)
                .HasForeignKey(d => d.OrderItemTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ITEM_TYPATR");
        });

        modelBuilder.Entity<OrderNotification>(entity =>
        {
            entity.ToTable("ORDER_NOTIFICATION");


            entity.HasIndex(e => e.EmailType)
                .HasName("ORD_NOTIFY_ENUM");


            entity.HasIndex(e => e.OrderId)
                .HasName("ORD_NOTIFY_ORDHDR");

            entity.Property(e => e.OrderNotificationId)
                .HasColumnName("ORDER_NOTIFICATION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.EmailType)
                .HasColumnName("EMAIL_TYPE")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.NotificationDate)
                .HasColumnName("NOTIFICATION_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.EmailTypeNavigation)
                .WithMany(p => p.OrderNotifications)
                .HasForeignKey(d => d.EmailType)
                .HasConstraintName("ORD_NOTIFY_ENUM");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.OrderNotifications)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("ORD_NOTIFY_ORDHDR");
        });

        modelBuilder.Entity<OrderPaymentPreference>(entity =>
        {
            entity.ToTable("ORDER_PAYMENT_PREFERENCE");

            entity.HasIndex(e => e.CreatedByUserLogin)
                .HasName("ORDER_PMPRF_USRL");


            entity.HasIndex(e => e.FinAccountId)
                .HasName("ORDER_PMPRF_FINACT");


            entity.HasIndex(e => e.NeedsNsfRetry)
                .HasName("NSF_RETRY_CHECK");

            entity.HasIndex(e => e.OrderId)
                .HasName("ORDER_PMPRF_OHDR");

            entity.HasIndex(e => e.PaymentMethodId)
                .HasName("ORDER_PMPRF_PMETH");

            entity.HasIndex(e => e.PaymentMethodTypeId)
                .HasName("ORDER_PMPRF_PMTP");

            entity.HasIndex(e => e.ProductPricePurposeId)
                .HasName("ORDER_PMPRF_PPRP");

            entity.HasIndex(e => e.StatusId)
                .HasName("ORDER_PMPRF_STTS");

            entity.Property(e => e.OrderPaymentPreferenceId)
                .HasColumnName("ORDER_PAYMENT_PREFERENCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BillingPostalCode)
                .HasColumnName("BILLING_POSTAL_CODE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedDate)
                .HasColumnName("CREATED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FinAccountId)
                .HasColumnName("FIN_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.LastModifiedDate)
                .HasColumnName("LAST_MODIFIED_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ManualAuthCode)
                .HasColumnName("MANUAL_AUTH_CODE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.ManualRefNum)
                .HasColumnName("MANUAL_REF_NUM")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.MaxAmount)
                .HasColumnName("MAX_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.NeedsNsfRetry)
                .HasColumnName("NEEDS_NSF_RETRY")
                .HasColumnType("char(1)");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OverflowFlag)
                .HasColumnName("OVERFLOW_FLAG")
                .HasColumnType("char(1)");

            entity.Property(e => e.PaymentMethodId)
                .HasColumnName("PAYMENT_METHOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentMethodTypeId)
                .HasColumnName("PAYMENT_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PresentFlag)
                .HasColumnName("PRESENT_FLAG")
                .HasColumnType("char(1)");

            entity.Property(e => e.ProcessAttempt)
                .HasColumnName("PROCESS_ATTEMPT")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ProductPricePurposeId)
                .HasColumnName("PRODUCT_PRICE_PURPOSE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SecurityCode)
                .HasColumnName("SECURITY_CODE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ShipGroupSeqId)
                .HasColumnName("SHIP_GROUP_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SwipedFlag)
                .HasColumnName("SWIPED_FLAG")
                .HasColumnType("char(1)");

            entity.Property(e => e.Track2)
                .HasColumnName("TRACK2")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.CreatedByUserLoginNavigation)
                .WithMany(p => p.OrderPaymentPreferences)
                .HasForeignKey(d => d.CreatedByUserLogin)
                .HasConstraintName("ORDER_PMPRF_USRL");

            entity.HasOne(d => d.FinAccount)
                .WithMany(p => p.OrderPaymentPreferences)
                .HasForeignKey(d => d.FinAccountId)
                .HasConstraintName("ORDER_PMPRF_FINACT");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.OrderPaymentPreferences)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("ORDER_PMPRF_OHDR");

            entity.HasOne(d => d.PaymentMethod)
                .WithMany(p => p.OrderPaymentPreferences)
                .HasForeignKey(d => d.PaymentMethodId)
                .HasConstraintName("ORDER_PMPRF_PMETH");

            entity.HasOne(d => d.PaymentMethodType)
                .WithMany(p => p.OrderPaymentPreferences)
                .HasForeignKey(d => d.PaymentMethodTypeId)
                .HasConstraintName("ORDER_PMPRF_PMTP");

            entity.HasOne(d => d.ProductPricePurpose)
                .WithMany(p => p.OrderPaymentPreferences)
                .HasForeignKey(d => d.ProductPricePurposeId)
                .HasConstraintName("ORDER_PMPRF_PPRP");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.OrderPaymentPreferences)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("ORDER_PMPRF_STTS");
        });

        modelBuilder.Entity<OrderProductPromoCode>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.ProductPromoCodeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("ORDER_PRODUCT_PROMO_CODE");


            entity.HasIndex(e => e.OrderId)
                .HasName("ORDER_PPCD_ORD");

            entity.HasIndex(e => e.ProductPromoCodeId)
                .HasName("ORDER_PPCD_PPC");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoCodeId)
                .HasColumnName("PRODUCT_PROMO_CODE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Order)
                .WithMany(p => p.OrderProductPromoCodes)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_PPCD_ORD");

            entity.HasOne(d => d.ProductPromoCode)
                .WithMany(p => p.OrderProductPromoCodes)
                .HasForeignKey(d => d.ProductPromoCodeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_PPCD_PPC");
        });

        modelBuilder.Entity<OrderRequirementCommitment>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.OrderItemSeqId, e.RequirementId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("ORDER_REQUIREMENT_COMMITMENT");


            entity.HasIndex(e => e.OrderId)
                .HasName("ORDREQ_CMT_ORD");

            entity.HasIndex(e => e.RequirementId)
                .HasName("ORDREQ_CMT_REQ");

            entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId })
                .HasName("ORDREQ_CMT_OITM");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RequirementId)
                .HasColumnName("REQUIREMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.OrderRequirementCommitments)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDREQ_CMT_ORD");

            entity.HasOne(d => d.Requirement)
                .WithMany(p => p.OrderRequirementCommitments)
                .HasForeignKey(d => d.RequirementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDREQ_CMT_REQ");

            entity.HasOne(d => d.OrderI)
                .WithMany(p => p.OrderRequirementCommitments)
                .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDREQ_CMT_OITM");
        });

        modelBuilder.Entity<OrderRole>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.PartyId, e.RoleTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("ORDER_ROLE");


            entity.HasIndex(e => e.OrderId)
                .HasName("ORDER_ROLE_OHDR");

            entity.HasIndex(e => e.PartyId)
                .HasName("ORDER_ROLE_PARTY");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("ORDER_ROLE_PROLE");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Order)
                .WithMany(p => p.OrderRoles)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ROLE_OHDR");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.OrderRoles)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ROLE_PARTY");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.OrderRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_ROLE_PROLE");
        });

        modelBuilder.Entity<OrderShipment>(entity =>
        {
            entity.HasKey(e => new
                    { e.OrderId, e.OrderItemSeqId, e.ShipGroupSeqId, e.ShipmentId, e.ShipmentItemSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0 });

            entity.ToTable("ORDER_SHIPMENT");


            entity.HasIndex(e => e.OrderId)
                .HasName("ORDER_SHPMT_OHDR");

            entity.HasIndex(e => e.ShipmentId)
                .HasName("ORDER_SHPMT_SHPMT");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipGroupSeqId)
                .HasColumnName("SHIP_GROUP_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentId)
                .HasColumnName("SHIPMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentItemSeqId)
                .HasColumnName("SHIPMENT_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.OrderShipments)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_SHPMT_OHDR");

            entity.HasOne(d => d.Shipment)
                .WithMany(p => p.OrderShipments)
                .HasForeignKey(d => d.ShipmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_SHPMT_SHPMT");
        });

        modelBuilder.Entity<OrderStatu>(entity =>
        {
            entity.HasKey(e => e.OrderStatusId)
                .HasName("PRIMARY");

            entity.ToTable("ORDER_STATUS");


            entity.HasIndex(e => e.OrderId)
                .HasName("ORDER_STTS_OHDR");

            entity.HasIndex(e => e.StatusId)
                .HasName("ORDER_STTS_STTS");

            entity.HasIndex(e => e.StatusUserLogin)
                .HasName("ORDER_STTS_USER");

            entity.Property(e => e.OrderStatusId)
                .HasColumnName("ORDER_STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ChangeReason)
                .HasColumnName("CHANGE_REASON")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderPaymentPreferenceId)
                .HasColumnName("ORDER_PAYMENT_PREFERENCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusDatetime)
                .HasColumnName("STATUS_DATETIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusUserLogin)
                .HasColumnName("STATUS_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.OrderStatus)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("ORDER_STTS_OHDR");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.OrderStatus)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("ORDER_STTS_STTS");

            entity.HasOne(d => d.StatusUserLoginNavigation)
                .WithMany(p => p.OrderStatus)
                .HasForeignKey(d => d.StatusUserLogin)
                .HasConstraintName("ORDER_STTS_USER");
        });

        modelBuilder.Entity<OrderSummaryEntry>(entity =>
        {
            entity.HasKey(e => new { e.EntryDate, e.ProductId, e.FacilityId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("ORDER_SUMMARY_ENTRY");


            entity.HasIndex(e => e.FacilityId)
                .HasName("ORDER_SMENT_FAC");


            entity.HasIndex(e => e.ProductId)
                .HasName("ORDER_SMENT_PROD");

            entity.Property(e => e.EntryDate)
                .HasColumnName("ENTRY_DATE")
                .HasColumnType("date");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GrossSales)
                .HasColumnName("GROSS_SALES")
                .HasColumnType("decimal(18,2)");


            entity.Property(e => e.ProductCost)
                .HasColumnName("PRODUCT_COST")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.TotalQuantity)
                .HasColumnName("TOTAL_QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.HasOne(d => d.Facility)
                .WithMany(p => p.OrderSummaryEntries)
                .HasForeignKey(d => d.FacilityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_SMENT_FAC");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.OrderSummaryEntries)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_SMENT_PROD");
        });

        modelBuilder.Entity<OrderTerm>(entity =>
        {
            entity.HasKey(e => new { e.TermTypeId, e.OrderId, e.OrderItemSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("ORDER_TERM");


            entity.HasIndex(e => e.OrderId)
                .HasName("ORDER_TERM_OHDR");

            entity.HasIndex(e => e.TermTypeId)
                .HasName("ORDER_TERM_TTYPE");

            entity.HasIndex(e => e.UomId)
                .HasName("ORDER_TERM_UOM");

            entity.Property(e => e.TermTypeId)
                .HasColumnName("TERM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.TermDays)
                .HasColumnName("TERM_DAYS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.TermValue)
                .HasColumnName("TERM_VALUE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.TextValue)
                .HasColumnName("TEXT_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.UomId)
                .HasColumnName("UOM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.OrderTerms)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_TERM_OHDR");

            entity.HasOne(d => d.TermType)
                .WithMany(p => p.OrderTerms)
                .HasForeignKey(d => d.TermTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_TERM_TTYPE");

            entity.HasOne(d => d.Uom)
                .WithMany(p => p.OrderTerms)
                .HasForeignKey(d => d.UomId)
                .HasConstraintName("ORDER_TERM_UOM");
        });

        modelBuilder.Entity<OrderTermAttribute>(entity =>
        {
            entity.HasKey(e => new { e.TermTypeId, e.OrderId, e.OrderItemSeqId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("ORDER_TERM_ATTRIBUTE");


            entity.HasIndex(e => new { e.TermTypeId, e.OrderId, e.OrderItemSeqId })
                .HasName("ORDER_TATTR_OTRM");

            entity.Property(e => e.TermTypeId)
                .HasColumnName("TERM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.OrderTerm)
                .WithMany(p => p.OrderTermAttributes)
                .HasForeignKey(d => new { d.TermTypeId, d.OrderId, d.OrderItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_TATTR_OTRM");
        });

        modelBuilder.Entity<OrderType>(entity =>
        {
            entity.ToTable("ORDER_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("ORDER_TYPE_PARENT");

            entity.Property(e => e.OrderTypeId)
                .HasColumnName("ORDER_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("ORDER_TYPE_PARENT");
        });

        modelBuilder.Entity<OrderTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.OrderTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("ORDER_TYPE_ATTR");


            entity.HasIndex(e => e.OrderTypeId)
                .HasName("ORDER_TPAT_ORTYP");

            entity.Property(e => e.OrderTypeId)
                .HasColumnName("ORDER_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.OrderType)
                .WithMany(p => p.OrderTypeAttrs)
                .HasForeignKey(d => d.OrderTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ORDER_TPAT_ORTYP");
        });

        modelBuilder.Entity<OtherDataResource>(entity =>
        {
            entity.HasKey(e => e.DataResourceId)
                .HasName("PRIMARY");

            entity.ToTable("OTHER_DATA_RESOURCE");


            entity.HasIndex(e => e.DataResourceId)
                .HasName("DATA_REC_OTHER");


            entity.Property(e => e.DataResourceId)
                .HasColumnName("DATA_RESOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DataResourceContent).HasColumnName("DATA_RESOURCE_CONTENT");


            entity.HasOne(d => d.DataResource)
                .WithOne(p => p.OtherDataResource)
                .HasForeignKey<OtherDataResource>(d => d.DataResourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DATA_REC_OTHER");
        });

        modelBuilder.Entity<Party>(entity =>
        {
            entity.ToTable("PARTY");

            entity.HasIndex(e => e.CreatedByUserLogin)
                .HasName("PARTY_CUL");


            entity.HasIndex(e => e.DataSourceId)
                .HasName("PARTY_DATSRC");

            entity.HasIndex(e => e.ExternalId)
                .HasName("PARTYEXT_ID_IDX");

            entity.HasIndex(e => e.LastModifiedByUserLogin)
                .HasName("PARTY_LMCUL");


            entity.HasIndex(e => e.PartyTypeId)
                .HasName("PARTY_PTY_TYP");

            entity.HasIndex(e => e.PreferredCurrencyUomId)
                .HasName("PARTY_PREF_CRNCY");

            entity.HasIndex(e => e.StatusId)
                .HasName("PARTY_STATUSITM");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedDate)
                .HasColumnName("CREATED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DataSourceId)
                .HasColumnName("DATA_SOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("longtext");

            entity.Property(e => e.ExternalId)
                .HasColumnName("EXTERNAL_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.IsUnread)
                .HasColumnName("IS_UNREAD")
                .HasColumnType("char(1)");

            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.LastModifiedDate)
                .HasColumnName("LAST_MODIFIED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.PartyTypeId)
                .HasColumnName("PARTY_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PreferredCurrencyUomId)
                .HasColumnName("PREFERRED_CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.CreatedByUserLoginNavigation)
                .WithMany(p => p.PartyCreatedByUserLoginNavigations)
                .HasForeignKey(d => d.CreatedByUserLogin)
                .HasConstraintName("PARTY_CUL")
                .IsRequired(false);
            ;

            entity.HasOne(d => d.DataSource)
                .WithMany(p => p.Parties)
                .HasForeignKey(d => d.DataSourceId)
                .HasConstraintName("PARTY_DATSRC")
                .IsRequired(false);

            entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                .WithMany(p => p.PartyLastModifiedByUserLoginNavigations)
                .HasForeignKey(d => d.LastModifiedByUserLogin)
                .HasConstraintName("PARTY_LMCUL")
                .IsRequired(false);
            ;

            entity.HasOne(d => d.PartyType)
                .WithMany(p => p.Parties)
                .HasForeignKey(d => d.PartyTypeId)
                .HasConstraintName("PARTY_PTY_TYP");

            entity.HasOne(d => d.PreferredCurrencyUom)
                .WithMany(p => p.Parties)
                .HasForeignKey(d => d.PreferredCurrencyUomId)
                .HasConstraintName("PARTY_PREF_CRNCY")
                .IsRequired(false);

            entity.HasOne(d => d.Status)
                .WithMany(p => p.Parties)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("PARTY_STATUSITM");
        });

        modelBuilder.Entity<PartyAcctgPreference>(entity =>
        {
            entity.HasKey(e => e.PartyId)
                .HasName("PRIMARY");

            entity.ToTable("PARTY_ACCTG_PREFERENCE");

            entity.HasIndex(e => e.BaseCurrencyUomId)
                .HasName("ACCTGPREF_CURNCY");

            entity.HasIndex(e => e.CogsMethodId)
                .HasName("ACTGPREF_COGS");


            entity.HasIndex(e => e.ErrorGlJournalId)
                .HasName("ACTGPREF_GLJRNL");

            entity.HasIndex(e => e.InvoiceSeqCustMethId)
                .HasName("ACTGPREF_INVCM");

            entity.HasIndex(e => e.InvoiceSequenceEnumId)
                .HasName("ACTGPREF_INVSQ");


            entity.HasIndex(e => e.OrderSeqCustMethId)
                .HasName("ACTGPREF_ODRCM");

            entity.HasIndex(e => e.OrderSequenceEnumId)
                .HasName("ACTGPREF_ODRSQ");

            entity.HasIndex(e => e.PartyId)
                .HasName("ACTG_PREF_PTY");

            entity.HasIndex(e => e.QuoteSeqCustMethId)
                .HasName("ACTGPREF_QTECM");

            entity.HasIndex(e => e.QuoteSequenceEnumId)
                .HasName("ACTGPREF_QTESQ");

            entity.HasIndex(e => e.RefundPaymentMethodId)
                .HasName("ACTGPREF_PAYMTH");

            entity.HasIndex(e => e.TaxFormId)
                .HasName("ACTGPREF_TAXFORM");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BaseCurrencyUomId)
                .HasColumnName("BASE_CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CogsMethodId)
                .HasColumnName("COGS_METHOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.EnableAccounting)
                .HasColumnName("ENABLE_ACCOUNTING")
                .HasColumnType("char(1)");

            entity.Property(e => e.ErrorGlJournalId)
                .HasColumnName("ERROR_GL_JOURNAL_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FiscalYearStartDay)
                .HasColumnName("FISCAL_YEAR_START_DAY")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.FiscalYearStartMonth)
                .HasColumnName("FISCAL_YEAR_START_MONTH")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.InvoiceIdPrefix)
                .HasColumnName("INVOICE_ID_PREFIX")
                .HasColumnType("varchar(10)");

            entity.Property(e => e.InvoiceSeqCustMethId)
                .HasColumnName("INVOICE_SEQ_CUST_METH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceSequenceEnumId)
                .HasColumnName("INVOICE_SEQUENCE_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.LastInvoiceNumber)
                .HasColumnName("LAST_INVOICE_NUMBER")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.LastInvoiceRestartDate)
                .HasColumnName("LAST_INVOICE_RESTART_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.LastOrderNumber)
                .HasColumnName("LAST_ORDER_NUMBER")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.LastQuoteNumber)
                .HasColumnName("LAST_QUOTE_NUMBER")
                .HasColumnType("decimal(20,0)");


            entity.Property(e => e.OrderIdPrefix)
                .HasColumnName("ORDER_ID_PREFIX")
                .HasColumnType("varchar(10)");

            entity.Property(e => e.OrderSeqCustMethId)
                .HasColumnName("ORDER_SEQ_CUST_METH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderSequenceEnumId)
                .HasColumnName("ORDER_SEQUENCE_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.QuoteIdPrefix)
                .HasColumnName("QUOTE_ID_PREFIX")
                .HasColumnType("varchar(10)");

            entity.Property(e => e.QuoteSeqCustMethId)
                .HasColumnName("QUOTE_SEQ_CUST_METH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.QuoteSequenceEnumId)
                .HasColumnName("QUOTE_SEQUENCE_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RefundPaymentMethodId)
                .HasColumnName("REFUND_PAYMENT_METHOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TaxFormId)
                .HasColumnName("TAX_FORM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.UseInvoiceIdForReturns)
                .HasColumnName("USE_INVOICE_ID_FOR_RETURNS")
                .HasColumnType("char(1)");

            entity.HasOne(d => d.BaseCurrencyUom)
                .WithMany(p => p.PartyAcctgPreferences)
                .HasForeignKey(d => d.BaseCurrencyUomId)
                .HasConstraintName("ACCTGPREF_CURNCY");

            entity.HasOne(d => d.CogsMethod)
                .WithMany(p => p.PartyAcctgPreferenceCogsMethods)
                .HasForeignKey(d => d.CogsMethodId)
                .HasConstraintName("ACTGPREF_COGS");

            entity.HasOne(d => d.ErrorGlJournal)
                .WithMany(p => p.PartyAcctgPreferences)
                .HasForeignKey(d => d.ErrorGlJournalId)
                .HasConstraintName("ACTGPREF_GLJRNL");

            entity.HasOne(d => d.InvoiceSeqCustMeth)
                .WithMany(p => p.PartyAcctgPreferenceInvoiceSeqCustMeths)
                .HasForeignKey(d => d.InvoiceSeqCustMethId)
                .HasConstraintName("ACTGPREF_INVCM");

            entity.HasOne(d => d.InvoiceSequenceEnum)
                .WithMany(p => p.PartyAcctgPreferenceInvoiceSequenceEnums)
                .HasForeignKey(d => d.InvoiceSequenceEnumId)
                .HasConstraintName("ACTGPREF_INVSQ");

            entity.HasOne(d => d.OrderSeqCustMeth)
                .WithMany(p => p.PartyAcctgPreferenceOrderSeqCustMeths)
                .HasForeignKey(d => d.OrderSeqCustMethId)
                .HasConstraintName("ACTGPREF_ODRCM");

            entity.HasOne(d => d.OrderSequenceEnum)
                .WithMany(p => p.PartyAcctgPreferenceOrderSequenceEnums)
                .HasForeignKey(d => d.OrderSequenceEnumId)
                .HasConstraintName("ACTGPREF_ODRSQ");

            entity.HasOne(d => d.Party)
                .WithOne(p => p.PartyAcctgPreference)
                .HasForeignKey<PartyAcctgPreference>(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ACTG_PREF_PTY");

            entity.HasOne(d => d.QuoteSeqCustMeth)
                .WithMany(p => p.PartyAcctgPreferenceQuoteSeqCustMeths)
                .HasForeignKey(d => d.QuoteSeqCustMethId)
                .HasConstraintName("ACTGPREF_QTECM");

            entity.HasOne(d => d.QuoteSequenceEnum)
                .WithMany(p => p.PartyAcctgPreferenceQuoteSequenceEnums)
                .HasForeignKey(d => d.QuoteSequenceEnumId)
                .HasConstraintName("ACTGPREF_QTESQ");

            entity.HasOne(d => d.RefundPaymentMethod)
                .WithMany(p => p.PartyAcctgPreferences)
                .HasForeignKey(d => d.RefundPaymentMethodId)
                .HasConstraintName("ACTGPREF_PAYMTH");

            entity.HasOne(d => d.TaxForm)
                .WithMany(p => p.PartyAcctgPreferenceTaxForms)
                .HasForeignKey(d => d.TaxFormId)
                .HasConstraintName("ACTGPREF_TAXFORM");
        });

        modelBuilder.Entity<PartyAttribute>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PARTY_ATTRIBUTE");


            entity.HasIndex(e => e.PartyId)
                .HasName("PARTY_ATTR");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Party)
                .WithMany(p => p.PartyAttributes)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_ATTR");
        });

        modelBuilder.Entity<PartyBenefit>(entity =>
        {
            entity.HasKey(e => new
                    { e.RoleTypeIdFrom, e.RoleTypeIdTo, e.PartyIdFrom, e.PartyIdTo, e.BenefitTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0, 0 });

            entity.ToTable("PARTY_BENEFIT");

            entity.HasIndex(e => e.BenefitTypeId)
                .HasName("PTY_BNFT_BNFTTP");


            entity.HasIndex(e => e.PartyIdFrom)
                .HasName("PTY_BNFT_FPTY");

            entity.HasIndex(e => e.PartyIdTo)
                .HasName("PTY_BNFT_TPTY");

            entity.HasIndex(e => new { e.PartyIdFrom, e.RoleTypeIdFrom })
                .HasName("PTY_BNFT_FPTRL");

            entity.HasIndex(e => new { e.PartyIdTo, e.RoleTypeIdTo })
                .HasName("PTY_BNFT_TPTRL");

            entity.Property(e => e.RoleTypeIdFrom)
                .HasColumnName("ROLE_TYPE_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeIdTo)
                .HasColumnName("ROLE_TYPE_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyIdFrom)
                .HasColumnName("PARTY_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyIdTo)
                .HasColumnName("PARTY_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BenefitTypeId)
                .HasColumnName("BENEFIT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ActualEmployerPaidPercent).HasColumnName("ACTUAL_EMPLOYER_PAID_PERCENT");

            entity.Property(e => e.AvailableTime)
                .HasColumnName("AVAILABLE_TIME")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.Cost)
                .HasColumnName("COST")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PeriodTypeId)
                .HasColumnName("PERIOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.BenefitType)
                .WithMany(p => p.PartyBenefits)
                .HasForeignKey(d => d.BenefitTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PTY_BNFT_BNFTTP");

            entity.HasOne(d => d.PartyIdFromNavigation)
                .WithMany(p => p.PartyBenefitPartyIdFromNavigations)
                .HasForeignKey(d => d.PartyIdFrom)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PTY_BNFT_FPTY");

            entity.HasOne(d => d.PartyIdToNavigation)
                .WithMany(p => p.PartyBenefitPartyIdToNavigations)
                .HasForeignKey(d => d.PartyIdTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PTY_BNFT_TPTY");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.PartyBenefitPartyRoles)
                .HasForeignKey(d => new { d.PartyIdFrom, d.RoleTypeIdFrom })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PTY_BNFT_FPTRL");

            entity.HasOne(d => d.PartyRoleNavigation)
                .WithMany(p => p.PartyBenefitPartyRoleNavigations)
                .HasForeignKey(d => new { d.PartyIdTo, d.RoleTypeIdTo })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PTY_BNFT_TPTRL");
        });

        modelBuilder.Entity<PartyCarrierAccount>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.CarrierPartyId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PARTY_CARRIER_ACCOUNT");

            entity.HasIndex(e => e.CarrierPartyId)
                .HasName("PARTY_CRRACT_CPT");


            entity.HasIndex(e => e.PartyId)
                .HasName("PARTY_CRRACT_PTY");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CarrierPartyId)
                .HasColumnName("CARRIER_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.AccountNumber)
                .HasColumnName("ACCOUNT_NUMBER")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.CarrierParty)
                .WithMany(p => p.PartyCarrierAccountCarrierParties)
                .HasForeignKey(d => d.CarrierPartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_CRRACT_CPT");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.PartyCarrierAccountParties)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_CRRACT_PTY");
        });

        modelBuilder.Entity<PartyClassification>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.PartyClassificationGroupId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PARTY_CLASSIFICATION");


            entity.HasIndex(e => e.PartyClassificationGroupId)
                .HasName("PARTY_CLASS_GRP");

            entity.HasIndex(e => e.PartyId)
                .HasName("PARTY_CLASS_PARTY");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyClassificationGroupId)
                .HasColumnName("PARTY_CLASSIFICATION_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.PartyClassificationGroup)
                .WithMany(p => p.PartyClassifications)
                .HasForeignKey(d => d.PartyClassificationGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_CLASS_GRP");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.PartyClassifications)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_CLASS_PARTY");
        });

        modelBuilder.Entity<PartyClassificationGroup>(entity =>
        {
            entity.ToTable("PARTY_CLASSIFICATION_GROUP");


            entity.HasIndex(e => e.ParentGroupId)
                .HasName("PARTY_CLASS_GRPPAR");

            entity.HasIndex(e => e.PartyClassificationTypeId)
                .HasName("PARTY_CLSGRP_TYPE");

            entity.Property(e => e.PartyClassificationGroupId)
                .HasColumnName("PARTY_CLASSIFICATION_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.ParentGroupId)
                .HasColumnName("PARENT_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyClassificationTypeId)
                .HasColumnName("PARTY_CLASSIFICATION_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentGroup)
                .WithMany(p => p.InverseParentGroup)
                .HasForeignKey(d => d.ParentGroupId)
                .HasConstraintName("PARTY_CLASS_GRPPAR");

            entity.HasOne(d => d.PartyClassificationType)
                .WithMany(p => p.PartyClassificationGroups)
                .HasForeignKey(d => d.PartyClassificationTypeId)
                .HasConstraintName("PARTY_CLSGRP_TYPE");
        });

        modelBuilder.Entity<PartyClassificationType>(entity =>
        {
            entity.ToTable("PARTY_CLASSIFICATION_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("PARTY_CLASS_TYPPAR");

            entity.Property(e => e.PartyClassificationTypeId)
                .HasColumnName("PARTY_CLASSIFICATION_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("PARTY_CLASS_TYPPAR");
        });

        modelBuilder.Entity<PartyContactMech>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.ContactMechId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PARTY_CONTACT_MECH");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("PARTY_CMECH_CMECH");


            entity.HasIndex(e => e.PartyId)
                .HasName("PARTY_CMECH_PARTY");

            entity.HasIndex(e => e.RoleTypeId)
                .HasName("PARTY_CMECH_ROLE");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("PARTY_CMECH_PROLE");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.AllowSolicitation)
                .HasColumnName("ALLOW_SOLICITATION")
                .HasColumnType("char(1)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Extension)
                .HasColumnName("EXTENSION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.MonthsWithContactMech)
                .HasColumnName("MONTHS_WITH_CONTACT_MECH")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Verified)
                .HasColumnName("VERIFIED")
                .HasColumnType("char(1)");

            entity.Property(e => e.YearsWithContactMech)
                .HasColumnName("YEARS_WITH_CONTACT_MECH")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.PartyContactMeches)
                .HasForeignKey(d => d.ContactMechId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_CMECH_CMECH");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.PartyContactMeches)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_CMECH_PARTY");

            entity.HasOne(d => d.RoleType)
                .WithMany(p => p.PartyContactMeches)
                .HasForeignKey(d => d.RoleTypeId)
                .HasConstraintName("PARTY_CMECH_ROLE");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.PartyContactMeches)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .HasConstraintName("PARTY_CMECH_PROLE");
        });

        modelBuilder.Entity<PartyContactMechPurpose>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.ContactMechId, e.ContactMechPurposeTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PARTY_CONTACT_MECH_PURPOSE");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("PARTY_CMPRP_CMECH");

            entity.HasIndex(e => e.ContactMechPurposeTypeId)
                .HasName("PARTY_CMPRP_TYPE");


            entity.HasIndex(e => e.PartyId)
                .HasName("PARTY_CMPRP_PARTY");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechPurposeTypeId)
                .HasColumnName("CONTACT_MECH_PURPOSE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.PartyContactMechPurposes)
                .HasForeignKey(d => d.ContactMechId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_CMPRP_CMECH");

            entity.HasOne(d => d.ContactMechPurposeType)
                .WithMany(p => p.PartyContactMechPurposes)
                .HasForeignKey(d => d.ContactMechPurposeTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_CMPRP_TYPE");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.PartyContactMechPurposes)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_CMPRP_PARTY");
        });

        modelBuilder.Entity<PartyContent>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.ContentId, e.PartyContentTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PARTY_CONTENT");

            entity.HasIndex(e => e.ContentId)
                .HasName("PARTY_CNT_CNT");


            entity.HasIndex(e => e.PartyContentTypeId)
                .HasName("PARTY_CNT_TYPE");

            entity.HasIndex(e => e.PartyId)
                .HasName("PARTY_CNT_PARTY");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyContentTypeId)
                .HasColumnName("PARTY_CONTENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.PartyContents)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_CNT_CNT");

            entity.HasOne(d => d.PartyContentType)
                .WithMany(p => p.PartyContents)
                .HasForeignKey(d => d.PartyContentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_CNT_TYPE");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.PartyContents)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_CNT_PARTY");
        });

        modelBuilder.Entity<PartyContentType>(entity =>
        {
            entity.ToTable("PARTY_CONTENT_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("PARTYCNT_TP_PAR");

            entity.Property(e => e.PartyContentTypeId)
                .HasColumnName("PARTY_CONTENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("PARTYCNT_TP_PAR");
        });

        modelBuilder.Entity<PartyDataSource>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.DataSourceId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PARTY_DATA_SOURCE");


            entity.HasIndex(e => e.DataSourceId)
                .HasName("PARTY_DATSRC_DSC");


            entity.HasIndex(e => e.PartyId)
                .HasName("PARTY_DATSRC_PTY");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DataSourceId)
                .HasColumnName("DATA_SOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.IsCreate)
                .HasColumnName("IS_CREATE")
                .HasColumnType("char(1)");


            entity.Property(e => e.VisitId)
                .HasColumnName("VISIT_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.DataSource)
                .WithMany(p => p.PartyDataSources)
                .HasForeignKey(d => d.DataSourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_DATSRC_DSC");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.PartyDataSources)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_DATSRC_PTY");
        });

        modelBuilder.Entity<PartyFixedAssetAssignment>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.RoleTypeId, e.FixedAssetId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PARTY_FIXED_ASSET_ASSIGNMENT");


            entity.HasIndex(e => e.FixedAssetId)
                .HasName("PTY_FASTAS_FA");


            entity.HasIndex(e => e.StatusId)
                .HasName("PTY_FASTAS_SI");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("PTY_FASTAS_PTRL");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FixedAssetId)
                .HasColumnName("FIXED_ASSET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.AllocatedDate)
                .HasColumnName("ALLOCATED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.FixedAsset)
                .WithMany(p => p.PartyFixedAssetAssignments)
                .HasForeignKey(d => d.FixedAssetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PTY_FASTAS_FA");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.PartyFixedAssetAssignments)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("PTY_FASTAS_SI");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.PartyFixedAssetAssignments)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PTY_FASTAS_PTRL");
        });

        modelBuilder.Entity<PartyGeoPoint>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.GeoPointId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PARTY_GEO_POINT");


            entity.HasIndex(e => e.GeoPointId)
                .HasName("PARTYGEOPT_GEOPT");


            entity.HasIndex(e => e.PartyId)
                .HasName("PARTYGEOPT_PARTY");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GeoPointId)
                .HasColumnName("GEO_POINT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.GeoPoint)
                .WithMany(p => p.PartyGeoPoints)
                .HasForeignKey(d => d.GeoPointId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTYGEOPT_GEOPT");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.PartyGeoPoints)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTYGEOPT_PARTY");
        });

        modelBuilder.Entity<PartyGlAccount>(entity =>
        {
            entity.HasKey(e => new { e.OrganizationPartyId, e.PartyId, e.RoleTypeId, e.GlAccountTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PARTY_GL_ACCOUNT");


            entity.HasIndex(e => e.GlAccountId)
                .HasName("PRTYGLACCT_GLACCT");

            entity.HasIndex(e => e.GlAccountTypeId)
                .HasName("PRTYGLACCT_GLAT");


            entity.HasIndex(e => e.OrganizationPartyId)
                .HasName("PRTYGLACCT_ORGPRTY");

            entity.HasIndex(e => e.PartyId)
                .HasName("PRTYGLACCT_PRTY");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("PRTYGLACCT_PTRL");

            entity.Property(e => e.OrganizationPartyId)
                .HasColumnName("ORGANIZATION_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GlAccountTypeId)
                .HasColumnName("GL_ACCOUNT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GlAccountId)
                .HasColumnName("GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");


            entity.HasOne(d => d.GlAccount)
                .WithMany(p => p.PartyGlAccounts)
                .HasForeignKey(d => d.GlAccountId)
                .HasConstraintName("PRTYGLACCT_GLACCT");

            entity.HasOne(d => d.GlAccountType)
                .WithMany(p => p.PartyGlAccounts)
                .HasForeignKey(d => d.GlAccountTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRTYGLACCT_GLAT");

            entity.HasOne(d => d.OrganizationParty)
                .WithMany(p => p.PartyGlAccountOrganizationParties)
                .HasForeignKey(d => d.OrganizationPartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRTYGLACCT_ORGPRTY");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.PartyGlAccountParties)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRTYGLACCT_PRTY");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.PartyGlAccounts)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRTYGLACCT_PTRL");
        });

        modelBuilder.Entity<PartyGroup>(entity =>
        {
            entity.HasKey(e => e.PartyId)
                .HasName("PRIMARY");

            entity.ToTable("PARTY_GROUP");


            entity.HasIndex(e => e.GroupName)
                .HasName("GROUP_NAME_IDX");


            entity.HasIndex(e => e.PartyId)
                .HasName("PARTY_GRP_PARTY");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AnnualRevenue)
                .HasColumnName("ANNUAL_REVENUE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GroupName)
                .HasColumnName("GROUP_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.GroupNameLocal)
                .HasColumnName("GROUP_NAME_LOCAL")
                .HasColumnType("varchar(100)");


            entity.Property(e => e.LogoImageUrl)
                .HasColumnName("LOGO_IMAGE_URL")
                .HasColumnType("varchar(2000)");

            entity.Property(e => e.NumEmployees)
                .HasColumnName("NUM_EMPLOYEES")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.OfficeSiteName)
                .HasColumnName("OFFICE_SITE_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.TickerSymbol)
                .HasColumnName("TICKER_SYMBOL")
                .HasColumnType("varchar(10)");

            entity.HasOne(d => d.Party)
                .WithOne(p => p.PartyGroup)
                .HasForeignKey<PartyGroup>(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_GRP_PARTY");
        });

        modelBuilder.Entity<PartyIcsAvsOverride>(entity =>
        {
            entity.HasKey(e => e.PartyId)
                .HasName("PRIMARY");

            entity.ToTable("PARTY_ICS_AVS_OVERRIDE");


            entity.HasIndex(e => e.PartyId)
                .HasName("PARTY_ICSAVS_PARTY");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AvsDeclineString)
                .HasColumnName("AVS_DECLINE_STRING")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Party)
                .WithOne(p => p.PartyIcsAvsOverride)
                .HasForeignKey<PartyIcsAvsOverride>(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_ICSAVS_PARTY");
        });

        modelBuilder.Entity<PartyIdentification>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.PartyIdentificationTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PARTY_IDENTIFICATION");


            entity.HasIndex(e => e.IdValue)
                .HasName("PARTY_ID_VALIDX");


            entity.HasIndex(e => e.PartyId)
                .HasName("PARTY_ID_PRODUCT");

            entity.HasIndex(e => e.PartyIdentificationTypeId)
                .HasName("PARTY_ID_TYPE");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyIdentificationTypeId)
                .HasColumnName("PARTY_IDENTIFICATION_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.IdValue)
                .HasColumnName("ID_VALUE")
                .HasColumnType("varchar(60)");


            entity.HasOne(d => d.Party)
                .WithMany(p => p.PartyIdentifications)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_ID_PRODUCT");

            entity.HasOne(d => d.PartyIdentificationType)
                .WithMany(p => p.PartyIdentifications)
                .HasForeignKey(d => d.PartyIdentificationTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_ID_TYPE");
        });

        modelBuilder.Entity<PartyIdentificationType>(entity =>
        {
            entity.ToTable("PARTY_IDENTIFICATION_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("PARTY_ID_TYPE_PAR");

            entity.Property(e => e.PartyIdentificationTypeId)
                .HasColumnName("PARTY_IDENTIFICATION_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("PARTY_ID_TYPE_PAR");
        });

        modelBuilder.Entity<PartyInvitation>(entity =>
        {
            entity.ToTable("PARTY_INVITATION");


            entity.HasIndex(e => e.PartyIdFrom)
                .HasName("PTYINV_PTY");

            entity.HasIndex(e => e.StatusId)
                .HasName("PTYINV_STTS");

            entity.Property(e => e.PartyInvitationId)
                .HasColumnName("PARTY_INVITATION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.EmailAddress)
                .HasColumnName("EMAIL_ADDRESS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.LastInviteDate)
                .HasColumnName("LAST_INVITE_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyIdFrom)
                .HasColumnName("PARTY_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ToName)
                .HasColumnName("TO_NAME")
                .HasColumnType("varchar(100)");

            entity.HasOne(d => d.PartyIdFromNavigation)
                .WithMany(p => p.PartyInvitations)
                .HasForeignKey(d => d.PartyIdFrom)
                .HasConstraintName("PTYINV_PTY");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.PartyInvitations)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("PTYINV_STTS");
        });

        modelBuilder.Entity<PartyInvitationGroupAssoc>(entity =>
        {
            entity.HasKey(e => new { e.PartyInvitationId, e.PartyIdTo })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PARTY_INVITATION_GROUP_ASSOC");


            entity.HasIndex(e => e.PartyIdTo)
                .HasName("PTYINVGA_PTYGRP");

            entity.HasIndex(e => e.PartyInvitationId)
                .HasName("PTYINVGA_PTYINV");

            entity.Property(e => e.PartyInvitationId)
                .HasColumnName("PARTY_INVITATION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyIdTo)
                .HasColumnName("PARTY_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.PartyIdToNavigation)
                .WithMany(p => p.PartyInvitationGroupAssocs)
                .HasForeignKey(d => d.PartyIdTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PTYINVGA_PTYTO");

            entity.HasOne(d => d.PartyIdTo1)
                .WithMany(p => p.PartyInvitationGroupAssocs)
                .HasForeignKey(d => d.PartyIdTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PTYINVGA_PTYGRP");

            entity.HasOne(d => d.PartyInvitation)
                .WithMany(p => p.PartyInvitationGroupAssocs)
                .HasForeignKey(d => d.PartyInvitationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PTYINVGA_PTYINV");
        });

        modelBuilder.Entity<PartyInvitationRoleAssoc>(entity =>
        {
            entity.HasKey(e => new { e.PartyInvitationId, e.RoleTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PARTY_INVITATION_ROLE_ASSOC");


            entity.HasIndex(e => e.PartyInvitationId)
                .HasName("PTYINVROLE_PTYINV");

            entity.HasIndex(e => e.RoleTypeId)
                .HasName("PTYINVROLE_ROLET");

            entity.Property(e => e.PartyInvitationId)
                .HasColumnName("PARTY_INVITATION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.PartyInvitation)
                .WithMany(p => p.PartyInvitationRoleAssocs)
                .HasForeignKey(d => d.PartyInvitationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PTYINVROLE_PTYINV");

            entity.HasOne(d => d.RoleType)
                .WithMany(p => p.PartyInvitationRoleAssocs)
                .HasForeignKey(d => d.RoleTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PTYINVROLE_ROLET");
        });

        modelBuilder.Entity<PartyNameHistory>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.ChangeDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PARTY_NAME_HISTORY");


            entity.HasIndex(e => e.PartyId)
                .HasName("PTY_NMHIS_PARTY");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ChangeDate)
                .HasColumnName("CHANGE_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FirstName)
                .HasColumnName("FIRST_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.GroupName)
                .HasColumnName("GROUP_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.LastName)
                .HasColumnName("LAST_NAME")
                .HasColumnType("varchar(100)");


            entity.Property(e => e.MiddleName)
                .HasColumnName("MIDDLE_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.PersonalTitle)
                .HasColumnName("PERSONAL_TITLE")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.Suffix)
                .HasColumnName("SUFFIX")
                .HasColumnType("varchar(100)");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.PartyNameHistories)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PTY_NMHIS_PARTY");
        });

        modelBuilder.Entity<PartyNeed>(entity =>
        {
            entity.HasKey(e => new { e.PartyNeedId, e.PartyId, e.RoleTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PARTY_NEED");

            entity.HasIndex(e => e.CommunicationEventId)
                .HasName("PARTY_NEED_CMEV");


            entity.HasIndex(e => e.NeedTypeId)
                .HasName("PARTY_NEED_NDTP");

            entity.HasIndex(e => e.PartyId)
                .HasName("PARTY_NEED_PTY");

            entity.HasIndex(e => e.PartyTypeId)
                .HasName("PARTY_NEED_PTTP");

            entity.HasIndex(e => e.ProductCategoryId)
                .HasName("PARTY_NEED_PCAT");

            entity.HasIndex(e => e.ProductId)
                .HasName("PARTY_NEED_PROD");

            entity.HasIndex(e => e.RoleTypeId)
                .HasName("PARTY_NEED_RTYP");

            entity.Property(e => e.PartyNeedId)
                .HasColumnName("PARTY_NEED_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CommunicationEventId)
                .HasColumnName("COMMUNICATION_EVENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DatetimeRecorded)
                .HasColumnName("DATETIME_RECORDED")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.NeedTypeId)
                .HasColumnName("NEED_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyTypeId)
                .HasColumnName("PARTY_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductCategoryId)
                .HasColumnName("PRODUCT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.VisitId)
                .HasColumnName("VISIT_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.CommunicationEvent)
                .WithMany(p => p.PartyNeeds)
                .HasForeignKey(d => d.CommunicationEventId)
                .HasConstraintName("PARTY_NEED_CMEV");

            entity.HasOne(d => d.NeedType)
                .WithMany(p => p.PartyNeeds)
                .HasForeignKey(d => d.NeedTypeId)
                .HasConstraintName("PARTY_NEED_NDTP");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.PartyNeeds)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_NEED_PTY");

            entity.HasOne(d => d.PartyType)
                .WithMany(p => p.PartyNeeds)
                .HasForeignKey(d => d.PartyTypeId)
                .HasConstraintName("PARTY_NEED_PTTP");

            entity.HasOne(d => d.ProductCategory)
                .WithMany(p => p.PartyNeeds)
                .HasForeignKey(d => d.ProductCategoryId)
                .HasConstraintName("PARTY_NEED_PCAT");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.PartyNeeds)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("PARTY_NEED_PROD");

            entity.HasOne(d => d.RoleType)
                .WithMany(p => p.PartyNeeds)
                .HasForeignKey(d => d.RoleTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_NEED_RTYP");
        });

        modelBuilder.Entity<PartyNote>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.NoteId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PARTY_NOTE");


            entity.HasIndex(e => e.NoteId)
                .HasName("PARTY_NOTE_NOTE");

            entity.HasIndex(e => e.PartyId)
                .HasName("PARTY_NOTE_PARTY");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.NoteId)
                .HasColumnName("NOTE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Note)
                .WithMany(p => p.PartyNotes)
                .HasForeignKey(d => d.NoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_NOTE_NOTE");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.PartyNotes)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_NOTE_PARTY");
        });

        modelBuilder.Entity<PartyPrefDocTypeTpl>(entity =>
        {
            entity.ToTable("PARTY_PREF_DOC_TYPE_TPL");


            entity.HasIndex(e => e.InvoiceTypeId)
                .HasName("PAPDTT_TO_INVT");


            entity.HasIndex(e => e.OrderTypeId)
                .HasName("PAPDTT_TO_ORDT");

            entity.HasIndex(e => e.PartyId)
                .HasName("PAPDTT_TO_PAP");

            entity.HasIndex(e => e.QuoteTypeId)
                .HasName("PAPDTT_TO_QUOT");

            entity.Property(e => e.PartyPrefDocTypeTplId)
                .HasColumnName("PARTY_PREF_DOC_TYPE_TPL_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CustomScreenId)
                .HasColumnName("CUSTOM_SCREEN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.InvoiceTypeId)
                .HasColumnName("INVOICE_TYPE_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.OrderTypeId)
                .HasColumnName("ORDER_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.QuoteTypeId)
                .HasColumnName("QUOTE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.InvoiceType)
                .WithMany(p => p.PartyPrefDocTypeTpls)
                .HasForeignKey(d => d.InvoiceTypeId)
                .HasConstraintName("PAPDTT_TO_INVT");

            entity.HasOne(d => d.OrderType)
                .WithMany(p => p.PartyPrefDocTypeTpls)
                .HasForeignKey(d => d.OrderTypeId)
                .HasConstraintName("PAPDTT_TO_ORDT");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.PartyPrefDocTypeTpls)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("PAPDTT_TO_PTY");

            entity.HasOne(d => d.PartyNavigation)
                .WithMany(p => p.PartyPrefDocTypeTpls)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("PAPDTT_TO_PAP");

            entity.HasOne(d => d.QuoteType)
                .WithMany(p => p.PartyPrefDocTypeTpls)
                .HasForeignKey(d => d.QuoteTypeId)
                .HasConstraintName("PAPDTT_TO_QUOT");
        });

        modelBuilder.Entity<PartyProfileDefault>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.ProductStoreId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PARTY_PROFILE_DEFAULT");


            entity.HasIndex(e => e.PartyId)
                .HasName("PARTY_PROF_PARTY");

            entity.HasIndex(e => e.ProductStoreId)
                .HasName("PARTY_PROF_PSTORE");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DefaultBillAddr)
                .HasColumnName("DEFAULT_BILL_ADDR")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DefaultPayMeth)
                .HasColumnName("DEFAULT_PAY_METH")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DefaultShipAddr)
                .HasColumnName("DEFAULT_SHIP_ADDR")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DefaultShipMeth)
                .HasColumnName("DEFAULT_SHIP_METH")
                .HasColumnType("varchar(36)");


            entity.HasOne(d => d.Party)
                .WithMany(p => p.PartyProfileDefaults)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_PROF_PARTY");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.PartyProfileDefaults)
                .HasForeignKey(d => d.ProductStoreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_PROF_PSTORE");
        });

        modelBuilder.Entity<PartyQual>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.PartyQualTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PARTY_QUAL");


            entity.HasIndex(e => e.PartyId)
                .HasName("PARTY_QUAL_PRTY");

            entity.HasIndex(e => e.PartyQualTypeId)
                .HasName("PARTY_QUAL_PQTYP");

            entity.HasIndex(e => e.StatusId)
                .HasName("PARTY_QUAL_STATUS");

            entity.HasIndex(e => e.VerifStatusId)
                .HasName("PARTY_QUAL_VERIF");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyQualTypeId)
                .HasColumnName("PARTY_QUAL_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.QualificationDesc)
                .HasColumnName("QUALIFICATION_DESC")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Title)
                .HasColumnName("TITLE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.VerifStatusId)
                .HasColumnName("VERIF_STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.PartyQuals)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_QUAL_PRTY");

            entity.HasOne(d => d.PartyQualType)
                .WithMany(p => p.PartyQuals)
                .HasForeignKey(d => d.PartyQualTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_QUAL_PQTYP");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.PartyQualStatus)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("PARTY_QUAL_STATUS");

            entity.HasOne(d => d.VerifStatus)
                .WithMany(p => p.PartyQualVerifStatus)
                .HasForeignKey(d => d.VerifStatusId)
                .HasConstraintName("PARTY_QUAL_VERIF");
        });

        modelBuilder.Entity<PartyQualType>(entity =>
        {
            entity.ToTable("PARTY_QUAL_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("PARTY_QUAL_TPAR");

            entity.Property(e => e.PartyQualTypeId)
                .HasColumnName("PARTY_QUAL_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("PARTY_QUAL_TPAR");
        });

        modelBuilder.Entity<PartyRateNew>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.RateTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PARTY_RATE_NEW");


            entity.HasIndex(e => e.PartyId)
                .HasName("PRTY_RATE_PRTY");

            entity.HasIndex(e => e.RateTypeId)
                .HasName("PRTY_RATE_RTTP");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RateTypeId)
                .HasColumnName("RATE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DefaultRate)
                .HasColumnName("DEFAULT_RATE")
                .HasColumnType("char(1)");


            entity.Property(e => e.PercentageUsed).HasColumnName("PERCENTAGE_USED");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.PartyRateNews)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRTY_RATE_PRTY");

            entity.HasOne(d => d.RateType)
                .WithMany(p => p.PartyRateNews)
                .HasForeignKey(d => d.RateTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRTY_RATE_RTTP");
        });

        modelBuilder.Entity<PartyRelationship>(entity =>
        {
            entity.HasKey(e => new { e.PartyIdFrom, e.PartyIdTo, e.RoleTypeIdFrom, e.RoleTypeIdTo, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0 });

            entity.ToTable("PARTY_RELATIONSHIP");


            entity.HasIndex(e => e.PartyRelationshipTypeId)
                .HasName("PARTY_REL_TYPE");

            entity.HasIndex(e => e.PriorityTypeId)
                .HasName("PARTY_REL_PRTYP");

            entity.HasIndex(e => e.SecurityGroupId)
                .HasName("PARTY_REL_SECGRP");

            entity.HasIndex(e => e.StatusId)
                .HasName("PARTY_REL_STTS");

            entity.HasIndex(e => new { e.PartyIdFrom, e.RoleTypeIdFrom })
                .HasName("PARTY_REL_FPROLE");

            entity.HasIndex(e => new { e.PartyIdTo, e.RoleTypeIdTo })
                .HasName("PARTY_REL_TPROLE");

            entity.Property(e => e.PartyIdFrom)
                .HasColumnName("PARTY_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyIdTo)
                .HasColumnName("PARTY_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeIdFrom)
                .HasColumnName("ROLE_TYPE_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeIdTo)
                .HasColumnName("ROLE_TYPE_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PartyRelationshipTypeId)
                .HasColumnName("PARTY_RELATIONSHIP_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PermissionsEnumId)
                .HasColumnName("PERMISSIONS_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PositionTitle)
                .HasColumnName("POSITION_TITLE")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.PriorityTypeId)
                .HasColumnName("PRIORITY_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RelationshipName)
                .HasColumnName("RELATIONSHIP_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.SecurityGroupId)
                .HasColumnName("SECURITY_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.PartyRelationshipType)
                .WithMany(p => p.PartyRelationships)
                .HasForeignKey(d => d.PartyRelationshipTypeId)
                .HasConstraintName("PARTY_REL_TYPE");

            entity.HasOne(d => d.PriorityType)
                .WithMany(p => p.PartyRelationships)
                .HasForeignKey(d => d.PriorityTypeId)
                .HasConstraintName("PARTY_REL_PRTYP");

            entity.HasOne(d => d.SecurityGroup)
                .WithMany(p => p.PartyRelationships)
                .HasForeignKey(d => d.SecurityGroupId)
                .HasConstraintName("PARTY_REL_SECGRP");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.PartyRelationships)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("PARTY_REL_STTS");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.PartyRelationshipPartyRoles)
                .HasForeignKey(d => new { d.PartyIdFrom, d.RoleTypeIdFrom })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_REL_FPROLE");

            entity.HasOne(d => d.PartyRoleNavigation)
                .WithMany(p => p.PartyRelationshipPartyRoleNavigations)
                .HasForeignKey(d => new { d.PartyIdTo, d.RoleTypeIdTo })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_REL_TPROLE");
        });

        modelBuilder.Entity<PartyRelationshipType>(entity =>
        {
            entity.ToTable("PARTY_RELATIONSHIP_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("PARTY_RELTYP_PAR");

            entity.HasIndex(e => e.RoleTypeIdValidFrom)
                .HasName("PARTY_RELTYP_VFRT");

            entity.HasIndex(e => e.RoleTypeIdValidTo)
                .HasName("PARTY_RELTYP_VTRT");

            entity.Property(e => e.PartyRelationshipTypeId)
                .HasColumnName("PARTY_RELATIONSHIP_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyRelationshipName)
                .HasColumnName("PARTY_RELATIONSHIP_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.RoleTypeIdValidFrom)
                .HasColumnName("ROLE_TYPE_ID_VALID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeIdValidTo)
                .HasColumnName("ROLE_TYPE_ID_VALID_TO")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("PARTY_RELTYP_PAR");

            entity.HasOne(d => d.RoleTypeIdValidFromNavigation)
                .WithMany(p => p.PartyRelationshipTypeRoleTypeIdValidFromNavigations)
                .HasForeignKey(d => d.RoleTypeIdValidFrom)
                .HasConstraintName("PARTY_RELTYP_VFRT");

            entity.HasOne(d => d.RoleTypeIdValidToNavigation)
                .WithMany(p => p.PartyRelationshipTypeRoleTypeIdValidToNavigations)
                .HasForeignKey(d => d.RoleTypeIdValidTo)
                .HasConstraintName("PARTY_RELTYP_VTRT");
        });

        modelBuilder.Entity<PartyResume>(entity =>
        {
            entity.HasKey(e => e.ResumeId)
                .HasName("PRIMARY");

            entity.ToTable("PARTY_RESUME");


            entity.HasIndex(e => e.PartyId)
                .HasName("PARTY_RSME_PRTY");

            entity.Property(e => e.ResumeId)
                .HasColumnName("RESUME_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ResumeDate)
                .HasColumnName("RESUME_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ResumeText)
                .HasColumnName("RESUME_TEXT")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.PartyResumes)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("PARTY_RSME_PRTY");
        });

        modelBuilder.Entity<PartyRole>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.RoleTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PARTY_ROLE");


            entity.HasIndex(e => e.PartyId)
                .HasName("PARTY_RLE_PARTY");

            entity.HasIndex(e => e.RoleTypeId)
                .HasName("PARTY_RLE_ROLE");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Party)
                .WithMany(p => p.PartyRoles)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_RLE_PARTY");

            entity.HasOne(d => d.RoleType)
                .WithMany(p => p.PartyRoles)
                .HasForeignKey(d => d.RoleTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_RLE_ROLE");
        });

        modelBuilder.Entity<PartySkill>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.SkillTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PARTY_SKILL");


            entity.HasIndex(e => e.PartyId)
                .HasName("PARTY_SKLL_PRTY");

            entity.HasIndex(e => e.SkillTypeId)
                .HasName("PARTY_SKLL_SKTP");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SkillTypeId)
                .HasColumnName("SKILL_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Rating)
                .HasColumnName("RATING")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.SkillLevel)
                .HasColumnName("SKILL_LEVEL")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.StartedUsingDate)
                .HasColumnName("STARTED_USING_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.YearsExperience)
                .HasColumnName("YEARS_EXPERIENCE")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.PartySkills)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_SKLL_PRTY");

            entity.HasOne(d => d.SkillType)
                .WithMany(p => p.PartySkills)
                .HasForeignKey(d => d.SkillTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_SKLL_SKTP");
        });

        modelBuilder.Entity<PartyStatus>(entity =>
        {
            entity.HasKey(e => new { e.StatusId, e.PartyId, e.StatusDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PARTY_STATUS");

            entity.HasIndex(e => e.ChangedByUserLoginId)
                .HasName("PARTY_STTS_USRLGN");


            entity.HasIndex(e => e.PartyId)
                .HasName("PARTY_STS_PARTY");

            entity.HasIndex(e => e.StatusId)
                .HasName("PARTY_STS_STSITM");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusDate)
                .HasColumnName("STATUS_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ChangedByUserLoginId)
                .HasColumnName("CHANGE_BY_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.AppUserLogin)
                .WithMany(p => p.PartyStatus)
                .HasForeignKey(d => d.ChangedByUserLoginId)
                .HasConstraintName("PARTY_STTS_USRLGN");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.PartyStatus)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_STS_PARTY");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.PartyStatus)
                .HasForeignKey(d => d.StatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_STS_STSITM");
        });

        modelBuilder.Entity<PartyTaxAuthInfo>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.TaxAuthGeoId, e.TaxAuthPartyId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PARTY_TAX_AUTH_INFO");


            entity.HasIndex(e => e.PartyId)
                .HasName("PARTY_TXAI_PTY");

            entity.HasIndex(e => new { e.TaxAuthGeoId, e.TaxAuthPartyId })
                .HasName("PARTY_TXAI_TXA");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TaxAuthGeoId)
                .HasColumnName("TAX_AUTH_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TaxAuthPartyId)
                .HasColumnName("TAX_AUTH_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.IsExempt)
                .HasColumnName("IS_EXEMPT")
                .HasColumnType("char(1)");

            entity.Property(e => e.IsNexus)
                .HasColumnName("IS_NEXUS")
                .HasColumnType("char(1)");


            entity.Property(e => e.PartyTaxId)
                .HasColumnName("PARTY_TAX_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.PartyTaxAuthInfoes)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_TXAI_PTY");

            entity.HasOne(d => d.TaxAuth)
                .WithMany(p => p.PartyTaxAuthInfoes)
                .HasForeignKey(d => new { d.TaxAuthGeoId, d.TaxAuthPartyId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_TXAI_TXA");
        });

        modelBuilder.Entity<PartyType>(entity =>
        {
            entity.ToTable("PARTY_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("PARTY_TYPE_PAR");

            entity.Property(e => e.PartyTypeId)
                .HasColumnName("PARTY_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");

            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("PARTY_TYPE_PAR")
                .IsRequired(false);
        });

        modelBuilder.Entity<PartyTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.PartyTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PARTY_TYPE_ATTR");


            entity.HasIndex(e => e.PartyTypeId)
                .HasName("PARTY_TYP_ATTR");

            entity.Property(e => e.PartyTypeId)
                .HasColumnName("PARTY_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.PartyType)
                .WithMany(p => p.PartyTypeAttrs)
                .HasForeignKey(d => d.PartyTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PARTY_TYP_ATTR");
        });

        modelBuilder.Entity<PayGrade>(entity =>
        {
            entity.ToTable("PAY_GRADE");


            entity.Property(e => e.PayGradeId)
                .HasColumnName("PAY_GRADE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PayGradeName)
                .HasColumnName("PAY_GRADE_NAME")
                .HasColumnType("varchar(100)");
        });

        modelBuilder.Entity<PayHistory>(entity =>
        {
            entity.HasKey(e => new
                    { e.RoleTypeIdFrom, e.RoleTypeIdTo, e.PartyIdFrom, e.PartyIdTo, e.EmplFromDate, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0, 0 });

            entity.ToTable("PAY_HISTORY");


            entity.HasIndex(e => e.PayGradeId)
                .HasName("PAY_HIST_PGRD");

            entity.HasIndex(e => e.PeriodTypeId)
                .HasName("PAY_HIST_PDTP");

            entity.HasIndex(e => new
                    { e.RoleTypeIdFrom, e.RoleTypeIdTo, e.PartyIdFrom, e.PartyIdTo, e.EmplFromDate })
                .HasName("PAY_HIST_EMPLMNT");

            entity.Property(e => e.RoleTypeIdFrom)
                .HasColumnName("ROLE_TYPE_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeIdTo)
                .HasColumnName("ROLE_TYPE_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyIdFrom)
                .HasColumnName("PARTY_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyIdTo)
                .HasColumnName("PARTY_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.EmplFromDate)
                .HasColumnName("EMPL_FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PayGradeId)
                .HasColumnName("PAY_GRADE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PeriodTypeId)
                .HasColumnName("PERIOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SalaryStepSeqId)
                .HasColumnName("SALARY_STEP_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.PayGrade)
                .WithMany(p => p.PayHistories)
                .HasForeignKey(d => d.PayGradeId)
                .HasConstraintName("PAY_HIST_PGRD");

            entity.HasOne(d => d.PeriodType)
                .WithMany(p => p.PayHistories)
                .HasForeignKey(d => d.PeriodTypeId)
                .HasConstraintName("PAY_HIST_PDTP");

            entity.HasOne(d => d.Employment)
                .WithMany(p => p.PayHistories)
                .HasForeignKey(d => new
                    { d.RoleTypeIdFrom, d.RoleTypeIdTo, d.PartyIdFrom, d.PartyIdTo, d.EmplFromDate })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PAY_HIST_EMPLMNT");
        });

        modelBuilder.Entity<PayPalPaymentMethod>(entity =>
        {
            entity.HasKey(e => e.PaymentMethodId)
                .HasName("PRIMARY");

            entity.ToTable("PAY_PAL_PAYMENT_METHOD");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("PAYPAL_CMECH");


            entity.HasIndex(e => e.PaymentMethodId)
                .HasName("PAYPAL_PMNTMETH");

            entity.Property(e => e.PaymentMethodId)
                .HasColumnName("PAYMENT_METHOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AvsAddr)
                .HasColumnName("AVS_ADDR")
                .HasColumnType("char(1)");

            entity.Property(e => e.AvsZip)
                .HasColumnName("AVS_ZIP")
                .HasColumnType("char(1)");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CorrelationId)
                .HasColumnName("CORRELATION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ExpressCheckoutToken)
                .HasColumnName("EXPRESS_CHECKOUT_TOKEN")
                .HasColumnType("varchar(60)");


            entity.Property(e => e.PayerId)
                .HasColumnName("PAYER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PayerStatus)
                .HasColumnName("PAYER_STATUS")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.TransactionId)
                .HasColumnName("TRANSACTION_ID")
                .HasColumnType("varchar(60)");

            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.PayPalPaymentMethods)
                .HasForeignKey(d => d.ContactMechId)
                .HasConstraintName("PAYPAL_CMECH");

            entity.HasOne(d => d.ContactMechNavigation)
                .WithMany(p => p.PayPalPaymentMethods)
                .HasForeignKey(d => d.ContactMechId)
                .HasConstraintName("PAYPAL_PADDR");

            entity.HasOne(d => d.PaymentMethod)
                .WithOne(p => p.PayPalPaymentMethod)
                .HasForeignKey<PayPalPaymentMethod>(d => d.PaymentMethodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PAYPAL_PMNTMETH");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.ToTable("PAYMENT");

            entity.HasIndex(e => e.ActualCurrencyUomId)
                .HasName("PAYMENT_ACUOM");


            entity.HasIndex(e => e.CurrencyUomId)
                .HasName("PAYMENT_CUOM");

            entity.HasIndex(e => e.FinAccountTransId)
                .HasName("PAYMENT_FACTX");


            entity.HasIndex(e => e.OverrideGlAccountId)
                .HasName("PAYMENT_ORGLA");

            entity.HasIndex(e => e.PartyIdFrom)
                .HasName("PAYMENT_FPTY");

            entity.HasIndex(e => e.PartyIdTo)
                .HasName("PAYMENT_TPTY");

            entity.HasIndex(e => e.PaymentGatewayResponseId)
                .HasName("PAYMENT_PAYGATR");

            entity.HasIndex(e => e.PaymentMethodId)
                .HasName("PAYMENT_PMETH");

            entity.HasIndex(e => e.PaymentMethodTypeId)
                .HasName("PAYMENT_PMETH_TP");

            entity.HasIndex(e => e.PaymentPreferenceId)
                .HasName("PAYMENT_ORDPMPRF");

            entity.HasIndex(e => e.PaymentTypeId)
                .HasName("PAYMENT_PMTYP");

            entity.HasIndex(e => e.RoleTypeIdTo)
                .HasName("PAYMENT_TRTP");

            entity.HasIndex(e => e.StatusId)
                .HasName("PAYMENT_STTSITM");

            entity.Property(e => e.PaymentId)
                .HasColumnName("PAYMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ActualCurrencyAmount)
                .HasColumnName("ACTUAL_CURRENCY_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.ActualCurrencyUomId)
                .HasColumnName("ACTUAL_CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrencyUomId)
                .HasColumnName("CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.EffectiveDate)
                .HasColumnName("EFFECTIVE_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.FinAccountTransId)
                .HasColumnName("FIN_ACCOUNT_TRANS_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.OverrideGlAccountId)
                .HasColumnName("OVERRIDE_GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyIdFrom)
                .HasColumnName("PARTY_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyIdTo)
                .HasColumnName("PARTY_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentGatewayResponseId)
                .HasColumnName("PAYMENT_GATEWAY_RESPONSE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentMethodId)
                .HasColumnName("PAYMENT_METHOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentMethodTypeId)
                .HasColumnName("PAYMENT_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentPreferenceId)
                .HasColumnName("PAYMENT_PREFERENCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentRefNum)
                .HasColumnName("PAYMENT_REF_NUM")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.PaymentTypeId)
                .HasColumnName("PAYMENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeIdTo)
                .HasColumnName("ROLE_TYPE_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ActualCurrencyUom)
                .WithMany(p => p.PaymentActualCurrencyUoms)
                .HasForeignKey(d => d.ActualCurrencyUomId)
                .HasConstraintName("PAYMENT_ACUOM");

            entity.HasOne(d => d.CurrencyUom)
                .WithMany(p => p.PaymentCurrencyUoms)
                .HasForeignKey(d => d.CurrencyUomId)
                .HasConstraintName("PAYMENT_CUOM");

            entity.HasOne(d => d.FinAccountTransNavigation)
                .WithMany(p => p.Payments)
                .HasForeignKey(d => d.FinAccountTransId)
                .HasConstraintName("PAYMENT_FACTX");

            entity.HasOne(d => d.OverrideGlAccount)
                .WithMany(p => p.Payments)
                .HasForeignKey(d => d.OverrideGlAccountId)
                .HasConstraintName("PAYMENT_ORGLA");

            entity.HasOne(d => d.PartyIdFromNavigation)
                .WithMany(p => p.PaymentPartyIdFromNavigations)
                .HasForeignKey(d => d.PartyIdFrom)
                .HasConstraintName("PAYMENT_FPTY");

            entity.HasOne(d => d.PartyIdToNavigation)
                .WithMany(p => p.PaymentPartyIdToNavigations)
                .HasForeignKey(d => d.PartyIdTo)
                .HasConstraintName("PAYMENT_TPTY");

            entity.HasOne(d => d.PaymentGatewayResponse)
                .WithMany(p => p.Payments)
                .HasForeignKey(d => d.PaymentGatewayResponseId)
                .HasConstraintName("PAYMENT_PAYGATR");

            entity.HasOne(d => d.PaymentMethod)
                .WithMany(p => p.Payments)
                .HasForeignKey(d => d.PaymentMethodId)
                .HasConstraintName("PAYMENT_PMETH");

            entity.HasOne(d => d.PaymentMethodType)
                .WithMany(p => p.Payments)
                .HasForeignKey(d => d.PaymentMethodTypeId)
                .HasConstraintName("PAYMENT_PMETH_TP");

            entity.HasOne(d => d.PaymentPreference)
                .WithMany(p => p.Payments)
                .HasForeignKey(d => d.PaymentPreferenceId)
                .HasConstraintName("PAYMENT_ORDPMPRF");

            entity.HasOne(d => d.PaymentType)
                .WithMany(p => p.Payments)
                .HasForeignKey(d => d.PaymentTypeId)
                .HasConstraintName("PAYMENT_PMTYP");

            entity.HasOne(d => d.RoleTypeIdToNavigation)
                .WithMany(p => p.Payments)
                .HasForeignKey(d => d.RoleTypeIdTo)
                .HasConstraintName("PAYMENT_TRTP");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.Payments)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("PAYMENT_STTSITM");
        });

        modelBuilder.Entity<PaymentApplication>(entity =>
        {
            entity.ToTable("PAYMENT_APPLICATION");

            entity.HasIndex(e => e.BillingAccountId)
                .HasName("PAYMENT_APP_BACT");


            entity.HasIndex(e => e.InvoiceId)
                .HasName("PAYMENT_APP_INV");


            entity.HasIndex(e => e.OverrideGlAccountId)
                .HasName("PAYMENT_APP_ORGLA");

            entity.HasIndex(e => e.PaymentId)
                .HasName("PAYMENT_APP_PMT");

            entity.HasIndex(e => e.TaxAuthGeoId)
                .HasName("PAYMENT_APP_GEO");

            entity.HasIndex(e => e.ToPaymentId)
                .HasName("PAYMENT_APP_TPMT");

            entity.Property(e => e.PaymentApplicationId)
                .HasColumnName("PAYMENT_APPLICATION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AmountApplied)
                .HasColumnName("AMOUNT_APPLIED")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.BillingAccountId)
                .HasColumnName("BILLING_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.InvoiceId)
                .HasColumnName("INVOICE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceItemSeqId)
                .HasColumnName("INVOICE_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.OverrideGlAccountId)
                .HasColumnName("OVERRIDE_GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentId)
                .HasColumnName("PAYMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TaxAuthGeoId)
                .HasColumnName("TAX_AUTH_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ToPaymentId)
                .HasColumnName("TO_PAYMENT_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.BillingAccount)
                .WithMany(p => p.PaymentApplications)
                .HasForeignKey(d => d.BillingAccountId)
                .HasConstraintName("PAYMENT_APP_BACT");

            entity.HasOne(d => d.Invoice)
                .WithMany(p => p.PaymentApplications)
                .HasForeignKey(d => d.InvoiceId)
                .HasConstraintName("PAYMENT_APP_INV");

            entity.HasOne(d => d.OverrideGlAccount)
                .WithMany(p => p.PaymentApplications)
                .HasForeignKey(d => d.OverrideGlAccountId)
                .HasConstraintName("PAYMENT_APP_ORGLA");

            entity.HasOne(d => d.Payment)
                .WithMany(p => p.PaymentApplicationPayments)
                .HasForeignKey(d => d.PaymentId)
                .HasConstraintName("PAYMENT_APP_PMT");

            entity.HasOne(d => d.TaxAuthGeo)
                .WithMany(p => p.PaymentApplications)
                .HasForeignKey(d => d.TaxAuthGeoId)
                .HasConstraintName("PAYMENT_APP_GEO");

            entity.HasOne(d => d.ToPayment)
                .WithMany(p => p.PaymentApplicationToPayments)
                .HasForeignKey(d => d.ToPaymentId)
                .HasConstraintName("PAYMENT_APP_TPMT");
        });

        modelBuilder.Entity<PaymentAttribute>(entity =>
        {
            entity.HasKey(e => new { e.PaymentId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PAYMENT_ATTRIBUTE");


            entity.HasIndex(e => e.PaymentId)
                .HasName("PAYMENT_ATTR");

            entity.Property(e => e.PaymentId)
                .HasColumnName("PAYMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Payment)
                .WithMany(p => p.PaymentAttributes)
                .HasForeignKey(d => d.PaymentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PAYMENT_ATTR");
        });

        modelBuilder.Entity<PaymentBudgetAllocation>(entity =>
        {
            entity.HasKey(e => new { e.BudgetId, e.BudgetItemSeqId, e.PaymentId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PAYMENT_BUDGET_ALLOCATION");

            entity.HasIndex(e => e.BudgetId)
                .HasName("PAYMENT_BA_BDGT");


            entity.HasIndex(e => e.PaymentId)
                .HasName("PAYMENT_BA_PMT");

            entity.Property(e => e.BudgetId)
                .HasColumnName("BUDGET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BudgetItemSeqId)
                .HasColumnName("BUDGET_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentId)
                .HasColumnName("PAYMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Budget)
                .WithMany(p => p.PaymentBudgetAllocations)
                .HasForeignKey(d => d.BudgetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PAYMENT_BA_BDGT");

            entity.HasOne(d => d.Payment)
                .WithMany(p => p.PaymentBudgetAllocations)
                .HasForeignKey(d => d.PaymentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PAYMENT_BA_PMT");
        });

        modelBuilder.Entity<PaymentContent>(entity =>
        {
            entity.HasKey(e => new { e.ContentId, e.PaymentId, e.PaymentContentTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PAYMENT_CONTENT");

            entity.HasIndex(e => e.ContentId)
                .HasName("PAYMENT_CNT_CNT");


            entity.HasIndex(e => e.PaymentContentTypeId)
                .HasName("PAYMENT_CNT_TYPE");

            entity.HasIndex(e => e.PaymentId)
                .HasName("PAYMENT_CNT_PROD");

            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentId)
                .HasColumnName("PAYMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentContentTypeId)
                .HasColumnName("PAYMENT_CONTENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.PaymentContents)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PAYMENT_CNT_CNT");

            entity.HasOne(d => d.PaymentContentType)
                .WithMany(p => p.PaymentContents)
                .HasForeignKey(d => d.PaymentContentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PAYMENT_CNT_TYPE");

            entity.HasOne(d => d.Payment)
                .WithMany(p => p.PaymentContents)
                .HasForeignKey(d => d.PaymentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PAYMENT_CNT_PROD");
        });

        modelBuilder.Entity<PaymentContentType>(entity =>
        {
            entity.ToTable("PAYMENT_CONTENT_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("PAYCT_TYP_PARENT");

            entity.Property(e => e.PaymentContentTypeId)
                .HasColumnName("PAYMENT_CONTENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("PAYCT_TYP_PARENT");
        });

        modelBuilder.Entity<PaymentGatewayAuthorizeNet>(entity =>
        {
            entity.HasKey(e => e.PaymentGatewayConfigId)
                .HasName("PRIMARY");

            entity.ToTable("PAYMENT_GATEWAY_AUTHORIZE_NET");


            entity.HasIndex(e => e.PaymentGatewayConfigId)
                .HasName("PGAN_PGC");

            entity.Property(e => e.PaymentGatewayConfigId)
                .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ApiVersion)
                .HasColumnName("API_VERSION")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CertificateAlias)
                .HasColumnName("CERTIFICATE_ALIAS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CpDeviceType)
                .HasColumnName("CP_DEVICE_TYPE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CpMarketType)
                .HasColumnName("CP_MARKET_TYPE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CpVersion)
                .HasColumnName("CP_VERSION")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DelimitedData)
                .HasColumnName("DELIMITED_DATA")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.DelimiterChar)
                .HasColumnName("DELIMITER_CHAR")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.DuplicateWindow)
                .HasColumnName("DUPLICATE_WINDOW")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.EmailCustomer)
                .HasColumnName("EMAIL_CUSTOMER")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.EmailMerchant)
                .HasColumnName("EMAIL_MERCHANT")
                .HasColumnType("varchar(60)");


            entity.Property(e => e.Method)
                .HasColumnName("METHOD")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.Pwd)
                .HasColumnName("PWD")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.RelayResponse)
                .HasColumnName("RELAY_RESPONSE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.TestMode)
                .HasColumnName("TEST_MODE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.TranKey)
                .HasColumnName("TRAN_KEY")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.TransDescription)
                .HasColumnName("TRANS_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.TransactionUrl)
                .HasColumnName("TRANSACTION_URL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.UserId)
                .HasColumnName("USER_ID")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.PaymentGatewayConfig)
                .WithOne(p => p.PaymentGatewayAuthorizeNet)
                .HasForeignKey<PaymentGatewayAuthorizeNet>(d => d.PaymentGatewayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PGAN_PGC");
        });

        modelBuilder.Entity<PaymentGatewayClearCommerce>(entity =>
        {
            entity.HasKey(e => e.PaymentGatewayConfigId)
                .HasName("PRIMARY");

            entity.ToTable("PAYMENT_GATEWAY_CLEAR_COMMERCE");


            entity.HasIndex(e => e.PaymentGatewayConfigId)
                .HasName("PGCC_PGC");

            entity.Property(e => e.PaymentGatewayConfigId)
                .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ClientId)
                .HasColumnName("CLIENT_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.EffectiveAlias)
                .HasColumnName("EFFECTIVE_ALIAS")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.EnableCVM)
                .HasColumnName("ENABLE_C_V_M")
                .HasColumnType("char(1)");

            entity.Property(e => e.GroupId)
                .HasColumnName("GROUP_ID")
                .HasColumnType("varchar(60)");


            entity.Property(e => e.ProcessMode)
                .HasColumnName("PROCESS_MODE")
                .HasColumnType("char(1)");

            entity.Property(e => e.Pwd)
                .HasColumnName("PWD")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ServerURL)
                .HasColumnName("SERVER_U_R_L")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.SourceId)
                .HasColumnName("SOURCE_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.UserAlias)
                .HasColumnName("USER_ALIAS")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.Username)
                .HasColumnName("USERNAME")
                .HasColumnType("varchar(60)");

            entity.HasOne(d => d.PaymentGatewayConfig)
                .WithOne(p => p.PaymentGatewayClearCommerce)
                .HasForeignKey<PaymentGatewayClearCommerce>(d => d.PaymentGatewayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PGCC_PGC");
        });

        modelBuilder.Entity<PaymentGatewayConfig>(entity =>
        {
            entity.ToTable("PAYMENT_GATEWAY_CONFIG");


            entity.HasIndex(e => e.PaymentGatewayConfigTypeId)
                .HasName("PGC_PGCT");

            entity.Property(e => e.PaymentGatewayConfigId)
                .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.PaymentGatewayConfigTypeId)
                .HasColumnName("PAYMENT_GATEWAY_CONFIG_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.PaymentGatewayConfigType)
                .WithMany(p => p.PaymentGatewayConfigs)
                .HasForeignKey(d => d.PaymentGatewayConfigTypeId)
                .HasConstraintName("PGC_PGCT");
        });

        modelBuilder.Entity<PaymentGatewayConfigType>(entity =>
        {
            entity.ToTable("PAYMENT_GATEWAY_CONFIG_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("PGCT_PAR");

            entity.Property(e => e.PaymentGatewayConfigTypeId)
                .HasColumnName("PAYMENT_GATEWAY_CONFIG_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("PGCT_PAR");
        });

        modelBuilder.Entity<PaymentGatewayCyberSource>(entity =>
        {
            entity.HasKey(e => e.PaymentGatewayConfigId)
                .HasName("PRIMARY");

            entity.ToTable("PAYMENT_GATEWAY_CYBER_SOURCE");


            entity.HasIndex(e => e.PaymentGatewayConfigId)
                .HasName("PGCS_PGC");

            entity.Property(e => e.PaymentGatewayConfigId)
                .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ApiVersion)
                .HasColumnName("API_VERSION")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AutoBill)
                .HasColumnName("AUTO_BILL")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AvsDeclineCodes)
                .HasColumnName("AVS_DECLINE_CODES")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DisableBillAvs)
                .HasColumnName("DISABLE_BILL_AVS")
                .HasColumnType("char(1)");

            entity.Property(e => e.EnableDav)
                .HasColumnName("ENABLE_DAV")
                .HasColumnType("char(1)");

            entity.Property(e => e.FraudScore)
                .HasColumnName("FRAUD_SCORE")
                .HasColumnType("char(1)");

            entity.Property(e => e.IgnoreAvs)
                .HasColumnName("IGNORE_AVS")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.KeysDir)
                .HasColumnName("KEYS_DIR")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.KeysFile)
                .HasColumnName("KEYS_FILE")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.LogDir)
                .HasColumnName("LOG_DIR")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.LogEnabled)
                .HasColumnName("LOG_ENABLED")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.LogFile)
                .HasColumnName("LOG_FILE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.LogSize)
                .HasColumnName("LOG_SIZE")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.MerchantContact)
                .HasColumnName("MERCHANT_CONTACT")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.MerchantDescr)
                .HasColumnName("MERCHANT_DESCR")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.MerchantId)
                .HasColumnName("MERCHANT_ID")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.Production)
                .HasColumnName("PRODUCTION")
                .HasColumnType("varchar(60)");

            entity.HasOne(d => d.PaymentGatewayConfig)
                .WithOne(p => p.PaymentGatewayCyberSource)
                .HasForeignKey<PaymentGatewayCyberSource>(d => d.PaymentGatewayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PGCS_PGC");
        });

        modelBuilder.Entity<PaymentGatewayEway>(entity =>
        {
            entity.HasKey(e => e.PaymentGatewayConfigId)
                .HasName("PRIMARY");

            entity.ToTable("PAYMENT_GATEWAY_EWAY");


            entity.HasIndex(e => e.PaymentGatewayConfigId)
                .HasName("PGEW_PGC");

            entity.Property(e => e.PaymentGatewayConfigId)
                .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CustomerId)
                .HasColumnName("CUSTOMER_ID")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.EnableBeagle)
                .HasColumnName("ENABLE_BEAGLE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.EnableCvn)
                .HasColumnName("ENABLE_CVN")
                .HasColumnType("varchar(60)");


            entity.Property(e => e.RefundPwd)
                .HasColumnName("REFUND_PWD")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.TestMode)
                .HasColumnName("TEST_MODE")
                .HasColumnType("varchar(60)");

            entity.HasOne(d => d.PaymentGatewayConfig)
                .WithOne(p => p.PaymentGatewayEway)
                .HasForeignKey<PaymentGatewayEway>(d => d.PaymentGatewayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PGEW_PGC");
        });

        modelBuilder.Entity<PaymentGatewayFirstData>(entity =>
        {
            entity.HasKey(e => e.PaymentGatewayConfigId)
                .HasName("PRIMARY");

            entity.ToTable("PAYMENT_GATEWAY_FIRST_DATA");


            entity.HasIndex(e => e.PaymentGatewayConfigId)
                .HasName("PGFD_PGC");

            entity.Property(e => e.PaymentGatewayConfigId)
                .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ApiKey)
                .HasColumnName("API_KEY")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ApiSecret)
                .HasColumnName("API_SECRET")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AppName)
                .HasColumnName("APP_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.EnableDataVault)
                .HasColumnName("ENABLE_DATA_VAULT")
                .HasColumnType("char(1)");


            entity.Property(e => e.TransactionUrl)
                .HasColumnName("TRANSACTION_URL")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.PaymentGatewayConfig)
                .WithOne(p => p.PaymentGatewayFirstData)
                .HasForeignKey<PaymentGatewayFirstData>(d => d.PaymentGatewayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PGFD_PGC");
        });

        modelBuilder.Entity<PaymentGatewayOrbital>(entity =>
        {
            entity.HasKey(e => e.PaymentGatewayConfigId)
                .HasName("PRIMARY");

            entity.ToTable("PAYMENT_GATEWAY_ORBITAL");


            entity.HasIndex(e => e.PaymentGatewayConfigId)
                .HasName("PGORB_PGC");

            entity.Property(e => e.PaymentGatewayConfigId)
                .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AuthorizationURI)
                .HasColumnName("AUTHORIZATION_U_R_I")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ConnectionPassword)
                .HasColumnName("CONNECTION_PASSWORD")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ConnectionTimeoutSeconds)
                .HasColumnName("CONNECTION_TIMEOUT_SECONDS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.EngineClass)
                .HasColumnName("ENGINE_CLASS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HostName)
                .HasColumnName("HOST_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HostNameFailover)
                .HasColumnName("HOST_NAME_FAILOVER")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.MerchantId)
                .HasColumnName("MERCHANT_ID")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.Port)
                .HasColumnName("PORT")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.PortFailover)
                .HasColumnName("PORT_FAILOVER")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ReadTimeoutSeconds)
                .HasColumnName("READ_TIMEOUT_SECONDS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ResponseType)
                .HasColumnName("RESPONSE_TYPE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.SdkVersion)
                .HasColumnName("SDK_VERSION")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.SslSocketFactory)
                .HasColumnName("SSL_SOCKET_FACTORY")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.Username)
                .HasColumnName("USERNAME")
                .HasColumnType("varchar(60)");

            entity.HasOne(d => d.PaymentGatewayConfig)
                .WithOne(p => p.PaymentGatewayOrbital)
                .HasForeignKey<PaymentGatewayOrbital>(d => d.PaymentGatewayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PGORB_PGC");
        });

        modelBuilder.Entity<PaymentGatewayPayPal>(entity =>
        {
            entity.HasKey(e => e.PaymentGatewayConfigId)
                .HasName("PRIMARY");

            entity.ToTable("PAYMENT_GATEWAY_PAY_PAL");


            entity.HasIndex(e => e.PaymentGatewayConfigId)
                .HasName("PGPP_PGC");

            entity.Property(e => e.PaymentGatewayConfigId)
                .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ApiEnvironment)
                .HasColumnName("API_ENVIRONMENT")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.ApiPassword)
                .HasColumnName("API_PASSWORD")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.ApiSignature)
                .HasColumnName("API_SIGNATURE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.ApiUserName)
                .HasColumnName("API_USER_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.BusinessEmail)
                .HasColumnName("BUSINESS_EMAIL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CancelReturnUrl)
                .HasColumnName("CANCEL_RETURN_URL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ConfirmTemplate)
                .HasColumnName("CONFIRM_TEMPLATE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ConfirmUrl)
                .HasColumnName("CONFIRM_URL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ImageUrl)
                .HasColumnName("IMAGE_URL")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.NotifyUrl)
                .HasColumnName("NOTIFY_URL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.RedirectUrl)
                .HasColumnName("REDIRECT_URL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.RequireConfirmedShipping)
                .HasColumnName("REQUIRE_CONFIRMED_SHIPPING")
                .HasColumnType("char(1)");

            entity.Property(e => e.ReturnUrl)
                .HasColumnName("RETURN_URL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ShippingCallbackUrl)
                .HasColumnName("SHIPPING_CALLBACK_URL")
                .HasColumnType("varchar(2000)");

            entity.HasOne(d => d.PaymentGatewayConfig)
                .WithOne(p => p.PaymentGatewayPayPal)
                .HasForeignKey<PaymentGatewayPayPal>(d => d.PaymentGatewayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PGPP_PGC");
        });

        modelBuilder.Entity<PaymentGatewayPayflowPro>(entity =>
        {
            entity.HasKey(e => e.PaymentGatewayConfigId)
                .HasName("PRIMARY");

            entity.ToTable("PAYMENT_GATEWAY_PAYFLOW_PRO");


            entity.HasIndex(e => e.PaymentGatewayConfigId)
                .HasName("PGPF_PGC");

            entity.Property(e => e.PaymentGatewayConfigId)
                .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CancelReturnUrl)
                .HasColumnName("CANCEL_RETURN_URL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CertsPath)
                .HasColumnName("CERTS_PATH")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CheckAvs)
                .HasColumnName("CHECK_AVS")
                .HasColumnType("char(1)");

            entity.Property(e => e.CheckCvv2)
                .HasColumnName("CHECK_CVV2")
                .HasColumnType("char(1)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.EnableTransmit)
                .HasColumnName("ENABLE_TRANSMIT")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HostAddress)
                .HasColumnName("HOST_ADDRESS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HostPort)
                .HasColumnName("HOST_PORT")
                .HasColumnType("decimal(20,0)");


            entity.Property(e => e.LogFileName)
                .HasColumnName("LOG_FILE_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.LoggingLevel)
                .HasColumnName("LOGGING_LEVEL")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.MaxLogFileSize)
                .HasColumnName("MAX_LOG_FILE_SIZE")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.Partner)
                .HasColumnName("PARTNER")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.PreAuth)
                .HasColumnName("PRE_AUTH")
                .HasColumnType("char(1)");

            entity.Property(e => e.ProxyAddress)
                .HasColumnName("PROXY_ADDRESS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ProxyLogon)
                .HasColumnName("PROXY_LOGON")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ProxyPassword)
                .HasColumnName("PROXY_PASSWORD")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ProxyPort)
                .HasColumnName("PROXY_PORT")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.Pwd)
                .HasColumnName("PWD")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.RedirectUrl)
                .HasColumnName("REDIRECT_URL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ReturnUrl)
                .HasColumnName("RETURN_URL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.StackTraceOn)
                .HasColumnName("STACK_TRACE_ON")
                .HasColumnType("char(1)");

            entity.Property(e => e.Timeout)
                .HasColumnName("TIMEOUT")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.UserId)
                .HasColumnName("USER_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.Vendor)
                .HasColumnName("VENDOR")
                .HasColumnType("varchar(60)");

            entity.HasOne(d => d.PaymentGatewayConfig)
                .WithOne(p => p.PaymentGatewayPayflowPro)
                .HasForeignKey<PaymentGatewayPayflowPro>(d => d.PaymentGatewayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PGPF_PGC");
        });

        modelBuilder.Entity<PaymentGatewayRespMsg>(entity =>
        {
            entity.ToTable("PAYMENT_GATEWAY_RESP_MSG");


            entity.HasIndex(e => e.PaymentGatewayResponseId)
                .HasName("PAYGATRM_PAYGR");

            entity.Property(e => e.PaymentGatewayRespMsgId)
                .HasColumnName("PAYMENT_GATEWAY_RESP_MSG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PaymentGatewayResponseId)
                .HasColumnName("PAYMENT_GATEWAY_RESPONSE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PgrMessage)
                .HasColumnName("PGR_MESSAGE")
                .HasColumnType("longtext");

            entity.HasOne(d => d.PaymentGatewayResponse)
                .WithMany(p => p.PaymentGatewayRespMsgs)
                .HasForeignKey(d => d.PaymentGatewayResponseId)
                .HasConstraintName("PAYGATRM_PAYGR");
        });

        modelBuilder.Entity<PaymentGatewayResponse>(entity =>
        {
            entity.ToTable("PAYMENT_GATEWAY_RESPONSE");


            entity.HasIndex(e => e.CurrencyUomId)
                .HasName("PAYGATR_CUOM");


            entity.HasIndex(e => e.OrderPaymentPreferenceId)
                .HasName("PAYGATR_ORDPMPRF");

            entity.HasIndex(e => e.PaymentMethodId)
                .HasName("PAYGATR_PMETH");

            entity.HasIndex(e => e.PaymentMethodTypeId)
                .HasName("PAYGATR_PMTP");

            entity.HasIndex(e => e.PaymentServiceTypeEnumId)
                .HasName("PAYGATR_PSTENUM");

            entity.HasIndex(e => e.TransCodeEnumId)
                .HasName("PAYGATR_TXCODE");

            entity.Property(e => e.PaymentGatewayResponseId)
                .HasColumnName("PAYMENT_GATEWAY_RESPONSE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AltReference)
                .HasColumnName("ALT_REFERENCE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrencyUomId)
                .HasColumnName("CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GatewayAvsResult)
                .HasColumnName("GATEWAY_AVS_RESULT")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.GatewayCode)
                .HasColumnName("GATEWAY_CODE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.GatewayCvResult)
                .HasColumnName("GATEWAY_CV_RESULT")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.GatewayFlag)
                .HasColumnName("GATEWAY_FLAG")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.GatewayMessage)
                .HasColumnName("GATEWAY_MESSAGE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.GatewayScoreResult)
                .HasColumnName("GATEWAY_SCORE_RESULT")
                .HasColumnType("varchar(60)");


            entity.Property(e => e.OrderPaymentPreferenceId)
                .HasColumnName("ORDER_PAYMENT_PREFERENCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentMethodId)
                .HasColumnName("PAYMENT_METHOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentMethodTypeId)
                .HasColumnName("PAYMENT_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentServiceTypeEnumId)
                .HasColumnName("PAYMENT_SERVICE_TYPE_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReferenceNum)
                .HasColumnName("REFERENCE_NUM")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.ResultBadCardNumber)
                .HasColumnName("RESULT_BAD_CARD_NUMBER")
                .HasColumnType("char(1)");

            entity.Property(e => e.ResultBadExpire)
                .HasColumnName("RESULT_BAD_EXPIRE")
                .HasColumnType("char(1)");

            entity.Property(e => e.ResultDeclined)
                .HasColumnName("RESULT_DECLINED")
                .HasColumnType("char(1)");

            entity.Property(e => e.ResultNsf)
                .HasColumnName("RESULT_NSF")
                .HasColumnType("char(1)");

            entity.Property(e => e.SubReference)
                .HasColumnName("SUB_REFERENCE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.TransCodeEnumId)
                .HasColumnName("TRANS_CODE_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TransactionDate)
                .HasColumnName("TRANSACTION_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.CurrencyUom)
                .WithMany(p => p.PaymentGatewayResponses)
                .HasForeignKey(d => d.CurrencyUomId)
                .HasConstraintName("PAYGATR_CUOM");

            entity.HasOne(d => d.OrderPaymentPreference)
                .WithMany(p => p.PaymentGatewayResponses)
                .HasForeignKey(d => d.OrderPaymentPreferenceId)
                .HasConstraintName("PAYGATR_ORDPMPRF");

            entity.HasOne(d => d.PaymentMethod)
                .WithMany(p => p.PaymentGatewayResponses)
                .HasForeignKey(d => d.PaymentMethodId)
                .HasConstraintName("PAYGATR_PMETH");

            entity.HasOne(d => d.PaymentMethodType)
                .WithMany(p => p.PaymentGatewayResponses)
                .HasForeignKey(d => d.PaymentMethodTypeId)
                .HasConstraintName("PAYGATR_PMTP");

            entity.HasOne(d => d.PaymentServiceTypeEnum)
                .WithMany(p => p.PaymentGatewayResponsePaymentServiceTypeEnums)
                .HasForeignKey(d => d.PaymentServiceTypeEnumId)
                .HasConstraintName("PAYGATR_PSTENUM");

            entity.HasOne(d => d.TransCodeEnum)
                .WithMany(p => p.PaymentGatewayResponseTransCodeEnums)
                .HasForeignKey(d => d.TransCodeEnumId)
                .HasConstraintName("PAYGATR_TXCODE");
        });

        modelBuilder.Entity<PaymentGatewaySagePay>(entity =>
        {
            entity.HasKey(e => e.PaymentGatewayConfigId)
                .HasName("PRIMARY");

            entity.ToTable("PAYMENT_GATEWAY_SAGE_PAY");


            entity.HasIndex(e => e.PaymentGatewayConfigId)
                .HasName("PGSP_PGC");

            entity.Property(e => e.PaymentGatewayConfigId)
                .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AuthenticationTransType)
                .HasColumnName("AUTHENTICATION_TRANS_TYPE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AuthenticationUrl)
                .HasColumnName("AUTHENTICATION_URL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AuthoriseTransType)
                .HasColumnName("AUTHORISE_TRANS_TYPE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AuthoriseUrl)
                .HasColumnName("AUTHORISE_URL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ProductionHost)
                .HasColumnName("PRODUCTION_HOST")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.ProtocolVersion)
                .HasColumnName("PROTOCOL_VERSION")
                .HasColumnType("varchar(10)");

            entity.Property(e => e.RefundUrl)
                .HasColumnName("REFUND_URL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ReleaseTransType)
                .HasColumnName("RELEASE_TRANS_TYPE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.ReleaseUrl)
                .HasColumnName("RELEASE_URL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.SagePayMode)
                .HasColumnName("SAGE_PAY_MODE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.TestingHost)
                .HasColumnName("TESTING_HOST")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.Vendor)
                .HasColumnName("VENDOR")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.VoidUrl)
                .HasColumnName("VOID_URL")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.PaymentGatewayConfig)
                .WithOne(p => p.PaymentGatewaySagePay)
                .HasForeignKey<PaymentGatewaySagePay>(d => d.PaymentGatewayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PGSP_PGC");
        });

        modelBuilder.Entity<PaymentGatewaySecurePay>(entity =>
        {
            entity.HasKey(e => e.PaymentGatewayConfigId)
                .HasName("PRIMARY");

            entity.ToTable("PAYMENT_GATEWAY_SECURE_PAY");


            entity.HasIndex(e => e.PaymentGatewayConfigId)
                .HasName("PGSCP_PGC");

            entity.Property(e => e.PaymentGatewayConfigId)
                .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.EnableAmountRound)
                .HasColumnName("ENABLE_AMOUNT_ROUND")
                .HasColumnType("char(1)");


            entity.Property(e => e.MerchantId)
                .HasColumnName("MERCHANT_ID")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ProcessTimeout)
                .HasColumnName("PROCESS_TIMEOUT")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.Pwd)
                .HasColumnName("PWD")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ServerURL)
                .HasColumnName("SERVER_U_R_L")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.PaymentGatewayConfig)
                .WithOne(p => p.PaymentGatewaySecurePay)
                .HasForeignKey<PaymentGatewaySecurePay>(d => d.PaymentGatewayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PGSCP_PGC");
        });

        modelBuilder.Entity<PaymentGatewayWorldPay>(entity =>
        {
            entity.HasKey(e => e.PaymentGatewayConfigId)
                .HasName("PRIMARY");

            entity.ToTable("PAYMENT_GATEWAY_WORLD_PAY");


            entity.HasIndex(e => e.PaymentGatewayConfigId)
                .HasName("PGWP_PGC");

            entity.Property(e => e.PaymentGatewayConfigId)
                .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AuthMode)
                .HasColumnName("AUTH_MODE")
                .HasColumnType("char(1)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FixContact)
                .HasColumnName("FIX_CONTACT")
                .HasColumnType("char(1)");

            entity.Property(e => e.HideContact)
                .HasColumnName("HIDE_CONTACT")
                .HasColumnType("char(1)");

            entity.Property(e => e.HideCurrency)
                .HasColumnName("HIDE_CURRENCY")
                .HasColumnType("char(1)");

            entity.Property(e => e.InstId)
                .HasColumnName("INST_ID")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.LangId)
                .HasColumnName("LANG_ID")
                .HasColumnType("varchar(60)");


            entity.Property(e => e.NoLanguageMenu)
                .HasColumnName("NO_LANGUAGE_MENU")
                .HasColumnType("char(1)");

            entity.Property(e => e.RedirectUrl)
                .HasColumnName("REDIRECT_URL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.TestMode)
                .HasColumnName("TEST_MODE")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.WithDelivery)
                .HasColumnName("WITH_DELIVERY")
                .HasColumnType("char(1)");

            entity.HasOne(d => d.PaymentGatewayConfig)
                .WithOne(p => p.PaymentGatewayWorldPay)
                .HasForeignKey<PaymentGatewayWorldPay>(d => d.PaymentGatewayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PGWP_PGC");
        });

        modelBuilder.Entity<PaymentGlAccountTypeMap>(entity =>
        {
            entity.HasKey(e => new { e.PaymentTypeId, e.OrganizationPartyId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PAYMENT_GL_ACCOUNT_TYPE_MAP");


            entity.HasIndex(e => e.GlAccountTypeId)
                .HasName("PMTGLACCT_GLACCT");


            entity.HasIndex(e => e.OrganizationPartyId)
                .HasName("PMTGLACCT_PARTY");

            entity.HasIndex(e => e.PaymentTypeId)
                .HasName("PMTGLACCT_PMTTYPE");

            entity.Property(e => e.PaymentTypeId)
                .HasColumnName("PAYMENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrganizationPartyId)
                .HasColumnName("ORGANIZATION_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GlAccountTypeId)
                .HasColumnName("GL_ACCOUNT_TYPE_ID")
                .HasColumnType("varchar(36)");


            entity.HasOne(d => d.GlAccountType)
                .WithMany(p => p.PaymentGlAccountTypeMaps)
                .HasForeignKey(d => d.GlAccountTypeId)
                .HasConstraintName("PMTGLACCT_GLACCT");

            entity.HasOne(d => d.OrganizationParty)
                .WithMany(p => p.PaymentGlAccountTypeMaps)
                .HasForeignKey(d => d.OrganizationPartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PMTGLACCT_PARTY");

            entity.HasOne(d => d.PaymentType)
                .WithMany(p => p.PaymentGlAccountTypeMaps)
                .HasForeignKey(d => d.PaymentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PMTGLACCT_PMTTYPE");
        });

        modelBuilder.Entity<PaymentGroup>(entity =>
        {
            entity.ToTable("PAYMENT_GROUP");


            entity.HasIndex(e => e.PaymentGroupTypeId)
                .HasName("PAYMNTGP_PGTYPE");

            entity.Property(e => e.PaymentGroupId)
                .HasColumnName("PAYMENT_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PaymentGroupName)
                .HasColumnName("PAYMENT_GROUP_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.PaymentGroupTypeId)
                .HasColumnName("PAYMENT_GROUP_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.PaymentGroupType)
                .WithMany(p => p.PaymentGroups)
                .HasForeignKey(d => d.PaymentGroupTypeId)
                .HasConstraintName("PAYMNTGP_PGTYPE");
        });

        modelBuilder.Entity<PaymentGroupMember>(entity =>
        {
            entity.HasKey(e => new { e.PaymentGroupId, e.PaymentId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PAYMENT_GROUP_MEMBER");


            entity.HasIndex(e => e.PaymentGroupId)
                .HasName("PAYGRPMMBR_PG");

            entity.HasIndex(e => e.PaymentId)
                .HasName("PAYGRPMMBR_PAYMNT");

            entity.Property(e => e.PaymentGroupId)
                .HasColumnName("PAYMENT_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentId)
                .HasColumnName("PAYMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.PaymentGroup)
                .WithMany(p => p.PaymentGroupMembers)
                .HasForeignKey(d => d.PaymentGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PAYGRPMMBR_PG");

            entity.HasOne(d => d.Payment)
                .WithMany(p => p.PaymentGroupMembers)
                .HasForeignKey(d => d.PaymentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PAYGRPMMBR_PAYMNT");
        });

        modelBuilder.Entity<PaymentGroupType>(entity =>
        {
            entity.ToTable("PAYMENT_GROUP_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("PAYMNTGP_TYP_PAR");

            entity.Property(e => e.PaymentGroupTypeId)
                .HasColumnName("PAYMENT_GROUP_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("PAYMNTGP_TYP_PAR");
        });

        modelBuilder.Entity<PaymentMethod>(entity =>
        {
            entity.ToTable("PAYMENT_METHOD");


            entity.HasIndex(e => e.FinAccountId)
                .HasName("PAYMETH_FINACCT");

            entity.HasIndex(e => e.GlAccountId)
                .HasName("PAYMETH_GLACCT");


            entity.HasIndex(e => e.PartyId)
                .HasName("PAYMETH_PARTY");

            entity.HasIndex(e => e.PaymentMethodTypeId)
                .HasName("PAYMETH_TYPE");

            entity.Property(e => e.PaymentMethodId)
                .HasColumnName("PAYMENT_METHOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.FinAccountId)
                .HasColumnName("FIN_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.GlAccountId)
                .HasColumnName("GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentMethodTypeId)
                .HasColumnName("PAYMENT_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.FinAccount)
                .WithMany(p => p.PaymentMethods)
                .HasForeignKey(d => d.FinAccountId)
                .HasConstraintName("PAYMETH_FINACCT");

            entity.HasOne(d => d.GlAccount)
                .WithMany(p => p.PaymentMethods)
                .HasForeignKey(d => d.GlAccountId)
                .HasConstraintName("PAYMETH_GLACCT");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.PaymentMethods)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("PAYMETH_PARTY");

            entity.HasOne(d => d.PaymentMethodType)
                .WithMany(p => p.PaymentMethods)
                .HasForeignKey(d => d.PaymentMethodTypeId)
                .HasConstraintName("PAYMETH_TYPE");
        });

        modelBuilder.Entity<PaymentMethodType>(entity =>
        {
            entity.ToTable("PAYMENT_METHOD_TYPE");


            entity.HasIndex(e => e.DefaultGlAccountId)
                .HasName("PAYMENT_MTP_DGLAC");


            entity.Property(e => e.PaymentMethodTypeId)
                .HasColumnName("PAYMENT_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DefaultGlAccountId)
                .HasColumnName("DEFAULT_GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.DefaultGlAccount)
                .WithMany(p => p.PaymentMethodTypes)
                .HasForeignKey(d => d.DefaultGlAccountId)
                .HasConstraintName("PAYMENT_MTP_DGLAC");
        });

        modelBuilder.Entity<PaymentMethodTypeGlAccount>(entity =>
        {
            entity.HasKey(e => new { e.PaymentMethodTypeId, e.OrganizationPartyId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PAYMENT_METHOD_TYPE_GL_ACCOUNT");


            entity.HasIndex(e => e.GlAccountId)
                .HasName("PAYMENT_MTGA_GLAC");


            entity.HasIndex(e => e.OrganizationPartyId)
                .HasName("PAYMENT_MTGA_OPTY");

            entity.HasIndex(e => e.PaymentMethodTypeId)
                .HasName("PAYMENT_MTGA_PMT");

            entity.Property(e => e.PaymentMethodTypeId)
                .HasColumnName("PAYMENT_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrganizationPartyId)
                .HasColumnName("ORGANIZATION_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GlAccountId)
                .HasColumnName("GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");


            entity.HasOne(d => d.GlAccount)
                .WithMany(p => p.PaymentMethodTypeGlAccounts)
                .HasForeignKey(d => d.GlAccountId)
                .HasConstraintName("PAYMENT_MTGA_GLAC");

            entity.HasOne(d => d.OrganizationParty)
                .WithMany(p => p.PaymentMethodTypeGlAccounts)
                .HasForeignKey(d => d.OrganizationPartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PAYMENT_MTGA_OPTY");

            entity.HasOne(d => d.PaymentMethodType)
                .WithMany(p => p.PaymentMethodTypeGlAccounts)
                .HasForeignKey(d => d.PaymentMethodTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PAYMENT_MTGA_PMT");
        });

        modelBuilder.Entity<PaymentType>(entity =>
        {
            entity.ToTable("PAYMENT_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("PAYMENT_TYPE_PAR");

            entity.Property(e => e.PaymentTypeId)
                .HasColumnName("PAYMENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("PAYMENT_TYPE_PAR");
        });

        modelBuilder.Entity<PaymentTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.PaymentTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PAYMENT_TYPE_ATTR");


            entity.HasIndex(e => e.PaymentTypeId)
                .HasName("PAYMETH_TYPE_ATTR");

            entity.Property(e => e.PaymentTypeId)
                .HasColumnName("PAYMENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.PaymentType)
                .WithMany(p => p.PaymentTypeAttrs)
                .HasForeignKey(d => d.PaymentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PAYMETH_TYPE_ATTR");
        });

        modelBuilder.Entity<PayrollPreference>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.RoleTypeId, e.PayrollPreferenceSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PAYROLL_PREFERENCE");


            entity.HasIndex(e => e.PartyId)
                .HasName("PRL_PREF_PRTY");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("PRL_PREF_PTRL");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PayrollPreferenceSeqId)
                .HasColumnName("PAYROLL_PREFERENCE_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AccountNumber)
                .HasColumnName("ACCOUNT_NUMBER")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.BankName)
                .HasColumnName("BANK_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DeductionTypeId)
                .HasColumnName("DEDUCTION_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FlatAmount)
                .HasColumnName("FLAT_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PaymentMethodTypeId)
                .HasColumnName("PAYMENT_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Percentage).HasColumnName("PERCENTAGE");

            entity.Property(e => e.PeriodTypeId)
                .HasColumnName("PERIOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoutingNumber)
                .HasColumnName("ROUTING_NUMBER")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.PayrollPreferences)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRL_PREF_PRTY");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.PayrollPreferences)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRL_PREF_PTRL");
        });

        modelBuilder.Entity<PerfRatingType>(entity =>
        {
            entity.ToTable("PERF_RATING_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("PERF_RATNG_TYP");

            entity.Property(e => e.PerfRatingTypeId)
                .HasColumnName("PERF_RATING_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("PERF_RATNG_TYP");
        });

        modelBuilder.Entity<PerfReview>(entity =>
        {
            entity.HasKey(e => new { e.EmployeePartyId, e.EmployeeRoleTypeId, e.PerfReviewId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PERF_REVIEW");


            entity.HasIndex(e => e.EmployeePartyId)
                .HasName("PERF_REV_EPTY");


            entity.HasIndex(e => e.ManagerPartyId)
                .HasName("PERF_REV_MPTY");

            entity.HasIndex(e => e.PaymentId)
                .HasName("PERF_REV_PMNT");

            entity.HasIndex(e => new { e.EmployeePartyId, e.EmployeeRoleTypeId })
                .HasName("PERF_REV_EPTRL");

            entity.Property(e => e.EmployeePartyId)
                .HasColumnName("EMPLOYEE_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.EmployeeRoleTypeId)
                .HasColumnName("EMPLOYEE_ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PerfReviewId)
                .HasColumnName("PERF_REVIEW_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.EmplPositionId)
                .HasColumnName("EMPL_POSITION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ManagerPartyId)
                .HasColumnName("MANAGER_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ManagerRoleTypeId)
                .HasColumnName("MANAGER_ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentId)
                .HasColumnName("PAYMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.EmployeeParty)
                .WithMany(p => p.PerfReviewEmployeeParties)
                .HasForeignKey(d => d.EmployeePartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PERF_REV_EPTY");

            entity.HasOne(d => d.ManagerParty)
                .WithMany(p => p.PerfReviewManagerParties)
                .HasForeignKey(d => d.ManagerPartyId)
                .HasConstraintName("PERF_REV_MPTY");

            entity.HasOne(d => d.Payment)
                .WithMany(p => p.PerfReviews)
                .HasForeignKey(d => d.PaymentId)
                .HasConstraintName("PERF_REV_PMNT");

            entity.HasOne(d => d.Employee)
                .WithMany(p => p.PerfReviews)
                .HasForeignKey(d => new { d.EmployeePartyId, d.EmployeeRoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PERF_REV_EPTRL");
        });

        modelBuilder.Entity<PerfReviewItem>(entity =>
        {
            entity.HasKey(e => new
                    { e.EmployeePartyId, e.EmployeeRoleTypeId, e.PerfReviewId, e.PerfReviewItemSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PERF_REVIEW_ITEM");


            entity.HasIndex(e => e.EmployeePartyId)
                .HasName("PERF_RVITM_EPTY");


            entity.HasIndex(e => new { e.EmployeePartyId, e.EmployeeRoleTypeId })
                .HasName("PERF_RVITM_EPTRL");

            entity.HasIndex(e => new { e.EmployeePartyId, e.EmployeeRoleTypeId, e.PerfReviewId })
                .HasName("PERF_RVITM_PFRV");

            entity.Property(e => e.EmployeePartyId)
                .HasColumnName("EMPLOYEE_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.EmployeeRoleTypeId)
                .HasColumnName("EMPLOYEE_ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PerfReviewId)
                .HasColumnName("PERF_REVIEW_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PerfReviewItemSeqId)
                .HasColumnName("PERF_REVIEW_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PerfRatingTypeId)
                .HasColumnName("PERF_RATING_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PerfReviewItemTypeId)
                .HasColumnName("PERF_REVIEW_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.EmployeeParty)
                .WithMany(p => p.PerfReviewItems)
                .HasForeignKey(d => d.EmployeePartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PERF_RVITM_EPTY");

            entity.HasOne(d => d.Employee)
                .WithMany(p => p.PerfReviewItems)
                .HasForeignKey(d => new { d.EmployeePartyId, d.EmployeeRoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PERF_RVITM_EPTRL");

            entity.HasOne(d => d.PerfReview)
                .WithMany(p => p.PerfReviewItems)
                .HasForeignKey(d => new { d.EmployeePartyId, d.EmployeeRoleTypeId, d.PerfReviewId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PERF_RVITM_PFRV");
        });

        modelBuilder.Entity<PerfReviewItemType>(entity =>
        {
            entity.ToTable("PERF_REVIEW_ITEM_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("PERF_REV_ITM_TYP");

            entity.Property(e => e.PerfReviewItemTypeId)
                .HasColumnName("PERF_REVIEW_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("PERF_REV_ITM_TYP");
        });

        modelBuilder.Entity<PerformanceNote>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.RoleTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PERFORMANCE_NOTE");


            entity.HasIndex(e => e.PartyId)
                .HasName("PERF_NOTE_PRTY");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("PERF_NOTE_PRLE");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CommunicationDate)
                .HasColumnName("COMMUNICATION_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.PerformanceNotes)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PERF_NOTE_PRTY");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.PerformanceNotes)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PERF_NOTE_PRLE");
        });

        modelBuilder.Entity<PeriodType>(entity =>
        {
            entity.ToTable("PERIOD_TYPE");


            entity.HasIndex(e => e.UomId)
                .HasName("PER_TYPE_UOM");

            entity.Property(e => e.PeriodTypeId)
                .HasColumnName("PERIOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.PeriodLength)
                .HasColumnName("PERIOD_LENGTH")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.UomId)
                .HasColumnName("UOM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Uom)
                .WithMany(p => p.PeriodTypes)
                .HasForeignKey(d => d.UomId)
                .HasConstraintName("PER_TYPE_UOM");
        });

        modelBuilder.Entity<Person>(entity =>
        {
            entity.HasKey(e => e.PartyId)
                .HasName("PRIMARY");

            entity.ToTable("PERSON");

            entity.HasIndex(e => e.CardId)
                .HasName("CARD_ID_IDX")
                .IsUnique();


            entity.HasIndex(e => e.EmploymentStatusEnumId)
                .HasName("PERSON_EMPS_ENUM");

            entity.HasIndex(e => e.FirstName)
                .HasName("FIRST_NAME_IDX");

            entity.HasIndex(e => e.LastName)
                .HasName("LAST_NAME_IDX");


            entity.HasIndex(e => e.MaritalStatusEnumId)
                .HasName("PERSON_MARITAL");

            entity.HasIndex(e => e.PartyId)
                .HasName("PERSON_PARTY");

            entity.HasIndex(e => e.ResidenceStatusEnumId)
                .HasName("PERSON_RESS_ENUM");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BirthDate)
                .HasColumnName("BIRTH_DATE")
                .HasColumnType("date");

            entity.Property(e => e.CardId)
                .HasColumnName("CARD_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DeceasedDate)
                .HasColumnName("DECEASED_DATE")
                .HasColumnType("date");

            entity.Property(e => e.EmploymentStatusEnumId)
                .HasColumnName("EMPLOYMENT_STATUS_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ExistingCustomer)
                .HasColumnName("EXISTING_CUSTOMER")
                .HasColumnType("char(1)");

            entity.Property(e => e.FirstName)
                .HasColumnName("FIRST_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.FirstNameLocal)
                .HasColumnName("FIRST_NAME_LOCAL")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.Gender)
                .HasColumnName("GENDER")
                .HasColumnType("char(1)");

            entity.Property(e => e.Height).HasColumnName("HEIGHT");

            entity.Property(e => e.LastName)
                .HasColumnName("LAST_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.LastNameLocal)
                .HasColumnName("LAST_NAME_LOCAL")
                .HasColumnType("varchar(100)");


            entity.Property(e => e.MaritalStatus)
                .HasColumnName("MARITAL_STATUS")
                .HasColumnType("char(1)");

            entity.Property(e => e.MaritalStatusEnumId)
                .HasColumnName("MARITAL_STATUS_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.MemberId)
                .HasColumnName("MEMBER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.MiddleName)
                .HasColumnName("MIDDLE_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.MiddleNameLocal)
                .HasColumnName("MIDDLE_NAME_LOCAL")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.MonthsWithEmployer)
                .HasColumnName("MONTHS_WITH_EMPLOYER")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.MothersMaidenName)
                .HasColumnName("MOTHERS_MAIDEN_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.Nickname)
                .HasColumnName("NICKNAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.Occupation)
                .HasColumnName("OCCUPATION")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.OtherLocal)
                .HasColumnName("OTHER_LOCAL")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.PassportExpireDate)
                .HasColumnName("PASSPORT_EXPIRE_DATE")
                .HasColumnType("date");

            entity.Property(e => e.PassportNumber)
                .HasColumnName("PASSPORT_NUMBER")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.PersonalTitle)
                .HasColumnName("PERSONAL_TITLE")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.ResidenceStatusEnumId)
                .HasColumnName("RESIDENCE_STATUS_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Salutation)
                .HasColumnName("SALUTATION")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.SocialSecurityNumber)
                .HasColumnName("SOCIAL_SECURITY_NUMBER")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.Suffix)
                .HasColumnName("SUFFIX")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.TotalYearsWorkExperience).HasColumnName("TOTAL_YEARS_WORK_EXPERIENCE");

            entity.Property(e => e.Weight).HasColumnName("WEIGHT");

            entity.Property(e => e.YearsWithEmployer)
                .HasColumnName("YEARS_WITH_EMPLOYER")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.EmploymentStatusEnum)
                .WithMany(p => p.PersonEmploymentStatusEnums)
                .HasForeignKey(d => d.EmploymentStatusEnumId)
                .HasConstraintName("PERSON_EMPS_ENUM");

            entity.HasOne(d => d.MaritalStatusEnum)
                .WithMany(p => p.PersonMaritalStatusEnums)
                .HasForeignKey(d => d.MaritalStatusEnumId)
                .HasConstraintName("PERSON_MARITAL");

            entity.HasOne(d => d.Party)
                .WithOne(p => p.Person)
                .HasForeignKey<Person>(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PERSON_PARTY");

            entity.HasOne(d => d.ResidenceStatusEnum)
                .WithMany(p => p.PersonResidenceStatusEnums)
                .HasForeignKey(d => d.ResidenceStatusEnumId)
                .HasConstraintName("PERSON_RESS_ENUM");
        });

        modelBuilder.Entity<PersonTraining>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.TrainingClassTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PERSON_TRAINING");

            entity.HasIndex(e => e.ApproverId)
                .HasName("PERS_TRNG_APPR");


            entity.HasIndex(e => e.PartyId)
                .HasName("PERS_TRNG_PRTY");

            entity.HasIndex(e => e.TrainingClassTypeId)
                .HasName("PERS_TRNG_TCTP");

            entity.HasIndex(e => e.TrainingRequestId)
                .HasName("PERS_TRNG_TRNRQ");

            entity.HasIndex(e => e.WorkEffortId)
                .HasName("PERS_TRNG_WREF");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TrainingClassTypeId)
                .HasColumnName("TRAINING_CLASS_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ApprovalStatus)
                .HasColumnName("APPROVAL_STATUS")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.ApproverId)
                .HasColumnName("APPROVER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Reason)
                .HasColumnName("REASON")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.TrainingRequestId)
                .HasColumnName("TRAINING_REQUEST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Approver)
                .WithMany(p => p.PersonTrainings)
                .HasForeignKey(d => d.ApproverId)
                .HasConstraintName("PERS_TRNG_APPR");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.PersonTrainings)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PERS_TRNG_PRTY");

            entity.HasOne(d => d.TrainingClassType)
                .WithMany(p => p.PersonTrainings)
                .HasForeignKey(d => d.TrainingClassTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PERS_TRNG_TCTP");

            entity.HasOne(d => d.TrainingRequest)
                .WithMany(p => p.PersonTrainings)
                .HasForeignKey(d => d.TrainingRequestId)
                .HasConstraintName("PERS_TRNG_TRNRQ");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.PersonTrainings)
                .HasForeignKey(d => d.WorkEffortId)
                .HasConstraintName("PERS_TRNG_WREF");
        });

        modelBuilder.Entity<PhysicalInventory>(entity =>
        {
            entity.ToTable("PHYSICAL_INVENTORY");


            entity.Property(e => e.PhysicalInventoryId)
                .HasColumnName("PHYSICAL_INVENTORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GeneralComments)
                .HasColumnName("GENERAL_COMMENTS")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PhysicalInventoryDate)
                .HasColumnName("PHYSICAL_INVENTORY_DATE")
                .HasColumnType("datetime(6)");
        });

        modelBuilder.Entity<Picklist>(entity =>
        {
            entity.ToTable("PICKLIST");


            entity.HasIndex(e => e.FacilityId)
                .HasName("PICKLST_FLTY");


            entity.HasIndex(e => e.ShipmentMethodTypeId)
                .HasName("PICKLST_SMTP");

            entity.HasIndex(e => e.StatusId)
                .HasName("PICKLST_STTS");

            entity.Property(e => e.PicklistId)
                .HasColumnName("PICKLIST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedDate)
                .HasColumnName("CREATED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.LastModifiedDate)
                .HasColumnName("LAST_MODIFIED_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PicklistDate)
                .HasColumnName("PICKLIST_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ShipmentMethodTypeId)
                .HasColumnName("SHIPMENT_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Facility)
                .WithMany(p => p.Picklists)
                .HasForeignKey(d => d.FacilityId)
                .HasConstraintName("PICKLST_FLTY");

            entity.HasOne(d => d.ShipmentMethodType)
                .WithMany(p => p.Picklists)
                .HasForeignKey(d => d.ShipmentMethodTypeId)
                .HasConstraintName("PICKLST_SMTP");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.Picklists)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("PICKLST_STTS");
        });

        modelBuilder.Entity<PicklistBin>(entity =>
        {
            entity.ToTable("PICKLIST_BIN");


            entity.HasIndex(e => e.PicklistId)
                .HasName("PCKLST_BIN_PKLT");

            entity.HasIndex(e => new { e.PrimaryOrderId, e.PrimaryShipGroupSeqId })
                .HasName("PCKLST_BIN_OISG");

            entity.Property(e => e.PicklistBinId)
                .HasColumnName("PICKLIST_BIN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BinLocationNumber)
                .HasColumnName("BIN_LOCATION_NUMBER")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PicklistId)
                .HasColumnName("PICKLIST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PrimaryOrderId)
                .HasColumnName("PRIMARY_ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PrimaryShipGroupSeqId)
                .HasColumnName("PRIMARY_SHIP_GROUP_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Picklist)
                .WithMany(p => p.PicklistBins)
                .HasForeignKey(d => d.PicklistId)
                .HasConstraintName("PCKLST_BIN_PKLT");

            entity.HasOne(d => d.Primary)
                .WithMany(p => p.PicklistBins)
                .HasForeignKey(d => new { d.PrimaryOrderId, d.PrimaryShipGroupSeqId })
                .HasConstraintName("PCKLST_BIN_OISG");
        });

        modelBuilder.Entity<PicklistItem>(entity =>
        {
            entity.HasKey(e => new
                    { e.PicklistBinId, e.OrderId, e.OrderItemSeqId, e.ShipGroupSeqId, e.InventoryItemId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0 });

            entity.ToTable("PICKLIST_ITEM");


            entity.HasIndex(e => e.InventoryItemId)
                .HasName("PCKLST_ITM_INV");

            entity.HasIndex(e => e.ItemStatusId)
                .HasName("PICKLST_ITM_STTS");


            entity.HasIndex(e => e.PicklistBinId)
                .HasName("PCKLST_ITM_BIN");

            entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId })
                .HasName("PCKLST_ITM_ODIT");

            entity.HasIndex(e => new { e.OrderId, e.ShipGroupSeqId })
                .HasName("PCKLST_ITM_OISG");

            entity.Property(e => e.PicklistBinId)
                .HasColumnName("PICKLIST_BIN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipGroupSeqId)
                .HasColumnName("SHIP_GROUP_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InventoryItemId)
                .HasColumnName("INVENTORY_ITEM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ItemStatusId)
                .HasColumnName("ITEM_STATUS_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.HasOne(d => d.InventoryItem)
                .WithMany(p => p.PicklistItems)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PCKLST_ITM_INV");

            entity.HasOne(d => d.ItemStatus)
                .WithMany(p => p.PicklistItems)
                .HasForeignKey(d => d.ItemStatusId)
                .HasConstraintName("PICKLST_ITM_STTS");

            entity.HasOne(d => d.PicklistBin)
                .WithMany(p => p.PicklistItems)
                .HasForeignKey(d => d.PicklistBinId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PCKLST_ITM_BIN");

            entity.HasOne(d => d.OrderI)
                .WithMany(p => p.PicklistItems)
                .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PCKLST_ITM_ODIT");

            entity.HasOne(d => d.OrderItemShipGroup)
                .WithMany(p => p.PicklistItems)
                .HasForeignKey(d => new { d.OrderId, d.ShipGroupSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PCKLST_ITM_OISG");
        });

        modelBuilder.Entity<PicklistRole>(entity =>
        {
            entity.HasKey(e => new { e.PicklistId, e.PartyId, e.RoleTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PICKLIST_ROLE");

            entity.HasIndex(e => e.CreatedByUserLogin)
                .HasName("PCKLST_RLE_CBUL");


            entity.HasIndex(e => e.LastModifiedByUserLogin)
                .HasName("PCKLST_RLE_LMUL");


            entity.HasIndex(e => e.PicklistId)
                .HasName("PCKLST_RLE_PKLT");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("PCKLST_RLE_PRLE");

            entity.Property(e => e.PicklistId)
                .HasColumnName("PICKLIST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.CreatedByUserLoginNavigation)
                .WithMany(p => p.PicklistRoleCreatedByUserLoginNavigations)
                .HasForeignKey(d => d.CreatedByUserLogin)
                .HasConstraintName("PCKLST_RLE_CBUL");

            entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                .WithMany(p => p.PicklistRoleLastModifiedByUserLoginNavigations)
                .HasForeignKey(d => d.LastModifiedByUserLogin)
                .HasConstraintName("PCKLST_RLE_LMUL");

            entity.HasOne(d => d.Picklist)
                .WithMany(p => p.PicklistRoles)
                .HasForeignKey(d => d.PicklistId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PCKLST_RLE_PKLT");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.PicklistRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PCKLST_RLE_PRLE");
        });

        modelBuilder.Entity<PicklistStatu>(entity =>
        {
            entity.HasKey(e => new { e.PicklistId, e.StatusDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PICKLIST_STATUS");

            entity.HasIndex(e => e.ChangedByUserLoginId)
                .HasName("PCKLST_STST_CUL");


            entity.HasIndex(e => e.PicklistId)
                .HasName("PCKLST_STST_PKLT");

            entity.HasIndex(e => e.StatusId)
                .HasName("PCKLST_STST_FSI");

            entity.HasIndex(e => e.StatusIdTo)
                .HasName("PCKLST_STST_TSI");

            entity.Property(e => e.PicklistId)
                .HasColumnName("PICKLIST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusDate)
                .HasColumnName("STATUS_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ChangedByUserLoginId)
                .HasColumnName("CHANGE_BY_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusIdTo)
                .HasColumnName("STATUS_ID_TO")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ChangeByUserLogin)
                .WithMany(p => p.PicklistStatus)
                .HasForeignKey(d => d.ChangedByUserLoginId)
                .HasConstraintName("PCKLST_STST_CUL");

            entity.HasOne(d => d.Picklist)
                .WithMany(p => p.PicklistStatus)
                .HasForeignKey(d => d.PicklistId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PCKLST_STST_PKLT");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.PicklistStatuStatus)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("PCKLST_STST_FSI");

            entity.HasOne(d => d.StatusIdToNavigation)
                .WithMany(p => p.PicklistStatuStatusIdToNavigations)
                .HasForeignKey(d => d.StatusIdTo)
                .HasConstraintName("PCKLST_STST_TSI");
        });

        modelBuilder.Entity<PicklistStatusHistory>(entity =>
        {
            entity.HasKey(e => new { e.PicklistId, e.ChangeDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PICKLIST_STATUS_HISTORY");

            entity.HasIndex(e => e.ChangeUserLoginId)
                .HasName("PCKLST_STHST_CUL");


            entity.HasIndex(e => e.PicklistId)
                .HasName("PCKLST_STHST_PKLT");

            entity.HasIndex(e => e.StatusId)
                .HasName("PCKLST_STHST_FSI");

            entity.HasIndex(e => e.StatusIdTo)
                .HasName("PCKLST_STHST_TSI");

            entity.HasIndex(e => new { e.StatusId, e.StatusIdTo })
                .HasName("PCKLST_STHST_SVC");

            entity.Property(e => e.PicklistId)
                .HasColumnName("PICKLIST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ChangeDate)
                .HasColumnName("CHANGE_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ChangeUserLoginId)
                .HasColumnName("CHANGE_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusIdTo)
                .HasColumnName("STATUS_ID_TO")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ChangeUserLogin)
                .WithMany(p => p.PicklistStatusHistories)
                .HasForeignKey(d => d.ChangeUserLoginId)
                .HasConstraintName("PCKLST_STHST_CUL");

            entity.HasOne(d => d.Picklist)
                .WithMany(p => p.PicklistStatusHistories)
                .HasForeignKey(d => d.PicklistId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PCKLST_STHST_PKLT");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.PicklistStatusHistoryStatus)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("PCKLST_STHST_FSI");

            entity.HasOne(d => d.StatusIdToNavigation)
                .WithMany(p => p.PicklistStatusHistoryStatusIdToNavigations)
                .HasForeignKey(d => d.StatusIdTo)
                .HasConstraintName("PCKLST_STHST_TSI");

            entity.HasOne(d => d.StatusNavigation)
                .WithMany(p => p.PicklistStatusHistories)
                .HasForeignKey(d => new { d.StatusId, d.StatusIdTo })
                .HasConstraintName("PCKLST_STHST_SVC");
        });

        modelBuilder.Entity<PlatformType>(entity =>
        {
            entity.ToTable("PLATFORM_TYPE");


            entity.Property(e => e.PlatformTypeId)
                .HasColumnName("PLATFORM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PlatformName)
                .HasColumnName("PLATFORM_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.PlatformVersion)
                .HasColumnName("PLATFORM_VERSION")
                .HasColumnType("varchar(10)");
        });

        modelBuilder.Entity<PortalPage>(entity =>
        {
            entity.ToTable("PORTAL_PAGE");


            entity.HasIndex(e => e.HelpContentId)
                .HasName("PORTPAL_HELP_CONT");


            entity.HasIndex(e => e.ParentPortalPageId)
                .HasName("PortPage_PARENT");

            entity.HasIndex(e => e.SecurityGroupId)
                .HasName("PORTPAGE_SECGRP");

            entity.Property(e => e.PortalPageId)
                .HasColumnName("PORTAL_PAGE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HelpContentId)
                .HasColumnName("HELP_CONTENT_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.OriginalPortalPageId)
                .HasColumnName("ORIGINAL_PORTAL_PAGE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OwnerUserLoginId)
                .HasColumnName("OWNER_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.ParentPortalPageId)
                .HasColumnName("PARENT_PORTAL_PAGE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PortalPageName)
                .HasColumnName("PORTAL_PAGE_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.SecurityGroupId)
                .HasColumnName("SECURITY_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.HelpContent)
                .WithMany(p => p.PortalPages)
                .HasForeignKey(d => d.HelpContentId)
                .HasConstraintName("PORTPAL_HELP_CONT");

            entity.HasOne(d => d.ParentPortalPage)
                .WithMany(p => p.InverseParentPortalPage)
                .HasForeignKey(d => d.ParentPortalPageId)
                .HasConstraintName("PortPage_PARENT");

            entity.HasOne(d => d.SecurityGroup)
                .WithMany(p => p.PortalPages)
                .HasForeignKey(d => d.SecurityGroupId)
                .HasConstraintName("PORTPAGE_SECGRP");
        });

        modelBuilder.Entity<PortalPageColumn>(entity =>
        {
            entity.HasKey(e => new { e.PortalPageId, e.ColumnSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PORTAL_PAGE_COLUMN");


            entity.HasIndex(e => e.PortalPageId)
                .HasName("PRTL_PGCOL_PAGE");

            entity.Property(e => e.PortalPageId)
                .HasColumnName("PORTAL_PAGE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ColumnSeqId)
                .HasColumnName("COLUMN_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ColumnWidthPercentage)
                .HasColumnName("COLUMN_WIDTH_PERCENTAGE")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ColumnWidthPixels)
                .HasColumnName("COLUMN_WIDTH_PIXELS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.PortalPage)
                .WithMany(p => p.PortalPageColumns)
                .HasForeignKey(d => d.PortalPageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRTL_PGCOL_PAGE");
        });

        modelBuilder.Entity<PortalPagePortlet>(entity =>
        {
            entity.HasKey(e => new { e.PortalPageId, e.PortalPortletId, e.PortletSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PORTAL_PAGE_PORTLET");


            entity.HasIndex(e => e.PortalPageId)
                .HasName("PRTL_PGPTLT_PAGE");

            entity.HasIndex(e => e.PortalPortletId)
                .HasName("PRTL_PGPTLT_PTLT");

            entity.Property(e => e.PortalPageId)
                .HasColumnName("PORTAL_PAGE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PortalPortletId)
                .HasColumnName("PORTAL_PORTLET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PortletSeqId)
                .HasColumnName("PORTLET_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ColumnSeqId)
                .HasColumnName("COLUMN_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.PortalPage)
                .WithMany(p => p.PortalPagePortlets)
                .HasForeignKey(d => d.PortalPageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRTL_PGPTLT_PAGE");

            entity.HasOne(d => d.PortalPortlet)
                .WithMany(p => p.PortalPagePortlets)
                .HasForeignKey(d => d.PortalPortletId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRTL_PGPTLT_PTLT");
        });

        modelBuilder.Entity<PortalPortlet>(entity =>
        {
            entity.ToTable("PORTAL_PORTLET");


            entity.Property(e => e.PortalPortletId)
                .HasColumnName("PORTAL_PORTLET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.EditFormLocation)
                .HasColumnName("EDIT_FORM_LOCATION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.EditFormName)
                .HasColumnName("EDIT_FORM_NAME")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.PortletName)
                .HasColumnName("PORTLET_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.ScreenLocation)
                .HasColumnName("SCREEN_LOCATION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ScreenName)
                .HasColumnName("SCREEN_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.Screenshot)
                .HasColumnName("SCREENSHOT")
                .HasColumnType("varchar(2000)");

            entity.Property(e => e.SecurityMainAction)
                .HasColumnName("SECURITY_MAIN_ACTION")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.SecurityServiceName)
                .HasColumnName("SECURITY_SERVICE_NAME")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<PortletAttribute>(entity =>
        {
            entity.HasKey(e => new { e.PortalPageId, e.PortalPortletId, e.PortletSeqId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PORTLET_ATTRIBUTE");


            entity.HasIndex(e => e.PortalPortletId)
                .HasName("PTLT_ATTR_PTLT");

            entity.Property(e => e.PortalPageId)
                .HasColumnName("PORTAL_PAGE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PortalPortletId)
                .HasColumnName("PORTAL_PORTLET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PortletSeqId)
                .HasColumnName("PORTLET_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrType)
                .HasColumnName("ATTR_TYPE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.PortalPortlet)
                .WithMany(p => p.PortletAttributes)
                .HasForeignKey(d => d.PortalPortletId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PTLT_ATTR_PTLT");
        });

        modelBuilder.Entity<PortletCategory>(entity =>
        {
            entity.ToTable("PORTLET_CATEGORY");


            entity.Property(e => e.PortletCategoryId)
                .HasColumnName("PORTLET_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<PortletPortletCategory>(entity =>
        {
            entity.HasKey(e => new { e.PortalPortletId, e.PortletCategoryId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PORTLET_PORTLET_CATEGORY");


            entity.HasIndex(e => e.PortalPortletId)
                .HasName("PPTLTCAT_PTPL");

            entity.HasIndex(e => e.PortletCategoryId)
                .HasName("PPTLTCAT_PTLTCAT");

            entity.Property(e => e.PortalPortletId)
                .HasColumnName("PORTAL_PORTLET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PortletCategoryId)
                .HasColumnName("PORTLET_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.PortalPortlet)
                .WithMany(p => p.PortletPortletCategories)
                .HasForeignKey(d => d.PortalPortletId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PPTLTCAT_PTPL");

            entity.HasOne(d => d.PortletCategory)
                .WithMany(p => p.PortletPortletCategories)
                .HasForeignKey(d => d.PortletCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PPTLTCAT_PTLTCAT");
        });

        modelBuilder.Entity<PosTerminal>(entity =>
        {
            entity.ToTable("POS_TERMINAL");


            entity.Property(e => e.PosTerminalId)
                .HasColumnName("POS_TERMINAL_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");


            entity.Property(e => e.PushEntitySyncId)
                .HasColumnName("PUSH_ENTITY_SYNC_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TerminalName)
                .HasColumnName("TERMINAL_NAME")
                .HasColumnType("varchar(100)");
        });

        modelBuilder.Entity<PosTerminalInternTx>(entity =>
        {
            entity.HasKey(e => e.PosTerminalLogId)
                .HasName("PRIMARY");

            entity.ToTable("POS_TERMINAL_INTERN_TX");


            entity.HasIndex(e => e.PosTerminalLogId)
                .HasName("POS_TRA_POS");

            entity.HasIndex(e => e.ReasonEnumId)
                .HasName("POS_TRA_PAYENUM");

            entity.Property(e => e.PosTerminalLogId)
                .HasColumnName("POS_TERMINAL_LOG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PaidAmount)
                .HasColumnName("PAID_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.ReasonComment)
                .HasColumnName("REASON_COMMENT")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ReasonEnumId)
                .HasColumnName("REASON_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.PosTerminalLog)
                .WithOne(p => p.PosTerminalInternTx)
                .HasForeignKey<PosTerminalInternTx>(d => d.PosTerminalLogId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("POS_TRA_POS");

            entity.HasOne(d => d.ReasonEnum)
                .WithMany(p => p.PosTerminalInternTxes)
                .HasForeignKey(d => d.ReasonEnumId)
                .HasConstraintName("POS_TRA_PAYENUM");
        });

        modelBuilder.Entity<PosTerminalLog>(entity =>
        {
            entity.ToTable("POS_TERMINAL_LOG");


            entity.HasIndex(e => e.OrderId)
                .HasName("POS_LOG_ORDER");

            entity.HasIndex(e => e.PosTerminalId)
                .HasName("POS_LOG_POS");

            entity.HasIndex(e => e.ReturnId)
                .HasName("POS_LOG_RETURN");

            entity.HasIndex(e => e.StatusId)
                .HasName("POS_LOG_STTS");

            entity.Property(e => e.PosTerminalLogId)
                .HasColumnName("POS_TERMINAL_LOG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ItemCount)
                .HasColumnName("ITEM_COUNT")
                .HasColumnType("decimal(20,0)");


            entity.Property(e => e.LogEndDateTime)
                .HasColumnName("LOG_END_DATE_TIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.LogStartDateTime)
                .HasColumnName("LOG_START_DATE_TIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PosTerminalId)
                .HasColumnName("POS_TERMINAL_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReturnId)
                .HasColumnName("RETURN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TransactionId)
                .HasColumnName("TRANSACTION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.UserLoginId)
                .HasColumnName("USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.PosTerminalLogs)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("POS_LOG_ORDER");

            entity.HasOne(d => d.PosTerminal)
                .WithMany(p => p.PosTerminalLogs)
                .HasForeignKey(d => d.PosTerminalId)
                .HasConstraintName("POS_LOG_POS");

            entity.HasOne(d => d.Return)
                .WithMany(p => p.PosTerminalLogs)
                .HasForeignKey(d => d.ReturnId)
                .HasConstraintName("POS_LOG_RETURN");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.PosTerminalLogs)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("POS_LOG_STTS");
        });

        modelBuilder.Entity<PosTerminalState>(entity =>
        {
            entity.HasKey(e => new { e.PosTerminalId, e.OpenedDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("POS_TERMINAL_STATE");


            entity.HasIndex(e => e.PosTerminalId)
                .HasName("POS_STATE_POS");

            entity.Property(e => e.PosTerminalId)
                .HasColumnName("POS_TERMINAL_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OpenedDate)
                .HasColumnName("OPENED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ActualEndingCash)
                .HasColumnName("ACTUAL_ENDING_CASH")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.ActualEndingCc)
                .HasColumnName("ACTUAL_ENDING_CC")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.ActualEndingCheck)
                .HasColumnName("ACTUAL_ENDING_CHECK")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.ActualEndingGc)
                .HasColumnName("ACTUAL_ENDING_GC")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.ActualEndingOther)
                .HasColumnName("ACTUAL_ENDING_OTHER")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.ClosedByUserLoginId)
                .HasColumnName("CLOSED_BY_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.ClosedDate)
                .HasColumnName("CLOSED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.EndingTxId)
                .HasColumnName("ENDING_TX_ID")
                .HasColumnType("varchar(60)");


            entity.Property(e => e.OpenedByUserLoginId)
                .HasColumnName("OPENED_BY_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.StartingDrawerAmount)
                .HasColumnName("STARTING_DRAWER_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.StartingTxId)
                .HasColumnName("STARTING_TX_ID")
                .HasColumnType("varchar(60)");

            entity.HasOne(d => d.PosTerminal)
                .WithMany(p => p.PosTerminalStates)
                .HasForeignKey(d => d.PosTerminalId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("POS_STATE_POS");
        });

        modelBuilder.Entity<PostalAddress>(entity =>
        {
            entity.HasKey(e => e.ContactMechId)
                .HasName("PRIMARY");

            entity.ToTable("POSTAL_ADDRESS");

            entity.HasIndex(e => e.Address1)
                .HasName("ADDRESS1_IDX");

            entity.HasIndex(e => e.Address2)
                .HasName("ADDRESS2_IDX");

            entity.HasIndex(e => e.City)
                .HasName("CITY_IDX");

            entity.HasIndex(e => e.CityGeoId)
                .HasName("POST_ADDR_CITY");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("POST_ADDR_CMECH");

            entity.HasIndex(e => e.CountryGeoId)
                .HasName("POST_ADDR_CGEO");

            entity.HasIndex(e => e.CountyGeoId)
                .HasName("POST_ADDR_CNTG");


            entity.HasIndex(e => e.GeoPointId)
                .HasName("POST_ADDR_GEOPT");


            entity.HasIndex(e => e.MunicipalityGeoId)
                .HasName("POST_ADDR_MNCP");

            entity.HasIndex(e => e.PostalCode)
                .HasName("POSTAL_CODE_IDX");

            entity.HasIndex(e => e.PostalCodeGeoId)
                .HasName("POST_ADDR_PCGEO");

            entity.HasIndex(e => e.StateProvinceGeoId)
                .HasName("POST_ADDR_SPGEO");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Address1)
                .HasColumnName("ADDRESS1")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.Address2)
                .HasColumnName("ADDRESS2")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttnName)
                .HasColumnName("ATTN_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.City)
                .HasColumnName("CITY")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.CityGeoId)
                .HasColumnName("CITY_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CountryGeoId)
                .HasColumnName("COUNTRY_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CountyGeoId)
                .HasColumnName("COUNTY_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Directions)
                .HasColumnName("DIRECTIONS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.GeoPointId)
                .HasColumnName("GEO_POINT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.HouseNumber)
                .HasColumnName("HOUSE_NUMBER")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.HouseNumberExt)
                .HasColumnName("HOUSE_NUMBER_EXT")
                .HasColumnType("varchar(60)");


            entity.Property(e => e.MunicipalityGeoId)
                .HasColumnName("MUNICIPALITY_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PostalCode)
                .HasColumnName("POSTAL_CODE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.PostalCodeExt)
                .HasColumnName("POSTAL_CODE_EXT")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.PostalCodeGeoId)
                .HasColumnName("POSTAL_CODE_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StateProvinceGeoId)
                .HasColumnName("STATE_PROVINCE_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ToName)
                .HasColumnName("TO_NAME")
                .HasColumnType("varchar(100)");

            entity.HasOne(d => d.CityGeo)
                .WithMany(p => p.PostalAddressCityGeos)
                .HasForeignKey(d => d.CityGeoId)
                .HasConstraintName("POST_ADDR_CITY");

            entity.HasOne(d => d.ContactMech)
                .WithOne(p => p.PostalAddress)
                .HasForeignKey<PostalAddress>(d => d.ContactMechId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("POST_ADDR_CMECH");

            entity.HasOne(d => d.CountryGeo)
                .WithMany(p => p.PostalAddressCountryGeos)
                .HasForeignKey(d => d.CountryGeoId)
                .HasConstraintName("POST_ADDR_CGEO");

            entity.HasOne(d => d.CountyGeo)
                .WithMany(p => p.PostalAddressCountyGeos)
                .HasForeignKey(d => d.CountyGeoId)
                .HasConstraintName("POST_ADDR_CNTG");

            entity.HasOne(d => d.GeoPoint)
                .WithMany(p => p.PostalAddresses)
                .HasForeignKey(d => d.GeoPointId)
                .HasConstraintName("POST_ADDR_GEOPT");

            entity.HasOne(d => d.MunicipalityGeo)
                .WithMany(p => p.PostalAddressMunicipalityGeos)
                .HasForeignKey(d => d.MunicipalityGeoId)
                .HasConstraintName("POST_ADDR_MNCP");

            entity.HasOne(d => d.PostalCodeGeo)
                .WithMany(p => p.PostalAddressPostalCodeGeos)
                .HasForeignKey(d => d.PostalCodeGeoId)
                .HasConstraintName("POST_ADDR_PCGEO");

            entity.HasOne(d => d.StateProvinceGeo)
                .WithMany(p => p.PostalAddressStateProvinceGeos)
                .HasForeignKey(d => d.StateProvinceGeoId)
                .HasConstraintName("POST_ADDR_SPGEO");
        });

        modelBuilder.Entity<PostalAddressBoundary>(entity =>
        {
            entity.HasKey(e => new { e.ContactMechId, e.GeoId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("POSTAL_ADDRESS_BOUNDARY");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("POST_ADDR_BNDRY");


            entity.HasIndex(e => e.GeoId)
                .HasName("POST_ADDR_BNDRYGEO");


            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GeoId)
                .HasColumnName("GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.PostalAddressBoundaries)
                .HasForeignKey(d => d.ContactMechId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("POST_ADDR_BNDRY");

            entity.HasOne(d => d.Geo)
                .WithMany(p => p.PostalAddressBoundaries)
                .HasForeignKey(d => d.GeoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("POST_ADDR_BNDRYGEO");
        });

        modelBuilder.Entity<PriorityType>(entity =>
        {
            entity.ToTable("PRIORITY_TYPE");


            entity.Property(e => e.PriorityTypeId)
                .HasColumnName("PRIORITY_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<ProdCatalog>(entity =>
        {
            entity.ToTable("PROD_CATALOG");


            entity.Property(e => e.ProdCatalogId)
                .HasColumnName("PROD_CATALOG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CatalogName)
                .HasColumnName("CATALOG_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.ContentPathPrefix)
                .HasColumnName("CONTENT_PATH_PREFIX")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.HeaderLogo)
                .HasColumnName("HEADER_LOGO")
                .HasColumnType("varchar(2000)");


            entity.Property(e => e.PurchaseAllowPermReqd)
                .HasColumnName("PURCHASE_ALLOW_PERM_REQD")
                .HasColumnType("char(1)");

            entity.Property(e => e.StyleSheet)
                .HasColumnName("STYLE_SHEET")
                .HasColumnType("varchar(2000)");

            entity.Property(e => e.TemplatePathPrefix)
                .HasColumnName("TEMPLATE_PATH_PREFIX")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.UseQuickAdd)
                .HasColumnName("USE_QUICK_ADD")
                .HasColumnType("char(1)");

            entity.Property(e => e.ViewAllowPermReqd)
                .HasColumnName("VIEW_ALLOW_PERM_REQD")
                .HasColumnType("char(1)");
        });

        modelBuilder.Entity<ProdCatalogCategory>(entity =>
        {
            entity.HasKey(
                    e => new { e.ProdCatalogId, e.ProductCategoryId, e.ProdCatalogCategoryTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PROD_CATALOG_CATEGORY");


            entity.HasIndex(e => e.ProdCatalogCategoryTypeId)
                .HasName("PROD_CC_TYPE");

            entity.HasIndex(e => e.ProdCatalogId)
                .HasName("PROD_CC_CATALOG");

            entity.HasIndex(e => e.ProductCategoryId)
                .HasName("PROD_CC_CATEGORY");

            entity.Property(e => e.ProdCatalogId)
                .HasColumnName("PROD_CATALOG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductCategoryId)
                .HasColumnName("PRODUCT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProdCatalogCategoryTypeId)
                .HasColumnName("PROD_CATALOG_CATEGORY_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ProdCatalogCategoryType)
                .WithMany(p => p.ProdCatalogCategories)
                .HasForeignKey(d => d.ProdCatalogCategoryTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_CC_TYPE");

            entity.HasOne(d => d.ProdCatalog)
                .WithMany(p => p.ProdCatalogCategories)
                .HasForeignKey(d => d.ProdCatalogId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_CC_CATALOG");

            entity.HasOne(d => d.ProductCategory)
                .WithMany(p => p.ProdCatalogCategories)
                .HasForeignKey(d => d.ProductCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_CC_CATEGORY");
        });

        modelBuilder.Entity<ProdCatalogCategoryType>(entity =>
        {
            entity.ToTable("PROD_CATALOG_CATEGORY_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("PROD_PCCT_TYPEPAR");

            entity.Property(e => e.ProdCatalogCategoryTypeId)
                .HasColumnName("PROD_CATALOG_CATEGORY_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("PROD_PCCT_TYPEPAR");
        });

        modelBuilder.Entity<ProdCatalogInvFacility>(entity =>
        {
            entity.HasKey(e => new { e.ProdCatalogId, e.FacilityId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PROD_CATALOG_INV_FACILITY");


            entity.HasIndex(e => e.FacilityId)
                .HasName("PROD_CIF_FACILITY");


            entity.HasIndex(e => e.ProdCatalogId)
                .HasName("PROD_CIF_CATALOG");

            entity.Property(e => e.ProdCatalogId)
                .HasColumnName("PROD_CATALOG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Facility)
                .WithMany(p => p.ProdCatalogInvFacilities)
                .HasForeignKey(d => d.FacilityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_CIF_FACILITY");

            entity.HasOne(d => d.ProdCatalog)
                .WithMany(p => p.ProdCatalogInvFacilities)
                .HasForeignKey(d => d.ProdCatalogId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_CIF_CATALOG");
        });

        modelBuilder.Entity<ProdCatalogRole>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.RoleTypeId, e.ProdCatalogId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PROD_CATALOG_ROLE");


            entity.HasIndex(e => e.ProdCatalogId)
                .HasName("PCATRLE_CATALOG");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("PCATRLE_PTYRLE");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProdCatalogId)
                .HasColumnName("PROD_CATALOG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ProdCatalog)
                .WithMany(p => p.ProdCatalogRoles)
                .HasForeignKey(d => d.ProdCatalogId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PCATRLE_CATALOG");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.ProdCatalogRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PCATRLE_PTYRLE");
        });

        modelBuilder.Entity<ProdConfItemContent>(entity =>
        {
            entity.HasKey(e => new { e.ConfigItemId, e.ContentId, e.ConfItemContentTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PROD_CONF_ITEM_CONTENT");

            entity.HasIndex(e => e.ConfItemContentTypeId)
                .HasName("CIMT_CNT_TYPE");

            entity.HasIndex(e => e.ConfigItemId)
                .HasName("CIMT_CNT_PCIT");

            entity.HasIndex(e => e.ContentId)
                .HasName("CIMT_CNT_CNT");


            entity.Property(e => e.ConfigItemId)
                .HasColumnName("CONFIG_ITEM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ConfItemContentTypeId)
                .HasColumnName("CONF_ITEM_CONTENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ConfItemContentType)
                .WithMany(p => p.ProdConfItemContents)
                .HasForeignKey(d => d.ConfItemContentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CIMT_CNT_TYPE");

            entity.HasOne(d => d.ConfigItem)
                .WithMany(p => p.ProdConfItemContents)
                .HasForeignKey(d => d.ConfigItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CIMT_CNT_PCIT");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.ProdConfItemContents)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CIMT_CNT_CNT");
        });

        modelBuilder.Entity<ProdConfItemContentType>(entity =>
        {
            entity.HasKey(e => e.ConfItemContentTypeId)
                .HasName("PRIMARY");

            entity.ToTable("PROD_CONF_ITEM_CONTENT_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("PCICT_TYP_PARENT");

            entity.Property(e => e.ConfItemContentTypeId)
                .HasColumnName("CONF_ITEM_CONTENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("PCICT_TYP_PARENT");
        });

        modelBuilder.Entity<ProdPromoCodeContactMech>(entity =>
        {
            entity.HasKey(e => new { e.ProductPromoCodeId, e.ContactMechId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PROD_PROMO_CODE_CONTACT_MECH");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("PROD_PRCDE_CM");


            entity.HasIndex(e => e.ProductPromoCodeId)
                .HasName("PROD_PRCDE_PCD");

            entity.Property(e => e.ProductPromoCodeId)
                .HasColumnName("PRODUCT_PROMO_CODE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.ProdPromoCodeContactMeches)
                .HasForeignKey(d => d.ContactMechId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_PRCDE_CM");

            entity.HasOne(d => d.ProductPromoCode)
                .WithMany(p => p.ProdPromoCodeContactMeches)
                .HasForeignKey(d => d.ProductPromoCodeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_PRCDE_PCD");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.ToTable("PRODUCT");

            entity.HasIndex(e => e.AmountUomTypeId)
                .HasName("PROD_AMOUNT_UOMT");

            entity.HasIndex(e => e.CreatedByUserLogin)
                .HasName("PROD_CB_USERLOGIN");


            entity.HasIndex(e => e.DefaultShipmentBoxTypeId)
                .HasName("PROD_SHBX_TYPE");

            entity.HasIndex(e => e.DepthUomId)
                .HasName("PROD_DEPTH_UOM");

            entity.HasIndex(e => e.DiameterUomId)
                .HasName("PROD_DIAMTR_UOM");

            entity.HasIndex(e => e.FacilityId)
                .HasName("PROD_FACILITY");

            entity.HasIndex(e => e.HeightUomId)
                .HasName("PROD_HEIGHT_UOM");

            entity.HasIndex(e => e.InventoryItemTypeId)
                .HasName("PROD_INV_ITEM_TYPE");

            entity.HasIndex(e => e.LastModifiedByUserLogin)
                .HasName("PROD_LMB_USERLOGIN");

            entity.HasIndex(e => e.OriginGeoId)
                .HasName("PROD_ORG_GEO");

            entity.HasIndex(e => e.PrimaryProductCategoryId)
                .HasName("PROD_PRIMARY_CAT");

            entity.HasIndex(e => e.ProductTypeId)
                .HasName("PROD_TYPE");

            entity.HasIndex(e => e.QuantityUomId)
                .HasName("PROD_QUANT_UOM");

            entity.HasIndex(e => e.RatingTypeEnum)
                .HasName("PROD_RATE_ENUM");

            entity.HasIndex(e => e.RequirementMethodEnumId)
                .HasName("PROD_RQMT_ENUM");

            entity.HasIndex(e => e.VirtualVariantMethodEnum)
                .HasName("PROD_VVMETHOD_ENUM");

            entity.HasIndex(e => e.WeightUomId)
                .HasName("PROD_WEIGHT_UOM");

            entity.HasIndex(e => e.WidthUomId)
                .HasName("PROD_WIDTH_UOM");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.AmountUomTypeId)
                .HasColumnName("AMOUNT_UOM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AutoCreateKeywords)
                .HasColumnName("AUTO_CREATE_KEYWORDS")
                .HasColumnType("char(1)");

            entity.Property(e => e.BillOfMaterialLevel)
                .HasColumnName("BILL_OF_MATERIAL_LEVEL")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.BrandName)
                .HasColumnName("BRAND_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.ChargeShipping)
                .HasColumnName("CHARGE_SHIPPING")
                .HasColumnType("char(1)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ConfigId)
                .HasColumnName("CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedDate)
                .HasColumnName("CREATED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.DefaultShipmentBoxTypeId)
                .HasColumnName("DEFAULT_SHIPMENT_BOX_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DepthUomId)
                .HasColumnName("DEPTH_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.DetailImageUrl)
                .HasColumnName("DETAIL_IMAGE_URL")
                .HasColumnType("varchar(2000)");

            entity.Property(e => e.DetailScreen)
                .HasColumnName("DETAIL_SCREEN")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.DiameterUomId)
                .HasColumnName("DIAMETER_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.FixedAmount)
                .HasColumnName("FIXED_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.HeightUomId)
                .HasColumnName("HEIGHT_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InShippingBox)
                .HasColumnName("IN_SHIPPING_BOX")
                .HasColumnType("char(1)");

            entity.Property(e => e.IncludeInPromotions)
                .HasColumnName("INCLUDE_IN_PROMOTIONS")
                .HasColumnType("char(1)");

            entity.Property(e => e.InternalName)
                .HasColumnName("INTERNAL_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.IntroductionDate)
                .HasColumnName("INTRODUCTION_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.InventoryItemTypeId)
                .HasColumnName("INVENTORY_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InventoryMessage)
                .HasColumnName("INVENTORY_MESSAGE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.IsVariant)
                .HasColumnName("IS_VARIANT")
                .HasColumnType("char(1)");

            entity.Property(e => e.IsVirtual)
                .HasColumnName("IS_VIRTUAL")
                .HasColumnType("char(1)");

            entity.Property(e => e.LargeImageUrl)
                .HasColumnName("LARGE_IMAGE_URL")
                .HasColumnType("varchar(2000)");

            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.LastModifiedDate)
                .HasColumnName("LAST_MODIFIED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.LongDescription)
                .HasColumnName("LONG_DESCRIPTION")
                .HasColumnType("longtext");

            entity.Property(e => e.LotIdFilledIn)
                .HasColumnName("LOT_ID_FILLED_IN")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.MediumImageUrl)
                .HasColumnName("MEDIUM_IMAGE_URL")
                .HasColumnType("varchar(2000)");

            entity.Property(e => e.OrderDecimalQuantity)
                .HasColumnName("ORDER_DECIMAL_QUANTITY")
                .HasColumnType("char(1)");

            entity.Property(e => e.OriginGeoId)
                .HasColumnName("ORIGIN_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OriginalImageUrl)
                .HasColumnName("ORIGINAL_IMAGE_URL")
                .HasColumnType("varchar(2000)");

            entity.Property(e => e.PiecesIncluded)
                .HasColumnName("PIECES_INCLUDED")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.PriceDetailText)
                .HasColumnName("PRICE_DETAIL_TEXT")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.PrimaryProductCategoryId)
                .HasColumnName("PRIMARY_PRODUCT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductDepth)
                .HasColumnName("PRODUCT_DEPTH")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ProductDiameter)
                .HasColumnName("PRODUCT_DIAMETER")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ProductHeight)
                .HasColumnName("PRODUCT_HEIGHT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ProductName)
                .HasColumnName("PRODUCT_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.ProductRating)
                .HasColumnName("PRODUCT_RATING")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ProductTypeId)
                .HasColumnName("PRODUCT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductWeight)
                .HasColumnName("PRODUCT_WEIGHT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ProductWidth)
                .HasColumnName("PRODUCT_WIDTH")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.QuantityIncluded)
                .HasColumnName("QUANTITY_INCLUDED")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.QuantityUomId)
                .HasColumnName("QUANTITY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RatingTypeEnum)
                .HasColumnName("RATING_TYPE_ENUM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReleaseDate)
                .HasColumnName("RELEASE_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.RequireAmount)
                .HasColumnName("REQUIRE_AMOUNT")
                .HasColumnType("char(1)");

            entity.Property(e => e.RequireInventory)
                .HasColumnName("REQUIRE_INVENTORY")
                .HasColumnType("char(1)");

            entity.Property(e => e.RequirementMethodEnumId)
                .HasColumnName("REQUIREMENT_METHOD_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Reserv2ndPPPerc)
                .HasColumnName("RESERV2ND_P_P_PERC")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReservMaxPersons)
                .HasColumnName("RESERV_MAX_PERSONS")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReservNthPPPerc)
                .HasColumnName("RESERV_NTH_P_P_PERC")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.Returnable)
                .HasColumnName("RETURNABLE")
                .HasColumnType("char(1)");

            entity.Property(e => e.SalesDiscWhenNotAvail)
                .HasColumnName("SALES_DISC_WHEN_NOT_AVAIL")
                .HasColumnType("char(1)");

            entity.Property(e => e.SalesDiscontinuationDate)
                .HasColumnName("SALES_DISCONTINUATION_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ShippingDepth)
                .HasColumnName("SHIPPING_DEPTH")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ShippingHeight)
                .HasColumnName("SHIPPING_HEIGHT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ShippingWeight)
                .HasColumnName("SHIPPING_WEIGHT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ShippingWidth)
                .HasColumnName("SHIPPING_WIDTH")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.SmallImageUrl)
                .HasColumnName("SMALL_IMAGE_URL")
                .HasColumnType("varchar(2000)");

            entity.Property(e => e.SupportDiscontinuationDate)
                .HasColumnName("SUPPORT_DISCONTINUATION_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Taxable)
                .HasColumnName("TAXABLE")
                .HasColumnType("char(1)");

            entity.Property(e => e.VirtualVariantMethodEnum)
                .HasColumnName("VIRTUAL_VARIANT_METHOD_ENUM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WeightUomId)
                .HasColumnName("WEIGHT_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WidthUomId)
                .HasColumnName("WIDTH_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.AmountUomType)
                .WithMany(p => p.Products)
                .HasForeignKey(d => d.AmountUomTypeId)
                .HasConstraintName("PROD_AMOUNT_UOMT")
                .IsRequired(false);

            entity.HasOne(d => d.CreatedByUserLoginNavigation)
                .WithMany(p => p.ProductCreatedByUserLoginNavigations)
                .HasForeignKey(d => d.CreatedByUserLogin)
                .HasConstraintName("PROD_CB_USERLOGIN")
                .IsRequired(false);

            entity.HasOne(d => d.DefaultShipmentBoxType)
                .WithMany(p => p.Products)
                .HasForeignKey(d => d.DefaultShipmentBoxTypeId)
                .HasConstraintName("PROD_SHBX_TYPE")
                .IsRequired(false);

            entity.HasOne(d => d.DepthUom)
                .WithMany(p => p.ProductDepthUoms)
                .HasForeignKey(d => d.DepthUomId)
                .HasConstraintName("PROD_DEPTH_UOM")
                .IsRequired(false);

            entity.HasOne(d => d.DiameterUom)
                .WithMany(p => p.ProductDiameterUoms)
                .HasForeignKey(d => d.DiameterUomId)
                .HasConstraintName("PROD_DIAMTR_UOM")
                .IsRequired(false);

            entity.HasOne(d => d.Facility)
                .WithMany(p => p.Products)
                .HasForeignKey(d => d.FacilityId)
                .HasConstraintName("PROD_FACILITY")
                .IsRequired(false);

            entity.HasOne(d => d.HeightUom)
                .WithMany(p => p.ProductHeightUoms)
                .HasForeignKey(d => d.HeightUomId)
                .HasConstraintName("PROD_HEIGHT_UOM")
                .IsRequired(false);

            entity.HasOne(d => d.InventoryItemType)
                .WithMany(p => p.Products)
                .HasForeignKey(d => d.InventoryItemTypeId)
                .HasConstraintName("PROD_INV_ITEM_TYPE")
                .IsRequired(false);

            entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                .WithMany(p => p.ProductLastModifiedByUserLoginNavigations)
                .HasForeignKey(d => d.LastModifiedByUserLogin)
                .HasConstraintName("PROD_LMB_USERLOGIN")
                .IsRequired(false);

            entity.HasOne(d => d.OriginGeo)
                .WithMany(p => p.Products)
                .HasForeignKey(d => d.OriginGeoId)
                .HasConstraintName("PROD_ORG_GEO")
                .IsRequired(false);

            entity.HasOne(d => d.PrimaryProductCategory)
                .WithMany(p => p.Products)
                .HasForeignKey(d => d.PrimaryProductCategoryId)
                .HasConstraintName("PROD_PRIMARY_CAT");

            entity.HasOne(d => d.ProductType)
                .WithMany(p => p.Products)
                .HasForeignKey(d => d.ProductTypeId)
                .HasConstraintName("PROD_TYPE");

            entity.HasOne(d => d.QuantityUom)
                .WithMany(p => p.ProductQuantityUoms)
                .HasForeignKey(d => d.QuantityUomId)
                .HasConstraintName("PROD_QUANT_UOM")
                .IsRequired(false);

            entity.HasOne(d => d.RatingTypeEnumNavigation)
                .WithMany(p => p.ProductRatingTypeEnumNavigations)
                .HasForeignKey(d => d.RatingTypeEnum)
                .HasConstraintName("PROD_RATE_ENUM")
                .IsRequired(false);

            entity.HasOne(d => d.RequirementMethodEnum)
                .WithMany(p => p.ProductRequirementMethodEnums)
                .HasForeignKey(d => d.RequirementMethodEnumId)
                .HasConstraintName("PROD_RQMT_ENUM")
                .IsRequired(false);

            entity.HasOne(d => d.VirtualVariantMethodEnumNavigation)
                .WithMany(p => p.ProductVirtualVariantMethodEnumNavigations)
                .HasForeignKey(d => d.VirtualVariantMethodEnum)
                .HasConstraintName("PROD_VVMETHOD_ENUM")
                .IsRequired(false);

            entity.HasOne(d => d.WeightUom)
                .WithMany(p => p.ProductWeightUoms)
                .HasForeignKey(d => d.WeightUomId)
                .HasConstraintName("PROD_WEIGHT_UOM")
                .IsRequired(false);

            entity.HasOne(d => d.WidthUom)
                .WithMany(p => p.ProductWidthUoms)
                .HasForeignKey(d => d.WidthUomId)
                .HasConstraintName("PROD_WIDTH_UOM")
                .IsRequired(false);
        });

        modelBuilder.Entity<ProductAssoc>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.ProductIdTo, e.ProductAssocTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PRODUCT_ASSOC");


            entity.HasIndex(e => e.EstimateCalcMethod)
                .HasName("PROD_ASSOC_CUSM");


            entity.HasIndex(e => e.ProductAssocTypeId)
                .HasName("PROD_ASSOC_TYPE");

            entity.HasIndex(e => e.ProductId)
                .HasName("PROD_ASSOC_MPROD");

            entity.HasIndex(e => e.ProductIdTo)
                .HasName("PROD_ASSOC_APROD");

            entity.HasIndex(e => e.RecurrenceInfoId)
                .HasName("PROD_ASSOC_RECINFO");

            entity.HasIndex(e => e.RoutingWorkEffortId)
                .HasName("PROD_ASSOC_RTWE");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.ProductIdTo)
                .HasColumnName("PRODUCT_ID_TO")
                .HasColumnType("char(36)");

            entity.Property(e => e.ProductAssocTypeId)
                .HasColumnName("PRODUCT_ASSOC_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.EstimateCalcMethod)
                .HasColumnName("ESTIMATE_CALC_METHOD")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Instruction)
                .HasColumnName("INSTRUCTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.Reason)
                .HasColumnName("REASON")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.RecurrenceInfoId)
                .HasColumnName("RECURRENCE_INFO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoutingWorkEffortId)
                .HasColumnName("ROUTING_WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ScrapFactor)
                .HasColumnName("SCRAP_FACTOR")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.EstimateCalcMethodNavigation)
                .WithMany(p => p.ProductAssocs)
                .HasForeignKey(d => d.EstimateCalcMethod)
                .HasConstraintName("PROD_ASSOC_CUSM");

            entity.HasOne(d => d.ProductAssocType)
                .WithMany(p => p.ProductAssocs)
                .HasForeignKey(d => d.ProductAssocTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_ASSOC_TYPE");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductAssocProducts)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_ASSOC_MPROD");

            entity.HasOne(d => d.ProductIdToNavigation)
                .WithMany(p => p.ProductAssocProductIdToNavigations)
                .HasForeignKey(d => d.ProductIdTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_ASSOC_APROD");

            entity.HasOne(d => d.RecurrenceInfo)
                .WithMany(p => p.ProductAssocs)
                .HasForeignKey(d => d.RecurrenceInfoId)
                .HasConstraintName("PROD_ASSOC_RECINFO");

            entity.HasOne(d => d.RoutingWorkEffort)
                .WithMany(p => p.ProductAssocs)
                .HasForeignKey(d => d.RoutingWorkEffortId)
                .HasConstraintName("PROD_ASSOC_RTWE");
        });

        modelBuilder.Entity<ProductAssocType>(entity =>
        {
            entity.ToTable("PRODUCT_ASSOC_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("PROD_ASSOC_TYPEPAR");

            entity.Property(e => e.ProductAssocTypeId)
                .HasColumnName("PRODUCT_ASSOC_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("PROD_ASSOC_TYPEPAR");
        });

        modelBuilder.Entity<ProductAttribute>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PRODUCT_ATTRIBUTE");


            entity.HasIndex(e => e.ProductId)
                .HasName("PROD_ATTR");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrType)
                .HasColumnName("ATTR_TYPE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductAttributes)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_ATTR");
        });

        modelBuilder.Entity<ProductAverageCost>(entity =>
        {
            entity.HasKey(e => new
                    { e.ProductAverageCostTypeId, e.OrganizationPartyId, e.ProductId, e.FacilityId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0 });

            entity.ToTable("PRODUCT_AVERAGE_COST");


            entity.HasIndex(e => e.FacilityId)
                .HasName("AVG_COST_FACI");


            entity.HasIndex(e => e.OrganizationPartyId)
                .HasName("AVG_COST_PARTY");

            entity.HasIndex(e => e.ProductAverageCostTypeId)
                .HasName("AVG_COST_TYPE");

            entity.HasIndex(e => e.ProductId)
                .HasName("AVG_COST_PROD");

            entity.Property(e => e.ProductAverageCostTypeId)
                .HasColumnName("PRODUCT_AVERAGE_COST_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrganizationPartyId)
                .HasColumnName("ORGANIZATION_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.AverageCost)
                .HasColumnName("AVERAGE_COST")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Facility)
                .WithMany(p => p.ProductAverageCosts)
                .HasForeignKey(d => d.FacilityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AVG_COST_FACI");

            entity.HasOne(d => d.OrganizationParty)
                .WithMany(p => p.ProductAverageCosts)
                .HasForeignKey(d => d.OrganizationPartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AVG_COST_PARTY");

            entity.HasOne(d => d.ProductAverageCostType)
                .WithMany(p => p.ProductAverageCosts)
                .HasForeignKey(d => d.ProductAverageCostTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AVG_COST_TYPE");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductAverageCosts)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AVG_COST_PROD");
        });

        modelBuilder.Entity<ProductAverageCostType>(entity =>
        {
            entity.ToTable("PRODUCT_AVERAGE_COST_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("AVGCOST_TYPE_PAR");

            entity.Property(e => e.ProductAverageCostTypeId)
                .HasColumnName("PRODUCT_AVERAGE_COST_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("AVGCOST_TYPE_PAR");
        });

        modelBuilder.Entity<ProductCalculatedInfo>(entity =>
        {
            entity.HasKey(e => e.ProductId)
                .HasName("PRIMARY");

            entity.ToTable("PRODUCT_CALCULATED_INFO");


            entity.HasIndex(e => e.ProductId)
                .HasName("PRODCI_PROD");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.AverageCustomerRating)
                .HasColumnName("AVERAGE_CUSTOMER_RATING")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.TotalQuantityOrdered)
                .HasColumnName("TOTAL_QUANTITY_ORDERED")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.TotalTimesViewed)
                .HasColumnName("TOTAL_TIMES_VIEWED")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.Product)
                .WithOne(p => p.ProductCalculatedInfo)
                .HasForeignKey<ProductCalculatedInfo>(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRODCI_PROD");
        });

        modelBuilder.Entity<ProductCategory>(entity =>
        {
            entity.ToTable("PRODUCT_CATEGORY");

            entity.HasIndex(e => e.PrimaryParentCategoryId)
                .HasName("PROD_CTGRY_PARENT");

            entity.HasIndex(e => e.ProductCategoryTypeId)
                .HasName("PROD_CTGRY_TYPE");

            entity.Property(e => e.ProductCategoryId)
                .HasColumnName("PRODUCT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CategoryImageUrl)
                .HasColumnName("CATEGORY_IMAGE_URL")
                .HasColumnType("varchar(2000)");

            entity.Property(e => e.CategoryName)
                .HasColumnName("CATEGORY_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.DetailScreen)
                .HasColumnName("DETAIL_SCREEN")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.LinkOneImageUrl)
                .HasColumnName("LINK_ONE_IMAGE_URL")
                .HasColumnType("varchar(2000)");

            entity.Property(e => e.LinkTwoImageUrl)
                .HasColumnName("LINK_TWO_IMAGE_URL")
                .HasColumnType("varchar(2000)");

            entity.Property(e => e.LongDescription)
                .HasColumnName("LONG_DESCRIPTION")
                .HasColumnType("longtext");

            entity.Property(e => e.PrimaryParentCategoryId)
                .HasColumnName("PRIMARY_PARENT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductCategoryTypeId)
                .HasColumnName("PRODUCT_CATEGORY_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShowInSelect)
                .HasColumnName("SHOW_IN_SELECT")
                .HasColumnType("char(1)");

            entity.HasOne(d => d.PrimaryParentCategory)
                .WithMany(p => p.InversePrimaryParentCategory)
                .HasForeignKey(d => d.PrimaryParentCategoryId)
                .HasConstraintName("PROD_CTGRY_PARENT")
                .IsRequired(false);

            entity.HasOne(d => d.ProductCategoryType)
                .WithMany(p => p.ProductCategories)
                .HasForeignKey(d => d.ProductCategoryTypeId)
                .HasConstraintName("PROD_CTGRY_TYPE");
        });

        modelBuilder.Entity<ProductCategoryAttribute>(entity =>
        {
            entity.HasKey(e => new { e.ProductCategoryId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PRODUCT_CATEGORY_ATTRIBUTE");


            entity.HasIndex(e => e.ProductCategoryId)
                .HasName("PROD_CTGRY_ATTR");

            entity.Property(e => e.ProductCategoryId)
                .HasColumnName("PRODUCT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ProductCategory)
                .WithMany(p => p.ProductCategoryAttributes)
                .HasForeignKey(d => d.ProductCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_CTGRY_ATTR");
        });

        modelBuilder.Entity<ProductCategoryContent>(entity =>
        {
            entity.HasKey(e => new { e.ProductCategoryId, e.ContentId, e.ProdCatContentTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PRODUCT_CATEGORY_CONTENT");

            entity.HasIndex(e => e.ContentId)
                .HasName("PRDCAT_CNT_CNT");


            entity.HasIndex(e => e.ProdCatContentTypeId)
                .HasName("PRDCAT_CNT_TYPE");

            entity.HasIndex(e => e.ProductCategoryId)
                .HasName("PRDCAT_CNT_PRDCAT");

            entity.HasIndex(e => new { e.ProductCategoryId, e.ProdCatContentTypeId })
                .HasName("PRDCAT_CNT_CTTP");

            entity.Property(e => e.ProductCategoryId)
                .HasColumnName("PRODUCT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProdCatContentTypeId)
                .HasColumnName("PROD_CAT_CONTENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PurchaseFromDate)
                .HasColumnName("PURCHASE_FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.PurchaseThruDate)
                .HasColumnName("PURCHASE_THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.UseCountLimit)
                .HasColumnName("USE_COUNT_LIMIT")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.UseDaysLimit)
                .HasColumnName("USE_DAYS_LIMIT")
                .HasColumnType("decimal(18,6)");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.ProductCategoryContents)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDCAT_CNT_CNT");

            entity.HasOne(d => d.ProdCatContentType)
                .WithMany(p => p.ProductCategoryContents)
                .HasForeignKey(d => d.ProdCatContentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDCAT_CNT_TYPE");

            entity.HasOne(d => d.ProductCategory)
                .WithMany(p => p.ProductCategoryContents)
                .HasForeignKey(d => d.ProductCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDCAT_CNT_PRDCAT");
        });

        modelBuilder.Entity<ProductCategoryContentType>(entity =>
        {
            entity.HasKey(e => e.ProdCatContentTypeId)
                .HasName("PRIMARY");

            entity.ToTable("PRODUCT_CATEGORY_CONTENT_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("PRDCATCNT_TYP_PAR");

            entity.Property(e => e.ProdCatContentTypeId)
                .HasColumnName("PROD_CAT_CONTENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("PRDCATCNT_TYP_PAR");
        });

        modelBuilder.Entity<ProductCategoryGlAccount>(entity =>
        {
            entity.HasKey(e => new { e.ProductCategoryId, e.OrganizationPartyId, e.GlAccountTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PRODUCT_CATEGORY_GL_ACCOUNT");


            entity.HasIndex(e => e.GlAccountId)
                .HasName("PRD_CT_GLACT_GLACT");

            entity.HasIndex(e => e.GlAccountTypeId)
                .HasName("PRD_CT_GLACT_TYPE");


            entity.HasIndex(e => e.OrganizationPartyId)
                .HasName("PRD_CT_GLACT_PRTY");

            entity.HasIndex(e => e.ProductCategoryId)
                .HasName("PRD_CT_GLACT_PCAT");

            entity.Property(e => e.ProductCategoryId)
                .HasColumnName("PRODUCT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrganizationPartyId)
                .HasColumnName("ORGANIZATION_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GlAccountTypeId)
                .HasColumnName("GL_ACCOUNT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GlAccountId)
                .HasColumnName("GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");


            entity.HasOne(d => d.GlAccount)
                .WithMany(p => p.ProductCategoryGlAccounts)
                .HasForeignKey(d => d.GlAccountId)
                .HasConstraintName("PRD_CT_GLACT_GLACT");

            entity.HasOne(d => d.GlAccountType)
                .WithMany(p => p.ProductCategoryGlAccounts)
                .HasForeignKey(d => d.GlAccountTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRD_CT_GLACT_TYPE");

            entity.HasOne(d => d.OrganizationParty)
                .WithMany(p => p.ProductCategoryGlAccounts)
                .HasForeignKey(d => d.OrganizationPartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRD_CT_GLACT_PRTY");

            entity.HasOne(d => d.ProductCategory)
                .WithMany(p => p.ProductCategoryGlAccounts)
                .HasForeignKey(d => d.ProductCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRD_CT_GLACT_PCAT");
        });

        modelBuilder.Entity<ProductCategoryLink>(entity =>
        {
            entity.HasKey(e => new { e.ProductCategoryId, e.LinkSeqId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PRODUCT_CATEGORY_LINK");


            entity.HasIndex(e => e.LinkTypeEnumId)
                .HasName("PROD_CLNK_LKTPENM");

            entity.HasIndex(e => e.ProductCategoryId)
                .HasName("PROD_CLNK_CATEGORY");

            entity.Property(e => e.ProductCategoryId)
                .HasColumnName("PRODUCT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.LinkSeqId)
                .HasColumnName("LINK_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DetailSubScreen)
                .HasColumnName("DETAIL_SUB_SCREEN")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.DetailText)
                .HasColumnName("DETAIL_TEXT")
                .HasColumnType("longtext");

            entity.Property(e => e.ImageTwoUrl)
                .HasColumnName("IMAGE_TWO_URL")
                .HasColumnType("varchar(2000)");

            entity.Property(e => e.ImageUrl)
                .HasColumnName("IMAGE_URL")
                .HasColumnType("varchar(2000)");


            entity.Property(e => e.LinkInfo)
                .HasColumnName("LINK_INFO")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.LinkTypeEnumId)
                .HasColumnName("LINK_TYPE_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.TitleText)
                .HasColumnName("TITLE_TEXT")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.LinkTypeEnum)
                .WithMany(p => p.ProductCategoryLinks)
                .HasForeignKey(d => d.LinkTypeEnumId)
                .HasConstraintName("PROD_CLNK_LKTPENM");

            entity.HasOne(d => d.ProductCategory)
                .WithMany(p => p.ProductCategoryLinks)
                .HasForeignKey(d => d.ProductCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_CLNK_CATEGORY");
        });

        modelBuilder.Entity<ProductCategoryMember>(entity =>
        {
            entity.HasKey(e => new { e.ProductCategoryId, e.ProductId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PRODUCT_CATEGORY_MEMBER");


            entity.HasIndex(e => e.ProductCategoryId)
                .HasName("PRD_CMBR_PCT");

            entity.HasIndex(e => e.ProductId)
                .HasName("PROD_CMBR_PRODUCT");

            entity.Property(e => e.ProductCategoryId)
                .HasColumnName("PRODUCT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ProductCategory)
                .WithMany(p => p.ProductCategoryMembers)
                .HasForeignKey(d => d.ProductCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_CMBR_CATEGORY");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductCategoryMembers)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_CMBR_PRODUCT");
        });

        modelBuilder.Entity<ProductCategoryRole>(entity =>
        {
            entity.HasKey(e => new { e.ProductCategoryId, e.PartyId, e.RoleTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PRODUCT_CATEGORY_ROLE");


            entity.HasIndex(e => e.ProductCategoryId)
                .HasName("PROD_CRLE_CATEGORY");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("PROD_CRLE_PTYRLE");

            entity.Property(e => e.ProductCategoryId)
                .HasColumnName("PRODUCT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ProductCategory)
                .WithMany(p => p.ProductCategoryRoles)
                .HasForeignKey(d => d.ProductCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_CRLE_CATEGORY");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.ProductCategoryRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_CRLE_PTYRLE");
        });

        modelBuilder.Entity<ProductCategoryRollup>(entity =>
        {
            entity.HasKey(e => new { e.ProductCategoryId, e.ParentProductCategoryId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PRODUCT_CATEGORY_ROLLUP");


            entity.HasIndex(e => e.ParentProductCategoryId)
                .HasName("PRDCR_PARPC");

            entity.HasIndex(e => e.ProductCategoryId)
                .HasName("PROD_CRLP_CURRENT");

            entity.Property(e => e.ProductCategoryId)
                .HasColumnName("PRODUCT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ParentProductCategoryId)
                .HasColumnName("PARENT_PRODUCT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ParentProductCategory)
                .WithMany(p => p.ProductCategoryRollupParentProductCategories)
                .HasForeignKey(d => d.ParentProductCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_CRLP_PARENT");

            entity.HasOne(d => d.ProductCategory)
                .WithMany(p => p.ProductCategoryRollupProductCategories)
                .HasForeignKey(d => d.ProductCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_CRLP_CURRENT");
        });

        modelBuilder.Entity<ProductCategoryType>(entity =>
        {
            entity.ToTable("PRODUCT_CATEGORY_TYPE");

            entity.HasIndex(e => e.ParentTypeId)
                .HasName("PROD_CTGRY_TYPEPAR");

            entity.Property(e => e.ProductCategoryTypeId)
                .HasColumnName("PRODUCT_CATEGORY_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");

            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("PROD_CTGRY_TYPEPAR")
                .IsRequired(false);
        });

        modelBuilder.Entity<ProductCategoryTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.ProductCategoryTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PRODUCT_CATEGORY_TYPE_ATTR");


            entity.HasIndex(e => e.ProductCategoryTypeId)
                .HasName("PROD_CTGRY_TATTR");

            entity.Property(e => e.ProductCategoryTypeId)
                .HasColumnName("PRODUCT_CATEGORY_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.ProductCategoryType)
                .WithMany(p => p.ProductCategoryTypeAttrs)
                .HasForeignKey(d => d.ProductCategoryTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_CTGRY_TATTR");
        });

        modelBuilder.Entity<ProductConfig>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.ConfigItemId, e.SequenceNum, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PRODUCT_CONFIG");

            entity.HasIndex(e => e.ConfigItemId)
                .HasName("PROD_CONF_ITEM");


            entity.HasIndex(e => e.ProductId)
                .HasName("PROD_CONF_PROD");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.ConfigItemId)
                .HasColumnName("CONFIG_ITEM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ConfigTypeId)
                .HasColumnName("CONFIG_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DefaultConfigOptionId)
                .HasColumnName("DEFAULT_CONFIG_OPTION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.IsMandatory)
                .HasColumnName("IS_MANDATORY")
                .HasColumnType("char(1)");


            entity.Property(e => e.LongDescription)
                .HasColumnName("LONG_DESCRIPTION")
                .HasColumnType("longtext");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ConfigItem)
                .WithMany(p => p.ProductConfigs)
                .HasForeignKey(d => d.ConfigItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_CONF_ITEM");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductConfigs)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_CONF_PROD");
        });

        modelBuilder.Entity<ProductConfigConfig>(entity =>
        {
            entity.HasKey(e => new { e.ConfigId, e.ConfigItemId, e.ConfigOptionId, e.SequenceNum })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PRODUCT_CONFIG_CONFIG");

            entity.HasIndex(e => e.ConfigItemId)
                .HasName("PROD_CONFC_ITEM");


            entity.HasIndex(e => new { e.ConfigItemId, e.ConfigOptionId })
                .HasName("PROD_CONFC_OPTN");

            entity.Property(e => e.ConfigId)
                .HasColumnName("CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ConfigItemId)
                .HasColumnName("CONFIG_ITEM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ConfigOptionId)
                .HasColumnName("CONFIG_OPTION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.ConfigItem)
                .WithMany(p => p.ProductConfigConfigs)
                .HasForeignKey(d => d.ConfigItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_CONFC_ITEM");

            entity.HasOne(d => d.Config)
                .WithMany(p => p.ProductConfigConfigs)
                .HasForeignKey(d => new { d.ConfigItemId, d.ConfigOptionId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_CONFC_OPTN");
        });

        modelBuilder.Entity<ProductConfigItem>(entity =>
        {
            entity.HasKey(e => e.ConfigItemId)
                .HasName("PRIMARY");

            entity.ToTable("PRODUCT_CONFIG_ITEM");


            entity.Property(e => e.ConfigItemId)
                .HasColumnName("CONFIG_ITEM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ConfigItemName)
                .HasColumnName("CONFIG_ITEM_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.ConfigItemTypeId)
                .HasColumnName("CONFIG_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ImageUrl)
                .HasColumnName("IMAGE_URL")
                .HasColumnType("varchar(2000)");


            entity.Property(e => e.LongDescription)
                .HasColumnName("LONG_DESCRIPTION")
                .HasColumnType("longtext");
        });

        modelBuilder.Entity<ProductConfigOption>(entity =>
        {
            entity.HasKey(e => new { e.ConfigItemId, e.ConfigOptionId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PRODUCT_CONFIG_OPTION");

            entity.HasIndex(e => e.ConfigItemId)
                .HasName("PROD_OPTN_ITEM");


            entity.Property(e => e.ConfigItemId)
                .HasColumnName("CONFIG_ITEM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ConfigOptionId)
                .HasColumnName("CONFIG_OPTION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ConfigOptionName)
                .HasColumnName("CONFIG_OPTION_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ConfigItem)
                .WithMany(p => p.ProductConfigOptions)
                .HasForeignKey(d => d.ConfigItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_OPTN_ITEM");
        });

        modelBuilder.Entity<ProductConfigOptionIactn>(entity =>
        {
            entity.HasKey(e => new
                    { e.ConfigItemId, e.ConfigOptionId, e.ConfigItemIdTo, e.ConfigOptionIdTo, e.SequenceNum })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0 });

            entity.ToTable("PRODUCT_CONFIG_OPTION_IACTN");

            entity.HasIndex(e => e.ConfigItemId)
                .HasName("PROD_OPTIA_ITEM");

            entity.HasIndex(e => e.ConfigItemIdTo)
                .HasName("PROD_OPTIA_ITMT");


            entity.HasIndex(e => new { e.ConfigItemId, e.ConfigOptionId })
                .HasName("PROD_OPTIA_OPTN");

            entity.HasIndex(e => new { e.ConfigItemIdTo, e.ConfigOptionIdTo })
                .HasName("PROD_OPTIA_OPTT");

            entity.Property(e => e.ConfigItemId)
                .HasColumnName("CONFIG_ITEM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ConfigOptionId)
                .HasColumnName("CONFIG_OPTION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ConfigItemIdTo)
                .HasColumnName("CONFIG_ITEM_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ConfigOptionIdTo)
                .HasColumnName("CONFIG_OPTION_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ConfigIactnTypeId)
                .HasColumnName("CONFIG_IACTN_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.ConfigItem)
                .WithMany(p => p.ProductConfigOptionIactnConfigItems)
                .HasForeignKey(d => d.ConfigItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_OPTIA_ITEM");

            entity.HasOne(d => d.ConfigItemIdToNavigation)
                .WithMany(p => p.ProductConfigOptionIactnConfigItemIdToNavigations)
                .HasForeignKey(d => d.ConfigItemIdTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_OPTIA_ITMT");

            entity.HasOne(d => d.Config)
                .WithMany(p => p.ProductConfigOptionIactnConfigs)
                .HasForeignKey(d => new { d.ConfigItemId, d.ConfigOptionId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_OPTIA_OPTN");

            entity.HasOne(d => d.ConfigNavigation)
                .WithMany(p => p.ProductConfigOptionIactnConfigNavigations)
                .HasForeignKey(d => new { d.ConfigItemIdTo, d.ConfigOptionIdTo })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_OPTIA_OPTT");
        });

        modelBuilder.Entity<ProductConfigProduct>(entity =>
        {
            entity.HasKey(e => new { e.ConfigItemId, e.ConfigOptionId, e.ProductId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PRODUCT_CONFIG_PRODUCT");

            entity.HasIndex(e => e.ConfigItemId)
                .HasName("PROD_CONFP_ITEM");


            entity.HasIndex(e => e.ProductId)
                .HasName("PROD_CONFP_PROD");

            entity.HasIndex(e => new { e.ConfigItemId, e.ConfigOptionId })
                .HasName("PROD_CONFP_OPTN");

            entity.Property(e => e.ConfigItemId)
                .HasColumnName("CONFIG_ITEM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ConfigOptionId)
                .HasColumnName("CONFIG_OPTION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.ConfigItem)
                .WithMany(p => p.ProductConfigProducts)
                .HasForeignKey(d => d.ConfigItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_CONFP_ITEM");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductConfigProducts)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_CONFP_PROD");

            entity.HasOne(d => d.Config)
                .WithMany(p => p.ProductConfigProducts)
                .HasForeignKey(d => new { d.ConfigItemId, d.ConfigOptionId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_CONFP_OPTN");
        });

        modelBuilder.Entity<ProductConfigStat>(entity =>
        {
            entity.HasKey(e => new { e.ConfigId, e.ProductId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PRODUCT_CONFIG_STATS");


            entity.HasIndex(e => e.ProductId)
                .HasName("PROD_CONFS_PROD");

            entity.Property(e => e.ConfigId)
                .HasColumnName("CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.ConfigTypeId)
                .HasColumnName("CONFIG_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.NumOfConfs)
                .HasColumnName("NUM_OF_CONFS")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductConfigStats)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_CONFS_PROD");
        });

        modelBuilder.Entity<ProductContent>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.ContentId, e.ProductContentTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PRODUCT_CONTENT");

            entity.HasIndex(e => e.ContentId)
                .HasName("PROD_CNT_CNT");


            entity.HasIndex(e => e.ProductContentTypeId)
                .HasName("PROD_CNT_TYPE");

            entity.HasIndex(e => e.ProductId)
                .HasName("PROD_CNT_PROD");

            entity.HasIndex(e => e.UseRoleTypeId)
                .HasName("PROD_CNT_URT");

            entity.HasIndex(e => e.UseTimeUomId)
                .HasName("PROD_CNT_UTU");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductContentTypeId)
                .HasColumnName("PRODUCT_CONTENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PurchaseFromDate)
                .HasColumnName("PURCHASE_FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.PurchaseThruDate)
                .HasColumnName("PURCHASE_THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.UseCountLimit)
                .HasColumnName("USE_COUNT_LIMIT")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.UseRoleTypeId)
                .HasColumnName("USE_ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.UseTime)
                .HasColumnName("USE_TIME")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.UseTimeUomId)
                .HasColumnName("USE_TIME_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.ProductContents)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_CNT_CNT");

            entity.HasOne(d => d.ProductContentType)
                .WithMany(p => p.ProductContents)
                .HasForeignKey(d => d.ProductContentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_CNT_TYPE");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductContents)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_CNT_PROD");

            entity.HasOne(d => d.UseRoleType)
                .WithMany(p => p.ProductContents)
                .HasForeignKey(d => d.UseRoleTypeId)
                .HasConstraintName("PROD_CNT_URT");

            entity.HasOne(d => d.UseTimeUom)
                .WithMany(p => p.ProductContents)
                .HasForeignKey(d => d.UseTimeUomId)
                .HasConstraintName("PROD_CNT_UTU");
        });

        modelBuilder.Entity<ProductContentType>(entity =>
        {
            entity.ToTable("PRODUCT_CONTENT_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("PRDCT_TYP_PARENT");

            entity.Property(e => e.ProductContentTypeId)
                .HasColumnName("PRODUCT_CONTENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("PRDCT_TYP_PARENT");
        });

        modelBuilder.Entity<ProductCostComponentCalc>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.CostComponentTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PRODUCT_COST_COMPONENT_CALC");

            entity.HasIndex(e => e.CostComponentCalcId)
                .HasName("PR_COS_CCC");

            entity.HasIndex(e => e.CostComponentTypeId)
                .HasName("PR_COS_CCT");


            entity.HasIndex(e => e.ProductId)
                .HasName("PR_COS_COMPCALC");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.CostComponentTypeId)
                .HasColumnName("COST_COMPONENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CostComponentCalcId)
                .HasColumnName("COST_COMPONENT_CALC_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.CostComponentCalc)
                .WithMany(p => p.ProductCostComponentCalcs)
                .HasForeignKey(d => d.CostComponentCalcId)
                .HasConstraintName("PR_COS_CCC");

            entity.HasOne(d => d.CostComponentType)
                .WithMany(p => p.ProductCostComponentCalcs)
                .HasForeignKey(d => d.CostComponentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PR_COS_CCT");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductCostComponentCalcs)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PR_COS_COMPCALC");
        });

        modelBuilder.Entity<ProductFacility>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.FacilityId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PRODUCT_FACILITY");


            entity.HasIndex(e => e.FacilityId)
                .HasName("PROD_FAC_FAC");


            entity.HasIndex(e => e.ProductId)
                .HasName("PROD_FAC_PROD");

            entity.HasIndex(e => e.ReplenishMethodEnumId)
                .HasName("PROD_FAC_REP");

            entity.HasIndex(e => e.RequirementMethodEnumId)
                .HasName("PROD_FAC_REQ");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DaysToShip)
                .HasColumnName("DAYS_TO_SHIP")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.LastInventoryCount)
                .HasColumnName("LAST_INVENTORY_COUNT")
                .HasColumnType("decimal(18,6)");


            entity.Property(e => e.MinimumStock)
                .HasColumnName("MINIMUM_STOCK")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReorderQuantity)
                .HasColumnName("REORDER_QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReplenishMethodEnumId)
                .HasColumnName("REPLENISH_METHOD_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RequirementMethodEnumId)
                .HasColumnName("REQUIREMENT_METHOD_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Facility)
                .WithMany(p => p.ProductFacilities)
                .HasForeignKey(d => d.FacilityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_FAC_FAC");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductFacilities)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_FAC_PROD");

            entity.HasOne(d => d.ReplenishMethodEnum)
                .WithMany(p => p.ProductFacilityReplenishMethodEnums)
                .HasForeignKey(d => d.ReplenishMethodEnumId)
                .HasConstraintName("PROD_FAC_REP");

            entity.HasOne(d => d.RequirementMethodEnum)
                .WithMany(p => p.ProductFacilityRequirementMethodEnums)
                .HasForeignKey(d => d.RequirementMethodEnumId)
                .HasConstraintName("PROD_FAC_REQ");
        });

        modelBuilder.Entity<ProductFacilityAssoc>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.FacilityId, e.FacilityIdTo, e.FacilityAssocTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0 });

            entity.ToTable("PRODUCT_FACILITY_ASSOC");


            entity.HasIndex(e => e.FacilityAssocTypeId)
                .HasName("PRFACASSOC_TYPE");

            entity.HasIndex(e => e.FacilityId)
                .HasName("PRFACASSOC_FAC");

            entity.HasIndex(e => e.FacilityIdTo)
                .HasName("PRFACASSOC_FACTO");


            entity.HasIndex(e => e.ProductId)
                .HasName("PRFACASSOC_PRO");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.FacilityIdTo)
                .HasColumnName("FACILITY_ID_TO");

            entity.Property(e => e.FacilityAssocTypeId)
                .HasColumnName("FACILITY_ASSOC_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.TransitTime)
                .HasColumnName("TRANSIT_TIME")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.FacilityAssocType)
                .WithMany(p => p.ProductFacilityAssocs)
                .HasForeignKey(d => d.FacilityAssocTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRFACASSOC_TYPE");

            entity.HasOne(d => d.Facility)
                .WithMany(p => p.ProductFacilityAssocFacilities)
                .HasForeignKey(d => d.FacilityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRFACASSOC_FAC");

            entity.HasOne(d => d.FacilityIdToNavigation)
                .WithMany(p => p.ProductFacilityAssocFacilityIdToNavigations)
                .HasForeignKey(d => d.FacilityIdTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRFACASSOC_FACTO");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductFacilityAssocs)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRFACASSOC_PRO");
        });

        modelBuilder.Entity<ProductFacilityLocation>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.FacilityId, e.LocationSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PRODUCT_FACILITY_LOCATION");


            entity.HasIndex(e => e.ProductId)
                .HasName("PROD_FCL_PROD");

            entity.HasIndex(e => new { e.FacilityId, e.LocationSeqId })
                .HasName("PROD_FCL_FCL");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.LocationSeqId)
                .HasColumnName("LOCATION_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.MinimumStock)
                .HasColumnName("MINIMUM_STOCK")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.MoveQuantity)
                .HasColumnName("MOVE_QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductFacilityLocations)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_FCL_PROD");

            entity.HasOne(d => d.FacilityLocation)
                .WithMany(p => p.ProductFacilityLocations)
                .HasForeignKey(d => new { d.FacilityId, d.LocationSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_FCL_FCL");
        });

        modelBuilder.Entity<ProductFeature>(entity =>
        {
            entity.ToTable("PRODUCT_FEATURE");


            entity.HasIndex(e => e.ProductFeatureCategoryId)
                .HasName("PROD_FEAT_CATEGORY");

            entity.HasIndex(e => e.ProductFeatureTypeId)
                .HasName("PROD_FEAT_TYPE");

            entity.HasIndex(e => e.UomId)
                .HasName("PROD_FEAT_UOM");

            entity.Property(e => e.ProductFeatureId)
                .HasColumnName("PRODUCT_FEATURE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Abbrev)
                .HasColumnName("ABBREV")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DefaultAmount)
                .HasColumnName("DEFAULT_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.DefaultSequenceNum)
                .HasColumnName("DEFAULT_SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.IdCode)
                .HasColumnName("ID_CODE")
                .HasColumnType("varchar(60)");


            entity.Property(e => e.NumberSpecified)
                .HasColumnName("NUMBER_SPECIFIED")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ProductFeatureCategoryId)
                .HasColumnName("PRODUCT_FEATURE_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductFeatureTypeId)
                .HasColumnName("PRODUCT_FEATURE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.UomId)
                .HasColumnName("UOM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ProductFeatureCategory)
                .WithMany(p => p.ProductFeatures)
                .HasForeignKey(d => d.ProductFeatureCategoryId)
                .HasConstraintName("PROD_FEAT_CATEGORY");

            entity.HasOne(d => d.ProductFeatureType)
                .WithMany(p => p.ProductFeatures)
                .HasForeignKey(d => d.ProductFeatureTypeId)
                .HasConstraintName("PROD_FEAT_TYPE");

            entity.HasOne(d => d.Uom)
                .WithMany(p => p.ProductFeatures)
                .HasForeignKey(d => d.UomId)
                .HasConstraintName("PROD_FEAT_UOM");
        });

        modelBuilder.Entity<ProductFeatureAppl>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.ProductFeatureId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PRODUCT_FEATURE_APPL");


            entity.HasIndex(e => e.ProductFeatureApplTypeId)
                .HasName("PROD_FAPPL_TYPE");

            entity.HasIndex(e => e.ProductFeatureId)
                .HasName("PROD_FAPPL_FEATURE");

            entity.HasIndex(e => e.ProductId)
                .HasName("PROD_FAPPL_PRODUCT");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.ProductFeatureId)
                .HasColumnName("PRODUCT_FEATURE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ProductFeatureApplTypeId)
                .HasColumnName("PRODUCT_FEATURE_APPL_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RecurringAmount)
                .HasColumnName("RECURRING_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ProductFeatureApplType)
                .WithMany(p => p.ProductFeatureAppls)
                .HasForeignKey(d => d.ProductFeatureApplTypeId)
                .HasConstraintName("PROD_FAPPL_TYPE");

            entity.HasOne(d => d.ProductFeature)
                .WithMany(p => p.ProductFeatureAppls)
                .HasForeignKey(d => d.ProductFeatureId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_FAPPL_FEATURE");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductFeatureAppls)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_FAPPL_PRODUCT");
        });

        modelBuilder.Entity<ProductFeatureApplAttr>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.ProductFeatureId, e.FromDate, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PRODUCT_FEATURE_APPL_ATTR");


            entity.HasIndex(e => e.ProductFeatureId)
                .HasName("PROD_FAPPA_FEATURE");

            entity.HasIndex(e => e.ProductId)
                .HasName("PROD_FAPPA_PRODUCT");

            entity.HasIndex(e => new { e.ProductId, e.ProductFeatureId, e.FromDate })
                .HasName("PROD_FAPPA_FEATAPP");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.ProductFeatureId)
                .HasColumnName("PRODUCT_FEATURE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ProductFeature)
                .WithMany(p => p.ProductFeatureApplAttrs)
                .HasForeignKey(d => d.ProductFeatureId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_FAPPA_FEATURE");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductFeatureApplAttrs)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_FAPPA_PRODUCT");

            entity.HasOne(d => d.ProductFeatureAppl)
                .WithMany(p => p.ProductFeatureApplAttrs)
                .HasForeignKey(d => new { d.ProductId, d.ProductFeatureId, d.FromDate })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_FAPPA_FEATAPP");
        });

        modelBuilder.Entity<ProductFeatureApplType>(entity =>
        {
            entity.ToTable("PRODUCT_FEATURE_APPL_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("PROD_FAPPL_TYPPAR");

            entity.Property(e => e.ProductFeatureApplTypeId)
                .HasColumnName("PRODUCT_FEATURE_APPL_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("PROD_FAPPL_TYPPAR");
        });

        modelBuilder.Entity<ProductFeatureCatGrpAppl>(entity =>
        {
            entity.HasKey(e => new { e.ProductCategoryId, e.ProductFeatureGroupId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PRODUCT_FEATURE_CAT_GRP_APPL");


            entity.HasIndex(e => e.ProductCategoryId)
                .HasName("PROD_FCGAPL_CAT");

            entity.HasIndex(e => e.ProductFeatureGroupId)
                .HasName("PROD_FCGAPL_FGRP");

            entity.Property(e => e.ProductCategoryId)
                .HasColumnName("PRODUCT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductFeatureGroupId)
                .HasColumnName("PRODUCT_FEATURE_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ProductCategory)
                .WithMany(p => p.ProductFeatureCatGrpAppls)
                .HasForeignKey(d => d.ProductCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_FCGAPL_CAT");

            entity.HasOne(d => d.ProductFeatureGroup)
                .WithMany(p => p.ProductFeatureCatGrpAppls)
                .HasForeignKey(d => d.ProductFeatureGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_FCGAPL_FGRP");
        });

        modelBuilder.Entity<ProductFeatureCategory>(entity =>
        {
            entity.ToTable("PRODUCT_FEATURE_CATEGORY");


            entity.HasIndex(e => e.ParentCategoryId)
                .HasName("PROD_FEAT_CAT_PAR");

            entity.Property(e => e.ProductFeatureCategoryId)
                .HasColumnName("PRODUCT_FEATURE_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.ParentCategoryId)
                .HasColumnName("PARENT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentCategory)
                .WithMany(p => p.InverseParentCategory)
                .HasForeignKey(d => d.ParentCategoryId)
                .HasConstraintName("PROD_FEAT_CAT_PAR");
        });

        modelBuilder.Entity<ProductFeatureCategoryAppl>(entity =>
        {
            entity.HasKey(e => new { e.ProductCategoryId, e.ProductFeatureCategoryId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PRODUCT_FEATURE_CATEGORY_APPL");


            entity.HasIndex(e => e.ProductCategoryId)
                .HasName("PROD_FCAPPL_CAT");

            entity.HasIndex(e => e.ProductFeatureCategoryId)
                .HasName("PROD_FCAPPL_FCAT");

            entity.Property(e => e.ProductCategoryId)
                .HasColumnName("PRODUCT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductFeatureCategoryId)
                .HasColumnName("PRODUCT_FEATURE_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ProductCategory)
                .WithMany(p => p.ProductFeatureCategoryAppls)
                .HasForeignKey(d => d.ProductCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_FCAPPL_CAT");

            entity.HasOne(d => d.ProductFeatureCategory)
                .WithMany(p => p.ProductFeatureCategoryAppls)
                .HasForeignKey(d => d.ProductFeatureCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_FCAPPL_FCAT");
        });

        modelBuilder.Entity<ProductFeatureDataResource>(entity =>
        {
            entity.HasKey(e => new { e.DataResourceId, e.ProductFeatureId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PRODUCT_FEATURE_DATA_RESOURCE");


            entity.HasIndex(e => e.DataResourceId)
                .HasName("PFEAT_DR_DATRES");


            entity.HasIndex(e => e.ProductFeatureId)
                .HasName("PFEAT_DR_FEATURE");

            entity.Property(e => e.DataResourceId)
                .HasColumnName("DATA_RESOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductFeatureId)
                .HasColumnName("PRODUCT_FEATURE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.DataResource)
                .WithMany(p => p.ProductFeatureDataResources)
                .HasForeignKey(d => d.DataResourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PFEAT_DR_DATRES");

            entity.HasOne(d => d.ProductFeature)
                .WithMany(p => p.ProductFeatureDataResources)
                .HasForeignKey(d => d.ProductFeatureId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PFEAT_DR_FEATURE");
        });

        modelBuilder.Entity<ProductFeatureGroup>(entity =>
        {
            entity.ToTable("PRODUCT_FEATURE_GROUP");


            entity.Property(e => e.ProductFeatureGroupId)
                .HasColumnName("PRODUCT_FEATURE_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<ProductFeatureGroupAppl>(entity =>
        {
            entity.HasKey(e => new { e.ProductFeatureGroupId, e.ProductFeatureId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PRODUCT_FEATURE_GROUP_APPL");


            entity.HasIndex(e => e.ProductFeatureGroupId)
                .HasName("PROD_FGAPP_PRODUCT");

            entity.HasIndex(e => e.ProductFeatureId)
                .HasName("PROD_FGAPP_FEATURE");

            entity.Property(e => e.ProductFeatureGroupId)
                .HasColumnName("PRODUCT_FEATURE_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductFeatureId)
                .HasColumnName("PRODUCT_FEATURE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ProductFeatureGroup)
                .WithMany(p => p.ProductFeatureGroupAppls)
                .HasForeignKey(d => d.ProductFeatureGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_FGAPP_PRODUCT");

            entity.HasOne(d => d.ProductFeature)
                .WithMany(p => p.ProductFeatureGroupAppls)
                .HasForeignKey(d => d.ProductFeatureId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_FGAPP_FEATURE");
        });

        modelBuilder.Entity<ProductFeatureIactn>(entity =>
        {
            entity.HasKey(e => new { e.ProductFeatureId, e.ProductFeatureIdTo })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PRODUCT_FEATURE_IACTN");


            entity.HasIndex(e => e.ProductFeatureIactnTypeId)
                .HasName("PROD_FICTN_TYPE");

            entity.HasIndex(e => e.ProductFeatureId)
                .HasName("PROD_FICTN_MFEAT");

            entity.HasIndex(e => e.ProductFeatureIdTo)
                .HasName("PROD_FICTN_AFEAT");

            entity.Property(e => e.ProductFeatureId)
                .HasColumnName("PRODUCT_FEATURE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductFeatureIdTo)
                .HasColumnName("PRODUCT_FEATURE_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ProductFeatureIactnTypeId)
                .HasColumnName("PRODUCT_FEATURE_IACTN_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.HasOne(d => d.ProductFeatureIactnType)
                .WithMany(p => p.ProductFeatureIactns)
                .HasForeignKey(d => d.ProductFeatureIactnTypeId)
                .HasConstraintName("PROD_FICTN_TYPE");

            entity.HasOne(d => d.ProductFeature)
                .WithMany(p => p.ProductFeatureIactnProductFeatures)
                .HasForeignKey(d => d.ProductFeatureId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_FICTN_MFEAT");

            entity.HasOne(d => d.ProductFeatureIdToNavigation)
                .WithMany(p => p.ProductFeatureIactnProductFeatureIdToNavigations)
                .HasForeignKey(d => d.ProductFeatureIdTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_FICTN_AFEAT");
        });

        modelBuilder.Entity<ProductFeatureIactnType>(entity =>
        {
            entity.ToTable("PRODUCT_FEATURE_IACTN_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("PROD_FICTN_TYPPAR");

            entity.Property(e => e.ProductFeatureIactnTypeId)
                .HasColumnName("PRODUCT_FEATURE_IACTN_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("PROD_FICTN_TYPPAR");
        });

        modelBuilder.Entity<ProductFeaturePrice>(entity =>
        {
            entity.HasKey(e => new { e.ProductFeatureId, e.ProductPriceTypeId, e.CurrencyUomId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PRODUCT_FEATURE_PRICE");

            entity.HasIndex(e => e.CreatedByUserLogin)
                .HasName("PROD_F_PRICE_CBUL");


            entity.HasIndex(e => e.CurrencyUomId)
                .HasName("PROD_F_PRICE_CUOM");

            entity.HasIndex(e => e.LastModifiedByUserLogin)
                .HasName("PROD_F_PRICE_LMBUL");


            entity.HasIndex(e => e.ProductPriceTypeId)
                .HasName("PROD_F_PRICE_TYPE");

            entity.HasIndex(e => new { e.ProductFeatureId, e.CurrencyUomId })
                .HasName("PRD_FT_PRC_GENLKP");

            entity.Property(e => e.ProductFeatureId)
                .HasColumnName("PRODUCT_FEATURE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPriceTypeId)
                .HasColumnName("PRODUCT_PRICE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CurrencyUomId)
                .HasColumnName("CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedDate)
                .HasColumnName("CREATED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.LastModifiedDate)
                .HasColumnName("LAST_MODIFIED_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Price)
                .HasColumnName("PRICE")
                .HasColumnType("decimal(18,3)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.CreatedByUserLoginNavigation)
                .WithMany(p => p.ProductFeaturePriceCreatedByUserLoginNavigations)
                .HasForeignKey(d => d.CreatedByUserLogin)
                .HasConstraintName("PROD_F_PRICE_CBUL");

            entity.HasOne(d => d.CurrencyUom)
                .WithMany(p => p.ProductFeaturePrices)
                .HasForeignKey(d => d.CurrencyUomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_F_PRICE_CUOM");

            entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                .WithMany(p => p.ProductFeaturePriceLastModifiedByUserLoginNavigations)
                .HasForeignKey(d => d.LastModifiedByUserLogin)
                .HasConstraintName("PROD_F_PRICE_LMBUL");

            entity.HasOne(d => d.ProductPriceType)
                .WithMany(p => p.ProductFeaturePrices)
                .HasForeignKey(d => d.ProductPriceTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_F_PRICE_TYPE");
        });

        modelBuilder.Entity<ProductFeatureType>(entity =>
        {
            entity.ToTable("PRODUCT_FEATURE_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("PROD_FEAT_TYPPAR");

            entity.Property(e => e.ProductFeatureTypeId)
                .HasColumnName("PRODUCT_FEATURE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("PROD_FEAT_TYPPAR");
        });

        modelBuilder.Entity<ProductGeo>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.GeoId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PRODUCT_GEO");


            entity.HasIndex(e => e.GeoId)
                .HasName("PRDGEO_GEO");


            entity.HasIndex(e => e.ProductGeoEnumId)
                .HasName("PRDGEO_ENUM");

            entity.HasIndex(e => e.ProductId)
                .HasName("PRDGEO_PRODUCT");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.GeoId)
                .HasColumnName("GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.ProductGeoEnumId)
                .HasColumnName("PRODUCT_GEO_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Geo)
                .WithMany(p => p.ProductGeos)
                .HasForeignKey(d => d.GeoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDGEO_GEO");

            entity.HasOne(d => d.ProductGeoEnum)
                .WithMany(p => p.ProductGeos)
                .HasForeignKey(d => d.ProductGeoEnumId)
                .HasConstraintName("PRDGEO_ENUM");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductGeos)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDGEO_PRODUCT");
        });

        modelBuilder.Entity<ProductGlAccount>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.OrganizationPartyId, e.GlAccountTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PRODUCT_GL_ACCOUNT");


            entity.HasIndex(e => e.GlAccountId)
                .HasName("PROD_GLACT_GLACT");

            entity.HasIndex(e => e.GlAccountTypeId)
                .HasName("PROD_GLACT_TYPE");


            entity.HasIndex(e => e.OrganizationPartyId)
                .HasName("PROD_GLACT_PARTY");

            entity.HasIndex(e => e.ProductId)
                .HasName("PROD_GLACT_PROD");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.OrganizationPartyId)
                .HasColumnName("ORGANIZATION_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GlAccountTypeId)
                .HasColumnName("GL_ACCOUNT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GlAccountId)
                .HasColumnName("GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");


            entity.HasOne(d => d.GlAccount)
                .WithMany(p => p.ProductGlAccounts)
                .HasForeignKey(d => d.GlAccountId)
                .HasConstraintName("PROD_GLACT_GLACT");

            entity.HasOne(d => d.GlAccountType)
                .WithMany(p => p.ProductGlAccounts)
                .HasForeignKey(d => d.GlAccountTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_GLACT_TYPE");

            entity.HasOne(d => d.OrganizationParty)
                .WithMany(p => p.ProductGlAccounts)
                .HasForeignKey(d => d.OrganizationPartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_GLACT_PARTY");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductGlAccounts)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_GLACT_PROD");
        });

        modelBuilder.Entity<ProductGroupOrder>(entity =>
        {
            entity.HasKey(e => e.GroupOrderId)
                .HasName("PRIMARY");

            entity.ToTable("PRODUCT_GROUP_ORDER");


            entity.HasIndex(e => e.JobId)
                .HasName("GROUP_ORDER_JOB");


            entity.HasIndex(e => e.ProductId)
                .HasName("PROD_GROUP_ORDER");

            entity.HasIndex(e => e.StatusId)
                .HasName("GROUP_ORDER_STATUS");

            entity.Property(e => e.GroupOrderId)
                .HasColumnName("GROUP_ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.JobId)
                .HasColumnName("JOB_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.ReqOrderQty)
                .HasColumnName("REQ_ORDER_QTY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.SoldOrderQty)
                .HasColumnName("SOLD_ORDER_QTY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Job)
                .WithMany(p => p.ProductGroupOrders)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("GROUP_ORDER_JOB");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductGroupOrders)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("PROD_GROUP_ORDER");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.ProductGroupOrders)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("GROUP_ORDER_STATUS");
        });

        modelBuilder.Entity<ProductKeywordNew>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.Keyword, e.KeywordTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PRODUCT_KEYWORD_NEW");


            entity.HasIndex(e => e.Keyword)
                .HasName("PROD_KWD_KWD_NEW");

            entity.HasIndex(e => e.KeywordTypeId)
                .HasName("PROD_KWD_TYPE");


            entity.HasIndex(e => e.ProductId)
                .HasName("PROD_KWD_PROD_NEW");

            entity.HasIndex(e => e.StatusId)
                .HasName("PROD_KWD_STTS");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.Keyword)
                .HasColumnName("KEYWORD")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.KeywordTypeId)
                .HasColumnName("KEYWORD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.RelevancyWeight)
                .HasColumnName("RELEVANCY_WEIGHT")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.KeywordType)
                .WithMany(p => p.ProductKeywordNews)
                .HasForeignKey(d => d.KeywordTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_KWD_TYPE");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductKeywordNews)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_KWD_PROD_NEW");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.ProductKeywordNews)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("PROD_KWD_STTS");
        });

        modelBuilder.Entity<ProductMaint>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.ProductMaintSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PRODUCT_MAINT");


            entity.HasIndex(e => e.IntervalMeterTypeId)
                .HasName("PRODMNT_PDMTTYP");

            entity.HasIndex(e => e.IntervalUomId)
                .HasName("PRODMNT_INTUOM");


            entity.HasIndex(e => e.MaintTemplateWorkEffortId)
                .HasName("PRODMNT_TPLHWE");

            entity.HasIndex(e => e.ProductId)
                .HasName("PRODMNT_PROD");

            entity.HasIndex(e => e.ProductMaintTypeId)
                .HasName("PRODMNT_MNTTYP");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.ProductMaintSeqId)
                .HasColumnName("PRODUCT_MAINT_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.IntervalMeterTypeId)
                .HasColumnName("INTERVAL_METER_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.IntervalQuantity)
                .HasColumnName("INTERVAL_QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.IntervalUomId)
                .HasColumnName("INTERVAL_UOM_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.MaintName)
                .HasColumnName("MAINT_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.MaintTemplateWorkEffortId)
                .HasColumnName("MAINT_TEMPLATE_WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductMaintTypeId)
                .HasColumnName("PRODUCT_MAINT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RepeatCount)
                .HasColumnName("REPEAT_COUNT")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.IntervalMeterType)
                .WithMany(p => p.ProductMaints)
                .HasForeignKey(d => d.IntervalMeterTypeId)
                .HasConstraintName("PRODMNT_PDMTTYP");

            entity.HasOne(d => d.IntervalUom)
                .WithMany(p => p.ProductMaints)
                .HasForeignKey(d => d.IntervalUomId)
                .HasConstraintName("PRODMNT_INTUOM");

            entity.HasOne(d => d.MaintTemplateWorkEffort)
                .WithMany(p => p.ProductMaints)
                .HasForeignKey(d => d.MaintTemplateWorkEffortId)
                .HasConstraintName("PRODMNT_TPLHWE");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductMaints)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRODMNT_PROD");

            entity.HasOne(d => d.ProductMaintType)
                .WithMany(p => p.ProductMaints)
                .HasForeignKey(d => d.ProductMaintTypeId)
                .HasConstraintName("PRODMNT_MNTTYP");
        });

        modelBuilder.Entity<ProductMaintType>(entity =>
        {
            entity.ToTable("PRODUCT_MAINT_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("PRODMNT_TYPE_PAR");

            entity.Property(e => e.ProductMaintTypeId)
                .HasColumnName("PRODUCT_MAINT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("PRODMNT_TYPE_PAR");
        });

        modelBuilder.Entity<ProductManufacturingRule>(entity =>
        {
            entity.HasKey(e => e.RuleId)
                .HasName("PRIMARY");

            entity.ToTable("PRODUCT_MANUFACTURING_RULE");


            entity.HasIndex(e => e.ProductFeature)
                .HasName("PRODUCT_FEAT");

            entity.HasIndex(e => e.ProductId)
                .HasName("PRODUCT_PARENT");

            entity.HasIndex(e => e.ProductIdFor)
                .HasName("PRODUCT_FOR");

            entity.HasIndex(e => e.ProductIdIn)
                .HasName("PRODUCT_IN");

            entity.HasIndex(e => e.ProductIdInSubst)
                .HasName("PRODUCT_SUBST");

            entity.Property(e => e.RuleId)
                .HasColumnName("RULE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ProductFeature)
                .HasColumnName("PRODUCT_FEATURE")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.ProductIdFor)
                .HasColumnName("PRODUCT_ID_FOR")
                .HasColumnType("char(36)");

            entity.Property(e => e.ProductIdIn)
                .HasColumnName("PRODUCT_ID_IN")
                .HasColumnType("char(36)");

            entity.Property(e => e.ProductIdInSubst)
                .HasColumnName("PRODUCT_ID_IN_SUBST")
                .HasColumnType("char(36)");

            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

            entity.Property(e => e.RuleOperator)
                .HasColumnName("RULE_OPERATOR")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RuleSeqId)
                .HasColumnName("RULE_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ProductFeatureNavigation)
                .WithMany(p => p.ProductManufacturingRules)
                .HasForeignKey(d => d.ProductFeature)
                .HasConstraintName("PRODUCT_FEAT");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductManufacturingRuleProducts)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("PRODUCT_PARENT");

            entity.HasOne(d => d.ProductIdForNavigation)
                .WithMany(p => p.ProductManufacturingRuleProductIdForNavigations)
                .HasForeignKey(d => d.ProductIdFor)
                .HasConstraintName("PRODUCT_FOR");

            entity.HasOne(d => d.ProductIdInNavigation)
                .WithMany(p => p.ProductManufacturingRuleProductIdInNavigations)
                .HasForeignKey(d => d.ProductIdIn)
                .HasConstraintName("PRODUCT_IN");

            entity.HasOne(d => d.ProductIdInSubstNavigation)
                .WithMany(p => p.ProductManufacturingRuleProductIdInSubstNavigations)
                .HasForeignKey(d => d.ProductIdInSubst)
                .HasConstraintName("PRODUCT_SUBST");
        });

        modelBuilder.Entity<ProductMeter>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.ProductMeterTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PRODUCT_METER");


            entity.HasIndex(e => e.MeterUomId)
                .HasName("PRODMTR_MTRUOM");

            entity.HasIndex(e => e.ProductId)
                .HasName("PRODMTR_PROD");

            entity.HasIndex(e => e.ProductMeterTypeId)
                .HasName("PRODMTR_MTRTYP");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.ProductMeterTypeId)
                .HasColumnName("PRODUCT_METER_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.MeterName)
                .HasColumnName("METER_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.MeterUomId)
                .HasColumnName("METER_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.MeterUom)
                .WithMany(p => p.ProductMeters)
                .HasForeignKey(d => d.MeterUomId)
                .HasConstraintName("PRODMTR_MTRUOM");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductMeters)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRODMTR_PROD");

            entity.HasOne(d => d.ProductMeterType)
                .WithMany(p => p.ProductMeters)
                .HasForeignKey(d => d.ProductMeterTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRODMTR_MTRTYP");
        });

        modelBuilder.Entity<ProductMeterType>(entity =>
        {
            entity.ToTable("PRODUCT_METER_TYPE");


            entity.HasIndex(e => e.DefaultUomId)
                .HasName("PRODMTRTP_DUOM");


            entity.Property(e => e.ProductMeterTypeId)
                .HasColumnName("PRODUCT_METER_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DefaultUomId)
                .HasColumnName("DEFAULT_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.DefaultUom)
                .WithMany(p => p.ProductMeterTypes)
                .HasForeignKey(d => d.DefaultUomId)
                .HasConstraintName("PRODMTRTP_DUOM");
        });

        modelBuilder.Entity<ProductOrderItem>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.OrderItemSeqId, e.EngagementId, e.EngagementItemSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PRODUCT_ORDER_ITEM");


            entity.HasIndex(e => e.EngagementId)
                .HasName("PROD_OITEM_ENOHDR");


            entity.HasIndex(e => e.OrderId)
                .HasName("PROD_OITEM_OHDR");

            entity.HasIndex(e => e.ProductId)
                .HasName("PROD_OITEM_PROD");

            entity.HasIndex(e => new { e.EngagementId, e.EngagementItemSeqId })
                .HasName("PROD_OITEM_ENOITM");

            entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId })
                .HasName("PROD_OITEM_OITEM");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.EngagementId)
                .HasColumnName("ENGAGEMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.EngagementItemSeqId)
                .HasColumnName("ENGAGEMENT_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.HasOne(d => d.Engagement)
                .WithMany(p => p.ProductOrderItemEngagements)
                .HasForeignKey(d => d.EngagementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_OITEM_ENOHDR");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.ProductOrderItemOrders)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_OITEM_OHDR");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductOrderItems)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("PROD_OITEM_PROD");

            entity.HasOne(d => d.EngagementI)
                .WithMany(p => p.ProductOrderItemEngagementIs)
                .HasForeignKey(d => new { d.EngagementId, d.EngagementItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_OITEM_ENOITM");

            entity.HasOne(d => d.OrderI)
                .WithMany(p => p.ProductOrderItemOrderIs)
                .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_OITEM_OITEM");
        });

        modelBuilder.Entity<ProductPaymentMethodType>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.PaymentMethodTypeId, e.ProductPricePurposeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PRODUCT_PAYMENT_METHOD_TYPE");


            entity.HasIndex(e => e.PaymentMethodTypeId)
                .HasName("PROD_PMT_PMT");

            entity.HasIndex(e => e.ProductId)
                .HasName("PROD_PMT_PROD");

            entity.HasIndex(e => e.ProductPricePurposeId)
                .HasName("PROD_PMT_PPRP");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.PaymentMethodTypeId)
                .HasColumnName("PAYMENT_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPricePurposeId)
                .HasColumnName("PRODUCT_PRICE_PURPOSE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.PaymentMethodType)
                .WithMany(p => p.ProductPaymentMethodTypes)
                .HasForeignKey(d => d.PaymentMethodTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_PMT_PMT");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductPaymentMethodTypes)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_PMT_PROD");

            entity.HasOne(d => d.ProductPricePurpose)
                .WithMany(p => p.ProductPaymentMethodTypes)
                .HasForeignKey(d => d.ProductPricePurposeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_PMT_PPRP");
        });

        modelBuilder.Entity<ProductPrice>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.ProductPriceTypeId, e.CurrencyUomId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0, 0 });


            entity.ToTable("PRODUCT_PRICE");

            entity.HasIndex(e => e.CreatedByUserLogin)
                .HasName("PROD_PRICE_CBUL");


            entity.HasIndex(e => e.CurrencyUomId)
                .HasName("PROD_PRICE_CUOM");

            entity.HasIndex(e => e.CustomPriceCalcService)
                .HasName("PROD_PRICE_CMET");

            entity.HasIndex(e => e.LastModifiedByUserLogin)
                .HasName("PROD_PRICE_LMBUL");


            entity.HasIndex(e => e.ProductId)
                .HasName("PROD_PRICE_PROD");

            entity.HasIndex(e => e.ProductPricePurposeId)
                .HasName("PROD_PRICE_PURP");

            entity.HasIndex(e => e.ProductPriceTypeId)
                .HasName("PROD_PRICE_TYPE");

            entity.HasIndex(e => e.ProductStoreGroupId)
                .HasName("PROD_PRICE_PSTG");

            entity.HasIndex(e => e.TaxAuthGeoId)
                .HasName("PROD_PRC_TAXGEO");

            entity.HasIndex(e => e.TaxAuthPartyId)
                .HasName("PROD_PRC_TAXPTY");

            entity.HasIndex(e => e.TermUomId)
                .HasName("PROD_PRICE_TUOM");

            entity.HasIndex(e => new
                    { e.ProductId, e.ProductPricePurposeId, e.CurrencyUomId, e.ProductStoreGroupId })
                .HasName("PRD_PRC_GENLKP");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.ProductPriceTypeId)
                .HasColumnName("PRODUCT_PRICE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPricePurposeId)
                .HasColumnName("PRODUCT_PRICE_PURPOSE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CurrencyUomId)
                .HasColumnName("CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductStoreGroupId)
                .HasColumnName("PRODUCT_STORE_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedDate)
                .HasColumnName("CREATED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CustomPriceCalcService)
                .HasColumnName("CUSTOM_PRICE_CALC_SERVICE")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.LastModifiedDate)
                .HasColumnName("LAST_MODIFIED_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Price)
                .HasColumnName("PRICE")
                .HasColumnType("decimal(18,3)");

            entity.Property(e => e.PriceWithTax)
                .HasColumnName("PRICE_WITH_TAX")
                .HasColumnType("decimal(18,3)");

            entity.Property(e => e.PriceWithoutTax)
                .HasColumnName("PRICE_WITHOUT_TAX")
                .HasColumnType("decimal(18,3)");

            entity.Property(e => e.TaxAmount)
                .HasColumnName("TAX_AMOUNT")
                .HasColumnType("decimal(18,3)");

            entity.Property(e => e.TaxAuthGeoId)
                .HasColumnName("TAX_AUTH_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TaxAuthPartyId)
                .HasColumnName("TAX_AUTH_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TaxInPrice)
                .HasColumnName("TAX_IN_PRICE")
                .HasColumnType("char(1)");

            entity.Property(e => e.TaxPercentage)
                .HasColumnName("TAX_PERCENTAGE")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.TermUomId)
                .HasColumnName("TERM_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.CreatedByUserLoginNavigation)
                .WithMany(p => p.ProductPriceCreatedByUserLoginNavigations)
                .HasForeignKey(d => d.CreatedByUserLogin)
                .HasConstraintName("PROD_PRICE_CBUL");

            entity.HasOne(d => d.CurrencyUom)
                .WithMany(p => p.ProductPriceCurrencyUoms)
                .HasForeignKey(d => d.CurrencyUomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_PRICE_CUOM");

            entity.HasOne(d => d.CustomPriceCalcServiceNavigation)
                .WithMany(p => p.ProductPrices)
                .HasForeignKey(d => d.CustomPriceCalcService)
                .HasConstraintName("PROD_PRICE_CMET");

            entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                .WithMany(p => p.ProductPriceLastModifiedByUserLoginNavigations)
                .HasForeignKey(d => d.LastModifiedByUserLogin)
                .HasConstraintName("PROD_PRICE_LMBUL");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductPrices)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_PRICE_PROD");

            entity.HasOne(d => d.ProductPricePurpose)
                .WithMany(p => p.ProductPrices)
                .HasForeignKey(d => d.ProductPricePurposeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_PRICE_PURP");

            entity.HasOne(d => d.ProductPriceType)
                .WithMany(p => p.ProductPrices)
                .HasForeignKey(d => d.ProductPriceTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_PRICE_TYPE");

            entity.HasOne(d => d.ProductStoreGroup)
                .WithMany(p => p.ProductPrices)
                .HasForeignKey(d => d.ProductStoreGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_PRICE_PSTG");

            entity.HasOne(d => d.TaxAuthGeo)
                .WithMany(p => p.ProductPrices)
                .HasForeignKey(d => d.TaxAuthGeoId)
                .HasConstraintName("PROD_PRC_TAXGEO");

            entity.HasOne(d => d.TaxAuthParty)
                .WithMany(p => p.ProductPrices)
                .HasForeignKey(d => d.TaxAuthPartyId)
                .HasConstraintName("PROD_PRC_TAXPTY");

            entity.HasOne(d => d.TermUom)
                .WithMany(p => p.ProductPriceTermUoms)
                .HasForeignKey(d => d.TermUomId)
                .HasConstraintName("PROD_PRICE_TUOM");
        });

        modelBuilder.Entity<ProductPriceAction>(entity =>
        {
            entity.HasKey(e => new { e.ProductPriceRuleId, e.ProductPriceActionSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PRODUCT_PRICE_ACTION");


            entity.HasIndex(e => e.ProductPriceActionTypeId)
                .HasName("PROD_PCACT_TYPE");

            entity.HasIndex(e => e.ProductPriceRuleId)
                .HasName("PROD_PCACT_RL");

            entity.Property(e => e.ProductPriceRuleId)
                .HasColumnName("PRODUCT_PRICE_RULE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPriceActionSeqId)
                .HasColumnName("PRODUCT_PRICE_ACTION_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ProductPriceActionTypeId)
                .HasColumnName("PRODUCT_PRICE_ACTION_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RateCode)
                .HasColumnName("RATE_CODE")
                .HasColumnType("varchar(60)");

            entity.HasOne(d => d.ProductPriceActionType)
                .WithMany(p => p.ProductPriceActions)
                .HasForeignKey(d => d.ProductPriceActionTypeId)
                .HasConstraintName("PROD_PCACT_TYPE");

            entity.HasOne(d => d.ProductPriceRule)
                .WithMany(p => p.ProductPriceActions)
                .HasForeignKey(d => d.ProductPriceRuleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_PCACT_RL");
        });

        modelBuilder.Entity<ProductPriceActionType>(entity =>
        {
            entity.ToTable("PRODUCT_PRICE_ACTION_TYPE");


            entity.Property(e => e.ProductPriceActionTypeId)
                .HasColumnName("PRODUCT_PRICE_ACTION_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<ProductPriceAutoNotice>(entity =>
        {
            entity.HasKey(e => e.ProductPriceNoticeId)
                .HasName("PRIMARY");

            entity.ToTable("PRODUCT_PRICE_AUTO_NOTICE");


            entity.Property(e => e.ProductPriceNoticeId)
                .HasColumnName("PRODUCT_PRICE_NOTICE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.RunDate)
                .HasColumnName("RUN_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");
        });

        modelBuilder.Entity<ProductPriceChange>(entity =>
        {
            entity.ToTable("PRODUCT_PRICE_CHANGE");

            entity.HasIndex(e => e.ChangedByUserLogin)
                .HasName("PROD_PRCHNG_CHUL");


            entity.Property(e => e.ProductPriceChangeId)
                .HasColumnName("PRODUCT_PRICE_CHANGE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ChangedByUserLogin)
                .HasColumnName("CHANGED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.ChangedDate)
                .HasColumnName("CHANGED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrencyUomId)
                .HasColumnName("CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.OldPrice)
                .HasColumnName("OLD_PRICE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.Price)
                .HasColumnName("PRICE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.ProductPricePurposeId)
                .HasColumnName("PRODUCT_PRICE_PURPOSE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPriceTypeId)
                .HasColumnName("PRODUCT_PRICE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductStoreGroupId)
                .HasColumnName("PRODUCT_STORE_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ChangedByUserLoginNavigation)
                .WithMany(p => p.ProductPriceChanges)
                .HasForeignKey(d => d.ChangedByUserLogin)
                .HasConstraintName("PROD_PRCHNG_CHUL");
        });

        modelBuilder.Entity<ProductPriceCond>(entity =>
        {
            entity.HasKey(e => new { e.ProductPriceRuleId, e.ProductPriceCondSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PRODUCT_PRICE_COND");


            entity.HasIndex(e => e.InputParamEnumId)
                .HasName("PROD_PCCOND_INENUM");


            entity.HasIndex(e => e.OperatorEnumId)
                .HasName("PROD_PCCOND_OPENUM");

            entity.HasIndex(e => e.ProductPriceRuleId)
                .HasName("PROD_PCCOND_RULE");

            entity.Property(e => e.ProductPriceRuleId)
                .HasColumnName("PRODUCT_PRICE_RULE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPriceCondSeqId)
                .HasColumnName("PRODUCT_PRICE_COND_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CondValue)
                .HasColumnName("COND_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.InputParamEnumId)
                .HasColumnName("INPUT_PARAM_ENUM_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.OperatorEnumId)
                .HasColumnName("OPERATOR_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.InputParamEnum)
                .WithMany(p => p.ProductPriceCondInputParamEnums)
                .HasForeignKey(d => d.InputParamEnumId)
                .HasConstraintName("PROD_PCCOND_INENUM");

            entity.HasOne(d => d.OperatorEnum)
                .WithMany(p => p.ProductPriceCondOperatorEnums)
                .HasForeignKey(d => d.OperatorEnumId)
                .HasConstraintName("PROD_PCCOND_OPENUM");

            entity.HasOne(d => d.ProductPriceRule)
                .WithMany(p => p.ProductPriceConds)
                .HasForeignKey(d => d.ProductPriceRuleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_PCCOND_RULE");
        });

        modelBuilder.Entity<ProductPricePurpose>(entity =>
        {
            entity.ToTable("PRODUCT_PRICE_PURPOSE");


            entity.Property(e => e.ProductPricePurposeId)
                .HasColumnName("PRODUCT_PRICE_PURPOSE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<ProductPriceRule>(entity =>
        {
            entity.ToTable("PRODUCT_PRICE_RULE");


            entity.Property(e => e.ProductPriceRuleId)
                .HasColumnName("PRODUCT_PRICE_RULE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.IsSale)
                .HasColumnName("IS_SALE")
                .HasColumnType("char(1)");


            entity.Property(e => e.RuleName)
                .HasColumnName("RULE_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");
        });

        modelBuilder.Entity<ProductPriceType>(entity =>
        {
            entity.ToTable("PRODUCT_PRICE_TYPE");


            entity.Property(e => e.ProductPriceTypeId)
                .HasColumnName("PRODUCT_PRICE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<ProductPromo>(entity =>
        {
            entity.ToTable("PRODUCT_PROMO");

            entity.HasIndex(e => e.CreatedByUserLogin)
                .HasName("PROD_PRMO_CUL");


            entity.HasIndex(e => e.LastModifiedByUserLogin)
                .HasName("PROD_PRMO_LMCUL");


            entity.HasIndex(e => e.OverrideOrgPartyId)
                .HasName("PROD_PRMO_OPA");

            entity.Property(e => e.ProductPromoId)
                .HasColumnName("PRODUCT_PROMO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BillbackFactor)
                .HasColumnName("BILLBACK_FACTOR")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedDate)
                .HasColumnName("CREATED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.LastModifiedDate)
                .HasColumnName("LAST_MODIFIED_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.OverrideOrgPartyId)
                .HasColumnName("OVERRIDE_ORG_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PromoName)
                .HasColumnName("PROMO_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.PromoText)
                .HasColumnName("PROMO_TEXT")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.RequireCode)
                .HasColumnName("REQUIRE_CODE")
                .HasColumnType("char(1)");

            entity.Property(e => e.ShowToCustomer)
                .HasColumnName("SHOW_TO_CUSTOMER")
                .HasColumnType("char(1)");

            entity.Property(e => e.UseLimitPerCustomer)
                .HasColumnName("USE_LIMIT_PER_CUSTOMER")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.UseLimitPerOrder)
                .HasColumnName("USE_LIMIT_PER_ORDER")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.UseLimitPerPromotion)
                .HasColumnName("USE_LIMIT_PER_PROMOTION")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.UserEntered)
                .HasColumnName("USER_ENTERED")
                .HasColumnType("char(1)");

            entity.HasOne(d => d.CreatedByUserLoginNavigation)
                .WithMany(p => p.ProductPromoCreatedByUserLoginNavigations)
                .HasForeignKey(d => d.CreatedByUserLogin)
                .HasConstraintName("PROD_PRMO_CUL");

            entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                .WithMany(p => p.ProductPromoLastModifiedByUserLoginNavigations)
                .HasForeignKey(d => d.LastModifiedByUserLogin)
                .HasConstraintName("PROD_PRMO_LMCUL");

            entity.HasOne(d => d.OverrideOrgParty)
                .WithMany(p => p.ProductPromoes)
                .HasForeignKey(d => d.OverrideOrgPartyId)
                .HasConstraintName("PROD_PRMO_OPA");
        });

        modelBuilder.Entity<ProductPromoAction>(entity =>
        {
            entity.HasKey(e => new { e.ProductPromoId, e.ProductPromoRuleId, e.ProductPromoActionSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PRODUCT_PROMO_ACTION");


            entity.HasIndex(e => e.CustomMethodId)
                .HasName("PROD_PRACT_CMET");


            entity.HasIndex(e => e.OrderAdjustmentTypeId)
                .HasName("PROD_PRACT_OATYPE");

            entity.HasIndex(e => e.ProductPromoActionEnumId)
                .HasName("PROD_PRACT_ENUM");

            entity.HasIndex(e => e.ProductPromoId)
                .HasName("PROD_PRACT_PR");

            entity.HasIndex(e => new { e.ProductPromoId, e.ProductPromoRuleId })
                .HasName("PROD_PRACT_RL");

            entity.Property(e => e.ProductPromoId)
                .HasColumnName("PRODUCT_PROMO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoRuleId)
                .HasColumnName("PRODUCT_PROMO_RULE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoActionSeqId)
                .HasColumnName("PRODUCT_PROMO_ACTION_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CustomMethodId)
                .HasColumnName("CUSTOM_METHOD_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.OrderAdjustmentTypeId)
                .HasColumnName("ORDER_ADJUSTMENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.ProductPromoActionEnumId)
                .HasColumnName("PRODUCT_PROMO_ACTION_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ServiceName)
                .HasColumnName("SERVICE_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.UseCartQuantity)
                .HasColumnName("USE_CART_QUANTITY")
                .HasColumnType("char(1)");

            entity.HasOne(d => d.CustomMethod)
                .WithMany(p => p.ProductPromoActions)
                .HasForeignKey(d => d.CustomMethodId)
                .HasConstraintName("PROD_PRACT_CMET");

            entity.HasOne(d => d.OrderAdjustmentType)
                .WithMany(p => p.ProductPromoActions)
                .HasForeignKey(d => d.OrderAdjustmentTypeId)
                .HasConstraintName("PROD_PRACT_OATYPE");

            entity.HasOne(d => d.ProductPromoActionEnum)
                .WithMany(p => p.ProductPromoActions)
                .HasForeignKey(d => d.ProductPromoActionEnumId)
                .HasConstraintName("PROD_PRACT_ENUM");

            entity.HasOne(d => d.ProductPromo)
                .WithMany(p => p.ProductPromoActions)
                .HasForeignKey(d => d.ProductPromoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_PRACT_PR");

            entity.HasOne(d => d.ProductPromoNavigation)
                .WithMany(p => p.ProductPromoActions)
                .HasForeignKey(d => new { d.ProductPromoId, d.ProductPromoRuleId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_PRACT_RL");
        });

        modelBuilder.Entity<ProductPromoCategory>(entity =>
        {
            entity.HasKey(e => new
                {
                    e.ProductPromoId, e.ProductPromoRuleId, e.ProductPromoActionSeqId, e.ProductPromoCondSeqId,
                    e.ProductCategoryId, e.AndGroupId
                })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0, 0 });

            entity.ToTable("PRODUCT_PROMO_CATEGORY");


            entity.HasIndex(e => e.ProductCategoryId)
                .HasName("PROD_PRCAT_PRCAT");

            entity.HasIndex(e => e.ProductPromoApplEnumId)
                .HasName("PROD_PRCAT_ENUM");

            entity.HasIndex(e => e.ProductPromoId)
                .HasName("PROD_PRCAT_PROMO");

            entity.Property(e => e.ProductPromoId)
                .HasColumnName("PRODUCT_PROMO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoRuleId)
                .HasColumnName("PRODUCT_PROMO_RULE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoActionSeqId)
                .HasColumnName("PRODUCT_PROMO_ACTION_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoCondSeqId)
                .HasColumnName("PRODUCT_PROMO_COND_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductCategoryId)
                .HasColumnName("PRODUCT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AndGroupId)
                .HasColumnName("AND_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.IncludeSubCategories)
                .HasColumnName("INCLUDE_SUB_CATEGORIES")
                .HasColumnType("char(1)");


            entity.Property(e => e.ProductPromoApplEnumId)
                .HasColumnName("PRODUCT_PROMO_APPL_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ProductCategory)
                .WithMany(p => p.ProductPromoCategories)
                .HasForeignKey(d => d.ProductCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_PRCAT_PRCAT");

            entity.HasOne(d => d.ProductPromoApplEnum)
                .WithMany(p => p.ProductPromoCategories)
                .HasForeignKey(d => d.ProductPromoApplEnumId)
                .HasConstraintName("PROD_PRCAT_ENUM");

            entity.HasOne(d => d.ProductPromo)
                .WithMany(p => p.ProductPromoCategories)
                .HasForeignKey(d => d.ProductPromoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_PRCAT_PROMO");
        });

        modelBuilder.Entity<ProductPromoCode>(entity =>
        {
            entity.ToTable("PRODUCT_PROMO_CODE");

            entity.HasIndex(e => e.CreatedByUserLogin)
                .HasName("PROD_PRCOD_CUL");


            entity.HasIndex(e => e.LastModifiedByUserLogin)
                .HasName("PROD_PRCOD_LMCUL");


            entity.HasIndex(e => e.ProductPromoId)
                .HasName("PROD_PRCOD_PROMO");

            entity.Property(e => e.ProductPromoCodeId)
                .HasColumnName("PRODUCT_PROMO_CODE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedDate)
                .HasColumnName("CREATED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.LastModifiedDate)
                .HasColumnName("LAST_MODIFIED_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ProductPromoId)
                .HasColumnName("PRODUCT_PROMO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RequireEmailOrParty)
                .HasColumnName("REQUIRE_EMAIL_OR_PARTY")
                .HasColumnType("char(1)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.UseLimitPerCode)
                .HasColumnName("USE_LIMIT_PER_CODE")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.UseLimitPerCustomer)
                .HasColumnName("USE_LIMIT_PER_CUSTOMER")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.UserEntered)
                .HasColumnName("USER_ENTERED")
                .HasColumnType("char(1)");

            entity.HasOne(d => d.CreatedByUserLoginNavigation)
                .WithMany(p => p.ProductPromoCodeCreatedByUserLoginNavigations)
                .HasForeignKey(d => d.CreatedByUserLogin)
                .HasConstraintName("PROD_PRCOD_CUL");

            entity.HasOne(d => d.LastModifiedByUserLoginNavigation)
                .WithMany(p => p.ProductPromoCodeLastModifiedByUserLoginNavigations)
                .HasForeignKey(d => d.LastModifiedByUserLogin)
                .HasConstraintName("PROD_PRCOD_LMCUL");

            entity.HasOne(d => d.ProductPromo)
                .WithMany(p => p.ProductPromoCodes)
                .HasForeignKey(d => d.ProductPromoId)
                .HasConstraintName("PROD_PRCOD_PROMO");
        });

        modelBuilder.Entity<ProductPromoCodeEmail>(entity =>
        {
            entity.HasKey(e => new { e.ProductPromoCodeId, e.EmailAddress })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PRODUCT_PROMO_CODE_EMAIL");


            entity.HasIndex(e => e.ProductPromoCodeId)
                .HasName("PROD_PRCDE_OPCD");

            entity.Property(e => e.ProductPromoCodeId)
                .HasColumnName("PRODUCT_PROMO_CODE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.EmailAddress)
                .HasColumnName("EMAIL_ADDRESS")
                .HasColumnType("varchar(320)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ProductPromoCode)
                .WithMany(p => p.ProductPromoCodeEmails)
                .HasForeignKey(d => d.ProductPromoCodeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_PRCDE_OPCD");
        });

        modelBuilder.Entity<ProductPromoCodeParty>(entity =>
        {
            entity.HasKey(e => new { e.ProductPromoCodeId, e.PartyId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PRODUCT_PROMO_CODE_PARTY");


            entity.HasIndex(e => e.PartyId)
                .HasName("PROD_PRCDP_PRTY");

            entity.HasIndex(e => e.ProductPromoCodeId)
                .HasName("PROD_PRCDP_PCD");

            entity.Property(e => e.ProductPromoCodeId)
                .HasColumnName("PRODUCT_PROMO_CODE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Party)
                .WithMany(p => p.ProductPromoCodeParties)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_PRCDP_PRTY");

            entity.HasOne(d => d.ProductPromoCode)
                .WithMany(p => p.ProductPromoCodeParties)
                .HasForeignKey(d => d.ProductPromoCodeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_PRCDP_PCD");
        });

        modelBuilder.Entity<ProductPromoCond>(entity =>
        {
            entity.HasKey(e => new { e.ProductPromoId, e.ProductPromoRuleId, e.ProductPromoCondSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PRODUCT_PROMO_COND");


            entity.HasIndex(e => e.CustomMethodId)
                .HasName("PROD_PRCOND_CMETH");

            entity.HasIndex(e => e.InputParamEnumId)
                .HasName("PROD_PRCOND_INENUM");


            entity.HasIndex(e => e.OperatorEnumId)
                .HasName("PROD_PRCOND_OPENUM");

            entity.HasIndex(e => e.ProductPromoId)
                .HasName("PROD_PRCOND_PROMO");

            entity.HasIndex(e => new { e.ProductPromoId, e.ProductPromoRuleId })
                .HasName("PROD_PRCOND_RULE");

            entity.Property(e => e.ProductPromoId)
                .HasColumnName("PRODUCT_PROMO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoRuleId)
                .HasColumnName("PRODUCT_PROMO_RULE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoCondSeqId)
                .HasColumnName("PRODUCT_PROMO_COND_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CondValue)
                .HasColumnName("COND_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CustomMethodId)
                .HasColumnName("CUSTOM_METHOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InputParamEnumId)
                .HasColumnName("INPUT_PARAM_ENUM_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.OperatorEnumId)
                .HasColumnName("OPERATOR_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OtherValue)
                .HasColumnName("OTHER_VALUE")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.CustomMethod)
                .WithMany(p => p.ProductPromoConds)
                .HasForeignKey(d => d.CustomMethodId)
                .HasConstraintName("PROD_PRCOND_CMETH");

            entity.HasOne(d => d.InputParamEnum)
                .WithMany(p => p.ProductPromoCondInputParamEnums)
                .HasForeignKey(d => d.InputParamEnumId)
                .HasConstraintName("PROD_PRCOND_INENUM");

            entity.HasOne(d => d.OperatorEnum)
                .WithMany(p => p.ProductPromoCondOperatorEnums)
                .HasForeignKey(d => d.OperatorEnumId)
                .HasConstraintName("PROD_PRCOND_OPENUM");

            entity.HasOne(d => d.ProductPromo)
                .WithMany(p => p.ProductPromoConds)
                .HasForeignKey(d => d.ProductPromoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_PRCOND_PROMO");

            entity.HasOne(d => d.ProductPromoNavigation)
                .WithMany(p => p.ProductPromoConds)
                .HasForeignKey(d => new { d.ProductPromoId, d.ProductPromoRuleId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_PRCOND_RULE");
        });

        modelBuilder.Entity<ProductPromoContent>(entity =>
        {
            entity.HasKey(e => new { e.ProductPromoId, e.ContentId, e.ProductPromoContentTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PRODUCT_PROMO_CONTENT");

            entity.HasIndex(e => e.ContentId)
                .HasName("PRODPR_CNT_CNT");


            entity.HasIndex(e => e.ProductPromoContentTypeId)
                .HasName("PRODPR_CNT_TYPE");

            entity.HasIndex(e => e.ProductPromoId)
                .HasName("PRODPR_CNT_PROD_PR");

            entity.Property(e => e.ProductPromoId)
                .HasColumnName("PRODUCT_PROMO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoContentTypeId)
                .HasColumnName("PRODUCT_PROMO_CONTENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.ProductPromoContents)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRODPR_CNT_CNT");

            entity.HasOne(d => d.ProductPromoContentType)
                .WithMany(p => p.ProductPromoContents)
                .HasForeignKey(d => d.ProductPromoContentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRODPR_CNT_TYPE");

            entity.HasOne(d => d.ProductPromo)
                .WithMany(p => p.ProductPromoContents)
                .HasForeignKey(d => d.ProductPromoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRODPR_CNT_PROD_PR");
        });

        modelBuilder.Entity<ProductPromoProduct>(entity =>
        {
            entity.HasKey(e => new
                {
                    e.ProductPromoId, e.ProductPromoRuleId, e.ProductPromoActionSeqId, e.ProductPromoCondSeqId,
                    e.ProductId
                })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0 });

            entity.ToTable("PRODUCT_PROMO_PRODUCT");


            entity.HasIndex(e => e.ProductId)
                .HasName("PROD_PRPRD_PROD");

            entity.HasIndex(e => e.ProductPromoApplEnumId)
                .HasName("PROD_PRPRD_ENUM");

            entity.HasIndex(e => e.ProductPromoId)
                .HasName("PROD_PRPRD_PROMO");

            entity.Property(e => e.ProductPromoId)
                .HasColumnName("PRODUCT_PROMO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoRuleId)
                .HasColumnName("PRODUCT_PROMO_RULE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoActionSeqId)
                .HasColumnName("PRODUCT_PROMO_ACTION_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoCondSeqId)
                .HasColumnName("PRODUCT_PROMO_COND_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ProductPromoApplEnumId)
                .HasColumnName("PRODUCT_PROMO_APPL_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductPromoProducts)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_PRPRD_PROD");

            entity.HasOne(d => d.ProductPromoApplEnum)
                .WithMany(p => p.ProductPromoProducts)
                .HasForeignKey(d => d.ProductPromoApplEnumId)
                .HasConstraintName("PROD_PRPRD_ENUM");

            entity.HasOne(d => d.ProductPromo)
                .WithMany(p => p.ProductPromoProducts)
                .HasForeignKey(d => d.ProductPromoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_PRPRD_PROMO");
        });

        modelBuilder.Entity<ProductPromoRule>(entity =>
        {
            entity.HasKey(e => new { e.ProductPromoId, e.ProductPromoRuleId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PRODUCT_PROMO_RULE");


            entity.HasIndex(e => e.ProductPromoId)
                .HasName("PROD_PRRLE_PROMO");

            entity.Property(e => e.ProductPromoId)
                .HasColumnName("PRODUCT_PROMO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoRuleId)
                .HasColumnName("PRODUCT_PROMO_RULE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.RuleName)
                .HasColumnName("RULE_NAME")
                .HasColumnType("varchar(100)");

            entity.HasOne(d => d.ProductPromo)
                .WithMany(p => p.ProductPromoRules)
                .HasForeignKey(d => d.ProductPromoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_PRRLE_PROMO");
        });

        modelBuilder.Entity<ProductPromoUse>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.PromoSequenceId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PRODUCT_PROMO_USE");


            entity.HasIndex(e => e.OrderId)
                .HasName("PROD_PRUSE_ORDR");

            entity.HasIndex(e => e.PartyId)
                .HasName("PROD_PRUSE_PTY");

            entity.HasIndex(e => e.ProductPromoCodeId)
                .HasName("PROD_PRUSE_CODE");

            entity.HasIndex(e => e.ProductPromoId)
                .HasName("PROD_PRUSE_PROMO");

            entity.HasIndex(e => new { e.ProductPromoCodeId, e.PartyId })
                .HasName("PRODPRUSE_PCDPTY");

            entity.HasIndex(e => new { e.ProductPromoId, e.PartyId })
                .HasName("PRODPRUSE_PRMPTY");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PromoSequenceId)
                .HasColumnName("PROMO_SEQUENCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoCodeId)
                .HasColumnName("PRODUCT_PROMO_CODE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoId)
                .HasColumnName("PRODUCT_PROMO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.QuantityLeftInActions)
                .HasColumnName("QUANTITY_LEFT_IN_ACTIONS")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.TotalDiscountAmount)
                .HasColumnName("TOTAL_DISCOUNT_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.ProductPromice)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_PRUSE_ORDR");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.ProductPromice)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("PROD_PRUSE_PTY");

            entity.HasOne(d => d.ProductPromoCode)
                .WithMany(p => p.ProductPromice)
                .HasForeignKey(d => d.ProductPromoCodeId)
                .HasConstraintName("PROD_PRUSE_CODE");

            entity.HasOne(d => d.ProductPromo)
                .WithMany(p => p.ProductPromice)
                .HasForeignKey(d => d.ProductPromoId)
                .HasConstraintName("PROD_PRUSE_PROMO");
        });

        modelBuilder.Entity<ProductReview>(entity =>
        {
            entity.ToTable("PRODUCT_REVIEW");


            entity.HasIndex(e => e.ProductId)
                .HasName("PROD_REVIEW_PROD");

            entity.HasIndex(e => e.ProductStoreId)
                .HasName("PROD_REVIEW_PRDSTR");

            entity.HasIndex(e => e.StatusId)
                .HasName("PROD_REVIEW_STTS");

            entity.HasIndex(e => e.UserLoginId)
                .HasName("PROD_REVIEW_ULH");

            entity.Property(e => e.ProductReviewId)
                .HasColumnName("PRODUCT_REVIEW_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PostedAnonymous)
                .HasColumnName("POSTED_ANONYMOUS")
                .HasColumnType("char(1)");

            entity.Property(e => e.PostedDateTime)
                .HasColumnName("POSTED_DATE_TIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.ProductRating)
                .HasColumnName("PRODUCT_RATING")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ProductReview1)
                .HasColumnName("PRODUCT_REVIEW")
                .HasColumnType("longtext");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.UserLoginId)
                .HasColumnName("USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductReviews)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("PROD_REVIEW_PROD");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.ProductReviews)
                .HasForeignKey(d => d.ProductStoreId)
                .HasConstraintName("PROD_REVIEW_PRDSTR");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.ProductReviews)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("PROD_REVIEW_STTS");

            entity.HasOne(d => d.UserLogin)
                .WithMany(p => p.ProductReviews)
                .HasForeignKey(d => d.UserLoginId)
                .HasConstraintName("PROD_REVIEW_ULH");
        });

        modelBuilder.Entity<ProductRole>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.PartyId, e.RoleTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PRODUCT_ROLE");


            entity.HasIndex(e => e.ProductId)
                .HasName("PROD_RLE_PRODUCT");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("PROD_RLE_PTYRLE");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductRoles)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_RLE_PRODUCT");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.ProductRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_RLE_PTYRLE");
        });

        modelBuilder.Entity<ProductSearchConstraint>(entity =>
        {
            entity.HasKey(e => new { e.ProductSearchResultId, e.ConstraintSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PRODUCT_SEARCH_CONSTRAINT");


            entity.HasIndex(e => e.ProductSearchResultId)
                .HasName("PROD_SCHRSI_RES");

            entity.Property(e => e.ProductSearchResultId)
                .HasColumnName("PRODUCT_SEARCH_RESULT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ConstraintSeqId)
                .HasColumnName("CONSTRAINT_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AnyPrefix)
                .HasColumnName("ANY_PREFIX")
                .HasColumnType("char(1)");

            entity.Property(e => e.AnySuffix)
                .HasColumnName("ANY_SUFFIX")
                .HasColumnType("char(1)");

            entity.Property(e => e.ConstraintName)
                .HasColumnName("CONSTRAINT_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.HighValue)
                .HasColumnName("HIGH_VALUE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.IncludeSubCategories)
                .HasColumnName("INCLUDE_SUB_CATEGORIES")
                .HasColumnType("char(1)");

            entity.Property(e => e.InfoString)
                .HasColumnName("INFO_STRING")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.IsAnd)
                .HasColumnName("IS_AND")
                .HasColumnType("char(1)");


            entity.Property(e => e.LowValue)
                .HasColumnName("LOW_VALUE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.RemoveStems)
                .HasColumnName("REMOVE_STEMS")
                .HasColumnType("char(1)");

            entity.HasOne(d => d.ProductSearchResult)
                .WithMany(p => p.ProductSearchConstraints)
                .HasForeignKey(d => d.ProductSearchResultId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_SCHRSI_RES");
        });

        modelBuilder.Entity<ProductSearchResult>(entity =>
        {
            entity.ToTable("PRODUCT_SEARCH_RESULT");


            entity.Property(e => e.ProductSearchResultId)
                .HasColumnName("PRODUCT_SEARCH_RESULT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.IsAscending)
                .HasColumnName("IS_ASCENDING")
                .HasColumnType("char(1)");


            entity.Property(e => e.NumResults)
                .HasColumnName("NUM_RESULTS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.OrderByName)
                .HasColumnName("ORDER_BY_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.SearchDate)
                .HasColumnName("SEARCH_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.SecondsTotal).HasColumnName("SECONDS_TOTAL");

            entity.Property(e => e.VisitId)
                .HasColumnName("VISIT_ID")
                .HasColumnType("varchar(36)");
        });

        modelBuilder.Entity<ProductStore>(entity =>
        {
            entity.ToTable("PRODUCT_STORE");


            entity.HasIndex(e => e.DefaultCurrencyUomId)
                .HasName("PROD_STR_CURUOM");

            entity.HasIndex(e => e.DefaultSalesChannelEnumId)
                .HasName("PROD_STR_SALECHN");

            entity.HasIndex(e => e.DigitalItemApprovedStatus)
                .HasName("PROD_STR_DIAPSTS");

            entity.HasIndex(e => e.HeaderApprovedStatus)
                .HasName("PROD_STR_HAPSTS");

            entity.HasIndex(e => e.HeaderCancelStatus)
                .HasName("PROD_STR_HCNSTS");

            entity.HasIndex(e => e.HeaderDeclinedStatus)
                .HasName("PROD_STR_HDCSTS");

            entity.HasIndex(e => e.InventoryFacilityId)
                .HasName("PROD_STR_FACILITY");

            entity.HasIndex(e => e.ItemApprovedStatus)
                .HasName("PROD_STR_IAPSTS");

            entity.HasIndex(e => e.ItemCancelStatus)
                .HasName("PROD_STR_ICNSTS");

            entity.HasIndex(e => e.ItemDeclinedStatus)
                .HasName("PROD_STR_IDCSTS");


            entity.HasIndex(e => e.PayToPartyId)
                .HasName("PROD_STR_PAYTOPTY");

            entity.HasIndex(e => e.PrimaryStoreGroupId)
                .HasName("PROD_STR_PRSTRGP");

            entity.HasIndex(e => e.RequirementMethodEnumId)
                .HasName("PROD_STR_RQMTENUM");

            entity.HasIndex(e => e.ReserveOrderEnumId)
                .HasName("PROD_STR_RORDENUM");

            entity.HasIndex(e => e.StoreCreditAccountEnumId)
                .HasName("PROD_STR_STRCRDACT");

            entity.HasIndex(e => new { e.VatTaxAuthGeoId, e.VatTaxAuthPartyId })
                .HasName("PROD_STR_VATTXA");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AddToCartRemoveIncompat)
                .HasColumnName("ADD_TO_CART_REMOVE_INCOMPAT")
                .HasColumnType("char(1)");

            entity.Property(e => e.AddToCartReplaceUpsell)
                .HasColumnName("ADD_TO_CART_REPLACE_UPSELL")
                .HasColumnType("char(1)");

            entity.Property(e => e.AllocateInventory)
                .HasColumnName("ALLOCATE_INVENTORY")
                .HasColumnType("char(1)");

            entity.Property(e => e.AllowComment)
                .HasColumnName("ALLOW_COMMENT")
                .HasColumnType("char(1)");

            entity.Property(e => e.AllowPassword)
                .HasColumnName("ALLOW_PASSWORD")
                .HasColumnType("char(1)");

            entity.Property(e => e.AuthDeclinedMessage)
                .HasColumnName("AUTH_DECLINED_MESSAGE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AuthErrorMessage)
                .HasColumnName("AUTH_ERROR_MESSAGE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AuthFraudMessage)
                .HasColumnName("AUTH_FRAUD_MESSAGE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AutoApproveInvoice)
                .HasColumnName("AUTO_APPROVE_INVOICE")
                .HasColumnType("char(1)");

            entity.Property(e => e.AutoApproveOrder)
                .HasColumnName("AUTO_APPROVE_ORDER")
                .HasColumnType("char(1)");

            entity.Property(e => e.AutoApproveReviews)
                .HasColumnName("AUTO_APPROVE_REVIEWS")
                .HasColumnType("char(1)");

            entity.Property(e => e.AutoInvoiceDigitalItems)
                .HasColumnName("AUTO_INVOICE_DIGITAL_ITEMS")
                .HasColumnType("char(1)");

            entity.Property(e => e.AutoOrderCcTryExp)
                .HasColumnName("AUTO_ORDER_CC_TRY_EXP")
                .HasColumnType("char(1)");

            entity.Property(e => e.AutoOrderCcTryLaterMax)
                .HasColumnName("AUTO_ORDER_CC_TRY_LATER_MAX")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.AutoOrderCcTryLaterNsf)
                .HasColumnName("AUTO_ORDER_CC_TRY_LATER_NSF")
                .HasColumnType("char(1)");

            entity.Property(e => e.AutoOrderCcTryOtherCards)
                .HasColumnName("AUTO_ORDER_CC_TRY_OTHER_CARDS")
                .HasColumnType("char(1)");

            entity.Property(e => e.AutoSaveCart)
                .HasColumnName("AUTO_SAVE_CART")
                .HasColumnType("char(1)");

            entity.Property(e => e.BalanceResOnOrderCreation)
                .HasColumnName("BALANCE_RES_ON_ORDER_CREATION")
                .HasColumnType("char(1)");

            entity.Property(e => e.CheckGcBalance)
                .HasColumnName("CHECK_GC_BALANCE")
                .HasColumnType("char(1)");

            entity.Property(e => e.CheckInventory)
                .HasColumnName("CHECK_INVENTORY")
                .HasColumnType("char(1)");

            entity.Property(e => e.CompanyName)
                .HasColumnName("COMPANY_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DaysToCancelNonPay)
                .HasColumnName("DAYS_TO_CANCEL_NON_PAY")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.DefaultCurrencyUomId)
                .HasColumnName("DEFAULT_CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DefaultLocaleString)
                .HasColumnName("DEFAULT_LOCALE_STRING")
                .HasColumnType("varchar(10)");

            entity.Property(e => e.DefaultPassword)
                .HasColumnName("DEFAULT_PASSWORD")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.DefaultSalesChannelEnumId)
                .HasColumnName("DEFAULT_SALES_CHANNEL_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DefaultTimeZoneString)
                .HasColumnName("DEFAULT_TIME_ZONE_STRING")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.DigProdUploadCategoryId)
                .HasColumnName("DIG_PROD_UPLOAD_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DigitalItemApprovedStatus)
                .HasColumnName("DIGITAL_ITEM_APPROVED_STATUS")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.EnableAutoSuggestionList)
                .HasColumnName("ENABLE_AUTO_SUGGESTION_LIST")
                .HasColumnType("char(1)");

            entity.Property(e => e.EnableDigProdUpload)
                .HasColumnName("ENABLE_DIG_PROD_UPLOAD")
                .HasColumnType("char(1)");

            entity.Property(e => e.ExplodeOrderItems)
                .HasColumnName("EXPLODE_ORDER_ITEMS")
                .HasColumnType("char(1)");

            entity.Property(e => e.HeaderApprovedStatus)
                .HasColumnName("HEADER_APPROVED_STATUS")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.HeaderCancelStatus)
                .HasColumnName("HEADER_CANCEL_STATUS")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.HeaderDeclinedStatus)
                .HasColumnName("HEADER_DECLINED_STATUS")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InventoryFacilityId)
                .HasColumnName("INVENTORY_FACILITY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.IsDemoStore)
                .HasColumnName("IS_DEMO_STORE")
                .HasColumnType("char(1)");

            entity.Property(e => e.IsImmediatelyFulfilled)
                .HasColumnName("IS_IMMEDIATELY_FULFILLED")
                .HasColumnType("char(1)");

            entity.Property(e => e.ItemApprovedStatus)
                .HasColumnName("ITEM_APPROVED_STATUS")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ItemCancelStatus)
                .HasColumnName("ITEM_CANCEL_STATUS")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ItemDeclinedStatus)
                .HasColumnName("ITEM_DECLINED_STATUS")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.ManagedByLot)
                .HasColumnName("MANAGED_BY_LOT")
                .HasColumnType("char(1)");

            entity.Property(e => e.ManualAuthIsCapture)
                .HasColumnName("MANUAL_AUTH_IS_CAPTURE")
                .HasColumnType("char(1)");

            entity.Property(e => e.OneInventoryFacility)
                .HasColumnName("ONE_INVENTORY_FACILITY")
                .HasColumnType("char(1)");

            entity.Property(e => e.OrderDecimalQuantity)
                .HasColumnName("ORDER_DECIMAL_QUANTITY")
                .HasColumnType("char(1)");

            entity.Property(e => e.OrderNumberPrefix)
                .HasColumnName("ORDER_NUMBER_PREFIX")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.PayToPartyId)
                .HasColumnName("PAY_TO_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PrimaryStoreGroupId)
                .HasColumnName("PRIMARY_STORE_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProdSearchExcludeVariants)
                .HasColumnName("PROD_SEARCH_EXCLUDE_VARIANTS")
                .HasColumnType("char(1)");

            entity.Property(e => e.ProrateShipping)
                .HasColumnName("PRORATE_SHIPPING")
                .HasColumnType("char(1)");

            entity.Property(e => e.ProrateTaxes)
                .HasColumnName("PRORATE_TAXES")
                .HasColumnType("char(1)");

            entity.Property(e => e.ReqReturnInventoryReceive)
                .HasColumnName("REQ_RETURN_INVENTORY_RECEIVE")
                .HasColumnType("char(1)");

            entity.Property(e => e.ReqShipAddrForDigItems)
                .HasColumnName("REQ_SHIP_ADDR_FOR_DIG_ITEMS")
                .HasColumnType("char(1)");

            entity.Property(e => e.RequireCustomerRole)
                .HasColumnName("REQUIRE_CUSTOMER_ROLE")
                .HasColumnType("char(1)");

            entity.Property(e => e.RequireInventory)
                .HasColumnName("REQUIRE_INVENTORY")
                .HasColumnType("char(1)");

            entity.Property(e => e.RequirementMethodEnumId)
                .HasColumnName("REQUIREMENT_METHOD_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReserveInventory)
                .HasColumnName("RESERVE_INVENTORY")
                .HasColumnType("char(1)");

            entity.Property(e => e.ReserveOrderEnumId)
                .HasColumnName("RESERVE_ORDER_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RetryFailedAuths)
                .HasColumnName("RETRY_FAILED_AUTHS")
                .HasColumnType("char(1)");

            entity.Property(e => e.SelectPaymentTypePerItem)
                .HasColumnName("SELECT_PAYMENT_TYPE_PER_ITEM")
                .HasColumnType("char(1)");

            entity.Property(e => e.SetOwnerUponIssuance)
                .HasColumnName("SET_OWNER_UPON_ISSUANCE")
                .HasColumnType("char(1)");

            entity.Property(e => e.ShipIfCaptureFails)
                .HasColumnName("SHIP_IF_CAPTURE_FAILS")
                .HasColumnType("char(1)");

            entity.Property(e => e.ShowCheckoutGiftOptions)
                .HasColumnName("SHOW_CHECKOUT_GIFT_OPTIONS")
                .HasColumnType("char(1)");

            entity.Property(e => e.ShowOutOfStockProducts)
                .HasColumnName("SHOW_OUT_OF_STOCK_PRODUCTS")
                .HasColumnType("char(1)");

            entity.Property(e => e.ShowPricesWithVatTax)
                .HasColumnName("SHOW_PRICES_WITH_VAT_TAX")
                .HasColumnType("char(1)");

            entity.Property(e => e.ShowTaxIsExempt)
                .HasColumnName("SHOW_TAX_IS_EXEMPT")
                .HasColumnType("char(1)");

            entity.Property(e => e.SplitPayPrefPerShpGrp)
                .HasColumnName("SPLIT_PAY_PREF_PER_SHP_GRP")
                .HasColumnType("char(1)");

            entity.Property(e => e.StoreCreditAccountEnumId)
                .HasColumnName("STORE_CREDIT_ACCOUNT_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StoreCreditValidDays)
                .HasColumnName("STORE_CREDIT_VALID_DAYS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.StoreName)
                .HasColumnName("STORE_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.Subtitle)
                .HasColumnName("SUBTITLE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.Title)
                .HasColumnName("TITLE")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.UsePrimaryEmailUsername)
                .HasColumnName("USE_PRIMARY_EMAIL_USERNAME")
                .HasColumnType("char(1)");

            entity.Property(e => e.VatTaxAuthGeoId)
                .HasColumnName("VAT_TAX_AUTH_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.VatTaxAuthPartyId)
                .HasColumnName("VAT_TAX_AUTH_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ViewCartOnAdd)
                .HasColumnName("VIEW_CART_ON_ADD")
                .HasColumnType("char(1)");

            entity.Property(e => e.VisualThemeId)
                .HasColumnName("VISUAL_THEME_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.DefaultCurrencyUom)
                .WithMany(p => p.ProductStores)
                .HasForeignKey(d => d.DefaultCurrencyUomId)
                .HasConstraintName("PROD_STR_CURUOM");

            entity.HasOne(d => d.DefaultSalesChannelEnum)
                .WithMany(p => p.ProductStoreDefaultSalesChannelEnums)
                .HasForeignKey(d => d.DefaultSalesChannelEnumId)
                .HasConstraintName("PROD_STR_SALECHN");

            entity.HasOne(d => d.DigitalItemApprovedStatusNavigation)
                .WithMany(p => p.ProductStoreDigitalItemApprovedStatusNavigations)
                .HasForeignKey(d => d.DigitalItemApprovedStatus)
                .HasConstraintName("PROD_STR_DIAPSTS");

            entity.HasOne(d => d.HeaderApprovedStatusNavigation)
                .WithMany(p => p.ProductStoreHeaderApprovedStatusNavigations)
                .HasForeignKey(d => d.HeaderApprovedStatus)
                .HasConstraintName("PROD_STR_HAPSTS");

            entity.HasOne(d => d.HeaderCancelStatusNavigation)
                .WithMany(p => p.ProductStoreHeaderCancelStatusNavigations)
                .HasForeignKey(d => d.HeaderCancelStatus)
                .HasConstraintName("PROD_STR_HCNSTS");

            entity.HasOne(d => d.HeaderDeclinedStatusNavigation)
                .WithMany(p => p.ProductStoreHeaderDeclinedStatusNavigations)
                .HasForeignKey(d => d.HeaderDeclinedStatus)
                .HasConstraintName("PROD_STR_HDCSTS");

            entity.HasOne(d => d.InventoryFacility)
                .WithMany(p => p.ProductStores)
                .HasForeignKey(d => d.InventoryFacilityId)
                .HasConstraintName("PROD_STR_FACILITY");

            entity.HasOne(d => d.ItemApprovedStatusNavigation)
                .WithMany(p => p.ProductStoreItemApprovedStatusNavigations)
                .HasForeignKey(d => d.ItemApprovedStatus)
                .HasConstraintName("PROD_STR_IAPSTS");

            entity.HasOne(d => d.ItemCancelStatusNavigation)
                .WithMany(p => p.ProductStoreItemCancelStatusNavigations)
                .HasForeignKey(d => d.ItemCancelStatus)
                .HasConstraintName("PROD_STR_ICNSTS");

            entity.HasOne(d => d.ItemDeclinedStatusNavigation)
                .WithMany(p => p.ProductStoreItemDeclinedStatusNavigations)
                .HasForeignKey(d => d.ItemDeclinedStatus)
                .HasConstraintName("PROD_STR_IDCSTS");

            entity.HasOne(d => d.PayToParty)
                .WithMany(p => p.ProductStores)
                .HasForeignKey(d => d.PayToPartyId)
                .HasConstraintName("PROD_STR_PAYTOPTY");

            entity.HasOne(d => d.PrimaryStoreGroup)
                .WithMany(p => p.ProductStores)
                .HasForeignKey(d => d.PrimaryStoreGroupId)
                .HasConstraintName("PROD_STR_PRSTRGP");

            entity.HasOne(d => d.RequirementMethodEnum)
                .WithMany(p => p.ProductStoreRequirementMethodEnums)
                .HasForeignKey(d => d.RequirementMethodEnumId)
                .HasConstraintName("PROD_STR_RQMTENUM");

            entity.HasOne(d => d.ReserveOrderEnum)
                .WithMany(p => p.ProductStoreReserveOrderEnums)
                .HasForeignKey(d => d.ReserveOrderEnumId)
                .HasConstraintName("PROD_STR_RORDENUM");

            entity.HasOne(d => d.StoreCreditAccountEnum)
                .WithMany(p => p.ProductStoreStoreCreditAccountEnums)
                .HasForeignKey(d => d.StoreCreditAccountEnumId)
                .HasConstraintName("PROD_STR_STRCRDACT");

            entity.HasOne(d => d.VatTaxAuth)
                .WithMany(p => p.ProductStores)
                .HasForeignKey(d => new { d.VatTaxAuthGeoId, d.VatTaxAuthPartyId })
                .HasConstraintName("PROD_STR_VATTXA");
        });

        modelBuilder.Entity<ProductStoreCatalog>(entity =>
        {
            entity.HasKey(e => new { e.ProductStoreId, e.ProdCatalogId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PRODUCT_STORE_CATALOG");


            entity.HasIndex(e => e.ProdCatalogId)
                .HasName("PS_CAT_CATALOG");

            entity.HasIndex(e => e.ProductStoreId)
                .HasName("PS_CAT_PRDSTR");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProdCatalogId)
                .HasColumnName("PROD_CATALOG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ProdCatalog)
                .WithMany(p => p.ProductStoreCatalogs)
                .HasForeignKey(d => d.ProdCatalogId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PS_CAT_CATALOG");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.ProductStoreCatalogs)
                .HasForeignKey(d => d.ProductStoreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PS_CAT_PRDSTR");
        });

        modelBuilder.Entity<ProductStoreEmailSetting>(entity =>
        {
            entity.HasKey(e => new { e.ProductStoreId, e.EmailType })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PRODUCT_STORE_EMAIL_SETTING");


            entity.HasIndex(e => e.EmailType)
                .HasName("PRDSTREM_ENUM");


            entity.HasIndex(e => e.ProductStoreId)
                .HasName("PRDSTREM_PRDS");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.EmailType)
                .HasColumnName("EMAIL_TYPE")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BccAddress)
                .HasColumnName("BCC_ADDRESS")
                .HasColumnType("varchar(320)");

            entity.Property(e => e.BodyScreenLocation)
                .HasColumnName("BODY_SCREEN_LOCATION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CcAddress)
                .HasColumnName("CC_ADDRESS")
                .HasColumnType("varchar(320)");

            entity.Property(e => e.ContentType)
                .HasColumnName("CONTENT_TYPE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FromAddress)
                .HasColumnName("FROM_ADDRESS")
                .HasColumnType("varchar(320)");


            entity.Property(e => e.Subject)
                .HasColumnName("SUBJECT")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.XslfoAttachScreenLocation)
                .HasColumnName("XSLFO_ATTACH_SCREEN_LOCATION")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.EmailTypeNavigation)
                .WithMany(p => p.ProductStoreEmailSettings)
                .HasForeignKey(d => d.EmailType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDSTREM_ENUM");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.ProductStoreEmailSettings)
                .HasForeignKey(d => d.ProductStoreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDSTREM_PRDS");
        });

        modelBuilder.Entity<ProductStoreFacility>(entity =>
        {
            entity.HasKey(e => new { e.ProductStoreId, e.FacilityId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PRODUCT_STORE_FACILITY");


            entity.HasIndex(e => e.FacilityId)
                .HasName("PRDSTRFAC_FAC");


            entity.HasIndex(e => e.ProductStoreId)
                .HasName("PRDSTRFAC_PRDS");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Facility)
                .WithMany(p => p.ProductStoreFacilities)
                .HasForeignKey(d => d.FacilityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDSTRFAC_FAC");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.ProductStoreFacilities)
                .HasForeignKey(d => d.ProductStoreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDSTRFAC_PRDS");
        });

        modelBuilder.Entity<ProductStoreFinActSetting>(entity =>
        {
            entity.HasKey(e => new { e.ProductStoreId, e.FinAccountTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PRODUCT_STORE_FIN_ACT_SETTING");


            entity.HasIndex(e => e.FinAccountTypeId)
                .HasName("PRSTFNAC_FNACTP");


            entity.HasIndex(e => e.ProductStoreId)
                .HasName("PRSTFNAC_PRDS");

            entity.HasIndex(e => e.PurchaseSurveyId)
                .HasName("PRSTFNAC_SRVY");

            entity.HasIndex(e => e.ReplenishMethodEnumId)
                .HasName("PRSTFNAC_FARPMTD");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FinAccountTypeId)
                .HasColumnName("FIN_ACCOUNT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AccountCodeLength)
                .HasColumnName("ACCOUNT_CODE_LENGTH")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.AccountValidDays)
                .HasColumnName("ACCOUNT_VALID_DAYS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.AllowAuthToNegative)
                .HasColumnName("ALLOW_AUTH_TO_NEGATIVE")
                .HasColumnType("char(1)");

            entity.Property(e => e.AuthValidDays)
                .HasColumnName("AUTH_VALID_DAYS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.MinBalance)
                .HasColumnName("MIN_BALANCE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.PinCodeLength)
                .HasColumnName("PIN_CODE_LENGTH")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.PurchSurveyCopyMe)
                .HasColumnName("PURCH_SURVEY_COPY_ME")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PurchSurveySendTo)
                .HasColumnName("PURCH_SURVEY_SEND_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PurchaseSurveyId)
                .HasColumnName("PURCHASE_SURVEY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReplenishMethodEnumId)
                .HasColumnName("REPLENISH_METHOD_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReplenishThreshold)
                .HasColumnName("REPLENISH_THRESHOLD")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.RequirePinCode)
                .HasColumnName("REQUIRE_PIN_CODE")
                .HasColumnType("char(1)");

            entity.Property(e => e.ValidateGCFinAcct)
                .HasColumnName("VALIDATE_G_C_FIN_ACCT")
                .HasColumnType("char(1)");

            entity.HasOne(d => d.FinAccountType)
                .WithMany(p => p.ProductStoreFinActSettings)
                .HasForeignKey(d => d.FinAccountTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRSTFNAC_FNACTP");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.ProductStoreFinActSettings)
                .HasForeignKey(d => d.ProductStoreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRSTFNAC_PRDS");

            entity.HasOne(d => d.PurchaseSurvey)
                .WithMany(p => p.ProductStoreFinActSettings)
                .HasForeignKey(d => d.PurchaseSurveyId)
                .HasConstraintName("PRSTFNAC_SRVY");

            entity.HasOne(d => d.ReplenishMethodEnum)
                .WithMany(p => p.ProductStoreFinActSettings)
                .HasForeignKey(d => d.ReplenishMethodEnumId)
                .HasConstraintName("PRSTFNAC_FARPMTD");
        });

        modelBuilder.Entity<ProductStoreGroup>(entity =>
        {
            entity.ToTable("PRODUCT_STORE_GROUP");


            entity.HasIndex(e => e.PrimaryParentGroupId)
                .HasName("PRDSTR_GP_PGRP");

            entity.HasIndex(e => e.ProductStoreGroupTypeId)
                .HasName("PRDSTR_GP_TYPE");

            entity.Property(e => e.ProductStoreGroupId)
                .HasColumnName("PRODUCT_STORE_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.PrimaryParentGroupId)
                .HasColumnName("PRIMARY_PARENT_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductStoreGroupName)
                .HasColumnName("PRODUCT_STORE_GROUP_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.ProductStoreGroupTypeId)
                .HasColumnName("PRODUCT_STORE_GROUP_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.PrimaryParentGroup)
                .WithMany(p => p.InversePrimaryParentGroup)
                .HasForeignKey(d => d.PrimaryParentGroupId)
                .HasConstraintName("PRDSTR_GP_PGRP");

            entity.HasOne(d => d.ProductStoreGroupType)
                .WithMany(p => p.ProductStoreGroups)
                .HasForeignKey(d => d.ProductStoreGroupTypeId)
                .HasConstraintName("PRDSTR_GP_TYPE");
        });

        modelBuilder.Entity<ProductStoreGroupMember>(entity =>
        {
            entity.HasKey(e => new { e.ProductStoreId, e.ProductStoreGroupId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PRODUCT_STORE_GROUP_MEMBER");


            entity.HasIndex(e => e.ProductStoreGroupId)
                .HasName("PRDSTR_MEM_PSGRP");

            entity.HasIndex(e => e.ProductStoreId)
                .HasName("PRDSTR_MEM_PRDSTR");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductStoreGroupId)
                .HasColumnName("PRODUCT_STORE_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ProductStoreGroup)
                .WithMany(p => p.ProductStoreGroupMembers)
                .HasForeignKey(d => d.ProductStoreGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDSTR_MEM_PSGRP");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.ProductStoreGroupMembers)
                .HasForeignKey(d => d.ProductStoreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDSTR_MEM_PRDSTR");
        });

        modelBuilder.Entity<ProductStoreGroupRole>(entity =>
        {
            entity.HasKey(e => new { e.ProductStoreGroupId, e.PartyId, e.RoleTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PRODUCT_STORE_GROUP_ROLE");


            entity.HasIndex(e => e.ProductStoreGroupId)
                .HasName("PSGRP_RLE_PSGP");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("PSGRP_RLE_PTRLE");

            entity.Property(e => e.ProductStoreGroupId)
                .HasColumnName("PRODUCT_STORE_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ProductStoreGroup)
                .WithMany(p => p.ProductStoreGroupRoles)
                .HasForeignKey(d => d.ProductStoreGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PSGRP_RLE_PSGP");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.ProductStoreGroupRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PSGRP_RLE_PTRLE");
        });

        modelBuilder.Entity<ProductStoreGroupRollup>(entity =>
        {
            entity.HasKey(e => new { e.ProductStoreGroupId, e.ParentGroupId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PRODUCT_STORE_GROUP_ROLLUP");


            entity.HasIndex(e => e.ParentGroupId)
                .HasName("PSGRP_RLP_PARENT");

            entity.HasIndex(e => e.ProductStoreGroupId)
                .HasName("PSGRP_RLP_CURRENT");

            entity.Property(e => e.ProductStoreGroupId)
                .HasColumnName("PRODUCT_STORE_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ParentGroupId)
                .HasColumnName("PARENT_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ParentGroup)
                .WithMany(p => p.ProductStoreGroupRollupParentGroups)
                .HasForeignKey(d => d.ParentGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PSGRP_RLP_PARENT");

            entity.HasOne(d => d.ProductStoreGroup)
                .WithMany(p => p.ProductStoreGroupRollupProductStoreGroups)
                .HasForeignKey(d => d.ProductStoreGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PSGRP_RLP_CURRENT");
        });

        modelBuilder.Entity<ProductStoreGroupType>(entity =>
        {
            entity.ToTable("PRODUCT_STORE_GROUP_TYPE");


            entity.Property(e => e.ProductStoreGroupTypeId)
                .HasColumnName("PRODUCT_STORE_GROUP_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<ProductStoreKeywordOvrd>(entity =>
        {
            entity.HasKey(e => new { e.ProductStoreId, e.Keyword, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PRODUCT_STORE_KEYWORD_OVRD");


            entity.HasIndex(e => e.ProductStoreId)
                .HasName("PRDSTRKWO_PRDS");

            entity.HasIndex(e => e.TargetTypeEnumId)
                .HasName("PRDSTRKWO_ENM");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Keyword)
                .HasColumnName("KEYWORD")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Target)
                .HasColumnName("TARGET")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.TargetTypeEnumId)
                .HasColumnName("TARGET_TYPE_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.ProductStoreKeywordOvrds)
                .HasForeignKey(d => d.ProductStoreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDSTRKWO_PRDS");

            entity.HasOne(d => d.TargetTypeEnum)
                .WithMany(p => p.ProductStoreKeywordOvrds)
                .HasForeignKey(d => d.TargetTypeEnumId)
                .HasConstraintName("PRDSTRKWO_ENM");
        });

        modelBuilder.Entity<ProductStorePaymentSetting>(entity =>
        {
            entity.HasKey(e => new { e.ProductStoreId, e.PaymentMethodTypeId, e.PaymentServiceTypeEnumId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PRODUCT_STORE_PAYMENT_SETTING");


            entity.HasIndex(e => e.PaymentCustomMethodId)
                .HasName("PRDS_PS_CUS_MET");

            entity.HasIndex(e => e.PaymentGatewayConfigId)
                .HasName("PRDS_PS_PGC");

            entity.HasIndex(e => e.PaymentMethodTypeId)
                .HasName("PRDS_PS_PMNTTP");

            entity.HasIndex(e => e.PaymentServiceTypeEnumId)
                .HasName("PRDS_PS_ENUM");

            entity.HasIndex(e => e.ProductStoreId)
                .HasName("PRDS_PS_PRDS");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentMethodTypeId)
                .HasColumnName("PAYMENT_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentServiceTypeEnumId)
                .HasColumnName("PAYMENT_SERVICE_TYPE_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ApplyToAllProducts)
                .HasColumnName("APPLY_TO_ALL_PRODUCTS")
                .HasColumnType("char(1)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PaymentCustomMethodId)
                .HasColumnName("PAYMENT_CUSTOM_METHOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentGatewayConfigId)
                .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentPropertiesPath)
                .HasColumnName("PAYMENT_PROPERTIES_PATH")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.PaymentService)
                .HasColumnName("PAYMENT_SERVICE")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.PaymentCustomMethod)
                .WithMany(p => p.ProductStorePaymentSettings)
                .HasForeignKey(d => d.PaymentCustomMethodId)
                .HasConstraintName("PRDS_PS_CUS_MET");

            entity.HasOne(d => d.PaymentGatewayConfig)
                .WithMany(p => p.ProductStorePaymentSettings)
                .HasForeignKey(d => d.PaymentGatewayConfigId)
                .HasConstraintName("PRDS_PS_PGC");

            entity.HasOne(d => d.PaymentMethodType)
                .WithMany(p => p.ProductStorePaymentSettings)
                .HasForeignKey(d => d.PaymentMethodTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDS_PS_PMNTTP");

            entity.HasOne(d => d.PaymentServiceTypeEnum)
                .WithMany(p => p.ProductStorePaymentSettings)
                .HasForeignKey(d => d.PaymentServiceTypeEnumId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDS_PS_ENUM");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.ProductStorePaymentSettings)
                .HasForeignKey(d => d.ProductStoreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDS_PS_PRDS");
        });

        modelBuilder.Entity<ProductStorePromoAppl>(entity =>
        {
            entity.HasKey(e => new { e.ProductStoreId, e.ProductPromoId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PRODUCT_STORE_PROMO_APPL");


            entity.HasIndex(e => e.ProductPromoId)
                .HasName("PRDSTRPRMO_PRMO");

            entity.HasIndex(e => e.ProductStoreId)
                .HasName("PRDSTRPRMO_PRDS");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoId)
                .HasColumnName("PRODUCT_PROMO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ManualOnly)
                .HasColumnName("MANUAL_ONLY")
                .HasColumnType("char(1)");

            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ProductPromo)
                .WithMany(p => p.ProductStorePromoAppls)
                .HasForeignKey(d => d.ProductPromoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDSTRPRMO_PRMO");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.ProductStorePromoAppls)
                .HasForeignKey(d => d.ProductStoreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDSTRPRMO_PRDS");
        });

        modelBuilder.Entity<ProductStoreRole>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.RoleTypeId, e.ProductStoreId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PRODUCT_STORE_ROLE");


            entity.HasIndex(e => e.ProductStoreId)
                .HasName("PRDSTRRLE_PRDS");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("PRDSTRRLE_PRLE");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.ProductStoreRoles)
                .HasForeignKey(d => d.ProductStoreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDSTRRLE_PRDS");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.ProductStoreRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDSTRRLE_PRLE");
        });

        modelBuilder.Entity<ProductStoreShipmentMeth>(entity =>
        {
            entity.HasKey(e => e.ProductStoreShipMethId)
                .HasName("PRIMARY");

            entity.ToTable("PRODUCT_STORE_SHIPMENT_METH");


            entity.HasIndex(e => e.ShipmentCustomMethodId)
                .HasName("PRDS_SM_CUS_MET");

            entity.HasIndex(e => e.ShipmentGatewayConfigId)
                .HasName("PRDS_SM_SGC");

            entity.HasIndex(e => e.ShipmentMethodTypeId)
                .HasName("SHIPMENTMETHODTYPE");

            entity.Property(e => e.ProductStoreShipMethId)
                .HasColumnName("PRODUCT_STORE_SHIP_METH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AllowCompanyAddr)
                .HasColumnName("ALLOW_COMPANY_ADDR")
                .HasColumnType("char(1)");

            entity.Property(e => e.AllowUspsAddr)
                .HasColumnName("ALLOW_USPS_ADDR")
                .HasColumnType("char(1)");

            entity.Property(e => e.AllowancePercent)
                .HasColumnName("ALLOWANCE_PERCENT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.CompanyPartyId)
                .HasColumnName("COMPANY_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ConfigProps)
                .HasColumnName("CONFIG_PROPS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ExcludeFeatureGroup)
                .HasColumnName("EXCLUDE_FEATURE_GROUP")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ExcludeGeoId)
                .HasColumnName("EXCLUDE_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.IncludeFeatureGroup)
                .HasColumnName("INCLUDE_FEATURE_GROUP")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.IncludeGeoId)
                .HasColumnName("INCLUDE_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.IncludeNoChargeItems)
                .HasColumnName("INCLUDE_NO_CHARGE_ITEMS")
                .HasColumnType("char(1)");


            entity.Property(e => e.MaxSize)
                .HasColumnName("MAX_SIZE")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.MaxTotal)
                .HasColumnName("MAX_TOTAL")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.MaxWeight)
                .HasColumnName("MAX_WEIGHT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.MinSize)
                .HasColumnName("MIN_SIZE")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.MinTotal)
                .HasColumnName("MIN_TOTAL")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.MinWeight)
                .HasColumnName("MIN_WEIGHT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.MinimumPrice)
                .HasColumnName("MINIMUM_PRICE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RequireCompanyAddr)
                .HasColumnName("REQUIRE_COMPANY_ADDR")
                .HasColumnType("char(1)");

            entity.Property(e => e.RequireUspsAddr)
                .HasColumnName("REQUIRE_USPS_ADDR")
                .HasColumnType("char(1)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SequenceNumber)
                .HasColumnName("SEQUENCE_NUMBER")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ServiceName)
                .HasColumnName("SERVICE_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ShipmentCustomMethodId)
                .HasColumnName("SHIPMENT_CUSTOM_METHOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentGatewayConfigId)
                .HasColumnName("SHIPMENT_GATEWAY_CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentMethodTypeId)
                .HasColumnName("SHIPMENT_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ShipmentCustomMethod)
                .WithMany(p => p.ProductStoreShipmentMeths)
                .HasForeignKey(d => d.ShipmentCustomMethodId)
                .HasConstraintName("PRDS_SM_CUS_MET");

            entity.HasOne(d => d.ShipmentGatewayConfig)
                .WithMany(p => p.ProductStoreShipmentMeths)
                .HasForeignKey(d => d.ShipmentGatewayConfigId)
                .HasConstraintName("PRDS_SM_SGC");

            entity.HasOne(d => d.ShipmentMethodType)
                .WithMany(p => p.ProductStoreShipmentMeths)
                .HasForeignKey(d => d.ShipmentMethodTypeId)
                .HasConstraintName("SHIPMENTMETHODTYPE");
        });

        modelBuilder.Entity<ProductStoreSurveyAppl>(entity =>
        {
            entity.HasKey(e => e.ProductStoreSurveyId)
                .HasName("PRIMARY");

            entity.ToTable("PRODUCT_STORE_SURVEY_APPL");


            entity.HasIndex(e => e.ProductStoreId)
                .HasName("PRDSTRSVY_PRDS");

            entity.HasIndex(e => e.SurveyApplTypeId)
                .HasName("PRDSTRSVY_SATP");

            entity.HasIndex(e => e.SurveyId)
                .HasName("PRDSTRSVY_SRVY");

            entity.Property(e => e.ProductStoreSurveyId)
                .HasColumnName("PRODUCT_STORE_SURVEY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.GroupName)
                .HasColumnName("GROUP_NAME")
                .HasColumnType("varchar(100)");


            entity.Property(e => e.ProductCategoryId)
                .HasColumnName("PRODUCT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ResultTemplate)
                .HasColumnName("RESULT_TEMPLATE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.SurveyApplTypeId)
                .HasColumnName("SURVEY_APPL_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SurveyId)
                .HasColumnName("SURVEY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SurveyTemplate)
                .HasColumnName("SURVEY_TEMPLATE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.ProductStoreSurveyAppls)
                .HasForeignKey(d => d.ProductStoreId)
                .HasConstraintName("PRDSTRSVY_PRDS");

            entity.HasOne(d => d.SurveyApplType)
                .WithMany(p => p.ProductStoreSurveyAppls)
                .HasForeignKey(d => d.SurveyApplTypeId)
                .HasConstraintName("PRDSTRSVY_SATP");

            entity.HasOne(d => d.Survey)
                .WithMany(p => p.ProductStoreSurveyAppls)
                .HasForeignKey(d => d.SurveyId)
                .HasConstraintName("PRDSTRSVY_SRVY");
        });

        modelBuilder.Entity<ProductStoreTelecomSetting>(entity =>
        {
            entity.HasKey(e => new { e.ProductStoreId, e.TelecomMethodTypeId, e.TelecomMsgTypeEnumId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PRODUCT_STORE_TELECOM_SETTING");


            entity.HasIndex(e => e.ProductStoreId)
                .HasName("PRDS_TS_PRDS");

            entity.HasIndex(e => e.TelecomCustomMethodId)
                .HasName("PRDS_TS_CUS_MET");

            entity.HasIndex(e => e.TelecomGatewayConfigId)
                .HasName("PRDS_TS_PGC");

            entity.HasIndex(e => e.TelecomMethodTypeId)
                .HasName("PRDS_TS_TELTP");

            entity.HasIndex(e => e.TelecomMsgTypeEnumId)
                .HasName("PRDS_TS_ENUM");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TelecomMethodTypeId)
                .HasColumnName("TELECOM_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TelecomMsgTypeEnumId)
                .HasColumnName("TELECOM_MSG_TYPE_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.TelecomCustomMethodId)
                .HasColumnName("TELECOM_CUSTOM_METHOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TelecomGatewayConfigId)
                .HasColumnName("TELECOM_GATEWAY_CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.ProductStoreTelecomSettings)
                .HasForeignKey(d => d.ProductStoreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDS_TS_PRDS");

            entity.HasOne(d => d.TelecomCustomMethod)
                .WithMany(p => p.ProductStoreTelecomSettings)
                .HasForeignKey(d => d.TelecomCustomMethodId)
                .HasConstraintName("PRDS_TS_CUS_MET");

            entity.HasOne(d => d.TelecomGatewayConfig)
                .WithMany(p => p.ProductStoreTelecomSettings)
                .HasForeignKey(d => d.TelecomGatewayConfigId)
                .HasConstraintName("PRDS_TS_PGC");

            entity.HasOne(d => d.TelecomMethodType)
                .WithMany(p => p.ProductStoreTelecomSettings)
                .HasForeignKey(d => d.TelecomMethodTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDS_TS_TELTP");

            entity.HasOne(d => d.TelecomMsgTypeEnum)
                .WithMany(p => p.ProductStoreTelecomSettings)
                .HasForeignKey(d => d.TelecomMsgTypeEnumId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDS_TS_ENUM");
        });

        modelBuilder.Entity<ProductStoreVendorPayment>(entity =>
        {
            entity.HasKey(e => new { e.ProductStoreId, e.VendorPartyId, e.PaymentMethodTypeId, e.CreditCardEnumId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PRODUCT_STORE_VENDOR_PAYMENT");


            entity.HasIndex(e => e.CreditCardEnumId)
                .HasName("PRDSTRVPM_CCEN");


            entity.HasIndex(e => e.PaymentMethodTypeId)
                .HasName("PRDSTRVPM_PMMT");

            entity.HasIndex(e => e.ProductStoreId)
                .HasName("PRDSTRVPM_PRDS");

            entity.HasIndex(e => e.VendorPartyId)
                .HasName("PRDSTRVPM_VPTY");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.VendorPartyId)
                .HasColumnName("VENDOR_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentMethodTypeId)
                .HasColumnName("PAYMENT_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreditCardEnumId)
                .HasColumnName("CREDIT_CARD_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.CreditCardEnum)
                .WithMany(p => p.ProductStoreVendorPayments)
                .HasForeignKey(d => d.CreditCardEnumId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDSTRVPM_CCEN");

            entity.HasOne(d => d.PaymentMethodType)
                .WithMany(p => p.ProductStoreVendorPayments)
                .HasForeignKey(d => d.PaymentMethodTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDSTRVPM_PMMT");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.ProductStoreVendorPayments)
                .HasForeignKey(d => d.ProductStoreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDSTRVPM_PRDS");

            entity.HasOne(d => d.VendorParty)
                .WithMany(p => p.ProductStoreVendorPayments)
                .HasForeignKey(d => d.VendorPartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDSTRVPM_VPTY");
        });

        modelBuilder.Entity<ProductStoreVendorShipment>(entity =>
        {
            entity.HasKey(e => new { e.ProductStoreId, e.VendorPartyId, e.ShipmentMethodTypeId, e.CarrierPartyId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("PRODUCT_STORE_VENDOR_SHIPMENT");

            entity.HasIndex(e => e.CarrierPartyId)
                .HasName("PRDSTRVSH_CPTY");


            entity.HasIndex(e => e.ProductStoreId)
                .HasName("PRDSTRVSH_PRDS");

            entity.HasIndex(e => e.ShipmentMethodTypeId)
                .HasName("PRDSTRVSH_SHMT");

            entity.HasIndex(e => e.VendorPartyId)
                .HasName("PRDSTRVSH_VPTY");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.VendorPartyId)
                .HasColumnName("VENDOR_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentMethodTypeId)
                .HasColumnName("SHIPMENT_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CarrierPartyId)
                .HasColumnName("CARRIER_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.CarrierParty)
                .WithMany(p => p.ProductStoreVendorShipmentCarrierParties)
                .HasForeignKey(d => d.CarrierPartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDSTRVSH_CPTY");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.ProductStoreVendorShipments)
                .HasForeignKey(d => d.ProductStoreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDSTRVSH_PRDS");

            entity.HasOne(d => d.ShipmentMethodType)
                .WithMany(p => p.ProductStoreVendorShipments)
                .HasForeignKey(d => d.ShipmentMethodTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDSTRVSH_SHMT");

            entity.HasOne(d => d.VendorParty)
                .WithMany(p => p.ProductStoreVendorShipmentVendorParties)
                .HasForeignKey(d => d.VendorPartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PRDSTRVSH_VPTY");
        });

        modelBuilder.Entity<ProductSubscriptionResource>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.SubscriptionResourceId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("PRODUCT_SUBSCRIPTION_RESOURCE");

            entity.HasIndex(e => e.AvailableTimeUomId)
                .HasName("PROD_SBRS_ATU");

            entity.HasIndex(e => e.CanclAutmExtTimeUomId)
                .HasName("PROD_SBRS_CTU");


            entity.HasIndex(e => e.GracePeriodOnExpiryUomId)
                .HasName("PROD_SBRS_GTU");


            entity.HasIndex(e => e.MaxLifeTimeUomId)
                .HasName("PROD_SBRS_MTU");

            entity.HasIndex(e => e.ProductId)
                .HasName("PROD_SBRS_PROD");

            entity.HasIndex(e => e.SubscriptionResourceId)
                .HasName("PROD_SBRS_SBRS");

            entity.HasIndex(e => e.UseRoleTypeId)
                .HasName("PROD_SBRS_URT");

            entity.HasIndex(e => e.UseTimeUomId)
                .HasName("PROD_SBRS_UTU");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.SubscriptionResourceId)
                .HasColumnName("SUBSCRIPTION_RESOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.AutomaticExtend)
                .HasColumnName("AUTOMATIC_EXTEND")
                .HasColumnType("char(1)");

            entity.Property(e => e.AvailableTime)
                .HasColumnName("AVAILABLE_TIME")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.AvailableTimeUomId)
                .HasColumnName("AVAILABLE_TIME_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CanclAutmExtTime)
                .HasColumnName("CANCL_AUTM_EXT_TIME")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.CanclAutmExtTimeUomId)
                .HasColumnName("CANCL_AUTM_EXT_TIME_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GracePeriodOnExpiry)
                .HasColumnName("GRACE_PERIOD_ON_EXPIRY")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.GracePeriodOnExpiryUomId)
                .HasColumnName("GRACE_PERIOD_ON_EXPIRY_UOM_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.MaxLifeTime)
                .HasColumnName("MAX_LIFE_TIME")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.MaxLifeTimeUomId)
                .HasColumnName("MAX_LIFE_TIME_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PurchaseFromDate)
                .HasColumnName("PURCHASE_FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.PurchaseThruDate)
                .HasColumnName("PURCHASE_THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.UseCountLimit)
                .HasColumnName("USE_COUNT_LIMIT")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.UseRoleTypeId)
                .HasColumnName("USE_ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.UseTime)
                .HasColumnName("USE_TIME")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.UseTimeUomId)
                .HasColumnName("USE_TIME_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.AvailableTimeUom)
                .WithMany(p => p.ProductSubscriptionResourceAvailableTimeUoms)
                .HasForeignKey(d => d.AvailableTimeUomId)
                .HasConstraintName("PROD_SBRS_ATU");

            entity.HasOne(d => d.CanclAutmExtTimeUom)
                .WithMany(p => p.ProductSubscriptionResourceCanclAutmExtTimeUoms)
                .HasForeignKey(d => d.CanclAutmExtTimeUomId)
                .HasConstraintName("PROD_SBRS_CTU");

            entity.HasOne(d => d.GracePeriodOnExpiryUom)
                .WithMany(p => p.ProductSubscriptionResourceGracePeriodOnExpiryUoms)
                .HasForeignKey(d => d.GracePeriodOnExpiryUomId)
                .HasConstraintName("PROD_SBRS_GTU");

            entity.HasOne(d => d.MaxLifeTimeUom)
                .WithMany(p => p.ProductSubscriptionResourceMaxLifeTimeUoms)
                .HasForeignKey(d => d.MaxLifeTimeUomId)
                .HasConstraintName("PROD_SBRS_MTU");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ProductSubscriptionResources)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_SBRS_PROD");

            entity.HasOne(d => d.SubscriptionResource)
                .WithMany(p => p.ProductSubscriptionResources)
                .HasForeignKey(d => d.SubscriptionResourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_SBRS_SBRS");

            entity.HasOne(d => d.UseRoleType)
                .WithMany(p => p.ProductSubscriptionResources)
                .HasForeignKey(d => d.UseRoleTypeId)
                .HasConstraintName("PROD_SBRS_URT");

            entity.HasOne(d => d.UseTimeUom)
                .WithMany(p => p.ProductSubscriptionResourceUseTimeUoms)
                .HasForeignKey(d => d.UseTimeUomId)
                .HasConstraintName("PROD_SBRS_UTU");
        });

        modelBuilder.Entity<ProductType>(entity =>
        {
            entity.ToTable("PRODUCT_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("PROD_TYPE_PARENT");

            entity.Property(e => e.ProductTypeId)
                .HasColumnName("PRODUCT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");

            entity.Property(e => e.IsDigital)
                .HasColumnName("IS_DIGITAL")
                .HasColumnType("char(1)");

            entity.Property(e => e.IsPhysical)
                .HasColumnName("IS_PHYSICAL")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("PROD_TYPE_PARENT")
                .IsRequired(false);
        });

        modelBuilder.Entity<ProductTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.ProductTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PRODUCT_TYPE_ATTR");


            entity.HasIndex(e => e.ProductTypeId)
                .HasName("PROD_TYPE_ATTR");

            entity.Property(e => e.ProductTypeId)
                .HasColumnName("PRODUCT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.ProductType)
                .WithMany(p => p.ProductTypeAttrs)
                .HasForeignKey(d => d.ProductTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_TYPE_ATTR");
        });

        modelBuilder.Entity<ProtectedView>(entity =>
        {
            entity.HasKey(e => new { e.GroupId, e.ViewNameId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("PROTECTED_VIEW");


            entity.HasIndex(e => e.GroupId)
                .HasName("VIEW_SECGRP_GRP");


            entity.Property(e => e.GroupId)
                .HasColumnName("GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ViewNameId)
                .HasColumnName("VIEW_NAME_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.MaxHits)
                .HasColumnName("MAX_HITS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.MaxHitsDuration)
                .HasColumnName("MAX_HITS_DURATION")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.TarpitDuration)
                .HasColumnName("TARPIT_DURATION")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.Group)
                .WithMany(p => p.ProtectedViews)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("VIEW_SECGRP_GRP");
        });

        modelBuilder.Entity<ProtocolType>(entity =>
        {
            entity.ToTable("PROTOCOL_TYPE");


            entity.Property(e => e.ProtocolTypeId)
                .HasColumnName("PROTOCOL_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ProtocolName)
                .HasColumnName("PROTOCOL_NAME")
                .HasColumnType("varchar(100)");
        });

        modelBuilder.Entity<QuantityBreak>(entity =>
        {
            entity.ToTable("QUANTITY_BREAK");


            entity.HasIndex(e => e.QuantityBreakTypeId)
                .HasName("QUANT_BRK_TYPE");

            entity.Property(e => e.QuantityBreakId)
                .HasColumnName("QUANTITY_BREAK_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FromQuantity)
                .HasColumnName("FROM_QUANTITY")
                .HasColumnType("decimal(18,6)");


            entity.Property(e => e.QuantityBreakTypeId)
                .HasColumnName("QUANTITY_BREAK_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruQuantity)
                .HasColumnName("THRU_QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.HasOne(d => d.QuantityBreakType)
                .WithMany(p => p.QuantityBreaks)
                .HasForeignKey(d => d.QuantityBreakTypeId)
                .HasConstraintName("QUANT_BRK_TYPE");
        });

        modelBuilder.Entity<QuantityBreakType>(entity =>
        {
            entity.ToTable("QUANTITY_BREAK_TYPE");


            entity.Property(e => e.QuantityBreakTypeId)
                .HasColumnName("QUANTITY_BREAK_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<Quote>(entity =>
        {
            entity.ToTable("QUOTE");


            entity.HasIndex(e => e.CurrencyUomId)
                .HasName("QUOTE_CUOM");


            entity.HasIndex(e => e.PartyId)
                .HasName("QUOTE_PRTY");

            entity.HasIndex(e => e.ProductStoreId)
                .HasName("QUOTE_PRDS");

            entity.HasIndex(e => e.QuoteTypeId)
                .HasName("QUOTE_QTTYP");

            entity.HasIndex(e => e.SalesChannelEnumId)
                .HasName("QUOTE_CHANNEL");

            entity.HasIndex(e => e.StatusId)
                .HasName("QUOTE_STATUS");

            entity.Property(e => e.QuoteId)
                .HasColumnName("QUOTE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrencyUomId)
                .HasColumnName("CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.IssueDate)
                .HasColumnName("ISSUE_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.QuoteName)
                .HasColumnName("QUOTE_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.QuoteTypeId)
                .HasColumnName("QUOTE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SalesChannelEnumId)
                .HasColumnName("SALES_CHANNEL_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ValidFromDate)
                .HasColumnName("VALID_FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ValidThruDate)
                .HasColumnName("VALID_THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.CurrencyUom)
                .WithMany(p => p.Quotes)
                .HasForeignKey(d => d.CurrencyUomId)
                .HasConstraintName("QUOTE_CUOM");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.Quotes)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("QUOTE_PRTY");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.Quotes)
                .HasForeignKey(d => d.ProductStoreId)
                .HasConstraintName("QUOTE_PRDS");

            entity.HasOne(d => d.QuoteType)
                .WithMany(p => p.Quotes)
                .HasForeignKey(d => d.QuoteTypeId)
                .HasConstraintName("QUOTE_QTTYP");

            entity.HasOne(d => d.SalesChannelEnum)
                .WithMany(p => p.Quotes)
                .HasForeignKey(d => d.SalesChannelEnumId)
                .HasConstraintName("QUOTE_CHANNEL");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.Quotes)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("QUOTE_STATUS");
        });

        modelBuilder.Entity<QuoteAdjustment>(entity =>
        {
            entity.ToTable("QUOTE_ADJUSTMENT");

            entity.HasIndex(e => e.CreatedByUserLogin)
                .HasName("QUOTE_ADJ_USERL");


            entity.HasIndex(e => e.OverrideGlAccountId)
                .HasName("QUOTE_ADJ_OGLA");

            entity.HasIndex(e => e.PrimaryGeoId)
                .HasName("QUOTE_ADJ_PRGEO");

            entity.HasIndex(e => e.ProductPromoId)
                .HasName("QUOTE_ADJ_PROMO");

            entity.HasIndex(e => e.QuoteAdjustmentTypeId)
                .HasName("QUOTE_ADJ_TYPE");

            entity.HasIndex(e => e.QuoteId)
                .HasName("QUOTE_ADJ_OHEAD");

            entity.HasIndex(e => e.SecondaryGeoId)
                .HasName("QUOTE_ADJ_SCGEO");

            entity.HasIndex(e => new { e.TaxAuthGeoId, e.TaxAuthPartyId })
                .HasName("QUOTE_ADJ_TXA");

            entity.Property(e => e.QuoteAdjustmentId)
                .HasColumnName("QUOTE_ADJUSTMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CorrespondingProductId)
                .HasColumnName("CORRESPONDING_PRODUCT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedDate)
                .HasColumnName("CREATED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CustomerReferenceId)
                .HasColumnName("CUSTOMER_REFERENCE_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ExemptAmount)
                .HasColumnName("EXEMPT_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.IncludeInShipping)
                .HasColumnName("INCLUDE_IN_SHIPPING")
                .HasColumnType("char(1)");

            entity.Property(e => e.IncludeInTax)
                .HasColumnName("INCLUDE_IN_TAX")
                .HasColumnType("char(1)");

            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.LastModifiedDate)
                .HasColumnName("LAST_MODIFIED_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.OverrideGlAccountId)
                .HasColumnName("OVERRIDE_GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PrimaryGeoId)
                .HasColumnName("PRIMARY_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductFeatureId)
                .HasColumnName("PRODUCT_FEATURE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoActionSeqId)
                .HasColumnName("PRODUCT_PROMO_ACTION_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoId)
                .HasColumnName("PRODUCT_PROMO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoRuleId)
                .HasColumnName("PRODUCT_PROMO_RULE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.QuoteAdjustmentTypeId)
                .HasColumnName("QUOTE_ADJUSTMENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.QuoteId)
                .HasColumnName("QUOTE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.QuoteItemSeqId)
                .HasColumnName("QUOTE_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SecondaryGeoId)
                .HasColumnName("SECONDARY_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SourcePercentage)
                .HasColumnName("SOURCE_PERCENTAGE")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.SourceReferenceId)
                .HasColumnName("SOURCE_REFERENCE_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.TaxAuthGeoId)
                .HasColumnName("TAX_AUTH_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TaxAuthPartyId)
                .HasColumnName("TAX_AUTH_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.CreatedByUserLoginNavigation)
                .WithMany(p => p.QuoteAdjustments)
                .HasForeignKey(d => d.CreatedByUserLogin)
                .HasConstraintName("QUOTE_ADJ_USERL");

            entity.HasOne(d => d.OverrideGlAccount)
                .WithMany(p => p.QuoteAdjustments)
                .HasForeignKey(d => d.OverrideGlAccountId)
                .HasConstraintName("QUOTE_ADJ_OGLA");

            entity.HasOne(d => d.PrimaryGeo)
                .WithMany(p => p.QuoteAdjustmentPrimaryGeos)
                .HasForeignKey(d => d.PrimaryGeoId)
                .HasConstraintName("QUOTE_ADJ_PRGEO");

            entity.HasOne(d => d.ProductPromo)
                .WithMany(p => p.QuoteAdjustments)
                .HasForeignKey(d => d.ProductPromoId)
                .HasConstraintName("QUOTE_ADJ_PROMO");

            entity.HasOne(d => d.QuoteAdjustmentType)
                .WithMany(p => p.QuoteAdjustments)
                .HasForeignKey(d => d.QuoteAdjustmentTypeId)
                .HasConstraintName("QUOTE_ADJ_TYPE");

            entity.HasOne(d => d.Quote)
                .WithMany(p => p.QuoteAdjustments)
                .HasForeignKey(d => d.QuoteId)
                .HasConstraintName("QUOTE_ADJ_OHEAD");

            entity.HasOne(d => d.SecondaryGeo)
                .WithMany(p => p.QuoteAdjustmentSecondaryGeos)
                .HasForeignKey(d => d.SecondaryGeoId)
                .HasConstraintName("QUOTE_ADJ_SCGEO");

            entity.HasOne(d => d.TaxAuth)
                .WithMany(p => p.QuoteAdjustments)
                .HasForeignKey(d => new { d.TaxAuthGeoId, d.TaxAuthPartyId })
                .HasConstraintName("QUOTE_ADJ_TXA");
        });

        modelBuilder.Entity<QuoteAttribute>(entity =>
        {
            entity.HasKey(e => new { e.QuoteId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("QUOTE_ATTRIBUTE");


            entity.HasIndex(e => e.QuoteId)
                .HasName("QUOTE_ATTR");

            entity.Property(e => e.QuoteId)
                .HasColumnName("QUOTE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Quote)
                .WithMany(p => p.QuoteAttributes)
                .HasForeignKey(d => d.QuoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("QUOTE_ATTR");
        });

        modelBuilder.Entity<QuoteCoefficient>(entity =>
        {
            entity.HasKey(e => new { e.QuoteId, e.CoeffName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("QUOTE_COEFFICIENT");


            entity.HasIndex(e => e.QuoteId)
                .HasName("QUOTE_COEFF");

            entity.Property(e => e.QuoteId)
                .HasColumnName("QUOTE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CoeffName)
                .HasColumnName("COEFF_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CoeffValue)
                .HasColumnName("COEFF_VALUE")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Quote)
                .WithMany(p => p.QuoteCoefficients)
                .HasForeignKey(d => d.QuoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("QUOTE_COEFF");
        });

        modelBuilder.Entity<QuoteItem>(entity =>
        {
            entity.HasKey(e => new { e.QuoteId, e.QuoteItemSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("QUOTE_ITEM");


            entity.HasIndex(e => e.CustRequestId)
                .HasName("QUOTE_ITM_CSRQ");

            entity.HasIndex(e => e.DeliverableTypeId)
                .HasName("QUOTE_ITM_DELT");


            entity.HasIndex(e => e.ProductFeatureId)
                .HasName("QUOTE_ITM_PFEAT");

            entity.HasIndex(e => e.ProductId)
                .HasName("QUOTE_ITM_PROD");

            entity.HasIndex(e => e.QuoteId)
                .HasName("QUOTE_ITM_QTE");

            entity.HasIndex(e => e.SkillTypeId)
                .HasName("QUOTE_ITM_SKLT");

            entity.HasIndex(e => e.UomId)
                .HasName("QUOTE_ITM_UOM");

            entity.HasIndex(e => e.WorkEffortId)
                .HasName("QUOTE_ITM_WKEFF");

            entity.HasIndex(e => new { e.CustRequestId, e.CustRequestItemSeqId })
                .HasName("QUOTE_ITM_CSRITM");

            entity.Property(e => e.QuoteId)
                .HasColumnName("QUOTE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.QuoteItemSeqId)
                .HasColumnName("QUOTE_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ConfigId)
                .HasColumnName("CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CustRequestId)
                .HasColumnName("CUST_REQUEST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CustRequestItemSeqId)
                .HasColumnName("CUST_REQUEST_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DeliverableTypeId)
                .HasColumnName("DELIVERABLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.EstimatedDeliveryDate)
                .HasColumnName("ESTIMATED_DELIVERY_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.IsPromo)
                .HasColumnName("IS_PROMO")
                .HasColumnType("char(1)");


            entity.Property(e => e.LeadTimeDays)
                .HasColumnName("LEAD_TIME_DAYS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ProductFeatureId)
                .HasColumnName("PRODUCT_FEATURE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.QuoteUnitPrice)
                .HasColumnName("QUOTE_UNIT_PRICE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.ReservLength)
                .HasColumnName("RESERV_LENGTH")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReservPersons)
                .HasColumnName("RESERV_PERSONS")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReservStart)
                .HasColumnName("RESERV_START")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.SelectedAmount)
                .HasColumnName("SELECTED_AMOUNT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.SkillTypeId)
                .HasColumnName("SKILL_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.UomId)
                .HasColumnName("UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.CustRequest)
                .WithMany(p => p.QuoteItems)
                .HasForeignKey(d => d.CustRequestId)
                .HasConstraintName("QUOTE_ITM_CSRQ");

            entity.HasOne(d => d.DeliverableType)
                .WithMany(p => p.QuoteItems)
                .HasForeignKey(d => d.DeliverableTypeId)
                .HasConstraintName("QUOTE_ITM_DELT");

            entity.HasOne(d => d.ProductFeature)
                .WithMany(p => p.QuoteItems)
                .HasForeignKey(d => d.ProductFeatureId)
                .HasConstraintName("QUOTE_ITM_PFEAT");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.QuoteItems)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("QUOTE_ITM_PROD");

            entity.HasOne(d => d.Quote)
                .WithMany(p => p.QuoteItems)
                .HasForeignKey(d => d.QuoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("QUOTE_ITM_QTE");

            entity.HasOne(d => d.SkillType)
                .WithMany(p => p.QuoteItems)
                .HasForeignKey(d => d.SkillTypeId)
                .HasConstraintName("QUOTE_ITM_SKLT");

            entity.HasOne(d => d.Uom)
                .WithMany(p => p.QuoteItems)
                .HasForeignKey(d => d.UomId)
                .HasConstraintName("QUOTE_ITM_UOM");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.QuoteItems)
                .HasForeignKey(d => d.WorkEffortId)
                .HasConstraintName("QUOTE_ITM_WKEFF");

            entity.HasOne(d => d.CustRequestI)
                .WithMany(p => p.QuoteItems)
                .HasForeignKey(d => new { d.CustRequestId, d.CustRequestItemSeqId })
                .HasConstraintName("QUOTE_ITM_CSRITM");
        });

        modelBuilder.Entity<QuoteNote>(entity =>
        {
            entity.HasKey(e => new { e.QuoteId, e.NoteId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("QUOTE_NOTE");


            entity.HasIndex(e => e.NoteId)
                .HasName("QUOTE_NT_NOTE");

            entity.HasIndex(e => e.QuoteId)
                .HasName("QUOTE_NT_QTE");

            entity.Property(e => e.QuoteId)
                .HasColumnName("QUOTE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.NoteId)
                .HasColumnName("NOTE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Note)
                .WithMany(p => p.QuoteNotes)
                .HasForeignKey(d => d.NoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("QUOTE_NT_NOTE");

            entity.HasOne(d => d.Quote)
                .WithMany(p => p.QuoteNotes)
                .HasForeignKey(d => d.QuoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("QUOTE_NT_QTE");
        });

        modelBuilder.Entity<QuoteRole>(entity =>
        {
            entity.HasKey(e => new { e.QuoteId, e.PartyId, e.RoleTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("QUOTE_ROLE");


            entity.HasIndex(e => e.PartyId)
                .HasName("QUOTE_RL_PARTY");

            entity.HasIndex(e => e.QuoteId)
                .HasName("QUOTE_RL_QUOTE");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("QUOTE_RL_PROLE");

            entity.Property(e => e.QuoteId)
                .HasColumnName("QUOTE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.QuoteRoles)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("QUOTE_RL_PARTY");

            entity.HasOne(d => d.Quote)
                .WithMany(p => p.QuoteRoles)
                .HasForeignKey(d => d.QuoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("QUOTE_RL_QUOTE");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.QuoteRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("QUOTE_RL_PROLE");
        });

        modelBuilder.Entity<QuoteTerm>(entity =>
        {
            entity.HasKey(e => new { e.TermTypeId, e.QuoteId, e.QuoteItemSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("QUOTE_TERM");


            entity.HasIndex(e => e.QuoteId)
                .HasName("QUOTE_TERM_QTE");

            entity.HasIndex(e => e.TermTypeId)
                .HasName("QUOTE_TERM_TTYPE");

            entity.Property(e => e.TermTypeId)
                .HasColumnName("TERM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.QuoteId)
                .HasColumnName("QUOTE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.QuoteItemSeqId)
                .HasColumnName("QUOTE_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.TermDays)
                .HasColumnName("TERM_DAYS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.TermValue)
                .HasColumnName("TERM_VALUE")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.TextValue)
                .HasColumnName("TEXT_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.UomId)
                .HasColumnName("UOM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Quote)
                .WithMany(p => p.QuoteTerms)
                .HasForeignKey(d => d.QuoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("QUOTE_TERM_QTE");

            entity.HasOne(d => d.TermType)
                .WithMany(p => p.QuoteTerms)
                .HasForeignKey(d => d.TermTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("QUOTE_TERM_TTYPE");
        });

        modelBuilder.Entity<QuoteTermAttribute>(entity =>
        {
            entity.HasKey(e => new { e.TermTypeId, e.QuoteId, e.QuoteItemSeqId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("QUOTE_TERM_ATTRIBUTE");


            entity.HasIndex(e => new { e.TermTypeId, e.QuoteId, e.QuoteItemSeqId })
                .HasName("QUOTE_TERM_ATTR");

            entity.Property(e => e.TermTypeId)
                .HasColumnName("TERM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.QuoteId)
                .HasColumnName("QUOTE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.QuoteItemSeqId)
                .HasColumnName("QUOTE_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.QuoteTerm)
                .WithMany(p => p.QuoteTermAttributes)
                .HasForeignKey(d => new { d.TermTypeId, d.QuoteId, d.QuoteItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("QUOTE_TERM_ATTR");
        });

        modelBuilder.Entity<QuoteType>(entity =>
        {
            entity.ToTable("QUOTE_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("QUOTE_TYPE_PAR");

            entity.Property(e => e.QuoteTypeId)
                .HasColumnName("QUOTE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("QUOTE_TYPE_PAR");
        });

        modelBuilder.Entity<QuoteTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.QuoteTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("QUOTE_TYPE_ATTR");


            entity.HasIndex(e => e.QuoteTypeId)
                .HasName("QUOTE_TPAT_QTYP");

            entity.Property(e => e.QuoteTypeId)
                .HasColumnName("QUOTE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.QuoteType)
                .WithMany(p => p.QuoteTypeAttrs)
                .HasForeignKey(d => d.QuoteTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("QUOTE_TPAT_QTYP");
        });

        modelBuilder.Entity<QuoteWorkEffort>(entity =>
        {
            entity.HasKey(e => new { e.QuoteId, e.WorkEffortId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("QUOTE_WORK_EFFORT");


            entity.HasIndex(e => e.QuoteId)
                .HasName("QUOTE_WE_QUOTE");

            entity.HasIndex(e => e.WorkEffortId)
                .HasName("QUOTE_WE_WEFF");

            entity.Property(e => e.QuoteId)
                .HasColumnName("QUOTE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Quote)
                .WithMany(p => p.QuoteWorkEfforts)
                .HasForeignKey(d => d.QuoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("QUOTE_WE_QUOTE");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.QuoteWorkEfforts)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("QUOTE_WE_WEFF");
        });

        modelBuilder.Entity<RateAmount>(entity =>
        {
            entity.HasKey(e => new
                {
                    e.RateTypeId, e.RateCurrencyUomId, e.PeriodTypeId, e.PartyId, e.WorkEffortId,
                    e.EmplPositionTypeId, e.FromDate
                })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0, 0, 0 });

            entity.ToTable("RATE_AMOUNT");


            entity.HasIndex(e => e.EmplPositionTypeId)
                .HasName("RATE_AMOUNT_EPT");


            entity.HasIndex(e => e.PartyId)
                .HasName("RATE_AMOUNT_PTY");

            entity.HasIndex(e => e.PeriodTypeId)
                .HasName("RATE_AMOUNT_PT");

            entity.HasIndex(e => e.RateCurrencyUomId)
                .HasName("RATE_AMOUNT_RCT");

            entity.HasIndex(e => e.RateTypeId)
                .HasName("RATE_AMOUNT_RT");

            entity.HasIndex(e => e.WorkEffortId)
                .HasName("RATE_AMOUNT_WE");

            entity.Property(e => e.RateTypeId)
                .HasColumnName("RATE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RateCurrencyUomId)
                .HasColumnName("RATE_CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PeriodTypeId)
                .HasColumnName("PERIOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.EmplPositionTypeId)
                .HasColumnName("EMPL_POSITION_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.RateAmount1)
                .HasColumnName("RATE_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.EmplPositionType)
                .WithMany(p => p.RateAmounts)
                .HasForeignKey(d => d.EmplPositionTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RATE_AMOUNT_EPT");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.RateAmounts)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RATE_AMOUNT_PTY");

            entity.HasOne(d => d.PeriodType)
                .WithMany(p => p.RateAmounts)
                .HasForeignKey(d => d.PeriodTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RATE_AMOUNT_PT");

            entity.HasOne(d => d.RateCurrencyUom)
                .WithMany(p => p.RateAmounts)
                .HasForeignKey(d => d.RateCurrencyUomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RATE_AMOUNT_RCT");

            entity.HasOne(d => d.RateType)
                .WithMany(p => p.RateAmounts)
                .HasForeignKey(d => d.RateTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RATE_AMOUNT_RT");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.RateAmounts)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RATE_AMOUNT_WE");
        });

        modelBuilder.Entity<RateType>(entity =>
        {
            entity.ToTable("RATE_TYPE");


            entity.Property(e => e.RateTypeId)
                .HasColumnName("RATE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<RecurrenceInfo>(entity =>
        {
            entity.ToTable("RECURRENCE_INFO");


            entity.HasIndex(e => e.ExceptionRuleId)
                .HasName("REC_INFO_EX_RCRLE");


            entity.HasIndex(e => e.RecurrenceRuleId)
                .HasName("REC_INFO_RCRLE");

            entity.Property(e => e.RecurrenceInfoId)
                .HasColumnName("RECURRENCE_INFO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ExceptionDateTimes)
                .HasColumnName("EXCEPTION_DATE_TIMES")
                .HasColumnType("longtext");

            entity.Property(e => e.ExceptionRuleId)
                .HasColumnName("EXCEPTION_RULE_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.RecurrenceCount)
                .HasColumnName("RECURRENCE_COUNT")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.RecurrenceDateTimes)
                .HasColumnName("RECURRENCE_DATE_TIMES")
                .HasColumnType("longtext");

            entity.Property(e => e.RecurrenceRuleId)
                .HasColumnName("RECURRENCE_RULE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StartDateTime)
                .HasColumnName("START_DATE_TIME")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ExceptionRule)
                .WithMany(p => p.RecurrenceInfoExceptionRules)
                .HasForeignKey(d => d.ExceptionRuleId)
                .HasConstraintName("REC_INFO_EX_RCRLE");

            entity.HasOne(d => d.RecurrenceRule)
                .WithMany(p => p.RecurrenceInfoRecurrenceRules)
                .HasForeignKey(d => d.RecurrenceRuleId)
                .HasConstraintName("REC_INFO_RCRLE");
        });

        modelBuilder.Entity<RecurrenceRule>(entity =>
        {
            entity.ToTable("RECURRENCE_RULE");


            entity.Property(e => e.RecurrenceRuleId)
                .HasColumnName("RECURRENCE_RULE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ByDayList)
                .HasColumnName("BY_DAY_LIST")
                .HasColumnType("longtext");

            entity.Property(e => e.ByHourList)
                .HasColumnName("BY_HOUR_LIST")
                .HasColumnType("longtext");

            entity.Property(e => e.ByMinuteList)
                .HasColumnName("BY_MINUTE_LIST")
                .HasColumnType("longtext");

            entity.Property(e => e.ByMonthDayList)
                .HasColumnName("BY_MONTH_DAY_LIST")
                .HasColumnType("longtext");

            entity.Property(e => e.ByMonthList)
                .HasColumnName("BY_MONTH_LIST")
                .HasColumnType("longtext");

            entity.Property(e => e.BySecondList)
                .HasColumnName("BY_SECOND_LIST")
                .HasColumnType("longtext");

            entity.Property(e => e.BySetPosList)
                .HasColumnName("BY_SET_POS_LIST")
                .HasColumnType("longtext");

            entity.Property(e => e.ByWeekNoList)
                .HasColumnName("BY_WEEK_NO_LIST")
                .HasColumnType("longtext");

            entity.Property(e => e.ByYearDayList)
                .HasColumnName("BY_YEAR_DAY_LIST")
                .HasColumnType("longtext");

            entity.Property(e => e.CountNumber)
                .HasColumnName("COUNT_NUMBER")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Frequency)
                .HasColumnName("FREQUENCY")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.IntervalNumber)
                .HasColumnName("INTERVAL_NUMBER")
                .HasColumnType("decimal(20,0)");


            entity.Property(e => e.UntilDateTime)
                .HasColumnName("UNTIL_DATE_TIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.WeekStart)
                .HasColumnName("WEEK_START")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.XName)
                .HasColumnName("X_NAME")
                .HasColumnType("longtext");
        });

        modelBuilder.Entity<RejectionReason>(entity =>
        {
            entity.HasKey(e => e.RejectionId)
                .HasName("PRIMARY");

            entity.ToTable("REJECTION_REASON");


            entity.Property(e => e.RejectionId)
                .HasColumnName("REJECTION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<ReorderGuideline>(entity =>
        {
            entity.ToTable("REORDER_GUIDELINE");


            entity.HasIndex(e => e.FacilityId)
                .HasName("REORDER_GD_FAC");

            entity.HasIndex(e => e.GeoId)
                .HasName("REORDER_GD_GEO");


            entity.HasIndex(e => e.PartyId)
                .HasName("REORDER_GD_PARTY");

            entity.HasIndex(e => e.ProductId)
                .HasName("REORDER_GD_PROD");

            entity.Property(e => e.ReorderGuidelineId)
                .HasColumnName("REORDER_GUIDELINE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.GeoId)
                .HasColumnName("GEO_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.ReorderLevel)
                .HasColumnName("REORDER_LEVEL")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReorderQuantity)
                .HasColumnName("REORDER_QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Facility)
                .WithMany(p => p.ReorderGuidelines)
                .HasForeignKey(d => d.FacilityId)
                .HasConstraintName("REORDER_GD_FAC");

            entity.HasOne(d => d.Geo)
                .WithMany(p => p.ReorderGuidelines)
                .HasForeignKey(d => d.GeoId)
                .HasConstraintName("REORDER_GD_GEO");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.ReorderGuidelines)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("REORDER_GD_PARTY");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ReorderGuidelines)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("REORDER_GD_PROD");
        });

        modelBuilder.Entity<Requirement>(entity =>
        {
            entity.ToTable("REQUIREMENT");


            entity.HasIndex(e => e.DeliverableId)
                .HasName("REQ_DELIVERABLE");

            entity.HasIndex(e => e.FacilityId)
                .HasName("REQ_FACILITY");

            entity.HasIndex(e => e.FixedAssetId)
                .HasName("REQ_FIXED_ASSET");


            entity.HasIndex(e => e.ProductId)
                .HasName("REQ_PRODUCT");

            entity.HasIndex(e => e.RequirementTypeId)
                .HasName("REQ_TYPE");

            entity.HasIndex(e => e.StatusId)
                .HasName("REQ_STTS");

            entity.Property(e => e.RequirementId)
                .HasColumnName("REQUIREMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedDate)
                .HasColumnName("CREATED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DeliverableId)
                .HasColumnName("DELIVERABLE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.EstimatedBudget)
                .HasColumnName("ESTIMATED_BUDGET")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.FacilityIdTo)
                .HasColumnName("FACILITY_ID_TO");

            entity.Property(e => e.FixedAssetId)
                .HasColumnName("FIXED_ASSET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.LastModifiedDate)
                .HasColumnName("LAST_MODIFIED_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.Reason)
                .HasColumnName("REASON")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.RequiredByDate)
                .HasColumnName("REQUIRED_BY_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.RequirementStartDate)
                .HasColumnName("REQUIREMENT_START_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.RequirementTypeId)
                .HasColumnName("REQUIREMENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.UseCase)
                .HasColumnName("USE_CASE")
                .HasColumnType("longtext");

            entity.HasOne(d => d.Deliverable)
                .WithMany(p => p.Requirements)
                .HasForeignKey(d => d.DeliverableId)
                .HasConstraintName("REQ_DELIVERABLE");

            entity.HasOne(d => d.Facility)
                .WithMany(p => p.Requirements)
                .HasForeignKey(d => d.FacilityId)
                .HasConstraintName("REQ_FACILITY");

            entity.HasOne(d => d.FixedAsset)
                .WithMany(p => p.Requirements)
                .HasForeignKey(d => d.FixedAssetId)
                .HasConstraintName("REQ_FIXED_ASSET");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.Requirements)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("REQ_PRODUCT");

            entity.HasOne(d => d.RequirementType)
                .WithMany(p => p.Requirements)
                .HasForeignKey(d => d.RequirementTypeId)
                .HasConstraintName("REQ_TYPE");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.Requirements)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("REQ_STTS");
        });

        modelBuilder.Entity<RequirementAttribute>(entity =>
        {
            entity.HasKey(e => new { e.RequirementId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("REQUIREMENT_ATTRIBUTE");


            entity.HasIndex(e => e.RequirementId)
                .HasName("REQ_ATTR");

            entity.Property(e => e.RequirementId)
                .HasColumnName("REQUIREMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Requirement)
                .WithMany(p => p.RequirementAttributes)
                .HasForeignKey(d => d.RequirementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("REQ_ATTR");
        });

        modelBuilder.Entity<RequirementBudgetAllocation>(entity =>
        {
            entity.HasKey(e => new { e.BudgetId, e.BudgetItemSeqId, e.RequirementId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("REQUIREMENT_BUDGET_ALLOCATION");


            entity.HasIndex(e => e.RequirementId)
                .HasName("REQ_BDGTAL_REQ");

            entity.HasIndex(e => new { e.BudgetId, e.BudgetItemSeqId })
                .HasName("REQ_BDGTAL_BITM");

            entity.Property(e => e.BudgetId)
                .HasColumnName("BUDGET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BudgetItemSeqId)
                .HasColumnName("BUDGET_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RequirementId)
                .HasColumnName("REQUIREMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Requirement)
                .WithMany(p => p.RequirementBudgetAllocations)
                .HasForeignKey(d => d.RequirementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("REQ_BDGTAL_REQ");

            entity.HasOne(d => d.BudgetI)
                .WithMany(p => p.RequirementBudgetAllocations)
                .HasForeignKey(d => new { d.BudgetId, d.BudgetItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("REQ_BDGTAL_BITM");
        });

        modelBuilder.Entity<RequirementCustRequest>(entity =>
        {
            entity.HasKey(e => new { e.CustRequestId, e.CustRequestItemSeqId, e.RequirementId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("REQUIREMENT_CUST_REQUEST");


            entity.HasIndex(e => e.RequirementId)
                .HasName("REQ_CSREQ_REQ");

            entity.HasIndex(e => new { e.CustRequestId, e.CustRequestItemSeqId })
                .HasName("REQ_CSREQ_CRITM");

            entity.Property(e => e.CustRequestId)
                .HasColumnName("CUST_REQUEST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CustRequestItemSeqId)
                .HasColumnName("CUST_REQUEST_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RequirementId)
                .HasColumnName("REQUIREMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Requirement)
                .WithMany(p => p.RequirementCustRequests)
                .HasForeignKey(d => d.RequirementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("REQ_CSREQ_REQ");

            entity.HasOne(d => d.CustRequestI)
                .WithMany(p => p.RequirementCustRequests)
                .HasForeignKey(d => new { d.CustRequestId, d.CustRequestItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("REQ_CSREQ_CRITM");
        });

        modelBuilder.Entity<RequirementRole>(entity =>
        {
            entity.HasKey(e => new { e.RequirementId, e.PartyId, e.RoleTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("REQUIREMENT_ROLE");


            entity.HasIndex(e => e.PartyId)
                .HasName("REQ_ROLE_PRTY");

            entity.HasIndex(e => e.RequirementId)
                .HasName("REQ_ROLE_REQ");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("REQ_ROLE_PROLE");

            entity.Property(e => e.RequirementId)
                .HasColumnName("REQUIREMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.RequirementRoles)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("REQ_ROLE_PRTY");

            entity.HasOne(d => d.Requirement)
                .WithMany(p => p.RequirementRoles)
                .HasForeignKey(d => d.RequirementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("REQ_ROLE_REQ");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.RequirementRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("REQ_ROLE_PROLE");
        });

        modelBuilder.Entity<RequirementStatu>(entity =>
        {
            entity.HasKey(e => new { e.RequirementId, e.StatusId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("REQUIREMENT_STATUS");

            entity.HasIndex(e => e.ChangedByUserLoginId)
                .HasName("REQ_STTS_USRLGN");


            entity.HasIndex(e => e.RequirementId)
                .HasName("REQ_STTS_REQ");

            entity.HasIndex(e => e.StatusId)
                .HasName("REQ_STTS_STTS");

            entity.Property(e => e.RequirementId)
                .HasColumnName("REQUIREMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ChangedByUserLoginId)
                .HasColumnName("CHANGE_BY_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.StatusDate)
                .HasColumnName("STATUS_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ChangeByUserLogin)
                .WithMany(p => p.RequirementStatus)
                .HasForeignKey(d => d.ChangedByUserLoginId)
                .HasConstraintName("REQ_STTS_USRLGN");

            entity.HasOne(d => d.Requirement)
                .WithMany(p => p.RequirementStatus)
                .HasForeignKey(d => d.RequirementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("REQ_STTS_REQ");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.RequirementStatus)
                .HasForeignKey(d => d.StatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("REQ_STTS_STTS");
        });

        modelBuilder.Entity<RequirementType>(entity =>
        {
            entity.ToTable("REQUIREMENT_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("REQ_TYPE_PARENT");

            entity.Property(e => e.RequirementTypeId)
                .HasColumnName("REQUIREMENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("REQ_TYPE_PARENT");
        });

        modelBuilder.Entity<RequirementTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.RequirementTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("REQUIREMENT_TYPE_ATTR");


            entity.HasIndex(e => e.RequirementTypeId)
                .HasName("REQ_TYPE_ATTR");

            entity.Property(e => e.RequirementTypeId)
                .HasColumnName("REQUIREMENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.RequirementType)
                .WithMany(p => p.RequirementTypeAttrs)
                .HasForeignKey(d => d.RequirementTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("REQ_TYPE_ATTR");
        });

        modelBuilder.Entity<RespondingParty>(entity =>
        {
            entity.HasKey(e => new { e.RespondingPartySeqId, e.CustRequestId, e.PartyId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("RESPONDING_PARTY");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("RESP_PTY_CMECH");


            entity.HasIndex(e => e.CustRequestId)
                .HasName("RESP_PTY_CSREQ");


            entity.HasIndex(e => e.PartyId)
                .HasName("RESP_PTY_PARTY");

            entity.Property(e => e.RespondingPartySeqId)
                .HasColumnName("RESPONDING_PARTY_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CustRequestId)
                .HasColumnName("CUST_REQUEST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DateSent)
                .HasColumnName("DATE_SENT")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.RespondingParties)
                .HasForeignKey(d => d.ContactMechId)
                .HasConstraintName("RESP_PTY_CMECH");

            entity.HasOne(d => d.CustRequest)
                .WithMany(p => p.RespondingParties)
                .HasForeignKey(d => d.CustRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RESP_PTY_CSREQ");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.RespondingParties)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RESP_PTY_PARTY");
        });

        modelBuilder.Entity<ResponsibilityType>(entity =>
        {
            entity.ToTable("RESPONSIBILITY_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("RESPON_TYPE_PAR");

            entity.Property(e => e.ResponsibilityTypeId)
                .HasColumnName("RESPONSIBILITY_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("RESPON_TYPE_PAR");
        });

        modelBuilder.Entity<ReturnAdjustment>(entity =>
        {
            entity.ToTable("RETURN_ADJUSTMENT");

            entity.HasIndex(e => e.CreatedByUserLogin)
                .HasName("RETURN_ADJ_USERL");


            entity.HasIndex(e => e.OrderAdjustmentId)
                .HasName("RETURN_ADJ_ORDADJ");

            entity.HasIndex(e => e.OverrideGlAccountId)
                .HasName("RETURN_ADJ_OGLA");

            entity.HasIndex(e => e.PrimaryGeoId)
                .HasName("RETURN_ADJ_PRGEO");

            entity.HasIndex(e => e.ProductPromoId)
                .HasName("RETURN_ADJ_PROMO");

            entity.HasIndex(e => e.ReturnAdjustmentTypeId)
                .HasName("RETURN_ADJ_TYPE");

            entity.HasIndex(e => e.ReturnId)
                .HasName("RETURN_ADJ_RHEAD");

            entity.HasIndex(e => e.ReturnTypeId)
                .HasName("RET_ADJ_RTN_TYPE");

            entity.HasIndex(e => e.SecondaryGeoId)
                .HasName("RETURN_ADJ_SCGEO");

            entity.HasIndex(e => e.TaxAuthorityRateSeqId)
                .HasName("RETURN_ADJ_TARP");

            entity.HasIndex(e => new { e.TaxAuthGeoId, e.TaxAuthPartyId })
                .HasName("RETURN_ADJ_TXA");

            entity.Property(e => e.ReturnAdjustmentId)
                .HasColumnName("RETURN_ADJUSTMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,3)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CorrespondingProductId)
                .HasColumnName("CORRESPONDING_PRODUCT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedDate)
                .HasColumnName("CREATED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CustomerReferenceId)
                .HasColumnName("CUSTOMER_REFERENCE_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ExemptAmount)
                .HasColumnName("EXEMPT_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.IncludeInShipping)
                .HasColumnName("INCLUDE_IN_SHIPPING")
                .HasColumnType("char(1)");

            entity.Property(e => e.IncludeInTax)
                .HasColumnName("INCLUDE_IN_TAX")
                .HasColumnType("char(1)");

            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.LastModifiedDate)
                .HasColumnName("LAST_MODIFIED_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.OrderAdjustmentId)
                .HasColumnName("ORDER_ADJUSTMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OverrideGlAccountId)
                .HasColumnName("OVERRIDE_GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PrimaryGeoId)
                .HasColumnName("PRIMARY_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductFeatureId)
                .HasColumnName("PRODUCT_FEATURE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoActionSeqId)
                .HasColumnName("PRODUCT_PROMO_ACTION_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoId)
                .HasColumnName("PRODUCT_PROMO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoRuleId)
                .HasColumnName("PRODUCT_PROMO_RULE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReturnAdjustmentTypeId)
                .HasColumnName("RETURN_ADJUSTMENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReturnId)
                .HasColumnName("RETURN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReturnItemSeqId)
                .HasColumnName("RETURN_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReturnTypeId)
                .HasColumnName("RETURN_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SecondaryGeoId)
                .HasColumnName("SECONDARY_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipGroupSeqId)
                .HasColumnName("SHIP_GROUP_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SourcePercentage)
                .HasColumnName("SOURCE_PERCENTAGE")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.SourceReferenceId)
                .HasColumnName("SOURCE_REFERENCE_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.TaxAuthGeoId)
                .HasColumnName("TAX_AUTH_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TaxAuthPartyId)
                .HasColumnName("TAX_AUTH_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TaxAuthorityRateSeqId)
                .HasColumnName("TAX_AUTHORITY_RATE_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.CreatedByUserLoginNavigation)
                .WithMany(p => p.ReturnAdjustments)
                .HasForeignKey(d => d.CreatedByUserLogin)
                .HasConstraintName("RETURN_ADJ_USERL");

            entity.HasOne(d => d.OrderAdjustment)
                .WithMany(p => p.ReturnAdjustments)
                .HasForeignKey(d => d.OrderAdjustmentId)
                .HasConstraintName("RETURN_ADJ_ORDADJ");

            entity.HasOne(d => d.OverrideGlAccount)
                .WithMany(p => p.ReturnAdjustments)
                .HasForeignKey(d => d.OverrideGlAccountId)
                .HasConstraintName("RETURN_ADJ_OGLA");

            entity.HasOne(d => d.PrimaryGeo)
                .WithMany(p => p.ReturnAdjustmentPrimaryGeos)
                .HasForeignKey(d => d.PrimaryGeoId)
                .HasConstraintName("RETURN_ADJ_PRGEO");

            entity.HasOne(d => d.ProductPromo)
                .WithMany(p => p.ReturnAdjustments)
                .HasForeignKey(d => d.ProductPromoId)
                .HasConstraintName("RETURN_ADJ_PROMO");

            entity.HasOne(d => d.ReturnAdjustmentType)
                .WithMany(p => p.ReturnAdjustments)
                .HasForeignKey(d => d.ReturnAdjustmentTypeId)
                .HasConstraintName("RETURN_ADJ_TYPE");

            entity.HasOne(d => d.Return)
                .WithMany(p => p.ReturnAdjustments)
                .HasForeignKey(d => d.ReturnId)
                .HasConstraintName("RETURN_ADJ_RHEAD");

            entity.HasOne(d => d.ReturnType)
                .WithMany(p => p.ReturnAdjustments)
                .HasForeignKey(d => d.ReturnTypeId)
                .HasConstraintName("RET_ADJ_RTN_TYPE");

            entity.HasOne(d => d.SecondaryGeo)
                .WithMany(p => p.ReturnAdjustmentSecondaryGeos)
                .HasForeignKey(d => d.SecondaryGeoId)
                .HasConstraintName("RETURN_ADJ_SCGEO");

            entity.HasOne(d => d.TaxAuthorityRateSeq)
                .WithMany(p => p.ReturnAdjustments)
                .HasForeignKey(d => d.TaxAuthorityRateSeqId)
                .HasConstraintName("RETURN_ADJ_TARP");

            entity.HasOne(d => d.TaxAuth)
                .WithMany(p => p.ReturnAdjustments)
                .HasForeignKey(d => new { d.TaxAuthGeoId, d.TaxAuthPartyId })
                .HasConstraintName("RETURN_ADJ_TXA");
        });

        modelBuilder.Entity<ReturnAdjustmentType>(entity =>
        {
            entity.ToTable("RETURN_ADJUSTMENT_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("RETURN_ADJ_TYPPAR");

            entity.Property(e => e.ReturnAdjustmentTypeId)
                .HasColumnName("RETURN_ADJUSTMENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("RETURN_ADJ_TYPPAR");
        });

        modelBuilder.Entity<ReturnContactMech>(entity =>
        {
            entity.HasKey(e => new { e.ReturnId, e.ContactMechPurposeTypeId, e.ContactMechId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("RETURN_CONTACT_MECH");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("RETURN_CMECH_CM");

            entity.HasIndex(e => e.ContactMechPurposeTypeId)
                .HasName("RETURN_CMECH_CMPT");


            entity.HasIndex(e => e.ReturnId)
                .HasName("RETURN_CMECH_HDR");

            entity.Property(e => e.ReturnId)
                .HasColumnName("RETURN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechPurposeTypeId)
                .HasColumnName("CONTACT_MECH_PURPOSE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.ReturnContactMeches)
                .HasForeignKey(d => d.ContactMechId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RETURN_CMECH_CM");

            entity.HasOne(d => d.ContactMechPurposeType)
                .WithMany(p => p.ReturnContactMeches)
                .HasForeignKey(d => d.ContactMechPurposeTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RETURN_CMECH_CMPT");

            entity.HasOne(d => d.Return)
                .WithMany(p => p.ReturnContactMeches)
                .HasForeignKey(d => d.ReturnId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RETURN_CMECH_HDR");
        });

        modelBuilder.Entity<ReturnHeader>(entity =>
        {
            entity.HasKey(e => e.ReturnId)
                .HasName("PRIMARY");

            entity.ToTable("RETURN_HEADER");

            entity.HasIndex(e => e.BillingAccountId)
                .HasName("RTN_TO_BACT");


            entity.HasIndex(e => e.CurrencyUomId)
                .HasName("RTN_HDR_CUOM");

            entity.HasIndex(e => e.DestinationFacilityId)
                .HasName("RTN_TO_FACILITY");

            entity.HasIndex(e => e.FinAccountId)
                .HasName("RTN_TO_FACT");

            entity.HasIndex(e => e.FromPartyId)
                .HasName("RTN_FROM_PARTY");


            entity.HasIndex(e => e.OriginContactMechId)
                .HasName("RTN_FROM_CTM");

            entity.HasIndex(e => e.PaymentMethodId)
                .HasName("RTN_TO_PAYMETH");

            entity.HasIndex(e => e.ReturnHeaderTypeId)
                .HasName("RTN_HEAD_TYPE");

            entity.HasIndex(e => e.StatusId)
                .HasName("RTN_STTS_ITEM");

            entity.HasIndex(e => e.ToPartyId)
                .HasName("RTN_TO_PARTY");

            entity.Property(e => e.ReturnId)
                .HasColumnName("RETURN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BillingAccountId)
                .HasColumnName("BILLING_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedBy)
                .HasColumnName("CREATED_BY")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrencyUomId)
                .HasColumnName("CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DestinationFacilityId)
                .HasColumnName("DESTINATION_FACILITY_ID");

            entity.Property(e => e.EntryDate)
                .HasColumnName("ENTRY_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.FinAccountId)
                .HasColumnName("FIN_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromPartyId)
                .HasColumnName("FROM_PARTY_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.NeedsInventoryReceive)
                .HasColumnName("NEEDS_INVENTORY_RECEIVE")
                .HasColumnType("char(1)");

            entity.Property(e => e.OriginContactMechId)
                .HasColumnName("ORIGIN_CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentMethodId)
                .HasColumnName("PAYMENT_METHOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReturnHeaderTypeId)
                .HasColumnName("RETURN_HEADER_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SupplierRmaId)
                .HasColumnName("SUPPLIER_RMA_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ToPartyId)
                .HasColumnName("TO_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.BillingAccount)
                .WithMany(p => p.ReturnHeaders)
                .HasForeignKey(d => d.BillingAccountId)
                .HasConstraintName("RTN_TO_BACT");

            entity.HasOne(d => d.CurrencyUom)
                .WithMany(p => p.ReturnHeaders)
                .HasForeignKey(d => d.CurrencyUomId)
                .HasConstraintName("RTN_HDR_CUOM");

            entity.HasOne(d => d.DestinationFacility)
                .WithMany(p => p.ReturnHeaders)
                .HasForeignKey(d => d.DestinationFacilityId)
                .HasConstraintName("RTN_TO_FACILITY");

            entity.HasOne(d => d.FinAccount)
                .WithMany(p => p.ReturnHeaders)
                .HasForeignKey(d => d.FinAccountId)
                .HasConstraintName("RTN_TO_FACT");

            entity.HasOne(d => d.FromParty)
                .WithMany(p => p.ReturnHeaderFromParties)
                .HasForeignKey(d => d.FromPartyId)
                .HasConstraintName("RTN_FROM_PARTY");

            entity.HasOne(d => d.OriginContactMech)
                .WithMany(p => p.ReturnHeaders)
                .HasForeignKey(d => d.OriginContactMechId)
                .HasConstraintName("RTN_FROM_CTM");

            entity.HasOne(d => d.PaymentMethod)
                .WithMany(p => p.ReturnHeaders)
                .HasForeignKey(d => d.PaymentMethodId)
                .HasConstraintName("RTN_TO_PAYMETH");

            entity.HasOne(d => d.ReturnHeaderType)
                .WithMany(p => p.ReturnHeaders)
                .HasForeignKey(d => d.ReturnHeaderTypeId)
                .HasConstraintName("RTN_HEAD_TYPE");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.ReturnHeaders)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("RTN_STTS_ITEM");

            entity.HasOne(d => d.ToParty)
                .WithMany(p => p.ReturnHeaderToParties)
                .HasForeignKey(d => d.ToPartyId)
                .HasConstraintName("RTN_TO_PARTY");
        });

        modelBuilder.Entity<ReturnHeaderType>(entity =>
        {
            entity.ToTable("RETURN_HEADER_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("RTHEAD_TYPE_PARENT");

            entity.Property(e => e.ReturnHeaderTypeId)
                .HasColumnName("RETURN_HEADER_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("RTHEAD_TYPE_PARENT");
        });

        modelBuilder.Entity<ReturnItem>(entity =>
        {
            entity.HasKey(e => new { e.ReturnId, e.ReturnItemSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("RETURN_ITEM");


            entity.HasIndex(e => e.ExpectedItemStatus)
                .HasName("RTN_ITEM_ITSTT");


            entity.HasIndex(e => e.OrderId)
                .HasName("RTN_ITEM_ODR");

            entity.HasIndex(e => e.ProductId)
                .HasName("RTN_ITEM_PROD");

            entity.HasIndex(e => e.ReturnId)
                .HasName("RTN_ITEM_RTN");

            entity.HasIndex(e => e.ReturnItemResponseId)
                .HasName("RTN_ITEM_RESP");

            entity.HasIndex(e => e.ReturnItemTypeId)
                .HasName("RTN_ITEM_TYPE");

            entity.HasIndex(e => e.ReturnReasonId)
                .HasName("RTN_ITEM_REASON");

            entity.HasIndex(e => e.ReturnTypeId)
                .HasName("RTN_TYPE");

            entity.HasIndex(e => e.StatusId)
                .HasName("RTN_ITEM_STTSIT");

            entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId })
                .HasName("RTN_ITEM_ODRIT");

            entity.Property(e => e.ReturnId)
                .HasColumnName("RETURN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReturnItemSeqId)
                .HasColumnName("RETURN_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ExpectedItemStatus)
                .HasColumnName("EXPECTED_ITEM_STATUS")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.ReceivedQuantity)
                .HasColumnName("RECEIVED_QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReturnItemResponseId)
                .HasColumnName("RETURN_ITEM_RESPONSE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReturnItemTypeId)
                .HasColumnName("RETURN_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReturnPrice)
                .HasColumnName("RETURN_PRICE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.ReturnQuantity)
                .HasColumnName("RETURN_QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReturnReasonId)
                .HasColumnName("RETURN_REASON_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReturnTypeId)
                .HasColumnName("RETURN_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ExpectedItemStatusNavigation)
                .WithMany(p => p.ReturnItemExpectedItemStatusNavigations)
                .HasForeignKey(d => d.ExpectedItemStatus)
                .HasConstraintName("RTN_ITEM_ITSTT");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.ReturnItems)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("RTN_ITEM_ODR");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ReturnItems)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("RTN_ITEM_PROD");

            entity.HasOne(d => d.Return)
                .WithMany(p => p.ReturnItems)
                .HasForeignKey(d => d.ReturnId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RTN_ITEM_RTN");

            entity.HasOne(d => d.ReturnItemResponse)
                .WithMany(p => p.ReturnItems)
                .HasForeignKey(d => d.ReturnItemResponseId)
                .HasConstraintName("RTN_ITEM_RESP");

            entity.HasOne(d => d.ReturnItemType)
                .WithMany(p => p.ReturnItems)
                .HasForeignKey(d => d.ReturnItemTypeId)
                .HasConstraintName("RTN_ITEM_TYPE");

            entity.HasOne(d => d.ReturnReason)
                .WithMany(p => p.ReturnItems)
                .HasForeignKey(d => d.ReturnReasonId)
                .HasConstraintName("RTN_ITEM_REASON");

            entity.HasOne(d => d.ReturnType)
                .WithMany(p => p.ReturnItems)
                .HasForeignKey(d => d.ReturnTypeId)
                .HasConstraintName("RTN_TYPE");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.ReturnItemStatus)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("RTN_ITEM_STTSIT");

            entity.HasOne(d => d.OrderI)
                .WithMany(p => p.ReturnItems)
                .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                .HasConstraintName("RTN_ITEM_ODRIT");
        });

        modelBuilder.Entity<ReturnItemBilling>(entity =>
        {
            entity.HasKey(e => new { e.ReturnId, e.ReturnItemSeqId, e.InvoiceId, e.InvoiceItemSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("RETURN_ITEM_BILLING");


            entity.HasIndex(e => e.ReturnId)
                .HasName("RTN_ITBLNG_RHDR");

            entity.HasIndex(e => e.ShipmentReceiptId)
                .HasName("RITBL_SHIPRCPT");

            entity.HasIndex(e => new { e.InvoiceId, e.InvoiceItemSeqId })
                .HasName("RETURN_ITBLNG_IITM");

            entity.HasIndex(e => new { e.ReturnId, e.ReturnItemSeqId })
                .HasName("RTN_ITBLNG_RITM");

            entity.Property(e => e.ReturnId)
                .HasColumnName("RETURN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReturnItemSeqId)
                .HasColumnName("RETURN_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceId)
                .HasColumnName("INVOICE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceItemSeqId)
                .HasColumnName("INVOICE_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ShipmentReceiptId)
                .HasColumnName("SHIPMENT_RECEIPT_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Return)
                .WithMany(p => p.ReturnItemBillings)
                .HasForeignKey(d => d.ReturnId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RTN_ITBLNG_RHDR");

            entity.HasOne(d => d.ShipmentReceipt)
                .WithMany(p => p.ReturnItemBillings)
                .HasForeignKey(d => d.ShipmentReceiptId)
                .HasConstraintName("RITBL_SHIPRCPT");

            entity.HasOne(d => d.InvoiceI)
                .WithMany(p => p.ReturnItemBillings)
                .HasForeignKey(d => new { d.InvoiceId, d.InvoiceItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RETURN_ITBLNG_IITM");

            entity.HasOne(d => d.ReturnI)
                .WithMany(p => p.ReturnItemBillings)
                .HasForeignKey(d => new { d.ReturnId, d.ReturnItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RTN_ITBLNG_RITM");
        });

        modelBuilder.Entity<ReturnItemResponse>(entity =>
        {
            entity.ToTable("RETURN_ITEM_RESPONSE");

            entity.HasIndex(e => e.BillingAccountId)
                .HasName("RTN_PAY_BACT");


            entity.HasIndex(e => e.FinAccountTransId)
                .HasName("RTN_PAY_FINACTTX");


            entity.HasIndex(e => e.OrderPaymentPreferenceId)
                .HasName("RTN_PAY_ORDPAYPF");

            entity.HasIndex(e => e.PaymentId)
                .HasName("RTN_PAY_PAYMENT");

            entity.HasIndex(e => e.ReplacementOrderId)
                .HasName("RTN_RESP_NEWORD");

            entity.Property(e => e.ReturnItemResponseId)
                .HasColumnName("RETURN_ITEM_RESPONSE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BillingAccountId)
                .HasColumnName("BILLING_ACCOUNT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FinAccountTransId)
                .HasColumnName("FIN_ACCOUNT_TRANS_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.OrderPaymentPreferenceId)
                .HasColumnName("ORDER_PAYMENT_PREFERENCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentId)
                .HasColumnName("PAYMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReplacementOrderId)
                .HasColumnName("REPLACEMENT_ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ResponseAmount)
                .HasColumnName("RESPONSE_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.ResponseDate)
                .HasColumnName("RESPONSE_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.BillingAccount)
                .WithMany(p => p.ReturnItemResponses)
                .HasForeignKey(d => d.BillingAccountId)
                .HasConstraintName("RTN_PAY_BACT");

            entity.HasOne(d => d.FinAccountTrans)
                .WithMany(p => p.ReturnItemResponses)
                .HasForeignKey(d => d.FinAccountTransId)
                .HasConstraintName("RTN_PAY_FINACTTX");

            entity.HasOne(d => d.OrderPaymentPreference)
                .WithMany(p => p.ReturnItemResponses)
                .HasForeignKey(d => d.OrderPaymentPreferenceId)
                .HasConstraintName("RTN_PAY_ORDPAYPF");

            entity.HasOne(d => d.Payment)
                .WithMany(p => p.ReturnItemResponses)
                .HasForeignKey(d => d.PaymentId)
                .HasConstraintName("RTN_PAY_PAYMENT");

            entity.HasOne(d => d.ReplacementOrder)
                .WithMany(p => p.ReturnItemResponses)
                .HasForeignKey(d => d.ReplacementOrderId)
                .HasConstraintName("RTN_RESP_NEWORD");
        });

        modelBuilder.Entity<ReturnItemShipment>(entity =>
        {
            entity.HasKey(e => new { e.ReturnId, e.ReturnItemSeqId, e.ShipmentId, e.ShipmentItemSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("RETURN_ITEM_SHIPMENT");


            entity.HasIndex(e => e.ReturnId)
                .HasName("RIT_SHPMT_RHDR");

            entity.HasIndex(e => e.ShipmentId)
                .HasName("RIT_SHPMT_SHPMT");

            entity.HasIndex(e => new { e.ReturnId, e.ReturnItemSeqId })
                .HasName("RIT_SHPMT_RITM");

            entity.HasIndex(e => new { e.ShipmentId, e.ShipmentItemSeqId })
                .HasName("RIT_SHPMT_SHPITM");

            entity.Property(e => e.ReturnId)
                .HasColumnName("RETURN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReturnItemSeqId)
                .HasColumnName("RETURN_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentId)
                .HasColumnName("SHIPMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentItemSeqId)
                .HasColumnName("SHIPMENT_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.HasOne(d => d.Return)
                .WithMany(p => p.ReturnItemShipments)
                .HasForeignKey(d => d.ReturnId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RIT_SHPMT_RHDR");

            entity.HasOne(d => d.Shipment)
                .WithMany(p => p.ReturnItemShipments)
                .HasForeignKey(d => d.ShipmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RIT_SHPMT_SHPMT");

            entity.HasOne(d => d.ReturnI)
                .WithMany(p => p.ReturnItemShipments)
                .HasForeignKey(d => new { d.ReturnId, d.ReturnItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RIT_SHPMT_RITM");

            entity.HasOne(d => d.ShipmentI)
                .WithMany(p => p.ReturnItemShipments)
                .HasForeignKey(d => new { d.ShipmentId, d.ShipmentItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RIT_SHPMT_SHPITM");
        });

        modelBuilder.Entity<ReturnItemType>(entity =>
        {
            entity.ToTable("RETURN_ITEM_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("RETURN_ITEM_TYPPAR");

            entity.Property(e => e.ReturnItemTypeId)
                .HasColumnName("RETURN_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("RETURN_ITEM_TYPPAR");
        });

        modelBuilder.Entity<ReturnItemTypeMap>(entity =>
        {
            entity.HasKey(e => new { e.ReturnItemMapKey, e.ReturnHeaderTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("RETURN_ITEM_TYPE_MAP");


            entity.HasIndex(e => e.ReturnHeaderTypeId)
                .HasName("RETITMMAP_RETTYP");

            entity.Property(e => e.ReturnItemMapKey)
                .HasColumnName("RETURN_ITEM_MAP_KEY")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReturnHeaderTypeId)
                .HasColumnName("RETURN_HEADER_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ReturnItemTypeId)
                .HasColumnName("RETURN_ITEM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ReturnHeaderType)
                .WithMany(p => p.ReturnItemTypeMaps)
                .HasForeignKey(d => d.ReturnHeaderTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RETITMMAP_RETTYP");
        });

        modelBuilder.Entity<ReturnReason>(entity =>
        {
            entity.ToTable("RETURN_REASON");


            entity.Property(e => e.ReturnReasonId)
                .HasColumnName("RETURN_REASON_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.SequenceId)
                .HasColumnName("SEQUENCE_ID")
                .HasColumnType("varchar(36)");
        });

        modelBuilder.Entity<ReturnStatu>(entity =>
        {
            entity.HasKey(e => e.ReturnStatusId)
                .HasName("PRIMARY");

            entity.ToTable("RETURN_STATUS");

            entity.HasIndex(e => e.ChangedByUserLoginId)
                .HasName("RTN_STTS_USRLGN");


            entity.HasIndex(e => e.ReturnId)
                .HasName("RTN_STTS_RTN");

            entity.HasIndex(e => e.StatusId)
                .HasName("RTN_STTS_STTS");

            entity.Property(e => e.ReturnStatusId)
                .HasColumnName("RETURN_STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ChangedByUserLoginId)
                .HasColumnName("CHANGE_BY_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ReturnId)
                .HasColumnName("RETURN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReturnItemSeqId)
                .HasColumnName("RETURN_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusDatetime)
                .HasColumnName("STATUS_DATETIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ChangeByUserLogin)
                .WithMany(p => p.ReturnStatus)
                .HasForeignKey(d => d.ChangedByUserLoginId)
                .HasConstraintName("RTN_STTS_USRLGN");

            entity.HasOne(d => d.Return)
                .WithMany(p => p.ReturnStatus)
                .HasForeignKey(d => d.ReturnId)
                .HasConstraintName("RTN_STTS_RTN");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.ReturnStatus)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("RTN_STTS_STTS");
        });

        modelBuilder.Entity<ReturnType>(entity =>
        {
            entity.ToTable("RETURN_TYPE");


            entity.Property(e => e.ReturnTypeId)
                .HasColumnName("RETURN_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SequenceId)
                .HasColumnName("SEQUENCE_ID")
                .HasColumnType("varchar(36)");
        });

        modelBuilder.Entity<RoleType>(entity =>
        {
            entity.ToTable("ROLE_TYPE");

            entity.HasIndex(e => e.ParentTypeId)
                .HasName("ROLE_TYPE_PAR");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");

            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("ROLE_TYPE_PAR")
                .IsRequired(false);
        });

        modelBuilder.Entity<RoleTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.RoleTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("ROLE_TYPE_ATTR");


            entity.HasIndex(e => e.RoleTypeId)
                .HasName("ROLE_TYPATR_RTYP");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.RoleType)
                .WithMany(p => p.RoleTypeAttrs)
                .HasForeignKey(d => d.RoleTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ROLE_TYPATR_RTYP");
        });

        modelBuilder.Entity<RuntimeData>(entity =>
        {
            entity.ToTable("RUNTIME_DATA");


            entity.Property(e => e.RuntimeDataId)
                .HasColumnName("RUNTIME_DATA_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.RuntimeInfo)
                .HasColumnName("RUNTIME_INFO")
                .HasColumnType("longtext");
        });

        modelBuilder.Entity<SalaryStepNew>(entity =>
        {
            entity.HasKey(e => new { e.SalaryStepSeqId, e.PayGradeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("SALARY_STEP_NEW");


            entity.HasIndex(e => e.PayGradeId)
                .HasName("SLRY_STP_PGRD_NEW");

            entity.Property(e => e.SalaryStepSeqId)
                .HasColumnName("SALARY_STEP_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PayGradeId)
                .HasColumnName("PAY_GRADE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DateModified)
                .HasColumnName("DATE_MODIFIED")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.PayGrade)
                .WithMany(p => p.SalaryStepNews)
                .HasForeignKey(d => d.PayGradeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SLRY_STP_PGRD_NEW");
        });

        modelBuilder.Entity<SaleType>(entity =>
        {
            entity.ToTable("SALE_TYPE");


            entity.Property(e => e.SaleTypeId)
                .HasColumnName("SALE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<SalesForecast>(entity =>
        {
            entity.ToTable("SALES_FORECAST");

            entity.HasIndex(e => e.CreatedByUserLoginId)
                .HasName("SALES4C_CRT_USER");


            entity.HasIndex(e => e.CurrencyUomId)
                .HasName("SALES4C_CUR_UOM");

            entity.HasIndex(e => e.CustomTimePeriodId)
                .HasName("SALES4C_TIME_PER");

            entity.HasIndex(e => e.InternalPartyId)
                .HasName("SALES4C_INT_PARTY");


            entity.HasIndex(e => e.ModifiedByUserLoginId)
                .HasName("SALES4C_MOD_USER");

            entity.HasIndex(e => e.OrganizationPartyId)
                .HasName("SALES4C_ORG_PARTY");

            entity.HasIndex(e => e.ParentSalesForecastId)
                .HasName("SALES4C_PARENT");

            entity.Property(e => e.SalesForecastId)
                .HasColumnName("SALES_FORECAST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BestCaseAmount)
                .HasColumnName("BEST_CASE_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.ClosedAmount)
                .HasColumnName("CLOSED_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.CreatedByUserLoginId)
                .HasColumnName("CREATED_BY_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrencyUomId)
                .HasColumnName("CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CustomTimePeriodId)
                .HasColumnName("CUSTOM_TIME_PERIOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ForecastAmount)
                .HasColumnName("FORECAST_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.InternalPartyId)
                .HasColumnName("INTERNAL_PARTY_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.ModifiedByUserLoginId)
                .HasColumnName("MODIFIED_BY_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.OrganizationPartyId)
                .HasColumnName("ORGANIZATION_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ParentSalesForecastId)
                .HasColumnName("PARENT_SALES_FORECAST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PercentOfQuotaClosed)
                .HasColumnName("PERCENT_OF_QUOTA_CLOSED")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.PercentOfQuotaForecast)
                .HasColumnName("PERCENT_OF_QUOTA_FORECAST")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.PipelineAmount)
                .HasColumnName("PIPELINE_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.QuotaAmount)
                .HasColumnName("QUOTA_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.HasOne(d => d.CreatedByUserLogin)
                .WithMany(p => p.SalesForecastCreatedByUserLogins)
                .HasForeignKey(d => d.CreatedByUserLoginId)
                .HasConstraintName("SALES4C_CRT_USER");

            entity.HasOne(d => d.CurrencyUom)
                .WithMany(p => p.SalesForecasts)
                .HasForeignKey(d => d.CurrencyUomId)
                .HasConstraintName("SALES4C_CUR_UOM");

            entity.HasOne(d => d.CustomTimePeriod)
                .WithMany(p => p.SalesForecasts)
                .HasForeignKey(d => d.CustomTimePeriodId)
                .HasConstraintName("SALES4C_TIME_PER");

            entity.HasOne(d => d.InternalParty)
                .WithMany(p => p.SalesForecastInternalParties)
                .HasForeignKey(d => d.InternalPartyId)
                .HasConstraintName("SALES4C_INT_PARTY");

            entity.HasOne(d => d.ModifiedByUserLogin)
                .WithMany(p => p.SalesForecastModifiedByUserLogins)
                .HasForeignKey(d => d.ModifiedByUserLoginId)
                .HasConstraintName("SALES4C_MOD_USER");

            entity.HasOne(d => d.OrganizationParty)
                .WithMany(p => p.SalesForecastOrganizationParties)
                .HasForeignKey(d => d.OrganizationPartyId)
                .HasConstraintName("SALES4C_ORG_PARTY");

            entity.HasOne(d => d.ParentSalesForecast)
                .WithMany(p => p.InverseParentSalesForecast)
                .HasForeignKey(d => d.ParentSalesForecastId)
                .HasConstraintName("SALES4C_PARENT");
        });

        modelBuilder.Entity<SalesForecastDetail>(entity =>
        {
            entity.HasKey(e => new { e.SalesForecastId, e.SalesForecastDetailId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("SALES_FORECAST_DETAIL");


            entity.HasIndex(e => e.ProductCategoryId)
                .HasName("SALES4CDTL_PCTGRY");

            entity.HasIndex(e => e.ProductId)
                .HasName("SALES4CDTL_PROD");

            entity.HasIndex(e => e.QuantityUomId)
                .HasName("SALES4CDTL_QTY_UOM");

            entity.HasIndex(e => e.SalesForecastId)
                .HasName("SALES4CDTL_SALES4C");

            entity.Property(e => e.SalesForecastId)
                .HasColumnName("SALES_FORECAST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SalesForecastDetailId)
                .HasColumnName("SALES_FORECAST_DETAIL_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Amount)
                .HasColumnName("AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ProductCategoryId)
                .HasColumnName("PRODUCT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.QuantityUomId)
                .HasColumnName("QUANTITY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ProductCategory)
                .WithMany(p => p.SalesForecastDetails)
                .HasForeignKey(d => d.ProductCategoryId)
                .HasConstraintName("SALES4CDTL_PCTGRY");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.SalesForecastDetails)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("SALES4CDTL_PROD");

            entity.HasOne(d => d.QuantityUom)
                .WithMany(p => p.SalesForecastDetails)
                .HasForeignKey(d => d.QuantityUomId)
                .HasConstraintName("SALES4CDTL_QTY_UOM");

            entity.HasOne(d => d.SalesForecast)
                .WithMany(p => p.SalesForecastDetails)
                .HasForeignKey(d => d.SalesForecastId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SALES4CDTL_SALES4C");
        });

        modelBuilder.Entity<SalesForecastHistory>(entity =>
        {
            entity.ToTable("SALES_FORECAST_HISTORY");


            entity.HasIndex(e => e.CurrencyUomId)
                .HasName("SALES4CH_CUR_UOM");

            entity.HasIndex(e => e.CustomTimePeriodId)
                .HasName("SALES4CH_TIME_PER");

            entity.HasIndex(e => e.InternalPartyId)
                .HasName("SALES4CH_INT_PARTY");


            entity.HasIndex(e => e.ModifiedByUserLoginId)
                .HasName("SALES4CH_MOD_USER");

            entity.HasIndex(e => e.OrganizationPartyId)
                .HasName("SALES4CH_ORG_PARTY");

            entity.HasIndex(e => e.SalesForecastId)
                .HasName("SALES4CH_SALES4C");

            entity.Property(e => e.SalesForecastHistoryId)
                .HasColumnName("SALES_FORECAST_HISTORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BestCaseAmount)
                .HasColumnName("BEST_CASE_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.ChangeNote)
                .HasColumnName("CHANGE_NOTE")
                .HasColumnType("longtext");

            entity.Property(e => e.ClosedAmount)
                .HasColumnName("CLOSED_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrencyUomId)
                .HasColumnName("CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CustomTimePeriodId)
                .HasColumnName("CUSTOM_TIME_PERIOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ForecastAmount)
                .HasColumnName("FORECAST_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.InternalPartyId)
                .HasColumnName("INTERNAL_PARTY_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.ModifiedByUserLoginId)
                .HasColumnName("MODIFIED_BY_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.ModifiedTimestamp)
                .HasColumnName("MODIFIED_TIMESTAMP")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.OrganizationPartyId)
                .HasColumnName("ORGANIZATION_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ParentSalesForecastId)
                .HasColumnName("PARENT_SALES_FORECAST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PercentOfQuotaClosed)
                .HasColumnName("PERCENT_OF_QUOTA_CLOSED")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.PercentOfQuotaForecast)
                .HasColumnName("PERCENT_OF_QUOTA_FORECAST")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.QuotaAmount)
                .HasColumnName("QUOTA_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.SalesForecastId)
                .HasColumnName("SALES_FORECAST_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.CurrencyUom)
                .WithMany(p => p.SalesForecastHistories)
                .HasForeignKey(d => d.CurrencyUomId)
                .HasConstraintName("SALES4CH_CUR_UOM");

            entity.HasOne(d => d.CustomTimePeriod)
                .WithMany(p => p.SalesForecastHistories)
                .HasForeignKey(d => d.CustomTimePeriodId)
                .HasConstraintName("SALES4CH_TIME_PER");

            entity.HasOne(d => d.InternalParty)
                .WithMany(p => p.SalesForecastHistoryInternalParties)
                .HasForeignKey(d => d.InternalPartyId)
                .HasConstraintName("SALES4CH_INT_PARTY");

            entity.HasOne(d => d.ModifiedByUserLogin)
                .WithMany(p => p.SalesForecastHistories)
                .HasForeignKey(d => d.ModifiedByUserLoginId)
                .HasConstraintName("SALES4CH_MOD_USER");

            entity.HasOne(d => d.OrganizationParty)
                .WithMany(p => p.SalesForecastHistoryOrganizationParties)
                .HasForeignKey(d => d.OrganizationPartyId)
                .HasConstraintName("SALES4CH_ORG_PARTY");

            entity.HasOne(d => d.SalesForecast)
                .WithMany(p => p.SalesForecastHistories)
                .HasForeignKey(d => d.SalesForecastId)
                .HasConstraintName("SALES4CH_SALES4C");
        });

        modelBuilder.Entity<SalesOpportunity>(entity =>
        {
            entity.ToTable("SALES_OPPORTUNITY");

            entity.HasIndex(e => e.CreatedByUserLogin)
                .HasName("SLSOPP_USRLGN");


            entity.HasIndex(e => e.CurrencyUomId)
                .HasName("SLSOPP_CRNCY_UOM");

            entity.HasIndex(e => e.DataSourceId)
                .HasName("SLSOPP_DTSRC");


            entity.HasIndex(e => e.MarketingCampaignId)
                .HasName("SLSOPP_MKTGCMPG");

            entity.HasIndex(e => e.OpportunityStageId)
                .HasName("SLSOPP_STAGE");

            entity.HasIndex(e => e.TypeEnumId)
                .HasName("SLSOPP_TYP_ENUM");

            entity.Property(e => e.SalesOpportunityId)
                .HasColumnName("SALES_OPPORTUNITY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrencyUomId)
                .HasColumnName("CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DataSourceId)
                .HasColumnName("DATA_SOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("longtext");

            entity.Property(e => e.EstimatedAmount)
                .HasColumnName("ESTIMATED_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.EstimatedCloseDate)
                .HasColumnName("ESTIMATED_CLOSE_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.EstimatedProbability)
                .HasColumnName("ESTIMATED_PROBABILITY")
                .HasColumnType("decimal(18,6)");


            entity.Property(e => e.MarketingCampaignId)
                .HasColumnName("MARKETING_CAMPAIGN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.NextStep)
                .HasColumnName("NEXT_STEP")
                .HasColumnType("longtext");

            entity.Property(e => e.NextStepDate)
                .HasColumnName("NEXT_STEP_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.OpportunityName)
                .HasColumnName("OPPORTUNITY_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.OpportunityStageId)
                .HasColumnName("OPPORTUNITY_STAGE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TypeEnumId)
                .HasColumnName("TYPE_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.CreatedByUserLoginNavigation)
                .WithMany(p => p.SalesOpportunities)
                .HasForeignKey(d => d.CreatedByUserLogin)
                .HasConstraintName("SLSOPP_USRLGN");

            entity.HasOne(d => d.CurrencyUom)
                .WithMany(p => p.SalesOpportunities)
                .HasForeignKey(d => d.CurrencyUomId)
                .HasConstraintName("SLSOPP_CRNCY_UOM");

            entity.HasOne(d => d.DataSource)
                .WithMany(p => p.SalesOpportunities)
                .HasForeignKey(d => d.DataSourceId)
                .HasConstraintName("SLSOPP_DTSRC");

            entity.HasOne(d => d.MarketingCampaign)
                .WithMany(p => p.SalesOpportunities)
                .HasForeignKey(d => d.MarketingCampaignId)
                .HasConstraintName("SLSOPP_MKTGCMPG");

            entity.HasOne(d => d.OpportunityStage)
                .WithMany(p => p.SalesOpportunities)
                .HasForeignKey(d => d.OpportunityStageId)
                .HasConstraintName("SLSOPP_STAGE");

            entity.HasOne(d => d.TypeEnum)
                .WithMany(p => p.SalesOpportunities)
                .HasForeignKey(d => d.TypeEnumId)
                .HasConstraintName("SLSOPP_TYP_ENUM");
        });

        modelBuilder.Entity<SalesOpportunityCompetitor>(entity =>
        {
            entity.HasKey(e => new { e.SalesOpportunityId, e.CompetitorPartyId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("SALES_OPPORTUNITY_COMPETITOR");


            entity.HasIndex(e => e.SalesOpportunityId)
                .HasName("SOPPCOMP_SOPP");

            entity.Property(e => e.SalesOpportunityId)
                .HasColumnName("SALES_OPPORTUNITY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CompetitorPartyId)
                .HasColumnName("COMPETITOR_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PositionEnumId)
                .HasColumnName("POSITION_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Strengths)
                .HasColumnName("STRENGTHS")
                .HasColumnType("longtext");

            entity.Property(e => e.Weaknesses)
                .HasColumnName("WEAKNESSES")
                .HasColumnType("longtext");

            entity.HasOne(d => d.SalesOpportunity)
                .WithMany(p => p.SalesOpportunityCompetitors)
                .HasForeignKey(d => d.SalesOpportunityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SOPPCOMP_SOPP");
        });

        modelBuilder.Entity<SalesOpportunityHistory>(entity =>
        {
            entity.ToTable("SALES_OPPORTUNITY_HISTORY");


            entity.HasIndex(e => e.CurrencyUomId)
                .HasName("SLOPHI_CRNCY_UOM");


            entity.HasIndex(e => e.ModifiedByUserLogin)
                .HasName("SLOPHI_USRLGN");

            entity.HasIndex(e => e.OpportunityStageId)
                .HasName("SLOPHI_STAGE");

            entity.HasIndex(e => e.SalesOpportunityId)
                .HasName("SLOPHI_SLSOPP");

            entity.Property(e => e.SalesOpportunityHistoryId)
                .HasColumnName("SALES_OPPORTUNITY_HISTORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ChangeNote)
                .HasColumnName("CHANGE_NOTE")
                .HasColumnType("longtext");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrencyUomId)
                .HasColumnName("CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("longtext");

            entity.Property(e => e.EstimatedAmount)
                .HasColumnName("ESTIMATED_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.EstimatedCloseDate)
                .HasColumnName("ESTIMATED_CLOSE_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.EstimatedProbability)
                .HasColumnName("ESTIMATED_PROBABILITY")
                .HasColumnType("decimal(18,6)");


            entity.Property(e => e.ModifiedByUserLogin)
                .HasColumnName("MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.ModifiedTimestamp)
                .HasColumnName("MODIFIED_TIMESTAMP")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.NextStep)
                .HasColumnName("NEXT_STEP")
                .HasColumnType("longtext");

            entity.Property(e => e.OpportunityStageId)
                .HasColumnName("OPPORTUNITY_STAGE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SalesOpportunityId)
                .HasColumnName("SALES_OPPORTUNITY_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.CurrencyUom)
                .WithMany(p => p.SalesOpportunityHistories)
                .HasForeignKey(d => d.CurrencyUomId)
                .HasConstraintName("SLOPHI_CRNCY_UOM");

            entity.HasOne(d => d.ModifiedByUserLoginNavigation)
                .WithMany(p => p.SalesOpportunityHistories)
                .HasForeignKey(d => d.ModifiedByUserLogin)
                .HasConstraintName("SLOPHI_USRLGN");

            entity.HasOne(d => d.OpportunityStage)
                .WithMany(p => p.SalesOpportunityHistories)
                .HasForeignKey(d => d.OpportunityStageId)
                .HasConstraintName("SLOPHI_STAGE");

            entity.HasOne(d => d.SalesOpportunity)
                .WithMany(p => p.SalesOpportunityHistories)
                .HasForeignKey(d => d.SalesOpportunityId)
                .HasConstraintName("SLOPHI_SLSOPP");
        });

        modelBuilder.Entity<SalesOpportunityQuote>(entity =>
        {
            entity.HasKey(e => new { e.SalesOpportunityId, e.QuoteId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("SALES_OPPORTUNITY_QUOTE");


            entity.HasIndex(e => e.QuoteId)
                .HasName("SOPPQTE_QTE");

            entity.HasIndex(e => e.SalesOpportunityId)
                .HasName("SOPPQTE_SOPP");

            entity.Property(e => e.SalesOpportunityId)
                .HasColumnName("SALES_OPPORTUNITY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.QuoteId)
                .HasColumnName("QUOTE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Quote)
                .WithMany(p => p.SalesOpportunityQuotes)
                .HasForeignKey(d => d.QuoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SOPPQTE_QTE");

            entity.HasOne(d => d.SalesOpportunity)
                .WithMany(p => p.SalesOpportunityQuotes)
                .HasForeignKey(d => d.SalesOpportunityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SOPPQTE_SOPP");
        });

        modelBuilder.Entity<SalesOpportunityRole>(entity =>
        {
            entity.HasKey(e => new { e.SalesOpportunityId, e.PartyId, e.RoleTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("SALES_OPPORTUNITY_ROLE");


            entity.HasIndex(e => e.PartyId)
                .HasName("SLSOPPRL_PARTY");

            entity.HasIndex(e => e.RoleTypeId)
                .HasName("SLSOPPRL_ROLETYPE");

            entity.HasIndex(e => e.SalesOpportunityId)
                .HasName("SLSOPPRL_SLSOPP");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("SLSOPPRL_PTYROLE");

            entity.Property(e => e.SalesOpportunityId)
                .HasColumnName("SALES_OPPORTUNITY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Party)
                .WithMany(p => p.SalesOpportunityRoles)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SLSOPPRL_PARTY");

            entity.HasOne(d => d.RoleType)
                .WithMany(p => p.SalesOpportunityRoles)
                .HasForeignKey(d => d.RoleTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SLSOPPRL_ROLETYPE");

            entity.HasOne(d => d.SalesOpportunity)
                .WithMany(p => p.SalesOpportunityRoles)
                .HasForeignKey(d => d.SalesOpportunityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SLSOPPRL_SLSOPP");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.SalesOpportunityRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SLSOPPRL_PTYROLE");
        });

        modelBuilder.Entity<SalesOpportunityStage>(entity =>
        {
            entity.HasKey(e => e.OpportunityStageId)
                .HasName("PRIMARY");

            entity.ToTable("SALES_OPPORTUNITY_STAGE");


            entity.Property(e => e.OpportunityStageId)
                .HasColumnName("OPPORTUNITY_STAGE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DefaultProbability)
                .HasColumnName("DEFAULT_PROBABILITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");
        });

        modelBuilder.Entity<SalesOpportunityTrckCode>(entity =>
        {
            entity.HasKey(e => new { e.SalesOpportunityId, e.TrackingCodeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("SALES_OPPORTUNITY_TRCK_CODE");


            entity.HasIndex(e => e.SalesOpportunityId)
                .HasName("SOPPTRKCD_SOPP");

            entity.Property(e => e.SalesOpportunityId)
                .HasColumnName("SALES_OPPORTUNITY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TrackingCodeId)
                .HasColumnName("TRACKING_CODE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ReceivedDate)
                .HasColumnName("RECEIVED_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.SalesOpportunity)
                .WithMany(p => p.SalesOpportunityTrckCodes)
                .HasForeignKey(d => d.SalesOpportunityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SOPPTRKCD_SOPP");
        });

        modelBuilder.Entity<SalesOpportunityWorkEffort>(entity =>
        {
            entity.HasKey(e => new { e.SalesOpportunityId, e.WorkEffortId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("SALES_OPPORTUNITY_WORK_EFFORT");


            entity.HasIndex(e => e.SalesOpportunityId)
                .HasName("SOPPWEFF_SOPP");

            entity.HasIndex(e => e.WorkEffortId)
                .HasName("SOPPWEFF_WEFF");

            entity.Property(e => e.SalesOpportunityId)
                .HasColumnName("SALES_OPPORTUNITY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.SalesOpportunity)
                .WithMany(p => p.SalesOpportunityWorkEfforts)
                .HasForeignKey(d => d.SalesOpportunityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SOPPWEFF_SOPP");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.SalesOpportunityWorkEfforts)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SOPPWEFF_WEFF");
        });

        modelBuilder.Entity<SecurityGroup>(entity =>
        {
            entity.ToTable("SECURITY_GROUP");


            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            /*entity.Property(e => e.GroupName)
                .HasColumnName("GROUP_NAME")
                .HasColumnType("varchar(255)");*/
        });

        modelBuilder.Entity<SecurityGroupPermission>(entity =>
        {
            //     entity.HasKey(e => new { e.GroupId, e.PermissionId, e.FromDate })
            //         .HasName("PRIMARY")
            //         .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("SECURITY_GROUP_PERMISSION");


            entity.HasIndex(e => e.GroupId)
                .HasName("SEC_GRP_PERM_GRP");


            entity.Property(e => e.GroupId)
                .HasColumnName("GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PermissionId)
                .HasColumnName("PERMISSION_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            /*entity.HasOne(d => d.Group)
                .WithMany(p => p.SecurityGroupPermissions)
                .HasForeignKey(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SEC_GRP_PERM_GRP");*/
        });

        modelBuilder.Entity<SecurityPermission>(entity =>
        {
            entity.HasKey(e => e.PermissionId)
                .HasName("PRIMARY");

            entity.ToTable("SECURITY_PERMISSION");


            entity.Property(e => e.PermissionId)
                .HasColumnName("PERMISSION_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<SegmentGroup>(entity =>
        {
            entity.ToTable("SEGMENT_GROUP");


            entity.HasIndex(e => e.ProductStoreId)
                .HasName("SGMTGRP_PRST");

            entity.HasIndex(e => e.SegmentGroupTypeId)
                .HasName("SGMTGRP_TYPE");

            entity.Property(e => e.SegmentGroupId)
                .HasColumnName("SEGMENT_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SegmentGroupTypeId)
                .HasColumnName("SEGMENT_GROUP_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.SegmentGroups)
                .HasForeignKey(d => d.ProductStoreId)
                .HasConstraintName("SGMTGRP_PRST");

            entity.HasOne(d => d.SegmentGroupType)
                .WithMany(p => p.SegmentGroups)
                .HasForeignKey(d => d.SegmentGroupTypeId)
                .HasConstraintName("SGMTGRP_TYPE");
        });

        modelBuilder.Entity<SegmentGroupClassification>(entity =>
        {
            entity.HasKey(e => new { e.SegmentGroupId, e.PartyClassificationGroupId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("SEGMENT_GROUP_CLASSIFICATION");


            entity.HasIndex(e => e.PartyClassificationGroupId)
                .HasName("SGMTGRPCLS_PCGP");

            entity.HasIndex(e => e.SegmentGroupId)
                .HasName("SGMTGRPCLS_SGGP");

            entity.Property(e => e.SegmentGroupId)
                .HasColumnName("SEGMENT_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyClassificationGroupId)
                .HasColumnName("PARTY_CLASSIFICATION_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.PartyClassificationGroup)
                .WithMany(p => p.SegmentGroupClassifications)
                .HasForeignKey(d => d.PartyClassificationGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SGMTGRPCLS_PCGP");

            entity.HasOne(d => d.SegmentGroup)
                .WithMany(p => p.SegmentGroupClassifications)
                .HasForeignKey(d => d.SegmentGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SGMTGRPCLS_SGGP");
        });

        modelBuilder.Entity<SegmentGroupGeo>(entity =>
        {
            entity.HasKey(e => new { e.SegmentGroupId, e.GeoId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("SEGMENT_GROUP_GEO");


            entity.HasIndex(e => e.GeoId)
                .HasName("SGMTGRPGEO_GEO");


            entity.HasIndex(e => e.SegmentGroupId)
                .HasName("SGMTGRPGEO_SGGP");

            entity.Property(e => e.SegmentGroupId)
                .HasColumnName("SEGMENT_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GeoId)
                .HasColumnName("GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Geo)
                .WithMany(p => p.SegmentGroupGeos)
                .HasForeignKey(d => d.GeoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SGMTGRPGEO_GEO");

            entity.HasOne(d => d.SegmentGroup)
                .WithMany(p => p.SegmentGroupGeos)
                .HasForeignKey(d => d.SegmentGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SGMTGRPGEO_SGGP");
        });

        modelBuilder.Entity<SegmentGroupRole>(entity =>
        {
            entity.HasKey(e => new { e.SegmentGroupId, e.PartyId, e.RoleTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("SEGMENT_GROUP_ROLE");


            entity.HasIndex(e => e.SegmentGroupId)
                .HasName("SGMTGRPRL_SGGP");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("SGMTGRPRL_PRLE");

            entity.Property(e => e.SegmentGroupId)
                .HasColumnName("SEGMENT_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.SegmentGroup)
                .WithMany(p => p.SegmentGroupRoles)
                .HasForeignKey(d => d.SegmentGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SGMTGRPRL_SGGP");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.SegmentGroupRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SGMTGRPRL_PRLE");
        });

        modelBuilder.Entity<SegmentGroupType>(entity =>
        {
            entity.ToTable("SEGMENT_GROUP_TYPE");


            entity.Property(e => e.SegmentGroupTypeId)
                .HasColumnName("SEGMENT_GROUP_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<SequenceValueItem>(entity =>
        {
            entity.HasKey(e => e.SeqName)
                .HasName("PRIMARY");

            entity.ToTable("SEQUENCE_VALUE_ITEM");


            entity.Property(e => e.SeqName)
                .HasColumnName("SEQ_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SeqId)
                .HasColumnName("SEQ_ID")
                .HasColumnType("decimal(20,0)");
        });

        modelBuilder.Entity<ServerHit>(entity =>
        {
            entity.HasKey(e => new { e.VisitId, e.ContentId, e.HitStartDateTime, e.HitTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("SERVER_HIT");

            entity.HasIndex(e => e.HitTypeId)
                .HasName("SERVER_HIT_SHTYP");

            entity.HasIndex(e => e.VisitId)
                .HasName("SERVER_HIT_VISIT");

            entity.Property(e => e.VisitId)
                .HasColumnName("VISIT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.HitStartDateTime)
                .HasColumnName("HIT_START_DATE_TIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.HitTypeId)
                .HasColumnName("HIT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.IdByIpContactMechId)
                .HasColumnName("ID_BY_IP_CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InternalContentId)
                .HasColumnName("INTERNAL_CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.NumOfBytes)
                .HasColumnName("NUM_OF_BYTES")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RefByWebContactMechId)
                .HasColumnName("REF_BY_WEB_CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReferrerUrl)
                .HasColumnName("REFERRER_URL")
                .HasColumnType("varchar(2000)");

            entity.Property(e => e.RequestUrl)
                .HasColumnName("REQUEST_URL")
                .HasColumnType("varchar(2000)");

            entity.Property(e => e.RunningTimeMillis)
                .HasColumnName("RUNNING_TIME_MILLIS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ServerHostName)
                .HasColumnName("SERVER_HOST_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ServerIpAddress)
                .HasColumnName("SERVER_IP_ADDRESS")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.UserLoginId)
                .HasColumnName("USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.HasOne(d => d.HitType)
                .WithMany(p => p.ServerHits)
                .HasForeignKey(d => d.HitTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SERVER_HIT_SHTYP");

            entity.HasOne(d => d.Visit)
                .WithMany(p => p.ServerHits)
                .HasForeignKey(d => d.VisitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SERVER_HIT_VISIT");
        });

        modelBuilder.Entity<ServerHitBin>(entity =>
        {
            entity.ToTable("SERVER_HIT_BIN");

            entity.HasIndex(e => e.HitTypeId)
                .HasName("SERVER_HBIN_TYPE");

            entity.Property(e => e.ServerHitBinId)
                .HasColumnName("SERVER_HIT_BIN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BinEndDateTime)
                .HasColumnName("BIN_END_DATE_TIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.BinStartDateTime)
                .HasColumnName("BIN_START_DATE_TIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.HitTypeId)
                .HasColumnName("HIT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InternalContentId)
                .HasColumnName("INTERNAL_CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.MaxTimeMillis)
                .HasColumnName("MAX_TIME_MILLIS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.MinTimeMillis)
                .HasColumnName("MIN_TIME_MILLIS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.NumberHits)
                .HasColumnName("NUMBER_HITS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ServerHostName)
                .HasColumnName("SERVER_HOST_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ServerIpAddress)
                .HasColumnName("SERVER_IP_ADDRESS")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TotalTimeMillis)
                .HasColumnName("TOTAL_TIME_MILLIS")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.HitType)
                .WithMany(p => p.ServerHitBins)
                .HasForeignKey(d => d.HitTypeId)
                .HasConstraintName("SERVER_HBIN_TYPE");
        });

        modelBuilder.Entity<ServerHitType>(entity =>
        {
            entity.HasKey(e => e.HitTypeId)
                .HasName("PRIMARY");

            entity.ToTable("SERVER_HIT_TYPE");


            entity.Property(e => e.HitTypeId)
                .HasColumnName("HIT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<ServiceSemaphore>(entity =>
        {
            entity.HasKey(e => e.ServiceName)
                .HasName("PRIMARY");

            entity.ToTable("SERVICE_SEMAPHORE");


            entity.Property(e => e.ServiceName)
                .HasColumnName("SERVICE_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.LockThread)
                .HasColumnName("LOCK_THREAD")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.LockTime)
                .HasColumnName("LOCK_TIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.LockedByInstanceId)
                .HasColumnName("LOCKED_BY_INSTANCE_ID")
                .HasColumnType("varchar(36)");
        });

        modelBuilder.Entity<SettlementTerm>(entity =>
        {
            entity.ToTable("SETTLEMENT_TERM");


            entity.Property(e => e.SettlementTermId)
                .HasColumnName("SETTLEMENT_TERM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.TermName)
                .HasColumnName("TERM_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.TermValue)
                .HasColumnName("TERM_VALUE")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.UomId)
                .HasColumnName("UOM_ID")
                .HasColumnType("varchar(36)");
        });

        modelBuilder.Entity<Shipment>(entity =>
        {
            entity.ToTable("SHIPMENT");


            entity.HasIndex(e => e.CurrencyUomId)
                .HasName("SHPMNT_CUOM");

            entity.HasIndex(e => e.DestinationContactMechId)
                .HasName("SHPMNT_DPAD");

            entity.HasIndex(e => e.DestinationFacilityId)
                .HasName("SHPMNT_DFAC");

            entity.HasIndex(e => e.DestinationTelecomNumberId)
                .HasName("SHPMNT_DTCN");

            entity.HasIndex(e => e.EstimatedArrivalWorkEffId)
                .HasName("SHPMNT_EARRWEFF");

            entity.HasIndex(e => e.EstimatedShipWorkEffId)
                .HasName("SHPMNT_ESHWEFF");


            entity.HasIndex(e => e.OriginContactMechId)
                .HasName("SHPMNT_OPAD");

            entity.HasIndex(e => e.OriginFacilityId)
                .HasName("SHPMNT_OFAC");

            entity.HasIndex(e => e.OriginTelecomNumberId)
                .HasName("SHPMNT_OTCN");

            entity.HasIndex(e => e.PartyIdFrom)
                .HasName("SHPMNT_PRTYFM");

            entity.HasIndex(e => e.PartyIdTo)
                .HasName("SHPMNT_PRTYTO");

            entity.HasIndex(e => e.PicklistBinId)
                .HasName("SHPMNT_PKLSTBIN");

            entity.HasIndex(e => e.PrimaryOrderId)
                .HasName("SHPMNT_PODR");

            entity.HasIndex(e => e.PrimaryReturnId)
                .HasName("SHPMNT_PRTNHDR");

            entity.HasIndex(e => e.ShipmentTypeId)
                .HasName("SHPMNT_TYPE");

            entity.HasIndex(e => e.StatusId)
                .HasName("SHPMNT_STTS");

            entity.Property(e => e.ShipmentId)
                .HasColumnName("SHIPMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AdditionalShippingCharge)
                .HasColumnName("ADDITIONAL_SHIPPING_CHARGE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.AddtlShippingChargeDesc)
                .HasColumnName("ADDTL_SHIPPING_CHARGE_DESC")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedDate)
                .HasColumnName("CREATED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrencyUomId)
                .HasColumnName("CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DestinationContactMechId)
                .HasColumnName("DESTINATION_CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DestinationFacilityId)
                .HasColumnName("DESTINATION_FACILITY_ID");

            entity.Property(e => e.DestinationTelecomNumberId)
                .HasColumnName("DESTINATION_TELECOM_NUMBER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.EstimatedArrivalDate)
                .HasColumnName("ESTIMATED_ARRIVAL_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.EstimatedArrivalWorkEffId)
                .HasColumnName("ESTIMATED_ARRIVAL_WORK_EFF_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.EstimatedReadyDate)
                .HasColumnName("ESTIMATED_READY_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.EstimatedShipCost)
                .HasColumnName("ESTIMATED_SHIP_COST")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.EstimatedShipDate)
                .HasColumnName("ESTIMATED_SHIP_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.EstimatedShipWorkEffId)
                .HasColumnName("ESTIMATED_SHIP_WORK_EFF_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.HandlingInstructions)
                .HasColumnName("HANDLING_INSTRUCTIONS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.LastModifiedDate)
                .HasColumnName("LAST_MODIFIED_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.LatestCancelDate)
                .HasColumnName("LATEST_CANCEL_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.OriginContactMechId)
                .HasColumnName("ORIGIN_CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OriginFacilityId)
                .HasColumnName("ORIGIN_FACILITY_ID");

            entity.Property(e => e.OriginTelecomNumberId)
                .HasColumnName("ORIGIN_TELECOM_NUMBER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyIdFrom)
                .HasColumnName("PARTY_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyIdTo)
                .HasColumnName("PARTY_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PicklistBinId)
                .HasColumnName("PICKLIST_BIN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PrimaryOrderId)
                .HasColumnName("PRIMARY_ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PrimaryReturnId)
                .HasColumnName("PRIMARY_RETURN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PrimaryShipGroupSeqId)
                .HasColumnName("PRIMARY_SHIP_GROUP_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentTypeId)
                .HasColumnName("SHIPMENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.CurrencyUom)
                .WithMany(p => p.Shipments)
                .HasForeignKey(d => d.CurrencyUomId)
                .HasConstraintName("SHPMNT_CUOM");

            entity.HasOne(d => d.DestinationContactMech)
                .WithMany(p => p.ShipmentDestinationContactMeches)
                .HasForeignKey(d => d.DestinationContactMechId)
                .HasConstraintName("SHPMNT_DPAD");

            entity.HasOne(d => d.DestinationFacility)
                .WithMany(p => p.ShipmentDestinationFacilities)
                .HasForeignKey(d => d.DestinationFacilityId)
                .HasConstraintName("SHPMNT_DFAC");

            entity.HasOne(d => d.DestinationTelecomNumber)
                .WithMany(p => p.ShipmentDestinationTelecomNumbers)
                .HasForeignKey(d => d.DestinationTelecomNumberId)
                .HasConstraintName("SHPMNT_DTCN");

            entity.HasOne(d => d.EstimatedArrivalWorkEff)
                .WithMany(p => p.ShipmentEstimatedArrivalWorkEffs)
                .HasForeignKey(d => d.EstimatedArrivalWorkEffId)
                .HasConstraintName("SHPMNT_EARRWEFF");

            entity.HasOne(d => d.EstimatedShipWorkEff)
                .WithMany(p => p.ShipmentEstimatedShipWorkEffs)
                .HasForeignKey(d => d.EstimatedShipWorkEffId)
                .HasConstraintName("SHPMNT_ESHWEFF");

            entity.HasOne(d => d.OriginContactMech)
                .WithMany(p => p.ShipmentOriginContactMeches)
                .HasForeignKey(d => d.OriginContactMechId)
                .HasConstraintName("SHPMNT_OPAD");

            entity.HasOne(d => d.OriginFacility)
                .WithMany(p => p.ShipmentOriginFacilities)
                .HasForeignKey(d => d.OriginFacilityId)
                .HasConstraintName("SHPMNT_OFAC");

            entity.HasOne(d => d.OriginTelecomNumber)
                .WithMany(p => p.ShipmentOriginTelecomNumbers)
                .HasForeignKey(d => d.OriginTelecomNumberId)
                .HasConstraintName("SHPMNT_OTCN");

            entity.HasOne(d => d.PartyIdFromNavigation)
                .WithMany(p => p.ShipmentPartyIdFromNavigations)
                .HasForeignKey(d => d.PartyIdFrom)
                .HasConstraintName("SHPMNT_PRTYFM");

            entity.HasOne(d => d.PartyIdToNavigation)
                .WithMany(p => p.ShipmentPartyIdToNavigations)
                .HasForeignKey(d => d.PartyIdTo)
                .HasConstraintName("SHPMNT_PRTYTO");

            entity.HasOne(d => d.PicklistBin)
                .WithMany(p => p.Shipments)
                .HasForeignKey(d => d.PicklistBinId)
                .HasConstraintName("SHPMNT_PKLSTBIN");

            entity.HasOne(d => d.PrimaryOrder)
                .WithMany(p => p.Shipments)
                .HasForeignKey(d => d.PrimaryOrderId)
                .HasConstraintName("SHPMNT_PODR");

            entity.HasOne(d => d.PrimaryReturn)
                .WithMany(p => p.Shipments)
                .HasForeignKey(d => d.PrimaryReturnId)
                .HasConstraintName("SHPMNT_PRTNHDR");

            entity.HasOne(d => d.ShipmentType)
                .WithMany(p => p.Shipments)
                .HasForeignKey(d => d.ShipmentTypeId)
                .HasConstraintName("SHPMNT_TYPE");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.Shipments)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("SHPMNT_STTS");
        });

        modelBuilder.Entity<ShipmentAttribute>(entity =>
        {
            entity.HasKey(e => new { e.ShipmentId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("SHIPMENT_ATTRIBUTE");


            entity.HasIndex(e => e.ShipmentId)
                .HasName("SHPMNT_ATTR");

            entity.Property(e => e.ShipmentId)
                .HasColumnName("SHIPMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Shipment)
                .WithMany(p => p.ShipmentAttributes)
                .HasForeignKey(d => d.ShipmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHPMNT_ATTR");
        });

        modelBuilder.Entity<ShipmentBoxType>(entity =>
        {
            entity.ToTable("SHIPMENT_BOX_TYPE");


            entity.HasIndex(e => e.DimensionUomId)
                .HasName("SHMT_BXTP_DUOM");


            entity.HasIndex(e => e.WeightUomId)
                .HasName("SHMT_BXTP_WUOM");

            entity.Property(e => e.ShipmentBoxTypeId)
                .HasColumnName("SHIPMENT_BOX_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BoxHeight)
                .HasColumnName("BOX_HEIGHT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.BoxLength)
                .HasColumnName("BOX_LENGTH")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.BoxWeight)
                .HasColumnName("BOX_WEIGHT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.BoxWidth)
                .HasColumnName("BOX_WIDTH")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.DimensionUomId)
                .HasColumnName("DIMENSION_UOM_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.WeightUomId)
                .HasColumnName("WEIGHT_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.DimensionUom)
                .WithMany(p => p.ShipmentBoxTypeDimensionUoms)
                .HasForeignKey(d => d.DimensionUomId)
                .HasConstraintName("SHMT_BXTP_DUOM");

            entity.HasOne(d => d.WeightUom)
                .WithMany(p => p.ShipmentBoxTypeWeightUoms)
                .HasForeignKey(d => d.WeightUomId)
                .HasConstraintName("SHMT_BXTP_WUOM");
        });

        modelBuilder.Entity<ShipmentContactMech>(entity =>
        {
            entity.HasKey(e => new { e.ShipmentId, e.ShipmentContactMechTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("SHIPMENT_CONTACT_MECH");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("SHPMT_CMECH_CM");


            entity.HasIndex(e => e.ShipmentContactMechTypeId)
                .HasName("SHPMT_CMECH_TYPE");

            entity.HasIndex(e => e.ShipmentId)
                .HasName("SHPMT_CMECH");

            entity.Property(e => e.ShipmentId)
                .HasColumnName("SHIPMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentContactMechTypeId)
                .HasColumnName("SHIPMENT_CONTACT_MECH_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.ShipmentContactMeches)
                .HasForeignKey(d => d.ContactMechId)
                .HasConstraintName("SHPMT_CMECH_CM");

            entity.HasOne(d => d.ShipmentContactMechType)
                .WithMany(p => p.ShipmentContactMeches)
                .HasForeignKey(d => d.ShipmentContactMechTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHPMT_CMECH_TYPE");

            entity.HasOne(d => d.Shipment)
                .WithMany(p => p.ShipmentContactMeches)
                .HasForeignKey(d => d.ShipmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHPMT_CMECH");
        });

        modelBuilder.Entity<ShipmentContactMechType>(entity =>
        {
            entity.ToTable("SHIPMENT_CONTACT_MECH_TYPE");


            entity.Property(e => e.ShipmentContactMechTypeId)
                .HasColumnName("SHIPMENT_CONTACT_MECH_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<ShipmentCostEstimate>(entity =>
        {
            entity.ToTable("SHIPMENT_COST_ESTIMATE");


            entity.HasIndex(e => e.GeoIdFrom)
                .HasName("SHPMNT_CE_FGEO");

            entity.HasIndex(e => e.GeoIdTo)
                .HasName("SHPMNT_CE_TGEO");


            entity.HasIndex(e => e.PartyId)
                .HasName("SHPMNT_CE_PARTY");

            entity.HasIndex(e => e.PriceBreakId)
                .HasName("SHPMNT_CE_PRC_QB");

            entity.HasIndex(e => e.PriceUomId)
                .HasName("SHPMNT_CE_PUOM");

            entity.HasIndex(e => e.ProductStoreShipMethId)
                .HasName("SHPMNT_PS_SH_METH");

            entity.HasIndex(e => e.QuantityBreakId)
                .HasName("SHPMNT_CE_QNT_QB");

            entity.HasIndex(e => e.QuantityUomId)
                .HasName("SHPMNT_CE_QUOM");

            entity.HasIndex(e => e.RoleTypeId)
                .HasName("SHPMNT_CE_ROLET");

            entity.HasIndex(e => e.WeightBreakId)
                .HasName("SHPMNT_CE_WHT_QB");

            entity.HasIndex(e => e.WeightUomId)
                .HasName("SHPMNT_CE_WUOM");

            entity.HasIndex(e => new { e.ShipmentMethodTypeId, e.CarrierPartyId, e.CarrierRoleTypeId })
                .HasName("SHPMNT_CE_CSHMTH");

            entity.Property(e => e.ShipmentCostEstimateId)
                .HasColumnName("SHIPMENT_COST_ESTIMATE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CarrierPartyId)
                .HasColumnName("CARRIER_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CarrierRoleTypeId)
                .HasColumnName("CARRIER_ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FeaturePercent)
                .HasColumnName("FEATURE_PERCENT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.FeaturePrice)
                .HasColumnName("FEATURE_PRICE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.GeoIdFrom)
                .HasColumnName("GEO_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GeoIdTo)
                .HasColumnName("GEO_ID_TO")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.OrderFlatPrice)
                .HasColumnName("ORDER_FLAT_PRICE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.OrderItemFlatPrice)
                .HasColumnName("ORDER_ITEM_FLAT_PRICE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.OrderPricePercent)
                .HasColumnName("ORDER_PRICE_PERCENT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.OversizePrice)
                .HasColumnName("OVERSIZE_PRICE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.OversizeUnit)
                .HasColumnName("OVERSIZE_UNIT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PriceBreakId)
                .HasColumnName("PRICE_BREAK_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PriceUnitPrice)
                .HasColumnName("PRICE_UNIT_PRICE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.PriceUomId)
                .HasColumnName("PRICE_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductFeatureGroupId)
                .HasColumnName("PRODUCT_FEATURE_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductStoreShipMethId)
                .HasColumnName("PRODUCT_STORE_SHIP_METH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.QuantityBreakId)
                .HasColumnName("QUANTITY_BREAK_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.QuantityUnitPrice)
                .HasColumnName("QUANTITY_UNIT_PRICE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.QuantityUomId)
                .HasColumnName("QUANTITY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentMethodTypeId)
                .HasColumnName("SHIPMENT_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShippingPricePercent)
                .HasColumnName("SHIPPING_PRICE_PERCENT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.WeightBreakId)
                .HasColumnName("WEIGHT_BREAK_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WeightUnitPrice)
                .HasColumnName("WEIGHT_UNIT_PRICE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.WeightUomId)
                .HasColumnName("WEIGHT_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.GeoIdFromNavigation)
                .WithMany(p => p.ShipmentCostEstimateGeoIdFromNavigations)
                .HasForeignKey(d => d.GeoIdFrom)
                .HasConstraintName("SHPMNT_CE_FGEO");

            entity.HasOne(d => d.GeoIdToNavigation)
                .WithMany(p => p.ShipmentCostEstimateGeoIdToNavigations)
                .HasForeignKey(d => d.GeoIdTo)
                .HasConstraintName("SHPMNT_CE_TGEO");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.ShipmentCostEstimates)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("SHPMNT_CE_PARTY");

            entity.HasOne(d => d.PriceBreak)
                .WithMany(p => p.ShipmentCostEstimatePriceBreaks)
                .HasForeignKey(d => d.PriceBreakId)
                .HasConstraintName("SHPMNT_CE_PRC_QB");

            entity.HasOne(d => d.PriceUom)
                .WithMany(p => p.ShipmentCostEstimatePriceUoms)
                .HasForeignKey(d => d.PriceUomId)
                .HasConstraintName("SHPMNT_CE_PUOM");

            entity.HasOne(d => d.ProductStoreShipMeth)
                .WithMany(p => p.ShipmentCostEstimates)
                .HasForeignKey(d => d.ProductStoreShipMethId)
                .HasConstraintName("SHPMNT_PS_SH_METH");

            entity.HasOne(d => d.QuantityBreak)
                .WithMany(p => p.ShipmentCostEstimateQuantityBreaks)
                .HasForeignKey(d => d.QuantityBreakId)
                .HasConstraintName("SHPMNT_CE_QNT_QB");

            entity.HasOne(d => d.QuantityUom)
                .WithMany(p => p.ShipmentCostEstimateQuantityUoms)
                .HasForeignKey(d => d.QuantityUomId)
                .HasConstraintName("SHPMNT_CE_QUOM");

            entity.HasOne(d => d.RoleType)
                .WithMany(p => p.ShipmentCostEstimates)
                .HasForeignKey(d => d.RoleTypeId)
                .HasConstraintName("SHPMNT_CE_ROLET");

            entity.HasOne(d => d.WeightBreak)
                .WithMany(p => p.ShipmentCostEstimateWeightBreaks)
                .HasForeignKey(d => d.WeightBreakId)
                .HasConstraintName("SHPMNT_CE_WHT_QB");

            entity.HasOne(d => d.WeightUom)
                .WithMany(p => p.ShipmentCostEstimateWeightUoms)
                .HasForeignKey(d => d.WeightUomId)
                .HasConstraintName("SHPMNT_CE_WUOM");

            entity.HasOne(d => d.CarrierShipmentMethod)
                .WithMany(p => p.ShipmentCostEstimates)
                .HasForeignKey(d => new { d.ShipmentMethodTypeId, d.CarrierPartyId, d.CarrierRoleTypeId })
                .HasConstraintName("SHPMNT_CE_CSHMTH");
        });

        modelBuilder.Entity<ShipmentGatewayConfig>(entity =>
        {
            entity.ToTable("SHIPMENT_GATEWAY_CONFIG");


            entity.HasIndex(e => e.ShipmentGatewayConfTypeId)
                .HasName("SGC_SGCT");

            entity.Property(e => e.ShipmentGatewayConfigId)
                .HasColumnName("SHIPMENT_GATEWAY_CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.ShipmentGatewayConfTypeId)
                .HasColumnName("SHIPMENT_GATEWAY_CONF_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ShipmentGatewayConfType)
                .WithMany(p => p.ShipmentGatewayConfigs)
                .HasForeignKey(d => d.ShipmentGatewayConfTypeId)
                .HasConstraintName("SGC_SGCT");
        });

        modelBuilder.Entity<ShipmentGatewayConfigType>(entity =>
        {
            entity.HasKey(e => e.ShipmentGatewayConfTypeId)
                .HasName("PRIMARY");

            entity.ToTable("SHIPMENT_GATEWAY_CONFIG_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("SGCT_PAR");

            entity.Property(e => e.ShipmentGatewayConfTypeId)
                .HasColumnName("SHIPMENT_GATEWAY_CONF_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("SGCT_PAR");
        });

        modelBuilder.Entity<ShipmentGatewayDhl>(entity =>
        {
            entity.HasKey(e => e.ShipmentGatewayConfigId)
                .HasName("PRIMARY");

            entity.ToTable("SHIPMENT_GATEWAY_DHL");


            entity.HasIndex(e => e.ShipmentGatewayConfigId)
                .HasName("SGDHL_SGC");

            entity.Property(e => e.ShipmentGatewayConfigId)
                .HasColumnName("SHIPMENT_GATEWAY_CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AccessAccountNbr)
                .HasColumnName("ACCESS_ACCOUNT_NBR")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AccessPassword)
                .HasColumnName("ACCESS_PASSWORD")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AccessShippingKey)
                .HasColumnName("ACCESS_SHIPPING_KEY")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AccessUserId)
                .HasColumnName("ACCESS_USER_ID")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ConnectTimeout)
                .HasColumnName("CONNECT_TIMEOUT")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ConnectUrl)
                .HasColumnName("CONNECT_URL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.HeadAction)
                .HasColumnName("HEAD_ACTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HeadVersion)
                .HasColumnName("HEAD_VERSION")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.LabelImageFormat)
                .HasColumnName("LABEL_IMAGE_FORMAT")
                .HasColumnType("varchar(60)");


            entity.Property(e => e.RateEstimateTemplate)
                .HasColumnName("RATE_ESTIMATE_TEMPLATE")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.ShipmentGatewayConfig)
                .WithOne(p => p.ShipmentGatewayDhl)
                .HasForeignKey<ShipmentGatewayDhl>(d => d.ShipmentGatewayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SGDHL_SGC");
        });

        modelBuilder.Entity<ShipmentGatewayFedex>(entity =>
        {
            entity.HasKey(e => e.ShipmentGatewayConfigId)
                .HasName("PRIMARY");

            entity.ToTable("SHIPMENT_GATEWAY_FEDEX");


            entity.HasIndex(e => e.ShipmentGatewayConfigId)
                .HasName("SGFED_SGC");

            entity.Property(e => e.ShipmentGatewayConfigId)
                .HasColumnName("SHIPMENT_GATEWAY_CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AccessAccountNbr)
                .HasColumnName("ACCESS_ACCOUNT_NBR")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AccessMeterNumber)
                .HasColumnName("ACCESS_METER_NUMBER")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AccessUserKey)
                .HasColumnName("ACCESS_USER_KEY")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AccessUserPwd)
                .HasColumnName("ACCESS_USER_PWD")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ConnectSoapUrl)
                .HasColumnName("CONNECT_SOAP_URL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ConnectTimeout)
                .HasColumnName("CONNECT_TIMEOUT")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ConnectUrl)
                .HasColumnName("CONNECT_URL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DefaultDropoffType)
                .HasColumnName("DEFAULT_DROPOFF_TYPE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.DefaultPackagingType)
                .HasColumnName("DEFAULT_PACKAGING_TYPE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.LabelImageType)
                .HasColumnName("LABEL_IMAGE_TYPE")
                .HasColumnType("varchar(60)");


            entity.Property(e => e.RateEstimateTemplate)
                .HasColumnName("RATE_ESTIMATE_TEMPLATE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.TemplateShipment)
                .HasColumnName("TEMPLATE_SHIPMENT")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.TemplateSubscription)
                .HasColumnName("TEMPLATE_SUBSCRIPTION")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.ShipmentGatewayConfig)
                .WithOne(p => p.ShipmentGatewayFedex)
                .HasForeignKey<ShipmentGatewayFedex>(d => d.ShipmentGatewayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SGFED_SGC");
        });

        modelBuilder.Entity<ShipmentGatewayUp>(entity =>
        {
            entity.HasKey(e => e.ShipmentGatewayConfigId)
                .HasName("PRIMARY");

            entity.ToTable("SHIPMENT_GATEWAY_UPS");


            entity.HasIndex(e => e.ShipmentGatewayConfigId)
                .HasName("SGUPS_SGC");

            entity.Property(e => e.ShipmentGatewayConfigId)
                .HasColumnName("SHIPMENT_GATEWAY_CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AccessLicenseNumber)
                .HasColumnName("ACCESS_LICENSE_NUMBER")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AccessPassword)
                .HasColumnName("ACCESS_PASSWORD")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AccessUserId)
                .HasColumnName("ACCESS_USER_ID")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.BillShipperAccountNumber)
                .HasColumnName("BILL_SHIPPER_ACCOUNT_NUMBER")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CodAllowCod)
                .HasColumnName("COD_ALLOW_COD")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CodFundsCode)
                .HasColumnName("COD_FUNDS_CODE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CodSurchargeAmount)
                .HasColumnName("COD_SURCHARGE_AMOUNT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.CodSurchargeApplyToPackage)
                .HasColumnName("COD_SURCHARGE_APPLY_TO_PACKAGE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CodSurchargeCurrencyUomId)
                .HasColumnName("COD_SURCHARGE_CURRENCY_UOM_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.ConnectTimeout)
                .HasColumnName("CONNECT_TIMEOUT")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ConnectUrl)
                .HasColumnName("CONNECT_URL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CustomerClassification)
                .HasColumnName("CUSTOMER_CLASSIFICATION")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.DefaultReturnLabelMemo)
                .HasColumnName("DEFAULT_RETURN_LABEL_MEMO")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.DefaultReturnLabelSubject)
                .HasColumnName("DEFAULT_RETURN_LABEL_SUBJECT")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.MaxEstimateWeight)
                .HasColumnName("MAX_ESTIMATE_WEIGHT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.MinEstimateWeight)
                .HasColumnName("MIN_ESTIMATE_WEIGHT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.SaveCertInfo)
                .HasColumnName("SAVE_CERT_INFO")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.SaveCertPath)
                .HasColumnName("SAVE_CERT_PATH")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ShipperNumber)
                .HasColumnName("SHIPPER_NUMBER")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ShipperPickupType)
                .HasColumnName("SHIPPER_PICKUP_TYPE")
                .HasColumnType("varchar(60)");

            entity.HasOne(d => d.ShipmentGatewayConfig)
                .WithOne(p => p.ShipmentGatewayUp)
                .HasForeignKey<ShipmentGatewayUp>(d => d.ShipmentGatewayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SGUPS_SGC");
        });

        modelBuilder.Entity<ShipmentGatewayUsp>(entity =>
        {
            entity.HasKey(e => e.ShipmentGatewayConfigId)
                .HasName("PRIMARY");

            entity.ToTable("SHIPMENT_GATEWAY_USPS");


            entity.HasIndex(e => e.ShipmentGatewayConfigId)
                .HasName("SGUSPS_SGC");

            entity.Property(e => e.ShipmentGatewayConfigId)
                .HasColumnName("SHIPMENT_GATEWAY_CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AccessPassword)
                .HasColumnName("ACCESS_PASSWORD")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AccessUserId)
                .HasColumnName("ACCESS_USER_ID")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ConnectTimeout)
                .HasColumnName("CONNECT_TIMEOUT")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ConnectUrl)
                .HasColumnName("CONNECT_URL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ConnectUrlLabels)
                .HasColumnName("CONNECT_URL_LABELS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.MaxEstimateWeight)
                .HasColumnName("MAX_ESTIMATE_WEIGHT")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.Test)
                .HasColumnName("TEST")
                .HasColumnType("varchar(60)");

            entity.HasOne(d => d.ShipmentGatewayConfig)
                .WithOne(p => p.ShipmentGatewayUsp)
                .HasForeignKey<ShipmentGatewayUsp>(d => d.ShipmentGatewayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SGUSPS_SGC");
        });

        modelBuilder.Entity<ShipmentItem>(entity =>
        {
            entity.HasKey(e => new { e.ShipmentId, e.ShipmentItemSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("SHIPMENT_ITEM");


            entity.HasIndex(e => e.ProductId)
                .HasName("SHPMNT_ITM_PROD");

            entity.HasIndex(e => e.ShipmentId)
                .HasName("SHPMNT_ITM_SHPMT");

            entity.Property(e => e.ShipmentId)
                .HasColumnName("SHIPMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentItemSeqId)
                .HasColumnName("SHIPMENT_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ShipmentContentDescription)
                .HasColumnName("SHIPMENT_CONTENT_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ShipmentItems)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("SHPMNT_ITM_PROD");

            entity.HasOne(d => d.Shipment)
                .WithMany(p => p.ShipmentItems)
                .HasForeignKey(d => d.ShipmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHPMNT_ITM_SHPMT");
        });

        modelBuilder.Entity<ShipmentItemBilling>(entity =>
        {
            entity.HasKey(e => new { e.ShipmentId, e.ShipmentItemSeqId, e.InvoiceId, e.InvoiceItemSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("SHIPMENT_ITEM_BILLING");


            entity.HasIndex(e => new { e.InvoiceId, e.InvoiceItemSeqId })
                .HasName("SHPMNT_ITBL_INIM");

            entity.HasIndex(e => new { e.ShipmentId, e.ShipmentItemSeqId })
                .HasName("SHPMNT_ITBL_SPIM");

            entity.Property(e => e.ShipmentId)
                .HasColumnName("SHIPMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentItemSeqId)
                .HasColumnName("SHIPMENT_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceId)
                .HasColumnName("INVOICE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceItemSeqId)
                .HasColumnName("INVOICE_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.InvoiceI)
                .WithMany(p => p.ShipmentItemBillings)
                .HasForeignKey(d => new { d.InvoiceId, d.InvoiceItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHPMNT_ITBL_INIM");

            entity.HasOne(d => d.ShipmentI)
                .WithMany(p => p.ShipmentItemBillings)
                .HasForeignKey(d => new { d.ShipmentId, d.ShipmentItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHPMNT_ITBL_SPIM");
        });

        modelBuilder.Entity<ShipmentItemFeature>(entity =>
        {
            entity.HasKey(e => new { e.ShipmentId, e.ShipmentItemSeqId, e.ProductFeatureId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("SHIPMENT_ITEM_FEATURE");


            entity.HasIndex(e => e.ProductFeatureId)
                .HasName("SHPMNT_ITFT_FEAT");

            entity.HasIndex(e => new { e.ShipmentId, e.ShipmentItemSeqId })
                .HasName("SHPMNT_ITFT_SPIM");

            entity.Property(e => e.ShipmentId)
                .HasColumnName("SHIPMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentItemSeqId)
                .HasColumnName("SHIPMENT_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductFeatureId)
                .HasColumnName("PRODUCT_FEATURE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ProductFeature)
                .WithMany(p => p.ShipmentItemFeatures)
                .HasForeignKey(d => d.ProductFeatureId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHPMNT_ITFT_FEAT");

            entity.HasOne(d => d.ShipmentI)
                .WithMany(p => p.ShipmentItemFeatures)
                .HasForeignKey(d => new { d.ShipmentId, d.ShipmentItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHPMNT_ITFT_SPIM");
        });

        modelBuilder.Entity<ShipmentMethodType>(entity =>
        {
            entity.ToTable("SHIPMENT_METHOD_TYPE");


            entity.Property(e => e.ShipmentMethodTypeId)
                .HasColumnName("SHIPMENT_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");
        });

        modelBuilder.Entity<ShipmentPackage>(entity =>
        {
            entity.HasKey(e => new { e.ShipmentId, e.ShipmentPackageSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("SHIPMENT_PACKAGE");


            entity.HasIndex(e => e.DimensionUomId)
                .HasName("SHPKG_DUOM");


            entity.HasIndex(e => e.ShipmentBoxTypeId)
                .HasName("SHPKG_BXTYP");

            entity.HasIndex(e => e.ShipmentId)
                .HasName("SHPKG_SHPMNT");

            entity.HasIndex(e => e.WeightUomId)
                .HasName("SHPKG_WUOM");

            entity.Property(e => e.ShipmentId)
                .HasColumnName("SHIPMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentPackageSeqId)
                .HasColumnName("SHIPMENT_PACKAGE_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BoxHeight)
                .HasColumnName("BOX_HEIGHT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.BoxLength)
                .HasColumnName("BOX_LENGTH")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.BoxWidth)
                .HasColumnName("BOX_WIDTH")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DateCreated)
                .HasColumnName("DATE_CREATED")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.DimensionUomId)
                .HasColumnName("DIMENSION_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InsuredValue)
                .HasColumnName("INSURED_VALUE")
                .HasColumnType("decimal(18,2)");


            entity.Property(e => e.ShipmentBoxTypeId)
                .HasColumnName("SHIPMENT_BOX_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Weight)
                .HasColumnName("WEIGHT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.WeightUomId)
                .HasColumnName("WEIGHT_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.DimensionUom)
                .WithMany(p => p.ShipmentPackageDimensionUoms)
                .HasForeignKey(d => d.DimensionUomId)
                .HasConstraintName("SHPKG_DUOM");

            entity.HasOne(d => d.ShipmentBoxType)
                .WithMany(p => p.ShipmentPackages)
                .HasForeignKey(d => d.ShipmentBoxTypeId)
                .HasConstraintName("SHPKG_BXTYP");

            entity.HasOne(d => d.Shipment)
                .WithMany(p => p.ShipmentPackages)
                .HasForeignKey(d => d.ShipmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHPKG_SHPMNT");

            entity.HasOne(d => d.WeightUom)
                .WithMany(p => p.ShipmentPackageWeightUoms)
                .HasForeignKey(d => d.WeightUomId)
                .HasConstraintName("SHPKG_WUOM");
        });

        modelBuilder.Entity<ShipmentPackageContent>(entity =>
        {
            entity.HasKey(e => new { e.ShipmentId, e.ShipmentPackageSeqId, e.ShipmentItemSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("SHIPMENT_PACKAGE_CONTENT");


            entity.HasIndex(e => e.SubProductId)
                .HasName("PCK_CNTNT_PROD");

            entity.HasIndex(e => new { e.ShipmentId, e.ShipmentItemSeqId })
                .HasName("PCK_CNTNT_SHITM");

            entity.HasIndex(e => new { e.ShipmentId, e.ShipmentPackageSeqId })
                .HasName("PCK_CNTNT_SHPKG");

            entity.Property(e => e.ShipmentId)
                .HasColumnName("SHIPMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentPackageSeqId)
                .HasColumnName("SHIPMENT_PACKAGE_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentItemSeqId)
                .HasColumnName("SHIPMENT_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.SubProductId)
                .HasColumnName("SUB_PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.SubProductQuantity)
                .HasColumnName("SUB_PRODUCT_QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.HasOne(d => d.SubProduct)
                .WithMany(p => p.ShipmentPackageContents)
                .HasForeignKey(d => d.SubProductId)
                .HasConstraintName("PCK_CNTNT_PROD");

            entity.HasOne(d => d.ShipmentI)
                .WithMany(p => p.ShipmentPackageContents)
                .HasForeignKey(d => new { d.ShipmentId, d.ShipmentItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PCK_CNTNT_SHITM");

            entity.HasOne(d => d.Shipment)
                .WithMany(p => p.ShipmentPackageContents)
                .HasForeignKey(d => new { d.ShipmentId, d.ShipmentPackageSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PCK_CNTNT_SHPKG");
        });

        modelBuilder.Entity<ShipmentPackageRouteSeg>(entity =>
        {
            entity.HasKey(e => new { e.ShipmentId, e.ShipmentPackageSeqId, e.ShipmentRouteSegmentId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("SHIPMENT_PACKAGE_ROUTE_SEG");


            entity.HasIndex(e => e.CurrencyUomId)
                .HasName("SHPKRTSG_CUOM");


            entity.HasIndex(e => new { e.ShipmentId, e.ShipmentPackageSeqId })
                .HasName("SHPKRTSG_SHPKG");

            entity.HasIndex(e => new { e.ShipmentId, e.ShipmentRouteSegmentId })
                .HasName("SHPKRTSG_RTSG");

            entity.Property(e => e.ShipmentId)
                .HasColumnName("SHIPMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentPackageSeqId)
                .HasColumnName("SHIPMENT_PACKAGE_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentRouteSegmentId)
                .HasColumnName("SHIPMENT_ROUTE_SEGMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BoxNumber)
                .HasColumnName("BOX_NUMBER")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CodAmount)
                .HasColumnName("COD_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrencyUomId)
                .HasColumnName("CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InsuredAmount)
                .HasColumnName("INSURED_AMOUNT")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.InternationalInvoice).HasColumnName("INTERNATIONAL_INVOICE");

            entity.Property(e => e.LabelHtml)
                .HasColumnName("LABEL_HTML")
                .HasColumnType("longtext");

            entity.Property(e => e.LabelImage).HasColumnName("LABEL_IMAGE");

            entity.Property(e => e.LabelIntlSignImage).HasColumnName("LABEL_INTL_SIGN_IMAGE");

            entity.Property(e => e.LabelPrinted)
                .HasColumnName("LABEL_PRINTED")
                .HasColumnType("char(1)");


            entity.Property(e => e.PackageOtherCost)
                .HasColumnName("PACKAGE_OTHER_COST")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.PackageServiceCost)
                .HasColumnName("PACKAGE_SERVICE_COST")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.PackageTransportCost)
                .HasColumnName("PACKAGE_TRANSPORT_COST")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.TrackingCode)
                .HasColumnName("TRACKING_CODE")
                .HasColumnType("varchar(60)");

            entity.HasOne(d => d.CurrencyUom)
                .WithMany(p => p.ShipmentPackageRouteSegs)
                .HasForeignKey(d => d.CurrencyUomId)
                .HasConstraintName("SHPKRTSG_CUOM");

            entity.HasOne(d => d.Shipment)
                .WithMany(p => p.ShipmentPackageRouteSegs)
                .HasForeignKey(d => new { d.ShipmentId, d.ShipmentPackageSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHPKRTSG_SHPKG");

            entity.HasOne(d => d.ShipmentNavigation)
                .WithMany(p => p.ShipmentPackageRouteSegs)
                .HasForeignKey(d => new { d.ShipmentId, d.ShipmentRouteSegmentId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHPKRTSG_RTSG");
        });

        modelBuilder.Entity<ShipmentReceipt>(entity =>
        {
            entity.HasKey(e => e.ReceiptId)
                .HasName("PRIMARY");

            entity.ToTable("SHIPMENT_RECEIPT");


            entity.HasIndex(e => e.InventoryItemId)
                .HasName("SHP_RCPT_INVITM");


            entity.HasIndex(e => e.ProductId)
                .HasName("SHP_RCPT_PROD");

            entity.HasIndex(e => e.ReceivedByUserLoginId)
                .HasName("SHP_RCPT_USERLGN");

            entity.HasIndex(e => e.RejectionId)
                .HasName("SHP_RCPT_REJRSN");

            entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId })
                .HasName("SHP_RCPT_ORDITM");

            entity.HasIndex(e => new { e.ReturnId, e.ReturnItemSeqId })
                .HasName("SHP_RCPT_RETINVITM");

            entity.HasIndex(e => new { e.ShipmentId, e.ShipmentPackageSeqId })
                .HasName("SHP_RCPT_SHPKG");

            entity.Property(e => e.ReceiptId)
                .HasColumnName("RECEIPT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DatetimeReceived)
                .HasColumnName("DATETIME_RECEIVED")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.InventoryItemId)
                .HasColumnName("INVENTORY_ITEM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ItemDescription)
                .HasColumnName("ITEM_DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.QuantityAccepted)
                .HasColumnName("QUANTITY_ACCEPTED")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.QuantityRejected)
                .HasColumnName("QUANTITY_REJECTED")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReceivedByUserLoginId)
                .HasColumnName("RECEIVED_BY_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.RejectionId)
                .HasColumnName("REJECTION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReturnId)
                .HasColumnName("RETURN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReturnItemSeqId)
                .HasColumnName("RETURN_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentId)
                .HasColumnName("SHIPMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentItemSeqId)
                .HasColumnName("SHIPMENT_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentPackageSeqId)
                .HasColumnName("SHIPMENT_PACKAGE_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.InventoryItem)
                .WithMany(p => p.ShipmentReceipts)
                .HasForeignKey(d => d.InventoryItemId)
                .HasConstraintName("SHP_RCPT_INVITM");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ShipmentReceipts)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("SHP_RCPT_PROD");

            entity.HasOne(d => d.ReceivedByUserLogin)
                .WithMany(p => p.ShipmentReceipts)
                .HasForeignKey(d => d.ReceivedByUserLoginId)
                .HasConstraintName("SHP_RCPT_USERLGN");

            entity.HasOne(d => d.Rejection)
                .WithMany(p => p.ShipmentReceipts)
                .HasForeignKey(d => d.RejectionId)
                .HasConstraintName("SHP_RCPT_REJRSN");

            entity.HasOne(d => d.OrderI)
                .WithMany(p => p.ShipmentReceipts)
                .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                .HasConstraintName("SHP_RCPT_ORDITM");

            entity.HasOne(d => d.ReturnI)
                .WithMany(p => p.ShipmentReceipts)
                .HasForeignKey(d => new { d.ReturnId, d.ReturnItemSeqId })
                .HasConstraintName("SHP_RCPT_RETINVITM");

            entity.HasOne(d => d.Shipment)
                .WithMany(p => p.ShipmentReceipts)
                .HasForeignKey(d => new { d.ShipmentId, d.ShipmentPackageSeqId })
                .HasConstraintName("SHP_RCPT_SHPKG");
        });

        modelBuilder.Entity<ShipmentReceiptRole>(entity =>
        {
            entity.HasKey(e => new { e.ReceiptId, e.PartyId, e.RoleTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("SHIPMENT_RECEIPT_ROLE");


            entity.HasIndex(e => e.PartyId)
                .HasName("SHP_RCPTRL_PTY");

            entity.HasIndex(e => e.ReceiptId)
                .HasName("SHP_RCPTRL_RCPT");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("SHP_RCPTRL_PTRL");

            entity.Property(e => e.ReceiptId)
                .HasColumnName("RECEIPT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Party)
                .WithMany(p => p.ShipmentReceiptRoles)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHP_RCPTRL_PTY");

            entity.HasOne(d => d.Receipt)
                .WithMany(p => p.ShipmentReceiptRoles)
                .HasForeignKey(d => d.ReceiptId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHP_RCPTRL_RCPT");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.ShipmentReceiptRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHP_RCPTRL_PTRL");
        });

        modelBuilder.Entity<ShipmentRouteSegment>(entity =>
        {
            entity.HasKey(e => new { e.ShipmentId, e.ShipmentRouteSegmentId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("SHIPMENT_ROUTE_SEGMENT");

            entity.HasIndex(e => e.BillingWeightUomId)
                .HasName("SHPKRTSG_BWUOM");

            entity.HasIndex(e => e.CarrierPartyId)
                .HasName("SHPMT_RTSEG_CPTY");

            entity.HasIndex(e => e.CarrierServiceStatusId)
                .HasName("SHPKRTSG_CSSTS");


            entity.HasIndex(e => e.CurrencyUomId)
                .HasName("SHPMT_RTSEG_CUOM");

            entity.HasIndex(e => e.DeliveryId)
                .HasName("SHPMT_RTSEG_DEL");

            entity.HasIndex(e => e.DestContactMechId)
                .HasName("SHPMT_RTSEG_DPAD");

            entity.HasIndex(e => e.DestFacilityId)
                .HasName("SHPMT_RTSEG_DFAC");

            entity.HasIndex(e => e.DestTelecomNumberId)
                .HasName("SHPMT_RTSEG_DTCN");


            entity.HasIndex(e => e.OriginContactMechId)
                .HasName("SHPMT_RTSEG_OPAD");

            entity.HasIndex(e => e.OriginFacilityId)
                .HasName("SHPMT_RTSEG_OFAC");

            entity.HasIndex(e => e.OriginTelecomNumberId)
                .HasName("SHPMT_RTSEG_OTCN");

            entity.HasIndex(e => e.ShipmentId)
                .HasName("SHPMT_RTSEG_SHPMT");

            entity.HasIndex(e => e.ShipmentMethodTypeId)
                .HasName("SHPMT_RTSEG_SHMT");

            entity.Property(e => e.ShipmentId)
                .HasColumnName("SHIPMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentRouteSegmentId)
                .HasColumnName("SHIPMENT_ROUTE_SEGMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ActualArrivalDate)
                .HasColumnName("ACTUAL_ARRIVAL_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ActualCost)
                .HasColumnName("ACTUAL_COST")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.ActualOtherCost)
                .HasColumnName("ACTUAL_OTHER_COST")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.ActualServiceCost)
                .HasColumnName("ACTUAL_SERVICE_COST")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.ActualStartDate)
                .HasColumnName("ACTUAL_START_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ActualTransportCost)
                .HasColumnName("ACTUAL_TRANSPORT_COST")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.BillingWeight)
                .HasColumnName("BILLING_WEIGHT")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.BillingWeightUomId)
                .HasColumnName("BILLING_WEIGHT_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CarrierDeliveryZone)
                .HasColumnName("CARRIER_DELIVERY_ZONE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CarrierPartyId)
                .HasColumnName("CARRIER_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CarrierRestrictionCodes)
                .HasColumnName("CARRIER_RESTRICTION_CODES")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CarrierRestrictionDesc)
                .HasColumnName("CARRIER_RESTRICTION_DESC")
                .HasColumnType("longtext");

            entity.Property(e => e.CarrierServiceStatusId)
                .HasColumnName("CARRIER_SERVICE_STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrencyUomId)
                .HasColumnName("CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DeliveryId)
                .HasColumnName("DELIVERY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DestContactMechId)
                .HasColumnName("DEST_CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DestFacilityId)
                .HasColumnName("DEST_FACILITY_ID");

            entity.Property(e => e.DestTelecomNumberId)
                .HasColumnName("DEST_TELECOM_NUMBER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.EstimatedArrivalDate)
                .HasColumnName("ESTIMATED_ARRIVAL_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.EstimatedStartDate)
                .HasColumnName("ESTIMATED_START_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.HomeDeliveryDate)
                .HasColumnName("HOME_DELIVERY_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.HomeDeliveryType)
                .HasColumnName("HOME_DELIVERY_TYPE")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.LastUpdatedDate)
                .HasColumnName("LAST_UPDATED_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.OriginContactMechId)
                .HasColumnName("ORIGIN_CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OriginFacilityId)
                .HasColumnName("ORIGIN_FACILITY_ID");

            entity.Property(e => e.OriginTelecomNumberId)
                .HasColumnName("ORIGIN_TELECOM_NUMBER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentMethodTypeId)
                .HasColumnName("SHIPMENT_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThirdPartyAccountNumber)
                .HasColumnName("THIRD_PARTY_ACCOUNT_NUMBER")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThirdPartyCountryGeoCode)
                .HasColumnName("THIRD_PARTY_COUNTRY_GEO_CODE")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThirdPartyPostalCode)
                .HasColumnName("THIRD_PARTY_POSTAL_CODE")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TrackingDigest)
                .HasColumnName("TRACKING_DIGEST")
                .HasColumnType("longtext");

            entity.Property(e => e.TrackingIdNumber)
                .HasColumnName("TRACKING_ID_NUMBER")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.UpdatedByUserLoginId)
                .HasColumnName("UPDATED_BY_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.UpsHighValueReport).HasColumnName("UPS_HIGH_VALUE_REPORT");

            entity.HasOne(d => d.BillingWeightUom)
                .WithMany(p => p.ShipmentRouteSegmentBillingWeightUoms)
                .HasForeignKey(d => d.BillingWeightUomId)
                .HasConstraintName("SHPKRTSG_BWUOM");

            entity.HasOne(d => d.CarrierParty)
                .WithMany(p => p.ShipmentRouteSegments)
                .HasForeignKey(d => d.CarrierPartyId)
                .HasConstraintName("SHPMT_RTSEG_CPTY");

            entity.HasOne(d => d.CarrierServiceStatus)
                .WithMany(p => p.ShipmentRouteSegments)
                .HasForeignKey(d => d.CarrierServiceStatusId)
                .HasConstraintName("SHPKRTSG_CSSTS");

            entity.HasOne(d => d.CurrencyUom)
                .WithMany(p => p.ShipmentRouteSegmentCurrencyUoms)
                .HasForeignKey(d => d.CurrencyUomId)
                .HasConstraintName("SHPMT_RTSEG_CUOM");

            entity.HasOne(d => d.Delivery)
                .WithMany(p => p.ShipmentRouteSegments)
                .HasForeignKey(d => d.DeliveryId)
                .HasConstraintName("SHPMT_RTSEG_DEL");

            entity.HasOne(d => d.DestContactMech)
                .WithMany(p => p.ShipmentRouteSegmentDestContactMeches)
                .HasForeignKey(d => d.DestContactMechId)
                .HasConstraintName("SHPMT_RTSEG_DPAD");

            entity.HasOne(d => d.DestFacility)
                .WithMany(p => p.ShipmentRouteSegmentDestFacilities)
                .HasForeignKey(d => d.DestFacilityId)
                .HasConstraintName("SHPMT_RTSEG_DFAC");

            entity.HasOne(d => d.DestTelecomNumber)
                .WithMany(p => p.ShipmentRouteSegmentDestTelecomNumbers)
                .HasForeignKey(d => d.DestTelecomNumberId)
                .HasConstraintName("SHPMT_RTSEG_DTCN");

            entity.HasOne(d => d.OriginContactMech)
                .WithMany(p => p.ShipmentRouteSegmentOriginContactMeches)
                .HasForeignKey(d => d.OriginContactMechId)
                .HasConstraintName("SHPMT_RTSEG_OPAD");

            entity.HasOne(d => d.OriginFacility)
                .WithMany(p => p.ShipmentRouteSegmentOriginFacilities)
                .HasForeignKey(d => d.OriginFacilityId)
                .HasConstraintName("SHPMT_RTSEG_OFAC");

            entity.HasOne(d => d.OriginTelecomNumber)
                .WithMany(p => p.ShipmentRouteSegmentOriginTelecomNumbers)
                .HasForeignKey(d => d.OriginTelecomNumberId)
                .HasConstraintName("SHPMT_RTSEG_OTCN");

            entity.HasOne(d => d.Shipment)
                .WithMany(p => p.ShipmentRouteSegments)
                .HasForeignKey(d => d.ShipmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHPMT_RTSEG_SHPMT");

            entity.HasOne(d => d.ShipmentMethodType)
                .WithMany(p => p.ShipmentRouteSegments)
                .HasForeignKey(d => d.ShipmentMethodTypeId)
                .HasConstraintName("SHPMT_RTSEG_SHMT");
        });

        modelBuilder.Entity<ShipmentStatu>(entity =>
        {
            entity.HasKey(e => new { e.StatusId, e.ShipmentId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("SHIPMENT_STATUS");

            entity.HasIndex(e => e.ChangedByUserLoginId)
                .HasName("SHPMNT_STTS_USRLGN");


            entity.HasIndex(e => e.ShipmentId)
                .HasName("SHPMNT_STTS_SHMT");

            entity.HasIndex(e => e.StatusId)
                .HasName("SHPMNT_STTS_STTS");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentId)
                .HasColumnName("SHIPMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ChangedByUserLoginId)
                .HasColumnName("CHANGE_BY_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.StatusDate)
                .HasColumnName("STATUS_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ChangeByUserLogin)
                .WithMany(p => p.ShipmentStatus)
                .HasForeignKey(d => d.ChangedByUserLoginId)
                .HasConstraintName("SHPMNT_STTS_USRLGN");

            entity.HasOne(d => d.Shipment)
                .WithMany(p => p.ShipmentStatus)
                .HasForeignKey(d => d.ShipmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHPMNT_STTS_SHMT");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.ShipmentStatus)
                .HasForeignKey(d => d.StatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHPMNT_STTS_STTS");
        });

        modelBuilder.Entity<ShipmentTimeEstimate>(entity =>
        {
            entity.HasKey(e => new
                    { e.ShipmentMethodTypeId, e.PartyId, e.RoleTypeId, e.GeoIdTo, e.GeoIdFrom, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0, 0 });

            entity.ToTable("SHIPMENT_TIME_ESTIMATE");


            entity.HasIndex(e => e.GeoIdFrom)
                .HasName("SHIPT_EST_GEO_FROM");

            entity.HasIndex(e => e.GeoIdTo)
                .HasName("SHIPT_EST_GEO_TO");


            entity.HasIndex(e => e.LeadTimeUomId)
                .HasName("SHIPT_EST_UOM");

            entity.HasIndex(e => new { e.ShipmentMethodTypeId, e.PartyId, e.RoleTypeId })
                .HasName("SHIPT_EST_METHOD");

            entity.Property(e => e.ShipmentMethodTypeId)
                .HasColumnName("SHIPMENT_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GeoIdTo)
                .HasColumnName("GEO_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.GeoIdFrom)
                .HasColumnName("GEO_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.LeadTime)
                .HasColumnName("LEAD_TIME")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.LeadTimeUomId)
                .HasColumnName("LEAD_TIME_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SequenceNumber)
                .HasColumnName("SEQUENCE_NUMBER")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.GeoIdFromNavigation)
                .WithMany(p => p.ShipmentTimeEstimateGeoIdFromNavigations)
                .HasForeignKey(d => d.GeoIdFrom)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHIPT_EST_GEO_FROM");

            entity.HasOne(d => d.GeoIdToNavigation)
                .WithMany(p => p.ShipmentTimeEstimateGeoIdToNavigations)
                .HasForeignKey(d => d.GeoIdTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHIPT_EST_GEO_TO");

            entity.HasOne(d => d.LeadTimeUom)
                .WithMany(p => p.ShipmentTimeEstimates)
                .HasForeignKey(d => d.LeadTimeUomId)
                .HasConstraintName("SHIPT_EST_UOM");

            entity.HasOne(d => d.CarrierShipmentMethod)
                .WithMany(p => p.ShipmentTimeEstimates)
                .HasForeignKey(d => new { d.ShipmentMethodTypeId, d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHIPT_EST_METHOD");
        });

        modelBuilder.Entity<ShipmentType>(entity =>
        {
            entity.ToTable("SHIPMENT_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("SHPMNT_TYPPAR");

            entity.Property(e => e.ShipmentTypeId)
                .HasColumnName("SHIPMENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("SHPMNT_TYPPAR");
        });

        modelBuilder.Entity<ShipmentTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.ShipmentTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("SHIPMENT_TYPE_ATTR");


            entity.HasIndex(e => e.ShipmentTypeId)
                .HasName("SHPMNT_TYPATR");

            entity.Property(e => e.ShipmentTypeId)
                .HasColumnName("SHIPMENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.ShipmentType)
                .WithMany(p => p.ShipmentTypeAttrs)
                .HasForeignKey(d => d.ShipmentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHPMNT_TYPATR");
        });

        modelBuilder.Entity<ShippingDocument>(entity =>
        {
            entity.HasKey(e => e.DocumentId)
                .HasName("PRIMARY");

            entity.ToTable("SHIPPING_DOCUMENT");


            entity.HasIndex(e => e.DocumentId)
                .HasName("SHPNG_DOC_DOC");


            entity.HasIndex(e => new { e.ShipmentId, e.ShipmentItemSeqId })
                .HasName("SHPNG_DOC_SMITM");

            entity.HasIndex(e => new { e.ShipmentId, e.ShipmentPackageSeqId })
                .HasName("SHPNG_DOC_SHPKG");

            entity.Property(e => e.DocumentId)
                .HasColumnName("DOCUMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.ShipmentId)
                .HasColumnName("SHIPMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentItemSeqId)
                .HasColumnName("SHIPMENT_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentPackageSeqId)
                .HasColumnName("SHIPMENT_PACKAGE_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Document)
                .WithOne(p => p.ShippingDocument)
                .HasForeignKey<ShippingDocument>(d => d.DocumentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHPNG_DOC_DOC");

            entity.HasOne(d => d.ShipmentI)
                .WithMany(p => p.ShippingDocuments)
                .HasForeignKey(d => new { d.ShipmentId, d.ShipmentItemSeqId })
                .HasConstraintName("SHPNG_DOC_SMITM");

            entity.HasOne(d => d.Shipment)
                .WithMany(p => p.ShippingDocuments)
                .HasForeignKey(d => new { d.ShipmentId, d.ShipmentPackageSeqId })
                .HasConstraintName("SHPNG_DOC_SHPKG");
        });

        modelBuilder.Entity<ShoppingList>(entity =>
        {
            entity.ToTable("SHOPPING_LIST");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("SHLIST_CMECH");


            entity.HasIndex(e => e.ParentShoppingListId)
                .HasName("SHLIST_PARENT");

            entity.HasIndex(e => e.PartyId)
                .HasName("SHLIST_PTY");

            entity.HasIndex(e => e.PaymentMethodId)
                .HasName("SHLIST_PYMETH");

            entity.HasIndex(e => e.ProductPromoCodeId)
                .HasName("SHLIST_PRMCD");

            entity.HasIndex(e => e.ProductStoreId)
                .HasName("SHLIST_PRDS");

            entity.HasIndex(e => e.RecurrenceInfoId)
                .HasName("SHLIST_RECINFO");

            entity.HasIndex(e => e.ShoppingListTypeId)
                .HasName("SHLIST_TYPE");

            entity.HasIndex(e => new { e.ShipmentMethodTypeId, e.CarrierPartyId, e.CarrierRoleTypeId })
                .HasName("SHLIST_CSSM");

            entity.Property(e => e.ShoppingListId)
                .HasColumnName("SHOPPING_LIST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CarrierPartyId)
                .HasColumnName("CARRIER_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CarrierRoleTypeId)
                .HasColumnName("CARRIER_ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrencyUom)
                .HasColumnName("CURRENCY_UOM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.IsActive)
                .HasColumnName("IS_ACTIVE")
                .HasColumnType("char(1)");

            entity.Property(e => e.IsPublic)
                .HasColumnName("IS_PUBLIC")
                .HasColumnType("char(1)");

            entity.Property(e => e.LastAdminModified)
                .HasColumnName("LAST_ADMIN_MODIFIED")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.LastOrderedDate)
                .HasColumnName("LAST_ORDERED_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ListName)
                .HasColumnName("LIST_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.ParentShoppingListId)
                .HasColumnName("PARENT_SHOPPING_LIST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PaymentMethodId)
                .HasColumnName("PAYMENT_METHOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductPromoCodeId)
                .HasColumnName("PRODUCT_PROMO_CODE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RecurrenceInfoId)
                .HasColumnName("RECURRENCE_INFO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShipmentMethodTypeId)
                .HasColumnName("SHIPMENT_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShoppingListTypeId)
                .HasColumnName("SHOPPING_LIST_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.VisitorId)
                .HasColumnName("VISITOR_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.ShoppingLists)
                .HasForeignKey(d => d.ContactMechId)
                .HasConstraintName("SHLIST_CMECH");

            entity.HasOne(d => d.ParentShoppingList)
                .WithMany(p => p.InverseParentShoppingList)
                .HasForeignKey(d => d.ParentShoppingListId)
                .HasConstraintName("SHLIST_PARENT");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.ShoppingLists)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("SHLIST_PTY");

            entity.HasOne(d => d.PaymentMethod)
                .WithMany(p => p.ShoppingLists)
                .HasForeignKey(d => d.PaymentMethodId)
                .HasConstraintName("SHLIST_PYMETH");

            entity.HasOne(d => d.ProductPromoCode)
                .WithMany(p => p.ShoppingLists)
                .HasForeignKey(d => d.ProductPromoCodeId)
                .HasConstraintName("SHLIST_PRMCD");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.ShoppingLists)
                .HasForeignKey(d => d.ProductStoreId)
                .HasConstraintName("SHLIST_PRDS");

            entity.HasOne(d => d.RecurrenceInfo)
                .WithMany(p => p.ShoppingLists)
                .HasForeignKey(d => d.RecurrenceInfoId)
                .HasConstraintName("SHLIST_RECINFO");

            entity.HasOne(d => d.ShoppingListType)
                .WithMany(p => p.ShoppingLists)
                .HasForeignKey(d => d.ShoppingListTypeId)
                .HasConstraintName("SHLIST_TYPE");

            entity.HasOne(d => d.CarrierShipmentMethod)
                .WithMany(p => p.ShoppingLists)
                .HasForeignKey(d => new { d.ShipmentMethodTypeId, d.CarrierPartyId, d.CarrierRoleTypeId })
                .HasConstraintName("SHLIST_CSSM");
        });

        modelBuilder.Entity<ShoppingListItem>(entity =>
        {
            entity.HasKey(e => new { e.ShoppingListId, e.ShoppingListItemSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("SHOPPING_LIST_ITEM");


            entity.HasIndex(e => e.ProductId)
                .HasName("SHLIST_ITEM_PROD");

            entity.HasIndex(e => e.ShoppingListId)
                .HasName("SHLIST_ITEM_LIST");

            entity.Property(e => e.ShoppingListId)
                .HasColumnName("SHOPPING_LIST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShoppingListItemSeqId)
                .HasColumnName("SHOPPING_LIST_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ConfigId)
                .HasColumnName("CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ModifiedPrice)
                .HasColumnName("MODIFIED_PRICE")
                .HasColumnType("decimal(18,3)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.Quantity)
                .HasColumnName("QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.QuantityPurchased)
                .HasColumnName("QUANTITY_PURCHASED")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReservLength)
                .HasColumnName("RESERV_LENGTH")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReservPersons)
                .HasColumnName("RESERV_PERSONS")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReservStart)
                .HasColumnName("RESERV_START")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.ShoppingListItems)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("SHLIST_ITEM_PROD");

            entity.HasOne(d => d.ShoppingList)
                .WithMany(p => p.ShoppingListItems)
                .HasForeignKey(d => d.ShoppingListId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHLIST_ITEM_LIST");
        });

        modelBuilder.Entity<ShoppingListItemSurvey>(entity =>
        {
            entity.HasKey(e => new { e.ShoppingListId, e.ShoppingListItemSeqId, e.SurveyResponseId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("SHOPPING_LIST_ITEM_SURVEY");


            entity.HasIndex(e => e.ShoppingListId)
                .HasName("SHLIST_ITSUR_LIST");

            entity.HasIndex(e => e.SurveyResponseId)
                .HasName("SHLIST_ITSUR_RESP");

            entity.HasIndex(e => new { e.ShoppingListId, e.ShoppingListItemSeqId })
                .HasName("SHLIST_ITSUR_ITEM");

            entity.Property(e => e.ShoppingListId)
                .HasColumnName("SHOPPING_LIST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShoppingListItemSeqId)
                .HasColumnName("SHOPPING_LIST_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SurveyResponseId)
                .HasColumnName("SURVEY_RESPONSE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ShoppingList)
                .WithMany(p => p.ShoppingListItemSurveys)
                .HasForeignKey(d => d.ShoppingListId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHLIST_ITSUR_LIST");

            entity.HasOne(d => d.SurveyResponse)
                .WithMany(p => p.ShoppingListItemSurveys)
                .HasForeignKey(d => d.SurveyResponseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHLIST_ITSUR_RESP");

            entity.HasOne(d => d.ShoppingListI)
                .WithMany(p => p.ShoppingListItemSurveys)
                .HasForeignKey(d => new { d.ShoppingListId, d.ShoppingListItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHLIST_ITSUR_ITEM");
        });

        modelBuilder.Entity<ShoppingListType>(entity =>
        {
            entity.ToTable("SHOPPING_LIST_TYPE");


            entity.Property(e => e.ShoppingListTypeId)
                .HasColumnName("SHOPPING_LIST_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<ShoppingListWorkEffort>(entity =>
        {
            entity.HasKey(e => new { e.ShoppingListId, e.WorkEffortId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("SHOPPING_LIST_WORK_EFFORT");


            entity.HasIndex(e => e.ShoppingListId)
                .HasName("SHLISTWE_SHLST");

            entity.HasIndex(e => e.WorkEffortId)
                .HasName("SHLISTWE_WEFF");

            entity.Property(e => e.ShoppingListId)
                .HasColumnName("SHOPPING_LIST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ShoppingList)
                .WithMany(p => p.ShoppingListWorkEfforts)
                .HasForeignKey(d => d.ShoppingListId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHLISTWE_SHLST");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.ShoppingListWorkEfforts)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SHLISTWE_WEFF");
        });

        modelBuilder.Entity<SkillType>(entity =>
        {
            entity.ToTable("SKILL_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("PARNT_SKILL_TYPE");

            entity.Property(e => e.SkillTypeId)
                .HasColumnName("SKILL_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("PARNT_SKILL_TYPE");
        });

        modelBuilder.Entity<StandardLanguage>(entity =>
        {
            entity.ToTable("STANDARD_LANGUAGE");


            entity.Property(e => e.StandardLanguageId)
                .HasColumnName("STANDARD_LANGUAGE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.LangCharset)
                .HasColumnName("LANG_CHARSET")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.LangCode2)
                .HasColumnName("LANG_CODE2")
                .HasColumnType("varchar(10)");

            entity.Property(e => e.LangCode3b)
                .HasColumnName("LANG_CODE3B")
                .HasColumnType("varchar(10)");

            entity.Property(e => e.LangCode3t)
                .HasColumnName("LANG_CODE3T")
                .HasColumnType("varchar(10)");

            entity.Property(e => e.LangFamily)
                .HasColumnName("LANG_FAMILY")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.LangName)
                .HasColumnName("LANG_NAME")
                .HasColumnType("varchar(60)");
        });

        modelBuilder.Entity<StatusItem>(entity =>
        {
            entity.HasKey(e => e.StatusId)
                .HasName("PRIMARY");

            entity.ToTable("STATUS_ITEM");


            entity.HasIndex(e => e.StatusTypeId)
                .HasName("STATUS_TO_TYPE");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.SequenceId)
                .HasColumnName("SEQUENCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusCode)
                .HasColumnName("STATUS_CODE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.StatusTypeId)
                .HasColumnName("STATUS_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.StatusType)
                .WithMany(p => p.StatusItems)
                .HasForeignKey(d => d.StatusTypeId)
                .HasConstraintName("STATUS_TO_TYPE");
        });

        modelBuilder.Entity<StatusType>(entity =>
        {
            entity.ToTable("STATUS_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("STATUS_TYPE_PARENT");

            entity.Property(e => e.StatusTypeId)
                .HasColumnName("STATUS_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");

            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("STATUS_TYPE_PARENT")
                .IsRequired(false);
        });

        modelBuilder.Entity<StatusValidChange>(entity =>
        {
            entity.HasKey(e => new { e.StatusId, e.StatusIdTo })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("STATUS_VALID_CHANGE");


            entity.HasIndex(e => e.StatusId)
                .HasName("STATUS_CHG_MAIN");

            entity.HasIndex(e => e.StatusIdTo)
                .HasName("STATUS_CHG_TO");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusIdTo)
                .HasColumnName("STATUS_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ConditionExpression)
                .HasColumnName("CONDITION_EXPRESSION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.TransitionName)
                .HasColumnName("TRANSITION_NAME")
                .HasColumnType("varchar(100)");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.StatusValidChangeStatus)
                .HasForeignKey(d => d.StatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("STATUS_CHG_MAIN");

            entity.HasOne(d => d.StatusIdToNavigation)
                .WithMany(p => p.StatusValidChangeStatusIdToNavigations)
                .HasForeignKey(d => d.StatusIdTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("STATUS_CHG_TO");
        });

        modelBuilder.Entity<Subscription>(entity =>
        {
            entity.ToTable("SUBSCRIPTION");

            entity.HasIndex(e => e.AvailableTimeUomId)
                .HasName("SUBSC_ATU");

            entity.HasIndex(e => e.CanclAutmExtTimeUomId)
                .HasName("SUBSC_CTU");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("SUBSC_CONT_MECH");


            entity.HasIndex(e => e.GracePeriodOnExpiryUomId)
                .HasName("SUBSC_GTU");

            entity.HasIndex(e => e.InventoryItemId)
                .HasName("SUBSC_INV_ITM");


            entity.HasIndex(e => e.MaxLifeTimeUomId)
                .HasName("SUBSC_MTU");

            entity.HasIndex(e => e.NeedTypeId)
                .HasName("SUBSC_NEED_TYPE");

            entity.HasIndex(e => e.OriginatedFromPartyId)
                .HasName("SUBSC_OPARTY");

            entity.HasIndex(e => e.OriginatedFromRoleTypeId)
                .HasName("SUBSC_OROLE_TYPE");

            entity.HasIndex(e => e.PartyId)
                .HasName("SUBSC_PARTY");

            entity.HasIndex(e => e.ProductCategoryId)
                .HasName("SUBSC_PROD_CAT");

            entity.HasIndex(e => e.ProductId)
                .HasName("SUBSC_PRODUCT");

            entity.HasIndex(e => e.RoleTypeId)
                .HasName("SUBSC_ROLE_TYPE");

            entity.HasIndex(e => e.SubscriptionResourceId)
                .HasName("SUBSC_SRESRC");

            entity.HasIndex(e => e.SubscriptionTypeId)
                .HasName("SUBSC_TO_TYPE");

            entity.HasIndex(e => e.UseTimeUomId)
                .HasName("SUBSC_UTU");

            entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId })
                .HasName("SUBSC_ORDERITM");

            entity.Property(e => e.SubscriptionId)
                .HasColumnName("SUBSCRIPTION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AutomaticExtend)
                .HasColumnName("AUTOMATIC_EXTEND")
                .HasColumnType("char(1)");

            entity.Property(e => e.AvailableTime)
                .HasColumnName("AVAILABLE_TIME")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.AvailableTimeUomId)
                .HasColumnName("AVAILABLE_TIME_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CanclAutmExtTime)
                .HasColumnName("CANCL_AUTM_EXT_TIME")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.CanclAutmExtTimeUomId)
                .HasColumnName("CANCL_AUTM_EXT_TIME_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CommunicationEventId)
                .HasColumnName("COMMUNICATION_EVENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ExpirationCompletedDate)
                .HasColumnName("EXPIRATION_COMPLETED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ExternalSubscriptionId)
                .HasColumnName("EXTERNAL_SUBSCRIPTION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.GracePeriodOnExpiry)
                .HasColumnName("GRACE_PERIOD_ON_EXPIRY")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.GracePeriodOnExpiryUomId)
                .HasColumnName("GRACE_PERIOD_ON_EXPIRY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InventoryItemId)
                .HasColumnName("INVENTORY_ITEM_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.MaxLifeTime)
                .HasColumnName("MAX_LIFE_TIME")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.MaxLifeTimeUomId)
                .HasColumnName("MAX_LIFE_TIME_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.NeedTypeId)
                .HasColumnName("NEED_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OriginatedFromPartyId)
                .HasColumnName("ORIGINATED_FROM_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OriginatedFromRoleTypeId)
                .HasColumnName("ORIGINATED_FROM_ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyNeedId)
                .HasColumnName("PARTY_NEED_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductCategoryId)
                .HasColumnName("PRODUCT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.PurchaseFromDate)
                .HasColumnName("PURCHASE_FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.PurchaseThruDate)
                .HasColumnName("PURCHASE_THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SubscriptionResourceId)
                .HasColumnName("SUBSCRIPTION_RESOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SubscriptionTypeId)
                .HasColumnName("SUBSCRIPTION_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.UseCountLimit)
                .HasColumnName("USE_COUNT_LIMIT")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.UseTime)
                .HasColumnName("USE_TIME")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.UseTimeUomId)
                .HasColumnName("USE_TIME_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.AvailableTimeUom)
                .WithMany(p => p.SubscriptionAvailableTimeUoms)
                .HasForeignKey(d => d.AvailableTimeUomId)
                .HasConstraintName("SUBSC_ATU");

            entity.HasOne(d => d.CanclAutmExtTimeUom)
                .WithMany(p => p.SubscriptionCanclAutmExtTimeUoms)
                .HasForeignKey(d => d.CanclAutmExtTimeUomId)
                .HasConstraintName("SUBSC_CTU");

            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.Subscriptions)
                .HasForeignKey(d => d.ContactMechId)
                .HasConstraintName("SUBSC_CONT_MECH");

            entity.HasOne(d => d.GracePeriodOnExpiryUom)
                .WithMany(p => p.SubscriptionGracePeriodOnExpiryUoms)
                .HasForeignKey(d => d.GracePeriodOnExpiryUomId)
                .HasConstraintName("SUBSC_GTU");

            entity.HasOne(d => d.InventoryItem)
                .WithMany(p => p.Subscriptions)
                .HasForeignKey(d => d.InventoryItemId)
                .HasConstraintName("SUBSC_INV_ITM");

            entity.HasOne(d => d.MaxLifeTimeUom)
                .WithMany(p => p.SubscriptionMaxLifeTimeUoms)
                .HasForeignKey(d => d.MaxLifeTimeUomId)
                .HasConstraintName("SUBSC_MTU");

            entity.HasOne(d => d.NeedType)
                .WithMany(p => p.Subscriptions)
                .HasForeignKey(d => d.NeedTypeId)
                .HasConstraintName("SUBSC_NEED_TYPE");

            entity.HasOne(d => d.OriginatedFromParty)
                .WithMany(p => p.SubscriptionOriginatedFromParties)
                .HasForeignKey(d => d.OriginatedFromPartyId)
                .HasConstraintName("SUBSC_OPARTY");

            entity.HasOne(d => d.OriginatedFromRoleType)
                .WithMany(p => p.SubscriptionOriginatedFromRoleTypes)
                .HasForeignKey(d => d.OriginatedFromRoleTypeId)
                .HasConstraintName("SUBSC_OROLE_TYPE");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.SubscriptionParties)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("SUBSC_PARTY");

            entity.HasOne(d => d.ProductCategory)
                .WithMany(p => p.Subscriptions)
                .HasForeignKey(d => d.ProductCategoryId)
                .HasConstraintName("SUBSC_PROD_CAT");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.Subscriptions)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("SUBSC_PRODUCT");

            entity.HasOne(d => d.RoleType)
                .WithMany(p => p.SubscriptionRoleTypes)
                .HasForeignKey(d => d.RoleTypeId)
                .HasConstraintName("SUBSC_ROLE_TYPE");

            entity.HasOne(d => d.SubscriptionResource)
                .WithMany(p => p.Subscriptions)
                .HasForeignKey(d => d.SubscriptionResourceId)
                .HasConstraintName("SUBSC_SRESRC");

            entity.HasOne(d => d.SubscriptionType)
                .WithMany(p => p.Subscriptions)
                .HasForeignKey(d => d.SubscriptionTypeId)
                .HasConstraintName("SUBSC_TO_TYPE");

            entity.HasOne(d => d.UseTimeUom)
                .WithMany(p => p.SubscriptionUseTimeUoms)
                .HasForeignKey(d => d.UseTimeUomId)
                .HasConstraintName("SUBSC_UTU");

            entity.HasOne(d => d.OrderI)
                .WithMany(p => p.Subscriptions)
                .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                .HasConstraintName("SUBSC_ORDERITM");
        });

        modelBuilder.Entity<SubscriptionActivity>(entity =>
        {
            entity.ToTable("SUBSCRIPTION_ACTIVITY");


            entity.Property(e => e.SubscriptionActivityId)
                .HasColumnName("SUBSCRIPTION_ACTIVITY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DateSent)
                .HasColumnName("DATE_SENT")
                .HasColumnType("datetime(6)");
        });

        modelBuilder.Entity<SubscriptionAttribute>(entity =>
        {
            entity.HasKey(e => new { e.SubscriptionId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("SUBSCRIPTION_ATTRIBUTE");


            entity.HasIndex(e => e.SubscriptionId)
                .HasName("SUBSC_ATTR");

            entity.Property(e => e.SubscriptionId)
                .HasColumnName("SUBSCRIPTION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Subscription)
                .WithMany(p => p.SubscriptionAttributes)
                .HasForeignKey(d => d.SubscriptionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SUBSC_ATTR");
        });

        modelBuilder.Entity<SubscriptionCommEvent>(entity =>
        {
            entity.HasKey(e => new { e.SubscriptionId, e.CommunicationEventId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("SUBSCRIPTION_COMM_EVENT");

            entity.HasIndex(e => e.CommunicationEventId)
                .HasName("SUBSC_COM_EVENT");


            entity.HasIndex(e => e.SubscriptionId)
                .HasName("SUBSC_SUBSC");

            entity.Property(e => e.SubscriptionId)
                .HasColumnName("SUBSCRIPTION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CommunicationEventId)
                .HasColumnName("COMMUNICATION_EVENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.CommunicationEvent)
                .WithMany(p => p.SubscriptionCommEvents)
                .HasForeignKey(d => d.CommunicationEventId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SUBSC_COM_EVENT");

            entity.HasOne(d => d.Subscription)
                .WithMany(p => p.SubscriptionCommEvents)
                .HasForeignKey(d => d.SubscriptionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SUBSC_SUBSC");
        });

        modelBuilder.Entity<SubscriptionFulfillmentPiece>(entity =>
        {
            entity.HasKey(e => new { e.SubscriptionActivityId, e.SubscriptionId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("SUBSCRIPTION_FULFILLMENT_PIECE");


            entity.HasIndex(e => e.SubscriptionActivityId)
                .HasName("SUBSC_FP_ACT");

            entity.HasIndex(e => e.SubscriptionId)
                .HasName("SUBSC_FP");

            entity.Property(e => e.SubscriptionActivityId)
                .HasColumnName("SUBSCRIPTION_ACTIVITY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SubscriptionId)
                .HasColumnName("SUBSCRIPTION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.SubscriptionActivity)
                .WithMany(p => p.SubscriptionFulfillmentPieces)
                .HasForeignKey(d => d.SubscriptionActivityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SUBSC_FP_ACT");

            entity.HasOne(d => d.Subscription)
                .WithMany(p => p.SubscriptionFulfillmentPieces)
                .HasForeignKey(d => d.SubscriptionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SUBSC_FP");
        });

        modelBuilder.Entity<SubscriptionResource>(entity =>
        {
            entity.ToTable("SUBSCRIPTION_RESOURCE");

            entity.HasIndex(e => e.ContentId)
                .HasName("SUBSC_RES_CNTNT");


            entity.HasIndex(e => e.ParentResourceId)
                .HasName("SUBSC_RES_PARENT");

            entity.HasIndex(e => e.WebSiteId)
                .HasName("SUBSC_RES_WBSITE");

            entity.Property(e => e.SubscriptionResourceId)
                .HasColumnName("SUBSCRIPTION_RESOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.ParentResourceId)
                .HasColumnName("PARENT_RESOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ServiceNameOnExpiry)
                .HasColumnName("SERVICE_NAME_ON_EXPIRY")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.WebSiteId)
                .HasColumnName("WEB_SITE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.SubscriptionResources)
                .HasForeignKey(d => d.ContentId)
                .HasConstraintName("SUBSC_RES_CNTNT");

            entity.HasOne(d => d.ParentResource)
                .WithMany(p => p.InverseParentResource)
                .HasForeignKey(d => d.ParentResourceId)
                .HasConstraintName("SUBSC_RES_PARENT");

            entity.HasOne(d => d.WebSite)
                .WithMany(p => p.SubscriptionResources)
                .HasForeignKey(d => d.WebSiteId)
                .HasConstraintName("SUBSC_RES_WBSITE");
        });

        modelBuilder.Entity<SubscriptionType>(entity =>
        {
            entity.ToTable("SUBSCRIPTION_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("SUBSC_TYPE_PARENT");

            entity.Property(e => e.SubscriptionTypeId)
                .HasColumnName("SUBSCRIPTION_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("SUBSC_TYPE_PARENT");
        });

        modelBuilder.Entity<SubscriptionTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.SubscriptionTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("SUBSCRIPTION_TYPE_ATTR");


            entity.HasIndex(e => e.SubscriptionTypeId)
                .HasName("SUBSC_TYPE_ATTR");

            entity.Property(e => e.SubscriptionTypeId)
                .HasColumnName("SUBSCRIPTION_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.SubscriptionType)
                .WithMany(p => p.SubscriptionTypeAttrs)
                .HasForeignKey(d => d.SubscriptionTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SUBSC_TYPE_ATTR");
        });

        modelBuilder.Entity<SupplierPrefOrder>(entity =>
        {
            entity.ToTable("SUPPLIER_PREF_ORDER");


            entity.Property(e => e.SupplierPrefOrderId)
                .HasColumnName("SUPPLIER_PREF_ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<SupplierProduct>(entity =>
        {
            entity.HasKey(e => new
                    { e.ProductId, e.PartyId, e.CurrencyUomId, e.MinimumOrderQuantity, e.AvailableFromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0 });

            entity.ToTable("SUPPLIER_PRODUCT");


            entity.HasIndex(e => e.CurrencyUomId)
                .HasName("SUPPL_PROD_CUOM");


            entity.HasIndex(e => e.PartyId)
                .HasName("SUPPL_PROD_PARTY");

            entity.HasIndex(e => e.ProductId)
                .HasName("SUPPL_PROD_PROD");

            entity.HasIndex(e => e.QuantityUomId)
                .HasName("SUPPL_PROD_QUOM");

            entity.HasIndex(e => e.SupplierPrefOrderId)
                .HasName("SUPPL_PROD_SPORD");

            entity.HasIndex(e => e.SupplierRatingTypeId)
                .HasName("SUPPL_PROD_SRTPE");

            entity.HasIndex(e => new { e.AgreementId, e.AgreementItemSeqId })
                .HasName("SUPPL_PROD_AGRIT");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CurrencyUomId)
                .HasColumnName("CURRENCY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.MinimumOrderQuantity)
                .HasColumnName("MINIMUM_ORDER_QUANTITY")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.AvailableFromDate)
                .HasColumnName("AVAILABLE_FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.AgreementId)
                .HasColumnName("AGREEMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AgreementItemSeqId)
                .HasColumnName("AGREEMENT_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AvailableThruDate)
                .HasColumnName("AVAILABLE_THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CanDropShip)
                .HasColumnName("CAN_DROP_SHIP")
                .HasColumnType("char(1)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.LastPrice)
                .HasColumnName("LAST_PRICE")
                .HasColumnType("decimal(18,3)");


            entity.Property(e => e.OrderQtyIncrements)
                .HasColumnName("ORDER_QTY_INCREMENTS")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.QuantityUomId)
                .HasColumnName("QUANTITY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ShippingPrice)
                .HasColumnName("SHIPPING_PRICE")
                .HasColumnType("decimal(18,3)");

            entity.Property(e => e.StandardLeadTimeDays)
                .HasColumnName("STANDARD_LEAD_TIME_DAYS")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.SupplierPrefOrderId)
                .HasColumnName("SUPPLIER_PREF_ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SupplierProductId)
                .HasColumnName("SUPPLIER_PRODUCT_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.SupplierProductName)
                .HasColumnName("SUPPLIER_PRODUCT_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.SupplierRatingTypeId)
                .HasColumnName("SUPPLIER_RATING_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.UnitsIncluded)
                .HasColumnName("UNITS_INCLUDED")
                .HasColumnType("decimal(18,6)");

            entity.HasOne(d => d.CurrencyUom)
                .WithMany(p => p.SupplierProductCurrencyUoms)
                .HasForeignKey(d => d.CurrencyUomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SUPPL_PROD_CUOM");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.SupplierProducts)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SUPPL_PROD_PARTY");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.SupplierProducts)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SUPPL_PROD_PROD");

            entity.HasOne(d => d.QuantityUom)
                .WithMany(p => p.SupplierProductQuantityUoms)
                .HasForeignKey(d => d.QuantityUomId)
                .HasConstraintName("SUPPL_PROD_QUOM");

            entity.HasOne(d => d.SupplierPrefOrder)
                .WithMany(p => p.SupplierProducts)
                .HasForeignKey(d => d.SupplierPrefOrderId)
                .HasConstraintName("SUPPL_PROD_SPORD");

            entity.HasOne(d => d.SupplierRatingType)
                .WithMany(p => p.SupplierProducts)
                .HasForeignKey(d => d.SupplierRatingTypeId)
                .HasConstraintName("SUPPL_PROD_SRTPE");

            entity.HasOne(d => d.AgreementI)
                .WithMany(p => p.SupplierProducts)
                .HasForeignKey(d => new { d.AgreementId, d.AgreementItemSeqId })
                .HasConstraintName("SUPPL_PROD_AGRIT");
        });

        modelBuilder.Entity<SupplierProductFeature>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.ProductFeatureId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("SUPPLIER_PRODUCT_FEATURE");


            entity.HasIndex(e => e.PartyId)
                .HasName("SUPPL_FEAT_PARTY");

            entity.HasIndex(e => e.ProductFeatureId)
                .HasName("SUPPL_FEAT_FEAT");

            entity.HasIndex(e => e.UomId)
                .HasName("SUPPL_FEAT_UOM");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductFeatureId)
                .HasColumnName("PRODUCT_FEATURE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.IdCode)
                .HasColumnName("ID_CODE")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.UomId)
                .HasColumnName("UOM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.SupplierProductFeatures)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SUPPL_FEAT_PARTY");

            entity.HasOne(d => d.ProductFeature)
                .WithMany(p => p.SupplierProductFeatures)
                .HasForeignKey(d => d.ProductFeatureId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SUPPL_FEAT_FEAT");

            entity.HasOne(d => d.Uom)
                .WithMany(p => p.SupplierProductFeatures)
                .HasForeignKey(d => d.UomId)
                .HasConstraintName("SUPPL_FEAT_UOM");
        });

        modelBuilder.Entity<SupplierRatingType>(entity =>
        {
            entity.ToTable("SUPPLIER_RATING_TYPE");


            entity.Property(e => e.SupplierRatingTypeId)
                .HasColumnName("SUPPLIER_RATING_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<Survey>(entity =>
        {
            entity.ToTable("SURVEY");


            entity.Property(e => e.SurveyId)
                .HasColumnName("SURVEY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AcroFormContentId)
                .HasColumnName("ACRO_FORM_CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AllowMultiple)
                .HasColumnName("ALLOW_MULTIPLE")
                .HasColumnType("char(1)");

            entity.Property(e => e.AllowUpdate)
                .HasColumnName("ALLOW_UPDATE")
                .HasColumnType("char(1)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.IsAnonymous)
                .HasColumnName("IS_ANONYMOUS")
                .HasColumnType("char(1)");


            entity.Property(e => e.ResponseService)
                .HasColumnName("RESPONSE_SERVICE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.SubmitCaption)
                .HasColumnName("SUBMIT_CAPTION")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.SurveyName)
                .HasColumnName("SURVEY_NAME")
                .HasColumnType("varchar(100)");
        });

        modelBuilder.Entity<SurveyApplType>(entity =>
        {
            entity.ToTable("SURVEY_APPL_TYPE");


            entity.Property(e => e.SurveyApplTypeId)
                .HasColumnName("SURVEY_APPL_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<SurveyMultiResp>(entity =>
        {
            entity.HasKey(e => new { e.SurveyId, e.SurveyMultiRespId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("SURVEY_MULTI_RESP");


            entity.HasIndex(e => e.SurveyId)
                .HasName("SRVYMRSP_SRVY");

            entity.Property(e => e.SurveyId)
                .HasColumnName("SURVEY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SurveyMultiRespId)
                .HasColumnName("SURVEY_MULTI_RESP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.MultiRespTitle)
                .HasColumnName("MULTI_RESP_TITLE")
                .HasColumnType("varchar(100)");

            entity.HasOne(d => d.Survey)
                .WithMany(p => p.SurveyMultiResps)
                .HasForeignKey(d => d.SurveyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SRVYMRSP_SRVY");
        });

        modelBuilder.Entity<SurveyMultiRespColumn>(entity =>
        {
            entity.HasKey(e => new { e.SurveyId, e.SurveyMultiRespId, e.SurveyMultiRespColId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("SURVEY_MULTI_RESP_COLUMN");


            entity.HasIndex(e => new { e.SurveyId, e.SurveyMultiRespId })
                .HasName("SRVYMRSPCL_SMRESP");

            entity.Property(e => e.SurveyId)
                .HasColumnName("SURVEY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SurveyMultiRespId)
                .HasColumnName("SURVEY_MULTI_RESP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SurveyMultiRespColId)
                .HasColumnName("SURVEY_MULTI_RESP_COL_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ColumnTitle)
                .HasColumnName("COLUMN_TITLE")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.Survey)
                .WithMany(p => p.SurveyMultiRespColumns)
                .HasForeignKey(d => new { d.SurveyId, d.SurveyMultiRespId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SRVYMRSPCL_SMRESP");
        });

        modelBuilder.Entity<SurveyPage>(entity =>
        {
            entity.HasKey(e => new { e.SurveyId, e.SurveyPageSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("SURVEY_PAGE");


            entity.HasIndex(e => e.SurveyId)
                .HasName("SRVYPAGE_SRVY");

            entity.Property(e => e.SurveyId)
                .HasColumnName("SURVEY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SurveyPageSeqId)
                .HasColumnName("SURVEY_PAGE_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PageName)
                .HasColumnName("PAGE_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.Survey)
                .WithMany(p => p.SurveyPages)
                .HasForeignKey(d => d.SurveyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SRVYPAGE_SRVY");
        });

        modelBuilder.Entity<SurveyQuestion>(entity =>
        {
            entity.ToTable("SURVEY_QUESTION");


            entity.HasIndex(e => e.GeoId)
                .HasName("SRVYQST_GEO");


            entity.HasIndex(e => e.SurveyQuestionCategoryId)
                .HasName("SRVYQST_SRVYQTCT");

            entity.HasIndex(e => e.SurveyQuestionTypeId)
                .HasName("SRVYQST_SRVYQTP");

            entity.Property(e => e.SurveyQuestionId)
                .HasColumnName("SURVEY_QUESTION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.EnumTypeId)
                .HasColumnName("ENUM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FormatString)
                .HasColumnName("FORMAT_STRING")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.GeoId)
                .HasColumnName("GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Hint)
                .HasColumnName("HINT")
                .HasColumnType("longtext");


            entity.Property(e => e.Question)
                .HasColumnName("QUESTION")
                .HasColumnType("longtext");

            entity.Property(e => e.SurveyQuestionCategoryId)
                .HasColumnName("SURVEY_QUESTION_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SurveyQuestionTypeId)
                .HasColumnName("SURVEY_QUESTION_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Geo)
                .WithMany(p => p.SurveyQuestions)
                .HasForeignKey(d => d.GeoId)
                .HasConstraintName("SRVYQST_GEO");

            entity.HasOne(d => d.SurveyQuestionCategory)
                .WithMany(p => p.SurveyQuestions)
                .HasForeignKey(d => d.SurveyQuestionCategoryId)
                .HasConstraintName("SRVYQST_SRVYQTCT");

            entity.HasOne(d => d.SurveyQuestionType)
                .WithMany(p => p.SurveyQuestions)
                .HasForeignKey(d => d.SurveyQuestionTypeId)
                .HasConstraintName("SRVYQST_SRVYQTP");
        });

        modelBuilder.Entity<SurveyQuestionAppl>(entity =>
        {
            entity.HasKey(e => new { e.SurveyId, e.SurveyQuestionId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("SURVEY_QUESTION_APPL");


            entity.HasIndex(e => e.SurveyId)
                .HasName("SRVYQSTAPL_SRVY");

            entity.HasIndex(e => e.SurveyQuestionId)
                .HasName("SRVYQSTAPL_SRVYQ");

            entity.HasIndex(e => new { e.WithSurveyQuestionId, e.WithSurveyOptionSeqId })
                .HasName("SRVYQSTAPL_SVQO");

            entity.Property(e => e.SurveyId)
                .HasColumnName("SURVEY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SurveyQuestionId)
                .HasColumnName("SURVEY_QUESTION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ExternalFieldRef)
                .HasColumnName("EXTERNAL_FIELD_REF")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.RequiredField)
                .HasColumnName("REQUIRED_FIELD")
                .HasColumnType("char(1)");

            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.SurveyMultiRespColId)
                .HasColumnName("SURVEY_MULTI_RESP_COL_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SurveyMultiRespId)
                .HasColumnName("SURVEY_MULTI_RESP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SurveyPageSeqId)
                .HasColumnName("SURVEY_PAGE_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.WithSurveyOptionSeqId)
                .HasColumnName("WITH_SURVEY_OPTION_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WithSurveyQuestionId)
                .HasColumnName("WITH_SURVEY_QUESTION_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Survey)
                .WithMany(p => p.SurveyQuestionAppls)
                .HasForeignKey(d => d.SurveyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SRVYQSTAPL_SRVY");

            entity.HasOne(d => d.SurveyQuestion)
                .WithMany(p => p.SurveyQuestionAppls)
                .HasForeignKey(d => d.SurveyQuestionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SRVYQSTAPL_SRVYQ");

            entity.HasOne(d => d.WithSurvey)
                .WithMany(p => p.SurveyQuestionAppls)
                .HasForeignKey(d => new { d.WithSurveyQuestionId, d.WithSurveyOptionSeqId })
                .HasConstraintName("SRVYQSTAPL_SVQO");
        });

        modelBuilder.Entity<SurveyQuestionCategory>(entity =>
        {
            entity.ToTable("SURVEY_QUESTION_CATEGORY");


            entity.HasIndex(e => e.ParentCategoryId)
                .HasName("SRVYQSTCT_PAR");

            entity.Property(e => e.SurveyQuestionCategoryId)
                .HasColumnName("SURVEY_QUESTION_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.ParentCategoryId)
                .HasColumnName("PARENT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentCategory)
                .WithMany(p => p.InverseParentCategory)
                .HasForeignKey(d => d.ParentCategoryId)
                .HasConstraintName("SRVYQSTCT_PAR");
        });

        modelBuilder.Entity<SurveyQuestionOption>(entity =>
        {
            entity.HasKey(e => new { e.SurveyQuestionId, e.SurveyOptionSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("SURVEY_QUESTION_OPTION");


            entity.HasIndex(e => e.SurveyQuestionId)
                .HasName("SRVYQSTOP_SRVYQ");

            entity.Property(e => e.SurveyQuestionId)
                .HasColumnName("SURVEY_QUESTION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SurveyOptionSeqId)
                .HasColumnName("SURVEY_OPTION_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AmountBase)
                .HasColumnName("AMOUNT_BASE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.AmountBaseUomId)
                .HasColumnName("AMOUNT_BASE_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.Duration)
                .HasColumnName("DURATION")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.DurationUomId)
                .HasColumnName("DURATION_UOM_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.WeightFactor).HasColumnName("WEIGHT_FACTOR");

            entity.HasOne(d => d.SurveyQuestion)
                .WithMany(p => p.SurveyQuestionOptions)
                .HasForeignKey(d => d.SurveyQuestionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SRVYQSTOP_SRVYQ");
        });

        modelBuilder.Entity<SurveyQuestionType>(entity =>
        {
            entity.ToTable("SURVEY_QUESTION_TYPE");


            entity.Property(e => e.SurveyQuestionTypeId)
                .HasColumnName("SURVEY_QUESTION_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<SurveyResponse>(entity =>
        {
            entity.ToTable("SURVEY_RESPONSE");


            entity.HasIndex(e => e.StatusId)
                .HasName("SRVYRSP_STTS");

            entity.HasIndex(e => e.SurveyId)
                .HasName("SRVYRSP_SRVY");

            entity.Property(e => e.SurveyResponseId)
                .HasColumnName("SURVEY_RESPONSE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GeneralFeedback)
                .HasColumnName("GENERAL_FEEDBACK")
                .HasColumnType("longtext");

            entity.Property(e => e.LastModifiedDate)
                .HasColumnName("LAST_MODIFIED_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReferenceId)
                .HasColumnName("REFERENCE_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.ResponseDate)
                .HasColumnName("RESPONSE_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SurveyId)
                .HasColumnName("SURVEY_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.SurveyResponses)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("SRVYRSP_STTS");

            entity.HasOne(d => d.Survey)
                .WithMany(p => p.SurveyResponses)
                .HasForeignKey(d => d.SurveyId)
                .HasConstraintName("SRVYRSP_SRVY");
        });

        modelBuilder.Entity<SurveyResponseAnswer>(entity =>
        {
            entity.HasKey(e => new { e.SurveyResponseId, e.SurveyQuestionId, e.SurveyMultiRespColId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("SURVEY_RESPONSE_ANSWER");

            entity.HasIndex(e => e.ContentId)
                .HasName("SRVYRSPA_CONT");


            entity.HasIndex(e => e.SurveyQuestionId)
                .HasName("SRVYRSPA_SVQU");

            entity.HasIndex(e => e.SurveyResponseId)
                .HasName("SRVYRSPA_SVRSP");

            entity.HasIndex(e => new { e.SurveyQuestionId, e.SurveyOptionSeqId })
                .HasName("SRVYRSPA_OPT");

            entity.Property(e => e.SurveyResponseId)
                .HasColumnName("SURVEY_RESPONSE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SurveyQuestionId)
                .HasColumnName("SURVEY_QUESTION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SurveyMultiRespColId)
                .HasColumnName("SURVEY_MULTI_RESP_COL_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AmountBase)
                .HasColumnName("AMOUNT_BASE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.AmountBaseUomId)
                .HasColumnName("AMOUNT_BASE_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AnsweredDate)
                .HasColumnName("ANSWERED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.BooleanResponse)
                .HasColumnName("BOOLEAN_RESPONSE")
                .HasColumnType("char(1)");

            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrencyResponse)
                .HasColumnName("CURRENCY_RESPONSE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.Duration)
                .HasColumnName("DURATION")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.DurationUomId)
                .HasColumnName("DURATION_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FloatResponse).HasColumnName("FLOAT_RESPONSE");


            entity.Property(e => e.NumericResponse)
                .HasColumnName("NUMERIC_RESPONSE")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.SurveyMultiRespId)
                .HasColumnName("SURVEY_MULTI_RESP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SurveyOptionSeqId)
                .HasColumnName("SURVEY_OPTION_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TextResponse)
                .HasColumnName("TEXT_RESPONSE")
                .HasColumnType("longtext");

            entity.Property(e => e.WeightFactor).HasColumnName("WEIGHT_FACTOR");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.SurveyResponseAnswers)
                .HasForeignKey(d => d.ContentId)
                .HasConstraintName("SRVYRSPA_CONT");

            entity.HasOne(d => d.SurveyQuestion)
                .WithMany(p => p.SurveyResponseAnswers)
                .HasForeignKey(d => d.SurveyQuestionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SRVYRSPA_SVQU");

            entity.HasOne(d => d.SurveyResponse)
                .WithMany(p => p.SurveyResponseAnswers)
                .HasForeignKey(d => d.SurveyResponseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SRVYRSPA_SVRSP");

            entity.HasOne(d => d.Survey)
                .WithMany(p => p.SurveyResponseAnswers)
                .HasForeignKey(d => new { d.SurveyQuestionId, d.SurveyOptionSeqId })
                .HasConstraintName("SRVYRSPA_OPT");
        });

        modelBuilder.Entity<SurveyTrigger>(entity =>
        {
            entity.HasKey(e => new { e.SurveyId, e.SurveyApplTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("SURVEY_TRIGGER");


            entity.HasIndex(e => e.SurveyApplTypeId)
                .HasName("SRVYTRG_SRVYAPT");

            entity.HasIndex(e => e.SurveyId)
                .HasName("SRVYTRG_SRVY");

            entity.Property(e => e.SurveyId)
                .HasColumnName("SURVEY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SurveyApplTypeId)
                .HasColumnName("SURVEY_APPL_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.SurveyApplType)
                .WithMany(p => p.SurveyTriggers)
                .HasForeignKey(d => d.SurveyApplTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SRVYTRG_SRVYAPT");

            entity.HasOne(d => d.Survey)
                .WithMany(p => p.SurveyTriggers)
                .HasForeignKey(d => d.SurveyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SRVYTRG_SRVY");
        });

        modelBuilder.Entity<SystemProperty>(entity =>
        {
            entity.HasKey(e => new { e.SystemResourceId, e.SystemPropertyId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("SYSTEM_PROPERTY");


            entity.Property(e => e.SystemResourceId)
                .HasColumnName("SYSTEM_RESOURCE_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.SystemPropertyId)
                .HasColumnName("SYSTEM_PROPERTY_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.SystemPropertyValue)
                .HasColumnName("SYSTEM_PROPERTY_VALUE")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<TarpittedLoginView>(entity =>
        {
            entity.HasKey(e => new { e.ViewNameId, e.UserLoginId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("TARPITTED_LOGIN_VIEW");


            entity.Property(e => e.ViewNameId)
                .HasColumnName("VIEW_NAME_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.UserLoginId)
                .HasColumnName("USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.TarpitReleaseDateTime)
                .HasColumnName("TARPIT_RELEASE_DATE_TIME")
                .HasColumnType("decimal(20,0)");
        });

        modelBuilder.Entity<TaxAuthority>(entity =>
        {
            entity.HasKey(e => new { e.TaxAuthGeoId, e.TaxAuthPartyId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("TAX_AUTHORITY");


            entity.HasIndex(e => e.TaxAuthGeoId)
                .HasName("TAXAUTH_TAGEO");

            entity.HasIndex(e => e.TaxAuthPartyId)
                .HasName("TAXAUTH_TAPARTY");

            entity.Property(e => e.TaxAuthGeoId)
                .HasColumnName("TAX_AUTH_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TaxAuthPartyId)
                .HasColumnName("TAX_AUTH_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.IncludeTaxInPrice)
                .HasColumnName("INCLUDE_TAX_IN_PRICE")
                .HasColumnType("char(1)");


            entity.Property(e => e.RequireTaxIdForExemption)
                .HasColumnName("REQUIRE_TAX_ID_FOR_EXEMPTION")
                .HasColumnType("char(1)");

            entity.Property(e => e.TaxIdFormatPattern)
                .HasColumnName("TAX_ID_FORMAT_PATTERN")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.TaxAuthGeo)
                .WithMany(p => p.TaxAuthorities)
                .HasForeignKey(d => d.TaxAuthGeoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TAXAUTH_TAGEO");

            entity.HasOne(d => d.TaxAuthParty)
                .WithMany(p => p.TaxAuthorities)
                .HasForeignKey(d => d.TaxAuthPartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TAXAUTH_TAPARTY");
        });

        modelBuilder.Entity<TaxAuthorityAssoc>(entity =>
        {
            entity.HasKey(e => new
                    { e.TaxAuthGeoId, e.TaxAuthPartyId, e.ToTaxAuthGeoId, e.ToTaxAuthPartyId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0 });

            entity.ToTable("TAX_AUTHORITY_ASSOC");


            entity.HasIndex(e => e.TaxAuthorityAssocTypeId)
                .HasName("TAXAUTHASC_ASTP");

            entity.HasIndex(e => new { e.TaxAuthGeoId, e.TaxAuthPartyId })
                .HasName("TAXAUTHASC_TXA");

            entity.HasIndex(e => new { e.ToTaxAuthGeoId, e.ToTaxAuthPartyId })
                .HasName("TAXAUTHASC_TOTXA");

            entity.Property(e => e.TaxAuthGeoId)
                .HasColumnName("TAX_AUTH_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TaxAuthPartyId)
                .HasColumnName("TAX_AUTH_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ToTaxAuthGeoId)
                .HasColumnName("TO_TAX_AUTH_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ToTaxAuthPartyId)
                .HasColumnName("TO_TAX_AUTH_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.TaxAuthorityAssocTypeId)
                .HasColumnName("TAX_AUTHORITY_ASSOC_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.TaxAuthorityAssocType)
                .WithMany(p => p.TaxAuthorityAssocs)
                .HasForeignKey(d => d.TaxAuthorityAssocTypeId)
                .HasConstraintName("TAXAUTHASC_ASTP");

            entity.HasOne(d => d.TaxAuth)
                .WithMany(p => p.TaxAuthorityAssocTaxAuths)
                .HasForeignKey(d => new { d.TaxAuthGeoId, d.TaxAuthPartyId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TAXAUTHASC_TXA");

            entity.HasOne(d => d.ToTaxAuth)
                .WithMany(p => p.TaxAuthorityAssocToTaxAuths)
                .HasForeignKey(d => new { d.ToTaxAuthGeoId, d.ToTaxAuthPartyId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TAXAUTHASC_TOTXA");
        });

        modelBuilder.Entity<TaxAuthorityAssocType>(entity =>
        {
            entity.ToTable("TAX_AUTHORITY_ASSOC_TYPE");


            entity.Property(e => e.TaxAuthorityAssocTypeId)
                .HasColumnName("TAX_AUTHORITY_ASSOC_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<TaxAuthorityCategory>(entity =>
        {
            entity.HasKey(e => new { e.TaxAuthGeoId, e.TaxAuthPartyId, e.ProductCategoryId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("TAX_AUTHORITY_CATEGORY");


            entity.HasIndex(e => e.ProductCategoryId)
                .HasName("TAXAUTHCAT_CAT");

            entity.HasIndex(e => new { e.TaxAuthGeoId, e.TaxAuthPartyId })
                .HasName("TAXAUTHCAT_TXA");

            entity.Property(e => e.TaxAuthGeoId)
                .HasColumnName("TAX_AUTH_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TaxAuthPartyId)
                .HasColumnName("TAX_AUTH_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductCategoryId)
                .HasColumnName("PRODUCT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ProductCategory)
                .WithMany(p => p.TaxAuthorityCategories)
                .HasForeignKey(d => d.ProductCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TAXAUTHCAT_CAT");

            entity.HasOne(d => d.TaxAuth)
                .WithMany(p => p.TaxAuthorityCategories)
                .HasForeignKey(d => new { d.TaxAuthGeoId, d.TaxAuthPartyId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TAXAUTHCAT_TXA");
        });

        modelBuilder.Entity<TaxAuthorityGlAccount>(entity =>
        {
            entity.HasKey(e => new { e.TaxAuthGeoId, e.TaxAuthPartyId, e.OrganizationPartyId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("TAX_AUTHORITY_GL_ACCOUNT");


            entity.HasIndex(e => e.GlAccountId)
                .HasName("TAXAUTHGLA_GLA");


            entity.HasIndex(e => e.OrganizationPartyId)
                .HasName("TAXAUTHGLA_OPTY");

            entity.HasIndex(e => new { e.TaxAuthGeoId, e.TaxAuthPartyId })
                .HasName("TAXAUTHGLA_TXA");

            entity.Property(e => e.TaxAuthGeoId)
                .HasColumnName("TAX_AUTH_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TaxAuthPartyId)
                .HasColumnName("TAX_AUTH_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrganizationPartyId)
                .HasColumnName("ORGANIZATION_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GlAccountId)
                .HasColumnName("GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");


            entity.HasOne(d => d.GlAccount)
                .WithMany(p => p.TaxAuthorityGlAccounts)
                .HasForeignKey(d => d.GlAccountId)
                .HasConstraintName("TAXAUTHGLA_GLA");

            entity.HasOne(d => d.OrganizationParty)
                .WithMany(p => p.TaxAuthorityGlAccounts)
                .HasForeignKey(d => d.OrganizationPartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TAXAUTHGLA_OPTY");

            entity.HasOne(d => d.TaxAuth)
                .WithMany(p => p.TaxAuthorityGlAccounts)
                .HasForeignKey(d => new { d.TaxAuthGeoId, d.TaxAuthPartyId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TAXAUTHGLA_TXA");
        });

        modelBuilder.Entity<TaxAuthorityRateProduct>(entity =>
        {
            entity.HasKey(e => e.TaxAuthorityRateSeqId)
                .HasName("PRIMARY");

            entity.ToTable("TAX_AUTHORITY_RATE_PRODUCT");


            entity.HasIndex(e => e.ProductCategoryId)
                .HasName("TAXAUTHRTEP_PCAT");

            entity.HasIndex(e => e.ProductStoreId)
                .HasName("TAXAUTHRTEP_PSTR");

            entity.HasIndex(e => e.TaxAuthorityRateTypeId)
                .HasName("TAXAUTHRTEP_RTTP");

            entity.HasIndex(e => new { e.TaxAuthGeoId, e.TaxAuthPartyId })
                .HasName("TAXAUTHRTEP_TXA");

            entity.Property(e => e.TaxAuthorityRateSeqId)
                .HasColumnName("TAX_AUTHORITY_RATE_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.IsTaxInShippingPrice)
                .HasColumnName("IS_TAX_IN_SHIPPING_PRICE")
                .HasColumnType("char(1)");


            entity.Property(e => e.MinItemPrice)
                .HasColumnName("MIN_ITEM_PRICE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.MinPurchase)
                .HasColumnName("MIN_PURCHASE")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.ProductCategoryId)
                .HasColumnName("PRODUCT_CATEGORY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TaxAuthGeoId)
                .HasColumnName("TAX_AUTH_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TaxAuthPartyId)
                .HasColumnName("TAX_AUTH_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TaxAuthorityRateTypeId)
                .HasColumnName("TAX_AUTHORITY_RATE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TaxPercentage)
                .HasColumnName("TAX_PERCENTAGE")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.TaxPromotions)
                .HasColumnName("TAX_PROMOTIONS")
                .HasColumnType("char(1)");

            entity.Property(e => e.TaxShipping)
                .HasColumnName("TAX_SHIPPING")
                .HasColumnType("char(1)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.TitleTransferEnumId)
                .HasColumnName("TITLE_TRANSFER_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ProductCategory)
                .WithMany(p => p.TaxAuthorityRateProducts)
                .HasForeignKey(d => d.ProductCategoryId)
                .HasConstraintName("TAXAUTHRTEP_PCAT");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.TaxAuthorityRateProducts)
                .HasForeignKey(d => d.ProductStoreId)
                .HasConstraintName("TAXAUTHRTEP_PSTR");

            entity.HasOne(d => d.TaxAuthorityRateType)
                .WithMany(p => p.TaxAuthorityRateProducts)
                .HasForeignKey(d => d.TaxAuthorityRateTypeId)
                .HasConstraintName("TAXAUTHRTEP_RTTP");

            entity.HasOne(d => d.TaxAuth)
                .WithMany(p => p.TaxAuthorityRateProducts)
                .HasForeignKey(d => new { d.TaxAuthGeoId, d.TaxAuthPartyId })
                .HasConstraintName("TAXAUTHRTEP_TXA");
        });

        modelBuilder.Entity<TaxAuthorityRateType>(entity =>
        {
            entity.ToTable("TAX_AUTHORITY_RATE_TYPE");


            entity.Property(e => e.TaxAuthorityRateTypeId)
                .HasColumnName("TAX_AUTHORITY_RATE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<TechDataCalendar>(entity =>
        {
            entity.HasKey(e => e.CalendarId)
                .HasName("PRIMARY");

            entity.ToTable("TECH_DATA_CALENDAR");

            entity.HasIndex(e => e.CalendarWeekId)
                .HasName("CALENDAR_WEEK");


            entity.Property(e => e.CalendarId)
                .HasColumnName("CALENDAR_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CalendarWeekId)
                .HasColumnName("CALENDAR_WEEK_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.CalendarWeek)
                .WithMany(p => p.TechDataCalendars)
                .HasForeignKey(d => d.CalendarWeekId)
                .HasConstraintName("CALENDAR_WEEK");
        });

        modelBuilder.Entity<TechDataCalendarExcDay>(entity =>
        {
            entity.HasKey(e => new { e.CalendarId, e.ExceptionDateStartTime })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("TECH_DATA_CALENDAR_EXC_DAY");

            entity.HasIndex(e => e.CalendarId)
                .HasName("EXC_DAY_CALENDAR");


            entity.Property(e => e.CalendarId)
                .HasColumnName("CALENDAR_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ExceptionDateStartTime)
                .HasColumnName("EXCEPTION_DATE_START_TIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ExceptionCapacity)
                .HasColumnName("EXCEPTION_CAPACITY")
                .HasColumnType("decimal(18,6)");


            entity.Property(e => e.UsedCapacity)
                .HasColumnName("USED_CAPACITY")
                .HasColumnType("decimal(18,6)");

            entity.HasOne(d => d.Calendar)
                .WithMany(p => p.TechDataCalendarExcDays)
                .HasForeignKey(d => d.CalendarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EXC_DAY_CALENDAR");
        });

        modelBuilder.Entity<TechDataCalendarExcWeek>(entity =>
        {
            entity.HasKey(e => new { e.CalendarId, e.ExceptionDateStart })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("TECH_DATA_CALENDAR_EXC_WEEK");

            entity.HasIndex(e => e.CalendarId)
                .HasName("EXC_WEEK_CALENDAR");

            entity.HasIndex(e => e.CalendarWeekId)
                .HasName("EXC_WEEK_WEEK");


            entity.Property(e => e.CalendarId)
                .HasColumnName("CALENDAR_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ExceptionDateStart)
                .HasColumnName("EXCEPTION_DATE_START")
                .HasColumnType("date");

            entity.Property(e => e.CalendarWeekId)
                .HasColumnName("CALENDAR_WEEK_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.Calendar)
                .WithMany(p => p.TechDataCalendarExcWeeks)
                .HasForeignKey(d => d.CalendarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EXC_WEEK_CALENDAR");

            entity.HasOne(d => d.CalendarWeek)
                .WithMany(p => p.TechDataCalendarExcWeeks)
                .HasForeignKey(d => d.CalendarWeekId)
                .HasConstraintName("EXC_WEEK_WEEK");
        });

        modelBuilder.Entity<TechDataCalendarWeek>(entity =>
        {
            entity.HasKey(e => e.CalendarWeekId)
                .HasName("PRIMARY");

            entity.ToTable("TECH_DATA_CALENDAR_WEEK");


            entity.Property(e => e.CalendarWeekId)
                .HasColumnName("CALENDAR_WEEK_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.FridayCapacity).HasColumnName("FRIDAY_CAPACITY");

            entity.Property(e => e.FridayStartTime)
                .HasColumnName("FRIDAY_START_TIME")
                .HasColumnType("time(3)");


            entity.Property(e => e.MondayCapacity).HasColumnName("MONDAY_CAPACITY");

            entity.Property(e => e.MondayStartTime)
                .HasColumnName("MONDAY_START_TIME")
                .HasColumnType("time(3)");

            entity.Property(e => e.SaturdayCapacity).HasColumnName("SATURDAY_CAPACITY");

            entity.Property(e => e.SaturdayStartTime)
                .HasColumnName("SATURDAY_START_TIME")
                .HasColumnType("time(3)");

            entity.Property(e => e.SundayCapacity).HasColumnName("SUNDAY_CAPACITY");

            entity.Property(e => e.SundayStartTime)
                .HasColumnName("SUNDAY_START_TIME")
                .HasColumnType("time(3)");

            entity.Property(e => e.ThursdayCapacity).HasColumnName("THURSDAY_CAPACITY");

            entity.Property(e => e.ThursdayStartTime)
                .HasColumnName("THURSDAY_START_TIME")
                .HasColumnType("time(3)");

            entity.Property(e => e.TuesdayCapacity).HasColumnName("TUESDAY_CAPACITY");

            entity.Property(e => e.TuesdayStartTime)
                .HasColumnName("TUESDAY_START_TIME")
                .HasColumnType("time(3)");

            entity.Property(e => e.WednesdayCapacity).HasColumnName("WEDNESDAY_CAPACITY");

            entity.Property(e => e.WednesdayStartTime)
                .HasColumnName("WEDNESDAY_START_TIME")
                .HasColumnType("time(3)");
        });

        modelBuilder.Entity<TelecomGatewayConfig>(entity =>
        {
            entity.ToTable("TELECOM_GATEWAY_CONFIG");


            entity.Property(e => e.TelecomGatewayConfigId)
                .HasColumnName("TELECOM_GATEWAY_CONFIG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<TelecomMethodType>(entity =>
        {
            entity.ToTable("TELECOM_METHOD_TYPE");


            entity.Property(e => e.TelecomMethodTypeId)
                .HasColumnName("TELECOM_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<TelecomNumber>(entity =>
        {
            entity.HasKey(e => e.ContactMechId)
                .HasName("PRIMARY");

            entity.ToTable("TELECOM_NUMBER");

            entity.HasIndex(e => e.AreaCode)
                .HasName("AREA_CODE_IDX");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("TEL_NUM_CMECH");

            entity.HasIndex(e => e.ContactNumber)
                .HasName("CONTACT_NUMBER_IDX");

            entity.HasIndex(e => e.CountryCode)
                .HasName("COUNTRY_CODE_IDX");


            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AreaCode)
                .HasColumnName("AREA_CODE")
                .HasColumnType("varchar(10)");

            entity.Property(e => e.AskForName)
                .HasColumnName("ASK_FOR_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.ContactNumber)
                .HasColumnName("CONTACT_NUMBER")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CountryCode)
                .HasColumnName("COUNTRY_CODE")
                .HasColumnType("varchar(10)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ContactMech)
                .WithOne(p => p.TelecomNumber)
                .HasForeignKey<TelecomNumber>(d => d.ContactMechId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TEL_NUM_CMECH");
        });

        modelBuilder.Entity<TemporalExpression>(entity =>
        {
            entity.HasKey(e => e.TempExprId)
                .HasName("PRIMARY");

            entity.ToTable("TEMPORAL_EXPRESSION");


            entity.Property(e => e.TempExprId)
                .HasColumnName("TEMP_EXPR_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Date1)
                .HasColumnName("DATE1")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Date2)
                .HasColumnName("DATE2")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.Integer1)
                .HasColumnName("INTEGER1")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.Integer2)
                .HasColumnName("INTEGER2")
                .HasColumnType("decimal(20,0)");


            entity.Property(e => e.String1)
                .HasColumnName("STRING1")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.String2)
                .HasColumnName("STRING2")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TempExprTypeId)
                .HasColumnName("TEMP_EXPR_TYPE_ID")
                .HasColumnType("varchar(36)");
        });

        modelBuilder.Entity<TemporalExpressionAssoc>(entity =>
        {
            entity.HasKey(e => new { e.FromTempExprId, e.ToTempExprId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("TEMPORAL_EXPRESSION_ASSOC");


            entity.HasIndex(e => e.FromTempExprId)
                .HasName("TEMP_EXPR_FROM");


            entity.HasIndex(e => e.ToTempExprId)
                .HasName("TEMP_EXPR_TO");

            entity.Property(e => e.FromTempExprId)
                .HasColumnName("FROM_TEMP_EXPR_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ToTempExprId)
                .HasColumnName("TO_TEMP_EXPR_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ExprAssocType)
                .HasColumnName("EXPR_ASSOC_TYPE")
                .HasColumnType("varchar(36)");


            entity.HasOne(d => d.FromTempExpr)
                .WithMany(p => p.TemporalExpressionAssocFromTempExprs)
                .HasForeignKey(d => d.FromTempExprId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TEMP_EXPR_FROM");

            entity.HasOne(d => d.ToTempExpr)
                .WithMany(p => p.TemporalExpressionAssocToTempExprs)
                .HasForeignKey(d => d.ToTempExprId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TEMP_EXPR_TO");
        });

        modelBuilder.Entity<TermType>(entity =>
        {
            entity.ToTable("TERM_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("TERM_TYPE_PAR");

            entity.Property(e => e.TermTypeId)
                .HasColumnName("TERM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("TERM_TYPE_PAR");
        });

        modelBuilder.Entity<TermTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.TermTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("TERM_TYPE_ATTR");


            entity.HasIndex(e => e.TermTypeId)
                .HasName("TERM_TYPATR_TTYP");

            entity.Property(e => e.TermTypeId)
                .HasColumnName("TERM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.TermType)
                .WithMany(p => p.TermTypeAttrs)
                .HasForeignKey(d => d.TermTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TERM_TYPATR_TTYP");
        });

        modelBuilder.Entity<TerminationReason>(entity =>
        {
            entity.ToTable("TERMINATION_REASON");


            entity.Property(e => e.TerminationReasonId)
                .HasColumnName("TERMINATION_REASON_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<TerminationType>(entity =>
        {
            entity.ToTable("TERMINATION_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("TERM_TYP_PAR");

            entity.Property(e => e.TerminationTypeId)
                .HasColumnName("TERMINATION_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("TERM_TYP_PAR");
        });


        modelBuilder.Entity<ThirdPartyLogin>(entity =>
        {
            entity.HasKey(e => new { e.ProductStoreId, e.LoginMethTypeId, e.LoginProviderId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("THIRD_PARTY_LOGIN");


            entity.HasIndex(e => e.ProductStoreId)
                .HasName("PROD_STORE_LOGINS");

            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.LoginMethTypeId)
                .HasColumnName("LOGIN_METH_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.LoginProviderId)
                .HasColumnName("LOGIN_PROVIDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.ThirdPartyLogins)
                .HasForeignKey(d => d.ProductStoreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PROD_STORE_LOGINS");
        });

        modelBuilder.Entity<TimeEntry>(entity =>
        {
            entity.ToTable("TIME_ENTRY");


            entity.HasIndex(e => e.PartyId)
                .HasName("TIME_ENT_PRTY");

            entity.HasIndex(e => e.RateTypeId)
                .HasName("TIME_ENT_RTTP");

            entity.HasIndex(e => e.TimesheetId)
                .HasName("TIME_ENT_TSHT");

            entity.HasIndex(e => e.WorkEffortId)
                .HasName("TIME_ENT_WEFF");

            entity.HasIndex(e => new { e.InvoiceId, e.InvoiceItemSeqId })
                .HasName("TIME_ENT_INVIT");

            entity.Property(e => e.TimeEntryId)
                .HasColumnName("TIME_ENTRY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Hours).HasColumnName("HOURS");

            entity.Property(e => e.InvoiceId)
                .HasColumnName("INVOICE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceItemSeqId)
                .HasColumnName("INVOICE_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");


            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PlanHours).HasColumnName("PLAN_HOURS");

            entity.Property(e => e.RateTypeId)
                .HasColumnName("RATE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.TimesheetId)
                .HasColumnName("TIMESHEET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.TimeEntries)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("TIME_ENT_PRTY");

            entity.HasOne(d => d.RateType)
                .WithMany(p => p.TimeEntries)
                .HasForeignKey(d => d.RateTypeId)
                .HasConstraintName("TIME_ENT_RTTP");

            entity.HasOne(d => d.Timesheet)
                .WithMany(p => p.TimeEntries)
                .HasForeignKey(d => d.TimesheetId)
                .HasConstraintName("TIME_ENT_TSHT");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.TimeEntries)
                .HasForeignKey(d => d.WorkEffortId)
                .HasConstraintName("TIME_ENT_WEFF");

            entity.HasOne(d => d.InvoiceI)
                .WithMany(p => p.TimeEntries)
                .HasForeignKey(d => new { d.InvoiceId, d.InvoiceItemSeqId })
                .HasConstraintName("TIME_ENT_INVIT");
        });

        modelBuilder.Entity<Timesheet>(entity =>
        {
            entity.ToTable("TIMESHEET");

            entity.HasIndex(e => e.ApprovedByUserLoginId)
                .HasName("TIMESHEET_AB_UL");

            entity.HasIndex(e => e.ClientPartyId)
                .HasName("TIMESHEET_CPTY");


            entity.HasIndex(e => e.PartyId)
                .HasName("TIMESHEET_PRTY");

            entity.HasIndex(e => e.StatusId)
                .HasName("TIMESHEET_STS");

            entity.Property(e => e.TimesheetId)
                .HasColumnName("TIMESHEET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ApprovedByUserLoginId)
                .HasColumnName("APPROVED_BY_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.ClientPartyId)
                .HasColumnName("CLIENT_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ApprovedByUserLogin)
                .WithMany(p => p.Timesheets)
                .HasForeignKey(d => d.ApprovedByUserLoginId)
                .HasConstraintName("TIMESHEET_AB_UL");

            entity.HasOne(d => d.ClientParty)
                .WithMany(p => p.TimesheetClientParties)
                .HasForeignKey(d => d.ClientPartyId)
                .HasConstraintName("TIMESHEET_CPTY");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.TimesheetParties)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("TIMESHEET_PRTY");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.Timesheets)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("TIMESHEET_STS");
        });

        modelBuilder.Entity<TimesheetRole>(entity =>
        {
            entity.HasKey(e => new { e.TimesheetId, e.PartyId, e.RoleTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("TIMESHEET_ROLE");


            entity.HasIndex(e => e.PartyId)
                .HasName("TIMESHTRL_PRTY");

            entity.HasIndex(e => e.TimesheetId)
                .HasName("TIMESHTRL_TSHT");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("TIMESHTRL_PTRL");

            entity.Property(e => e.TimesheetId)
                .HasColumnName("TIMESHEET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Party)
                .WithMany(p => p.TimesheetRoles)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TIMESHTRL_PRTY");

            entity.HasOne(d => d.Timesheet)
                .WithMany(p => p.TimesheetRoles)
                .HasForeignKey(d => d.TimesheetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TIMESHTRL_TSHT");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.TimesheetRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TIMESHTRL_PTRL");
        });

        modelBuilder.Entity<TrackingCode>(entity =>
        {
            entity.ToTable("TRACKING_CODE");


            entity.HasIndex(e => e.MarketingCampaignId)
                .HasName("TKNG_COD_MKCMPN");

            entity.HasIndex(e => e.TrackingCodeTypeId)
                .HasName("TKNG_COD_TYP");

            entity.Property(e => e.TrackingCodeId)
                .HasColumnName("TRACKING_CODE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BillableLifetime)
                .HasColumnName("BILLABLE_LIFETIME")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedDate)
                .HasColumnName("CREATED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.GroupId)
                .HasColumnName("GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.LastModifiedDate)
                .HasColumnName("LAST_MODIFIED_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.MarketingCampaignId)
                .HasColumnName("MARKETING_CAMPAIGN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OverrideCss)
                .HasColumnName("OVERRIDE_CSS")
                .HasColumnType("varchar(2000)");

            entity.Property(e => e.OverrideLogo)
                .HasColumnName("OVERRIDE_LOGO")
                .HasColumnType("varchar(2000)");

            entity.Property(e => e.ProdCatalogId)
                .HasColumnName("PROD_CATALOG_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RedirectUrl)
                .HasColumnName("REDIRECT_URL")
                .HasColumnType("varchar(2000)");

            entity.Property(e => e.SubgroupId)
                .HasColumnName("SUBGROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.TrackableLifetime)
                .HasColumnName("TRACKABLE_LIFETIME")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.TrackingCodeTypeId)
                .HasColumnName("TRACKING_CODE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.MarketingCampaign)
                .WithMany(p => p.TrackingCodes)
                .HasForeignKey(d => d.MarketingCampaignId)
                .HasConstraintName("TKNG_COD_MKCMPN");

            entity.HasOne(d => d.TrackingCodeType)
                .WithMany(p => p.TrackingCodes)
                .HasForeignKey(d => d.TrackingCodeTypeId)
                .HasConstraintName("TKNG_COD_TYP");
        });

        modelBuilder.Entity<TrackingCodeOrder>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.TrackingCodeTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("TRACKING_CODE_ORDER");


            entity.HasIndex(e => e.OrderId)
                .HasName("TKNG_CODODR_ODR");

            entity.HasIndex(e => e.TrackingCodeId)
                .HasName("TKNG_CODODR_TKCD");

            entity.HasIndex(e => e.TrackingCodeTypeId)
                .HasName("TKNG_CODODR_TYP");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TrackingCodeTypeId)
                .HasColumnName("TRACKING_CODE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AffiliateReferredTimeStamp)
                .HasColumnName("AFFILIATE_REFERRED_TIME_STAMP")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.HasExported)
                .HasColumnName("HAS_EXPORTED")
                .HasColumnType("char(1)");

            entity.Property(e => e.IsBillable)
                .HasColumnName("IS_BILLABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.SiteId)
                .HasColumnName("SITE_ID")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.TrackingCodeId)
                .HasColumnName("TRACKING_CODE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.TrackingCodeOrders)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TKNG_CODODR_ODR");

            entity.HasOne(d => d.TrackingCode)
                .WithMany(p => p.TrackingCodeOrders)
                .HasForeignKey(d => d.TrackingCodeId)
                .HasConstraintName("TKNG_CODODR_TKCD");

            entity.HasOne(d => d.TrackingCodeType)
                .WithMany(p => p.TrackingCodeOrders)
                .HasForeignKey(d => d.TrackingCodeTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TKNG_CODODR_TYP");
        });

        modelBuilder.Entity<TrackingCodeOrderReturn>(entity =>
        {
            entity.HasKey(e => new { e.ReturnId, e.OrderId, e.TrackingCodeTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("TRACKING_CODE_ORDER_RETURN");


            entity.HasIndex(e => e.OrderId)
                .HasName("TKNG_CODODR_ODRTN");

            entity.HasIndex(e => e.ReturnId)
                .HasName("TKNG_CODODR_RTN");

            entity.HasIndex(e => e.TrackingCodeId)
                .HasName("TKNG_CODODR_RTNTCD");

            entity.HasIndex(e => e.TrackingCodeTypeId)
                .HasName("TKNG_CODODR_RTNTYP");

            entity.Property(e => e.ReturnId)
                .HasColumnName("RETURN_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TrackingCodeTypeId)
                .HasColumnName("TRACKING_CODE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AffiliateReferredTimeStamp)
                .HasColumnName("AFFILIATE_REFERRED_TIME_STAMP")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.HasExported)
                .HasColumnName("HAS_EXPORTED")
                .HasColumnType("char(1)");

            entity.Property(e => e.IsBillable)
                .HasColumnName("IS_BILLABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SiteId)
                .HasColumnName("SITE_ID")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.TrackingCodeId)
                .HasColumnName("TRACKING_CODE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.TrackingCodeOrderReturns)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TKNG_CODODR_ODRTN");

            entity.HasOne(d => d.Return)
                .WithMany(p => p.TrackingCodeOrderReturns)
                .HasForeignKey(d => d.ReturnId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TKNG_CODODR_RTN");

            entity.HasOne(d => d.TrackingCode)
                .WithMany(p => p.TrackingCodeOrderReturns)
                .HasForeignKey(d => d.TrackingCodeId)
                .HasConstraintName("TKNG_CODODR_RTNTCD");

            entity.HasOne(d => d.TrackingCodeType)
                .WithMany(p => p.TrackingCodeOrderReturns)
                .HasForeignKey(d => d.TrackingCodeTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TKNG_CODODR_RTNTYP");
        });

        modelBuilder.Entity<TrackingCodeType>(entity =>
        {
            entity.ToTable("TRACKING_CODE_TYPE");


            entity.Property(e => e.TrackingCodeTypeId)
                .HasColumnName("TRACKING_CODE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<TrackingCodeVisit>(entity =>
        {
            entity.HasKey(e => new { e.TrackingCodeId, e.VisitId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("TRACKING_CODE_VISIT");


            entity.HasIndex(e => e.SourceEnumId)
                .HasName("TKNG_CODVST_SRCEM");

            entity.HasIndex(e => e.TrackingCodeId)
                .HasName("TKNG_CODVST_TKCD");

            entity.Property(e => e.TrackingCodeId)
                .HasColumnName("TRACKING_CODE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.VisitId)
                .HasColumnName("VISIT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SourceEnumId)
                .HasColumnName("SOURCE_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.SourceEnum)
                .WithMany(p => p.TrackingCodeVisits)
                .HasForeignKey(d => d.SourceEnumId)
                .HasConstraintName("TKNG_CODVST_SRCEM");

            entity.HasOne(d => d.TrackingCode)
                .WithMany(p => p.TrackingCodeVisits)
                .HasForeignKey(d => d.TrackingCodeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TKNG_CODVST_TKCD");
        });

        modelBuilder.Entity<TrainingClassType>(entity =>
        {
            entity.ToTable("TRAINING_CLASS_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("TRAIN_TYPE_PAR");

            entity.Property(e => e.TrainingClassTypeId)
                .HasColumnName("TRAINING_CLASS_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("TRAIN_TYPE_PAR");
        });

        modelBuilder.Entity<TrainingRequest>(entity =>
        {
            entity.ToTable("TRAINING_REQUEST");


            entity.Property(e => e.TrainingRequestId)
                .HasColumnName("TRAINING_REQUEST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");
        });

        modelBuilder.Entity<UnemploymentClaim>(entity =>
        {
            entity.ToTable("UNEMPLOYMENT_CLAIM");


            entity.Property(e => e.UnemploymentClaimId)
                .HasColumnName("UNEMPLOYMENT_CLAIM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PartyIdFrom)
                .HasColumnName("PARTY_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyIdTo)
                .HasColumnName("PARTY_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeIdFrom)
                .HasColumnName("ROLE_TYPE_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeIdTo)
                .HasColumnName("ROLE_TYPE_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.UnemploymentClaimDate)
                .HasColumnName("UNEMPLOYMENT_CLAIM_DATE")
                .HasColumnType("datetime(6)");
        });

        modelBuilder.Entity<Uom>(entity =>
        {
            entity.ToTable("UOM");


            entity.HasIndex(e => e.UomTypeId)
                .HasName("UOM_TO_TYPE");

            entity.Property(e => e.UomId)
                .HasColumnName("UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Abbreviation)
                .HasColumnName("ABBREVIATION")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.NumericCode)
                .HasColumnName("NUMERIC_CODE")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.UomTypeId)
                .HasColumnName("UOM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.UomType)
                .WithMany(p => p.Uoms)
                .HasForeignKey(d => d.UomTypeId)
                .HasConstraintName("UOM_TO_TYPE");
        });

        modelBuilder.Entity<UomConversion>(entity =>
        {
            entity.HasKey(e => new { e.UomId, e.UomIdTo })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("UOM_CONVERSION");


            entity.HasIndex(e => e.CustomMethodId)
                .HasName("UOM_CUSTOM_METHOD");


            entity.HasIndex(e => e.UomId)
                .HasName("UOM_CONV_MAIN");

            entity.HasIndex(e => e.UomIdTo)
                .HasName("UOM_CONV_TO");

            entity.Property(e => e.UomId)
                .HasColumnName("UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.UomIdTo)
                .HasColumnName("UOM_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ConversionFactor).HasColumnName("CONVERSION_FACTOR");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CustomMethodId)
                .HasColumnName("CUSTOM_METHOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DecimalScale)
                .HasColumnName("DECIMAL_SCALE")
                .HasColumnType("decimal(20,0)");


            entity.Property(e => e.RoundingMode)
                .HasColumnName("ROUNDING_MODE")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.CustomMethod)
                .WithMany(p => p.UomConversions)
                .HasForeignKey(d => d.CustomMethodId)
                .HasConstraintName("UOM_CUSTOM_METHOD");

            entity.HasOne(d => d.Uom)
                .WithMany(p => p.UomConversionUoms)
                .HasForeignKey(d => d.UomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("UOM_CONV_MAIN");

            entity.HasOne(d => d.UomIdToNavigation)
                .WithMany(p => p.UomConversionUomIdToNavigations)
                .HasForeignKey(d => d.UomIdTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("UOM_CONV_TO");
        });

        modelBuilder.Entity<UomConversionDated>(entity =>
        {
            entity.HasKey(e => new { e.UomId, e.UomIdTo, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("UOM_CONVERSION_DATED");


            entity.HasIndex(e => e.CustomMethodId)
                .HasName("UOMD_CUSTOM_METHOD");


            entity.HasIndex(e => e.PurposeEnumId)
                .HasName("UOMD_PURPOSE_ENUM");

            entity.HasIndex(e => e.UomId)
                .HasName("DATE_UOM_CONV_MAIN");

            entity.HasIndex(e => e.UomIdTo)
                .HasName("DATE_UOM_CONV_TO");

            entity.Property(e => e.UomId)
                .HasColumnName("UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.UomIdTo)
                .HasColumnName("UOM_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ConversionFactor).HasColumnName("CONVERSION_FACTOR");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CustomMethodId)
                .HasColumnName("CUSTOM_METHOD_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DecimalScale)
                .HasColumnName("DECIMAL_SCALE")
                .HasColumnType("decimal(20,0)");


            entity.Property(e => e.PurposeEnumId)
                .HasColumnName("PURPOSE_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoundingMode)
                .HasColumnName("ROUNDING_MODE")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.CustomMethod)
                .WithMany(p => p.UomConversionDateds)
                .HasForeignKey(d => d.CustomMethodId)
                .HasConstraintName("UOMD_CUSTOM_METHOD");

            entity.HasOne(d => d.PurposeEnum)
                .WithMany(p => p.UomConversionDateds)
                .HasForeignKey(d => d.PurposeEnumId)
                .HasConstraintName("UOMD_PURPOSE_ENUM");

            entity.HasOne(d => d.Uom)
                .WithMany(p => p.UomConversionDatedUoms)
                .HasForeignKey(d => d.UomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DATE_UOM_CONV_MAIN");

            entity.HasOne(d => d.UomIdToNavigation)
                .WithMany(p => p.UomConversionDatedUomIdToNavigations)
                .HasForeignKey(d => d.UomIdTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DATE_UOM_CONV_TO");
        });

        modelBuilder.Entity<UomGroup>(entity =>
        {
            entity.HasKey(e => new { e.UomGroupId, e.UomId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("UOM_GROUP");


            entity.HasIndex(e => e.UomId)
                .HasName("UOM_GROUP_UOM");

            entity.Property(e => e.UomGroupId)
                .HasColumnName("UOM_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.UomId)
                .HasColumnName("UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Uom)
                .WithMany(p => p.UomGroups)
                .HasForeignKey(d => d.UomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("UOM_GROUP_UOM");
        });

        modelBuilder.Entity<UomType>(entity =>
        {
            entity.ToTable("UOM_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("UOM_TYPE_PARENT");

            entity.Property(e => e.UomTypeId)
                .HasColumnName("UOM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");

            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("UOM_TYPE_PARENT")
                .IsRequired(false);
        });

        modelBuilder.Entity<UserAgent>(entity =>
        {
            entity.ToTable("USER_AGENT");

            entity.HasIndex(e => e.BrowserTypeId)
                .HasName("UAGENT_BROWSER");


            entity.HasIndex(e => e.PlatformTypeId)
                .HasName("UAGENT_PLATFORM");

            entity.HasIndex(e => e.ProtocolTypeId)
                .HasName("UAGENT_PROTOCOL");

            entity.HasIndex(e => e.UserAgentMethodTypeId)
                .HasName("UAGENT_METHOD");

            entity.HasIndex(e => e.UserAgentTypeId)
                .HasName("UAGENT_TYPE");

            entity.Property(e => e.UserAgentId)
                .HasColumnName("USER_AGENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.BrowserTypeId)
                .HasColumnName("BROWSER_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PlatformTypeId)
                .HasColumnName("PLATFORM_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProtocolTypeId)
                .HasColumnName("PROTOCOL_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.UserAgentMethodTypeId)
                .HasColumnName("USER_AGENT_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.UserAgentTypeId)
                .HasColumnName("USER_AGENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.BrowserType)
                .WithMany(p => p.UserAgents)
                .HasForeignKey(d => d.BrowserTypeId)
                .HasConstraintName("UAGENT_BROWSER");

            entity.HasOne(d => d.PlatformType)
                .WithMany(p => p.UserAgents)
                .HasForeignKey(d => d.PlatformTypeId)
                .HasConstraintName("UAGENT_PLATFORM");

            entity.HasOne(d => d.ProtocolType)
                .WithMany(p => p.UserAgents)
                .HasForeignKey(d => d.ProtocolTypeId)
                .HasConstraintName("UAGENT_PROTOCOL");

            entity.HasOne(d => d.UserAgentMethodType)
                .WithMany(p => p.UserAgents)
                .HasForeignKey(d => d.UserAgentMethodTypeId)
                .HasConstraintName("UAGENT_METHOD");

            entity.HasOne(d => d.UserAgentType)
                .WithMany(p => p.UserAgents)
                .HasForeignKey(d => d.UserAgentTypeId)
                .HasConstraintName("UAGENT_TYPE");
        });

        modelBuilder.Entity<UserAgentMethodType>(entity =>
        {
            entity.ToTable("USER_AGENT_METHOD_TYPE");


            entity.Property(e => e.UserAgentMethodTypeId)
                .HasColumnName("USER_AGENT_METHOD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<UserAgentType>(entity =>
        {
            entity.ToTable("USER_AGENT_TYPE");


            entity.Property(e => e.UserAgentTypeId)
                .HasColumnName("USER_AGENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<AppUserLogin>(entity =>
        {
            entity.ToTable("App_USER_LOGIN");

            entity.HasIndex(e => e.PartyId)
                .HasName("USER_PARTY");


            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrentPassword)
                .HasColumnName("CURRENT_PASSWORD")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.DisabledBy)
                .HasColumnName("DISABLED_BY")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.DisabledDateTime)
                .HasColumnName("DISABLED_DATE_TIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Enabled)
                .HasColumnName("ENABLED")
                .HasColumnType("char(1)");

            entity.Property(e => e.ExternalAuthId)
                .HasColumnName("EXTERNAL_AUTH_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.HasLoggedOut)
                .HasColumnName("HAS_LOGGED_OUT")
                .HasColumnType("char(1)");

            entity.Property(e => e.IsSystem)
                .HasColumnName("IS_SYSTEM")
                .HasColumnType("char(1)");

            entity.Property(e => e.LastCurrencyUom)
                .HasColumnName("LAST_CURRENCY_UOM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.LastLocale)
                .HasColumnName("LAST_LOCALE")
                .HasColumnType("varchar(10)");

            entity.Property(e => e.LastTimeZone)
                .HasColumnName("LAST_TIME_ZONE")
                .HasColumnType("varchar(60)");


            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PasswordHint)
                .HasColumnName("PASSWORD_HINT")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.RequirePasswordChange)
                .HasColumnName("REQUIRE_PASSWORD_CHANGE")
                .HasColumnType("char(1)");

            entity.Property(e => e.SuccessiveFailedLogins)
                .HasColumnName("SUCCESSIVE_FAILED_LOGINS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.UserLdapDn)
                .HasColumnName("USER_LDAP_DN")
                .HasColumnType("varchar(250)");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.UserLogins)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("USER_PARTY")
                .IsRequired(false);
            ;

            entity.HasMany(e => e.Claims)
                .WithOne(e => e.User)
                .HasForeignKey(uc => uc.UserId)
                .IsRequired();

            // Each User can have many UserLogins
            entity.HasMany(e => e.Logins)
                .WithOne(e => e.User)
                .HasForeignKey(ul => ul.UserId)
                .IsRequired();

            // Each User can have many UserTokens
            entity.HasMany(e => e.Tokens)
                .WithOne(e => e.User)
                .HasForeignKey(ut => ut.UserId)
                .IsRequired();

            // // Each User can have many entries in the UserRole join table
            // entity.HasMany(e => e.UserLoginSecurityGroups)
            //     .WithOne(e => e.UserLogin)
            //     .HasForeignKey(ur => ur.UserId)
            //     .IsRequired();
        });


        modelBuilder.Entity<UserLoginHistory>(entity =>
        {
            entity.HasKey(e => new { e.UserLoginId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("USER_LOGIN_HISTORY");


            entity.HasIndex(e => e.PartyId)
                .HasName("USER_LH_PARTY");

            entity.HasIndex(e => e.UserLoginId)
                .HasName("USER_LH_USER");

            entity.Property(e => e.UserLoginId)
                .HasColumnName("USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.OriginUserLoginId)
                .HasColumnName("ORIGIN_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PasswordUsed)
                .HasColumnName("PASSWORD_USED")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.SuccessfulLogin)
                .HasColumnName("SUCCESSFUL_LOGIN")
                .HasColumnType("char(1)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.VisitId)
                .HasColumnName("VISIT_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.UserLoginHistories)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("USER_LH_PARTY");

            entity.HasOne(d => d.UserLogin)
                .WithMany(p => p.UserLoginHistories)
                .HasForeignKey(d => d.UserLoginId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("USER_LH_USER");
        });

        modelBuilder.Entity<UserLoginPasswordHistory>(entity =>
        {
            entity.HasKey(e => new { e.UserLoginId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("USER_LOGIN_PASSWORD_HISTORY");


            entity.HasIndex(e => e.UserLoginId)
                .HasName("USER_LPH_USER");

            entity.Property(e => e.UserLoginId)
                .HasColumnName("USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrentPassword)
                .HasColumnName("CURRENT_PASSWORD")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.UserLogin)
                .WithMany(p => p.UserLoginPasswordHistories)
                .HasForeignKey(d => d.UserLoginId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("USER_LPH_USER");
        });

        modelBuilder.Entity<UserLoginSecurityGroup>(entity =>
        {
            entity.HasKey(e => new { e.UserLoginId, e.GroupId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("USER_LOGIN_SECURITY_GROUP");


            entity.HasIndex(e => e.GroupId)
                .HasName("USER_SECGRP_GRP");


            entity.HasIndex(e => e.UserLoginId)
                .HasName("USER_SECGRP_USER");

            entity.Property(e => e.UserLoginId)
                .HasColumnName("USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.GroupId)
                .HasColumnName("GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Group)
                .WithMany(p => p.UserLoginSecurityGroups)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("USER_SECGRP_GRP");

            entity.HasOne(d => d.UserLogin)
                .WithMany(p => p.UserLoginSecurityGroups)
                .HasForeignKey(d => d.UserLoginId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("USER_SECGRP_USER");
        });

        modelBuilder.Entity<UserLoginSession>(entity =>
        {
            entity.HasKey(e => e.UserLoginId)
                .HasName("PRIMARY");

            entity.ToTable("USER_LOGIN_SESSION");


            entity.HasIndex(e => e.UserLoginId)
                .HasName("USER_SESSION_USER");

            entity.Property(e => e.UserLoginId)
                .HasColumnName("USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SavedDate)
                .HasColumnName("SAVED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.SessionData)
                .HasColumnName("SESSION_DATA")
                .HasColumnType("longtext");

            entity.HasOne(d => d.UserLogin)
                .WithOne(p => p.UserLoginSession)
                .HasForeignKey<UserLoginSession>(d => d.UserLoginId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("USER_SESSION_USER");
        });

        modelBuilder.Entity<UserPrefGroupType>(entity =>
        {
            entity.ToTable("USER_PREF_GROUP_TYPE");


            entity.Property(e => e.UserPrefGroupTypeId)
                .HasColumnName("USER_PREF_GROUP_TYPE_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<UserPreference>(entity =>
        {
            entity.HasKey(e => new { e.UserLoginId, e.UserPrefTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("USER_PREFERENCE");


            entity.HasIndex(e => e.UserPrefGroupTypeId)
                .HasName("UP_USER_GROUP_TYPE");

            entity.Property(e => e.UserLoginId)
                .HasColumnName("USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.UserPrefTypeId)
                .HasColumnName("USER_PREF_TYPE_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.UserPrefDataType)
                .HasColumnName("USER_PREF_DATA_TYPE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.UserPrefGroupTypeId)
                .HasColumnName("USER_PREF_GROUP_TYPE_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.UserPrefValue)
                .HasColumnName("USER_PREF_VALUE")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.UserPrefGroupType)
                .WithMany(p => p.UserPreferences)
                .HasForeignKey(d => d.UserPrefGroupTypeId)
                .HasConstraintName("UP_USER_GROUP_TYPE");
        });

        modelBuilder.Entity<ValidContactMechRole>(entity =>
        {
            entity.HasKey(e => new { e.RoleTypeId, e.ContactMechTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("VALID_CONTACT_MECH_ROLE");

            entity.HasIndex(e => e.ContactMechTypeId)
                .HasName("VAL_CMRLE_CMTYPE");


            entity.HasIndex(e => e.RoleTypeId)
                .HasName("VAL_CMRLE_ROLE");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechTypeId)
                .HasColumnName("CONTACT_MECH_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ContactMechType)
                .WithMany(p => p.ValidContactMechRoles)
                .HasForeignKey(d => d.ContactMechTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("VAL_CMRLE_CMTYPE");

            entity.HasOne(d => d.RoleType)
                .WithMany(p => p.ValidContactMechRoles)
                .HasForeignKey(d => d.RoleTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("VAL_CMRLE_ROLE");
        });

        modelBuilder.Entity<ValidResponsibility>(entity =>
        {
            entity.HasKey(e => new { e.EmplPositionTypeId, e.ResponsibilityTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("VALID_RESPONSIBILITY");


            entity.HasIndex(e => e.EmplPositionTypeId)
                .HasName("VALID_RTY_EPSTP");


            entity.HasIndex(e => e.ResponsibilityTypeId)
                .HasName("VALID_RTY_RYTP");

            entity.Property(e => e.EmplPositionTypeId)
                .HasColumnName("EMPL_POSITION_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ResponsibilityTypeId)
                .HasColumnName("RESPONSIBILITY_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.EmplPositionType)
                .WithMany(p => p.ValidResponsibilities)
                .HasForeignKey(d => d.EmplPositionTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("VALID_RTY_EPSTP");

            entity.HasOne(d => d.ResponsibilityType)
                .WithMany(p => p.ValidResponsibilities)
                .HasForeignKey(d => d.ResponsibilityTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("VALID_RTY_RYTP");
        });

        modelBuilder.Entity<ValueLinkKey>(entity =>
        {
            entity.HasKey(e => e.MerchantId)
                .HasName("PRIMARY");

            entity.ToTable("VALUE_LINK_KEY");


            entity.Property(e => e.MerchantId)
                .HasColumnName("MERCHANT_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedByTerminal)
                .HasColumnName("CREATED_BY_TERMINAL")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedDate)
                .HasColumnName("CREATED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ExchangeKey)
                .HasColumnName("EXCHANGE_KEY")
                .HasColumnType("longtext");

            entity.Property(e => e.LastModifiedByTerminal)
                .HasColumnName("LAST_MODIFIED_BY_TERMINAL")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.LastModifiedDate)
                .HasColumnName("LAST_MODIFIED_DATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.LastWorkingKey)
                .HasColumnName("LAST_WORKING_KEY")
                .HasColumnType("longtext");

            entity.Property(e => e.PrivateKey)
                .HasColumnName("PRIVATE_KEY")
                .HasColumnType("longtext");

            entity.Property(e => e.PublicKey)
                .HasColumnName("PUBLIC_KEY")
                .HasColumnType("longtext");

            entity.Property(e => e.WorkingKey)
                .HasColumnName("WORKING_KEY")
                .HasColumnType("longtext");

            entity.Property(e => e.WorkingKeyIndex)
                .HasColumnName("WORKING_KEY_INDEX")
                .HasColumnType("decimal(20,0)");
        });

        modelBuilder.Entity<VarianceReason>(entity =>
        {
            entity.ToTable("VARIANCE_REASON");


            entity.Property(e => e.VarianceReasonId)
                .HasColumnName("VARIANCE_REASON_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<VarianceReasonGlAccount>(entity =>
        {
            entity.HasKey(e => new { e.VarianceReasonId, e.OrganizationPartyId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("VARIANCE_REASON_GL_ACCOUNT");


            entity.HasIndex(e => e.GlAccountId)
                .HasName("VRGL_GLACCT");


            entity.HasIndex(e => e.OrganizationPartyId)
                .HasName("VRGL_PARTY");

            entity.HasIndex(e => e.VarianceReasonId)
                .HasName("VRGL_VREAS");

            entity.Property(e => e.VarianceReasonId)
                .HasColumnName("VARIANCE_REASON_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrganizationPartyId)
                .HasColumnName("ORGANIZATION_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GlAccountId)
                .HasColumnName("GL_ACCOUNT_ID")
                .HasColumnType("varchar(36)");


            entity.HasOne(d => d.GlAccount)
                .WithMany(p => p.VarianceReasonGlAccounts)
                .HasForeignKey(d => d.GlAccountId)
                .HasConstraintName("VRGL_GLACCT");

            entity.HasOne(d => d.OrganizationParty)
                .WithMany(p => p.VarianceReasonGlAccounts)
                .HasForeignKey(d => d.OrganizationPartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("VRGL_PARTY");

            entity.HasOne(d => d.VarianceReason)
                .WithMany(p => p.VarianceReasonGlAccounts)
                .HasForeignKey(d => d.VarianceReasonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("VRGL_VREAS");
        });

        modelBuilder.Entity<Vendor>(entity =>
        {
            entity.HasKey(e => e.PartyId)
                .HasName("PRIMARY");

            entity.ToTable("VENDOR");


            entity.HasIndex(e => e.PartyId)
                .HasName("VENDOR_PARTY");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ManifestCompanyName)
                .HasColumnName("MANIFEST_COMPANY_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.ManifestCompanyTitle)
                .HasColumnName("MANIFEST_COMPANY_TITLE")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.ManifestLogoUrl)
                .HasColumnName("MANIFEST_LOGO_URL")
                .HasColumnType("varchar(2000)");

            entity.Property(e => e.ManifestPolicies)
                .HasColumnName("MANIFEST_POLICIES")
                .HasColumnType("longtext");

            entity.HasOne(d => d.Party)
                .WithOne(p => p.Vendor)
                .HasForeignKey<Vendor>(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("VENDOR_PARTY");
        });

        modelBuilder.Entity<VendorProduct>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.VendorPartyId, e.ProductStoreGroupId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("VENDOR_PRODUCT");


            entity.HasIndex(e => e.ProductId)
                .HasName("VENDPROD_PROD");

            entity.HasIndex(e => e.ProductStoreGroupId)
                .HasName("VENDPROD_PSGRP");

            entity.HasIndex(e => e.VendorPartyId)
                .HasName("VENDPROD_VPTY");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.VendorPartyId)
                .HasColumnName("VENDOR_PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductStoreGroupId)
                .HasColumnName("PRODUCT_STORE_GROUP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Product)
                .WithMany(p => p.VendorProducts)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("VENDPROD_PROD");

            entity.HasOne(d => d.ProductStoreGroup)
                .WithMany(p => p.VendorProducts)
                .HasForeignKey(d => d.ProductStoreGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("VENDPROD_PSGRP");

            entity.HasOne(d => d.VendorParty)
                .WithMany(p => p.VendorProducts)
                .HasForeignKey(d => d.VendorPartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("VENDPROD_VPTY");
        });

        modelBuilder.Entity<VideoDataResource>(entity =>
        {
            entity.HasKey(e => e.DataResourceId)
                .HasName("PRIMARY");

            entity.ToTable("VIDEO_DATA_RESOURCE");


            entity.HasIndex(e => e.DataResourceId)
                .HasName("DATA_REC_VIDEO");


            entity.Property(e => e.DataResourceId)
                .HasColumnName("DATA_RESOURCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.VideoData).HasColumnName("VIDEO_DATA");

            entity.HasOne(d => d.DataResource)
                .WithOne(p => p.VideoDataResource)
                .HasForeignKey<VideoDataResource>(d => d.DataResourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DATA_REC_VIDEO");
        });

        modelBuilder.Entity<Visit>(entity =>
        {
            entity.ToTable("VISIT");

            entity.HasIndex(e => e.ThruDate)
                .HasName("VISIT_THRU_IDX");

            entity.HasIndex(e => e.UserAgentId)
                .HasName("VISIT_USER_AGNT");

            entity.HasIndex(e => e.VisitorId)
                .HasName("VISIT_VISITOR");

            entity.Property(e => e.VisitId)
                .HasColumnName("VISIT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ClientHostName)
                .HasColumnName("CLIENT_HOST_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ClientIpAddress)
                .HasColumnName("CLIENT_IP_ADDRESS")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.ClientIpCountryGeoId)
                .HasColumnName("CLIENT_IP_COUNTRY_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ClientIpIspName)
                .HasColumnName("CLIENT_IP_ISP_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.ClientIpPostalCode)
                .HasColumnName("CLIENT_IP_POSTAL_CODE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.ClientIpStateProvGeoId)
                .HasColumnName("CLIENT_IP_STATE_PROV_GEO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ClientUser)
                .HasColumnName("CLIENT_USER")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Cookie)
                .HasColumnName("COOKIE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.InitialLocale)
                .HasColumnName("INITIAL_LOCALE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.InitialReferrer)
                .HasColumnName("INITIAL_REFERRER")
                .HasColumnType("varchar(2000)");

            entity.Property(e => e.InitialRequest)
                .HasColumnName("INITIAL_REQUEST")
                .HasColumnType("varchar(2000)");

            entity.Property(e => e.InitialUserAgent)
                .HasColumnName("INITIAL_USER_AGENT")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ServerHostName)
                .HasColumnName("SERVER_HOST_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ServerIpAddress)
                .HasColumnName("SERVER_IP_ADDRESS")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SessionId)
                .HasColumnName("SESSION_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.UserAgentId)
                .HasColumnName("USER_AGENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.UserCreated)
                .HasColumnName("USER_CREATED")
                .HasColumnType("char(1)");

            entity.Property(e => e.UserLoginId)
                .HasColumnName("USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.VisitorId)
                .HasColumnName("VISITOR_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WebappName)
                .HasColumnName("WEBAPP_NAME")
                .HasColumnType("varchar(60)");

            entity.HasOne(d => d.UserAgent)
                .WithMany(p => p.Visits)
                .HasForeignKey(d => d.UserAgentId)
                .HasConstraintName("VISIT_USER_AGNT");

            entity.HasOne(d => d.Visitor)
                .WithMany(p => p.Visits)
                .HasForeignKey(d => d.VisitorId)
                .HasConstraintName("VISIT_VISITOR");
        });

        modelBuilder.Entity<Visitor>(entity =>
        {
            entity.ToTable("VISITOR");


            entity.Property(e => e.VisitorId)
                .HasColumnName("VISITOR_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.UserLoginId)
                .HasColumnName("USER_LOGIN_ID")
                .HasColumnType("varchar(250)");
        });

        modelBuilder.Entity<VisualTheme>(entity =>
        {
            entity.ToTable("VISUAL_THEME");


            entity.HasIndex(e => e.VisualThemeSetId)
                .HasName("VT_THEME_SET");

            entity.Property(e => e.VisualThemeId)
                .HasColumnName("VISUAL_THEME_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.VisualThemeSetId)
                .HasColumnName("VISUAL_THEME_SET_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.VisualThemeSet)
                .WithMany(p => p.VisualThemes)
                .HasForeignKey(d => d.VisualThemeSetId)
                .HasConstraintName("VT_THEME_SET");
        });

        modelBuilder.Entity<VisualThemeResource>(entity =>
        {
            entity.HasKey(e => new { e.VisualThemeId, e.ResourceTypeEnumId, e.SequenceId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("VISUAL_THEME_RESOURCE");


            entity.HasIndex(e => e.ResourceTypeEnumId)
                .HasName("VT_RES_TYPE_ENUM");

            entity.HasIndex(e => e.VisualThemeId)
                .HasName("VT_RES_THEME");

            entity.Property(e => e.VisualThemeId)
                .HasColumnName("VISUAL_THEME_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ResourceTypeEnumId)
                .HasColumnName("RESOURCE_TYPE_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SequenceId)
                .HasColumnName("SEQUENCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ResourceValue)
                .HasColumnName("RESOURCE_VALUE")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.ResourceTypeEnum)
                .WithMany(p => p.VisualThemeResources)
                .HasForeignKey(d => d.ResourceTypeEnumId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("VT_RES_TYPE_ENUM");

            entity.HasOne(d => d.VisualTheme)
                .WithMany(p => p.VisualThemeResources)
                .HasForeignKey(d => d.VisualThemeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("VT_RES_THEME");
        });

        modelBuilder.Entity<VisualThemeSet>(entity =>
        {
            entity.ToTable("VISUAL_THEME_SET");


            entity.Property(e => e.VisualThemeSetId)
                .HasColumnName("VISUAL_THEME_SET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<WebAnalyticsConfig>(entity =>
        {
            entity.HasKey(e => new { e.WebSiteId, e.WebAnalyticsTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("WEB_ANALYTICS_CONFIG");


            entity.Property(e => e.WebSiteId)
                .HasColumnName("WEB_SITE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WebAnalyticsTypeId)
                .HasColumnName("WEB_ANALYTICS_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.WebAnalyticsCode)
                .HasColumnName("WEB_ANALYTICS_CODE")
                .HasColumnType("longtext");
        });

        modelBuilder.Entity<WebAnalyticsType>(entity =>
        {
            entity.ToTable("WEB_ANALYTICS_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("WANA_TYP_PARENT");

            entity.Property(e => e.WebAnalyticsTypeId)
                .HasColumnName("WEB_ANALYTICS_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("WANA_TYP_PARENT");
        });

        modelBuilder.Entity<WebPage>(entity =>
        {
            entity.ToTable("WEB_PAGE");

            entity.HasIndex(e => e.ContentId)
                .HasName("WEB_PAGE_CONTENT");


            entity.HasIndex(e => e.WebSiteId)
                .HasName("WEB_PAGE_SITE");

            entity.Property(e => e.WebPageId)
                .HasColumnName("WEB_PAGE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PageName)
                .HasColumnName("PAGE_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.WebSiteId)
                .HasColumnName("WEB_SITE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.WebPages)
                .HasForeignKey(d => d.ContentId)
                .HasConstraintName("WEB_PAGE_CONTENT");

            entity.HasOne(d => d.WebSite)
                .WithMany(p => p.WebPages)
                .HasForeignKey(d => d.WebSiteId)
                .HasConstraintName("WEB_PAGE_SITE");
        });

        modelBuilder.Entity<WebPreferenceType>(entity =>
        {
            entity.ToTable("WEB_PREFERENCE_TYPE");


            entity.Property(e => e.WebPreferenceTypeId)
                .HasColumnName("WEB_PREFERENCE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<WebSite>(entity =>
        {
            entity.ToTable("WEB_SITE");


            entity.HasIndex(e => e.ProductStoreId)
                .HasName("WEB_SITE_PRDS");

            entity.HasIndex(e => e.VisualThemeSetId)
                .HasName("WEB_SITE_THEME_SET");

            entity.Property(e => e.WebSiteId)
                .HasColumnName("WEB_SITE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AllowProductStoreChange)
                .HasColumnName("ALLOW_PRODUCT_STORE_CHANGE")
                .HasColumnType("char(1)");

            entity.Property(e => e.CookieDomain)
                .HasColumnName("COOKIE_DOMAIN")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DisplayMaintenancePage)
                .HasColumnName("DISPLAY_MAINTENANCE_PAGE")
                .HasColumnType("char(1)");

            entity.Property(e => e.EnableHttps)
                .HasColumnName("ENABLE_HTTPS")
                .HasColumnType("char(1)");

            entity.Property(e => e.HostedPathAlias)
                .HasColumnName("HOSTED_PATH_ALIAS")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.HttpHost)
                .HasColumnName("HTTP_HOST")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HttpPort)
                .HasColumnName("HTTP_PORT")
                .HasColumnType("varchar(10)");

            entity.Property(e => e.HttpsHost)
                .HasColumnName("HTTPS_HOST")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HttpsPort)
                .HasColumnName("HTTPS_PORT")
                .HasColumnType("varchar(10)");

            entity.Property(e => e.IsDefault)
                .HasColumnName("IS_DEFAULT")
                .HasColumnType("char(1)");


            entity.Property(e => e.ProductStoreId)
                .HasColumnName("PRODUCT_STORE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SecureContentPrefix)
                .HasColumnName("SECURE_CONTENT_PREFIX")
                .HasColumnType("varchar(2000)");

            entity.Property(e => e.SiteName)
                .HasColumnName("SITE_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.StandardContentPrefix)
                .HasColumnName("STANDARD_CONTENT_PREFIX")
                .HasColumnType("varchar(2000)");

            entity.Property(e => e.VisualThemeSetId)
                .HasColumnName("VISUAL_THEME_SET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WebappPath)
                .HasColumnName("WEBAPP_PATH")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.ProductStore)
                .WithMany(p => p.WebSites)
                .HasForeignKey(d => d.ProductStoreId)
                .HasConstraintName("WEB_SITE_PRDS");

            entity.HasOne(d => d.VisualThemeSet)
                .WithMany(p => p.WebSites)
                .HasForeignKey(d => d.VisualThemeSetId)
                .HasConstraintName("WEB_SITE_THEME_SET");
        });

        modelBuilder.Entity<WebSiteContactList>(entity =>
        {
            entity.HasKey(e => new { e.WebSiteId, e.ContactListId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("WEB_SITE_CONTACT_LIST");

            entity.HasIndex(e => e.ContactListId)
                .HasName("CNTCT_LST_WEB_SITE");


            entity.HasIndex(e => e.WebSiteId)
                .HasName("WEB_SITE_CNTCT_LST");

            entity.Property(e => e.WebSiteId)
                .HasColumnName("WEB_SITE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactListId)
                .HasColumnName("CONTACT_LIST_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ContactList)
                .WithMany(p => p.WebSiteContactLists)
                .HasForeignKey(d => d.ContactListId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CNTCT_LST_WEB_SITE");

            entity.HasOne(d => d.WebSite)
                .WithMany(p => p.WebSiteContactLists)
                .HasForeignKey(d => d.WebSiteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WEB_SITE_CNTCT_LST");
        });

        modelBuilder.Entity<WebSiteContent>(entity =>
        {
            entity.HasKey(e => new { e.WebSiteId, e.ContentId, e.WebSiteContentTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("WEB_SITE_CONTENT");

            entity.HasIndex(e => e.ContentId)
                .HasName("WSCTNT_CONTENT");


            entity.HasIndex(e => e.WebSiteContentTypeId)
                .HasName("WSCTNT_WSCTTYPE");

            entity.HasIndex(e => e.WebSiteId)
                .HasName("WSCTNT_WEBSITE");

            entity.Property(e => e.WebSiteId)
                .HasColumnName("WEB_SITE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WebSiteContentTypeId)
                .HasColumnName("WEB_SITE_CONTENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.WebSiteContents)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WSCTNT_CONTENT");

            entity.HasOne(d => d.WebSiteContentType)
                .WithMany(p => p.WebSiteContents)
                .HasForeignKey(d => d.WebSiteContentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WSCTNT_WSCTTYPE");

            entity.HasOne(d => d.WebSite)
                .WithMany(p => p.WebSiteContents)
                .HasForeignKey(d => d.WebSiteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WSCTNT_WEBSITE");
        });

        modelBuilder.Entity<WebSiteContentType>(entity =>
        {
            entity.ToTable("WEB_SITE_CONTENT_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("WSCT_TYPE_PARENT");

            entity.Property(e => e.WebSiteContentTypeId)
                .HasColumnName("WEB_SITE_CONTENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("WSCT_TYPE_PARENT");
        });

        modelBuilder.Entity<WebSitePathAlia>(entity =>
        {
            entity.HasKey(e => new { e.WebSiteId, e.PathAlias, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("WEB_SITE_PATH_ALIAS");

            entity.HasIndex(e => e.ContentId)
                .HasName("WSPATH_CONTENT");


            entity.HasIndex(e => e.WebSiteId)
                .HasName("WSPATH_WEBSITE");

            entity.Property(e => e.WebSiteId)
                .HasColumnName("WEB_SITE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PathAlias)
                .HasColumnName("PATH_ALIAS")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.AliasTo)
                .HasColumnName("ALIAS_TO")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.MapKey)
                .HasColumnName("MAP_KEY")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.WebSitePathAlias)
                .HasForeignKey(d => d.ContentId)
                .HasConstraintName("WSPATH_CONTENT");

            entity.HasOne(d => d.WebSite)
                .WithMany(p => p.WebSitePathAlias)
                .HasForeignKey(d => d.WebSiteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WSPATH_WEBSITE");
        });

        modelBuilder.Entity<WebSitePublishPoint>(entity =>
        {
            entity.HasKey(e => e.ContentId)
                .HasName("PRIMARY");

            entity.ToTable("WEB_SITE_PUBLISH_POINT");

            entity.HasIndex(e => e.ContentId)
                .HasName("WBSTPP_CONTENT");


            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AboutContentId)
                .HasColumnName("ABOUT_CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContentDept)
                .HasColumnName("CONTENT_DEPT")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.LeftBarId)
                .HasColumnName("LEFT_BAR_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.LineLogo)
                .HasColumnName("LINE_LOGO")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.Logo)
                .HasColumnName("LOGO")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.MedallionLogo)
                .HasColumnName("MEDALLION_LOGO")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.RightBarId)
                .HasColumnName("RIGHT_BAR_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StyleSheetFile)
                .HasColumnName("STYLE_SHEET_FILE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.TemplateTitle)
                .HasColumnName("TEMPLATE_TITLE")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.Content)
                .WithOne(p => p.WebSitePublishPoint)
                .HasForeignKey<WebSitePublishPoint>(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WBSTPP_CONTENT");
        });

        modelBuilder.Entity<WebSiteRole>(entity =>
        {
            entity.HasKey(e => new { e.PartyId, e.RoleTypeId, e.WebSiteId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("WEB_SITE_ROLE");


            entity.HasIndex(e => e.WebSiteId)
                .HasName("WSRLE_WSITE");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("WSRLE_PTYRLE");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WebSiteId)
                .HasColumnName("WEB_SITE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.WebSite)
                .WithMany(p => p.WebSiteRoles)
                .HasForeignKey(d => d.WebSiteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WSRLE_WSITE");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.WebSiteRoles)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WSRLE_PTYRLE");
        });

        modelBuilder.Entity<WebUserPreference>(entity =>
        {
            entity.HasKey(e => new { e.UserLoginId, e.PartyId, e.VisitId, e.WebPreferenceTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("WEB_USER_PREFERENCE");


            entity.HasIndex(e => e.PartyId)
                .HasName("WEB_PREF_PARTY");

            entity.HasIndex(e => e.UserLoginId)
                .HasName("WEB_PREF_USER");

            entity.HasIndex(e => e.WebPreferenceTypeId)
                .HasName("WEB_PREF_TYPE");

            entity.Property(e => e.UserLoginId)
                .HasColumnName("USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.VisitId)
                .HasColumnName("VISIT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WebPreferenceTypeId)
                .HasColumnName("WEB_PREFERENCE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.WebPreferenceValue)
                .HasColumnName("WEB_PREFERENCE_VALUE")
                .HasColumnType("varchar(255)");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.WebUserPreferences)
                .HasForeignKey(d => d.PartyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WEB_PREF_PARTY");

            entity.HasOne(d => d.UserLogin)
                .WithMany(p => p.WebUserPreferences)
                .HasForeignKey(d => d.UserLoginId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WEB_PREF_USER");

            entity.HasOne(d => d.WebPreferenceType)
                .WithMany(p => p.WebUserPreferences)
                .HasForeignKey(d => d.WebPreferenceTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WEB_PREF_TYPE");
        });

        modelBuilder.Entity<WorkEffort>(entity =>
        {
            entity.ToTable("WORK_EFFORT");

            entity.HasIndex(e => e.AccommodationMapId)
                .HasName("WK_EFFRT_ACC_MAP");

            entity.HasIndex(e => e.AccommodationSpotId)
                .HasName("WK_EFFRT_ACC_SPOT");


            entity.HasIndex(e => e.CurrentStatusId)
                .HasName("WK_EFFRT_CURSTTS");

            entity.HasIndex(e => e.EstimateCalcMethod)
                .HasName("WK_EFFRT_CUS_MET");

            entity.HasIndex(e => e.FacilityId)
                .HasName("WK_EFFRT_FACILITY");

            entity.HasIndex(e => e.FixedAssetId)
                .HasName("WK_EFFRT_FXDASST");


            entity.HasIndex(e => e.MoneyUomId)
                .HasName("WK_EFFRT_MON_UOM");

            entity.HasIndex(e => e.NoteId)
                .HasName("WK_EFFRT_NOTE");

            entity.HasIndex(e => e.RecurrenceInfoId)
                .HasName("WK_EFFRT_RECINFO");

            entity.HasIndex(e => e.RuntimeDataId)
                .HasName("WK_EFFRT_RNTMDTA");

            entity.HasIndex(e => e.ScopeEnumId)
                .HasName("WK_EFFRT_SC_ENUM");

            entity.HasIndex(e => e.TempExprId)
                .HasName("WK_EFFRT_TEMPEXPR");

            entity.HasIndex(e => e.WorkEffortParentId)
                .HasName("WK_EFFRT_PARENT");

            entity.HasIndex(e => e.WorkEffortPurposeTypeId)
                .HasName("WK_EFFRT_PRPTYP");

            entity.HasIndex(e => e.WorkEffortTypeId)
                .HasName("WK_EFFRT_TYPE");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AccommodationMapId)
                .HasColumnName("ACCOMMODATION_MAP_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AccommodationSpotId)
                .HasColumnName("ACCOMMODATION_SPOT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ActualCompletionDate)
                .HasColumnName("ACTUAL_COMPLETION_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ActualMilliSeconds).HasColumnName("ACTUAL_MILLI_SECONDS");

            entity.Property(e => e.ActualSetupMillis).HasColumnName("ACTUAL_SETUP_MILLIS");

            entity.Property(e => e.ActualStartDate)
                .HasColumnName("ACTUAL_START_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedByUserLogin)
                .HasColumnName("CREATED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.CreatedDate)
                .HasColumnName("CREATED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrentStatusId)
                .HasColumnName("CURRENT_STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.EstimateCalcMethod)
                .HasColumnName("ESTIMATE_CALC_METHOD")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.EstimatedCompletionDate)
                .HasColumnName("ESTIMATED_COMPLETION_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.EstimatedMilliSeconds).HasColumnName("ESTIMATED_MILLI_SECONDS");

            entity.Property(e => e.EstimatedSetupMillis).HasColumnName("ESTIMATED_SETUP_MILLIS");

            entity.Property(e => e.EstimatedStartDate)
                .HasColumnName("ESTIMATED_START_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");

            entity.Property(e => e.FixedAssetId)
                .HasColumnName("FIXED_ASSET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InfoUrl)
                .HasColumnName("INFO_URL")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.LastModifiedByUserLogin)
                .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.LastModifiedDate)
                .HasColumnName("LAST_MODIFIED_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.LastStatusUpdate)
                .HasColumnName("LAST_STATUS_UPDATE")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.LocationDesc)
                .HasColumnName("LOCATION_DESC")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.MoneyUomId)
                .HasColumnName("MONEY_UOM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.NoteId)
                .HasColumnName("NOTE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PercentComplete)
                .HasColumnName("PERCENT_COMPLETE")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.Priority)
                .HasColumnName("PRIORITY")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.QuantityProduced)
                .HasColumnName("QUANTITY_PRODUCED")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.QuantityRejected)
                .HasColumnName("QUANTITY_REJECTED")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.QuantityToProduce)
                .HasColumnName("QUANTITY_TO_PRODUCE")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.RecurrenceInfoId)
                .HasColumnName("RECURRENCE_INFO_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Reserv2ndPPPerc)
                .HasColumnName("RESERV2ND_P_P_PERC")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReservNthPPPerc)
                .HasColumnName("RESERV_NTH_P_P_PERC")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ReservPersons)
                .HasColumnName("RESERV_PERSONS")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.RevisionNumber)
                .HasColumnName("REVISION_NUMBER")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.RuntimeDataId)
                .HasColumnName("RUNTIME_DATA_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ScopeEnumId)
                .HasColumnName("SCOPE_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SendNotificationEmail)
                .HasColumnName("SEND_NOTIFICATION_EMAIL")
                .HasColumnType("char(1)");

            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ServiceLoaderName)
                .HasColumnName("SERVICE_LOADER_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.ShowAsEnumId)
                .HasColumnName("SHOW_AS_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SourceReferenceId)
                .HasColumnName("SOURCE_REFERENCE_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.SpecialTerms)
                .HasColumnName("SPECIAL_TERMS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.TempExprId)
                .HasColumnName("TEMP_EXPR_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.TimeTransparency)
                .HasColumnName("TIME_TRANSPARENCY")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.TotalMilliSecondsAllowed).HasColumnName("TOTAL_MILLI_SECONDS_ALLOWED");

            entity.Property(e => e.TotalMoneyAllowed)
                .HasColumnName("TOTAL_MONEY_ALLOWED")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.UniversalId)
                .HasColumnName("UNIVERSAL_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.WorkEffortName)
                .HasColumnName("WORK_EFFORT_NAME")
                .HasColumnType("varchar(100)");

            entity.Property(e => e.WorkEffortParentId)
                .HasColumnName("WORK_EFFORT_PARENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WorkEffortPurposeTypeId)
                .HasColumnName("WORK_EFFORT_PURPOSE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WorkEffortTypeId)
                .HasColumnName("WORK_EFFORT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.AccommodationMap)
                .WithMany(p => p.WorkEfforts)
                .HasForeignKey(d => d.AccommodationMapId)
                .HasConstraintName("WK_EFFRT_ACC_MAP");

            entity.HasOne(d => d.AccommodationSpot)
                .WithMany(p => p.WorkEfforts)
                .HasForeignKey(d => d.AccommodationSpotId)
                .HasConstraintName("WK_EFFRT_ACC_SPOT");

            entity.HasOne(d => d.CurrentStatus)
                .WithMany(p => p.WorkEfforts)
                .HasForeignKey(d => d.CurrentStatusId)
                .HasConstraintName("WK_EFFRT_CURSTTS");

            entity.HasOne(d => d.EstimateCalcMethodNavigation)
                .WithMany(p => p.WorkEfforts)
                .HasForeignKey(d => d.EstimateCalcMethod)
                .HasConstraintName("WK_EFFRT_CUS_MET");

            entity.HasOne(d => d.Facility)
                .WithMany(p => p.WorkEfforts)
                .HasForeignKey(d => d.FacilityId)
                .HasConstraintName("WK_EFFRT_FACILITY");

            entity.HasOne(d => d.FixedAsset)
                .WithMany(p => p.WorkEfforts)
                .HasForeignKey(d => d.FixedAssetId)
                .HasConstraintName("WK_EFFRT_FXDASST");

            entity.HasOne(d => d.MoneyUom)
                .WithMany(p => p.WorkEfforts)
                .HasForeignKey(d => d.MoneyUomId)
                .HasConstraintName("WK_EFFRT_MON_UOM");

            entity.HasOne(d => d.Note)
                .WithMany(p => p.WorkEfforts)
                .HasForeignKey(d => d.NoteId)
                .HasConstraintName("WK_EFFRT_NOTE");

            entity.HasOne(d => d.RecurrenceInfo)
                .WithMany(p => p.WorkEfforts)
                .HasForeignKey(d => d.RecurrenceInfoId)
                .HasConstraintName("WK_EFFRT_RECINFO");

            entity.HasOne(d => d.RuntimeData)
                .WithMany(p => p.WorkEfforts)
                .HasForeignKey(d => d.RuntimeDataId)
                .HasConstraintName("WK_EFFRT_RNTMDTA");

            entity.HasOne(d => d.ScopeEnum)
                .WithMany(p => p.WorkEfforts)
                .HasForeignKey(d => d.ScopeEnumId)
                .HasConstraintName("WK_EFFRT_SC_ENUM");

            entity.HasOne(d => d.TempExpr)
                .WithMany(p => p.WorkEfforts)
                .HasForeignKey(d => d.TempExprId)
                .HasConstraintName("WK_EFFRT_TEMPEXPR");

            entity.HasOne(d => d.WorkEffortParent)
                .WithMany(p => p.InverseWorkEffortParent)
                .HasForeignKey(d => d.WorkEffortParentId)
                .HasConstraintName("WK_EFFRT_PARENT");

            entity.HasOne(d => d.WorkEffortPurposeType)
                .WithMany(p => p.WorkEfforts)
                .HasForeignKey(d => d.WorkEffortPurposeTypeId)
                .HasConstraintName("WK_EFFRT_PRPTYP");

            entity.HasOne(d => d.WorkEffortType)
                .WithMany(p => p.WorkEfforts)
                .HasForeignKey(d => d.WorkEffortTypeId)
                .HasConstraintName("WK_EFFRT_TYPE");
        });

        modelBuilder.Entity<WorkEffortAssoc>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortIdFrom, e.WorkEffortIdTo, e.WorkEffortAssocTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("WORK_EFFORT_ASSOC");


            entity.HasIndex(e => e.WorkEffortAssocTypeId)
                .HasName("WK_EFFRTASSC_TYP");

            entity.HasIndex(e => e.WorkEffortIdFrom)
                .HasName("WK_EFFRTASSC_FWE");

            entity.HasIndex(e => e.WorkEffortIdTo)
                .HasName("WK_EFFRTASSC_TWE");

            entity.Property(e => e.WorkEffortIdFrom)
                .HasColumnName("WORK_EFFORT_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WorkEffortIdTo)
                .HasColumnName("WORK_EFFORT_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WorkEffortAssocTypeId)
                .HasColumnName("WORK_EFFORT_ASSOC_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.SequenceNum)
                .HasColumnName("SEQUENCE_NUM")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.WorkEffortAssocType)
                .WithMany(p => p.WorkEffortAssocs)
                .HasForeignKey(d => d.WorkEffortAssocTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WK_EFFRTASSC_TYP");

            entity.HasOne(d => d.WorkEffortIdFromNavigation)
                .WithMany(p => p.WorkEffortAssocWorkEffortIdFromNavigations)
                .HasForeignKey(d => d.WorkEffortIdFrom)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WK_EFFRTASSC_FWE");

            entity.HasOne(d => d.WorkEffortIdToNavigation)
                .WithMany(p => p.WorkEffortAssocWorkEffortIdToNavigations)
                .HasForeignKey(d => d.WorkEffortIdTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WK_EFFRTASSC_TWE");
        });

        modelBuilder.Entity<WorkEffortAssocAttribute>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortIdFrom, e.WorkEffortIdTo, e.WorkEffortAssocTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("WORK_EFFORT_ASSOC_ATTRIBUTE");


            entity.HasIndex(e => new { e.WorkEffortIdFrom, e.WorkEffortIdTo, e.WorkEffortAssocTypeId, e.FromDate })
                .HasName("WK_EFFRTASSC_ATTR");

            entity.Property(e => e.WorkEffortIdFrom)
                .HasColumnName("WORK_EFFORT_ID_FROM")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WorkEffortIdTo)
                .HasColumnName("WORK_EFFORT_ID_TO")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WorkEffortAssocTypeId)
                .HasColumnName("WORK_EFFORT_ASSOC_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.WorkEffortAssoc)
                .WithMany(p => p.WorkEffortAssocAttributes)
                .HasForeignKey(d => new
                    { d.WorkEffortIdFrom, d.WorkEffortIdTo, d.WorkEffortAssocTypeId, d.FromDate })
                .HasConstraintName("WK_EFFRTASSC_ATTR");
        });

        modelBuilder.Entity<WorkEffortAssocType>(entity =>
        {
            entity.ToTable("WORK_EFFORT_ASSOC_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("WK_EFFRTASSC_TPAR");

            entity.Property(e => e.WorkEffortAssocTypeId)
                .HasColumnName("WORK_EFFORT_ASSOC_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("WK_EFFRTASSC_TPAR");
        });

        modelBuilder.Entity<WorkEffortAssocTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortAssocTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("WORK_EFFORT_ASSOC_TYPE_ATTR");


            entity.HasIndex(e => e.WorkEffortAssocTypeId)
                .HasName("WK_EFFRTASSC_TATR");

            entity.Property(e => e.WorkEffortAssocTypeId)
                .HasColumnName("WORK_EFFORT_ASSOC_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.WorkEffortAssocType)
                .WithMany(p => p.WorkEffortAssocTypeAttrs)
                .HasForeignKey(d => d.WorkEffortAssocTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WK_EFFRTASSC_TATR");
        });

        modelBuilder.Entity<WorkEffortAttribute>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("WORK_EFFORT_ATTRIBUTE");


            entity.HasIndex(e => e.WorkEffortId)
                .HasName("WK_EFFRT_ATTR_WE");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.AttrDescription)
                .HasColumnName("ATTR_DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.AttrValue)
                .HasColumnName("ATTR_VALUE")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.WorkEffortAttributes)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WK_EFFRT_ATTR_WE");
        });

        modelBuilder.Entity<WorkEffortBilling>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortId, e.InvoiceId, e.InvoiceItemSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("WORK_EFFORT_BILLING");


            entity.HasIndex(e => e.WorkEffortId)
                .HasName("WK_EFFBLNG_WEFF");

            entity.HasIndex(e => new { e.InvoiceId, e.InvoiceItemSeqId })
                .HasName("WK_EFFBLNG_INVITM");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceId)
                .HasColumnName("INVOICE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InvoiceItemSeqId)
                .HasColumnName("INVOICE_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Percentage).HasColumnName("PERCENTAGE");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.WorkEffortBillings)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WK_EFFBLNG_WEFF");

            entity.HasOne(d => d.InvoiceI)
                .WithMany(p => p.WorkEffortBillings)
                .HasForeignKey(d => new { d.InvoiceId, d.InvoiceItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WK_EFFBLNG_INVITM");
        });

        modelBuilder.Entity<WorkEffortContactMechNew>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortId, e.ContactMechId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("WORK_EFFORT_CONTACT_MECH_NEW");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("WKEFF_CMECH_CMECH");


            entity.HasIndex(e => e.WorkEffortId)
                .HasName("WKEFF_CMECH_WKEFF");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.WorkEffortContactMechNews)
                .HasForeignKey(d => d.ContactMechId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_CMECH_CMECH");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.WorkEffortContactMechNews)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_CMECH_WKEFF");
        });

        modelBuilder.Entity<WorkEffortContent>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortId, e.ContentId, e.WorkEffortContentTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("WORK_EFFORT_CONTENT");

            entity.HasIndex(e => e.ContentId)
                .HasName("WKEFF_CNT_CNT");


            entity.HasIndex(e => e.WorkEffortContentTypeId)
                .HasName("WKEFF_CNT_WCTP");

            entity.HasIndex(e => e.WorkEffortId)
                .HasName("WKEFF_CNT_WKEFF");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContentId)
                .HasColumnName("CONTENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WorkEffortContentTypeId)
                .HasColumnName("WORK_EFFORT_CONTENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Content)
                .WithMany(p => p.WorkEffortContents)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_CNT_CNT");

            entity.HasOne(d => d.WorkEffortContentType)
                .WithMany(p => p.WorkEffortContents)
                .HasForeignKey(d => d.WorkEffortContentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_CNT_WCTP");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.WorkEffortContents)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_CNT_WKEFF");
        });

        modelBuilder.Entity<WorkEffortContentType>(entity =>
        {
            entity.ToTable("WORK_EFFORT_CONTENT_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("WEFFCTP_TP_PAR");

            entity.Property(e => e.WorkEffortContentTypeId)
                .HasColumnName("WORK_EFFORT_CONTENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("WEFFCTP_TP_PAR");
        });

        modelBuilder.Entity<WorkEffortCostCalc>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortId, e.CostComponentTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("WORK_EFFORT_COST_CALC");

            entity.HasIndex(e => e.CostComponentCalcId)
                .HasName("WK_EFFRT_COS_CCC");

            entity.HasIndex(e => e.CostComponentTypeId)
                .HasName("WK_EFFRT_COS_CCT");


            entity.HasIndex(e => e.WorkEffortId)
                .HasName("WK_EFFRT_COS_WEF");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CostComponentTypeId)
                .HasColumnName("COST_COMPONENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CostComponentCalcId)
                .HasColumnName("COST_COMPONENT_CALC_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.CostComponentCalc)
                .WithMany(p => p.WorkEffortCostCalcs)
                .HasForeignKey(d => d.CostComponentCalcId)
                .HasConstraintName("WK_EFFRT_COS_CCC");

            entity.HasOne(d => d.CostComponentType)
                .WithMany(p => p.WorkEffortCostCalcs)
                .HasForeignKey(d => d.CostComponentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WK_EFFRT_COS_CCT");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.WorkEffortCostCalcs)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WK_EFFRT_COS_WEF");
        });

        modelBuilder.Entity<WorkEffortDeliverableProd>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortId, e.DeliverableId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("WORK_EFFORT_DELIVERABLE_PROD");


            entity.HasIndex(e => e.DeliverableId)
                .HasName("WKEFF_DELPRD_DEL");


            entity.HasIndex(e => e.WorkEffortId)
                .HasName("WKEFF_DELPRD_WEFF");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.DeliverableId)
                .HasColumnName("DELIVERABLE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.Deliverable)
                .WithMany(p => p.WorkEffortDeliverableProds)
                .HasForeignKey(d => d.DeliverableId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_DELPRD_DEL");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.WorkEffortDeliverableProds)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_DELPRD_WEFF");
        });

        modelBuilder.Entity<WorkEffortEventReminder>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortId, e.SequenceId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("WORK_EFFORT_EVENT_REMINDER");

            entity.HasIndex(e => e.ContactMechId)
                .HasName("WE_EVENT_REMIND_CM");


            entity.HasIndex(e => e.PartyId)
                .HasName("WE_EVENT_REMIND_PY");

            entity.HasIndex(e => e.WorkEffortId)
                .HasName("WE_EVENT_REMIND_WE");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SequenceId)
                .HasColumnName("SEQUENCE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ContactMechId)
                .HasColumnName("CONTACT_MECH_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.CurrentCount)
                .HasColumnName("CURRENT_COUNT")
                .HasColumnType("decimal(20,0)");


            entity.Property(e => e.LocaleId)
                .HasColumnName("LOCALE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ReminderDateTime)
                .HasColumnName("REMINDER_DATE_TIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.ReminderOffset)
                .HasColumnName("REMINDER_OFFSET")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.RepeatCount)
                .HasColumnName("REPEAT_COUNT")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.RepeatInterval)
                .HasColumnName("REPEAT_INTERVAL")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.TimeZoneId)
                .HasColumnName("TIME_ZONE_ID")
                .HasColumnType("varchar(60)");

            entity.HasOne(d => d.ContactMech)
                .WithMany(p => p.WorkEffortEventReminders)
                .HasForeignKey(d => d.ContactMechId)
                .HasConstraintName("WE_EVENT_REMIND_CM");

            entity.HasOne(d => d.Party)
                .WithMany(p => p.WorkEffortEventReminders)
                .HasForeignKey(d => d.PartyId)
                .HasConstraintName("WE_EVENT_REMIND_PY");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.WorkEffortEventReminders)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WE_EVENT_REMIND_WE");
        });

        modelBuilder.Entity<WorkEffortFixedAssetAssign>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortId, e.FixedAssetId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("WORK_EFFORT_FIXED_ASSET_ASSIGN");

            entity.HasIndex(e => e.AvailabilityStatusId)
                .HasName("WKEFF_FXDAA_AVAIL");


            entity.HasIndex(e => e.FixedAssetId)
                .HasName("WKEFF_FXDAA_FXAS");


            entity.HasIndex(e => e.StatusId)
                .HasName("WKEFF_FXDAA_STTS");

            entity.HasIndex(e => e.WorkEffortId)
                .HasName("WKEFF_FXDAA_WEFF");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FixedAssetId)
                .HasColumnName("FIXED_ASSET_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.AllocatedCost)
                .HasColumnName("ALLOCATED_COST")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.AvailabilityStatusId)
                .HasColumnName("AVAILABILITY_STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.AvailabilityStatus)
                .WithMany(p => p.WorkEffortFixedAssetAssignAvailabilityStatus)
                .HasForeignKey(d => d.AvailabilityStatusId)
                .HasConstraintName("WKEFF_FXDAA_AVAIL");

            entity.HasOne(d => d.FixedAsset)
                .WithMany(p => p.WorkEffortFixedAssetAssigns)
                .HasForeignKey(d => d.FixedAssetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_FXDAA_FXAS");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.WorkEffortFixedAssetAssignStatus)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("WKEFF_FXDAA_STTS");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.WorkEffortFixedAssetAssigns)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_FXDAA_WEFF");
        });

        modelBuilder.Entity<WorkEffortFixedAssetStd>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortId, e.FixedAssetTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("WORK_EFFORT_FIXED_ASSET_STD");


            entity.HasIndex(e => e.FixedAssetTypeId)
                .HasName("WKEFF_FASTD_FAT");


            entity.HasIndex(e => e.WorkEffortId)
                .HasName("WKEFF_FASTD_WEFF");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FixedAssetTypeId)
                .HasColumnName("FIXED_ASSET_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.EstimatedCost)
                .HasColumnName("ESTIMATED_COST")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.EstimatedDuration).HasColumnName("ESTIMATED_DURATION");

            entity.Property(e => e.EstimatedQuantity).HasColumnName("ESTIMATED_QUANTITY");


            entity.HasOne(d => d.FixedAssetType)
                .WithMany(p => p.WorkEffortFixedAssetStds)
                .HasForeignKey(d => d.FixedAssetTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_FASTD_FAT");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.WorkEffortFixedAssetStds)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_FASTD_WEFF");
        });

        modelBuilder.Entity<WorkEffortGoodStandard>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortId, e.ProductId, e.WorkEffortGoodStdTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("WORK_EFFORT_GOOD_STANDARD");


            entity.HasIndex(e => e.ProductId)
                .HasName("WKEFF_GDSTD_PROD");

            entity.HasIndex(e => e.StatusId)
                .HasName("WKEFF_GDSTD_STTS");

            entity.HasIndex(e => e.WorkEffortGoodStdTypeId)
                .HasName("WKEFF_GDSTD_TYPE");

            entity.HasIndex(e => e.WorkEffortId)
                .HasName("WKEFF_GDSTD_WEFF");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ProductId)
                .HasColumnName("PRODUCT_ID")
                .HasColumnType("char(36)");

            entity.Property(e => e.WorkEffortGoodStdTypeId)
                .HasColumnName("WORK_EFFORT_GOOD_STD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.EstimatedCost)
                .HasColumnName("ESTIMATED_COST")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.EstimatedQuantity).HasColumnName("ESTIMATED_QUANTITY");


            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Product)
                .WithMany(p => p.WorkEffortGoodStandards)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_GDSTD_PROD");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.WorkEffortGoodStandards)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("WKEFF_GDSTD_STTS");

            entity.HasOne(d => d.WorkEffortGoodStdType)
                .WithMany(p => p.WorkEffortGoodStandards)
                .HasForeignKey(d => d.WorkEffortGoodStdTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_GDSTD_TYPE");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.WorkEffortGoodStandards)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_GDSTD_WEFF");
        });

        modelBuilder.Entity<WorkEffortGoodStandardType>(entity =>
        {
            entity.HasKey(e => e.WorkEffortGoodStdTypeId)
                .HasName("PRIMARY");

            entity.ToTable("WORK_EFFORT_GOOD_STANDARD_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("WKEFF_GDSTD_TPAR");

            entity.Property(e => e.WorkEffortGoodStdTypeId)
                .HasColumnName("WORK_EFFORT_GOOD_STD_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("WKEFF_GDSTD_TPAR");
        });

        modelBuilder.Entity<WorkEffortIcalData>(entity =>
        {
            entity.HasKey(e => e.WorkEffortId)
                .HasName("PRIMARY");

            entity.ToTable("WORK_EFFORT_ICAL_DATA");


            entity.HasIndex(e => e.WorkEffortId)
                .HasName("WKEFF_ICAL_DATA");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.IcalData)
                .HasColumnName("ICAL_DATA")
                .HasColumnType("longtext");


            entity.HasOne(d => d.WorkEffort)
                .WithOne(p => p.WorkEffortIcalData)
                .HasForeignKey<WorkEffortIcalData>(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_ICAL_DATA");
        });

        modelBuilder.Entity<WorkEffortInventoryAssign>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortId, e.InventoryItemId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("WORK_EFFORT_INVENTORY_ASSIGN");


            entity.HasIndex(e => e.InventoryItemId)
                .HasName("WKEFF_INVAS_INVIT");


            entity.HasIndex(e => e.StatusId)
                .HasName("WKEFF_INVAS_STTS");

            entity.HasIndex(e => e.WorkEffortId)
                .HasName("WKEFF_INVAS_WEFF");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InventoryItemId)
                .HasColumnName("INVENTORY_ITEM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.InventoryItem)
                .WithMany(p => p.WorkEffortInventoryAssigns)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_INVAS_INVIT");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.WorkEffortInventoryAssigns)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("WKEFF_INVAS_STTS");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.WorkEffortInventoryAssigns)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_INVAS_WEFF");
        });

        modelBuilder.Entity<WorkEffortInventoryProduced>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortId, e.InventoryItemId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("WORK_EFFORT_INVENTORY_PRODUCED");


            entity.HasIndex(e => e.InventoryItemId)
                .HasName("WKEFF_INVPD_INVIT");


            entity.HasIndex(e => e.WorkEffortId)
                .HasName("WKEFF_INVPD_WEFF");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.InventoryItemId)
                .HasColumnName("INVENTORY_ITEM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.InventoryItem)
                .WithMany(p => p.WorkEffortInventoryProduceds)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_INVPD_INVIT");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.WorkEffortInventoryProduceds)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_INVPD_WEFF");
        });

        modelBuilder.Entity<WorkEffortKeyword>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortId, e.Keyword })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("WORK_EFFORT_KEYWORD");


            entity.HasIndex(e => e.Keyword)
                .HasName("WEFF_KWD_KWD");


            entity.HasIndex(e => e.WorkEffortId)
                .HasName("WEFF_KWD_WEFF");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Keyword)
                .HasColumnName("KEYWORD")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.RelevancyWeight)
                .HasColumnName("RELEVANCY_WEIGHT")
                .HasColumnType("decimal(20,0)");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.WorkEffortKeywords)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WEFF_KWD_WEFF");
        });

        modelBuilder.Entity<WorkEffortNote>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortId, e.NoteId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("WORK_EFFORT_NOTE");


            entity.HasIndex(e => e.NoteId)
                .HasName("WKEFF_NTE_NOTE");

            entity.HasIndex(e => e.WorkEffortId)
                .HasName("WKEFF_NTE_WEFF");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.NoteId)
                .HasColumnName("NOTE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.InternalNote)
                .HasColumnName("INTERNAL_NOTE")
                .HasColumnType("char(1)");


            entity.HasOne(d => d.Note)
                .WithMany(p => p.WorkEffortNotes)
                .HasForeignKey(d => d.NoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_NTE_NOTE");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.WorkEffortNotes)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_NTE_WEFF");
        });

        modelBuilder.Entity<WorkEffortPartyAssignment>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortId, e.PartyId, e.RoleTypeId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("WORK_EFFORT_PARTY_ASSIGNMENT");

            entity.HasIndex(e => e.AssignedByUserLoginId)
                .HasName("WKEFF_PA_ABUSRLOG");

            entity.HasIndex(e => e.AvailabilityStatusId)
                .HasName("WKEFF_PA_AVSTTS");


            entity.HasIndex(e => e.DelegateReasonEnumId)
                .HasName("WKEFF_PA_DELR_ENM");

            entity.HasIndex(e => e.ExpectationEnumId)
                .HasName("WKEFF_PA_EXP_ENUM");

            entity.HasIndex(e => e.FacilityId)
                .HasName("WKEFF_PA_FACILITY");


            entity.HasIndex(e => e.StatusId)
                .HasName("WKEFF_PA_STTS");

            entity.HasIndex(e => e.WorkEffortId)
                .HasName("WKEFF_PA_WE");

            entity.HasIndex(e => new { e.PartyId, e.RoleTypeId })
                .HasName("WKEFF_PA_PRTY_ROLE");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.PartyId)
                .HasColumnName("PARTY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.RoleTypeId)
                .HasColumnName("ROLE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.AssignedByUserLoginId)
                .HasColumnName("ASSIGNED_BY_USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.AvailabilityStatusId)
                .HasColumnName("AVAILABILITY_STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.Comments)
                .HasColumnName("COMMENTS")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.DelegateReasonEnumId)
                .HasColumnName("DELEGATE_REASON_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ExpectationEnumId)
                .HasColumnName("EXPECTATION_ENUM_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FacilityId)
                .HasColumnName("FACILITY_ID");


            entity.Property(e => e.MustRsvp)
                .HasColumnName("MUST_RSVP")
                .HasColumnType("char(1)");

            entity.Property(e => e.StatusDateTime)
                .HasColumnName("STATUS_DATE_TIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.AssignedByUserLogin)
                .WithMany(p => p.WorkEffortPartyAssignments)
                .HasForeignKey(d => d.AssignedByUserLoginId)
                .HasConstraintName("WKEFF_PA_ABUSRLOG");

            entity.HasOne(d => d.AvailabilityStatus)
                .WithMany(p => p.WorkEffortPartyAssignmentAvailabilityStatus)
                .HasForeignKey(d => d.AvailabilityStatusId)
                .HasConstraintName("WKEFF_PA_AVSTTS");

            entity.HasOne(d => d.DelegateReasonEnum)
                .WithMany(p => p.WorkEffortPartyAssignmentDelegateReasonEnums)
                .HasForeignKey(d => d.DelegateReasonEnumId)
                .HasConstraintName("WKEFF_PA_DELR_ENM");

            entity.HasOne(d => d.ExpectationEnum)
                .WithMany(p => p.WorkEffortPartyAssignmentExpectationEnums)
                .HasForeignKey(d => d.ExpectationEnumId)
                .HasConstraintName("WKEFF_PA_EXP_ENUM");

            entity.HasOne(d => d.Facility)
                .WithMany(p => p.WorkEffortPartyAssignments)
                .HasForeignKey(d => d.FacilityId)
                .HasConstraintName("WKEFF_PA_FACILITY");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.WorkEffortPartyAssignmentStatus)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("WKEFF_PA_STTS");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.WorkEffortPartyAssignments)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_PA_WE");

            entity.HasOne(d => d.PartyRole)
                .WithMany(p => p.WorkEffortPartyAssignments)
                .HasForeignKey(d => new { d.PartyId, d.RoleTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_PA_PRTY_ROLE");
        });

        modelBuilder.Entity<WorkEffortPurposeType>(entity =>
        {
            entity.ToTable("WORK_EFFORT_PURPOSE_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("WK_EFFRT_PTYPE_PAR");

            entity.Property(e => e.WorkEffortPurposeTypeId)
                .HasColumnName("WORK_EFFORT_PURPOSE_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("WK_EFFRT_PTYPE_PAR");
        });

        modelBuilder.Entity<WorkEffortReview>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortId, e.UserLoginId, e.ReviewDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("WORK_EFFORT_REVIEW");


            entity.HasIndex(e => e.StatusId)
                .HasName("WEFF_REVIEW_STTS");

            entity.HasIndex(e => e.UserLoginId)
                .HasName("WEFF_REVIEW_UL");

            entity.HasIndex(e => e.WorkEffortId)
                .HasName("WEFF_REVIEW_WEFF");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.UserLoginId)
                .HasColumnName("USER_LOGIN_ID")
                .HasColumnType("varchar(250)");

            entity.Property(e => e.ReviewDate)
                .HasColumnName("REVIEW_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.PostedAnonymous)
                .HasColumnName("POSTED_ANONYMOUS")
                .HasColumnType("char(1)");

            entity.Property(e => e.Rating).HasColumnName("RATING");

            entity.Property(e => e.ReviewText)
                .HasColumnName("REVIEW_TEXT")
                .HasColumnType("longtext");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.WorkEffortReviews)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("WEFF_REVIEW_STTS");

            entity.HasOne(d => d.UserLogin)
                .WithMany(p => p.WorkEffortReviews)
                .HasForeignKey(d => d.UserLoginId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WEFF_REVIEW_UL");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.WorkEffortReviews)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WEFF_REVIEW_WEFF");
        });

        modelBuilder.Entity<WorkEffortSearchConstraint>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortSearchResultId, e.ConstraintSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("WORK_EFFORT_SEARCH_CONSTRAINT");


            entity.HasIndex(e => e.WorkEffortSearchResultId)
                .HasName("WEFF_SCHRSI_RES");

            entity.Property(e => e.WorkEffortSearchResultId)
                .HasColumnName("WORK_EFFORT_SEARCH_RESULT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ConstraintSeqId)
                .HasColumnName("CONSTRAINT_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AnyPrefix)
                .HasColumnName("ANY_PREFIX")
                .HasColumnType("char(1)");

            entity.Property(e => e.AnySuffix)
                .HasColumnName("ANY_SUFFIX")
                .HasColumnType("char(1)");

            entity.Property(e => e.ConstraintName)
                .HasColumnName("CONSTRAINT_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.HighValue)
                .HasColumnName("HIGH_VALUE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.IncludeSubWorkEfforts)
                .HasColumnName("INCLUDE_SUB_WORK_EFFORTS")
                .HasColumnType("char(1)");

            entity.Property(e => e.InfoString)
                .HasColumnName("INFO_STRING")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.IsAnd)
                .HasColumnName("IS_AND")
                .HasColumnType("char(1)");


            entity.Property(e => e.LowValue)
                .HasColumnName("LOW_VALUE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.RemoveStems)
                .HasColumnName("REMOVE_STEMS")
                .HasColumnType("char(1)");

            entity.HasOne(d => d.WorkEffortSearchResult)
                .WithMany(p => p.WorkEffortSearchConstraints)
                .HasForeignKey(d => d.WorkEffortSearchResultId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WEFF_SCHRSI_RES");
        });

        modelBuilder.Entity<WorkEffortSearchResult>(entity =>
        {
            entity.ToTable("WORK_EFFORT_SEARCH_RESULT");


            entity.Property(e => e.WorkEffortSearchResultId)
                .HasColumnName("WORK_EFFORT_SEARCH_RESULT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.IsAscending)
                .HasColumnName("IS_ASCENDING")
                .HasColumnType("char(1)");


            entity.Property(e => e.NumResults)
                .HasColumnName("NUM_RESULTS")
                .HasColumnType("decimal(20,0)");

            entity.Property(e => e.OrderByName)
                .HasColumnName("ORDER_BY_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.SearchDate)
                .HasColumnName("SEARCH_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.SecondsTotal).HasColumnName("SECONDS_TOTAL");

            entity.Property(e => e.VisitId)
                .HasColumnName("VISIT_ID")
                .HasColumnType("varchar(36)");
        });

        modelBuilder.Entity<WorkEffortSkillStandard>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortId, e.SkillTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("WORK_EFFORT_SKILL_STANDARD");


            entity.HasIndex(e => e.SkillTypeId)
                .HasName("WKEFF_SKLSTD_SKTP");

            entity.HasIndex(e => e.WorkEffortId)
                .HasName("WKEFF_SKLSTD_WEFF");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SkillTypeId)
                .HasColumnName("SKILL_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.EstimatedCost)
                .HasColumnName("ESTIMATED_COST")
                .HasColumnType("decimal(18,2)");

            entity.Property(e => e.EstimatedDuration).HasColumnName("ESTIMATED_DURATION");

            entity.Property(e => e.EstimatedNumPeople).HasColumnName("ESTIMATED_NUM_PEOPLE");


            entity.HasOne(d => d.SkillType)
                .WithMany(p => p.WorkEffortSkillStandards)
                .HasForeignKey(d => d.SkillTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_SKLSTD_SKTP");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.WorkEffortSkillStandards)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_SKLSTD_WEFF");
        });

        modelBuilder.Entity<WorkEffortStatu>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortId, e.StatusId, e.StatusDatetime })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("WORK_EFFORT_STATUS");


            entity.HasIndex(e => e.SetByUserLogin)
                .HasName("WKEFF_STTS_SB_UL");

            entity.HasIndex(e => e.StatusId)
                .HasName("WKEFF_STTS_STTS");

            entity.HasIndex(e => e.WorkEffortId)
                .HasName("WKEFF_STTS_WE");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusId)
                .HasColumnName("STATUS_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.StatusDatetime)
                .HasColumnName("STATUS_DATETIME")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Reason)
                .HasColumnName("REASON")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.SetByUserLogin)
                .HasColumnName("SET_BY_USER_LOGIN")
                .HasColumnType("varchar(250)");

            entity.HasOne(d => d.SetByUserLoginNavigation)
                .WithMany(p => p.WorkEffortStatus)
                .HasForeignKey(d => d.SetByUserLogin)
                .HasConstraintName("WKEFF_STTS_SB_UL");

            entity.HasOne(d => d.Status)
                .WithMany(p => p.WorkEffortStatus)
                .HasForeignKey(d => d.StatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_STTS_STTS");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.WorkEffortStatus)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_STTS_WE");
        });

        modelBuilder.Entity<WorkEffortSurveyAppl>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortId, e.SurveyId, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("WORK_EFFORT_SURVEY_APPL");


            entity.HasIndex(e => e.SurveyId)
                .HasName("WKEF_SURVAPL_PSSA");

            entity.HasIndex(e => e.WorkEffortId)
                .HasName("WKEF_SURVAPL_WKE");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.SurveyId)
                .HasColumnName("SURVEY_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ThruDate)
                .HasColumnName("THRU_DATE")
                .HasColumnType("datetime(6)");

            entity.HasOne(d => d.Survey)
                .WithMany(p => p.WorkEffortSurveyAppls)
                .HasForeignKey(d => d.SurveyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEF_SURVAPL_PSSA");

            entity.HasOne(d => d.SurveyNavigation)
                .WithMany(p => p.WorkEffortSurveyAppls)
                .HasForeignKey(d => d.SurveyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEF_SURVAPL_SVY");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.WorkEffortSurveyAppls)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEF_SURVAPL_WKE");
        });

        modelBuilder.Entity<WorkEffortTransBox>(entity =>
        {
            entity.HasKey(e => new { e.ProcessWorkEffortId, e.ToActivityId, e.TransitionId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("WORK_EFFORT_TRANS_BOX");


            entity.HasIndex(e => e.ProcessWorkEffortId)
                .HasName("WKEFF_TXBX_WE");

            entity.Property(e => e.ProcessWorkEffortId)
                .HasColumnName("PROCESS_WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.ToActivityId)
                .HasColumnName("TO_ACTIVITY_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.TransitionId)
                .HasColumnName("TRANSITION_ID")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.HasOne(d => d.ProcessWorkEffort)
                .WithMany(p => p.WorkEffortTransBoxes)
                .HasForeignKey(d => d.ProcessWorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WKEFF_TXBX_WE");
        });

        modelBuilder.Entity<WorkEffortType>(entity =>
        {
            entity.ToTable("WORK_EFFORT_TYPE");


            entity.HasIndex(e => e.ParentTypeId)
                .HasName("WK_EFFRT_TYPE_PAR");

            entity.Property(e => e.WorkEffortTypeId)
                .HasColumnName("WORK_EFFORT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.HasTable)
                .HasColumnName("HAS_TABLE")
                .HasColumnType("char(1)");


            entity.Property(e => e.ParentTypeId)
                .HasColumnName("PARENT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.ParentType)
                .WithMany(p => p.InverseParentType)
                .HasForeignKey(d => d.ParentTypeId)
                .HasConstraintName("WK_EFFRT_TYPE_PAR");
        });

        modelBuilder.Entity<WorkEffortTypeAttr>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortTypeId, e.AttrName })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("WORK_EFFORT_TYPE_ATTR");


            entity.HasIndex(e => e.WorkEffortTypeId)
                .HasName("WK_EFFRT_TYPE_ATR");

            entity.Property(e => e.WorkEffortTypeId)
                .HasColumnName("WORK_EFFORT_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.AttrName)
                .HasColumnName("ATTR_NAME")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");


            entity.HasOne(d => d.WorkEffortType)
                .WithMany(p => p.WorkEffortTypeAttrs)
                .HasForeignKey(d => d.WorkEffortTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WK_EFFRT_TYPE_ATR");
        });

        modelBuilder.Entity<WorkOrderItemFulfillment>(entity =>
        {
            entity.HasKey(e => new { e.WorkEffortId, e.OrderId, e.OrderItemSeqId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("WORK_ORDER_ITEM_FULFILLMENT");


            entity.HasIndex(e => e.OrderId)
                .HasName("WORDER_ITFMT_OHDR");

            entity.HasIndex(e => e.WorkEffortId)
                .HasName("WORDER_ITFMT_WEFRT");

            entity.HasIndex(e => new { e.OrderId, e.OrderItemSeqId })
                .HasName("WORDER_ITFMT_OITM");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderId)
                .HasColumnName("ORDER_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.OrderItemSeqId)
                .HasColumnName("ORDER_ITEM_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.ShipGroupSeqId)
                .HasColumnName("SHIP_GROUP_SEQ_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Order)
                .WithMany(p => p.WorkOrderItemFulfillments)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WORDER_ITFMT_OHDR");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.WorkOrderItemFulfillments)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WORDER_ITFMT_WEFRT");

            entity.HasOne(d => d.OrderI)
                .WithMany(p => p.WorkOrderItemFulfillments)
                .HasForeignKey(d => new { d.OrderId, d.OrderItemSeqId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WORDER_ITFMT_OITM");
        });

        modelBuilder.Entity<WorkReqFulfType>(entity =>
        {
            entity.ToTable("WORK_REQ_FULF_TYPE");


            entity.Property(e => e.WorkReqFulfTypeId)
                .HasColumnName("WORK_REQ_FULF_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.Description)
                .HasColumnName("DESCRIPTION")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<WorkRequirementFulfillment>(entity =>
        {
            entity.HasKey(e => new { e.RequirementId, e.WorkEffortId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("WORK_REQUIREMENT_FULFILLMENT");


            entity.HasIndex(e => e.RequirementId)
                .HasName("WORK_REQFL_REQ");

            entity.HasIndex(e => e.WorkEffortId)
                .HasName("WORK_REQFL_WEFF");

            entity.HasIndex(e => e.WorkReqFulfTypeId)
                .HasName("WORK_REQFL_WRFT");

            entity.Property(e => e.RequirementId)
                .HasColumnName("REQUIREMENT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.WorkEffortId)
                .HasColumnName("WORK_EFFORT_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.WorkReqFulfTypeId)
                .HasColumnName("WORK_REQ_FULF_TYPE_ID")
                .HasColumnType("varchar(36)");

            entity.HasOne(d => d.Requirement)
                .WithMany(p => p.WorkRequirementFulfillments)
                .HasForeignKey(d => d.RequirementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WORK_REQFL_REQ");

            entity.HasOne(d => d.WorkEffort)
                .WithMany(p => p.WorkRequirementFulfillments)
                .HasForeignKey(d => d.WorkEffortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WORK_REQFL_WEFF");

            entity.HasOne(d => d.WorkReqFulfType)
                .WithMany(p => p.WorkRequirementFulfillments)
                .HasForeignKey(d => d.WorkReqFulfTypeId)
                .HasConstraintName("WORK_REQFL_WRFT");
        });

        modelBuilder.Entity<X509IssuerProvision>(entity =>
        {
            entity.HasKey(e => e.CertProvisionId)
                .HasName("PRIMARY");

            entity.ToTable("X509_ISSUER_PROVISION");


            entity.Property(e => e.CertProvisionId)
                .HasColumnName("CERT_PROVISION_ID")
                .HasColumnType("varchar(36)");

            entity.Property(e => e.CityLocality)
                .HasColumnName("CITY_LOCALITY")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CommonName)
                .HasColumnName("COMMON_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.Country)
                .HasColumnName("COUNTRY")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.OrganizationName)
                .HasColumnName("ORGANIZATION_NAME")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.OrganizationalUnit)
                .HasColumnName("ORGANIZATIONAL_UNIT")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.SerialNumber)
                .HasColumnName("SERIAL_NUMBER")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.StateProvince)
                .HasColumnName("STATE_PROVINCE")
                .HasColumnType("varchar(255)");
        });

        modelBuilder.Entity<ZipSalesRuleLookup>(entity =>
        {
            entity.HasKey(e => new { e.StateCode, e.City, e.County, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("ZIP_SALES_RULE_LOOKUP");


            entity.Property(e => e.StateCode)
                .HasColumnName("STATE_CODE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.City)
                .HasColumnName("CITY")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.County)
                .HasColumnName("COUNTY")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.IdCode)
                .HasColumnName("ID_CODE")
                .HasColumnType("varchar(60)");


            entity.Property(e => e.ShipCond)
                .HasColumnName("SHIP_COND")
                .HasColumnType("varchar(255)");

            entity.Property(e => e.Taxable)
                .HasColumnName("TAXABLE")
                .HasColumnType("varchar(60)");
        });

        modelBuilder.Entity<ZipSalesTaxLookup>(entity =>
        {
            entity.HasKey(e => new { e.ZipCode, e.StateCode, e.City, e.County, e.FromDate })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0 });

            entity.ToTable("ZIP_SALES_TAX_LOOKUP");


            entity.Property(e => e.ZipCode)
                .HasColumnName("ZIP_CODE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.StateCode)
                .HasColumnName("STATE_CODE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.City)
                .HasColumnName("CITY")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.County)
                .HasColumnName("COUNTY")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.FromDate)
                .HasColumnName("FROM_DATE")
                .HasColumnType("datetime(6)");

            entity.Property(e => e.CityLocalSalesTax)
                .HasColumnName("CITY_LOCAL_SALES_TAX")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.CityLocalUseTax)
                .HasColumnName("CITY_LOCAL_USE_TAX")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.CitySalesTax)
                .HasColumnName("CITY_SALES_TAX")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.CityUseTax)
                .HasColumnName("CITY_USE_TAX")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ComboSalesTax)
                .HasColumnName("COMBO_SALES_TAX")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.ComboUseTax)
                .HasColumnName("COMBO_USE_TAX")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.CountyDefault)
                .HasColumnName("COUNTY_DEFAULT")
                .HasColumnType("char(1)");

            entity.Property(e => e.CountyFips)
                .HasColumnName("COUNTY_FIPS")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.CountyLocalSalesTax)
                .HasColumnName("COUNTY_LOCAL_SALES_TAX")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.CountyLocalUseTax)
                .HasColumnName("COUNTY_LOCAL_USE_TAX")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.CountySalesTax)
                .HasColumnName("COUNTY_SALES_TAX")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.CountyUseTax)
                .HasColumnName("COUNTY_USE_TAX")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.CreatedStamp)
                .HasColumnName("CREATED_STAMP")
                .HasColumnType("datetime(6)");


            entity.Property(e => e.GeneralDefault)
                .HasColumnName("GENERAL_DEFAULT")
                .HasColumnType("char(1)");

            entity.Property(e => e.GeoCode)
                .HasColumnName("GEO_CODE")
                .HasColumnType("varchar(60)");

            entity.Property(e => e.InsideCity)
                .HasColumnName("INSIDE_CITY")
                .HasColumnType("char(1)");


            entity.Property(e => e.StateSalesTax)
                .HasColumnName("STATE_SALES_TAX")
                .HasColumnType("decimal(18,6)");

            entity.Property(e => e.StateUseTax)
                .HasColumnName("STATE_USE_TAX")
                .HasColumnType("decimal(18,6)");
        });
    }
}