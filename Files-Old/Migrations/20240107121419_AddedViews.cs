using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional

namespace Persistence.Migrations
{
    /// <inheritdoc />
    public partial class AddedViews : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "ACCOMMODATION_CLASS",
                columns: table => new
                {
                    ACCOMMODATIONCLASSID = table.Column<string>(name: "ACCOMMODATION_CLASS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTCLASSID = table.Column<string>(name: "PARENT_CLASS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ACCOMMODATION_CLASS", x => x.ACCOMMODATIONCLASSID);
                    table.ForeignKey(
                        name: "ACCOMM_CLASS_PAR",
                        column: x => x.PARENTCLASSID,
                        principalTable: "ACCOMMODATION_CLASS",
                        principalColumn: "ACCOMMODATION_CLASS_ID");
                });

            migrationBuilder.CreateTable(
                name: "ACCOMMODATION_MAP_TYPE",
                columns: table => new
                {
                    ACCOMMODATIONMAPTYPEID = table.Column<string>(name: "ACCOMMODATION_MAP_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ACCOMMODATION_MAP_TYPE", x => x.ACCOMMODATIONMAPTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "ACCTG_TRANS_ENTRY_TYPE",
                columns: table => new
                {
                    ACCTGTRANSENTRYTYPEID = table.Column<string>(name: "ACCTG_TRANS_ENTRY_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ACCTG_TRANS_ENTRY_TYPE", x => x.ACCTGTRANSENTRYTYPEID);
                    table.ForeignKey(
                        name: "ACCTTXE_TYPE_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "ACCTG_TRANS_ENTRY_TYPE",
                        principalColumn: "ACCTG_TRANS_ENTRY_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ACCTG_TRANS_TYPE",
                columns: table => new
                {
                    ACCTGTRANSTYPEID = table.Column<string>(name: "ACCTG_TRANS_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ACCTG_TRANS_TYPE", x => x.ACCTGTRANSTYPEID);
                    table.ForeignKey(
                        name: "ACCTTX_TYPE_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "ACCTG_TRANS_TYPE",
                        principalColumn: "ACCTG_TRANS_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ADDRESS_MATCH_MAP",
                columns: table => new
                {
                    MAPKEY = table.Column<string>(name: "MAP_KEY", type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    MAPVALUE = table.Column<string>(name: "MAP_VALUE", type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ADDRESS_MATCH_MAP", x => new { x.MAPKEY, x.MAPVALUE });
                });

            migrationBuilder.CreateTable(
                name: "AGREEMENT_CONTENT_TYPE",
                columns: table => new
                {
                    AGREEMENTCONTENTTYPEID = table.Column<string>(name: "AGREEMENT_CONTENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AGREEMENT_CONTENT_TYPE", x => x.AGREEMENTCONTENTTYPEID);
                    table.ForeignKey(
                        name: "AGCT_TYP_PARENT",
                        column: x => x.PARENTTYPEID,
                        principalTable: "AGREEMENT_CONTENT_TYPE",
                        principalColumn: "AGREEMENT_CONTENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "AGREEMENT_ITEM_TYPE",
                columns: table => new
                {
                    AGREEMENTITEMTYPEID = table.Column<string>(name: "AGREEMENT_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AGREEMENT_ITEM_TYPE", x => x.AGREEMENTITEMTYPEID);
                    table.ForeignKey(
                        name: "AGRMNT_TYPEPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "AGREEMENT_ITEM_TYPE",
                        principalColumn: "AGREEMENT_ITEM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "AGREEMENT_TYPE",
                columns: table => new
                {
                    AGREEMENTTYPEID = table.Column<string>(name: "AGREEMENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AGREEMENT_TYPE", x => x.AGREEMENTTYPEID);
                    table.ForeignKey(
                        name: "AGRMNT_TYPE_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "AGREEMENT_TYPE",
                        principalColumn: "AGREEMENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ALLOCATION_PLAN_TYPE",
                columns: table => new
                {
                    PLANTYPEID = table.Column<string>(name: "PLAN_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ALLOCATION_PLAN_TYPE", x => x.PLANTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "ANNOTATIONS",
                columns: table => new
                {
                    AnnotationId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    XCoordinate = table.Column<float>(type: "real", nullable: false),
                    YCoordinate = table.Column<float>(type: "real", nullable: false),
                    Note = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedStamp = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CreatedStamp = table.Column<DateTime>(type: "datetime2", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ANNOTATIONS", x => x.AnnotationId);
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoles",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    PercentageAllowed = table.Column<int>(type: "int", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUsers",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    DisplayName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedStamp = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CreatedStamp = table.Column<DateTime>(type: "datetime2", nullable: true),
                    UserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedUserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    Email = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedEmail = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    EmailConfirmed = table.Column<bool>(type: "bit", nullable: false),
                    PasswordHash = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SecurityStamp = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PhoneNumber = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PhoneNumberConfirmed = table.Column<bool>(type: "bit", nullable: false),
                    TwoFactorEnabled = table.Column<bool>(type: "bit", nullable: false),
                    LockoutEnd = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    LockoutEnabled = table.Column<bool>(type: "bit", nullable: false),
                    AccessFailedCount = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUsers", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BENEFIT_TYPE",
                columns: table => new
                {
                    BENEFITTYPEID = table.Column<string>(name: "BENEFIT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    BENEFITNAME = table.Column<string>(name: "BENEFIT_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    EMPLOYERPAIDPERCENTAGE = table.Column<double>(name: "EMPLOYER_PAID_PERCENTAGE", type: "float", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BENEFIT_TYPE", x => x.BENEFITTYPEID);
                    table.ForeignKey(
                        name: "BEN_TYPE_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "BENEFIT_TYPE",
                        principalColumn: "BENEFIT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "BROWSER_TYPE",
                columns: table => new
                {
                    BROWSERTYPEID = table.Column<string>(name: "BROWSER_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    BROWSERNAME = table.Column<string>(name: "BROWSER_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    BROWSERVERSION = table.Column<string>(name: "BROWSER_VERSION", type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BROWSER_TYPE", x => x.BROWSERTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "BUDGET_ITEM_TYPE",
                columns: table => new
                {
                    BUDGETITEMTYPEID = table.Column<string>(name: "BUDGET_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BUDGET_ITEM_TYPE", x => x.BUDGETITEMTYPEID);
                    table.ForeignKey(
                        name: "BUDGET_ITM_TYPPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "BUDGET_ITEM_TYPE",
                        principalColumn: "BUDGET_ITEM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "BUDGET_REVIEW_RESULT_TYPE",
                columns: table => new
                {
                    BUDGETREVIEWRESULTTYPEID = table.Column<string>(name: "BUDGET_REVIEW_RESULT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BUDGET_REVIEW_RESULT_TYPE", x => x.BUDGETREVIEWRESULTTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "BUDGET_SCENARIO",
                columns: table => new
                {
                    BUDGETSCENARIOID = table.Column<string>(name: "BUDGET_SCENARIO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BUDGET_SCENARIO", x => x.BUDGETSCENARIOID);
                });

            migrationBuilder.CreateTable(
                name: "BUDGET_TYPE",
                columns: table => new
                {
                    BUDGETTYPEID = table.Column<string>(name: "BUDGET_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BUDGET_TYPE", x => x.BUDGETTYPEID);
                    table.ForeignKey(
                        name: "BUDGET_TYPE_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "BUDGET_TYPE",
                        principalColumn: "BUDGET_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "CATALINA_SESSION",
                columns: table => new
                {
                    SESSIONID = table.Column<string>(name: "SESSION_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    SESSIONSIZE = table.Column<int>(name: "SESSION_SIZE", type: "int", nullable: true),
                    SESSIONINFO = table.Column<byte[]>(name: "SESSION_INFO", type: "image", nullable: true),
                    ISVALID = table.Column<string>(name: "IS_VALID", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    MAXIDLE = table.Column<int>(name: "MAX_IDLE", type: "int", nullable: true),
                    LASTACCESSED = table.Column<int>(name: "LAST_ACCESSED", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CATALINA_SESSION", x => x.SESSIONID);
                });

            migrationBuilder.CreateTable(
                name: "CHARACTER_SET",
                columns: table => new
                {
                    CHARACTERSETID = table.Column<string>(name: "CHARACTER_SET_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CHARACTER_SET", x => x.CHARACTERSETID);
                });

            migrationBuilder.CreateTable(
                name: "COMM_CONTENT_ASSOC_TYPE",
                columns: table => new
                {
                    COMMCONTENTASSOCTYPEID = table.Column<string>(name: "COMM_CONTENT_ASSOC_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COMM_CONTENT_ASSOC_TYPE", x => x.COMMCONTENTASSOCTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "COMMUNICATION_EVENT_PRP_TYP",
                columns: table => new
                {
                    COMMUNICATIONEVENTPRPTYPID = table.Column<string>(name: "COMMUNICATION_EVENT_PRP_TYP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COMMUNICATION_EVENT_PRP_TYP", x => x.COMMUNICATIONEVENTPRPTYPID);
                    table.ForeignKey(
                        name: "COM_EVNT_PRP_TYP",
                        column: x => x.PARENTTYPEID,
                        principalTable: "COMMUNICATION_EVENT_PRP_TYP",
                        principalColumn: "COMMUNICATION_EVENT_PRP_TYP_ID");
                });

            migrationBuilder.CreateTable(
                name: "COMPONENT",
                columns: table => new
                {
                    COMPONENTNAME = table.Column<string>(name: "COMPONENT_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    ROOTLOCATION = table.Column<string>(name: "ROOT_LOCATION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COMPONENT", x => x.COMPONENTNAME);
                });

            migrationBuilder.CreateTable(
                name: "CONTACT_LIST_TYPE",
                columns: table => new
                {
                    CONTACTLISTTYPEID = table.Column<string>(name: "CONTACT_LIST_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTACT_LIST_TYPE", x => x.CONTACTLISTTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "CONTACT_MECH_PURPOSE_TYPE",
                columns: table => new
                {
                    CONTACTMECHPURPOSETYPEID = table.Column<string>(name: "CONTACT_MECH_PURPOSE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTACT_MECH_PURPOSE_TYPE", x => x.CONTACTMECHPURPOSETYPEID);
                });

            migrationBuilder.CreateTable(
                name: "CONTACT_MECH_TYPE",
                columns: table => new
                {
                    CONTACTMECHTYPEID = table.Column<string>(name: "CONTACT_MECH_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTACT_MECH_TYPE", x => x.CONTACTMECHTYPEID);
                    table.ForeignKey(
                        name: "CONT_MECH_TYP_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "CONTACT_MECH_TYPE",
                        principalColumn: "CONTACT_MECH_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "CONTAINER_TYPE",
                columns: table => new
                {
                    CONTAINERTYPEID = table.Column<string>(name: "CONTAINER_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTAINER_TYPE", x => x.CONTAINERTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "CONTENT_ASSOC_PREDICATE",
                columns: table => new
                {
                    CONTENTASSOCPREDICATEID = table.Column<string>(name: "CONTENT_ASSOC_PREDICATE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTENT_ASSOC_PREDICATE", x => x.CONTENTASSOCPREDICATEID);
                });

            migrationBuilder.CreateTable(
                name: "CONTENT_ASSOC_TYPE",
                columns: table => new
                {
                    CONTENTASSOCTYPEID = table.Column<string>(name: "CONTENT_ASSOC_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTENT_ASSOC_TYPE", x => x.CONTENTASSOCTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "CONTENT_OPERATION",
                columns: table => new
                {
                    CONTENTOPERATIONID = table.Column<string>(name: "CONTENT_OPERATION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTENT_OPERATION", x => x.CONTENTOPERATIONID);
                });

            migrationBuilder.CreateTable(
                name: "CONTENT_PURPOSE_TYPE",
                columns: table => new
                {
                    CONTENTPURPOSETYPEID = table.Column<string>(name: "CONTENT_PURPOSE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTENT_PURPOSE_TYPE", x => x.CONTENTPURPOSETYPEID);
                });

            migrationBuilder.CreateTable(
                name: "CONTENT_SEARCH_RESULT",
                columns: table => new
                {
                    CONTENTSEARCHRESULTID = table.Column<string>(name: "CONTENT_SEARCH_RESULT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    VISITID = table.Column<string>(name: "VISIT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERBYNAME = table.Column<string>(name: "ORDER_BY_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ISASCENDING = table.Column<string>(name: "IS_ASCENDING", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    NUMRESULTS = table.Column<int>(name: "NUM_RESULTS", type: "int", nullable: true),
                    SECONDSTOTAL = table.Column<double>(name: "SECONDS_TOTAL", type: "float", nullable: true),
                    SEARCHDATE = table.Column<DateTime>(name: "SEARCH_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTENT_SEARCH_RESULT", x => x.CONTENTSEARCHRESULTID);
                });

            migrationBuilder.CreateTable(
                name: "CONTENT_TYPE",
                columns: table => new
                {
                    CONTENTTYPEID = table.Column<string>(name: "CONTENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTENT_TYPE", x => x.CONTENTTYPEID);
                    table.ForeignKey(
                        name: "CNTNT_TYPE_PARENT",
                        column: x => x.PARENTTYPEID,
                        principalTable: "CONTENT_TYPE",
                        principalColumn: "CONTENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "COST_COMPONENT_TYPE",
                columns: table => new
                {
                    COSTCOMPONENTTYPEID = table.Column<string>(name: "COST_COMPONENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COST_COMPONENT_TYPE", x => x.COSTCOMPONENTTYPEID);
                    table.ForeignKey(
                        name: "COST_COMP_TYPE_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "COST_COMPONENT_TYPE",
                        principalColumn: "COST_COMPONENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "COUNTRY_CODE",
                columns: table => new
                {
                    COUNTRYCODE = table.Column<string>(name: "COUNTRY_CODE", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COUNTRYABBR = table.Column<string>(name: "COUNTRY_ABBR", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    COUNTRYNUMBER = table.Column<string>(name: "COUNTRY_NUMBER", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    COUNTRYNAME = table.Column<string>(name: "COUNTRY_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COUNTRY_CODE", x => x.COUNTRYCODE);
                });

            migrationBuilder.CreateTable(
                name: "CREDIT_CARD_TYPE_GL_ACCOUNT",
                columns: table => new
                {
                    CARDTYPE = table.Column<string>(name: "CARD_TYPE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ORGANIZATIONPARTYID = table.Column<string>(name: "ORGANIZATION_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GLACCOUNTID = table.Column<string>(name: "GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CREDIT_CARD_TYPE_GL_ACCOUNT", x => new { x.CARDTYPE, x.ORGANIZATIONPARTYID });
                });

            migrationBuilder.CreateTable(
                name: "CUSTOM_METHOD_TYPE",
                columns: table => new
                {
                    CUSTOMMETHODTYPEID = table.Column<string>(name: "CUSTOM_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CUSTOM_METHOD_TYPE", x => x.CUSTOMMETHODTYPEID);
                    table.ForeignKey(
                        name: "CME_TYPE_PARENT",
                        column: x => x.PARENTTYPEID,
                        principalTable: "CUSTOM_METHOD_TYPE",
                        principalColumn: "CUSTOM_METHOD_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "CUSTOM_SCREEN_TYPE",
                columns: table => new
                {
                    CUSTOMSCREENTYPEID = table.Column<string>(name: "CUSTOM_SCREEN_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CUSTOM_SCREEN_TYPE", x => x.CUSTOMSCREENTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "DATA_CATEGORY",
                columns: table => new
                {
                    DATACATEGORYID = table.Column<string>(name: "DATA_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTCATEGORYID = table.Column<string>(name: "PARENT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CATEGORYNAME = table.Column<string>(name: "CATEGORY_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DATA_CATEGORY", x => x.DATACATEGORYID);
                    table.ForeignKey(
                        name: "DATA_CAT_PARENT",
                        column: x => x.PARENTCATEGORYID,
                        principalTable: "DATA_CATEGORY",
                        principalColumn: "DATA_CATEGORY_ID");
                });

            migrationBuilder.CreateTable(
                name: "DATA_RESOURCE_TYPE",
                columns: table => new
                {
                    DATARESOURCETYPEID = table.Column<string>(name: "DATA_RESOURCE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DATA_RESOURCE_TYPE", x => x.DATARESOURCETYPEID);
                    table.ForeignKey(
                        name: "DATA_OBTYPE_PARENT",
                        column: x => x.PARENTTYPEID,
                        principalTable: "DATA_RESOURCE_TYPE",
                        principalColumn: "DATA_RESOURCE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "DATA_SOURCE_TYPE",
                columns: table => new
                {
                    DATASOURCETYPEID = table.Column<string>(name: "DATA_SOURCE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DATA_SOURCE_TYPE", x => x.DATASOURCETYPEID);
                });

            migrationBuilder.CreateTable(
                name: "DATA_TEMPLATE_TYPE",
                columns: table => new
                {
                    DATATEMPLATETYPEID = table.Column<string>(name: "DATA_TEMPLATE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    EXTENSION = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DATA_TEMPLATE_TYPE", x => x.DATATEMPLATETYPEID);
                });

            migrationBuilder.CreateTable(
                name: "DEDUCTION_TYPE",
                columns: table => new
                {
                    DEDUCTIONTYPEID = table.Column<string>(name: "DEDUCTION_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DEDUCTION_TYPE", x => x.DEDUCTIONTYPEID);
                    table.ForeignKey(
                        name: "DEDUCT_TYP_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "DEDUCTION_TYPE",
                        principalColumn: "DEDUCTION_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "DELIVERABLE_TYPE",
                columns: table => new
                {
                    DELIVERABLETYPEID = table.Column<string>(name: "DELIVERABLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DELIVERABLE_TYPE", x => x.DELIVERABLETYPEID);
                });

            migrationBuilder.CreateTable(
                name: "DOCUMENT_TYPE",
                columns: table => new
                {
                    DOCUMENTTYPEID = table.Column<string>(name: "DOCUMENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DOCUMENT_TYPE", x => x.DOCUMENTTYPEID);
                    table.ForeignKey(
                        name: "DOC_TYPE_PARENT",
                        column: x => x.PARENTTYPEID,
                        principalTable: "DOCUMENT_TYPE",
                        principalColumn: "DOCUMENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "EMAIL_ADDRESS_VERIFICATION",
                columns: table => new
                {
                    EMAILADDRESS = table.Column<string>(name: "EMAIL_ADDRESS", type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    VERIFYHASH = table.Column<string>(name: "VERIFY_HASH", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    EXPIREDATE = table.Column<DateTime>(name: "EXPIRE_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EMAIL_ADDRESS_VERIFICATION", x => x.EMAILADDRESS);
                });

            migrationBuilder.CreateTable(
                name: "EMPL_LEAVE_REASON_TYPE",
                columns: table => new
                {
                    EMPLLEAVEREASONTYPEID = table.Column<string>(name: "EMPL_LEAVE_REASON_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EMPL_LEAVE_REASON_TYPE", x => x.EMPLLEAVEREASONTYPEID);
                    table.ForeignKey(
                        name: "EMPL_REASON_TPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "EMPL_LEAVE_REASON_TYPE",
                        principalColumn: "EMPL_LEAVE_REASON_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "EMPL_LEAVE_TYPE",
                columns: table => new
                {
                    LEAVETYPEID = table.Column<string>(name: "LEAVE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EMPL_LEAVE_TYPE", x => x.LEAVETYPEID);
                    table.ForeignKey(
                        name: "EMPL_LEAVE_TPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "EMPL_LEAVE_TYPE",
                        principalColumn: "LEAVE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "EMPL_POSITION_CLASS_TYPE",
                columns: table => new
                {
                    EMPLPOSITIONCLASSTYPEID = table.Column<string>(name: "EMPL_POSITION_CLASS_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EMPL_POSITION_CLASS_TYPE", x => x.EMPLPOSITIONCLASSTYPEID);
                    table.ForeignKey(
                        name: "EMPL_CLS_TYP_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "EMPL_POSITION_CLASS_TYPE",
                        principalColumn: "EMPL_POSITION_CLASS_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "EMPL_POSITION_TYPE",
                columns: table => new
                {
                    EMPLPOSITIONTYPEID = table.Column<string>(name: "EMPL_POSITION_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EMPL_POSITION_TYPE", x => x.EMPLPOSITIONTYPEID);
                    table.ForeignKey(
                        name: "EMPL_POSI_TYP_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "EMPL_POSITION_TYPE",
                        principalColumn: "EMPL_POSITION_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "EMPLOYMENT_APP_SOURCE_TYPE",
                columns: table => new
                {
                    EMPLOYMENTAPPSOURCETYPEID = table.Column<string>(name: "EMPLOYMENT_APP_SOURCE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EMPLOYMENT_APP_SOURCE_TYPE", x => x.EMPLOYMENTAPPSOURCETYPEID);
                    table.ForeignKey(
                        name: "EMPL_APP_SRC_TYP",
                        column: x => x.PARENTTYPEID,
                        principalTable: "EMPLOYMENT_APP_SOURCE_TYPE",
                        principalColumn: "EMPLOYMENT_APP_SOURCE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ENTITY_AUDIT_LOG",
                columns: table => new
                {
                    AUDITHISTORYSEQID = table.Column<string>(name: "AUDIT_HISTORY_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CHANGEDENTITYNAME = table.Column<string>(name: "CHANGED_ENTITY_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CHANGEDFIELDNAME = table.Column<string>(name: "CHANGED_FIELD_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PKCOMBINEDVALUETEXT = table.Column<string>(name: "PK_COMBINED_VALUE_TEXT", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    OLDVALUETEXT = table.Column<string>(name: "OLD_VALUE_TEXT", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    NEWVALUETEXT = table.Column<string>(name: "NEW_VALUE_TEXT", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CHANGEDDATE = table.Column<DateTime>(name: "CHANGED_DATE", type: "datetime", nullable: true),
                    CHANGEDBYINFO = table.Column<string>(name: "CHANGED_BY_INFO", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CHANGEDSESSIONINFO = table.Column<string>(name: "CHANGED_SESSION_INFO", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ENTITY_AUDIT_LOG", x => x.AUDITHISTORYSEQID);
                });

            migrationBuilder.CreateTable(
                name: "ENTITY_GROUP",
                columns: table => new
                {
                    ENTITYGROUPID = table.Column<string>(name: "ENTITY_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ENTITYGROUPNAME = table.Column<string>(name: "ENTITY_GROUP_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ENTITY_GROUP", x => x.ENTITYGROUPID);
                });

            migrationBuilder.CreateTable(
                name: "ENTITY_KEY_STORE",
                columns: table => new
                {
                    KEYNAME = table.Column<string>(name: "KEY_NAME", type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    KEYTEXT = table.Column<string>(name: "KEY_TEXT", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ENTITY_KEY_STORE", x => x.KEYNAME);
                });

            migrationBuilder.CreateTable(
                name: "ENTITY_SYNC",
                columns: table => new
                {
                    ENTITYSYNCID = table.Column<string>(name: "ENTITY_SYNC_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    RUNSTATUSID = table.Column<string>(name: "RUN_STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTSUCCESSFULSYNCHTIME = table.Column<DateTime>(name: "LAST_SUCCESSFUL_SYNCH_TIME", type: "datetime", nullable: true),
                    LASTHISTORYSTARTDATE = table.Column<DateTime>(name: "LAST_HISTORY_START_DATE", type: "datetime", nullable: true),
                    PREOFFLINESYNCHTIME = table.Column<DateTime>(name: "PRE_OFFLINE_SYNCH_TIME", type: "datetime", nullable: true),
                    OFFLINESYNCSPLITMILLIS = table.Column<int>(name: "OFFLINE_SYNC_SPLIT_MILLIS", type: "int", nullable: true),
                    SYNCSPLITMILLIS = table.Column<int>(name: "SYNC_SPLIT_MILLIS", type: "int", nullable: true),
                    SYNCENDBUFFERMILLIS = table.Column<int>(name: "SYNC_END_BUFFER_MILLIS", type: "int", nullable: true),
                    MAXRUNNINGNOUPDATEMILLIS = table.Column<int>(name: "MAX_RUNNING_NO_UPDATE_MILLIS", type: "int", nullable: true),
                    TARGETSERVICENAME = table.Column<string>(name: "TARGET_SERVICE_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    TARGETDELEGATORNAME = table.Column<string>(name: "TARGET_DELEGATOR_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    KEEPREMOVEINFOHOURS = table.Column<double>(name: "KEEP_REMOVE_INFO_HOURS", type: "float", nullable: true),
                    FORPULLONLY = table.Column<string>(name: "FOR_PULL_ONLY", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    FORPUSHONLY = table.Column<string>(name: "FOR_PUSH_ONLY", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ENTITY_SYNC", x => x.ENTITYSYNCID);
                });

            migrationBuilder.CreateTable(
                name: "ENTITY_SYNC_REMOVE",
                columns: table => new
                {
                    ENTITYSYNCREMOVEID = table.Column<string>(name: "ENTITY_SYNC_REMOVE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRIMARYKEYREMOVED = table.Column<string>(name: "PRIMARY_KEY_REMOVED", type: "text", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ENTITY_SYNC_REMOVE", x => x.ENTITYSYNCREMOVEID);
                });

            migrationBuilder.CreateTable(
                name: "ENUMERATION_TYPE",
                columns: table => new
                {
                    ENUMTYPEID = table.Column<string>(name: "ENUM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ENUMERATION_TYPE", x => x.ENUMTYPEID);
                    table.ForeignKey(
                        name: "ENUM_TYPE_PARENT",
                        column: x => x.PARENTTYPEID,
                        principalTable: "ENUMERATION_TYPE",
                        principalColumn: "ENUM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "FACILITY_ASSOC_TYPE",
                columns: table => new
                {
                    FACILITYASSOCTYPEID = table.Column<string>(name: "FACILITY_ASSOC_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FACILITY_ASSOC_TYPE", x => x.FACILITYASSOCTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "FACILITY_CALENDAR_TYPE",
                columns: table => new
                {
                    FACILITYCALENDARTYPEID = table.Column<string>(name: "FACILITY_CALENDAR_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FACILITY_CALENDAR_TYPE", x => x.FACILITYCALENDARTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "FACILITY_GROUP_TYPE",
                columns: table => new
                {
                    FACILITYGROUPTYPEID = table.Column<string>(name: "FACILITY_GROUP_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FACILITY_GROUP_TYPE", x => x.FACILITYGROUPTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "FACILITY_TYPE",
                columns: table => new
                {
                    FACILITYTYPEID = table.Column<string>(name: "FACILITY_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FACILITY_TYPE", x => x.FACILITYTYPEID);
                    table.ForeignKey(
                        name: "FACILITY_TYPEPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "FACILITY_TYPE",
                        principalColumn: "FACILITY_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIN_ACCOUNT_TRANS_TYPE",
                columns: table => new
                {
                    FINACCOUNTTRANSTYPEID = table.Column<string>(name: "FIN_ACCOUNT_TRANS_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIN_ACCOUNT_TRANS_TYPE", x => x.FINACCOUNTTRANSTYPEID);
                    table.ForeignKey(
                        name: "FINACCT_TX_TYPPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "FIN_ACCOUNT_TRANS_TYPE",
                        principalColumn: "FIN_ACCOUNT_TRANS_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIXED_ASSET_IDENT_TYPE",
                columns: table => new
                {
                    FIXEDASSETIDENTTYPEID = table.Column<string>(name: "FIXED_ASSET_IDENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIXED_ASSET_IDENT_TYPE", x => x.FIXEDASSETIDENTTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "FIXED_ASSET_PRODUCT_TYPE",
                columns: table => new
                {
                    FIXEDASSETPRODUCTTYPEID = table.Column<string>(name: "FIXED_ASSET_PRODUCT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIXED_ASSET_PRODUCT_TYPE", x => x.FIXEDASSETPRODUCTTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "FIXED_ASSET_STD_COST_TYPE",
                columns: table => new
                {
                    FIXEDASSETSTDCOSTTYPEID = table.Column<string>(name: "FIXED_ASSET_STD_COST_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIXED_ASSET_STD_COST_TYPE", x => x.FIXEDASSETSTDCOSTTYPEID);
                    table.ForeignKey(
                        name: "FIXASTCO_TYPPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "FIXED_ASSET_STD_COST_TYPE",
                        principalColumn: "FIXED_ASSET_STD_COST_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIXED_ASSET_TYPE",
                columns: table => new
                {
                    FIXEDASSETTYPEID = table.Column<string>(name: "FIXED_ASSET_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIXED_ASSET_TYPE", x => x.FIXEDASSETTYPEID);
                    table.ForeignKey(
                        name: "FIXEDAST_TYPPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "FIXED_ASSET_TYPE",
                        principalColumn: "FIXED_ASSET_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "GEO_ASSOC_TYPE",
                columns: table => new
                {
                    GEOASSOCTYPEID = table.Column<string>(name: "GEO_ASSOC_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GEO_ASSOC_TYPE", x => x.GEOASSOCTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "GEO_TYPE",
                columns: table => new
                {
                    GEOTYPEID = table.Column<string>(name: "GEO_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GEO_TYPE", x => x.GEOTYPEID);
                    table.ForeignKey(
                        name: "GEO_TYPE_PARENT",
                        column: x => x.PARENTTYPEID,
                        principalTable: "GEO_TYPE",
                        principalColumn: "GEO_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "GL_ACCOUNT_CATEGORY_TYPE",
                columns: table => new
                {
                    GLACCOUNTCATEGORYTYPEID = table.Column<string>(name: "GL_ACCOUNT_CATEGORY_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GL_ACCOUNT_CATEGORY_TYPE", x => x.GLACCOUNTCATEGORYTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "GL_ACCOUNT_CLASS",
                columns: table => new
                {
                    GLACCOUNTCLASSID = table.Column<string>(name: "GL_ACCOUNT_CLASS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTCLASSID = table.Column<string>(name: "PARENT_CLASS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ISASSETCLASS = table.Column<string>(name: "IS_ASSET_CLASS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GL_ACCOUNT_CLASS", x => x.GLACCOUNTCLASSID);
                    table.ForeignKey(
                        name: "GLACTCLS_PAR",
                        column: x => x.PARENTCLASSID,
                        principalTable: "GL_ACCOUNT_CLASS",
                        principalColumn: "GL_ACCOUNT_CLASS_ID");
                });

            migrationBuilder.CreateTable(
                name: "GL_ACCOUNT_GROUP_TYPE",
                columns: table => new
                {
                    GLACCOUNTGROUPTYPEID = table.Column<string>(name: "GL_ACCOUNT_GROUP_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GL_ACCOUNT_GROUP_TYPE", x => x.GLACCOUNTGROUPTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "GL_ACCOUNT_TYPE",
                columns: table => new
                {
                    GLACCOUNTTYPEID = table.Column<string>(name: "GL_ACCOUNT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GL_ACCOUNT_TYPE", x => x.GLACCOUNTTYPEID);
                    table.ForeignKey(
                        name: "GLACTTY_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "GL_ACCOUNT_TYPE",
                        principalColumn: "GL_ACCOUNT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "GL_FISCAL_TYPE",
                columns: table => new
                {
                    GLFISCALTYPEID = table.Column<string>(name: "GL_FISCAL_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GL_FISCAL_TYPE", x => x.GLFISCALTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "GL_RESOURCE_TYPE",
                columns: table => new
                {
                    GLRESOURCETYPEID = table.Column<string>(name: "GL_RESOURCE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GL_RESOURCE_TYPE", x => x.GLRESOURCETYPEID);
                });

            migrationBuilder.CreateTable(
                name: "GL_XBRL_CLASS",
                columns: table => new
                {
                    GLXBRLCLASSID = table.Column<string>(name: "GL_XBRL_CLASS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTGLXBRLCLASSID = table.Column<string>(name: "PARENT_GL_XBRL_CLASS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GL_XBRL_CLASS", x => x.GLXBRLCLASSID);
                    table.ForeignKey(
                        name: "GL_XBRL_CLSPAR",
                        column: x => x.PARENTGLXBRLCLASSID,
                        principalTable: "GL_XBRL_CLASS",
                        principalColumn: "GL_XBRL_CLASS_ID");
                });

            migrationBuilder.CreateTable(
                name: "GOOD_IDENTIFICATION_TYPE",
                columns: table => new
                {
                    GOODIDENTIFICATIONTYPEID = table.Column<string>(name: "GOOD_IDENTIFICATION_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GOOD_IDENTIFICATION_TYPE", x => x.GOODIDENTIFICATIONTYPEID);
                    table.ForeignKey(
                        name: "GOOD_ID_TYPE_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "GOOD_IDENTIFICATION_TYPE",
                        principalColumn: "GOOD_IDENTIFICATION_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVENTORY_ITEM_LABEL_TYPE",
                columns: table => new
                {
                    INVENTORYITEMLABELTYPEID = table.Column<string>(name: "INVENTORY_ITEM_LABEL_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVENTORY_ITEM_LABEL_TYPE", x => x.INVENTORYITEMLABELTYPEID);
                    table.ForeignKey(
                        name: "INV_ITLT_TYPPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "INVENTORY_ITEM_LABEL_TYPE",
                        principalColumn: "INVENTORY_ITEM_LABEL_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVENTORY_ITEM_TYPE",
                columns: table => new
                {
                    INVENTORYITEMTYPEID = table.Column<string>(name: "INVENTORY_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVENTORY_ITEM_TYPE", x => x.INVENTORYITEMTYPEID);
                    table.ForeignKey(
                        name: "INV_ITEM_TYPPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "INVENTORY_ITEM_TYPE",
                        principalColumn: "INVENTORY_ITEM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVOICE_CONTENT_TYPE",
                columns: table => new
                {
                    INVOICECONTENTTYPEID = table.Column<string>(name: "INVOICE_CONTENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVOICE_CONTENT_TYPE", x => x.INVOICECONTENTTYPEID);
                    table.ForeignKey(
                        name: "INVCT_TYP_PARENT",
                        column: x => x.PARENTTYPEID,
                        principalTable: "INVOICE_CONTENT_TYPE",
                        principalColumn: "INVOICE_CONTENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVOICE_ITEM_ASSOC_TYPE",
                columns: table => new
                {
                    INVOICEITEMASSOCTYPEID = table.Column<string>(name: "INVOICE_ITEM_ASSOC_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVOICE_ITEM_ASSOC_TYPE", x => x.INVOICEITEMASSOCTYPEID);
                    table.ForeignKey(
                        name: "INITMASCTYP_PRNT",
                        column: x => x.PARENTTYPEID,
                        principalTable: "INVOICE_ITEM_ASSOC_TYPE",
                        principalColumn: "INVOICE_ITEM_ASSOC_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVOICE_TYPE",
                columns: table => new
                {
                    INVOICETYPEID = table.Column<string>(name: "INVOICE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVOICE_TYPE", x => x.INVOICETYPEID);
                    table.ForeignKey(
                        name: "INVOICE_TYPE_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "INVOICE_TYPE",
                        principalColumn: "INVOICE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "JAVA_RESOURCE",
                columns: table => new
                {
                    RESOURCENAME = table.Column<string>(name: "RESOURCE_NAME", type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    RESOURCEVALUE = table.Column<byte[]>(name: "RESOURCE_VALUE", type: "image", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_JAVA_RESOURCE", x => x.RESOURCENAME);
                });

            migrationBuilder.CreateTable(
                name: "JOB_INTERVIEW_TYPE",
                columns: table => new
                {
                    JOBINTERVIEWTYPEID = table.Column<string>(name: "JOB_INTERVIEW_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_JOB_INTERVIEW_TYPE", x => x.JOBINTERVIEWTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "LOT",
                columns: table => new
                {
                    LOTID = table.Column<string>(name: "LOT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CREATIONDATE = table.Column<DateTime>(name: "CREATION_DATE", type: "datetime", nullable: true),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    EXPIRATIONDATE = table.Column<DateTime>(name: "EXPIRATION_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LOT", x => x.LOTID);
                });

            migrationBuilder.CreateTable(
                name: "META_DATA_PREDICATE",
                columns: table => new
                {
                    METADATAPREDICATEID = table.Column<string>(name: "META_DATA_PREDICATE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_META_DATA_PREDICATE", x => x.METADATAPREDICATEID);
                });

            migrationBuilder.CreateTable(
                name: "MIME_TYPE",
                columns: table => new
                {
                    MIMETYPEID = table.Column<string>(name: "MIME_TYPE_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MIME_TYPE", x => x.MIMETYPEID);
                });

            migrationBuilder.CreateTable(
                name: "MRP_EVENT_TYPE",
                columns: table => new
                {
                    MRPEVENTTYPEID = table.Column<string>(name: "MRP_EVENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MRP_EVENT_TYPE", x => x.MRPEVENTTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "NEED_TYPE",
                columns: table => new
                {
                    NEEDTYPEID = table.Column<string>(name: "NEED_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NEED_TYPE", x => x.NEEDTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "ORDER_ADJUSTMENT_TYPE",
                columns: table => new
                {
                    ORDERADJUSTMENTTYPEID = table.Column<string>(name: "ORDER_ADJUSTMENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_ADJUSTMENT_TYPE", x => x.ORDERADJUSTMENTTYPEID);
                    table.ForeignKey(
                        name: "ORDER_ADJ_TYPPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "ORDER_ADJUSTMENT_TYPE",
                        principalColumn: "ORDER_ADJUSTMENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_BLACKLIST_TYPE",
                columns: table => new
                {
                    ORDERBLACKLISTTYPEID = table.Column<string>(name: "ORDER_BLACKLIST_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_BLACKLIST_TYPE", x => x.ORDERBLACKLISTTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "ORDER_CONTENT_TYPE",
                columns: table => new
                {
                    ORDERCONTENTTYPEID = table.Column<string>(name: "ORDER_CONTENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_CONTENT_TYPE", x => x.ORDERCONTENTTYPEID);
                    table.ForeignKey(
                        name: "ORDCT_TYP_PARENT",
                        column: x => x.PARENTTYPEID,
                        principalTable: "ORDER_CONTENT_TYPE",
                        principalColumn: "ORDER_CONTENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_DENYLIST_TYPE",
                columns: table => new
                {
                    ORDERDENYLISTTYPEID = table.Column<string>(name: "ORDER_DENYLIST_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_DENYLIST_TYPE", x => x.ORDERDENYLISTTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "ORDER_ITEM_ASSOC_TYPE",
                columns: table => new
                {
                    ORDERITEMASSOCTYPEID = table.Column<string>(name: "ORDER_ITEM_ASSOC_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_ITEM_ASSOC_TYPE", x => x.ORDERITEMASSOCTYPEID);
                    table.ForeignKey(
                        name: "ORDER_ITAS_TYPPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "ORDER_ITEM_ASSOC_TYPE",
                        principalColumn: "ORDER_ITEM_ASSOC_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_ITEM_TYPE",
                columns: table => new
                {
                    ORDERITEMTYPEID = table.Column<string>(name: "ORDER_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_ITEM_TYPE", x => x.ORDERITEMTYPEID);
                    table.ForeignKey(
                        name: "ORDER_ITEM_TYPPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "ORDER_ITEM_TYPE",
                        principalColumn: "ORDER_ITEM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_TYPE",
                columns: table => new
                {
                    ORDERTYPEID = table.Column<string>(name: "ORDER_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_TYPE", x => x.ORDERTYPEID);
                    table.ForeignKey(
                        name: "ORDER_TYPE_PARENT",
                        column: x => x.PARENTTYPEID,
                        principalTable: "ORDER_TYPE",
                        principalColumn: "ORDER_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_CLASSIFICATION_TYPE",
                columns: table => new
                {
                    PARTYCLASSIFICATIONTYPEID = table.Column<string>(name: "PARTY_CLASSIFICATION_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_CLASSIFICATION_TYPE", x => x.PARTYCLASSIFICATIONTYPEID);
                    table.ForeignKey(
                        name: "PARTY_CLASS_TYPPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "PARTY_CLASSIFICATION_TYPE",
                        principalColumn: "PARTY_CLASSIFICATION_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_CONTENT_TYPE",
                columns: table => new
                {
                    PARTYCONTENTTYPEID = table.Column<string>(name: "PARTY_CONTENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_CONTENT_TYPE", x => x.PARTYCONTENTTYPEID);
                    table.ForeignKey(
                        name: "PARTYCNT_TP_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "PARTY_CONTENT_TYPE",
                        principalColumn: "PARTY_CONTENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_IDENTIFICATION_TYPE",
                columns: table => new
                {
                    PARTYIDENTIFICATIONTYPEID = table.Column<string>(name: "PARTY_IDENTIFICATION_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_IDENTIFICATION_TYPE", x => x.PARTYIDENTIFICATIONTYPEID);
                    table.ForeignKey(
                        name: "PARTY_ID_TYPE_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "PARTY_IDENTIFICATION_TYPE",
                        principalColumn: "PARTY_IDENTIFICATION_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_QUAL_TYPE",
                columns: table => new
                {
                    PARTYQUALTYPEID = table.Column<string>(name: "PARTY_QUAL_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_QUAL_TYPE", x => x.PARTYQUALTYPEID);
                    table.ForeignKey(
                        name: "PARTY_QUAL_TPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "PARTY_QUAL_TYPE",
                        principalColumn: "PARTY_QUAL_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_TYPE",
                columns: table => new
                {
                    PARTYTYPEID = table.Column<string>(name: "PARTY_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_TYPE", x => x.PARTYTYPEID);
                    table.ForeignKey(
                        name: "PARTY_TYPE_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "PARTY_TYPE",
                        principalColumn: "PARTY_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAY_GRADE",
                columns: table => new
                {
                    PAYGRADEID = table.Column<string>(name: "PAY_GRADE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PAYGRADENAME = table.Column<string>(name: "PAY_GRADE_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAY_GRADE", x => x.PAYGRADEID);
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_CONTENT_TYPE",
                columns: table => new
                {
                    PAYMENTCONTENTTYPEID = table.Column<string>(name: "PAYMENT_CONTENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_CONTENT_TYPE", x => x.PAYMENTCONTENTTYPEID);
                    table.ForeignKey(
                        name: "PAYCT_TYP_PARENT",
                        column: x => x.PARENTTYPEID,
                        principalTable: "PAYMENT_CONTENT_TYPE",
                        principalColumn: "PAYMENT_CONTENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_GATEWAY_CONFIG_TYPE",
                columns: table => new
                {
                    PAYMENTGATEWAYCONFIGTYPEID = table.Column<string>(name: "PAYMENT_GATEWAY_CONFIG_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_GATEWAY_CONFIG_TYPE", x => x.PAYMENTGATEWAYCONFIGTYPEID);
                    table.ForeignKey(
                        name: "PGCT_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "PAYMENT_GATEWAY_CONFIG_TYPE",
                        principalColumn: "PAYMENT_GATEWAY_CONFIG_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_GROUP_TYPE",
                columns: table => new
                {
                    PAYMENTGROUPTYPEID = table.Column<string>(name: "PAYMENT_GROUP_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_GROUP_TYPE", x => x.PAYMENTGROUPTYPEID);
                    table.ForeignKey(
                        name: "PAYMNTGP_TYP_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "PAYMENT_GROUP_TYPE",
                        principalColumn: "PAYMENT_GROUP_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_TYPE",
                columns: table => new
                {
                    PAYMENTTYPEID = table.Column<string>(name: "PAYMENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_TYPE", x => x.PAYMENTTYPEID);
                    table.ForeignKey(
                        name: "PAYMENT_TYPE_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "PAYMENT_TYPE",
                        principalColumn: "PAYMENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PERF_RATING_TYPE",
                columns: table => new
                {
                    PERFRATINGTYPEID = table.Column<string>(name: "PERF_RATING_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PERF_RATING_TYPE", x => x.PERFRATINGTYPEID);
                    table.ForeignKey(
                        name: "PERF_RATNG_TYP",
                        column: x => x.PARENTTYPEID,
                        principalTable: "PERF_RATING_TYPE",
                        principalColumn: "PERF_RATING_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PERF_REVIEW_ITEM_TYPE",
                columns: table => new
                {
                    PERFREVIEWITEMTYPEID = table.Column<string>(name: "PERF_REVIEW_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PERF_REVIEW_ITEM_TYPE", x => x.PERFREVIEWITEMTYPEID);
                    table.ForeignKey(
                        name: "PERF_REV_ITM_TYP",
                        column: x => x.PARENTTYPEID,
                        principalTable: "PERF_REVIEW_ITEM_TYPE",
                        principalColumn: "PERF_REVIEW_ITEM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PHYSICAL_INVENTORY",
                columns: table => new
                {
                    PHYSICALINVENTORYID = table.Column<string>(name: "PHYSICAL_INVENTORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PHYSICALINVENTORYDATE = table.Column<DateTime>(name: "PHYSICAL_INVENTORY_DATE", type: "datetime", nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    GENERALCOMMENTS = table.Column<string>(name: "GENERAL_COMMENTS", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PHYSICAL_INVENTORY", x => x.PHYSICALINVENTORYID);
                });

            migrationBuilder.CreateTable(
                name: "PLATFORM_TYPE",
                columns: table => new
                {
                    PLATFORMTYPEID = table.Column<string>(name: "PLATFORM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PLATFORMNAME = table.Column<string>(name: "PLATFORM_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PLATFORMVERSION = table.Column<string>(name: "PLATFORM_VERSION", type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PLATFORM_TYPE", x => x.PLATFORMTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "PORTAL_PORTLET",
                columns: table => new
                {
                    PORTALPORTLETID = table.Column<string>(name: "PORTAL_PORTLET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PORTLETNAME = table.Column<string>(name: "PORTLET_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SCREENNAME = table.Column<string>(name: "SCREEN_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SCREENLOCATION = table.Column<string>(name: "SCREEN_LOCATION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    EDITFORMNAME = table.Column<string>(name: "EDIT_FORM_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    EDITFORMLOCATION = table.Column<string>(name: "EDIT_FORM_LOCATION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SCREENSHOT = table.Column<string>(type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    SECURITYSERVICENAME = table.Column<string>(name: "SECURITY_SERVICE_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SECURITYMAINACTION = table.Column<string>(name: "SECURITY_MAIN_ACTION", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PORTAL_PORTLET", x => x.PORTALPORTLETID);
                });

            migrationBuilder.CreateTable(
                name: "PORTLET_CATEGORY",
                columns: table => new
                {
                    PORTLETCATEGORYID = table.Column<string>(name: "PORTLET_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PORTLET_CATEGORY", x => x.PORTLETCATEGORYID);
                });

            migrationBuilder.CreateTable(
                name: "PRIORITY_TYPE",
                columns: table => new
                {
                    PRIORITYTYPEID = table.Column<string>(name: "PRIORITY_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRIORITY_TYPE", x => x.PRIORITYTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "PROD_CATALOG",
                columns: table => new
                {
                    PRODCATALOGID = table.Column<string>(name: "PROD_CATALOG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CATALOGNAME = table.Column<string>(name: "CATALOG_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    USEQUICKADD = table.Column<string>(name: "USE_QUICK_ADD", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    STYLESHEET = table.Column<string>(name: "STYLE_SHEET", type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    HEADERLOGO = table.Column<string>(name: "HEADER_LOGO", type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    CONTENTPATHPREFIX = table.Column<string>(name: "CONTENT_PATH_PREFIX", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    TEMPLATEPATHPREFIX = table.Column<string>(name: "TEMPLATE_PATH_PREFIX", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    VIEWALLOWPERMREQD = table.Column<string>(name: "VIEW_ALLOW_PERM_REQD", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    PURCHASEALLOWPERMREQD = table.Column<string>(name: "PURCHASE_ALLOW_PERM_REQD", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PROD_CATALOG", x => x.PRODCATALOGID);
                });

            migrationBuilder.CreateTable(
                name: "PROD_CATALOG_CATEGORY_TYPE",
                columns: table => new
                {
                    PRODCATALOGCATEGORYTYPEID = table.Column<string>(name: "PROD_CATALOG_CATEGORY_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PROD_CATALOG_CATEGORY_TYPE", x => x.PRODCATALOGCATEGORYTYPEID);
                    table.ForeignKey(
                        name: "PROD_PCCT_TYPEPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "PROD_CATALOG_CATEGORY_TYPE",
                        principalColumn: "PROD_CATALOG_CATEGORY_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PROD_CONF_ITEM_CONTENT_TYPE",
                columns: table => new
                {
                    CONFITEMCONTENTTYPEID = table.Column<string>(name: "CONF_ITEM_CONTENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PROD_CONF_ITEM_CONTENT_TYPE", x => x.CONFITEMCONTENTTYPEID);
                    table.ForeignKey(
                        name: "PCICT_TYP_PARENT",
                        column: x => x.PARENTTYPEID,
                        principalTable: "PROD_CONF_ITEM_CONTENT_TYPE",
                        principalColumn: "CONF_ITEM_CONTENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_ASSOC_TYPE",
                columns: table => new
                {
                    PRODUCTASSOCTYPEID = table.Column<string>(name: "PRODUCT_ASSOC_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_ASSOC_TYPE", x => x.PRODUCTASSOCTYPEID);
                    table.ForeignKey(
                        name: "PROD_ASSOC_TYPEPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "PRODUCT_ASSOC_TYPE",
                        principalColumn: "PRODUCT_ASSOC_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_AVERAGE_COST_TYPE",
                columns: table => new
                {
                    PRODUCTAVERAGECOSTTYPEID = table.Column<string>(name: "PRODUCT_AVERAGE_COST_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_AVERAGE_COST_TYPE", x => x.PRODUCTAVERAGECOSTTYPEID);
                    table.ForeignKey(
                        name: "AVGCOST_TYPE_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "PRODUCT_AVERAGE_COST_TYPE",
                        principalColumn: "PRODUCT_AVERAGE_COST_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_CATEGORY_CONTENT_TYPE",
                columns: table => new
                {
                    PRODCATCONTENTTYPEID = table.Column<string>(name: "PROD_CAT_CONTENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_CATEGORY_CONTENT_TY", x => x.PRODCATCONTENTTYPEID);
                    table.ForeignKey(
                        name: "PRDCATCNT_TYP_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "PRODUCT_CATEGORY_CONTENT_TYPE",
                        principalColumn: "PROD_CAT_CONTENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_CATEGORY_TYPE",
                columns: table => new
                {
                    PRODUCTCATEGORYTYPEID = table.Column<string>(name: "PRODUCT_CATEGORY_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_CATEGORY_TYPE", x => x.PRODUCTCATEGORYTYPEID);
                    table.ForeignKey(
                        name: "PROD_CTGRY_TYPEPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "PRODUCT_CATEGORY_TYPE",
                        principalColumn: "PRODUCT_CATEGORY_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_CONFIG_ITEM",
                columns: table => new
                {
                    CONFIGITEMID = table.Column<string>(name: "CONFIG_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONFIGITEMTYPEID = table.Column<string>(name: "CONFIG_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CONFIGITEMNAME = table.Column<string>(name: "CONFIG_ITEM_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LONGDESCRIPTION = table.Column<string>(name: "LONG_DESCRIPTION", type: "text", nullable: true),
                    IMAGEURL = table.Column<string>(name: "IMAGE_URL", type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_CONFIG_ITEM", x => x.CONFIGITEMID);
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_CONTENT_TYPE",
                columns: table => new
                {
                    PRODUCTCONTENTTYPEID = table.Column<string>(name: "PRODUCT_CONTENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_CONTENT_TYPE", x => x.PRODUCTCONTENTTYPEID);
                    table.ForeignKey(
                        name: "PRDCT_TYP_PARENT",
                        column: x => x.PARENTTYPEID,
                        principalTable: "PRODUCT_CONTENT_TYPE",
                        principalColumn: "PRODUCT_CONTENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_FEATURE_APPL_TYPE",
                columns: table => new
                {
                    PRODUCTFEATUREAPPLTYPEID = table.Column<string>(name: "PRODUCT_FEATURE_APPL_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_FEATURE_APPL_TYPE", x => x.PRODUCTFEATUREAPPLTYPEID);
                    table.ForeignKey(
                        name: "PROD_FAPPL_TYPPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "PRODUCT_FEATURE_APPL_TYPE",
                        principalColumn: "PRODUCT_FEATURE_APPL_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_FEATURE_CATEGORY",
                columns: table => new
                {
                    PRODUCTFEATURECATEGORYID = table.Column<string>(name: "PRODUCT_FEATURE_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTCATEGORYID = table.Column<string>(name: "PARENT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_FEATURE_CATEGORY", x => x.PRODUCTFEATURECATEGORYID);
                    table.ForeignKey(
                        name: "PROD_FEAT_CAT_PAR",
                        column: x => x.PARENTCATEGORYID,
                        principalTable: "PRODUCT_FEATURE_CATEGORY",
                        principalColumn: "PRODUCT_FEATURE_CATEGORY_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_FEATURE_GROUP",
                columns: table => new
                {
                    PRODUCTFEATUREGROUPID = table.Column<string>(name: "PRODUCT_FEATURE_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_FEATURE_GROUP", x => x.PRODUCTFEATUREGROUPID);
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_FEATURE_IACTN_TYPE",
                columns: table => new
                {
                    PRODUCTFEATUREIACTNTYPEID = table.Column<string>(name: "PRODUCT_FEATURE_IACTN_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_FEATURE_IACTN_TYPE", x => x.PRODUCTFEATUREIACTNTYPEID);
                    table.ForeignKey(
                        name: "PROD_FICTN_TYPPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "PRODUCT_FEATURE_IACTN_TYPE",
                        principalColumn: "PRODUCT_FEATURE_IACTN_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_FEATURE_TYPE",
                columns: table => new
                {
                    PRODUCTFEATURETYPEID = table.Column<string>(name: "PRODUCT_FEATURE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_FEATURE_TYPE", x => x.PRODUCTFEATURETYPEID);
                    table.ForeignKey(
                        name: "PROD_FEAT_TYPPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "PRODUCT_FEATURE_TYPE",
                        principalColumn: "PRODUCT_FEATURE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_MAINT_TYPE",
                columns: table => new
                {
                    PRODUCTMAINTTYPEID = table.Column<string>(name: "PRODUCT_MAINT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_MAINT_TYPE", x => x.PRODUCTMAINTTYPEID);
                    table.ForeignKey(
                        name: "PRODMNT_TYPE_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "PRODUCT_MAINT_TYPE",
                        principalColumn: "PRODUCT_MAINT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_PRICE_ACTION_TYPE",
                columns: table => new
                {
                    PRODUCTPRICEACTIONTYPEID = table.Column<string>(name: "PRODUCT_PRICE_ACTION_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_PRICE_ACTION_TYPE", x => x.PRODUCTPRICEACTIONTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_PRICE_AUTO_NOTICE",
                columns: table => new
                {
                    PRODUCTPRICENOTICEID = table.Column<string>(name: "PRODUCT_PRICE_NOTICE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RUNDATE = table.Column<DateTime>(name: "RUN_DATE", type: "datetime", nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_PRICE_AUTO_NOTICE", x => x.PRODUCTPRICENOTICEID);
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_PRICE_PURPOSE",
                columns: table => new
                {
                    PRODUCTPRICEPURPOSEID = table.Column<string>(name: "PRODUCT_PRICE_PURPOSE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_PRICE_PURPOSE", x => x.PRODUCTPRICEPURPOSEID);
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_PRICE_RULE",
                columns: table => new
                {
                    PRODUCTPRICERULEID = table.Column<string>(name: "PRODUCT_PRICE_RULE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    RULENAME = table.Column<string>(name: "RULE_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ISSALE = table.Column<string>(name: "IS_SALE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_PRICE_RULE", x => x.PRODUCTPRICERULEID);
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_PRICE_TYPE",
                columns: table => new
                {
                    PRODUCTPRICETYPEID = table.Column<string>(name: "PRODUCT_PRICE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_PRICE_TYPE", x => x.PRODUCTPRICETYPEID);
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_SEARCH_RESULT",
                columns: table => new
                {
                    PRODUCTSEARCHRESULTID = table.Column<string>(name: "PRODUCT_SEARCH_RESULT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    VISITID = table.Column<string>(name: "VISIT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERBYNAME = table.Column<string>(name: "ORDER_BY_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ISASCENDING = table.Column<string>(name: "IS_ASCENDING", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    NUMRESULTS = table.Column<int>(name: "NUM_RESULTS", type: "int", nullable: true),
                    SECONDSTOTAL = table.Column<double>(name: "SECONDS_TOTAL", type: "float", nullable: true),
                    SEARCHDATE = table.Column<DateTime>(name: "SEARCH_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_SEARCH_RESULT", x => x.PRODUCTSEARCHRESULTID);
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_STORE_GROUP_TYPE",
                columns: table => new
                {
                    PRODUCTSTOREGROUPTYPEID = table.Column<string>(name: "PRODUCT_STORE_GROUP_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_STORE_GROUP_TYPE", x => x.PRODUCTSTOREGROUPTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_TYPE",
                columns: table => new
                {
                    PRODUCTTYPEID = table.Column<string>(name: "PRODUCT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ISPHYSICAL = table.Column<string>(name: "IS_PHYSICAL", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ISDIGITAL = table.Column<string>(name: "IS_DIGITAL", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_TYPE", x => x.PRODUCTTYPEID);
                    table.ForeignKey(
                        name: "PROD_TYPE_PARENT",
                        column: x => x.PARENTTYPEID,
                        principalTable: "PRODUCT_TYPE",
                        principalColumn: "PRODUCT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PROTOCOL_TYPE",
                columns: table => new
                {
                    PROTOCOLTYPEID = table.Column<string>(name: "PROTOCOL_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PROTOCOLNAME = table.Column<string>(name: "PROTOCOL_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PROTOCOL_TYPE", x => x.PROTOCOLTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "QUANTITY_BREAK_TYPE",
                columns: table => new
                {
                    QUANTITYBREAKTYPEID = table.Column<string>(name: "QUANTITY_BREAK_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QUANTITY_BREAK_TYPE", x => x.QUANTITYBREAKTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "QUOTE_TYPE",
                columns: table => new
                {
                    QUOTETYPEID = table.Column<string>(name: "QUOTE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QUOTE_TYPE", x => x.QUOTETYPEID);
                    table.ForeignKey(
                        name: "QUOTE_TYPE_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "QUOTE_TYPE",
                        principalColumn: "QUOTE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "RATE_TYPE",
                columns: table => new
                {
                    RATETYPEID = table.Column<string>(name: "RATE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RATE_TYPE", x => x.RATETYPEID);
                });

            migrationBuilder.CreateTable(
                name: "RECURRENCE_RULE",
                columns: table => new
                {
                    RECURRENCERULEID = table.Column<string>(name: "RECURRENCE_RULE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FREQUENCY = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    UNTILDATETIME = table.Column<DateTime>(name: "UNTIL_DATE_TIME", type: "datetime", nullable: true),
                    COUNTNUMBER = table.Column<int>(name: "COUNT_NUMBER", type: "int", nullable: true),
                    INTERVALNUMBER = table.Column<int>(name: "INTERVAL_NUMBER", type: "int", nullable: true),
                    BYSECONDLIST = table.Column<string>(name: "BY_SECOND_LIST", type: "text", nullable: true),
                    BYMINUTELIST = table.Column<string>(name: "BY_MINUTE_LIST", type: "text", nullable: true),
                    BYHOURLIST = table.Column<string>(name: "BY_HOUR_LIST", type: "text", nullable: true),
                    BYDAYLIST = table.Column<string>(name: "BY_DAY_LIST", type: "text", nullable: true),
                    BYMONTHDAYLIST = table.Column<string>(name: "BY_MONTH_DAY_LIST", type: "text", nullable: true),
                    BYYEARDAYLIST = table.Column<string>(name: "BY_YEAR_DAY_LIST", type: "text", nullable: true),
                    BYWEEKNOLIST = table.Column<string>(name: "BY_WEEK_NO_LIST", type: "text", nullable: true),
                    BYMONTHLIST = table.Column<string>(name: "BY_MONTH_LIST", type: "text", nullable: true),
                    BYSETPOSLIST = table.Column<string>(name: "BY_SET_POS_LIST", type: "text", nullable: true),
                    WEEKSTART = table.Column<string>(name: "WEEK_START", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    XNAME = table.Column<string>(name: "X_NAME", type: "text", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RECURRENCE_RULE", x => x.RECURRENCERULEID);
                });

            migrationBuilder.CreateTable(
                name: "REJECTION_REASON",
                columns: table => new
                {
                    REJECTIONID = table.Column<string>(name: "REJECTION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_REJECTION_REASON", x => x.REJECTIONID);
                });

            migrationBuilder.CreateTable(
                name: "REQUIREMENT_TYPE",
                columns: table => new
                {
                    REQUIREMENTTYPEID = table.Column<string>(name: "REQUIREMENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_REQUIREMENT_TYPE", x => x.REQUIREMENTTYPEID);
                    table.ForeignKey(
                        name: "REQ_TYPE_PARENT",
                        column: x => x.PARENTTYPEID,
                        principalTable: "REQUIREMENT_TYPE",
                        principalColumn: "REQUIREMENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "RESPONSIBILITY_TYPE",
                columns: table => new
                {
                    RESPONSIBILITYTYPEID = table.Column<string>(name: "RESPONSIBILITY_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RESPONSIBILITY_TYPE", x => x.RESPONSIBILITYTYPEID);
                    table.ForeignKey(
                        name: "RESPON_TYPE_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "RESPONSIBILITY_TYPE",
                        principalColumn: "RESPONSIBILITY_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "RETURN_ADJUSTMENT_TYPE",
                columns: table => new
                {
                    RETURNADJUSTMENTTYPEID = table.Column<string>(name: "RETURN_ADJUSTMENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RETURN_ADJUSTMENT_TYPE", x => x.RETURNADJUSTMENTTYPEID);
                    table.ForeignKey(
                        name: "RETURN_ADJ_TYPPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "RETURN_ADJUSTMENT_TYPE",
                        principalColumn: "RETURN_ADJUSTMENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "RETURN_HEADER_TYPE",
                columns: table => new
                {
                    RETURNHEADERTYPEID = table.Column<string>(name: "RETURN_HEADER_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RETURN_HEADER_TYPE", x => x.RETURNHEADERTYPEID);
                    table.ForeignKey(
                        name: "RTHEAD_TYPE_PARENT",
                        column: x => x.PARENTTYPEID,
                        principalTable: "RETURN_HEADER_TYPE",
                        principalColumn: "RETURN_HEADER_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "RETURN_ITEM_TYPE",
                columns: table => new
                {
                    RETURNITEMTYPEID = table.Column<string>(name: "RETURN_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RETURN_ITEM_TYPE", x => x.RETURNITEMTYPEID);
                    table.ForeignKey(
                        name: "RETURN_ITEM_TYPPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "RETURN_ITEM_TYPE",
                        principalColumn: "RETURN_ITEM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "RETURN_REASON",
                columns: table => new
                {
                    RETURNREASONID = table.Column<string>(name: "RETURN_REASON_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SEQUENCEID = table.Column<string>(name: "SEQUENCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RETURN_REASON", x => x.RETURNREASONID);
                });

            migrationBuilder.CreateTable(
                name: "RETURN_TYPE",
                columns: table => new
                {
                    RETURNTYPEID = table.Column<string>(name: "RETURN_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SEQUENCEID = table.Column<string>(name: "SEQUENCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RETURN_TYPE", x => x.RETURNTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "ROLE_TYPE",
                columns: table => new
                {
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    IncludeInFilter = table.Column<bool>(type: "bit", nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ROLE_TYPE", x => x.ROLETYPEID);
                    table.ForeignKey(
                        name: "ROLE_TYPE_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "ROLE_TYPE",
                        principalColumn: "ROLE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "RUNTIME_DATA",
                columns: table => new
                {
                    RUNTIMEDATAID = table.Column<string>(name: "RUNTIME_DATA_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    RUNTIMEINFO = table.Column<string>(name: "RUNTIME_INFO", type: "text", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RUNTIME_DATA", x => x.RUNTIMEDATAID);
                });

            migrationBuilder.CreateTable(
                name: "SALE_TYPE",
                columns: table => new
                {
                    SALETYPEID = table.Column<string>(name: "SALE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SALE_TYPE", x => x.SALETYPEID);
                });

            migrationBuilder.CreateTable(
                name: "SALES_OPPORTUNITY_STAGE",
                columns: table => new
                {
                    OPPORTUNITYSTAGEID = table.Column<string>(name: "OPPORTUNITY_STAGE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DEFAULTPROBABILITY = table.Column<decimal>(name: "DEFAULT_PROBABILITY", type: "decimal(18,6)", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SALES_OPPORTUNITY_STAGE", x => x.OPPORTUNITYSTAGEID);
                });

            migrationBuilder.CreateTable(
                name: "SECURITY_GROUP",
                columns: table => new
                {
                    GROUPID = table.Column<string>(name: "GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GROUPNAME = table.Column<string>(name: "GROUP_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SECURITY_GROUP", x => x.GROUPID);
                });

            migrationBuilder.CreateTable(
                name: "SECURITY_PERMISSION",
                columns: table => new
                {
                    PERMISSIONID = table.Column<string>(name: "PERMISSION_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SECURITY_PERMISSION", x => x.PERMISSIONID);
                });

            migrationBuilder.CreateTable(
                name: "SEGMENT_GROUP_TYPE",
                columns: table => new
                {
                    SEGMENTGROUPTYPEID = table.Column<string>(name: "SEGMENT_GROUP_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SEGMENT_GROUP_TYPE", x => x.SEGMENTGROUPTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "SEQUENCE_VALUE_ITEM",
                columns: table => new
                {
                    SEQNAME = table.Column<string>(name: "SEQ_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    SEQID = table.Column<int>(name: "SEQ_ID", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SEQUENCE_VALUE_ITEM", x => x.SEQNAME);
                });

            migrationBuilder.CreateTable(
                name: "SERVER_HIT_TYPE",
                columns: table => new
                {
                    HITTYPEID = table.Column<string>(name: "HIT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SERVER_HIT_TYPE", x => x.HITTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "SERVICE_SEMAPHORE",
                columns: table => new
                {
                    SERVICENAME = table.Column<string>(name: "SERVICE_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    LOCKEDBYINSTANCEID = table.Column<string>(name: "LOCKED_BY_INSTANCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LOCKTHREAD = table.Column<string>(name: "LOCK_THREAD", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LOCKTIME = table.Column<DateTime>(name: "LOCK_TIME", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SERVICE_SEMAPHORE", x => x.SERVICENAME);
                });

            migrationBuilder.CreateTable(
                name: "SETTLEMENT_TERM",
                columns: table => new
                {
                    SETTLEMENTTERMID = table.Column<string>(name: "SETTLEMENT_TERM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TERMNAME = table.Column<string>(name: "TERM_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TERMVALUE = table.Column<int>(name: "TERM_VALUE", type: "int", nullable: true),
                    UOMID = table.Column<string>(name: "UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SETTLEMENT_TERM", x => x.SETTLEMENTTERMID);
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT_CONTACT_MECH_TYPE",
                columns: table => new
                {
                    SHIPMENTCONTACTMECHTYPEID = table.Column<string>(name: "SHIPMENT_CONTACT_MECH_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT_CONTACT_MECH_TYPE", x => x.SHIPMENTCONTACTMECHTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT_GATEWAY_CONFIG_TYPE",
                columns: table => new
                {
                    SHIPMENTGATEWAYCONFTYPEID = table.Column<string>(name: "SHIPMENT_GATEWAY_CONF_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT_GATEWAY_CONFIG_TYP", x => x.SHIPMENTGATEWAYCONFTYPEID);
                    table.ForeignKey(
                        name: "SGCT_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "SHIPMENT_GATEWAY_CONFIG_TYPE",
                        principalColumn: "SHIPMENT_GATEWAY_CONF_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT_METHOD_TYPE",
                columns: table => new
                {
                    SHIPMENTMETHODTYPEID = table.Column<string>(name: "SHIPMENT_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT_METHOD_TYPE", x => x.SHIPMENTMETHODTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT_TYPE",
                columns: table => new
                {
                    SHIPMENTTYPEID = table.Column<string>(name: "SHIPMENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT_TYPE", x => x.SHIPMENTTYPEID);
                    table.ForeignKey(
                        name: "SHPMNT_TYPPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "SHIPMENT_TYPE",
                        principalColumn: "SHIPMENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "SHOPPING_LIST_TYPE",
                columns: table => new
                {
                    SHOPPINGLISTTYPEID = table.Column<string>(name: "SHOPPING_LIST_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHOPPING_LIST_TYPE", x => x.SHOPPINGLISTTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "SKILL_TYPE",
                columns: table => new
                {
                    SKILLTYPEID = table.Column<string>(name: "SKILL_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SKILL_TYPE", x => x.SKILLTYPEID);
                    table.ForeignKey(
                        name: "PARNT_SKILL_TYPE",
                        column: x => x.PARENTTYPEID,
                        principalTable: "SKILL_TYPE",
                        principalColumn: "SKILL_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "STANDARD_LANGUAGE",
                columns: table => new
                {
                    STANDARDLANGUAGEID = table.Column<string>(name: "STANDARD_LANGUAGE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LANGCODE3T = table.Column<string>(name: "LANG_CODE3T", type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    LANGCODE3B = table.Column<string>(name: "LANG_CODE3B", type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    LANGCODE2 = table.Column<string>(name: "LANG_CODE2", type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    LANGNAME = table.Column<string>(name: "LANG_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LANGFAMILY = table.Column<string>(name: "LANG_FAMILY", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LANGCHARSET = table.Column<string>(name: "LANG_CHARSET", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_STANDARD_LANGUAGE", x => x.STANDARDLANGUAGEID);
                });

            migrationBuilder.CreateTable(
                name: "STATUS_TYPE",
                columns: table => new
                {
                    STATUSTYPEID = table.Column<string>(name: "STATUS_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_STATUS_TYPE", x => x.STATUSTYPEID);
                    table.ForeignKey(
                        name: "STATUS_TYPE_PARENT",
                        column: x => x.PARENTTYPEID,
                        principalTable: "STATUS_TYPE",
                        principalColumn: "STATUS_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "SUBSCRIPTION_ACTIVITY",
                columns: table => new
                {
                    SUBSCRIPTIONACTIVITYID = table.Column<string>(name: "SUBSCRIPTION_ACTIVITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DATESENT = table.Column<DateTime>(name: "DATE_SENT", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SUBSCRIPTION_ACTIVITY", x => x.SUBSCRIPTIONACTIVITYID);
                });

            migrationBuilder.CreateTable(
                name: "SUBSCRIPTION_TYPE",
                columns: table => new
                {
                    SUBSCRIPTIONTYPEID = table.Column<string>(name: "SUBSCRIPTION_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SUBSCRIPTION_TYPE", x => x.SUBSCRIPTIONTYPEID);
                    table.ForeignKey(
                        name: "SUBSC_TYPE_PARENT",
                        column: x => x.PARENTTYPEID,
                        principalTable: "SUBSCRIPTION_TYPE",
                        principalColumn: "SUBSCRIPTION_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "SUPPLIER_PREF_ORDER",
                columns: table => new
                {
                    SUPPLIERPREFORDERID = table.Column<string>(name: "SUPPLIER_PREF_ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SUPPLIER_PREF_ORDER", x => x.SUPPLIERPREFORDERID);
                });

            migrationBuilder.CreateTable(
                name: "SUPPLIER_RATING_TYPE",
                columns: table => new
                {
                    SUPPLIERRATINGTYPEID = table.Column<string>(name: "SUPPLIER_RATING_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SUPPLIER_RATING_TYPE", x => x.SUPPLIERRATINGTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "SURVEY",
                columns: table => new
                {
                    SURVEYID = table.Column<string>(name: "SURVEY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SURVEYNAME = table.Column<string>(name: "SURVEY_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SUBMITCAPTION = table.Column<string>(name: "SUBMIT_CAPTION", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    RESPONSESERVICE = table.Column<string>(name: "RESPONSE_SERVICE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ISANONYMOUS = table.Column<string>(name: "IS_ANONYMOUS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ALLOWMULTIPLE = table.Column<string>(name: "ALLOW_MULTIPLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ALLOWUPDATE = table.Column<string>(name: "ALLOW_UPDATE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ACROFORMCONTENTID = table.Column<string>(name: "ACRO_FORM_CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SURVEY", x => x.SURVEYID);
                });

            migrationBuilder.CreateTable(
                name: "SURVEY_APPL_TYPE",
                columns: table => new
                {
                    SURVEYAPPLTYPEID = table.Column<string>(name: "SURVEY_APPL_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SURVEY_APPL_TYPE", x => x.SURVEYAPPLTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "SURVEY_QUESTION_CATEGORY",
                columns: table => new
                {
                    SURVEYQUESTIONCATEGORYID = table.Column<string>(name: "SURVEY_QUESTION_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTCATEGORYID = table.Column<string>(name: "PARENT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SURVEY_QUESTION_CATEGORY", x => x.SURVEYQUESTIONCATEGORYID);
                    table.ForeignKey(
                        name: "SRVYQSTCT_PAR",
                        column: x => x.PARENTCATEGORYID,
                        principalTable: "SURVEY_QUESTION_CATEGORY",
                        principalColumn: "SURVEY_QUESTION_CATEGORY_ID");
                });

            migrationBuilder.CreateTable(
                name: "SURVEY_QUESTION_TYPE",
                columns: table => new
                {
                    SURVEYQUESTIONTYPEID = table.Column<string>(name: "SURVEY_QUESTION_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SURVEY_QUESTION_TYPE", x => x.SURVEYQUESTIONTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "SYSTEM_PROPERTY",
                columns: table => new
                {
                    SYSTEMRESOURCEID = table.Column<string>(name: "SYSTEM_RESOURCE_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    SYSTEMPROPERTYID = table.Column<string>(name: "SYSTEM_PROPERTY_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    SYSTEMPROPERTYVALUE = table.Column<string>(name: "SYSTEM_PROPERTY_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SYSTEM_PROPERTY", x => new { x.SYSTEMRESOURCEID, x.SYSTEMPROPERTYID });
                });

            migrationBuilder.CreateTable(
                name: "TARPITTED_LOGIN_VIEW",
                columns: table => new
                {
                    VIEWNAMEID = table.Column<string>(name: "VIEW_NAME_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    USERLOGINID = table.Column<string>(name: "USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    TARPITRELEASEDATETIME = table.Column<int>(name: "TARPIT_RELEASE_DATE_TIME", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TARPITTED_LOGIN_VIEW", x => new { x.VIEWNAMEID, x.USERLOGINID });
                });

            migrationBuilder.CreateTable(
                name: "TAX_AUTHORITY_ASSOC_TYPE",
                columns: table => new
                {
                    TAXAUTHORITYASSOCTYPEID = table.Column<string>(name: "TAX_AUTHORITY_ASSOC_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TAX_AUTHORITY_ASSOC_TYPE", x => x.TAXAUTHORITYASSOCTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "TAX_AUTHORITY_RATE_TYPE",
                columns: table => new
                {
                    TAXAUTHORITYRATETYPEID = table.Column<string>(name: "TAX_AUTHORITY_RATE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TAX_AUTHORITY_RATE_TYPE", x => x.TAXAUTHORITYRATETYPEID);
                });

            migrationBuilder.CreateTable(
                name: "TECH_DATA_CALENDAR_WEEK",
                columns: table => new
                {
                    CALENDARWEEKID = table.Column<string>(name: "CALENDAR_WEEK_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    MONDAYSTARTTIME = table.Column<DateTime>(name: "MONDAY_START_TIME", type: "datetime", nullable: true),
                    MONDAYCAPACITY = table.Column<double>(name: "MONDAY_CAPACITY", type: "float", nullable: true),
                    TUESDAYSTARTTIME = table.Column<DateTime>(name: "TUESDAY_START_TIME", type: "datetime", nullable: true),
                    TUESDAYCAPACITY = table.Column<double>(name: "TUESDAY_CAPACITY", type: "float", nullable: true),
                    WEDNESDAYSTARTTIME = table.Column<DateTime>(name: "WEDNESDAY_START_TIME", type: "datetime", nullable: true),
                    WEDNESDAYCAPACITY = table.Column<double>(name: "WEDNESDAY_CAPACITY", type: "float", nullable: true),
                    THURSDAYSTARTTIME = table.Column<DateTime>(name: "THURSDAY_START_TIME", type: "datetime", nullable: true),
                    THURSDAYCAPACITY = table.Column<double>(name: "THURSDAY_CAPACITY", type: "float", nullable: true),
                    FRIDAYSTARTTIME = table.Column<DateTime>(name: "FRIDAY_START_TIME", type: "datetime", nullable: true),
                    FRIDAYCAPACITY = table.Column<double>(name: "FRIDAY_CAPACITY", type: "float", nullable: true),
                    SATURDAYSTARTTIME = table.Column<DateTime>(name: "SATURDAY_START_TIME", type: "datetime", nullable: true),
                    SATURDAYCAPACITY = table.Column<double>(name: "SATURDAY_CAPACITY", type: "float", nullable: true),
                    SUNDAYSTARTTIME = table.Column<DateTime>(name: "SUNDAY_START_TIME", type: "datetime", nullable: true),
                    SUNDAYCAPACITY = table.Column<double>(name: "SUNDAY_CAPACITY", type: "float", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TECH_DATA_CALENDAR_WEEK", x => x.CALENDARWEEKID);
                });

            migrationBuilder.CreateTable(
                name: "TELECOM_GATEWAY_CONFIG",
                columns: table => new
                {
                    TELECOMGATEWAYCONFIGID = table.Column<string>(name: "TELECOM_GATEWAY_CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TELECOM_GATEWAY_CONFIG", x => x.TELECOMGATEWAYCONFIGID);
                });

            migrationBuilder.CreateTable(
                name: "TELECOM_METHOD_TYPE",
                columns: table => new
                {
                    TELECOMMETHODTYPEID = table.Column<string>(name: "TELECOM_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TELECOM_METHOD_TYPE", x => x.TELECOMMETHODTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "TEMPORAL_EXPRESSION",
                columns: table => new
                {
                    TEMPEXPRID = table.Column<string>(name: "TEMP_EXPR_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TEMPEXPRTYPEID = table.Column<string>(name: "TEMP_EXPR_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DATE1 = table.Column<DateTime>(type: "datetime", nullable: true),
                    DATE2 = table.Column<DateTime>(type: "datetime", nullable: true),
                    INTEGER1 = table.Column<int>(type: "int", nullable: true),
                    INTEGER2 = table.Column<int>(type: "int", nullable: true),
                    STRING1 = table.Column<string>(type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STRING2 = table.Column<string>(type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TEMPORAL_EXPRESSION", x => x.TEMPEXPRID);
                });

            migrationBuilder.CreateTable(
                name: "TENANT",
                columns: table => new
                {
                    TENANTID = table.Column<string>(name: "TENANT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TENANTNAME = table.Column<string>(name: "TENANT_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    INITIALPATH = table.Column<string>(name: "INITIAL_PATH", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DISABLED = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TENANT", x => x.TENANTID);
                });

            migrationBuilder.CreateTable(
                name: "TERM_TYPE",
                columns: table => new
                {
                    TERMTYPEID = table.Column<string>(name: "TERM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TERM_TYPE", x => x.TERMTYPEID);
                    table.ForeignKey(
                        name: "TERM_TYPE_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "TERM_TYPE",
                        principalColumn: "TERM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "TERMINATION_REASON",
                columns: table => new
                {
                    TERMINATIONREASONID = table.Column<string>(name: "TERMINATION_REASON_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TERMINATION_REASON", x => x.TERMINATIONREASONID);
                });

            migrationBuilder.CreateTable(
                name: "TERMINATION_TYPE",
                columns: table => new
                {
                    TERMINATIONTYPEID = table.Column<string>(name: "TERMINATION_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TERMINATION_TYPE", x => x.TERMINATIONTYPEID);
                    table.ForeignKey(
                        name: "TERM_TYP_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "TERMINATION_TYPE",
                        principalColumn: "TERMINATION_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "TEST_FIELD_TYPE",
                columns: table => new
                {
                    TESTFIELDTYPEID = table.Column<string>(name: "TEST_FIELD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    BLOBFIELD = table.Column<byte[]>(name: "BLOB_FIELD", type: "image", nullable: true),
                    BYTEARRAYFIELD = table.Column<byte[]>(name: "BYTE_ARRAY_FIELD", type: "image", nullable: true),
                    OBJECTFIELD = table.Column<byte[]>(name: "OBJECT_FIELD", type: "image", nullable: true),
                    DATEFIELD = table.Column<DateTime>(name: "DATE_FIELD", type: "datetime", nullable: true),
                    TIMEFIELD = table.Column<DateTime>(name: "TIME_FIELD", type: "datetime", nullable: true),
                    DATETIMEFIELD = table.Column<DateTime>(name: "DATE_TIME_FIELD", type: "datetime", nullable: true),
                    FIXEDPOINTFIELD = table.Column<decimal>(name: "FIXED_POINT_FIELD", type: "decimal(18,6)", nullable: true),
                    FLOATINGPOINTFIELD = table.Column<double>(name: "FLOATING_POINT_FIELD", type: "float", nullable: true),
                    NUMERICFIELD = table.Column<int>(name: "NUMERIC_FIELD", type: "int", nullable: true),
                    CLOBFIELD = table.Column<string>(name: "CLOB_FIELD", type: "text", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TEST_FIELD_TYPE", x => x.TESTFIELDTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "TESTING_CRYPTO",
                columns: table => new
                {
                    TESTINGCRYPTOID = table.Column<string>(name: "TESTING_CRYPTO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TESTINGCRYPTOTYPEID = table.Column<string>(name: "TESTING_CRYPTO_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    UNENCRYPTEDVALUE = table.Column<string>(name: "UNENCRYPTED_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ENCRYPTEDVALUE = table.Column<string>(name: "ENCRYPTED_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SALTEDENCRYPTEDVALUE = table.Column<string>(name: "SALTED_ENCRYPTED_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TESTING_CRYPTO", x => x.TESTINGCRYPTOID);
                });

            migrationBuilder.CreateTable(
                name: "TESTING_NODE",
                columns: table => new
                {
                    TESTINGNODEID = table.Column<string>(name: "TESTING_NODE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRIMARYPARENTNODEID = table.Column<string>(name: "PRIMARY_PARENT_NODE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TESTING_NODE", x => x.TESTINGNODEID);
                    table.ForeignKey(
                        name: "TESTNG_NDE_PARNT",
                        column: x => x.PRIMARYPARENTNODEID,
                        principalTable: "TESTING_NODE",
                        principalColumn: "TESTING_NODE_ID");
                });

            migrationBuilder.CreateTable(
                name: "TESTING_REMOVE_ALL",
                columns: table => new
                {
                    TESTINGREMOVEALLID = table.Column<string>(name: "TESTING_REMOVE_ALL_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TESTING_REMOVE_ALL", x => x.TESTINGREMOVEALLID);
                });

            migrationBuilder.CreateTable(
                name: "TESTING_SUBTYPE",
                columns: table => new
                {
                    TESTINGTYPEID = table.Column<string>(name: "TESTING_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SUBTYPEDESCRIPTION = table.Column<string>(name: "SUBTYPE_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TESTING_SUBTYPE", x => x.TESTINGTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "TESTING_TYPE",
                columns: table => new
                {
                    TESTINGTYPEID = table.Column<string>(name: "TESTING_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TESTING_TYPE", x => x.TESTINGTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "TRACKING_CODE_TYPE",
                columns: table => new
                {
                    TRACKINGCODETYPEID = table.Column<string>(name: "TRACKING_CODE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TRACKING_CODE_TYPE", x => x.TRACKINGCODETYPEID);
                });

            migrationBuilder.CreateTable(
                name: "TRAINING_CLASS_TYPE",
                columns: table => new
                {
                    TRAININGCLASSTYPEID = table.Column<string>(name: "TRAINING_CLASS_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TRAINING_CLASS_TYPE", x => x.TRAININGCLASSTYPEID);
                    table.ForeignKey(
                        name: "TRAIN_TYPE_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "TRAINING_CLASS_TYPE",
                        principalColumn: "TRAINING_CLASS_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "TRAINING_REQUEST",
                columns: table => new
                {
                    TRAININGREQUESTID = table.Column<string>(name: "TRAINING_REQUEST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TRAINING_REQUEST", x => x.TRAININGREQUESTID);
                });

            migrationBuilder.CreateTable(
                name: "UNEMPLOYMENT_CLAIM",
                columns: table => new
                {
                    UNEMPLOYMENTCLAIMID = table.Column<string>(name: "UNEMPLOYMENT_CLAIM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    UNEMPLOYMENTCLAIMDATE = table.Column<DateTime>(name: "UNEMPLOYMENT_CLAIM_DATE", type: "datetime", nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYIDFROM = table.Column<string>(name: "PARTY_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYIDTO = table.Column<string>(name: "PARTY_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ROLETYPEIDFROM = table.Column<string>(name: "ROLE_TYPE_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ROLETYPEIDTO = table.Column<string>(name: "ROLE_TYPE_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UNEMPLOYMENT_CLAIM", x => x.UNEMPLOYMENTCLAIMID);
                });

            migrationBuilder.CreateTable(
                name: "UOM_TYPE",
                columns: table => new
                {
                    UOMTYPEID = table.Column<string>(name: "UOM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UOM_TYPE", x => x.UOMTYPEID);
                    table.ForeignKey(
                        name: "UOM_TYPE_PARENT",
                        column: x => x.PARENTTYPEID,
                        principalTable: "UOM_TYPE",
                        principalColumn: "UOM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "USER_AGENT_METHOD_TYPE",
                columns: table => new
                {
                    USERAGENTMETHODTYPEID = table.Column<string>(name: "USER_AGENT_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_USER_AGENT_METHOD_TYPE", x => x.USERAGENTMETHODTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "USER_AGENT_TYPE",
                columns: table => new
                {
                    USERAGENTTYPEID = table.Column<string>(name: "USER_AGENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_USER_AGENT_TYPE", x => x.USERAGENTTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "USER_PREF_GROUP_TYPE",
                columns: table => new
                {
                    USERPREFGROUPTYPEID = table.Column<string>(name: "USER_PREF_GROUP_TYPE_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_USER_PREF_GROUP_TYPE", x => x.USERPREFGROUPTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "VALUE_LINK_KEY",
                columns: table => new
                {
                    MERCHANTID = table.Column<string>(name: "MERCHANT_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    PUBLICKEY = table.Column<string>(name: "PUBLIC_KEY", type: "text", nullable: true),
                    PRIVATEKEY = table.Column<string>(name: "PRIVATE_KEY", type: "text", nullable: true),
                    EXCHANGEKEY = table.Column<string>(name: "EXCHANGE_KEY", type: "text", nullable: true),
                    WORKINGKEY = table.Column<string>(name: "WORKING_KEY", type: "text", nullable: true),
                    WORKINGKEYINDEX = table.Column<int>(name: "WORKING_KEY_INDEX", type: "int", nullable: true),
                    LASTWORKINGKEY = table.Column<string>(name: "LAST_WORKING_KEY", type: "text", nullable: true),
                    CREATEDDATE = table.Column<DateTime>(name: "CREATED_DATE", type: "datetime", nullable: true),
                    CREATEDBYTERMINAL = table.Column<string>(name: "CREATED_BY_TERMINAL", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDDATE = table.Column<DateTime>(name: "LAST_MODIFIED_DATE", type: "datetime", nullable: true),
                    LASTMODIFIEDBYTERMINAL = table.Column<string>(name: "LAST_MODIFIED_BY_TERMINAL", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VALUE_LINK_KEY", x => x.MERCHANTID);
                });

            migrationBuilder.CreateTable(
                name: "VARIANCE_REASON",
                columns: table => new
                {
                    VARIANCEREASONID = table.Column<string>(name: "VARIANCE_REASON_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VARIANCE_REASON", x => x.VARIANCEREASONID);
                });

            migrationBuilder.CreateTable(
                name: "VISITOR",
                columns: table => new
                {
                    VISITORID = table.Column<string>(name: "VISITOR_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    USERLOGINID = table.Column<string>(name: "USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VISITOR", x => x.VISITORID);
                });

            migrationBuilder.CreateTable(
                name: "VISUAL_THEME_SET",
                columns: table => new
                {
                    VISUALTHEMESETID = table.Column<string>(name: "VISUAL_THEME_SET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VISUAL_THEME_SET", x => x.VISUALTHEMESETID);
                });

            migrationBuilder.CreateTable(
                name: "WEB_ANALYTICS_CONFIG",
                columns: table => new
                {
                    WEBSITEID = table.Column<string>(name: "WEB_SITE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    WEBANALYTICSTYPEID = table.Column<string>(name: "WEB_ANALYTICS_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    WEBANALYTICSCODE = table.Column<string>(name: "WEB_ANALYTICS_CODE", type: "text", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WEB_ANALYTICS_CONFIG", x => new { x.WEBSITEID, x.WEBANALYTICSTYPEID });
                });

            migrationBuilder.CreateTable(
                name: "WEB_ANALYTICS_TYPE",
                columns: table => new
                {
                    WEBANALYTICSTYPEID = table.Column<string>(name: "WEB_ANALYTICS_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WEB_ANALYTICS_TYPE", x => x.WEBANALYTICSTYPEID);
                    table.ForeignKey(
                        name: "WANA_TYP_PARENT",
                        column: x => x.PARENTTYPEID,
                        principalTable: "WEB_ANALYTICS_TYPE",
                        principalColumn: "WEB_ANALYTICS_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "WEB_PREFERENCE_TYPE",
                columns: table => new
                {
                    WEBPREFERENCETYPEID = table.Column<string>(name: "WEB_PREFERENCE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WEB_PREFERENCE_TYPE", x => x.WEBPREFERENCETYPEID);
                });

            migrationBuilder.CreateTable(
                name: "WEB_SITE_CONTENT_TYPE",
                columns: table => new
                {
                    WEBSITECONTENTTYPEID = table.Column<string>(name: "WEB_SITE_CONTENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WEB_SITE_CONTENT_TYPE", x => x.WEBSITECONTENTTYPEID);
                    table.ForeignKey(
                        name: "WSCT_TYPE_PARENT",
                        column: x => x.PARENTTYPEID,
                        principalTable: "WEB_SITE_CONTENT_TYPE",
                        principalColumn: "WEB_SITE_CONTENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_ASSOC_TYPE",
                columns: table => new
                {
                    WORKEFFORTASSOCTYPEID = table.Column<string>(name: "WORK_EFFORT_ASSOC_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_ASSOC_TYPE", x => x.WORKEFFORTASSOCTYPEID);
                    table.ForeignKey(
                        name: "WK_EFFRTASSC_TPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "WORK_EFFORT_ASSOC_TYPE",
                        principalColumn: "WORK_EFFORT_ASSOC_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_CONTENT_TYPE",
                columns: table => new
                {
                    WORKEFFORTCONTENTTYPEID = table.Column<string>(name: "WORK_EFFORT_CONTENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_CONTENT_TYPE", x => x.WORKEFFORTCONTENTTYPEID);
                    table.ForeignKey(
                        name: "WEFFCTP_TP_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "WORK_EFFORT_CONTENT_TYPE",
                        principalColumn: "WORK_EFFORT_CONTENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_GOOD_STANDARD_TYPE",
                columns: table => new
                {
                    WORKEFFORTGOODSTDTYPEID = table.Column<string>(name: "WORK_EFFORT_GOOD_STD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_GOOD_STANDARD_T", x => x.WORKEFFORTGOODSTDTYPEID);
                    table.ForeignKey(
                        name: "WKEFF_GDSTD_TPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "WORK_EFFORT_GOOD_STANDARD_TYPE",
                        principalColumn: "WORK_EFFORT_GOOD_STD_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_PURPOSE_TYPE",
                columns: table => new
                {
                    WORKEFFORTPURPOSETYPEID = table.Column<string>(name: "WORK_EFFORT_PURPOSE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_PURPOSE_TYPE", x => x.WORKEFFORTPURPOSETYPEID);
                    table.ForeignKey(
                        name: "WK_EFFRT_PTYPE_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "WORK_EFFORT_PURPOSE_TYPE",
                        principalColumn: "WORK_EFFORT_PURPOSE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_SEARCH_RESULT",
                columns: table => new
                {
                    WORKEFFORTSEARCHRESULTID = table.Column<string>(name: "WORK_EFFORT_SEARCH_RESULT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    VISITID = table.Column<string>(name: "VISIT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERBYNAME = table.Column<string>(name: "ORDER_BY_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ISASCENDING = table.Column<string>(name: "IS_ASCENDING", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    NUMRESULTS = table.Column<int>(name: "NUM_RESULTS", type: "int", nullable: true),
                    SECONDSTOTAL = table.Column<double>(name: "SECONDS_TOTAL", type: "float", nullable: true),
                    SEARCHDATE = table.Column<DateTime>(name: "SEARCH_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_SEARCH_RESULT", x => x.WORKEFFORTSEARCHRESULTID);
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_TYPE",
                columns: table => new
                {
                    WORKEFFORTTYPEID = table.Column<string>(name: "WORK_EFFORT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_TYPE", x => x.WORKEFFORTTYPEID);
                    table.ForeignKey(
                        name: "WK_EFFRT_TYPE_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "WORK_EFFORT_TYPE",
                        principalColumn: "WORK_EFFORT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_REQ_FULF_TYPE",
                columns: table => new
                {
                    WORKREQFULFTYPEID = table.Column<string>(name: "WORK_REQ_FULF_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_REQ_FULF_TYPE", x => x.WORKREQFULFTYPEID);
                });

            migrationBuilder.CreateTable(
                name: "X509_ISSUER_PROVISION",
                columns: table => new
                {
                    CERTPROVISIONID = table.Column<string>(name: "CERT_PROVISION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COMMONNAME = table.Column<string>(name: "COMMON_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ORGANIZATIONALUNIT = table.Column<string>(name: "ORGANIZATIONAL_UNIT", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ORGANIZATIONNAME = table.Column<string>(name: "ORGANIZATION_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CITYLOCALITY = table.Column<string>(name: "CITY_LOCALITY", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    STATEPROVINCE = table.Column<string>(name: "STATE_PROVINCE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    COUNTRY = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SERIALNUMBER = table.Column<string>(name: "SERIAL_NUMBER", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_X509_ISSUER_PROVISION", x => x.CERTPROVISIONID);
                });

            migrationBuilder.CreateTable(
                name: "ZIP_SALES_RULE_LOOKUP",
                columns: table => new
                {
                    STATECODE = table.Column<string>(name: "STATE_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    CITY = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    COUNTY = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    IDCODE = table.Column<string>(name: "ID_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    TAXABLE = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    SHIPCOND = table.Column<string>(name: "SHIP_COND", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ZIP_SALES_RULE_LOOKUP", x => new { x.STATECODE, x.CITY, x.COUNTY, x.FROMDATE });
                });

            migrationBuilder.CreateTable(
                name: "ZIP_SALES_TAX_LOOKUP",
                columns: table => new
                {
                    ZIPCODE = table.Column<string>(name: "ZIP_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    STATECODE = table.Column<string>(name: "STATE_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    CITY = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    COUNTY = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    COUNTYFIPS = table.Column<string>(name: "COUNTY_FIPS", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    COUNTYDEFAULT = table.Column<string>(name: "COUNTY_DEFAULT", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    GENERALDEFAULT = table.Column<string>(name: "GENERAL_DEFAULT", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    INSIDECITY = table.Column<string>(name: "INSIDE_CITY", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    GEOCODE = table.Column<string>(name: "GEO_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    STATESALESTAX = table.Column<decimal>(name: "STATE_SALES_TAX", type: "decimal(18,6)", nullable: true),
                    CITYSALESTAX = table.Column<decimal>(name: "CITY_SALES_TAX", type: "decimal(18,6)", nullable: true),
                    CITYLOCALSALESTAX = table.Column<decimal>(name: "CITY_LOCAL_SALES_TAX", type: "decimal(18,6)", nullable: true),
                    COUNTYSALESTAX = table.Column<decimal>(name: "COUNTY_SALES_TAX", type: "decimal(18,6)", nullable: true),
                    COUNTYLOCALSALESTAX = table.Column<decimal>(name: "COUNTY_LOCAL_SALES_TAX", type: "decimal(18,6)", nullable: true),
                    COMBOSALESTAX = table.Column<decimal>(name: "COMBO_SALES_TAX", type: "decimal(18,6)", nullable: true),
                    STATEUSETAX = table.Column<decimal>(name: "STATE_USE_TAX", type: "decimal(18,6)", nullable: true),
                    CITYUSETAX = table.Column<decimal>(name: "CITY_USE_TAX", type: "decimal(18,6)", nullable: true),
                    CITYLOCALUSETAX = table.Column<decimal>(name: "CITY_LOCAL_USE_TAX", type: "decimal(18,6)", nullable: true),
                    COUNTYUSETAX = table.Column<decimal>(name: "COUNTY_USE_TAX", type: "decimal(18,6)", nullable: true),
                    COUNTYLOCALUSETAX = table.Column<decimal>(name: "COUNTY_LOCAL_USE_TAX", type: "decimal(18,6)", nullable: true),
                    COMBOUSETAX = table.Column<decimal>(name: "COMBO_USE_TAX", type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ZIP_SALES_TAX_LOOKUP", x => new { x.ZIPCODE, x.STATECODE, x.CITY, x.COUNTY, x.FROMDATE });
                });

            migrationBuilder.CreateTable(
                name: "ACCTG_TRANS_TYPE_ATTR",
                columns: table => new
                {
                    ACCTGTRANSTYPEID = table.Column<string>(name: "ACCTG_TRANS_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ACCTG_TRANS_TYPE_ATTR", x => new { x.ACCTGTRANSTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "ACCTTX_TYPE_ATTR",
                        column: x => x.ACCTGTRANSTYPEID,
                        principalTable: "ACCTG_TRANS_TYPE",
                        principalColumn: "ACCTG_TRANS_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "AGREEMENT_ITEM_TYPE_ATTR",
                columns: table => new
                {
                    AGREEMENTITEMTYPEID = table.Column<string>(name: "AGREEMENT_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AGREEMENT_ITEM_TYPE_ATTR", x => new { x.AGREEMENTITEMTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "AGRMNT_ITEM_TYPATR",
                        column: x => x.AGREEMENTITEMTYPEID,
                        principalTable: "AGREEMENT_ITEM_TYPE",
                        principalColumn: "AGREEMENT_ITEM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "AGREEMENT_TYPE_ATTR",
                columns: table => new
                {
                    AGREEMENTTYPEID = table.Column<string>(name: "AGREEMENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AGREEMENT_TYPE_ATTR", x => new { x.AGREEMENTTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "AGRMNT_TYPE_ATTR",
                        column: x => x.AGREEMENTTYPEID,
                        principalTable: "AGREEMENT_TYPE",
                        principalColumn: "AGREEMENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoleClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RoleId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoleClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetRoleClaims_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetUserClaims_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserLogins",
                columns: table => new
                {
                    LoginProvider = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ProviderKey = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ProviderDisplayName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserLogins", x => new { x.LoginProvider, x.ProviderKey });
                    table.ForeignKey(
                        name: "FK_AspNetUserLogins_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserRoles",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    RoleId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserRoles", x => new { x.UserId, x.RoleId });
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserTokens",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    LoginProvider = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Value = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserTokens", x => new { x.UserId, x.LoginProvider, x.Name });
                    table.ForeignKey(
                        name: "FK_AspNetUserTokens_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "Photos",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Url = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsMain = table.Column<bool>(type: "bit", nullable: false),
                    AppUserLoginId = table.Column<string>(type: "nvarchar(450)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Photos", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Photos_AspNetUsers_AppUserLoginId",
                        column: x => x.AppUserLoginId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "BUDGET_ITEM_TYPE_ATTR",
                columns: table => new
                {
                    BUDGETITEMTYPEID = table.Column<string>(name: "BUDGET_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BUDGET_ITEM_TYPE_ATTR", x => new { x.BUDGETITEMTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "BUDGET_ITMTYPATTR",
                        column: x => x.BUDGETITEMTYPEID,
                        principalTable: "BUDGET_ITEM_TYPE",
                        principalColumn: "BUDGET_ITEM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "BUDGET_SCENARIO_RULE",
                columns: table => new
                {
                    BUDGETSCENARIOID = table.Column<string>(name: "BUDGET_SCENARIO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    BUDGETITEMTYPEID = table.Column<string>(name: "BUDGET_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    AMOUNTCHANGE = table.Column<decimal>(name: "AMOUNT_CHANGE", type: "decimal(18,2)", nullable: true),
                    PERCENTAGECHANGE = table.Column<decimal>(name: "PERCENTAGE_CHANGE", type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BUDGET_SCENARIO_RULE", x => new { x.BUDGETSCENARIOID, x.BUDGETITEMTYPEID });
                    table.ForeignKey(
                        name: "BUDGET_SRLE_BITP",
                        column: x => x.BUDGETITEMTYPEID,
                        principalTable: "BUDGET_ITEM_TYPE",
                        principalColumn: "BUDGET_ITEM_TYPE_ID");
                    table.ForeignKey(
                        name: "BUDGET_SRLE_BSCN",
                        column: x => x.BUDGETSCENARIOID,
                        principalTable: "BUDGET_SCENARIO",
                        principalColumn: "BUDGET_SCENARIO_ID");
                });

            migrationBuilder.CreateTable(
                name: "BUDGET_TYPE_ATTR",
                columns: table => new
                {
                    BUDGETTYPEID = table.Column<string>(name: "BUDGET_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BUDGET_TYPE_ATTR", x => new { x.BUDGETTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "BUDGET_TPATR_BT",
                        column: x => x.BUDGETTYPEID,
                        principalTable: "BUDGET_TYPE",
                        principalColumn: "BUDGET_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "COMMUNICATION_EVENT_TYPE",
                columns: table => new
                {
                    COMMUNICATIONEVENTTYPEID = table.Column<string>(name: "COMMUNICATION_EVENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CONTACTMECHTYPEID = table.Column<string>(name: "CONTACT_MECH_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COMMUNICATION_EVENT_TYPE", x => x.COMMUNICATIONEVENTTYPEID);
                    table.ForeignKey(
                        name: "COM_EVNT_TYPE_CMT",
                        column: x => x.CONTACTMECHTYPEID,
                        principalTable: "CONTACT_MECH_TYPE",
                        principalColumn: "CONTACT_MECH_TYPE_ID");
                    table.ForeignKey(
                        name: "COM_EVNT_TYPE_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "COMMUNICATION_EVENT_TYPE",
                        principalColumn: "COMMUNICATION_EVENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "CONTACT_MECH",
                columns: table => new
                {
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTMECHTYPEID = table.Column<string>(name: "CONTACT_MECH_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INFOSTRING = table.Column<string>(name: "INFO_STRING", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTACT_MECH", x => x.CONTACTMECHID);
                    table.ForeignKey(
                        name: "CONT_MECH_TYPE",
                        column: x => x.CONTACTMECHTYPEID,
                        principalTable: "CONTACT_MECH_TYPE",
                        principalColumn: "CONTACT_MECH_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "CONTACT_MECH_TYPE_ATTR",
                columns: table => new
                {
                    CONTACTMECHTYPEID = table.Column<string>(name: "CONTACT_MECH_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTACT_MECH_TYPE_ATTR", x => new { x.CONTACTMECHTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "CONT_MECH_TYP_ATR",
                        column: x => x.CONTACTMECHTYPEID,
                        principalTable: "CONTACT_MECH_TYPE",
                        principalColumn: "CONTACT_MECH_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "CONTACT_MECH_TYPE_PURPOSE",
                columns: table => new
                {
                    CONTACTMECHTYPEID = table.Column<string>(name: "CONTACT_MECH_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTMECHPURPOSETYPEID = table.Column<string>(name: "CONTACT_MECH_PURPOSE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTACT_MECH_TYPE_PURPOSE", x => new { x.CONTACTMECHTYPEID, x.CONTACTMECHPURPOSETYPEID });
                    table.ForeignKey(
                        name: "CONT_MECH_TP_PRPTP",
                        column: x => x.CONTACTMECHPURPOSETYPEID,
                        principalTable: "CONTACT_MECH_PURPOSE_TYPE",
                        principalColumn: "CONTACT_MECH_PURPOSE_TYPE_ID");
                    table.ForeignKey(
                        name: "CONT_MECH_TP_TYPE",
                        column: x => x.CONTACTMECHTYPEID,
                        principalTable: "CONTACT_MECH_TYPE",
                        principalColumn: "CONTACT_MECH_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "CONTENT_SEARCH_CONSTRAINT",
                columns: table => new
                {
                    CONTENTSEARCHRESULTID = table.Column<string>(name: "CONTENT_SEARCH_RESULT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONSTRAINTSEQID = table.Column<string>(name: "CONSTRAINT_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONSTRAINTNAME = table.Column<string>(name: "CONSTRAINT_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    INFOSTRING = table.Column<string>(name: "INFO_STRING", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    INCLUDESUBCATEGORIES = table.Column<string>(name: "INCLUDE_SUB_CATEGORIES", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ISAND = table.Column<string>(name: "IS_AND", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ANYPREFIX = table.Column<string>(name: "ANY_PREFIX", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ANYSUFFIX = table.Column<string>(name: "ANY_SUFFIX", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    REMOVESTEMS = table.Column<string>(name: "REMOVE_STEMS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LOWVALUE = table.Column<string>(name: "LOW_VALUE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    HIGHVALUE = table.Column<string>(name: "HIGH_VALUE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTENT_SEARCH_CONSTRAINT", x => new { x.CONTENTSEARCHRESULTID, x.CONSTRAINTSEQID });
                    table.ForeignKey(
                        name: "CNT_SCHRSI_RES",
                        column: x => x.CONTENTSEARCHRESULTID,
                        principalTable: "CONTENT_SEARCH_RESULT",
                        principalColumn: "CONTENT_SEARCH_RESULT_ID");
                });

            migrationBuilder.CreateTable(
                name: "CONTENT_TYPE_ATTR",
                columns: table => new
                {
                    CONTENTTYPEID = table.Column<string>(name: "CONTENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTENT_TYPE_ATTR", x => new { x.CONTENTTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "CONTENT_TPAT_TYP",
                        column: x => x.CONTENTTYPEID,
                        principalTable: "CONTENT_TYPE",
                        principalColumn: "CONTENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "COST_COMPONENT_TYPE_ATTR",
                columns: table => new
                {
                    COSTCOMPONENTTYPEID = table.Column<string>(name: "COST_COMPONENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COST_COMPONENT_TYPE_ATTR", x => new { x.COSTCOMPONENTTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "COST_COMP_TATTR",
                        column: x => x.COSTCOMPONENTTYPEID,
                        principalTable: "COST_COMPONENT_TYPE",
                        principalColumn: "COST_COMPONENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "COUNTRY_CAPITAL",
                columns: table => new
                {
                    COUNTRYCODE = table.Column<string>(name: "COUNTRY_CODE", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COUNTRYCAPITAL = table.Column<string>(name: "COUNTRY_CAPITAL", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COUNTRY_CAPITAL", x => x.COUNTRYCODE);
                    table.ForeignKey(
                        name: "CNTRY_CAP_TO_CODE",
                        column: x => x.COUNTRYCODE,
                        principalTable: "COUNTRY_CODE",
                        principalColumn: "COUNTRY_CODE");
                });

            migrationBuilder.CreateTable(
                name: "COUNTRY_TELE_CODE",
                columns: table => new
                {
                    COUNTRYCODE = table.Column<string>(name: "COUNTRY_CODE", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TELECODE = table.Column<string>(name: "TELE_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COUNTRY_TELE_CODE", x => x.COUNTRYCODE);
                    table.ForeignKey(
                        name: "CNTRY_TELE_TO_CODE",
                        column: x => x.COUNTRYCODE,
                        principalTable: "COUNTRY_CODE",
                        principalColumn: "COUNTRY_CODE");
                });

            migrationBuilder.CreateTable(
                name: "CUSTOM_METHOD",
                columns: table => new
                {
                    CUSTOMMETHODID = table.Column<string>(name: "CUSTOM_METHOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CUSTOMMETHODTYPEID = table.Column<string>(name: "CUSTOM_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CUSTOMMETHODNAME = table.Column<string>(name: "CUSTOM_METHOD_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CUSTOM_METHOD", x => x.CUSTOMMETHODID);
                    table.ForeignKey(
                        name: "CME_TO_TYPE",
                        column: x => x.CUSTOMMETHODTYPEID,
                        principalTable: "CUSTOM_METHOD_TYPE",
                        principalColumn: "CUSTOM_METHOD_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "CUSTOM_SCREEN",
                columns: table => new
                {
                    CUSTOMSCREENID = table.Column<string>(name: "CUSTOM_SCREEN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CUSTOMSCREENTYPEID = table.Column<string>(name: "CUSTOM_SCREEN_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CUSTOMSCREENNAME = table.Column<string>(name: "CUSTOM_SCREEN_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CUSTOMSCREENLOCATION = table.Column<string>(name: "CUSTOM_SCREEN_LOCATION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CUSTOM_SCREEN", x => x.CUSTOMSCREENID);
                    table.ForeignKey(
                        name: "CSCR_TO_TYPE",
                        column: x => x.CUSTOMSCREENTYPEID,
                        principalTable: "CUSTOM_SCREEN_TYPE",
                        principalColumn: "CUSTOM_SCREEN_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "DATA_RESOURCE_TYPE_ATTR",
                columns: table => new
                {
                    DATARESOURCETYPEID = table.Column<string>(name: "DATA_RESOURCE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DATA_RESOURCE_TYPE_ATTR", x => new { x.DATARESOURCETYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "DATA_OBTYPE_ATTR",
                        column: x => x.DATARESOURCETYPEID,
                        principalTable: "DATA_RESOURCE_TYPE",
                        principalColumn: "DATA_RESOURCE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "DATA_SOURCE",
                columns: table => new
                {
                    DATASOURCEID = table.Column<string>(name: "DATA_SOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DATASOURCETYPEID = table.Column<string>(name: "DATA_SOURCE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DATA_SOURCE", x => x.DATASOURCEID);
                    table.ForeignKey(
                        name: "DATA_SRC_TYP",
                        column: x => x.DATASOURCETYPEID,
                        principalTable: "DATA_SOURCE_TYPE",
                        principalColumn: "DATA_SOURCE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "DELIVERABLE",
                columns: table => new
                {
                    DELIVERABLEID = table.Column<string>(name: "DELIVERABLE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DELIVERABLETYPEID = table.Column<string>(name: "DELIVERABLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DELIVERABLENAME = table.Column<string>(name: "DELIVERABLE_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DELIVERABLE", x => x.DELIVERABLEID);
                    table.ForeignKey(
                        name: "DELIVERABLE_DLTYP",
                        column: x => x.DELIVERABLETYPEID,
                        principalTable: "DELIVERABLE_TYPE",
                        principalColumn: "DELIVERABLE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "DOCUMENT",
                columns: table => new
                {
                    DOCUMENTID = table.Column<string>(name: "DOCUMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DOCUMENTTYPEID = table.Column<string>(name: "DOCUMENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DATECREATED = table.Column<DateTime>(name: "DATE_CREATED", type: "datetime", nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DOCUMENTLOCATION = table.Column<string>(name: "DOCUMENT_LOCATION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DOCUMENTTEXT = table.Column<string>(name: "DOCUMENT_TEXT", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    IMAGEDATA = table.Column<byte[]>(name: "IMAGE_DATA", type: "image", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DOCUMENT", x => x.DOCUMENTID);
                    table.ForeignKey(
                        name: "DOCUMENT_TO_TYPE",
                        column: x => x.DOCUMENTTYPEID,
                        principalTable: "DOCUMENT_TYPE",
                        principalColumn: "DOCUMENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "DOCUMENT_TYPE_ATTR",
                columns: table => new
                {
                    DOCUMENTTYPEID = table.Column<string>(name: "DOCUMENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DOCUMENT_TYPE_ATTR", x => new { x.DOCUMENTTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "DOC_TYPE_ATTR",
                        column: x => x.DOCUMENTTYPEID,
                        principalTable: "DOCUMENT_TYPE",
                        principalColumn: "DOCUMENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "EMPL_POSITION_TYPE_CLASS",
                columns: table => new
                {
                    EMPLPOSITIONTYPEID = table.Column<string>(name: "EMPL_POSITION_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    EMPLPOSITIONCLASSTYPEID = table.Column<string>(name: "EMPL_POSITION_CLASS_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    STANDARDHOURSPERWEEK = table.Column<double>(name: "STANDARD_HOURS_PER_WEEK", type: "float", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EMPL_POSITION_TYPE_CLASS", x => new { x.EMPLPOSITIONTYPEID, x.EMPLPOSITIONCLASSTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "EMPL_PSTPCS_EPCTP",
                        column: x => x.EMPLPOSITIONCLASSTYPEID,
                        principalTable: "EMPL_POSITION_CLASS_TYPE",
                        principalColumn: "EMPL_POSITION_CLASS_TYPE_ID");
                    table.ForeignKey(
                        name: "EMPL_PSTPCS_EPTP",
                        column: x => x.EMPLPOSITIONTYPEID,
                        principalTable: "EMPL_POSITION_TYPE",
                        principalColumn: "EMPL_POSITION_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "EMPL_POSITION_TYPE_RATE_NEW",
                columns: table => new
                {
                    EMPLPOSITIONTYPEID = table.Column<string>(name: "EMPL_POSITION_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    RATETYPEID = table.Column<string>(name: "RATE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    PAYGRADEID = table.Column<string>(name: "PAY_GRADE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SALARYSTEPSEQID = table.Column<string>(name: "SALARY_STEP_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EMPL_POSITION_TYPE_RATE_NEW", x => new { x.EMPLPOSITIONTYPEID, x.RATETYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "EMPL_PTPRT_EPTP",
                        column: x => x.EMPLPOSITIONTYPEID,
                        principalTable: "EMPL_POSITION_TYPE",
                        principalColumn: "EMPL_POSITION_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ENTITY_GROUP_ENTRY",
                columns: table => new
                {
                    ENTITYGROUPID = table.Column<string>(name: "ENTITY_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ENTITYORPACKAGE = table.Column<string>(name: "ENTITY_OR_PACKAGE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: false),
                    APPLENUMID = table.Column<string>(name: "APPL_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ENTITY_GROUP_ENTRY", x => new { x.ENTITYGROUPID, x.ENTITYORPACKAGE });
                    table.ForeignKey(
                        name: "ENTGRP_GRP",
                        column: x => x.ENTITYGROUPID,
                        principalTable: "ENTITY_GROUP",
                        principalColumn: "ENTITY_GROUP_ID");
                });

            migrationBuilder.CreateTable(
                name: "ENTITY_SYNC_HISTORY",
                columns: table => new
                {
                    ENTITYSYNCID = table.Column<string>(name: "ENTITY_SYNC_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STARTDATE = table.Column<DateTime>(name: "START_DATE", type: "datetime", nullable: false),
                    RUNSTATUSID = table.Column<string>(name: "RUN_STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    BEGINNINGSYNCHTIME = table.Column<DateTime>(name: "BEGINNING_SYNCH_TIME", type: "datetime", nullable: true),
                    LASTSUCCESSFULSYNCHTIME = table.Column<DateTime>(name: "LAST_SUCCESSFUL_SYNCH_TIME", type: "datetime", nullable: true),
                    LASTCANDIDATEENDTIME = table.Column<DateTime>(name: "LAST_CANDIDATE_END_TIME", type: "datetime", nullable: true),
                    LASTSPLITSTARTTIME = table.Column<int>(name: "LAST_SPLIT_START_TIME", type: "int", nullable: true),
                    TOCREATEINSERTED = table.Column<int>(name: "TO_CREATE_INSERTED", type: "int", nullable: true),
                    TOCREATEUPDATED = table.Column<int>(name: "TO_CREATE_UPDATED", type: "int", nullable: true),
                    TOCREATENOTUPDATED = table.Column<int>(name: "TO_CREATE_NOT_UPDATED", type: "int", nullable: true),
                    TOSTOREINSERTED = table.Column<int>(name: "TO_STORE_INSERTED", type: "int", nullable: true),
                    TOSTOREUPDATED = table.Column<int>(name: "TO_STORE_UPDATED", type: "int", nullable: true),
                    TOSTORENOTUPDATED = table.Column<int>(name: "TO_STORE_NOT_UPDATED", type: "int", nullable: true),
                    TOREMOVEDELETED = table.Column<int>(name: "TO_REMOVE_DELETED", type: "int", nullable: true),
                    TOREMOVEALREADYDELETED = table.Column<int>(name: "TO_REMOVE_ALREADY_DELETED", type: "int", nullable: true),
                    TOTALROWSEXPORTED = table.Column<int>(name: "TOTAL_ROWS_EXPORTED", type: "int", nullable: true),
                    TOTALROWSTOCREATE = table.Column<int>(name: "TOTAL_ROWS_TO_CREATE", type: "int", nullable: true),
                    TOTALROWSTOSTORE = table.Column<int>(name: "TOTAL_ROWS_TO_STORE", type: "int", nullable: true),
                    TOTALROWSTOREMOVE = table.Column<int>(name: "TOTAL_ROWS_TO_REMOVE", type: "int", nullable: true),
                    TOTALSPLITS = table.Column<int>(name: "TOTAL_SPLITS", type: "int", nullable: true),
                    TOTALSTORECALLS = table.Column<int>(name: "TOTAL_STORE_CALLS", type: "int", nullable: true),
                    RUNNINGTIMEMILLIS = table.Column<int>(name: "RUNNING_TIME_MILLIS", type: "int", nullable: true),
                    PERSPLITMINMILLIS = table.Column<int>(name: "PER_SPLIT_MIN_MILLIS", type: "int", nullable: true),
                    PERSPLITMAXMILLIS = table.Column<int>(name: "PER_SPLIT_MAX_MILLIS", type: "int", nullable: true),
                    PERSPLITMINITEMS = table.Column<int>(name: "PER_SPLIT_MIN_ITEMS", type: "int", nullable: true),
                    PERSPLITMAXITEMS = table.Column<int>(name: "PER_SPLIT_MAX_ITEMS", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ENTITY_SYNC_HISTORY", x => new { x.ENTITYSYNCID, x.STARTDATE });
                    table.ForeignKey(
                        name: "ENTSYNC_HSTSNC",
                        column: x => x.ENTITYSYNCID,
                        principalTable: "ENTITY_SYNC",
                        principalColumn: "ENTITY_SYNC_ID");
                });

            migrationBuilder.CreateTable(
                name: "ENTITY_SYNC_INCLUDE",
                columns: table => new
                {
                    ENTITYSYNCID = table.Column<string>(name: "ENTITY_SYNC_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ENTITYORPACKAGE = table.Column<string>(name: "ENTITY_OR_PACKAGE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: false),
                    APPLENUMID = table.Column<string>(name: "APPL_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ENTITY_SYNC_INCLUDE", x => new { x.ENTITYSYNCID, x.ENTITYORPACKAGE });
                    table.ForeignKey(
                        name: "ENTSYNC_INCSNC",
                        column: x => x.ENTITYSYNCID,
                        principalTable: "ENTITY_SYNC",
                        principalColumn: "ENTITY_SYNC_ID");
                });

            migrationBuilder.CreateTable(
                name: "ENTITY_SYNC_INCLUDE_GROUP",
                columns: table => new
                {
                    ENTITYSYNCID = table.Column<string>(name: "ENTITY_SYNC_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ENTITYGROUPID = table.Column<string>(name: "ENTITY_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ENTITY_SYNC_INCLUDE_GROUP", x => new { x.ENTITYSYNCID, x.ENTITYGROUPID });
                    table.ForeignKey(
                        name: "ENTSNCGU_GRP",
                        column: x => x.ENTITYGROUPID,
                        principalTable: "ENTITY_GROUP",
                        principalColumn: "ENTITY_GROUP_ID");
                    table.ForeignKey(
                        name: "ENTSNCGU_SNC",
                        column: x => x.ENTITYSYNCID,
                        principalTable: "ENTITY_SYNC",
                        principalColumn: "ENTITY_SYNC_ID");
                });

            migrationBuilder.CreateTable(
                name: "ENUMERATION",
                columns: table => new
                {
                    ENUMID = table.Column<string>(name: "ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ENUMTYPEID = table.Column<string>(name: "ENUM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ENUMCODE = table.Column<string>(name: "ENUM_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    SEQUENCEID = table.Column<string>(name: "SEQUENCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ENUMERATION", x => x.ENUMID);
                    table.ForeignKey(
                        name: "ENUM_TO_TYPE",
                        column: x => x.ENUMTYPEID,
                        principalTable: "ENUMERATION_TYPE",
                        principalColumn: "ENUM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "FACILITY_GROUP",
                columns: table => new
                {
                    FACILITYGROUPID = table.Column<string>(name: "FACILITY_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FACILITYGROUPTYPEID = table.Column<string>(name: "FACILITY_GROUP_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRIMARYPARENTGROUPID = table.Column<string>(name: "PRIMARY_PARENT_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FACILITYGROUPNAME = table.Column<string>(name: "FACILITY_GROUP_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FACILITY_GROUP", x => x.FACILITYGROUPID);
                    table.ForeignKey(
                        name: "FACILITY_GP_PGRP",
                        column: x => x.PRIMARYPARENTGROUPID,
                        principalTable: "FACILITY_GROUP",
                        principalColumn: "FACILITY_GROUP_ID");
                    table.ForeignKey(
                        name: "FACILITY_GP_TYPE",
                        column: x => x.FACILITYGROUPTYPEID,
                        principalTable: "FACILITY_GROUP_TYPE",
                        principalColumn: "FACILITY_GROUP_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "FACILITY_TYPE_ATTR",
                columns: table => new
                {
                    FACILITYTYPEID = table.Column<string>(name: "FACILITY_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FACILITY_TYPE_ATTR", x => new { x.FACILITYTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "FACILITY_TPAT_FT",
                        column: x => x.FACILITYTYPEID,
                        principalTable: "FACILITY_TYPE",
                        principalColumn: "FACILITY_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIN_ACCOUNT_TRANS_TYPE_ATTR",
                columns: table => new
                {
                    FINACCOUNTTRANSTYPEID = table.Column<string>(name: "FIN_ACCOUNT_TRANS_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIN_ACCOUNT_TRANS_TYPE_ATTR", x => new { x.FINACCOUNTTRANSTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "FINACCT_TX_TYPATR",
                        column: x => x.FINACCOUNTTRANSTYPEID,
                        principalTable: "FIN_ACCOUNT_TRANS_TYPE",
                        principalColumn: "FIN_ACCOUNT_TRANS_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIXED_ASSET_TYPE_ATTR",
                columns: table => new
                {
                    FIXEDASSETTYPEID = table.Column<string>(name: "FIXED_ASSET_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIXED_ASSET_TYPE_ATTR", x => new { x.FIXEDASSETTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "FIXEDAST_TYPATTR",
                        column: x => x.FIXEDASSETTYPEID,
                        principalTable: "FIXED_ASSET_TYPE",
                        principalColumn: "FIXED_ASSET_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "GEO",
                columns: table => new
                {
                    GEOID = table.Column<string>(name: "GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GEOTYPEID = table.Column<string>(name: "GEO_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    GEONAME = table.Column<string>(name: "GEO_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    GEOCODE = table.Column<string>(name: "GEO_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    GEOSECCODE = table.Column<string>(name: "GEO_SEC_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    ABBREVIATION = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    WELLKNOWNTEXT = table.Column<string>(name: "WELL_KNOWN_TEXT", type: "text", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GEO", x => x.GEOID);
                    table.ForeignKey(
                        name: "GEO_TO_TYPE",
                        column: x => x.GEOTYPEID,
                        principalTable: "GEO_TYPE",
                        principalColumn: "GEO_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "GL_ACCOUNT_CATEGORY",
                columns: table => new
                {
                    GLACCOUNTCATEGORYID = table.Column<string>(name: "GL_ACCOUNT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GLACCOUNTCATEGORYTYPEID = table.Column<string>(name: "GL_ACCOUNT_CATEGORY_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GL_ACCOUNT_CATEGORY", x => x.GLACCOUNTCATEGORYID);
                    table.ForeignKey(
                        name: "GLACT_CAT_TP",
                        column: x => x.GLACCOUNTCATEGORYTYPEID,
                        principalTable: "GL_ACCOUNT_CATEGORY_TYPE",
                        principalColumn: "GL_ACCOUNT_CATEGORY_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "GL_ACCOUNT_GROUP",
                columns: table => new
                {
                    GLACCOUNTGROUPID = table.Column<string>(name: "GL_ACCOUNT_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GLACCOUNTGROUPTYPEID = table.Column<string>(name: "GL_ACCOUNT_GROUP_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GL_ACCOUNT_GROUP", x => x.GLACCOUNTGROUPID);
                    table.ForeignKey(
                        name: "GLACT_GRP_TP",
                        column: x => x.GLACCOUNTGROUPTYPEID,
                        principalTable: "GL_ACCOUNT_GROUP_TYPE",
                        principalColumn: "GL_ACCOUNT_GROUP_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "GL_ACCOUNT",
                columns: table => new
                {
                    GLACCOUNTID = table.Column<string>(name: "GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GLACCOUNTTYPEID = table.Column<string>(name: "GL_ACCOUNT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    GLACCOUNTCLASSID = table.Column<string>(name: "GL_ACCOUNT_CLASS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    GLRESOURCETYPEID = table.Column<string>(name: "GL_RESOURCE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    GLXBRLCLASSID = table.Column<string>(name: "GL_XBRL_CLASS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARENTGLACCOUNTID = table.Column<string>(name: "PARENT_GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ACCOUNTCODE = table.Column<string>(name: "ACCOUNT_CODE", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ACCOUNTNAME = table.Column<string>(name: "ACCOUNT_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    EXTERNALID = table.Column<string>(name: "EXTERNAL_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GL_ACCOUNT", x => x.GLACCOUNTID);
                    table.ForeignKey(
                        name: "GLACCT_CLSS",
                        column: x => x.GLACCOUNTCLASSID,
                        principalTable: "GL_ACCOUNT_CLASS",
                        principalColumn: "GL_ACCOUNT_CLASS_ID");
                    table.ForeignKey(
                        name: "GLACCT_PAR",
                        column: x => x.PARENTGLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "GLACCT_REC",
                        column: x => x.GLRESOURCETYPEID,
                        principalTable: "GL_RESOURCE_TYPE",
                        principalColumn: "GL_RESOURCE_TYPE_ID");
                    table.ForeignKey(
                        name: "GLACCT_TYPE",
                        column: x => x.GLACCOUNTTYPEID,
                        principalTable: "GL_ACCOUNT_TYPE",
                        principalColumn: "GL_ACCOUNT_TYPE_ID");
                    table.ForeignKey(
                        name: "GLACCT_XBRLCLS",
                        column: x => x.GLXBRLCLASSID,
                        principalTable: "GL_XBRL_CLASS",
                        principalColumn: "GL_XBRL_CLASS_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVENTORY_ITEM_LABEL",
                columns: table => new
                {
                    INVENTORYITEMLABELID = table.Column<string>(name: "INVENTORY_ITEM_LABEL_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVENTORYITEMLABELTYPEID = table.Column<string>(name: "INVENTORY_ITEM_LABEL_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVENTORY_ITEM_LABEL", x => x.INVENTORYITEMLABELID);
                    table.ForeignKey(
                        name: "INV_ITLA_TYPE",
                        column: x => x.INVENTORYITEMLABELTYPEID,
                        principalTable: "INVENTORY_ITEM_LABEL_TYPE",
                        principalColumn: "INVENTORY_ITEM_LABEL_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVENTORY_ITEM_TYPE_ATTR",
                columns: table => new
                {
                    INVENTORYITEMTYPEID = table.Column<string>(name: "INVENTORY_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVENTORY_ITEM_TYPE_ATTR", x => new { x.INVENTORYITEMTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "INV_ITEM_TYP_ATTR",
                        column: x => x.INVENTORYITEMTYPEID,
                        principalTable: "INVENTORY_ITEM_TYPE",
                        principalColumn: "INVENTORY_ITEM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVOICE_TYPE_ATTR",
                columns: table => new
                {
                    INVOICETYPEID = table.Column<string>(name: "INVOICE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVOICE_TYPE_ATTR", x => new { x.INVOICETYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "INVOICE_TPAT_TYP",
                        column: x => x.INVOICETYPEID,
                        principalTable: "INVOICE_TYPE",
                        principalColumn: "INVOICE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "FILE_EXTENSION",
                columns: table => new
                {
                    FILEEXTENSIONID = table.Column<string>(name: "FILE_EXTENSION_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    MIMETYPEID = table.Column<string>(name: "MIME_TYPE_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FILE_EXTENSION", x => x.FILEEXTENSIONID);
                    table.ForeignKey(
                        name: "FILEEXT_MMTYP",
                        column: x => x.MIMETYPEID,
                        principalTable: "MIME_TYPE",
                        principalColumn: "MIME_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "MIME_TYPE_HTML_TEMPLATE",
                columns: table => new
                {
                    MIMETYPEID = table.Column<string>(name: "MIME_TYPE_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    TEMPLATELOCATION = table.Column<string>(name: "TEMPLATE_LOCATION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MIME_TYPE_HTML_TEMPLATE", x => x.MIMETYPEID);
                    table.ForeignKey(
                        name: "MIMETYPE_TPL_MT",
                        column: x => x.MIMETYPEID,
                        principalTable: "MIME_TYPE",
                        principalColumn: "MIME_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_ADJUSTMENT_TYPE_ATTR",
                columns: table => new
                {
                    ORDERADJUSTMENTTYPEID = table.Column<string>(name: "ORDER_ADJUSTMENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_ADJUSTMENT_TYPE_ATTR", x => new { x.ORDERADJUSTMENTTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "ORDER_ADJ_TYPATTR",
                        column: x => x.ORDERADJUSTMENTTYPEID,
                        principalTable: "ORDER_ADJUSTMENT_TYPE",
                        principalColumn: "ORDER_ADJUSTMENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_BLACKLIST",
                columns: table => new
                {
                    BLACKLISTSTRING = table.Column<string>(name: "BLACKLIST_STRING", type: "varchar(255)", unicode: false, maxLength: 255, nullable: false),
                    ORDERBLACKLISTTYPEID = table.Column<string>(name: "ORDER_BLACKLIST_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_BLACKLIST", x => new { x.BLACKLISTSTRING, x.ORDERBLACKLISTTYPEID });
                    table.ForeignKey(
                        name: "ORDER_BKL_TYPE",
                        column: x => x.ORDERBLACKLISTTYPEID,
                        principalTable: "ORDER_BLACKLIST_TYPE",
                        principalColumn: "ORDER_BLACKLIST_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_DENYLIST",
                columns: table => new
                {
                    DENYLISTSTRING = table.Column<string>(name: "DENYLIST_STRING", type: "varchar(255)", unicode: false, maxLength: 255, nullable: false),
                    ORDERDENYLISTTYPEID = table.Column<string>(name: "ORDER_DENYLIST_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_DENYLIST", x => new { x.DENYLISTSTRING, x.ORDERDENYLISTTYPEID });
                    table.ForeignKey(
                        name: "ORDER_DNY_TYPE",
                        column: x => x.ORDERDENYLISTTYPEID,
                        principalTable: "ORDER_DENYLIST_TYPE",
                        principalColumn: "ORDER_DENYLIST_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_ITEM_TYPE_ATTR",
                columns: table => new
                {
                    ORDERITEMTYPEID = table.Column<string>(name: "ORDER_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_ITEM_TYPE_ATTR", x => new { x.ORDERITEMTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "ORDER_ITEM_TYPATR",
                        column: x => x.ORDERITEMTYPEID,
                        principalTable: "ORDER_ITEM_TYPE",
                        principalColumn: "ORDER_ITEM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_TYPE_ATTR",
                columns: table => new
                {
                    ORDERTYPEID = table.Column<string>(name: "ORDER_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_TYPE_ATTR", x => new { x.ORDERTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "ORDER_TPAT_ORTYP",
                        column: x => x.ORDERTYPEID,
                        principalTable: "ORDER_TYPE",
                        principalColumn: "ORDER_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_CLASSIFICATION_GROUP",
                columns: table => new
                {
                    PARTYCLASSIFICATIONGROUPID = table.Column<string>(name: "PARTY_CLASSIFICATION_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYCLASSIFICATIONTYPEID = table.Column<string>(name: "PARTY_CLASSIFICATION_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARENTGROUPID = table.Column<string>(name: "PARENT_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_CLASSIFICATION_GROUP", x => x.PARTYCLASSIFICATIONGROUPID);
                    table.ForeignKey(
                        name: "PARTY_CLASS_GRPPAR",
                        column: x => x.PARENTGROUPID,
                        principalTable: "PARTY_CLASSIFICATION_GROUP",
                        principalColumn: "PARTY_CLASSIFICATION_GROUP_ID");
                    table.ForeignKey(
                        name: "PARTY_CLSGRP_TYPE",
                        column: x => x.PARTYCLASSIFICATIONTYPEID,
                        principalTable: "PARTY_CLASSIFICATION_TYPE",
                        principalColumn: "PARTY_CLASSIFICATION_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_TYPE_ATTR",
                columns: table => new
                {
                    PARTYTYPEID = table.Column<string>(name: "PARTY_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_TYPE_ATTR", x => new { x.PARTYTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "PARTY_TYP_ATTR",
                        column: x => x.PARTYTYPEID,
                        principalTable: "PARTY_TYPE",
                        principalColumn: "PARTY_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "SALARY_STEP_NEW",
                columns: table => new
                {
                    SALARYSTEPSEQID = table.Column<string>(name: "SALARY_STEP_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PAYGRADEID = table.Column<string>(name: "PAY_GRADE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    DATEMODIFIED = table.Column<DateTime>(name: "DATE_MODIFIED", type: "datetime", nullable: true),
                    AMOUNT = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SALARY_STEP_NEW", x => new { x.SALARYSTEPSEQID, x.PAYGRADEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "SLRY_STP_PGRD_NEW",
                        column: x => x.PAYGRADEID,
                        principalTable: "PAY_GRADE",
                        principalColumn: "PAY_GRADE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_GATEWAY_CONFIG",
                columns: table => new
                {
                    PAYMENTGATEWAYCONFIGID = table.Column<string>(name: "PAYMENT_GATEWAY_CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PAYMENTGATEWAYCONFIGTYPEID = table.Column<string>(name: "PAYMENT_GATEWAY_CONFIG_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_GATEWAY_CONFIG", x => x.PAYMENTGATEWAYCONFIGID);
                    table.ForeignKey(
                        name: "PGC_PGCT",
                        column: x => x.PAYMENTGATEWAYCONFIGTYPEID,
                        principalTable: "PAYMENT_GATEWAY_CONFIG_TYPE",
                        principalColumn: "PAYMENT_GATEWAY_CONFIG_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_GROUP",
                columns: table => new
                {
                    PAYMENTGROUPID = table.Column<string>(name: "PAYMENT_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PAYMENTGROUPTYPEID = table.Column<string>(name: "PAYMENT_GROUP_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PAYMENTGROUPNAME = table.Column<string>(name: "PAYMENT_GROUP_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_GROUP", x => x.PAYMENTGROUPID);
                    table.ForeignKey(
                        name: "PAYMNTGP_PGTYPE",
                        column: x => x.PAYMENTGROUPTYPEID,
                        principalTable: "PAYMENT_GROUP_TYPE",
                        principalColumn: "PAYMENT_GROUP_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_TYPE_ATTR",
                columns: table => new
                {
                    PAYMENTTYPEID = table.Column<string>(name: "PAYMENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_TYPE_ATTR", x => new { x.PAYMENTTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "PAYMETH_TYPE_ATTR",
                        column: x => x.PAYMENTTYPEID,
                        principalTable: "PAYMENT_TYPE",
                        principalColumn: "PAYMENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PORTLET_ATTRIBUTE",
                columns: table => new
                {
                    PORTALPAGEID = table.Column<string>(name: "PORTAL_PAGE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PORTALPORTLETID = table.Column<string>(name: "PORTAL_PORTLET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PORTLETSEQID = table.Column<string>(name: "PORTLET_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRTYPE = table.Column<string>(name: "ATTR_TYPE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PORTLET_ATTRIBUTE", x => new { x.PORTALPAGEID, x.PORTALPORTLETID, x.PORTLETSEQID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "PTLT_ATTR_PTLT",
                        column: x => x.PORTALPORTLETID,
                        principalTable: "PORTAL_PORTLET",
                        principalColumn: "PORTAL_PORTLET_ID");
                });

            migrationBuilder.CreateTable(
                name: "PORTLET_PORTLET_CATEGORY",
                columns: table => new
                {
                    PORTALPORTLETID = table.Column<string>(name: "PORTAL_PORTLET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PORTLETCATEGORYID = table.Column<string>(name: "PORTLET_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PORTLET_PORTLET_CATEGORY", x => new { x.PORTALPORTLETID, x.PORTLETCATEGORYID });
                    table.ForeignKey(
                        name: "PPTLTCAT_PTLTCAT",
                        column: x => x.PORTLETCATEGORYID,
                        principalTable: "PORTLET_CATEGORY",
                        principalColumn: "PORTLET_CATEGORY_ID");
                    table.ForeignKey(
                        name: "PPTLTCAT_PTPL",
                        column: x => x.PORTALPORTLETID,
                        principalTable: "PORTAL_PORTLET",
                        principalColumn: "PORTAL_PORTLET_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_CATEGORY",
                columns: table => new
                {
                    PRODUCTCATEGORYID = table.Column<string>(name: "PRODUCT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTCATEGORYTYPEID = table.Column<string>(name: "PRODUCT_CATEGORY_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRIMARYPARENTCATEGORYID = table.Column<string>(name: "PRIMARY_PARENT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CATEGORYNAME = table.Column<string>(name: "CATEGORY_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LONGDESCRIPTION = table.Column<string>(name: "LONG_DESCRIPTION", type: "text", nullable: true),
                    CATEGORYIMAGEURL = table.Column<string>(name: "CATEGORY_IMAGE_URL", type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    LINKONEIMAGEURL = table.Column<string>(name: "LINK_ONE_IMAGE_URL", type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    LINKTWOIMAGEURL = table.Column<string>(name: "LINK_TWO_IMAGE_URL", type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    DETAILSCREEN = table.Column<string>(name: "DETAIL_SCREEN", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SHOWINSELECT = table.Column<string>(name: "SHOW_IN_SELECT", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_CATEGORY", x => x.PRODUCTCATEGORYID);
                    table.ForeignKey(
                        name: "PROD_CTGRY_PARENT",
                        column: x => x.PRIMARYPARENTCATEGORYID,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "PROD_CTGRY_TYPE",
                        column: x => x.PRODUCTCATEGORYTYPEID,
                        principalTable: "PRODUCT_CATEGORY_TYPE",
                        principalColumn: "PRODUCT_CATEGORY_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_CATEGORY_TYPE_ATTR",
                columns: table => new
                {
                    PRODUCTCATEGORYTYPEID = table.Column<string>(name: "PRODUCT_CATEGORY_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_CATEGORY_TYPE_ATTR", x => new { x.PRODUCTCATEGORYTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "PROD_CTGRY_TATTR",
                        column: x => x.PRODUCTCATEGORYTYPEID,
                        principalTable: "PRODUCT_CATEGORY_TYPE",
                        principalColumn: "PRODUCT_CATEGORY_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_CONFIG_OPTION",
                columns: table => new
                {
                    CONFIGITEMID = table.Column<string>(name: "CONFIG_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONFIGOPTIONID = table.Column<string>(name: "CONFIG_OPTION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    CONFIGOPTIONNAME = table.Column<string>(name: "CONFIG_OPTION_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_CONFIG_OPTION", x => new { x.CONFIGITEMID, x.CONFIGOPTIONID });
                    table.ForeignKey(
                        name: "PROD_OPTN_ITEM",
                        column: x => x.CONFIGITEMID,
                        principalTable: "PRODUCT_CONFIG_ITEM",
                        principalColumn: "CONFIG_ITEM_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_PRICE_ACTION",
                columns: table => new
                {
                    PRODUCTPRICERULEID = table.Column<string>(name: "PRODUCT_PRICE_RULE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPRICEACTIONSEQID = table.Column<string>(name: "PRODUCT_PRICE_ACTION_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPRICEACTIONTYPEID = table.Column<string>(name: "PRODUCT_PRICE_ACTION_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AMOUNT = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    RATECODE = table.Column<string>(name: "RATE_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_PRICE_ACTION", x => new { x.PRODUCTPRICERULEID, x.PRODUCTPRICEACTIONSEQID });
                    table.ForeignKey(
                        name: "PROD_PCACT_RL",
                        column: x => x.PRODUCTPRICERULEID,
                        principalTable: "PRODUCT_PRICE_RULE",
                        principalColumn: "PRODUCT_PRICE_RULE_ID");
                    table.ForeignKey(
                        name: "PROD_PCACT_TYPE",
                        column: x => x.PRODUCTPRICEACTIONTYPEID,
                        principalTable: "PRODUCT_PRICE_ACTION_TYPE",
                        principalColumn: "PRODUCT_PRICE_ACTION_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_SEARCH_CONSTRAINT",
                columns: table => new
                {
                    PRODUCTSEARCHRESULTID = table.Column<string>(name: "PRODUCT_SEARCH_RESULT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONSTRAINTSEQID = table.Column<string>(name: "CONSTRAINT_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONSTRAINTNAME = table.Column<string>(name: "CONSTRAINT_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    INFOSTRING = table.Column<string>(name: "INFO_STRING", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    INCLUDESUBCATEGORIES = table.Column<string>(name: "INCLUDE_SUB_CATEGORIES", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ISAND = table.Column<string>(name: "IS_AND", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ANYPREFIX = table.Column<string>(name: "ANY_PREFIX", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ANYSUFFIX = table.Column<string>(name: "ANY_SUFFIX", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    REMOVESTEMS = table.Column<string>(name: "REMOVE_STEMS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LOWVALUE = table.Column<string>(name: "LOW_VALUE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    HIGHVALUE = table.Column<string>(name: "HIGH_VALUE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_SEARCH_CONSTRAINT", x => new { x.PRODUCTSEARCHRESULTID, x.CONSTRAINTSEQID });
                    table.ForeignKey(
                        name: "PROD_SCHRSI_RES",
                        column: x => x.PRODUCTSEARCHRESULTID,
                        principalTable: "PRODUCT_SEARCH_RESULT",
                        principalColumn: "PRODUCT_SEARCH_RESULT_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_STORE_GROUP",
                columns: table => new
                {
                    PRODUCTSTOREGROUPID = table.Column<string>(name: "PRODUCT_STORE_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTSTOREGROUPTYPEID = table.Column<string>(name: "PRODUCT_STORE_GROUP_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRIMARYPARENTGROUPID = table.Column<string>(name: "PRIMARY_PARENT_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTSTOREGROUPNAME = table.Column<string>(name: "PRODUCT_STORE_GROUP_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_STORE_GROUP", x => x.PRODUCTSTOREGROUPID);
                    table.ForeignKey(
                        name: "PRDSTR_GP_PGRP",
                        column: x => x.PRIMARYPARENTGROUPID,
                        principalTable: "PRODUCT_STORE_GROUP",
                        principalColumn: "PRODUCT_STORE_GROUP_ID");
                    table.ForeignKey(
                        name: "PRDSTR_GP_TYPE",
                        column: x => x.PRODUCTSTOREGROUPTYPEID,
                        principalTable: "PRODUCT_STORE_GROUP_TYPE",
                        principalColumn: "PRODUCT_STORE_GROUP_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_TYPE_ATTR",
                columns: table => new
                {
                    PRODUCTTYPEID = table.Column<string>(name: "PRODUCT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_TYPE_ATTR", x => new { x.PRODUCTTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "PROD_TYPE_ATTR",
                        column: x => x.PRODUCTTYPEID,
                        principalTable: "PRODUCT_TYPE",
                        principalColumn: "PRODUCT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "QUANTITY_BREAK",
                columns: table => new
                {
                    QUANTITYBREAKID = table.Column<string>(name: "QUANTITY_BREAK_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    QUANTITYBREAKTYPEID = table.Column<string>(name: "QUANTITY_BREAK_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FROMQUANTITY = table.Column<decimal>(name: "FROM_QUANTITY", type: "decimal(18,6)", nullable: true),
                    THRUQUANTITY = table.Column<decimal>(name: "THRU_QUANTITY", type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QUANTITY_BREAK", x => x.QUANTITYBREAKID);
                    table.ForeignKey(
                        name: "QUANT_BRK_TYPE",
                        column: x => x.QUANTITYBREAKTYPEID,
                        principalTable: "QUANTITY_BREAK_TYPE",
                        principalColumn: "QUANTITY_BREAK_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "QUOTE_TYPE_ATTR",
                columns: table => new
                {
                    QUOTETYPEID = table.Column<string>(name: "QUOTE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QUOTE_TYPE_ATTR", x => new { x.QUOTETYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "QUOTE_TPAT_QTYP",
                        column: x => x.QUOTETYPEID,
                        principalTable: "QUOTE_TYPE",
                        principalColumn: "QUOTE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "RECURRENCE_INFO",
                columns: table => new
                {
                    RECURRENCEINFOID = table.Column<string>(name: "RECURRENCE_INFO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STARTDATETIME = table.Column<DateTime>(name: "START_DATE_TIME", type: "datetime", nullable: true),
                    EXCEPTIONDATETIMES = table.Column<string>(name: "EXCEPTION_DATE_TIMES", type: "text", nullable: true),
                    RECURRENCEDATETIMES = table.Column<string>(name: "RECURRENCE_DATE_TIMES", type: "text", nullable: true),
                    EXCEPTIONRULEID = table.Column<string>(name: "EXCEPTION_RULE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RECURRENCERULEID = table.Column<string>(name: "RECURRENCE_RULE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RECURRENCECOUNT = table.Column<int>(name: "RECURRENCE_COUNT", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RECURRENCE_INFO", x => x.RECURRENCEINFOID);
                    table.ForeignKey(
                        name: "REC_INFO_EX_RCRLE",
                        column: x => x.EXCEPTIONRULEID,
                        principalTable: "RECURRENCE_RULE",
                        principalColumn: "RECURRENCE_RULE_ID");
                    table.ForeignKey(
                        name: "REC_INFO_RCRLE",
                        column: x => x.RECURRENCERULEID,
                        principalTable: "RECURRENCE_RULE",
                        principalColumn: "RECURRENCE_RULE_ID");
                });

            migrationBuilder.CreateTable(
                name: "REQUIREMENT_TYPE_ATTR",
                columns: table => new
                {
                    REQUIREMENTTYPEID = table.Column<string>(name: "REQUIREMENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_REQUIREMENT_TYPE_ATTR", x => new { x.REQUIREMENTTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "REQ_TYPE_ATTR",
                        column: x => x.REQUIREMENTTYPEID,
                        principalTable: "REQUIREMENT_TYPE",
                        principalColumn: "REQUIREMENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "VALID_RESPONSIBILITY",
                columns: table => new
                {
                    EMPLPOSITIONTYPEID = table.Column<string>(name: "EMPL_POSITION_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    RESPONSIBILITYTYPEID = table.Column<string>(name: "RESPONSIBILITY_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VALID_RESPONSIBILITY", x => new { x.EMPLPOSITIONTYPEID, x.RESPONSIBILITYTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "VALID_RTY_EPSTP",
                        column: x => x.EMPLPOSITIONTYPEID,
                        principalTable: "EMPL_POSITION_TYPE",
                        principalColumn: "EMPL_POSITION_TYPE_ID");
                    table.ForeignKey(
                        name: "VALID_RTY_RYTP",
                        column: x => x.RESPONSIBILITYTYPEID,
                        principalTable: "RESPONSIBILITY_TYPE",
                        principalColumn: "RESPONSIBILITY_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "RETURN_ITEM_TYPE_MAP",
                columns: table => new
                {
                    RETURNITEMMAPKEY = table.Column<string>(name: "RETURN_ITEM_MAP_KEY", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    RETURNHEADERTYPEID = table.Column<string>(name: "RETURN_HEADER_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    RETURNITEMTYPEID = table.Column<string>(name: "RETURN_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RETURN_ITEM_TYPE_MAP", x => new { x.RETURNITEMMAPKEY, x.RETURNHEADERTYPEID });
                    table.ForeignKey(
                        name: "RETITMMAP_RETTYP",
                        column: x => x.RETURNHEADERTYPEID,
                        principalTable: "RETURN_HEADER_TYPE",
                        principalColumn: "RETURN_HEADER_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_RELATIONSHIP_TYPE",
                columns: table => new
                {
                    PARTYRELATIONSHIPTYPEID = table.Column<string>(name: "PARTY_RELATIONSHIP_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    PARTYRELATIONSHIPNAME = table.Column<string>(name: "PARTY_RELATIONSHIP_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ROLETYPEIDVALIDFROM = table.Column<string>(name: "ROLE_TYPE_ID_VALID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ROLETYPEIDVALIDTO = table.Column<string>(name: "ROLE_TYPE_ID_VALID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_RELATIONSHIP_TYPE", x => x.PARTYRELATIONSHIPTYPEID);
                    table.ForeignKey(
                        name: "PARTY_RELTYP_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "PARTY_RELATIONSHIP_TYPE",
                        principalColumn: "PARTY_RELATIONSHIP_TYPE_ID");
                    table.ForeignKey(
                        name: "PARTY_RELTYP_VFRT",
                        column: x => x.ROLETYPEIDVALIDFROM,
                        principalTable: "ROLE_TYPE",
                        principalColumn: "ROLE_TYPE_ID");
                    table.ForeignKey(
                        name: "PARTY_RELTYP_VTRT",
                        column: x => x.ROLETYPEIDVALIDTO,
                        principalTable: "ROLE_TYPE",
                        principalColumn: "ROLE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ROLE_TYPE_ATTR",
                columns: table => new
                {
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ROLE_TYPE_ATTR", x => new { x.ROLETYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "ROLE_TYPATR_RTYP",
                        column: x => x.ROLETYPEID,
                        principalTable: "ROLE_TYPE",
                        principalColumn: "ROLE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "VALID_CONTACT_MECH_ROLE",
                columns: table => new
                {
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTMECHTYPEID = table.Column<string>(name: "CONTACT_MECH_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VALID_CONTACT_MECH_ROLE", x => new { x.ROLETYPEID, x.CONTACTMECHTYPEID });
                    table.ForeignKey(
                        name: "VAL_CMRLE_CMTYPE",
                        column: x => x.CONTACTMECHTYPEID,
                        principalTable: "CONTACT_MECH_TYPE",
                        principalColumn: "CONTACT_MECH_TYPE_ID");
                    table.ForeignKey(
                        name: "VAL_CMRLE_ROLE",
                        column: x => x.ROLETYPEID,
                        principalTable: "ROLE_TYPE",
                        principalColumn: "ROLE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PROTECTED_VIEW",
                columns: table => new
                {
                    GROUPID = table.Column<string>(name: "GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    VIEWNAMEID = table.Column<string>(name: "VIEW_NAME_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    MAXHITS = table.Column<int>(name: "MAX_HITS", type: "int", nullable: true),
                    MAXHITSDURATION = table.Column<int>(name: "MAX_HITS_DURATION", type: "int", nullable: true),
                    TARPITDURATION = table.Column<int>(name: "TARPIT_DURATION", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PROTECTED_VIEW", x => new { x.GROUPID, x.VIEWNAMEID });
                    table.ForeignKey(
                        name: "VIEW_SECGRP_GRP",
                        column: x => x.GROUPID,
                        principalTable: "SECURITY_GROUP",
                        principalColumn: "GROUP_ID");
                });

            migrationBuilder.CreateTable(
                name: "SECURITY_GROUP_PERMISSION",
                columns: table => new
                {
                    GROUPID = table.Column<string>(name: "GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PERMISSIONID = table.Column<string>(name: "PERMISSION_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SECURITY_GROUP_PERMISSION", x => new { x.GROUPID, x.PERMISSIONID, x.FROMDATE });
                    table.ForeignKey(
                        name: "SEC_GRP_PERM_GRP",
                        column: x => x.GROUPID,
                        principalTable: "SECURITY_GROUP",
                        principalColumn: "GROUP_ID");
                });

            migrationBuilder.CreateTable(
                name: "SERVER_HIT_BIN",
                columns: table => new
                {
                    SERVERHITBINID = table.Column<string>(name: "SERVER_HIT_BIN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    HITTYPEID = table.Column<string>(name: "HIT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SERVERIPADDRESS = table.Column<string>(name: "SERVER_IP_ADDRESS", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SERVERHOSTNAME = table.Column<string>(name: "SERVER_HOST_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    BINSTARTDATETIME = table.Column<DateTime>(name: "BIN_START_DATE_TIME", type: "datetime", nullable: true),
                    BINENDDATETIME = table.Column<DateTime>(name: "BIN_END_DATE_TIME", type: "datetime", nullable: true),
                    NUMBERHITS = table.Column<int>(name: "NUMBER_HITS", type: "int", nullable: true),
                    TOTALTIMEMILLIS = table.Column<int>(name: "TOTAL_TIME_MILLIS", type: "int", nullable: true),
                    MINTIMEMILLIS = table.Column<int>(name: "MIN_TIME_MILLIS", type: "int", nullable: true),
                    MAXTIMEMILLIS = table.Column<int>(name: "MAX_TIME_MILLIS", type: "int", nullable: true),
                    INTERNALCONTENTID = table.Column<string>(name: "INTERNAL_CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SERVER_HIT_BIN", x => x.SERVERHITBINID);
                    table.ForeignKey(
                        name: "SERVER_HBIN_TYPE",
                        column: x => x.HITTYPEID,
                        principalTable: "SERVER_HIT_TYPE",
                        principalColumn: "HIT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT_GATEWAY_CONFIG",
                columns: table => new
                {
                    SHIPMENTGATEWAYCONFIGID = table.Column<string>(name: "SHIPMENT_GATEWAY_CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPMENTGATEWAYCONFTYPEID = table.Column<string>(name: "SHIPMENT_GATEWAY_CONF_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT_GATEWAY_CONFIG", x => x.SHIPMENTGATEWAYCONFIGID);
                    table.ForeignKey(
                        name: "SGC_SGCT",
                        column: x => x.SHIPMENTGATEWAYCONFTYPEID,
                        principalTable: "SHIPMENT_GATEWAY_CONFIG_TYPE",
                        principalColumn: "SHIPMENT_GATEWAY_CONF_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT_TYPE_ATTR",
                columns: table => new
                {
                    SHIPMENTTYPEID = table.Column<string>(name: "SHIPMENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT_TYPE_ATTR", x => new { x.SHIPMENTTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "SHPMNT_TYPATR",
                        column: x => x.SHIPMENTTYPEID,
                        principalTable: "SHIPMENT_TYPE",
                        principalColumn: "SHIPMENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "STATUS_ITEM",
                columns: table => new
                {
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSTYPEID = table.Column<string>(name: "STATUS_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSCODE = table.Column<string>(name: "STATUS_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    SEQUENCEID = table.Column<string>(name: "SEQUENCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_STATUS_ITEM", x => x.STATUSID);
                    table.ForeignKey(
                        name: "STATUS_TO_TYPE",
                        column: x => x.STATUSTYPEID,
                        principalTable: "STATUS_TYPE",
                        principalColumn: "STATUS_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "SUBSCRIPTION_TYPE_ATTR",
                columns: table => new
                {
                    SUBSCRIPTIONTYPEID = table.Column<string>(name: "SUBSCRIPTION_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SUBSCRIPTION_TYPE_ATTR", x => new { x.SUBSCRIPTIONTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "SUBSC_TYPE_ATTR",
                        column: x => x.SUBSCRIPTIONTYPEID,
                        principalTable: "SUBSCRIPTION_TYPE",
                        principalColumn: "SUBSCRIPTION_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "SURVEY_MULTI_RESP",
                columns: table => new
                {
                    SURVEYID = table.Column<string>(name: "SURVEY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SURVEYMULTIRESPID = table.Column<string>(name: "SURVEY_MULTI_RESP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    MULTIRESPTITLE = table.Column<string>(name: "MULTI_RESP_TITLE", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SURVEY_MULTI_RESP", x => new { x.SURVEYID, x.SURVEYMULTIRESPID });
                    table.ForeignKey(
                        name: "SRVYMRSP_SRVY",
                        column: x => x.SURVEYID,
                        principalTable: "SURVEY",
                        principalColumn: "SURVEY_ID");
                });

            migrationBuilder.CreateTable(
                name: "SURVEY_PAGE",
                columns: table => new
                {
                    SURVEYID = table.Column<string>(name: "SURVEY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SURVEYPAGESEQID = table.Column<string>(name: "SURVEY_PAGE_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PAGENAME = table.Column<string>(name: "PAGE_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SURVEY_PAGE", x => new { x.SURVEYID, x.SURVEYPAGESEQID });
                    table.ForeignKey(
                        name: "SRVYPAGE_SRVY",
                        column: x => x.SURVEYID,
                        principalTable: "SURVEY",
                        principalColumn: "SURVEY_ID");
                });

            migrationBuilder.CreateTable(
                name: "SURVEY_TRIGGER",
                columns: table => new
                {
                    SURVEYID = table.Column<string>(name: "SURVEY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SURVEYAPPLTYPEID = table.Column<string>(name: "SURVEY_APPL_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SURVEY_TRIGGER", x => new { x.SURVEYID, x.SURVEYAPPLTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "SRVYTRG_SRVY",
                        column: x => x.SURVEYID,
                        principalTable: "SURVEY",
                        principalColumn: "SURVEY_ID");
                    table.ForeignKey(
                        name: "SRVYTRG_SRVYAPT",
                        column: x => x.SURVEYAPPLTYPEID,
                        principalTable: "SURVEY_APPL_TYPE",
                        principalColumn: "SURVEY_APPL_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "TECH_DATA_CALENDAR",
                columns: table => new
                {
                    CALENDARID = table.Column<string>(name: "CALENDAR_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CALENDARWEEKID = table.Column<string>(name: "CALENDAR_WEEK_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TECH_DATA_CALENDAR", x => x.CALENDARID);
                    table.ForeignKey(
                        name: "CALENDAR_WEEK",
                        column: x => x.CALENDARWEEKID,
                        principalTable: "TECH_DATA_CALENDAR_WEEK",
                        principalColumn: "CALENDAR_WEEK_ID");
                });

            migrationBuilder.CreateTable(
                name: "TEMPORAL_EXPRESSION_ASSOC",
                columns: table => new
                {
                    FROMTEMPEXPRID = table.Column<string>(name: "FROM_TEMP_EXPR_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TOTEMPEXPRID = table.Column<string>(name: "TO_TEMP_EXPR_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    EXPRASSOCTYPE = table.Column<string>(name: "EXPR_ASSOC_TYPE", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TEMPORAL_EXPRESSION_ASSOC", x => new { x.FROMTEMPEXPRID, x.TOTEMPEXPRID });
                    table.ForeignKey(
                        name: "TEMP_EXPR_FROM",
                        column: x => x.FROMTEMPEXPRID,
                        principalTable: "TEMPORAL_EXPRESSION",
                        principalColumn: "TEMP_EXPR_ID");
                    table.ForeignKey(
                        name: "TEMP_EXPR_TO",
                        column: x => x.TOTEMPEXPRID,
                        principalTable: "TEMPORAL_EXPRESSION",
                        principalColumn: "TEMP_EXPR_ID");
                });

            migrationBuilder.CreateTable(
                name: "TENANT_COMPONENT",
                columns: table => new
                {
                    TENANTID = table.Column<string>(name: "TENANT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COMPONENTNAME = table.Column<string>(name: "COMPONENT_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TENANT_COMPONENT", x => new { x.COMPONENTNAME, x.TENANTID });
                    table.ForeignKey(
                        name: "COMP_CNT",
                        column: x => x.COMPONENTNAME,
                        principalTable: "COMPONENT",
                        principalColumn: "COMPONENT_NAME");
                    table.ForeignKey(
                        name: "TNTCOMP_TNT",
                        column: x => x.TENANTID,
                        principalTable: "TENANT",
                        principalColumn: "TENANT_ID");
                });

            migrationBuilder.CreateTable(
                name: "TENANT_DATA_SOURCE",
                columns: table => new
                {
                    TENANTID = table.Column<string>(name: "TENANT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ENTITYGROUPNAME = table.Column<string>(name: "ENTITY_GROUP_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    JDBCURI = table.Column<string>(name: "JDBC_URI", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    JDBCUSERNAME = table.Column<string>(name: "JDBC_USERNAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    JDBCPASSWORD = table.Column<string>(name: "JDBC_PASSWORD", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TENANT_DATA_SOURCE", x => new { x.TENANTID, x.ENTITYGROUPNAME });
                    table.ForeignKey(
                        name: "TNTDTSRC_TNT",
                        column: x => x.TENANTID,
                        principalTable: "TENANT",
                        principalColumn: "TENANT_ID");
                });

            migrationBuilder.CreateTable(
                name: "TENANT_DOMAIN_NAME",
                columns: table => new
                {
                    DOMAINNAME = table.Column<string>(name: "DOMAIN_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: false),
                    TENANTID = table.Column<string>(name: "TENANT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TENANT_DOMAIN_NAME", x => x.DOMAINNAME);
                    table.ForeignKey(
                        name: "TNNT_DMNAM",
                        column: x => x.TENANTID,
                        principalTable: "TENANT",
                        principalColumn: "TENANT_ID");
                });

            migrationBuilder.CreateTable(
                name: "TENANT_KEY_ENCRYPTING_KEY",
                columns: table => new
                {
                    TENANTID = table.Column<string>(name: "TENANT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    KEKTEXT = table.Column<string>(name: "KEK_TEXT", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TENANT_KEY_ENCRYPTING_KEY", x => x.TENANTID);
                    table.ForeignKey(
                        name: "TNTKEK_TNT",
                        column: x => x.TENANTID,
                        principalTable: "TENANT",
                        principalColumn: "TENANT_ID");
                });

            migrationBuilder.CreateTable(
                name: "TERM_TYPE_ATTR",
                columns: table => new
                {
                    TERMTYPEID = table.Column<string>(name: "TERM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TERM_TYPE_ATTR", x => new { x.TERMTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "TERM_TYPATR_TTYP",
                        column: x => x.TERMTYPEID,
                        principalTable: "TERM_TYPE",
                        principalColumn: "TERM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "TESTING",
                columns: table => new
                {
                    TESTINGID = table.Column<string>(name: "TESTING_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TESTINGTYPEID = table.Column<string>(name: "TESTING_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TESTINGNAME = table.Column<string>(name: "TESTING_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    TESTINGSIZE = table.Column<int>(name: "TESTING_SIZE", type: "int", nullable: true),
                    TESTINGDATE = table.Column<DateTime>(name: "TESTING_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TESTING", x => x.TESTINGID);
                    table.ForeignKey(
                        name: "ENTITY_ENTY_TYP",
                        column: x => x.TESTINGTYPEID,
                        principalTable: "TESTING_TYPE",
                        principalColumn: "TESTING_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "UOM",
                columns: table => new
                {
                    UOMID = table.Column<string>(name: "UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    UOMTYPEID = table.Column<string>(name: "UOM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ABBREVIATION = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    NUMERICCODE = table.Column<int>(name: "NUMERIC_CODE", type: "int", nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UOM", x => x.UOMID);
                    table.ForeignKey(
                        name: "UOM_TO_TYPE",
                        column: x => x.UOMTYPEID,
                        principalTable: "UOM_TYPE",
                        principalColumn: "UOM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "USER_AGENT",
                columns: table => new
                {
                    USERAGENTID = table.Column<string>(name: "USER_AGENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    BROWSERTYPEID = table.Column<string>(name: "BROWSER_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PLATFORMTYPEID = table.Column<string>(name: "PLATFORM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PROTOCOLTYPEID = table.Column<string>(name: "PROTOCOL_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    USERAGENTTYPEID = table.Column<string>(name: "USER_AGENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    USERAGENTMETHODTYPEID = table.Column<string>(name: "USER_AGENT_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_USER_AGENT", x => x.USERAGENTID);
                    table.ForeignKey(
                        name: "UAGENT_BROWSER",
                        column: x => x.BROWSERTYPEID,
                        principalTable: "BROWSER_TYPE",
                        principalColumn: "BROWSER_TYPE_ID");
                    table.ForeignKey(
                        name: "UAGENT_METHOD",
                        column: x => x.USERAGENTMETHODTYPEID,
                        principalTable: "USER_AGENT_METHOD_TYPE",
                        principalColumn: "USER_AGENT_METHOD_TYPE_ID");
                    table.ForeignKey(
                        name: "UAGENT_PLATFORM",
                        column: x => x.PLATFORMTYPEID,
                        principalTable: "PLATFORM_TYPE",
                        principalColumn: "PLATFORM_TYPE_ID");
                    table.ForeignKey(
                        name: "UAGENT_PROTOCOL",
                        column: x => x.PROTOCOLTYPEID,
                        principalTable: "PROTOCOL_TYPE",
                        principalColumn: "PROTOCOL_TYPE_ID");
                    table.ForeignKey(
                        name: "UAGENT_TYPE",
                        column: x => x.USERAGENTTYPEID,
                        principalTable: "USER_AGENT_TYPE",
                        principalColumn: "USER_AGENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "USER_PREFERENCE",
                columns: table => new
                {
                    USERLOGINID = table.Column<string>(name: "USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    USERPREFTYPEID = table.Column<string>(name: "USER_PREF_TYPE_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    USERPREFGROUPTYPEID = table.Column<string>(name: "USER_PREF_GROUP_TYPE_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    USERPREFVALUE = table.Column<string>(name: "USER_PREF_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    USERPREFDATATYPE = table.Column<string>(name: "USER_PREF_DATA_TYPE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_USER_PREFERENCE", x => new { x.USERLOGINID, x.USERPREFTYPEID });
                    table.ForeignKey(
                        name: "UP_USER_GROUP_TYPE",
                        column: x => x.USERPREFGROUPTYPEID,
                        principalTable: "USER_PREF_GROUP_TYPE",
                        principalColumn: "USER_PREF_GROUP_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "VISUAL_THEME",
                columns: table => new
                {
                    VISUALTHEMEID = table.Column<string>(name: "VISUAL_THEME_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    VISUALTHEMESETID = table.Column<string>(name: "VISUAL_THEME_SET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VISUAL_THEME", x => x.VISUALTHEMEID);
                    table.ForeignKey(
                        name: "VT_THEME_SET",
                        column: x => x.VISUALTHEMESETID,
                        principalTable: "VISUAL_THEME_SET",
                        principalColumn: "VISUAL_THEME_SET_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_ASSOC_TYPE_ATTR",
                columns: table => new
                {
                    WORKEFFORTASSOCTYPEID = table.Column<string>(name: "WORK_EFFORT_ASSOC_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_ASSOC_TYPE_ATTR", x => new { x.WORKEFFORTASSOCTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "WK_EFFRTASSC_TATR",
                        column: x => x.WORKEFFORTASSOCTYPEID,
                        principalTable: "WORK_EFFORT_ASSOC_TYPE",
                        principalColumn: "WORK_EFFORT_ASSOC_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_SEARCH_CONSTRAINT",
                columns: table => new
                {
                    WORKEFFORTSEARCHRESULTID = table.Column<string>(name: "WORK_EFFORT_SEARCH_RESULT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONSTRAINTSEQID = table.Column<string>(name: "CONSTRAINT_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONSTRAINTNAME = table.Column<string>(name: "CONSTRAINT_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    INFOSTRING = table.Column<string>(name: "INFO_STRING", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    INCLUDESUBWORKEFFORTS = table.Column<string>(name: "INCLUDE_SUB_WORK_EFFORTS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ISAND = table.Column<string>(name: "IS_AND", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ANYPREFIX = table.Column<string>(name: "ANY_PREFIX", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ANYSUFFIX = table.Column<string>(name: "ANY_SUFFIX", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    REMOVESTEMS = table.Column<string>(name: "REMOVE_STEMS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LOWVALUE = table.Column<string>(name: "LOW_VALUE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    HIGHVALUE = table.Column<string>(name: "HIGH_VALUE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_SEARCH_CONSTRAI", x => new { x.WORKEFFORTSEARCHRESULTID, x.CONSTRAINTSEQID });
                    table.ForeignKey(
                        name: "WEFF_SCHRSI_RES",
                        column: x => x.WORKEFFORTSEARCHRESULTID,
                        principalTable: "WORK_EFFORT_SEARCH_RESULT",
                        principalColumn: "WORK_EFFORT_SEARCH_RESULT_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_TYPE_ATTR",
                columns: table => new
                {
                    WORKEFFORTTYPEID = table.Column<string>(name: "WORK_EFFORT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_TYPE_ATTR", x => new { x.WORKEFFORTTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "WK_EFFRT_TYPE_ATR",
                        column: x => x.WORKEFFORTTYPEID,
                        principalTable: "WORK_EFFORT_TYPE",
                        principalColumn: "WORK_EFFORT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "CONTACT_MECH_ATTRIBUTE",
                columns: table => new
                {
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTACT_MECH_ATTRIBUTE", x => new { x.CONTACTMECHID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "CONT_MECH_ATTR",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                });

            migrationBuilder.CreateTable(
                name: "CONTACT_MECH_LINK",
                columns: table => new
                {
                    CONTACTMECHIDFROM = table.Column<string>(name: "CONTACT_MECH_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTMECHIDTO = table.Column<string>(name: "CONTACT_MECH_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTACT_MECH_LINK", x => new { x.CONTACTMECHIDFROM, x.CONTACTMECHIDTO });
                    table.ForeignKey(
                        name: "CONT_MECH_FCMECH",
                        column: x => x.CONTACTMECHIDFROM,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "CONT_MECH_TCMECH",
                        column: x => x.CONTACTMECHIDTO,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                });

            migrationBuilder.CreateTable(
                name: "FTP_ADDRESS",
                columns: table => new
                {
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    HOSTNAME = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PORT = table.Column<int>(type: "int", nullable: true),
                    USERNAME = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    FTPPASSWORD = table.Column<string>(name: "FTP_PASSWORD", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    BINARYTRANSFER = table.Column<string>(name: "BINARY_TRANSFER", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    FILEPATH = table.Column<string>(name: "FILE_PATH", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ZIPFILE = table.Column<string>(name: "ZIP_FILE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    PASSIVEMODE = table.Column<string>(name: "PASSIVE_MODE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DEFAULTTIMEOUT = table.Column<int>(name: "DEFAULT_TIMEOUT", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FTP_ADDRESS", x => x.CONTACTMECHID);
                    table.ForeignKey(
                        name: "FTP_SRV_CMECH",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                });

            migrationBuilder.CreateTable(
                name: "TELECOM_NUMBER",
                columns: table => new
                {
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COUNTRYCODE = table.Column<string>(name: "COUNTRY_CODE", type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    AREACODE = table.Column<string>(name: "AREA_CODE", type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    CONTACTNUMBER = table.Column<string>(name: "CONTACT_NUMBER", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    ASKFORNAME = table.Column<string>(name: "ASK_FOR_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TELECOM_NUMBER", x => x.CONTACTMECHID);
                    table.ForeignKey(
                        name: "TEL_NUM_CMECH",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                });

            migrationBuilder.CreateTable(
                name: "DOCUMENT_ATTRIBUTE",
                columns: table => new
                {
                    DOCUMENTID = table.Column<string>(name: "DOCUMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DOCUMENT_ATTRIBUTE", x => new { x.DOCUMENTID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "DOCUMENT_ATTR",
                        column: x => x.DOCUMENTID,
                        principalTable: "DOCUMENT",
                        principalColumn: "DOCUMENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "EMAIL_TEMPLATE_SETTING",
                columns: table => new
                {
                    EMAILTEMPLATESETTINGID = table.Column<string>(name: "EMAIL_TEMPLATE_SETTING_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    EMAILTYPE = table.Column<string>(name: "EMAIL_TYPE", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    BODYSCREENLOCATION = table.Column<string>(name: "BODY_SCREEN_LOCATION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    XSLFOATTACHSCREENLOCATION = table.Column<string>(name: "XSLFO_ATTACH_SCREEN_LOCATION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    FROMADDRESS = table.Column<string>(name: "FROM_ADDRESS", type: "varchar(320)", unicode: false, maxLength: 320, nullable: true),
                    CCADDRESS = table.Column<string>(name: "CC_ADDRESS", type: "varchar(320)", unicode: false, maxLength: 320, nullable: true),
                    BCCADDRESS = table.Column<string>(name: "BCC_ADDRESS", type: "varchar(320)", unicode: false, maxLength: 320, nullable: true),
                    SUBJECT = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CONTENTTYPE = table.Column<string>(name: "CONTENT_TYPE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EMAIL_TEMPLATE_SETTING", x => x.EMAILTEMPLATESETTINGID);
                    table.ForeignKey(
                        name: "EMAILSET_ENUM",
                        column: x => x.EMAILTYPE,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIN_ACCOUNT_TYPE",
                columns: table => new
                {
                    FINACCOUNTTYPEID = table.Column<string>(name: "FIN_ACCOUNT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    REPLENISHENUMID = table.Column<string>(name: "REPLENISH_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ISREFUNDABLE = table.Column<string>(name: "IS_REFUNDABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIN_ACCOUNT_TYPE", x => x.FINACCOUNTTYPEID);
                    table.ForeignKey(
                        name: "FINACCT_TYPE_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "FIN_ACCOUNT_TYPE",
                        principalColumn: "FIN_ACCOUNT_TYPE_ID");
                    table.ForeignKey(
                        name: "FINACCT_TYPE_RENUM",
                        column: x => x.REPLENISHENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                });

            migrationBuilder.CreateTable(
                name: "JOB_MANAGER_LOCK",
                columns: table => new
                {
                    INSTANCEID = table.Column<string>(name: "INSTANCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    REASONENUMID = table.Column<string>(name: "REASON_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CREATEDDATE = table.Column<DateTime>(name: "CREATED_DATE", type: "datetime", nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDDATE = table.Column<DateTime>(name: "LAST_MODIFIED_DATE", type: "datetime", nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_JOB_MANAGER_LOCK", x => new { x.INSTANCEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "JOBLK_ENUM_REAS",
                        column: x => x.REASONENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                });

            migrationBuilder.CreateTable(
                name: "JOB_REQUISITION",
                columns: table => new
                {
                    JOBREQUISITIONID = table.Column<string>(name: "JOB_REQUISITION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DURATIONMONTHS = table.Column<int>(name: "DURATION_MONTHS", type: "int", nullable: true),
                    AGE = table.Column<int>(type: "int", nullable: true),
                    GENDER = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    EXPERIENCEMONTHS = table.Column<int>(name: "EXPERIENCE_MONTHS", type: "int", nullable: true),
                    EXPERIENCEYEARS = table.Column<int>(name: "EXPERIENCE_YEARS", type: "int", nullable: true),
                    QUALIFICATION = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    JOBLOCATION = table.Column<string>(name: "JOB_LOCATION", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SKILLTYPEID = table.Column<string>(name: "SKILL_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    NOOFRESOURCES = table.Column<int>(name: "NO_OF_RESOURCES", type: "int", nullable: true),
                    JOBPOSTINGTYPEENUMID = table.Column<string>(name: "JOB_POSTING_TYPE_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    JOBREQUISITIONDATE = table.Column<DateTime>(name: "JOB_REQUISITION_DATE", type: "datetime", nullable: true),
                    EXAMTYPEENUMID = table.Column<string>(name: "EXAM_TYPE_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    REQUIREDONDATE = table.Column<DateTime>(name: "REQUIRED_ON_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_JOB_REQUISITION", x => x.JOBREQUISITIONID);
                    table.ForeignKey(
                        name: "JOB_REQ_ENUMEXM",
                        column: x => x.EXAMTYPEENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "JOB_REQ_ENUMJBP",
                        column: x => x.JOBPOSTINGTYPEENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "JOB_REQ_SKTYP",
                        column: x => x.SKILLTYPEID,
                        principalTable: "SKILL_TYPE",
                        principalColumn: "SKILL_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "KEYWORD_THESAURUS",
                columns: table => new
                {
                    ENTEREDKEYWORD = table.Column<string>(name: "ENTERED_KEYWORD", type: "varchar(255)", unicode: false, maxLength: 255, nullable: false),
                    ALTERNATEKEYWORD = table.Column<string>(name: "ALTERNATE_KEYWORD", type: "varchar(255)", unicode: false, maxLength: 255, nullable: false),
                    RELATIONSHIPENUMID = table.Column<string>(name: "RELATIONSHIP_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_KEYWORD_THESAURUS", x => new { x.ENTEREDKEYWORD, x.ALTERNATEKEYWORD });
                    table.ForeignKey(
                        name: "KW_THRS_RLENM",
                        column: x => x.RELATIONSHIPENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_PRICE_COND",
                columns: table => new
                {
                    PRODUCTPRICERULEID = table.Column<string>(name: "PRODUCT_PRICE_RULE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPRICECONDSEQID = table.Column<string>(name: "PRODUCT_PRICE_COND_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INPUTPARAMENUMID = table.Column<string>(name: "INPUT_PARAM_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    OPERATORENUMID = table.Column<string>(name: "OPERATOR_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CONDVALUE = table.Column<string>(name: "COND_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_PRICE_COND", x => new { x.PRODUCTPRICERULEID, x.PRODUCTPRICECONDSEQID });
                    table.ForeignKey(
                        name: "PROD_PCCOND_INENUM",
                        column: x => x.INPUTPARAMENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "PROD_PCCOND_OPENUM",
                        column: x => x.OPERATORENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "PROD_PCCOND_RULE",
                        column: x => x.PRODUCTPRICERULEID,
                        principalTable: "PRODUCT_PRICE_RULE",
                        principalColumn: "PRODUCT_PRICE_RULE_ID");
                });

            migrationBuilder.CreateTable(
                name: "FACILITY_GROUP_ROLLUP",
                columns: table => new
                {
                    FACILITYGROUPID = table.Column<string>(name: "FACILITY_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTFACILITYGROUPID = table.Column<string>(name: "PARENT_FACILITY_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FACILITY_GROUP_ROLLUP", x => new { x.FACILITYGROUPID, x.PARENTFACILITYGROUPID, x.FROMDATE });
                    table.ForeignKey(
                        name: "FGRP_FRLP_CURRENT",
                        column: x => x.FACILITYGROUPID,
                        principalTable: "FACILITY_GROUP",
                        principalColumn: "FACILITY_GROUP_ID");
                    table.ForeignKey(
                        name: "FGRP_FRLP_PARENT",
                        column: x => x.PARENTFACILITYGROUPID,
                        principalTable: "FACILITY_GROUP",
                        principalColumn: "FACILITY_GROUP_ID");
                });

            migrationBuilder.CreateTable(
                name: "COUNTRY_ADDRESS_FORMAT",
                columns: table => new
                {
                    GEOID = table.Column<string>(name: "GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GEOASSOCTYPEID = table.Column<string>(name: "GEO_ASSOC_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    REQUIRESTATEPROVINCEID = table.Column<string>(name: "REQUIRE_STATE_PROVINCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    REQUIREPOSTALCODE = table.Column<string>(name: "REQUIRE_POSTAL_CODE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    POSTALCODEREGEX = table.Column<string>(name: "POSTAL_CODE_REGEX", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    HASPOSTALCODEEXT = table.Column<string>(name: "HAS_POSTAL_CODE_EXT", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    REQUIREPOSTALCODEEXT = table.Column<string>(name: "REQUIRE_POSTAL_CODE_EXT", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ADDRESSFORMAT = table.Column<string>(name: "ADDRESS_FORMAT", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COUNTRY_ADDRESS_FORMAT", x => x.GEOID);
                    table.ForeignKey(
                        name: "CNY_ADR_GEO",
                        column: x => x.GEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "CNY_ADR_GEO_TYPE",
                        column: x => x.GEOASSOCTYPEID,
                        principalTable: "GEO_ASSOC_TYPE",
                        principalColumn: "GEO_ASSOC_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "GEO_ASSOC",
                columns: table => new
                {
                    GEOID = table.Column<string>(name: "GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GEOIDTO = table.Column<string>(name: "GEO_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GEOASSOCTYPEID = table.Column<string>(name: "GEO_ASSOC_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GEO_ASSOC", x => new { x.GEOID, x.GEOIDTO });
                    table.ForeignKey(
                        name: "GEO_ASSC_TO_ASSC",
                        column: x => x.GEOIDTO,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "GEO_ASSC_TO_MAIN",
                        column: x => x.GEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "GEO_ASSC_TO_TYPE",
                        column: x => x.GEOASSOCTYPEID,
                        principalTable: "GEO_ASSOC_TYPE",
                        principalColumn: "GEO_ASSOC_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "SURVEY_QUESTION",
                columns: table => new
                {
                    SURVEYQUESTIONID = table.Column<string>(name: "SURVEY_QUESTION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SURVEYQUESTIONCATEGORYID = table.Column<string>(name: "SURVEY_QUESTION_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SURVEYQUESTIONTYPEID = table.Column<string>(name: "SURVEY_QUESTION_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    QUESTION = table.Column<string>(type: "text", nullable: true),
                    HINT = table.Column<string>(type: "text", nullable: true),
                    ENUMTYPEID = table.Column<string>(name: "ENUM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    GEOID = table.Column<string>(name: "GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FORMATSTRING = table.Column<string>(name: "FORMAT_STRING", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SURVEY_QUESTION", x => x.SURVEYQUESTIONID);
                    table.ForeignKey(
                        name: "SRVYQST_GEO",
                        column: x => x.GEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "SRVYQST_SRVYQTCT",
                        column: x => x.SURVEYQUESTIONCATEGORYID,
                        principalTable: "SURVEY_QUESTION_CATEGORY",
                        principalColumn: "SURVEY_QUESTION_CATEGORY_ID");
                    table.ForeignKey(
                        name: "SRVYQST_SRVYQTP",
                        column: x => x.SURVEYQUESTIONTYPEID,
                        principalTable: "SURVEY_QUESTION_TYPE",
                        principalColumn: "SURVEY_QUESTION_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "GL_ACCOUNT_CATEGORY_MEMBER",
                columns: table => new
                {
                    GLACCOUNTID = table.Column<string>(name: "GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GLACCOUNTCATEGORYID = table.Column<string>(name: "GL_ACCOUNT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    AMOUNTPERCENTAGE = table.Column<decimal>(name: "AMOUNT_PERCENTAGE", type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GL_ACCOUNT_CATEGORY_MEMBER", x => new { x.GLACCOUNTID, x.GLACCOUNTCATEGORYID, x.FROMDATE });
                    table.ForeignKey(
                        name: "GLACT_CATMBR_AC",
                        column: x => x.GLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "GLACT_CATMBR_CAT",
                        column: x => x.GLACCOUNTCATEGORYID,
                        principalTable: "GL_ACCOUNT_CATEGORY",
                        principalColumn: "GL_ACCOUNT_CATEGORY_ID");
                });

            migrationBuilder.CreateTable(
                name: "GL_ACCOUNT_GROUP_MEMBER",
                columns: table => new
                {
                    GLACCOUNTID = table.Column<string>(name: "GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GLACCOUNTGROUPTYPEID = table.Column<string>(name: "GL_ACCOUNT_GROUP_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GLACCOUNTGROUPID = table.Column<string>(name: "GL_ACCOUNT_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GL_ACCOUNT_GROUP_MEMBER", x => new { x.GLACCOUNTID, x.GLACCOUNTGROUPTYPEID });
                    table.ForeignKey(
                        name: "GLACT_GPMBR_AC",
                        column: x => x.GLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "GLACT_GPMBR_GP",
                        column: x => x.GLACCOUNTGROUPID,
                        principalTable: "GL_ACCOUNT_GROUP",
                        principalColumn: "GL_ACCOUNT_GROUP_ID");
                    table.ForeignKey(
                        name: "GLACT_GPMBR_TP",
                        column: x => x.GLACCOUNTGROUPTYPEID,
                        principalTable: "GL_ACCOUNT_GROUP_TYPE",
                        principalColumn: "GL_ACCOUNT_GROUP_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "GL_BUDGET_XREF",
                columns: table => new
                {
                    GLACCOUNTID = table.Column<string>(name: "GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    BUDGETITEMTYPEID = table.Column<string>(name: "BUDGET_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    ALLOCATIONPERCENTAGE = table.Column<decimal>(name: "ALLOCATION_PERCENTAGE", type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GL_BUDGET_XREF", x => new { x.GLACCOUNTID, x.BUDGETITEMTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "GL_BDGT_XRF_BIT",
                        column: x => x.BUDGETITEMTYPEID,
                        principalTable: "BUDGET_ITEM_TYPE",
                        principalColumn: "BUDGET_ITEM_TYPE_ID");
                    table.ForeignKey(
                        name: "GL_BDGT_XRF_GLA",
                        column: x => x.GLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVOICE_ITEM_TYPE",
                columns: table => new
                {
                    INVOICEITEMTYPEID = table.Column<string>(name: "INVOICE_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DEFAULTGLACCOUNTID = table.Column<string>(name: "DEFAULT_GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVOICE_ITEM_TYPE", x => x.INVOICEITEMTYPEID);
                    table.ForeignKey(
                        name: "INVOICE_ITEM_TPAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "INVOICE_ITEM_TYPE",
                        principalColumn: "INVOICE_ITEM_TYPE_ID");
                    table.ForeignKey(
                        name: "INVOICE_ITM_DGLAC",
                        column: x => x.DEFAULTGLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_METHOD_TYPE",
                columns: table => new
                {
                    PAYMENTMETHODTYPEID = table.Column<string>(name: "PAYMENT_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DEFAULTGLACCOUNTID = table.Column<string>(name: "DEFAULT_GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_METHOD_TYPE", x => x.PAYMENTMETHODTYPEID);
                    table.ForeignKey(
                        name: "PAYMENT_MTP_DGLAC",
                        column: x => x.DEFAULTGLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_GATEWAY_AUTHORIZE_NET",
                columns: table => new
                {
                    PAYMENTGATEWAYCONFIGID = table.Column<string>(name: "PAYMENT_GATEWAY_CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TRANSACTIONURL = table.Column<string>(name: "TRANSACTION_URL", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CERTIFICATEALIAS = table.Column<string>(name: "CERTIFICATE_ALIAS", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    APIVERSION = table.Column<string>(name: "API_VERSION", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    DELIMITEDDATA = table.Column<string>(name: "DELIMITED_DATA", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    DELIMITERCHAR = table.Column<string>(name: "DELIMITER_CHAR", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    CPVERSION = table.Column<string>(name: "CP_VERSION", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    CPMARKETTYPE = table.Column<string>(name: "CP_MARKET_TYPE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    CPDEVICETYPE = table.Column<string>(name: "CP_DEVICE_TYPE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    METHOD = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    EMAILCUSTOMER = table.Column<string>(name: "EMAIL_CUSTOMER", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    EMAILMERCHANT = table.Column<string>(name: "EMAIL_MERCHANT", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    TESTMODE = table.Column<string>(name: "TEST_MODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    RELAYRESPONSE = table.Column<string>(name: "RELAY_RESPONSE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    TRANKEY = table.Column<string>(name: "TRAN_KEY", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    USERID = table.Column<string>(name: "USER_ID", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PWD = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    TRANSDESCRIPTION = table.Column<string>(name: "TRANS_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DUPLICATEWINDOW = table.Column<int>(name: "DUPLICATE_WINDOW", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_GATEWAY_AUTHORIZE_N", x => x.PAYMENTGATEWAYCONFIGID);
                    table.ForeignKey(
                        name: "PGAN_PGC",
                        column: x => x.PAYMENTGATEWAYCONFIGID,
                        principalTable: "PAYMENT_GATEWAY_CONFIG",
                        principalColumn: "PAYMENT_GATEWAY_CONFIG_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_GATEWAY_CLEAR_COMMERCE",
                columns: table => new
                {
                    PAYMENTGATEWAYCONFIGID = table.Column<string>(name: "PAYMENT_GATEWAY_CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SOURCEID = table.Column<string>(name: "SOURCE_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    GROUPID = table.Column<string>(name: "GROUP_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    CLIENTID = table.Column<string>(name: "CLIENT_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    USERNAME = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    PWD = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    USERALIAS = table.Column<string>(name: "USER_ALIAS", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    EFFECTIVEALIAS = table.Column<string>(name: "EFFECTIVE_ALIAS", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    PROCESSMODE = table.Column<string>(name: "PROCESS_MODE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    SERVERURL = table.Column<string>(name: "SERVER_U_R_L", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ENABLECVM = table.Column<string>(name: "ENABLE_C_V_M", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_GATEWAY_CLEAR_COMME", x => x.PAYMENTGATEWAYCONFIGID);
                    table.ForeignKey(
                        name: "PGCC_PGC",
                        column: x => x.PAYMENTGATEWAYCONFIGID,
                        principalTable: "PAYMENT_GATEWAY_CONFIG",
                        principalColumn: "PAYMENT_GATEWAY_CONFIG_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_GATEWAY_CYBER_SOURCE",
                columns: table => new
                {
                    PAYMENTGATEWAYCONFIGID = table.Column<string>(name: "PAYMENT_GATEWAY_CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    MERCHANTID = table.Column<string>(name: "MERCHANT_ID", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    APIVERSION = table.Column<string>(name: "API_VERSION", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    PRODUCTION = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    KEYSDIR = table.Column<string>(name: "KEYS_DIR", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    KEYSFILE = table.Column<string>(name: "KEYS_FILE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LOGENABLED = table.Column<string>(name: "LOG_ENABLED", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LOGDIR = table.Column<string>(name: "LOG_DIR", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LOGFILE = table.Column<string>(name: "LOG_FILE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LOGSIZE = table.Column<int>(name: "LOG_SIZE", type: "int", nullable: true),
                    MERCHANTDESCR = table.Column<string>(name: "MERCHANT_DESCR", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    MERCHANTCONTACT = table.Column<string>(name: "MERCHANT_CONTACT", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    AUTOBILL = table.Column<string>(name: "AUTO_BILL", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    ENABLEDAV = table.Column<string>(name: "ENABLE_DAV", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    FRAUDSCORE = table.Column<string>(name: "FRAUD_SCORE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    IGNOREAVS = table.Column<string>(name: "IGNORE_AVS", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    DISABLEBILLAVS = table.Column<string>(name: "DISABLE_BILL_AVS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    AVSDECLINECODES = table.Column<string>(name: "AVS_DECLINE_CODES", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_GATEWAY_CYBER_SOURC", x => x.PAYMENTGATEWAYCONFIGID);
                    table.ForeignKey(
                        name: "PGCS_PGC",
                        column: x => x.PAYMENTGATEWAYCONFIGID,
                        principalTable: "PAYMENT_GATEWAY_CONFIG",
                        principalColumn: "PAYMENT_GATEWAY_CONFIG_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_GATEWAY_EWAY",
                columns: table => new
                {
                    PAYMENTGATEWAYCONFIGID = table.Column<string>(name: "PAYMENT_GATEWAY_CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CUSTOMERID = table.Column<string>(name: "CUSTOMER_ID", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    REFUNDPWD = table.Column<string>(name: "REFUND_PWD", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    TESTMODE = table.Column<string>(name: "TEST_MODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    ENABLECVN = table.Column<string>(name: "ENABLE_CVN", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    ENABLEBEAGLE = table.Column<string>(name: "ENABLE_BEAGLE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_GATEWAY_EWAY", x => x.PAYMENTGATEWAYCONFIGID);
                    table.ForeignKey(
                        name: "PGEW_PGC",
                        column: x => x.PAYMENTGATEWAYCONFIGID,
                        principalTable: "PAYMENT_GATEWAY_CONFIG",
                        principalColumn: "PAYMENT_GATEWAY_CONFIG_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_GATEWAY_ORBITAL",
                columns: table => new
                {
                    PAYMENTGATEWAYCONFIGID = table.Column<string>(name: "PAYMENT_GATEWAY_CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    USERNAME = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    CONNECTIONPASSWORD = table.Column<string>(name: "CONNECTION_PASSWORD", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    MERCHANTID = table.Column<string>(name: "MERCHANT_ID", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ENGINECLASS = table.Column<string>(name: "ENGINE_CLASS", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    HOSTNAME = table.Column<string>(name: "HOST_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PORT = table.Column<int>(type: "int", nullable: true),
                    HOSTNAMEFAILOVER = table.Column<string>(name: "HOST_NAME_FAILOVER", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PORTFAILOVER = table.Column<int>(name: "PORT_FAILOVER", type: "int", nullable: true),
                    CONNECTIONTIMEOUTSECONDS = table.Column<int>(name: "CONNECTION_TIMEOUT_SECONDS", type: "int", nullable: true),
                    READTIMEOUTSECONDS = table.Column<int>(name: "READ_TIMEOUT_SECONDS", type: "int", nullable: true),
                    AUTHORIZATIONURI = table.Column<string>(name: "AUTHORIZATION_U_R_I", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SDKVERSION = table.Column<string>(name: "SDK_VERSION", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    SSLSOCKETFACTORY = table.Column<string>(name: "SSL_SOCKET_FACTORY", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    RESPONSETYPE = table.Column<string>(name: "RESPONSE_TYPE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_GATEWAY_ORBITAL", x => x.PAYMENTGATEWAYCONFIGID);
                    table.ForeignKey(
                        name: "PGORB_PGC",
                        column: x => x.PAYMENTGATEWAYCONFIGID,
                        principalTable: "PAYMENT_GATEWAY_CONFIG",
                        principalColumn: "PAYMENT_GATEWAY_CONFIG_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_GATEWAY_PAY_PAL",
                columns: table => new
                {
                    PAYMENTGATEWAYCONFIGID = table.Column<string>(name: "PAYMENT_GATEWAY_CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    BUSINESSEMAIL = table.Column<string>(name: "BUSINESS_EMAIL", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    APIUSERNAME = table.Column<string>(name: "API_USER_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    APIPASSWORD = table.Column<string>(name: "API_PASSWORD", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    APISIGNATURE = table.Column<string>(name: "API_SIGNATURE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    APIENVIRONMENT = table.Column<string>(name: "API_ENVIRONMENT", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    NOTIFYURL = table.Column<string>(name: "NOTIFY_URL", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    RETURNURL = table.Column<string>(name: "RETURN_URL", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CANCELRETURNURL = table.Column<string>(name: "CANCEL_RETURN_URL", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    IMAGEURL = table.Column<string>(name: "IMAGE_URL", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CONFIRMTEMPLATE = table.Column<string>(name: "CONFIRM_TEMPLATE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    REDIRECTURL = table.Column<string>(name: "REDIRECT_URL", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CONFIRMURL = table.Column<string>(name: "CONFIRM_URL", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SHIPPINGCALLBACKURL = table.Column<string>(name: "SHIPPING_CALLBACK_URL", type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    REQUIRECONFIRMEDSHIPPING = table.Column<string>(name: "REQUIRE_CONFIRMED_SHIPPING", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_GATEWAY_PAY_PAL", x => x.PAYMENTGATEWAYCONFIGID);
                    table.ForeignKey(
                        name: "PGPP_PGC",
                        column: x => x.PAYMENTGATEWAYCONFIGID,
                        principalTable: "PAYMENT_GATEWAY_CONFIG",
                        principalColumn: "PAYMENT_GATEWAY_CONFIG_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_GATEWAY_PAYFLOW_PRO",
                columns: table => new
                {
                    PAYMENTGATEWAYCONFIGID = table.Column<string>(name: "PAYMENT_GATEWAY_CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CERTSPATH = table.Column<string>(name: "CERTS_PATH", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    HOSTADDRESS = table.Column<string>(name: "HOST_ADDRESS", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    HOSTPORT = table.Column<int>(name: "HOST_PORT", type: "int", nullable: true),
                    TIMEOUT = table.Column<int>(type: "int", nullable: true),
                    PROXYADDRESS = table.Column<string>(name: "PROXY_ADDRESS", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PROXYPORT = table.Column<int>(name: "PROXY_PORT", type: "int", nullable: true),
                    PROXYLOGON = table.Column<string>(name: "PROXY_LOGON", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PROXYPASSWORD = table.Column<string>(name: "PROXY_PASSWORD", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    VENDOR = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    USERID = table.Column<string>(name: "USER_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    PWD = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PARTNER = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    CHECKAVS = table.Column<string>(name: "CHECK_AVS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    CHECKCVV2 = table.Column<string>(name: "CHECK_CVV2", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    PREAUTH = table.Column<string>(name: "PRE_AUTH", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ENABLETRANSMIT = table.Column<string>(name: "ENABLE_TRANSMIT", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LOGFILENAME = table.Column<string>(name: "LOG_FILE_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LOGGINGLEVEL = table.Column<int>(name: "LOGGING_LEVEL", type: "int", nullable: true),
                    MAXLOGFILESIZE = table.Column<int>(name: "MAX_LOG_FILE_SIZE", type: "int", nullable: true),
                    STACKTRACEON = table.Column<string>(name: "STACK_TRACE_ON", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    REDIRECTURL = table.Column<string>(name: "REDIRECT_URL", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    RETURNURL = table.Column<string>(name: "RETURN_URL", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CANCELRETURNURL = table.Column<string>(name: "CANCEL_RETURN_URL", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_GATEWAY_PAYFLOW_PRO", x => x.PAYMENTGATEWAYCONFIGID);
                    table.ForeignKey(
                        name: "PGPF_PGC",
                        column: x => x.PAYMENTGATEWAYCONFIGID,
                        principalTable: "PAYMENT_GATEWAY_CONFIG",
                        principalColumn: "PAYMENT_GATEWAY_CONFIG_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_GATEWAY_SAGE_PAY",
                columns: table => new
                {
                    PAYMENTGATEWAYCONFIGID = table.Column<string>(name: "PAYMENT_GATEWAY_CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    VENDOR = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    PRODUCTIONHOST = table.Column<string>(name: "PRODUCTION_HOST", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    TESTINGHOST = table.Column<string>(name: "TESTING_HOST", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    SAGEPAYMODE = table.Column<string>(name: "SAGE_PAY_MODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    PROTOCOLVERSION = table.Column<string>(name: "PROTOCOL_VERSION", type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    AUTHENTICATIONTRANSTYPE = table.Column<string>(name: "AUTHENTICATION_TRANS_TYPE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    AUTHENTICATIONURL = table.Column<string>(name: "AUTHENTICATION_URL", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    AUTHORISETRANSTYPE = table.Column<string>(name: "AUTHORISE_TRANS_TYPE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    AUTHORISEURL = table.Column<string>(name: "AUTHORISE_URL", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    RELEASETRANSTYPE = table.Column<string>(name: "RELEASE_TRANS_TYPE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    RELEASEURL = table.Column<string>(name: "RELEASE_URL", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    VOIDURL = table.Column<string>(name: "VOID_URL", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    REFUNDURL = table.Column<string>(name: "REFUND_URL", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_GATEWAY_SAGE_PAY", x => x.PAYMENTGATEWAYCONFIGID);
                    table.ForeignKey(
                        name: "PGSP_PGC",
                        column: x => x.PAYMENTGATEWAYCONFIGID,
                        principalTable: "PAYMENT_GATEWAY_CONFIG",
                        principalColumn: "PAYMENT_GATEWAY_CONFIG_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_GATEWAY_SECURE_PAY",
                columns: table => new
                {
                    PAYMENTGATEWAYCONFIGID = table.Column<string>(name: "PAYMENT_GATEWAY_CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    MERCHANTID = table.Column<string>(name: "MERCHANT_ID", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PWD = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SERVERURL = table.Column<string>(name: "SERVER_U_R_L", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PROCESSTIMEOUT = table.Column<int>(name: "PROCESS_TIMEOUT", type: "int", nullable: true),
                    ENABLEAMOUNTROUND = table.Column<string>(name: "ENABLE_AMOUNT_ROUND", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_GATEWAY_SECURE_PAY", x => x.PAYMENTGATEWAYCONFIGID);
                    table.ForeignKey(
                        name: "PGSCP_PGC",
                        column: x => x.PAYMENTGATEWAYCONFIGID,
                        principalTable: "PAYMENT_GATEWAY_CONFIG",
                        principalColumn: "PAYMENT_GATEWAY_CONFIG_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_GATEWAY_WORLD_PAY",
                columns: table => new
                {
                    PAYMENTGATEWAYCONFIGID = table.Column<string>(name: "PAYMENT_GATEWAY_CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    REDIRECTURL = table.Column<string>(name: "REDIRECT_URL", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    INSTID = table.Column<string>(name: "INST_ID", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    AUTHMODE = table.Column<string>(name: "AUTH_MODE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    FIXCONTACT = table.Column<string>(name: "FIX_CONTACT", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    HIDECONTACT = table.Column<string>(name: "HIDE_CONTACT", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    HIDECURRENCY = table.Column<string>(name: "HIDE_CURRENCY", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LANGID = table.Column<string>(name: "LANG_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    NOLANGUAGEMENU = table.Column<string>(name: "NO_LANGUAGE_MENU", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    WITHDELIVERY = table.Column<string>(name: "WITH_DELIVERY", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    TESTMODE = table.Column<int>(name: "TEST_MODE", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_GATEWAY_WORLD_PAY", x => x.PAYMENTGATEWAYCONFIGID);
                    table.ForeignKey(
                        name: "PGWP_PGC",
                        column: x => x.PAYMENTGATEWAYCONFIGID,
                        principalTable: "PAYMENT_GATEWAY_CONFIG",
                        principalColumn: "PAYMENT_GATEWAY_CONFIG_ID");
                });

            migrationBuilder.CreateTable(
                name: "MARKET_INTEREST",
                columns: table => new
                {
                    PRODUCTCATEGORYID = table.Column<string>(name: "PRODUCT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYCLASSIFICATIONGROUPID = table.Column<string>(name: "PARTY_CLASSIFICATION_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MARKET_INTEREST", x => new { x.PRODUCTCATEGORYID, x.PARTYCLASSIFICATIONGROUPID, x.FROMDATE });
                    table.ForeignKey(
                        name: "MARKET_INT_PCAT",
                        column: x => x.PRODUCTCATEGORYID,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "MARKET_INT_PCGRP",
                        column: x => x.PARTYCLASSIFICATIONGROUPID,
                        principalTable: "PARTY_CLASSIFICATION_GROUP",
                        principalColumn: "PARTY_CLASSIFICATION_GROUP_ID");
                });

            migrationBuilder.CreateTable(
                name: "PROD_CATALOG_CATEGORY",
                columns: table => new
                {
                    PRODCATALOGID = table.Column<string>(name: "PROD_CATALOG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTCATEGORYID = table.Column<string>(name: "PRODUCT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODCATALOGCATEGORYTYPEID = table.Column<string>(name: "PROD_CATALOG_CATEGORY_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PROD_CATALOG_CATEGORY", x => new { x.PRODCATALOGID, x.PRODUCTCATEGORYID, x.PRODCATALOGCATEGORYTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PROD_CC_CATALOG",
                        column: x => x.PRODCATALOGID,
                        principalTable: "PROD_CATALOG",
                        principalColumn: "PROD_CATALOG_ID");
                    table.ForeignKey(
                        name: "PROD_CC_CATEGORY",
                        column: x => x.PRODUCTCATEGORYID,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "PROD_CC_TYPE",
                        column: x => x.PRODCATALOGCATEGORYTYPEID,
                        principalTable: "PROD_CATALOG_CATEGORY_TYPE",
                        principalColumn: "PROD_CATALOG_CATEGORY_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_CATEGORY_ATTRIBUTE",
                columns: table => new
                {
                    PRODUCTCATEGORYID = table.Column<string>(name: "PRODUCT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_CATEGORY_ATTRIBUTE", x => new { x.PRODUCTCATEGORYID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "PROD_CTGRY_ATTR",
                        column: x => x.PRODUCTCATEGORYID,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_CATEGORY_LINK",
                columns: table => new
                {
                    PRODUCTCATEGORYID = table.Column<string>(name: "PRODUCT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LINKSEQID = table.Column<string>(name: "LINK_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    TITLETEXT = table.Column<string>(name: "TITLE_TEXT", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DETAILTEXT = table.Column<string>(name: "DETAIL_TEXT", type: "text", nullable: true),
                    IMAGEURL = table.Column<string>(name: "IMAGE_URL", type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    IMAGETWOURL = table.Column<string>(name: "IMAGE_TWO_URL", type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    LINKTYPEENUMID = table.Column<string>(name: "LINK_TYPE_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LINKINFO = table.Column<string>(name: "LINK_INFO", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DETAILSUBSCREEN = table.Column<string>(name: "DETAIL_SUB_SCREEN", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_CATEGORY_LINK", x => new { x.PRODUCTCATEGORYID, x.LINKSEQID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PROD_CLNK_CATEGORY",
                        column: x => x.PRODUCTCATEGORYID,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "PROD_CLNK_LKTPENM",
                        column: x => x.LINKTYPEENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_CATEGORY_ROLLUP",
                columns: table => new
                {
                    PRODUCTCATEGORYID = table.Column<string>(name: "PRODUCT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTPRODUCTCATEGORYID = table.Column<string>(name: "PARENT_PRODUCT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_CATEGORY_ROLLUP", x => new { x.PRODUCTCATEGORYID, x.PARENTPRODUCTCATEGORYID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PROD_CRLP_CURRENT",
                        column: x => x.PRODUCTCATEGORYID,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "PROD_CRLP_PARENT",
                        column: x => x.PARENTPRODUCTCATEGORYID,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_FEATURE_CAT_GRP_APPL",
                columns: table => new
                {
                    PRODUCTCATEGORYID = table.Column<string>(name: "PRODUCT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTFEATUREGROUPID = table.Column<string>(name: "PRODUCT_FEATURE_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_FEATURE_CAT_GRP_APP", x => new { x.PRODUCTCATEGORYID, x.PRODUCTFEATUREGROUPID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PROD_FCGAPL_CAT",
                        column: x => x.PRODUCTCATEGORYID,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "PROD_FCGAPL_FGRP",
                        column: x => x.PRODUCTFEATUREGROUPID,
                        principalTable: "PRODUCT_FEATURE_GROUP",
                        principalColumn: "PRODUCT_FEATURE_GROUP_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_FEATURE_CATEGORY_APPL",
                columns: table => new
                {
                    PRODUCTCATEGORYID = table.Column<string>(name: "PRODUCT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTFEATURECATEGORYID = table.Column<string>(name: "PRODUCT_FEATURE_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_FEATURE_CATEGORY_AP", x => new { x.PRODUCTCATEGORYID, x.PRODUCTFEATURECATEGORYID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PROD_FCAPPL_CAT",
                        column: x => x.PRODUCTCATEGORYID,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "PROD_FCAPPL_FCAT",
                        column: x => x.PRODUCTFEATURECATEGORYID,
                        principalTable: "PRODUCT_FEATURE_CATEGORY",
                        principalColumn: "PRODUCT_FEATURE_CATEGORY_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_CONFIG_CONFIG",
                columns: table => new
                {
                    CONFIGID = table.Column<string>(name: "CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONFIGITEMID = table.Column<string>(name: "CONFIG_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: false),
                    CONFIGOPTIONID = table.Column<string>(name: "CONFIG_OPTION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_CONFIG_CONFIG", x => new { x.CONFIGID, x.CONFIGITEMID, x.CONFIGOPTIONID, x.SEQUENCENUM });
                    table.ForeignKey(
                        name: "PROD_CONFC_ITEM",
                        column: x => x.CONFIGITEMID,
                        principalTable: "PRODUCT_CONFIG_ITEM",
                        principalColumn: "CONFIG_ITEM_ID");
                    table.ForeignKey(
                        name: "PROD_CONFC_OPTN",
                        columns: x => new { x.CONFIGITEMID, x.CONFIGOPTIONID },
                        principalTable: "PRODUCT_CONFIG_OPTION",
                        principalColumns: new[] { "CONFIG_ITEM_ID", "CONFIG_OPTION_ID" });
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_CONFIG_OPTION_IACTN",
                columns: table => new
                {
                    CONFIGITEMID = table.Column<string>(name: "CONFIG_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONFIGOPTIONID = table.Column<string>(name: "CONFIG_OPTION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONFIGITEMIDTO = table.Column<string>(name: "CONFIG_ITEM_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONFIGOPTIONIDTO = table.Column<string>(name: "CONFIG_OPTION_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: false),
                    CONFIGIACTNTYPEID = table.Column<string>(name: "CONFIG_IACTN_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_CONFIG_OPTION_IACTN", x => new { x.CONFIGITEMID, x.CONFIGOPTIONID, x.CONFIGITEMIDTO, x.CONFIGOPTIONIDTO, x.SEQUENCENUM });
                    table.ForeignKey(
                        name: "PROD_OPTIA_ITEM",
                        column: x => x.CONFIGITEMID,
                        principalTable: "PRODUCT_CONFIG_ITEM",
                        principalColumn: "CONFIG_ITEM_ID");
                    table.ForeignKey(
                        name: "PROD_OPTIA_ITMT",
                        column: x => x.CONFIGITEMIDTO,
                        principalTable: "PRODUCT_CONFIG_ITEM",
                        principalColumn: "CONFIG_ITEM_ID");
                    table.ForeignKey(
                        name: "PROD_OPTIA_OPTN",
                        columns: x => new { x.CONFIGITEMID, x.CONFIGOPTIONID },
                        principalTable: "PRODUCT_CONFIG_OPTION",
                        principalColumns: new[] { "CONFIG_ITEM_ID", "CONFIG_OPTION_ID" });
                    table.ForeignKey(
                        name: "PROD_OPTIA_OPTT",
                        columns: x => new { x.CONFIGITEMIDTO, x.CONFIGOPTIONIDTO },
                        principalTable: "PRODUCT_CONFIG_OPTION",
                        principalColumns: new[] { "CONFIG_ITEM_ID", "CONFIG_OPTION_ID" });
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_STORE_GROUP_ROLLUP",
                columns: table => new
                {
                    PRODUCTSTOREGROUPID = table.Column<string>(name: "PRODUCT_STORE_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTGROUPID = table.Column<string>(name: "PARENT_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_STORE_GROUP_ROLLUP", x => new { x.PRODUCTSTOREGROUPID, x.PARENTGROUPID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PSGRP_RLP_CURRENT",
                        column: x => x.PRODUCTSTOREGROUPID,
                        principalTable: "PRODUCT_STORE_GROUP",
                        principalColumn: "PRODUCT_STORE_GROUP_ID");
                    table.ForeignKey(
                        name: "PSGRP_RLP_PARENT",
                        column: x => x.PARENTGROUPID,
                        principalTable: "PRODUCT_STORE_GROUP",
                        principalColumn: "PRODUCT_STORE_GROUP_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_STORE_SHIPMENT_METH",
                columns: table => new
                {
                    PRODUCTSTORESHIPMETHID = table.Column<string>(name: "PRODUCT_STORE_SHIP_METH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SHIPMENTMETHODTYPEID = table.Column<string>(name: "SHIPMENT_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    COMPANYPARTYID = table.Column<string>(name: "COMPANY_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    MINWEIGHT = table.Column<decimal>(name: "MIN_WEIGHT", type: "decimal(18,6)", nullable: true),
                    MAXWEIGHT = table.Column<decimal>(name: "MAX_WEIGHT", type: "decimal(18,6)", nullable: true),
                    MINSIZE = table.Column<decimal>(name: "MIN_SIZE", type: "decimal(18,6)", nullable: true),
                    MAXSIZE = table.Column<decimal>(name: "MAX_SIZE", type: "decimal(18,6)", nullable: true),
                    MINTOTAL = table.Column<decimal>(name: "MIN_TOTAL", type: "decimal(18,2)", nullable: true),
                    MAXTOTAL = table.Column<decimal>(name: "MAX_TOTAL", type: "decimal(18,2)", nullable: true),
                    ALLOWUSPSADDR = table.Column<string>(name: "ALLOW_USPS_ADDR", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    REQUIREUSPSADDR = table.Column<string>(name: "REQUIRE_USPS_ADDR", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ALLOWCOMPANYADDR = table.Column<string>(name: "ALLOW_COMPANY_ADDR", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    REQUIRECOMPANYADDR = table.Column<string>(name: "REQUIRE_COMPANY_ADDR", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    INCLUDENOCHARGEITEMS = table.Column<string>(name: "INCLUDE_NO_CHARGE_ITEMS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    INCLUDEFEATUREGROUP = table.Column<string>(name: "INCLUDE_FEATURE_GROUP", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    EXCLUDEFEATUREGROUP = table.Column<string>(name: "EXCLUDE_FEATURE_GROUP", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INCLUDEGEOID = table.Column<string>(name: "INCLUDE_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    EXCLUDEGEOID = table.Column<string>(name: "EXCLUDE_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SERVICENAME = table.Column<string>(name: "SERVICE_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CONFIGPROPS = table.Column<string>(name: "CONFIG_PROPS", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SHIPMENTCUSTOMMETHODID = table.Column<string>(name: "SHIPMENT_CUSTOM_METHOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SHIPMENTGATEWAYCONFIGID = table.Column<string>(name: "SHIPMENT_GATEWAY_CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SEQUENCENUMBER = table.Column<int>(name: "SEQUENCE_NUMBER", type: "int", nullable: true),
                    ALLOWANCEPERCENT = table.Column<decimal>(name: "ALLOWANCE_PERCENT", type: "decimal(18,6)", nullable: true),
                    MINIMUMPRICE = table.Column<decimal>(name: "MINIMUM_PRICE", type: "decimal(18,2)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_STORE_SHIPMENT_METH", x => x.PRODUCTSTORESHIPMETHID);
                    table.ForeignKey(
                        name: "PRDS_SM_CUS_MET",
                        column: x => x.SHIPMENTCUSTOMMETHODID,
                        principalTable: "CUSTOM_METHOD",
                        principalColumn: "CUSTOM_METHOD_ID");
                    table.ForeignKey(
                        name: "PRDS_SM_SGC",
                        column: x => x.SHIPMENTGATEWAYCONFIGID,
                        principalTable: "SHIPMENT_GATEWAY_CONFIG",
                        principalColumn: "SHIPMENT_GATEWAY_CONFIG_ID");
                    table.ForeignKey(
                        name: "SHIPMENTMETHODTYPE",
                        column: x => x.SHIPMENTMETHODTYPEID,
                        principalTable: "SHIPMENT_METHOD_TYPE",
                        principalColumn: "SHIPMENT_METHOD_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT_GATEWAY_DHL",
                columns: table => new
                {
                    SHIPMENTGATEWAYCONFIGID = table.Column<string>(name: "SHIPMENT_GATEWAY_CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONNECTURL = table.Column<string>(name: "CONNECT_URL", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CONNECTTIMEOUT = table.Column<int>(name: "CONNECT_TIMEOUT", type: "int", nullable: true),
                    HEADVERSION = table.Column<string>(name: "HEAD_VERSION", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    HEADACTION = table.Column<string>(name: "HEAD_ACTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ACCESSUSERID = table.Column<string>(name: "ACCESS_USER_ID", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ACCESSPASSWORD = table.Column<string>(name: "ACCESS_PASSWORD", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ACCESSACCOUNTNBR = table.Column<string>(name: "ACCESS_ACCOUNT_NBR", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ACCESSSHIPPINGKEY = table.Column<string>(name: "ACCESS_SHIPPING_KEY", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LABELIMAGEFORMAT = table.Column<string>(name: "LABEL_IMAGE_FORMAT", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    RATEESTIMATETEMPLATE = table.Column<string>(name: "RATE_ESTIMATE_TEMPLATE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT_GATEWAY_DHL", x => x.SHIPMENTGATEWAYCONFIGID);
                    table.ForeignKey(
                        name: "SGDHL_SGC",
                        column: x => x.SHIPMENTGATEWAYCONFIGID,
                        principalTable: "SHIPMENT_GATEWAY_CONFIG",
                        principalColumn: "SHIPMENT_GATEWAY_CONFIG_ID");
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT_GATEWAY_FEDEX",
                columns: table => new
                {
                    SHIPMENTGATEWAYCONFIGID = table.Column<string>(name: "SHIPMENT_GATEWAY_CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONNECTURL = table.Column<string>(name: "CONNECT_URL", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CONNECTSOAPURL = table.Column<string>(name: "CONNECT_SOAP_URL", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CONNECTTIMEOUT = table.Column<int>(name: "CONNECT_TIMEOUT", type: "int", nullable: true),
                    ACCESSACCOUNTNBR = table.Column<string>(name: "ACCESS_ACCOUNT_NBR", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ACCESSMETERNUMBER = table.Column<string>(name: "ACCESS_METER_NUMBER", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ACCESSUSERKEY = table.Column<string>(name: "ACCESS_USER_KEY", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ACCESSUSERPWD = table.Column<string>(name: "ACCESS_USER_PWD", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LABELIMAGETYPE = table.Column<string>(name: "LABEL_IMAGE_TYPE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    DEFAULTDROPOFFTYPE = table.Column<string>(name: "DEFAULT_DROPOFF_TYPE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DEFAULTPACKAGINGTYPE = table.Column<string>(name: "DEFAULT_PACKAGING_TYPE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    TEMPLATESHIPMENT = table.Column<string>(name: "TEMPLATE_SHIPMENT", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    TEMPLATESUBSCRIPTION = table.Column<string>(name: "TEMPLATE_SUBSCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    RATEESTIMATETEMPLATE = table.Column<string>(name: "RATE_ESTIMATE_TEMPLATE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT_GATEWAY_FEDEX", x => x.SHIPMENTGATEWAYCONFIGID);
                    table.ForeignKey(
                        name: "SGFED_SGC",
                        column: x => x.SHIPMENTGATEWAYCONFIGID,
                        principalTable: "SHIPMENT_GATEWAY_CONFIG",
                        principalColumn: "SHIPMENT_GATEWAY_CONFIG_ID");
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT_GATEWAY_UPS",
                columns: table => new
                {
                    SHIPMENTGATEWAYCONFIGID = table.Column<string>(name: "SHIPMENT_GATEWAY_CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONNECTURL = table.Column<string>(name: "CONNECT_URL", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CONNECTTIMEOUT = table.Column<int>(name: "CONNECT_TIMEOUT", type: "int", nullable: true),
                    SHIPPERNUMBER = table.Column<string>(name: "SHIPPER_NUMBER", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    BILLSHIPPERACCOUNTNUMBER = table.Column<string>(name: "BILL_SHIPPER_ACCOUNT_NUMBER", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ACCESSLICENSENUMBER = table.Column<string>(name: "ACCESS_LICENSE_NUMBER", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ACCESSUSERID = table.Column<string>(name: "ACCESS_USER_ID", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ACCESSPASSWORD = table.Column<string>(name: "ACCESS_PASSWORD", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SAVECERTINFO = table.Column<string>(name: "SAVE_CERT_INFO", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    SAVECERTPATH = table.Column<string>(name: "SAVE_CERT_PATH", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SHIPPERPICKUPTYPE = table.Column<string>(name: "SHIPPER_PICKUP_TYPE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    CUSTOMERCLASSIFICATION = table.Column<string>(name: "CUSTOMER_CLASSIFICATION", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    MAXESTIMATEWEIGHT = table.Column<decimal>(name: "MAX_ESTIMATE_WEIGHT", type: "decimal(18,6)", nullable: true),
                    MINESTIMATEWEIGHT = table.Column<decimal>(name: "MIN_ESTIMATE_WEIGHT", type: "decimal(18,6)", nullable: true),
                    CODALLOWCOD = table.Column<string>(name: "COD_ALLOW_COD", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CODSURCHARGEAMOUNT = table.Column<decimal>(name: "COD_SURCHARGE_AMOUNT", type: "decimal(18,6)", nullable: true),
                    CODSURCHARGECURRENCYUOMID = table.Column<string>(name: "COD_SURCHARGE_CURRENCY_UOM_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    CODSURCHARGEAPPLYTOPACKAGE = table.Column<string>(name: "COD_SURCHARGE_APPLY_TO_PACKAGE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    CODFUNDSCODE = table.Column<string>(name: "COD_FUNDS_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    DEFAULTRETURNLABELMEMO = table.Column<string>(name: "DEFAULT_RETURN_LABEL_MEMO", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DEFAULTRETURNLABELSUBJECT = table.Column<string>(name: "DEFAULT_RETURN_LABEL_SUBJECT", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT_GATEWAY_UPS", x => x.SHIPMENTGATEWAYCONFIGID);
                    table.ForeignKey(
                        name: "SGUPS_SGC",
                        column: x => x.SHIPMENTGATEWAYCONFIGID,
                        principalTable: "SHIPMENT_GATEWAY_CONFIG",
                        principalColumn: "SHIPMENT_GATEWAY_CONFIG_ID");
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT_GATEWAY_USPS",
                columns: table => new
                {
                    SHIPMENTGATEWAYCONFIGID = table.Column<string>(name: "SHIPMENT_GATEWAY_CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONNECTURL = table.Column<string>(name: "CONNECT_URL", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CONNECTURLLABELS = table.Column<string>(name: "CONNECT_URL_LABELS", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CONNECTTIMEOUT = table.Column<int>(name: "CONNECT_TIMEOUT", type: "int", nullable: true),
                    ACCESSUSERID = table.Column<string>(name: "ACCESS_USER_ID", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ACCESSPASSWORD = table.Column<string>(name: "ACCESS_PASSWORD", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    MAXESTIMATEWEIGHT = table.Column<int>(name: "MAX_ESTIMATE_WEIGHT", type: "int", nullable: true),
                    TEST = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT_GATEWAY_USPS", x => x.SHIPMENTGATEWAYCONFIGID);
                    table.ForeignKey(
                        name: "SGUSPS_SGC",
                        column: x => x.SHIPMENTGATEWAYCONFIGID,
                        principalTable: "SHIPMENT_GATEWAY_CONFIG",
                        principalColumn: "SHIPMENT_GATEWAY_CONFIG_ID");
                });

            migrationBuilder.CreateTable(
                name: "CONTENT_PURPOSE_OPERATION",
                columns: table => new
                {
                    CONTENTPURPOSETYPEID = table.Column<string>(name: "CONTENT_PURPOSE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTENTOPERATIONID = table.Column<string>(name: "CONTENT_OPERATION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRIVILEGEENUMID = table.Column<string>(name: "PRIVILEGE_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTENT_PURPOSE_OPERATION", x => new { x.CONTENTPURPOSETYPEID, x.CONTENTOPERATIONID, x.ROLETYPEID, x.STATUSID, x.PRIVILEGEENUMID });
                    table.ForeignKey(
                        name: "CONTENT_PRO_OPER",
                        column: x => x.CONTENTOPERATIONID,
                        principalTable: "CONTENT_OPERATION",
                        principalColumn: "CONTENT_OPERATION_ID");
                    table.ForeignKey(
                        name: "CONTENT_PRO_PEI",
                        column: x => x.PRIVILEGEENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "CONTENT_PRO_RLT",
                        column: x => x.ROLETYPEID,
                        principalTable: "ROLE_TYPE",
                        principalColumn: "ROLE_TYPE_ID");
                    table.ForeignKey(
                        name: "CONTENT_PRO_STI",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "CONTENT_PRO_TYPE",
                        column: x => x.CONTENTPURPOSETYPEID,
                        principalTable: "CONTENT_PURPOSE_TYPE",
                        principalColumn: "CONTENT_PURPOSE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "STATUS_VALID_CHANGE",
                columns: table => new
                {
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSIDTO = table.Column<string>(name: "STATUS_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONDITIONEXPRESSION = table.Column<string>(name: "CONDITION_EXPRESSION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    TRANSITIONNAME = table.Column<string>(name: "TRANSITION_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_STATUS_VALID_CHANGE", x => new { x.STATUSID, x.STATUSIDTO });
                    table.ForeignKey(
                        name: "STATUS_CHG_MAIN",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "STATUS_CHG_TO",
                        column: x => x.STATUSIDTO,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "SURVEY_RESPONSE",
                columns: table => new
                {
                    SURVEYRESPONSEID = table.Column<string>(name: "SURVEY_RESPONSE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SURVEYID = table.Column<string>(name: "SURVEY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RESPONSEDATE = table.Column<DateTime>(name: "RESPONSE_DATE", type: "datetime", nullable: true),
                    LASTMODIFIEDDATE = table.Column<DateTime>(name: "LAST_MODIFIED_DATE", type: "datetime", nullable: true),
                    REFERENCEID = table.Column<string>(name: "REFERENCE_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    GENERALFEEDBACK = table.Column<string>(name: "GENERAL_FEEDBACK", type: "text", nullable: true),
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SURVEY_RESPONSE", x => x.SURVEYRESPONSEID);
                    table.ForeignKey(
                        name: "SRVYRSP_SRVY",
                        column: x => x.SURVEYID,
                        principalTable: "SURVEY",
                        principalColumn: "SURVEY_ID");
                    table.ForeignKey(
                        name: "SRVYRSP_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "SURVEY_MULTI_RESP_COLUMN",
                columns: table => new
                {
                    SURVEYID = table.Column<string>(name: "SURVEY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SURVEYMULTIRESPID = table.Column<string>(name: "SURVEY_MULTI_RESP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SURVEYMULTIRESPCOLID = table.Column<string>(name: "SURVEY_MULTI_RESP_COL_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COLUMNTITLE = table.Column<string>(name: "COLUMN_TITLE", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SURVEY_MULTI_RESP_COLUMN", x => new { x.SURVEYID, x.SURVEYMULTIRESPID, x.SURVEYMULTIRESPCOLID });
                    table.ForeignKey(
                        name: "SRVYMRSPCL_SMRESP",
                        columns: x => new { x.SURVEYID, x.SURVEYMULTIRESPID },
                        principalTable: "SURVEY_MULTI_RESP",
                        principalColumns: new[] { "SURVEY_ID", "SURVEY_MULTI_RESP_ID" });
                });

            migrationBuilder.CreateTable(
                name: "TECH_DATA_CALENDAR_EXC_DAY",
                columns: table => new
                {
                    CALENDARID = table.Column<string>(name: "CALENDAR_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    EXCEPTIONDATESTARTTIME = table.Column<DateTime>(name: "EXCEPTION_DATE_START_TIME", type: "datetime", nullable: false),
                    EXCEPTIONCAPACITY = table.Column<decimal>(name: "EXCEPTION_CAPACITY", type: "decimal(18,6)", nullable: true),
                    USEDCAPACITY = table.Column<decimal>(name: "USED_CAPACITY", type: "decimal(18,6)", nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TECH_DATA_CALENDAR_EXC_DAY", x => new { x.CALENDARID, x.EXCEPTIONDATESTARTTIME });
                    table.ForeignKey(
                        name: "EXC_DAY_CALENDAR",
                        column: x => x.CALENDARID,
                        principalTable: "TECH_DATA_CALENDAR",
                        principalColumn: "CALENDAR_ID");
                });

            migrationBuilder.CreateTable(
                name: "TECH_DATA_CALENDAR_EXC_WEEK",
                columns: table => new
                {
                    CALENDARID = table.Column<string>(name: "CALENDAR_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    EXCEPTIONDATESTART = table.Column<DateTime>(name: "EXCEPTION_DATE_START", type: "datetime", nullable: false),
                    CALENDARWEEKID = table.Column<string>(name: "CALENDAR_WEEK_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TECH_DATA_CALENDAR_EXC_WEEK", x => new { x.CALENDARID, x.EXCEPTIONDATESTART });
                    table.ForeignKey(
                        name: "EXC_WEEK_CALENDAR",
                        column: x => x.CALENDARID,
                        principalTable: "TECH_DATA_CALENDAR",
                        principalColumn: "CALENDAR_ID");
                    table.ForeignKey(
                        name: "EXC_WEEK_WEEK",
                        column: x => x.CALENDARWEEKID,
                        principalTable: "TECH_DATA_CALENDAR_WEEK",
                        principalColumn: "CALENDAR_WEEK_ID");
                });

            migrationBuilder.CreateTable(
                name: "TESTING_ITEM",
                columns: table => new
                {
                    TESTINGID = table.Column<string>(name: "TESTING_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TESTINGSEQID = table.Column<string>(name: "TESTING_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TESTINGHISTORY = table.Column<string>(name: "TESTING_HISTORY", type: "text", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TESTING_ITEM", x => new { x.TESTINGID, x.TESTINGSEQID });
                    table.ForeignKey(
                        name: "TESTING_IT_TEST",
                        column: x => x.TESTINGID,
                        principalTable: "TESTING",
                        principalColumn: "TESTING_ID");
                });

            migrationBuilder.CreateTable(
                name: "TESTING_NODE_MEMBER",
                columns: table => new
                {
                    TESTINGNODEID = table.Column<string>(name: "TESTING_NODE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TESTINGID = table.Column<string>(name: "TESTING_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    EXTENDFROMDATE = table.Column<DateTime>(name: "EXTEND_FROM_DATE", type: "datetime", nullable: true),
                    EXTENDTHRUDATE = table.Column<DateTime>(name: "EXTEND_THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TESTING_NODE_MEMBER", x => new { x.TESTINGNODEID, x.TESTINGID, x.FROMDATE });
                    table.ForeignKey(
                        name: "TESTING_NMBR_TEST",
                        column: x => x.TESTINGID,
                        principalTable: "TESTING",
                        principalColumn: "TESTING_ID");
                    table.ForeignKey(
                        name: "TEST_NMBR_NODE",
                        column: x => x.TESTINGNODEID,
                        principalTable: "TESTING_NODE",
                        principalColumn: "TESTING_NODE_ID");
                });

            migrationBuilder.CreateTable(
                name: "COST_COMPONENT_CALC",
                columns: table => new
                {
                    COSTCOMPONENTCALCID = table.Column<string>(name: "COST_COMPONENT_CALC_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    COSTGLACCOUNTTYPEID = table.Column<string>(name: "COST_GL_ACCOUNT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    OFFSETTINGGLACCOUNTTYPEID = table.Column<string>(name: "OFFSETTING_GL_ACCOUNT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FIXEDCOST = table.Column<decimal>(name: "FIXED_COST", type: "decimal(18,2)", nullable: true),
                    VARIABLECOST = table.Column<decimal>(name: "VARIABLE_COST", type: "decimal(18,2)", nullable: true),
                    PERMILLISECOND = table.Column<int>(name: "PER_MILLI_SECOND", type: "int", nullable: true),
                    CURRENCYUOMID = table.Column<string>(name: "CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    COSTCUSTOMMETHODID = table.Column<string>(name: "COST_CUSTOM_METHOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COST_COMPONENT_CALC", x => x.COSTCOMPONENTCALCID);
                    table.ForeignKey(
                        name: "COST_COM_CGLAT",
                        column: x => x.COSTGLACCOUNTTYPEID,
                        principalTable: "GL_ACCOUNT_TYPE",
                        principalColumn: "GL_ACCOUNT_TYPE_ID");
                    table.ForeignKey(
                        name: "COST_COM_CMET",
                        column: x => x.COSTCUSTOMMETHODID,
                        principalTable: "CUSTOM_METHOD",
                        principalColumn: "CUSTOM_METHOD_ID");
                    table.ForeignKey(
                        name: "COST_COM_CUOM",
                        column: x => x.CURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "COST_COM_OGLAT",
                        column: x => x.OFFSETTINGGLACCOUNTTYPEID,
                        principalTable: "GL_ACCOUNT_TYPE",
                        principalColumn: "GL_ACCOUNT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "GEO_POINT",
                columns: table => new
                {
                    GEOPOINTID = table.Column<string>(name: "GEO_POINT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GEOPOINTTYPEENUMID = table.Column<string>(name: "GEO_POINT_TYPE_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DATASOURCEID = table.Column<string>(name: "DATA_SOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LATITUDE = table.Column<decimal>(type: "decimal(18,6)", nullable: false),
                    LONGITUDE = table.Column<decimal>(type: "decimal(18,6)", nullable: false),
                    ELEVATION = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    ELEVATIONUOMID = table.Column<string>(name: "ELEVATION_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INFORMATION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GEO_POINT", x => x.GEOPOINTID);
                    table.ForeignKey(
                        name: "GEOPOINT_DTSRC",
                        column: x => x.DATASOURCEID,
                        principalTable: "DATA_SOURCE",
                        principalColumn: "DATA_SOURCE_ID");
                    table.ForeignKey(
                        name: "GEOPOINT_TYPE",
                        column: x => x.GEOPOINTTYPEENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "GPT_ELEV_UOM",
                        column: x => x.ELEVATIONUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                });

            migrationBuilder.CreateTable(
                name: "MARKETING_CAMPAIGN",
                columns: table => new
                {
                    MARKETINGCAMPAIGNID = table.Column<string>(name: "MARKETING_CAMPAIGN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTCAMPAIGNID = table.Column<string>(name: "PARENT_CAMPAIGN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CAMPAIGNNAME = table.Column<string>(name: "CAMPAIGN_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CAMPAIGNSUMMARY = table.Column<string>(name: "CAMPAIGN_SUMMARY", type: "text", nullable: true),
                    BUDGETEDCOST = table.Column<decimal>(name: "BUDGETED_COST", type: "decimal(18,2)", nullable: true),
                    ACTUALCOST = table.Column<decimal>(name: "ACTUAL_COST", type: "decimal(18,2)", nullable: true),
                    ESTIMATEDCOST = table.Column<decimal>(name: "ESTIMATED_COST", type: "decimal(18,2)", nullable: true),
                    CURRENCYUOMID = table.Column<string>(name: "CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    ISACTIVE = table.Column<string>(name: "IS_ACTIVE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    CONVERTEDLEADS = table.Column<string>(name: "CONVERTED_LEADS", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    EXPECTEDRESPONSEPERCENT = table.Column<double>(name: "EXPECTED_RESPONSE_PERCENT", type: "float", nullable: true),
                    EXPECTEDREVENUE = table.Column<decimal>(name: "EXPECTED_REVENUE", type: "decimal(18,2)", nullable: true),
                    NUMSENT = table.Column<int>(name: "NUM_SENT", type: "int", nullable: true),
                    STARTDATE = table.Column<DateTime>(name: "START_DATE", type: "datetime", nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MARKETING_CAMPAIGN", x => x.MARKETINGCAMPAIGNID);
                    table.ForeignKey(
                        name: "MKTGCPN_CUOM",
                        column: x => x.CURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "MKTGCPN_PRNT",
                        column: x => x.PARENTCAMPAIGNID,
                        principalTable: "MARKETING_CAMPAIGN",
                        principalColumn: "MARKETING_CAMPAIGN_ID");
                    table.ForeignKey(
                        name: "MKTGCPN_STS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "PERIOD_TYPE",
                columns: table => new
                {
                    PERIODTYPEID = table.Column<string>(name: "PERIOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PERIODLENGTH = table.Column<int>(name: "PERIOD_LENGTH", type: "int", nullable: true),
                    UOMID = table.Column<string>(name: "UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PERIOD_TYPE", x => x.PERIODTYPEID);
                    table.ForeignKey(
                        name: "PER_TYPE_UOM",
                        column: x => x.UOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_FEATURE",
                columns: table => new
                {
                    PRODUCTFEATUREID = table.Column<string>(name: "PRODUCT_FEATURE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTFEATURETYPEID = table.Column<string>(name: "PRODUCT_FEATURE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTFEATURECATEGORYID = table.Column<string>(name: "PRODUCT_FEATURE_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    UOMID = table.Column<string>(name: "UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    NUMBERSPECIFIED = table.Column<decimal>(name: "NUMBER_SPECIFIED", type: "decimal(18,6)", nullable: true),
                    DEFAULTAMOUNT = table.Column<decimal>(name: "DEFAULT_AMOUNT", type: "decimal(18,2)", nullable: true),
                    DEFAULTSEQUENCENUM = table.Column<int>(name: "DEFAULT_SEQUENCE_NUM", type: "int", nullable: true),
                    ABBREV = table.Column<string>(type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    IDCODE = table.Column<string>(name: "ID_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_FEATURE", x => x.PRODUCTFEATUREID);
                    table.ForeignKey(
                        name: "PROD_FEAT_CATEGORY",
                        column: x => x.PRODUCTFEATURECATEGORYID,
                        principalTable: "PRODUCT_FEATURE_CATEGORY",
                        principalColumn: "PRODUCT_FEATURE_CATEGORY_ID");
                    table.ForeignKey(
                        name: "PROD_FEAT_TYPE",
                        column: x => x.PRODUCTFEATURETYPEID,
                        principalTable: "PRODUCT_FEATURE_TYPE",
                        principalColumn: "PRODUCT_FEATURE_TYPE_ID");
                    table.ForeignKey(
                        name: "PROD_FEAT_UOM",
                        column: x => x.UOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_METER_TYPE",
                columns: table => new
                {
                    PRODUCTMETERTYPEID = table.Column<string>(name: "PRODUCT_METER_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DEFAULTUOMID = table.Column<string>(name: "DEFAULT_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_METER_TYPE", x => x.PRODUCTMETERTYPEID);
                    table.ForeignKey(
                        name: "PRODMTRTP_DUOM",
                        column: x => x.DEFAULTUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT_BOX_TYPE",
                columns: table => new
                {
                    SHIPMENTBOXTYPEID = table.Column<string>(name: "SHIPMENT_BOX_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DIMENSIONUOMID = table.Column<string>(name: "DIMENSION_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    BOXLENGTH = table.Column<decimal>(name: "BOX_LENGTH", type: "decimal(18,6)", nullable: true),
                    BOXWIDTH = table.Column<decimal>(name: "BOX_WIDTH", type: "decimal(18,6)", nullable: true),
                    BOXHEIGHT = table.Column<decimal>(name: "BOX_HEIGHT", type: "decimal(18,6)", nullable: true),
                    WEIGHTUOMID = table.Column<string>(name: "WEIGHT_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    BOXWEIGHT = table.Column<decimal>(name: "BOX_WEIGHT", type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT_BOX_TYPE", x => x.SHIPMENTBOXTYPEID);
                    table.ForeignKey(
                        name: "SHMT_BXTP_DUOM",
                        column: x => x.DIMENSIONUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "SHMT_BXTP_WUOM",
                        column: x => x.WEIGHTUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                });

            migrationBuilder.CreateTable(
                name: "UOM_CONVERSION",
                columns: table => new
                {
                    UOMID = table.Column<string>(name: "UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    UOMIDTO = table.Column<string>(name: "UOM_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONVERSIONFACTOR = table.Column<double>(name: "CONVERSION_FACTOR", type: "float", nullable: true),
                    CUSTOMMETHODID = table.Column<string>(name: "CUSTOM_METHOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DECIMALSCALE = table.Column<int>(name: "DECIMAL_SCALE", type: "int", nullable: true),
                    ROUNDINGMODE = table.Column<string>(name: "ROUNDING_MODE", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UOM_CONVERSION", x => new { x.UOMID, x.UOMIDTO });
                    table.ForeignKey(
                        name: "UOM_CONV_MAIN",
                        column: x => x.UOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "UOM_CONV_TO",
                        column: x => x.UOMIDTO,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "UOM_CUSTOM_METHOD",
                        column: x => x.CUSTOMMETHODID,
                        principalTable: "CUSTOM_METHOD",
                        principalColumn: "CUSTOM_METHOD_ID");
                });

            migrationBuilder.CreateTable(
                name: "UOM_CONVERSION_DATED",
                columns: table => new
                {
                    UOMID = table.Column<string>(name: "UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    UOMIDTO = table.Column<string>(name: "UOM_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    CONVERSIONFACTOR = table.Column<double>(name: "CONVERSION_FACTOR", type: "float", nullable: true),
                    CUSTOMMETHODID = table.Column<string>(name: "CUSTOM_METHOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DECIMALSCALE = table.Column<int>(name: "DECIMAL_SCALE", type: "int", nullable: true),
                    ROUNDINGMODE = table.Column<string>(name: "ROUNDING_MODE", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PURPOSEENUMID = table.Column<string>(name: "PURPOSE_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UOM_CONVERSION_DATED", x => new { x.UOMID, x.UOMIDTO, x.FROMDATE });
                    table.ForeignKey(
                        name: "DATE_UOM_CONV_MAIN",
                        column: x => x.UOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "DATE_UOM_CONV_TO",
                        column: x => x.UOMIDTO,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "UOMD_CUSTOM_METHOD",
                        column: x => x.CUSTOMMETHODID,
                        principalTable: "CUSTOM_METHOD",
                        principalColumn: "CUSTOM_METHOD_ID");
                    table.ForeignKey(
                        name: "UOMD_PURPOSE_ENUM",
                        column: x => x.PURPOSEENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                });

            migrationBuilder.CreateTable(
                name: "UOM_GROUP",
                columns: table => new
                {
                    UOMGROUPID = table.Column<string>(name: "UOM_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    UOMID = table.Column<string>(name: "UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UOM_GROUP", x => new { x.UOMGROUPID, x.UOMID });
                    table.ForeignKey(
                        name: "UOM_GROUP_UOM",
                        column: x => x.UOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                });

            migrationBuilder.CreateTable(
                name: "VISIT",
                columns: table => new
                {
                    VISITID = table.Column<string>(name: "VISIT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    VISITORID = table.Column<string>(name: "VISITOR_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    USERLOGINID = table.Column<string>(name: "USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    USERCREATED = table.Column<string>(name: "USER_CREATED", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    SESSIONID = table.Column<string>(name: "SESSION_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    SERVERIPADDRESS = table.Column<string>(name: "SERVER_IP_ADDRESS", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SERVERHOSTNAME = table.Column<string>(name: "SERVER_HOST_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    WEBAPPNAME = table.Column<string>(name: "WEBAPP_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    INITIALLOCALE = table.Column<string>(name: "INITIAL_LOCALE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    INITIALREQUEST = table.Column<string>(name: "INITIAL_REQUEST", type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    INITIALREFERRER = table.Column<string>(name: "INITIAL_REFERRER", type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    INITIALUSERAGENT = table.Column<string>(name: "INITIAL_USER_AGENT", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    USERAGENTID = table.Column<string>(name: "USER_AGENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CLIENTIPADDRESS = table.Column<string>(name: "CLIENT_IP_ADDRESS", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    CLIENTHOSTNAME = table.Column<string>(name: "CLIENT_HOST_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CLIENTUSER = table.Column<string>(name: "CLIENT_USER", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    CLIENTIPISPNAME = table.Column<string>(name: "CLIENT_IP_ISP_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    CLIENTIPPOSTALCODE = table.Column<string>(name: "CLIENT_IP_POSTAL_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    COOKIE = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    CLIENTIPSTATEPROVGEOID = table.Column<string>(name: "CLIENT_IP_STATE_PROV_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CLIENTIPCOUNTRYGEOID = table.Column<string>(name: "CLIENT_IP_COUNTRY_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VISIT", x => x.VISITID);
                    table.ForeignKey(
                        name: "VISIT_USER_AGNT",
                        column: x => x.USERAGENTID,
                        principalTable: "USER_AGENT",
                        principalColumn: "USER_AGENT_ID");
                    table.ForeignKey(
                        name: "VISIT_VISITOR",
                        column: x => x.VISITORID,
                        principalTable: "VISITOR",
                        principalColumn: "VISITOR_ID");
                });

            migrationBuilder.CreateTable(
                name: "VISUAL_THEME_RESOURCE",
                columns: table => new
                {
                    VISUALTHEMEID = table.Column<string>(name: "VISUAL_THEME_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    RESOURCETYPEENUMID = table.Column<string>(name: "RESOURCE_TYPE_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SEQUENCEID = table.Column<string>(name: "SEQUENCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    RESOURCEVALUE = table.Column<string>(name: "RESOURCE_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VISUAL_THEME_RESOURCE", x => new { x.VISUALTHEMEID, x.RESOURCETYPEENUMID, x.SEQUENCEID });
                    table.ForeignKey(
                        name: "VT_RES_THEME",
                        column: x => x.VISUALTHEMEID,
                        principalTable: "VISUAL_THEME",
                        principalColumn: "VISUAL_THEME_ID");
                    table.ForeignKey(
                        name: "VT_RES_TYPE_ENUM",
                        column: x => x.RESOURCETYPEENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIN_ACCOUNT_TYPE_ATTR",
                columns: table => new
                {
                    FINACCOUNTTYPEID = table.Column<string>(name: "FIN_ACCOUNT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIN_ACCOUNT_TYPE_ATTR", x => new { x.FINACCOUNTTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "FINACCT_TYPE_ATTR",
                        column: x => x.FINACCOUNTTYPEID,
                        principalTable: "FIN_ACCOUNT_TYPE",
                        principalColumn: "FIN_ACCOUNT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "SURVEY_QUESTION_OPTION",
                columns: table => new
                {
                    SURVEYQUESTIONID = table.Column<string>(name: "SURVEY_QUESTION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SURVEYOPTIONSEQID = table.Column<string>(name: "SURVEY_OPTION_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    AMOUNTBASE = table.Column<decimal>(name: "AMOUNT_BASE", type: "decimal(18,2)", nullable: true),
                    AMOUNTBASEUOMID = table.Column<string>(name: "AMOUNT_BASE_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    WEIGHTFACTOR = table.Column<double>(name: "WEIGHT_FACTOR", type: "float", nullable: true),
                    DURATION = table.Column<int>(type: "int", nullable: true),
                    DURATIONUOMID = table.Column<string>(name: "DURATION_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SURVEY_QUESTION_OPTION", x => new { x.SURVEYQUESTIONID, x.SURVEYOPTIONSEQID });
                    table.ForeignKey(
                        name: "SRVYQSTOP_SRVYQ",
                        column: x => x.SURVEYQUESTIONID,
                        principalTable: "SURVEY_QUESTION",
                        principalColumn: "SURVEY_QUESTION_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVOICE_ITEM_TYPE_ATTR",
                columns: table => new
                {
                    INVOICEITEMTYPEID = table.Column<string>(name: "INVOICE_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVOICE_ITEM_TYPE_ATTR", x => new { x.INVOICEITEMTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "INVOICE_ITEM_TATR",
                        column: x => x.INVOICEITEMTYPEID,
                        principalTable: "INVOICE_ITEM_TYPE",
                        principalColumn: "INVOICE_ITEM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVOICE_ITEM_TYPE_MAP",
                columns: table => new
                {
                    INVOICEITEMMAPKEY = table.Column<string>(name: "INVOICE_ITEM_MAP_KEY", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVOICETYPEID = table.Column<string>(name: "INVOICE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVOICEITEMTYPEID = table.Column<string>(name: "INVOICE_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVOICE_ITEM_TYPE_MAP", x => new { x.INVOICEITEMMAPKEY, x.INVOICETYPEID });
                    table.ForeignKey(
                        name: "INVITMMAP_INVTYP",
                        column: x => x.INVOICETYPEID,
                        principalTable: "INVOICE_TYPE",
                        principalColumn: "INVOICE_TYPE_ID");
                    table.ForeignKey(
                        name: "INVOICE_ITEM_MAP",
                        column: x => x.INVOICEITEMTYPEID,
                        principalTable: "INVOICE_ITEM_TYPE",
                        principalColumn: "INVOICE_ITEM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "POSTAL_ADDRESS",
                columns: table => new
                {
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TONAME = table.Column<string>(name: "TO_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ATTNNAME = table.Column<string>(name: "ATTN_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ADDRESS1 = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ADDRESS2 = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    HOUSENUMBER = table.Column<int>(name: "HOUSE_NUMBER", type: "int", nullable: true),
                    HOUSENUMBEREXT = table.Column<string>(name: "HOUSE_NUMBER_EXT", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    DIRECTIONS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CITY = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CITYGEOID = table.Column<string>(name: "CITY_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    POSTALCODE = table.Column<string>(name: "POSTAL_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    POSTALCODEEXT = table.Column<string>(name: "POSTAL_CODE_EXT", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    COUNTRYGEOID = table.Column<string>(name: "COUNTRY_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATEPROVINCEGEOID = table.Column<string>(name: "STATE_PROVINCE_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    COUNTYGEOID = table.Column<string>(name: "COUNTY_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    MUNICIPALITYGEOID = table.Column<string>(name: "MUNICIPALITY_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    POSTALCODEGEOID = table.Column<string>(name: "POSTAL_CODE_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    GEOPOINTID = table.Column<string>(name: "GEO_POINT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_POSTAL_ADDRESS", x => x.CONTACTMECHID);
                    table.ForeignKey(
                        name: "POST_ADDR_CGEO",
                        column: x => x.COUNTRYGEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "POST_ADDR_CITY",
                        column: x => x.CITYGEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "POST_ADDR_CMECH",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "POST_ADDR_CNTG",
                        column: x => x.COUNTYGEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "POST_ADDR_GEOPT",
                        column: x => x.GEOPOINTID,
                        principalTable: "GEO_POINT",
                        principalColumn: "GEO_POINT_ID");
                    table.ForeignKey(
                        name: "POST_ADDR_MNCP",
                        column: x => x.MUNICIPALITYGEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "POST_ADDR_PCGEO",
                        column: x => x.POSTALCODEGEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "POST_ADDR_SPGEO",
                        column: x => x.STATEPROVINCEGEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                });

            migrationBuilder.CreateTable(
                name: "MARKETING_CAMPAIGN_PRICE",
                columns: table => new
                {
                    MARKETINGCAMPAIGNID = table.Column<string>(name: "MARKETING_CAMPAIGN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPRICERULEID = table.Column<string>(name: "PRODUCT_PRICE_RULE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MARKETING_CAMPAIGN_PRICE", x => new { x.MARKETINGCAMPAIGNID, x.PRODUCTPRICERULEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "MKTGCPN_PRICE_MC",
                        column: x => x.MARKETINGCAMPAIGNID,
                        principalTable: "MARKETING_CAMPAIGN",
                        principalColumn: "MARKETING_CAMPAIGN_ID");
                    table.ForeignKey(
                        name: "MKTGCPN_PRICE_PP",
                        column: x => x.PRODUCTPRICERULEID,
                        principalTable: "PRODUCT_PRICE_RULE",
                        principalColumn: "PRODUCT_PRICE_RULE_ID");
                });

            migrationBuilder.CreateTable(
                name: "TRACKING_CODE",
                columns: table => new
                {
                    TRACKINGCODEID = table.Column<string>(name: "TRACKING_CODE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TRACKINGCODETYPEID = table.Column<string>(name: "TRACKING_CODE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    MARKETINGCAMPAIGNID = table.Column<string>(name: "MARKETING_CAMPAIGN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    REDIRECTURL = table.Column<string>(name: "REDIRECT_URL", type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    OVERRIDELOGO = table.Column<string>(name: "OVERRIDE_LOGO", type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    OVERRIDECSS = table.Column<string>(name: "OVERRIDE_CSS", type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    PRODCATALOGID = table.Column<string>(name: "PROD_CATALOG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    TRACKABLELIFETIME = table.Column<int>(name: "TRACKABLE_LIFETIME", type: "int", nullable: true),
                    BILLABLELIFETIME = table.Column<int>(name: "BILLABLE_LIFETIME", type: "int", nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    GROUPID = table.Column<string>(name: "GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SUBGROUPID = table.Column<string>(name: "SUBGROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CREATEDDATE = table.Column<DateTime>(name: "CREATED_DATE", type: "datetime", nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDDATE = table.Column<DateTime>(name: "LAST_MODIFIED_DATE", type: "datetime", nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TRACKING_CODE", x => x.TRACKINGCODEID);
                    table.ForeignKey(
                        name: "TKNG_COD_MKCMPN",
                        column: x => x.MARKETINGCAMPAIGNID,
                        principalTable: "MARKETING_CAMPAIGN",
                        principalColumn: "MARKETING_CAMPAIGN_ID");
                    table.ForeignKey(
                        name: "TKNG_COD_TYP",
                        column: x => x.TRACKINGCODETYPEID,
                        principalTable: "TRACKING_CODE_TYPE",
                        principalColumn: "TRACKING_CODE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_FEATURE_GROUP_APPL",
                columns: table => new
                {
                    PRODUCTFEATUREGROUPID = table.Column<string>(name: "PRODUCT_FEATURE_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTFEATUREID = table.Column<string>(name: "PRODUCT_FEATURE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_FEATURE_GROUP_APPL", x => new { x.PRODUCTFEATUREGROUPID, x.PRODUCTFEATUREID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PROD_FGAPP_FEATURE",
                        column: x => x.PRODUCTFEATUREID,
                        principalTable: "PRODUCT_FEATURE",
                        principalColumn: "PRODUCT_FEATURE_ID");
                    table.ForeignKey(
                        name: "PROD_FGAPP_PRODUCT",
                        column: x => x.PRODUCTFEATUREGROUPID,
                        principalTable: "PRODUCT_FEATURE_GROUP",
                        principalColumn: "PRODUCT_FEATURE_GROUP_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_FEATURE_IACTN",
                columns: table => new
                {
                    PRODUCTFEATUREID = table.Column<string>(name: "PRODUCT_FEATURE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTFEATUREIDTO = table.Column<string>(name: "PRODUCT_FEATURE_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTFEATUREIACTNTYPEID = table.Column<string>(name: "PRODUCT_FEATURE_IACTN_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_FEATURE_IACTN", x => new { x.PRODUCTFEATUREID, x.PRODUCTFEATUREIDTO });
                    table.ForeignKey(
                        name: "PROD_FICTN_AFEAT",
                        column: x => x.PRODUCTFEATUREIDTO,
                        principalTable: "PRODUCT_FEATURE",
                        principalColumn: "PRODUCT_FEATURE_ID");
                    table.ForeignKey(
                        name: "PROD_FICTN_MFEAT",
                        column: x => x.PRODUCTFEATUREID,
                        principalTable: "PRODUCT_FEATURE",
                        principalColumn: "PRODUCT_FEATURE_ID");
                    table.ForeignKey(
                        name: "PROD_FICTN_TYPE",
                        column: x => x.PRODUCTFEATUREIACTNTYPEID,
                        principalTable: "PRODUCT_FEATURE_IACTN_TYPE",
                        principalColumn: "PRODUCT_FEATURE_IACTN_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "SERVER_HIT",
                columns: table => new
                {
                    VISITID = table.Column<string>(name: "VISIT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    HITSTARTDATETIME = table.Column<DateTime>(name: "HIT_START_DATE_TIME", type: "datetime", nullable: false),
                    HITTYPEID = table.Column<string>(name: "HIT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    NUMOFBYTES = table.Column<int>(name: "NUM_OF_BYTES", type: "int", nullable: true),
                    RUNNINGTIMEMILLIS = table.Column<int>(name: "RUNNING_TIME_MILLIS", type: "int", nullable: true),
                    USERLOGINID = table.Column<string>(name: "USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    REQUESTURL = table.Column<string>(name: "REQUEST_URL", type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    REFERRERURL = table.Column<string>(name: "REFERRER_URL", type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    SERVERIPADDRESS = table.Column<string>(name: "SERVER_IP_ADDRESS", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SERVERHOSTNAME = table.Column<string>(name: "SERVER_HOST_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    INTERNALCONTENTID = table.Column<string>(name: "INTERNAL_CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    IDBYIPCONTACTMECHID = table.Column<string>(name: "ID_BY_IP_CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    REFBYWEBCONTACTMECHID = table.Column<string>(name: "REF_BY_WEB_CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SERVER_HIT", x => new { x.VISITID, x.CONTENTID, x.HITSTARTDATETIME, x.HITTYPEID });
                    table.ForeignKey(
                        name: "SERVER_HIT_SHTYP",
                        column: x => x.HITTYPEID,
                        principalTable: "SERVER_HIT_TYPE",
                        principalColumn: "HIT_TYPE_ID");
                    table.ForeignKey(
                        name: "SERVER_HIT_VISIT",
                        column: x => x.VISITID,
                        principalTable: "VISIT",
                        principalColumn: "VISIT_ID");
                });

            migrationBuilder.CreateTable(
                name: "SURVEY_QUESTION_APPL",
                columns: table => new
                {
                    SURVEYID = table.Column<string>(name: "SURVEY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SURVEYQUESTIONID = table.Column<string>(name: "SURVEY_QUESTION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    SURVEYPAGESEQID = table.Column<string>(name: "SURVEY_PAGE_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SURVEYMULTIRESPID = table.Column<string>(name: "SURVEY_MULTI_RESP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SURVEYMULTIRESPCOLID = table.Column<string>(name: "SURVEY_MULTI_RESP_COL_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    REQUIREDFIELD = table.Column<string>(name: "REQUIRED_FIELD", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    EXTERNALFIELDREF = table.Column<string>(name: "EXTERNAL_FIELD_REF", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    WITHSURVEYQUESTIONID = table.Column<string>(name: "WITH_SURVEY_QUESTION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    WITHSURVEYOPTIONSEQID = table.Column<string>(name: "WITH_SURVEY_OPTION_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SURVEY_QUESTION_APPL", x => new { x.SURVEYID, x.SURVEYQUESTIONID, x.FROMDATE });
                    table.ForeignKey(
                        name: "SRVYQSTAPL_SRVY",
                        column: x => x.SURVEYID,
                        principalTable: "SURVEY",
                        principalColumn: "SURVEY_ID");
                    table.ForeignKey(
                        name: "SRVYQSTAPL_SRVYQ",
                        column: x => x.SURVEYQUESTIONID,
                        principalTable: "SURVEY_QUESTION",
                        principalColumn: "SURVEY_QUESTION_ID");
                    table.ForeignKey(
                        name: "SRVYQSTAPL_SVQO",
                        columns: x => new { x.WITHSURVEYQUESTIONID, x.WITHSURVEYOPTIONSEQID },
                        principalTable: "SURVEY_QUESTION_OPTION",
                        principalColumns: new[] { "SURVEY_QUESTION_ID", "SURVEY_OPTION_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "BILLING_ACCOUNT",
                columns: table => new
                {
                    BILLINGACCOUNTID = table.Column<string>(name: "BILLING_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ACCOUNTLIMIT = table.Column<decimal>(name: "ACCOUNT_LIMIT", type: "decimal(18,2)", nullable: true),
                    ACCOUNTCURRENCYUOMID = table.Column<string>(name: "ACCOUNT_CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    EXTERNALACCOUNTID = table.Column<string>(name: "EXTERNAL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BILLING_ACCOUNT", x => x.BILLINGACCOUNTID);
                    table.ForeignKey(
                        name: "BILLACCT_CMECH",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "BILLACCT_CUOM",
                        column: x => x.ACCOUNTCURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "BILLACCT_PADDR",
                        column: x => x.CONTACTMECHID,
                        principalTable: "POSTAL_ADDRESS",
                        principalColumn: "CONTACT_MECH_ID");
                });

            migrationBuilder.CreateTable(
                name: "POSTAL_ADDRESS_BOUNDARY",
                columns: table => new
                {
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GEOID = table.Column<string>(name: "GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_POSTAL_ADDRESS_BOUNDARY", x => new { x.CONTACTMECHID, x.GEOID });
                    table.ForeignKey(
                        name: "POST_ADDR_BNDRY",
                        column: x => x.CONTACTMECHID,
                        principalTable: "POSTAL_ADDRESS",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "POST_ADDR_BNDRYGEO",
                        column: x => x.GEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                });

            migrationBuilder.CreateTable(
                name: "TRACKING_CODE_VISIT",
                columns: table => new
                {
                    TRACKINGCODEID = table.Column<string>(name: "TRACKING_CODE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    VISITID = table.Column<string>(name: "VISIT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    SOURCEENUMID = table.Column<string>(name: "SOURCE_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TRACKING_CODE_VISIT", x => new { x.TRACKINGCODEID, x.VISITID, x.FROMDATE });
                    table.ForeignKey(
                        name: "TKNG_CODVST_SRCEM",
                        column: x => x.SOURCEENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "TKNG_CODVST_TKCD",
                        column: x => x.TRACKINGCODEID,
                        principalTable: "TRACKING_CODE",
                        principalColumn: "TRACKING_CODE_ID");
                });

            migrationBuilder.CreateTable(
                name: "BILLING_ACCOUNT_TERM",
                columns: table => new
                {
                    BILLINGACCOUNTTERMID = table.Column<string>(name: "BILLING_ACCOUNT_TERM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    BILLINGACCOUNTID = table.Column<string>(name: "BILLING_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TERMTYPEID = table.Column<string>(name: "TERM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TERMVALUE = table.Column<decimal>(name: "TERM_VALUE", type: "decimal(18,2)", nullable: true),
                    TERMDAYS = table.Column<int>(name: "TERM_DAYS", type: "int", nullable: true),
                    UOMID = table.Column<string>(name: "UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BILLING_ACCOUNT_TERM", x => x.BILLINGACCOUNTTERMID);
                    table.ForeignKey(
                        name: "BILLACCT_TRM_BACT",
                        column: x => x.BILLINGACCOUNTID,
                        principalTable: "BILLING_ACCOUNT",
                        principalColumn: "BILLING_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "BILLACCT_TRM_TRM",
                        column: x => x.TERMTYPEID,
                        principalTable: "TERM_TYPE",
                        principalColumn: "TERM_TYPE_ID");
                    table.ForeignKey(
                        name: "BILLACCT_TRM_UOM",
                        column: x => x.UOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                });

            migrationBuilder.CreateTable(
                name: "BILLING_ACCOUNT_TERM_ATTR",
                columns: table => new
                {
                    BILLINGACCOUNTTERMID = table.Column<string>(name: "BILLING_ACCOUNT_TERM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BILLING_ACCOUNT_TERM_ATTR", x => new { x.BILLINGACCOUNTTERMID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "BILLACCT_TRM_ATTR",
                        column: x => x.BILLINGACCOUNTTERMID,
                        principalTable: "BILLING_ACCOUNT_TERM",
                        principalColumn: "BILLING_ACCOUNT_TERM_ID");
                });

            migrationBuilder.CreateTable(
                name: "ACCOMMODATION_MAP",
                columns: table => new
                {
                    ACCOMMODATIONMAPID = table.Column<string>(name: "ACCOMMODATION_MAP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ACCOMMODATIONCLASSID = table.Column<string>(name: "ACCOMMODATION_CLASS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FIXEDASSETID = table.Column<string>(name: "FIXED_ASSET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ACCOMMODATIONMAPTYPEID = table.Column<string>(name: "ACCOMMODATION_MAP_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    NUMBEROFSPACES = table.Column<int>(name: "NUMBER_OF_SPACES", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ACCOMMODATION_MAP", x => x.ACCOMMODATIONMAPID);
                    table.ForeignKey(
                        name: "ACMD_MAP_CLASS",
                        column: x => x.ACCOMMODATIONCLASSID,
                        principalTable: "ACCOMMODATION_CLASS",
                        principalColumn: "ACCOMMODATION_CLASS_ID");
                    table.ForeignKey(
                        name: "ACMD_MAP_TYPE",
                        column: x => x.ACCOMMODATIONMAPTYPEID,
                        principalTable: "ACCOMMODATION_MAP_TYPE",
                        principalColumn: "ACCOMMODATION_MAP_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ACCOMMODATION_SPOT",
                columns: table => new
                {
                    ACCOMMODATIONSPOTID = table.Column<string>(name: "ACCOMMODATION_SPOT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ACCOMMODATIONCLASSID = table.Column<string>(name: "ACCOMMODATION_CLASS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FIXEDASSETID = table.Column<string>(name: "FIXED_ASSET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    NUMBEROFSPACES = table.Column<int>(name: "NUMBER_OF_SPACES", type: "int", nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ACCOMMODATION_SPOT", x => x.ACCOMMODATIONSPOTID);
                    table.ForeignKey(
                        name: "ACCOM_CLASS",
                        column: x => x.ACCOMMODATIONCLASSID,
                        principalTable: "ACCOMMODATION_CLASS",
                        principalColumn: "ACCOMMODATION_CLASS_ID");
                });

            migrationBuilder.CreateTable(
                name: "ACCTG_TRANS",
                columns: table => new
                {
                    ACCTGTRANSID = table.Column<string>(name: "ACCTG_TRANS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ACCTGTRANSTYPEID = table.Column<string>(name: "ACCTG_TRANS_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    TRANSACTIONDATE = table.Column<DateTime>(name: "TRANSACTION_DATE", type: "datetime", nullable: true),
                    ISPOSTED = table.Column<string>(name: "IS_POSTED", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    POSTEDDATE = table.Column<DateTime>(name: "POSTED_DATE", type: "datetime", nullable: true),
                    SCHEDULEDPOSTINGDATE = table.Column<DateTime>(name: "SCHEDULED_POSTING_DATE", type: "datetime", nullable: true),
                    GLJOURNALID = table.Column<string>(name: "GL_JOURNAL_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    GLFISCALTYPEID = table.Column<string>(name: "GL_FISCAL_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    VOUCHERREF = table.Column<string>(name: "VOUCHER_REF", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    VOUCHERDATE = table.Column<DateTime>(name: "VOUCHER_DATE", type: "datetime", nullable: true),
                    GROUPSTATUSID = table.Column<string>(name: "GROUP_STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FIXEDASSETID = table.Column<string>(name: "FIXED_ASSET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INVENTORYITEMID = table.Column<string>(name: "INVENTORY_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PHYSICALINVENTORYID = table.Column<string>(name: "PHYSICAL_INVENTORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INVOICEID = table.Column<string>(name: "INVOICE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PAYMENTID = table.Column<string>(name: "PAYMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FINACCOUNTTRANSID = table.Column<string>(name: "FIN_ACCOUNT_TRANS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SHIPMENTID = table.Column<string>(name: "SHIPMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RECEIPTID = table.Column<string>(name: "RECEIPT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    THEIRACCTGTRANSID = table.Column<string>(name: "THEIR_ACCTG_TRANS_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    CREATEDDATE = table.Column<DateTime>(name: "CREATED_DATE", type: "datetime", nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDDATE = table.Column<DateTime>(name: "LAST_MODIFIED_DATE", type: "datetime", nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ACCTG_TRANS", x => x.ACCTGTRANSID);
                    table.ForeignKey(
                        name: "ACCTTX_GLFST",
                        column: x => x.GLFISCALTYPEID,
                        principalTable: "GL_FISCAL_TYPE",
                        principalColumn: "GL_FISCAL_TYPE_ID");
                    table.ForeignKey(
                        name: "ACCTTX_GRPSTTS",
                        column: x => x.GROUPSTATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "ACCTTX_PHS_INV",
                        column: x => x.PHYSICALINVENTORYID,
                        principalTable: "PHYSICAL_INVENTORY",
                        principalColumn: "PHYSICAL_INVENTORY_ID");
                    table.ForeignKey(
                        name: "ACCTTX_ROLETYP",
                        column: x => x.ROLETYPEID,
                        principalTable: "ROLE_TYPE",
                        principalColumn: "ROLE_TYPE_ID");
                    table.ForeignKey(
                        name: "ACCTTX_TYPE",
                        column: x => x.ACCTGTRANSTYPEID,
                        principalTable: "ACCTG_TRANS_TYPE",
                        principalColumn: "ACCTG_TRANS_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ACCTG_TRANS_ATTRIBUTE",
                columns: table => new
                {
                    ACCTGTRANSID = table.Column<string>(name: "ACCTG_TRANS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ACCTG_TRANS_ATTRIBUTE", x => new { x.ACCTGTRANSID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "ACCTTX_ATTR",
                        column: x => x.ACCTGTRANSID,
                        principalTable: "ACCTG_TRANS",
                        principalColumn: "ACCTG_TRANS_ID");
                });

            migrationBuilder.CreateTable(
                name: "ACCTG_TRANS_ENTRY",
                columns: table => new
                {
                    ACCTGTRANSID = table.Column<string>(name: "ACCTG_TRANS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ACCTGTRANSENTRYSEQID = table.Column<string>(name: "ACCTG_TRANS_ENTRY_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ACCTGTRANSENTRYTYPEID = table.Column<string>(name: "ACCTG_TRANS_ENTRY_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    VOUCHERREF = table.Column<string>(name: "VOUCHER_REF", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    THEIRPARTYID = table.Column<string>(name: "THEIR_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    THEIRPRODUCTID = table.Column<string>(name: "THEIR_PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INVENTORYITEMID = table.Column<string>(name: "INVENTORY_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    GLACCOUNTTYPEID = table.Column<string>(name: "GL_ACCOUNT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    GLACCOUNTID = table.Column<string>(name: "GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORGANIZATIONPARTYID = table.Column<string>(name: "ORGANIZATION_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AMOUNT = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    CURRENCYUOMID = table.Column<string>(name: "CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORIGAMOUNT = table.Column<decimal>(name: "ORIG_AMOUNT", type: "decimal(18,2)", nullable: true),
                    ORIGCURRENCYUOMID = table.Column<string>(name: "ORIG_CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DEBITCREDITFLAG = table.Column<string>(name: "DEBIT_CREDIT_FLAG", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DUEDATE = table.Column<DateTime>(name: "DUE_DATE", type: "datetime", nullable: true),
                    GROUPID = table.Column<string>(name: "GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TAXID = table.Column<string>(name: "TAX_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RECONCILESTATUSID = table.Column<string>(name: "RECONCILE_STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SETTLEMENTTERMID = table.Column<string>(name: "SETTLEMENT_TERM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ISSUMMARY = table.Column<string>(name: "IS_SUMMARY", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ACCTG_TRANS_ENTRY", x => new { x.ACCTGTRANSID, x.ACCTGTRANSENTRYSEQID });
                    table.ForeignKey(
                        name: "ACCTTXENT_ACTX",
                        column: x => x.ACCTGTRANSID,
                        principalTable: "ACCTG_TRANS",
                        principalColumn: "ACCTG_TRANS_ID");
                    table.ForeignKey(
                        name: "ACCTTXENT_ATET",
                        column: x => x.ACCTGTRANSENTRYTYPEID,
                        principalTable: "ACCTG_TRANS_ENTRY_TYPE",
                        principalColumn: "ACCTG_TRANS_ENTRY_TYPE_ID");
                    table.ForeignKey(
                        name: "ACCTTXENT_CURNCY",
                        column: x => x.CURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "ACCTTXENT_GLACT",
                        column: x => x.GLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "ACCTTXENT_GLACTT",
                        column: x => x.GLACCOUNTTYPEID,
                        principalTable: "GL_ACCOUNT_TYPE",
                        principalColumn: "GL_ACCOUNT_TYPE_ID");
                    table.ForeignKey(
                        name: "ACCTTXENT_OCURNCY",
                        column: x => x.ORIGCURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "ACCTTXENT_RCSTS",
                        column: x => x.RECONCILESTATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "ACCTTXENT_RLTYP",
                        column: x => x.ROLETYPEID,
                        principalTable: "ROLE_TYPE",
                        principalColumn: "ROLE_TYPE_ID");
                    table.ForeignKey(
                        name: "ACCTTXENT_STLEN",
                        column: x => x.SETTLEMENTTERMID,
                        principalTable: "SETTLEMENT_TERM",
                        principalColumn: "SETTLEMENT_TERM_ID");
                });

            migrationBuilder.CreateTable(
                name: "ADDENDUM",
                columns: table => new
                {
                    ADDENDUMID = table.Column<string>(name: "ADDENDUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    AGREEMENTID = table.Column<string>(name: "AGREEMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AGREEMENTITEMSEQID = table.Column<string>(name: "AGREEMENT_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ADDENDUMCREATIONDATE = table.Column<DateTime>(name: "ADDENDUM_CREATION_DATE", type: "datetime", nullable: true),
                    ADDENDUMEFFECTIVEDATE = table.Column<DateTime>(name: "ADDENDUM_EFFECTIVE_DATE", type: "datetime", nullable: true),
                    ADDENDUMTEXT = table.Column<string>(name: "ADDENDUM_TEXT", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ADDENDUM", x => x.ADDENDUMID);
                });

            migrationBuilder.CreateTable(
                name: "AFFILIATE",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    AFFILIATENAME = table.Column<string>(name: "AFFILIATE_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AFFILIATEDESCRIPTION = table.Column<string>(name: "AFFILIATE_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    YEARESTABLISHED = table.Column<string>(name: "YEAR_ESTABLISHED", type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    SITETYPE = table.Column<string>(name: "SITE_TYPE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SITEPAGEVIEWS = table.Column<string>(name: "SITE_PAGE_VIEWS", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SITEVISITORS = table.Column<string>(name: "SITE_VISITORS", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DATETIMECREATED = table.Column<DateTime>(name: "DATE_TIME_CREATED", type: "datetime", nullable: true),
                    DATETIMEAPPROVED = table.Column<DateTime>(name: "DATE_TIME_APPROVED", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AFFILIATE", x => x.PARTYID);
                });

            migrationBuilder.CreateTable(
                name: "AGREEMENT",
                columns: table => new
                {
                    AGREEMENTID = table.Column<string>(name: "AGREEMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYIDFROM = table.Column<string>(name: "PARTY_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYIDTO = table.Column<string>(name: "PARTY_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ROLETYPEIDFROM = table.Column<string>(name: "ROLE_TYPE_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ROLETYPEIDTO = table.Column<string>(name: "ROLE_TYPE_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AGREEMENTTYPEID = table.Column<string>(name: "AGREEMENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AGREEMENTDATE = table.Column<DateTime>(name: "AGREEMENT_DATE", type: "datetime", nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    TEXTDATA = table.Column<string>(name: "TEXT_DATA", type: "text", nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AGREEMENT", x => x.AGREEMENTID);
                    table.ForeignKey(
                        name: "AGRMNT_TYPE",
                        column: x => x.AGREEMENTTYPEID,
                        principalTable: "AGREEMENT_TYPE",
                        principalColumn: "AGREEMENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "AGREEMENT_ATTRIBUTE",
                columns: table => new
                {
                    AGREEMENTID = table.Column<string>(name: "AGREEMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AGREEMENT_ATTRIBUTE", x => new { x.AGREEMENTID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "AGRMNT_ATTR",
                        column: x => x.AGREEMENTID,
                        principalTable: "AGREEMENT",
                        principalColumn: "AGREEMENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "AGREEMENT_ITEM",
                columns: table => new
                {
                    AGREEMENTID = table.Column<string>(name: "AGREEMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    AGREEMENTITEMSEQID = table.Column<string>(name: "AGREEMENT_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    AGREEMENTITEMTYPEID = table.Column<string>(name: "AGREEMENT_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CURRENCYUOMID = table.Column<string>(name: "CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AGREEMENTTEXT = table.Column<string>(name: "AGREEMENT_TEXT", type: "text", nullable: true),
                    AGREEMENTIMAGE = table.Column<byte[]>(name: "AGREEMENT_IMAGE", type: "image", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AGREEMENT_ITEM", x => new { x.AGREEMENTID, x.AGREEMENTITEMSEQID });
                    table.ForeignKey(
                        name: "AGRMNT_ITEM_AGR",
                        column: x => x.AGREEMENTID,
                        principalTable: "AGREEMENT",
                        principalColumn: "AGREEMENT_ID");
                    table.ForeignKey(
                        name: "AGRMNT_ITEM_TYPE",
                        column: x => x.AGREEMENTITEMTYPEID,
                        principalTable: "AGREEMENT_ITEM_TYPE",
                        principalColumn: "AGREEMENT_ITEM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "AGREEMENT_GEOGRAPHICAL_APPLIC",
                columns: table => new
                {
                    AGREEMENTID = table.Column<string>(name: "AGREEMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    AGREEMENTITEMSEQID = table.Column<string>(name: "AGREEMENT_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GEOID = table.Column<string>(name: "GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AGREEMENT_GEOGRAPHICAL_APPL", x => new { x.AGREEMENTID, x.AGREEMENTITEMSEQID, x.GEOID });
                    table.ForeignKey(
                        name: "AGRMNT_GEOAP_AGR",
                        column: x => x.AGREEMENTID,
                        principalTable: "AGREEMENT",
                        principalColumn: "AGREEMENT_ID");
                    table.ForeignKey(
                        name: "AGRMNT_GEOAP_AGRI",
                        columns: x => new { x.AGREEMENTID, x.AGREEMENTITEMSEQID },
                        principalTable: "AGREEMENT_ITEM",
                        principalColumns: new[] { "AGREEMENT_ID", "AGREEMENT_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "AGRMNT_GEOAP_GEO",
                        column: x => x.GEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                });

            migrationBuilder.CreateTable(
                name: "AGREEMENT_ITEM_ATTRIBUTE",
                columns: table => new
                {
                    AGREEMENTID = table.Column<string>(name: "AGREEMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    AGREEMENTITEMSEQID = table.Column<string>(name: "AGREEMENT_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AGREEMENT_ITEM_ATTRIBUTE", x => new { x.AGREEMENTID, x.AGREEMENTITEMSEQID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "AGRMNT_ITEM_ATTR",
                        columns: x => new { x.AGREEMENTID, x.AGREEMENTITEMSEQID },
                        principalTable: "AGREEMENT_ITEM",
                        principalColumns: new[] { "AGREEMENT_ID", "AGREEMENT_ITEM_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "AGREEMENT_TERM",
                columns: table => new
                {
                    AGREEMENTTERMID = table.Column<string>(name: "AGREEMENT_TERM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TERMTYPEID = table.Column<string>(name: "TERM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AGREEMENTID = table.Column<string>(name: "AGREEMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AGREEMENTITEMSEQID = table.Column<string>(name: "AGREEMENT_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INVOICEITEMTYPEID = table.Column<string>(name: "INVOICE_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    TERMVALUE = table.Column<decimal>(name: "TERM_VALUE", type: "decimal(18,3)", nullable: true),
                    TERMDAYS = table.Column<int>(name: "TERM_DAYS", type: "int", nullable: true),
                    TEXTVALUE = table.Column<string>(name: "TEXT_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    MINQUANTITY = table.Column<double>(name: "MIN_QUANTITY", type: "float", nullable: true),
                    MAXQUANTITY = table.Column<double>(name: "MAX_QUANTITY", type: "float", nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AGREEMENT_TERM", x => x.AGREEMENTTERMID);
                    table.ForeignKey(
                        name: "AGRMNT_TERM_AGR",
                        column: x => x.AGREEMENTID,
                        principalTable: "AGREEMENT",
                        principalColumn: "AGREEMENT_ID");
                    table.ForeignKey(
                        name: "AGRMNT_TERM_AITM",
                        columns: x => new { x.AGREEMENTID, x.AGREEMENTITEMSEQID },
                        principalTable: "AGREEMENT_ITEM",
                        principalColumns: new[] { "AGREEMENT_ID", "AGREEMENT_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "AGRMNT_TERM_IIT",
                        column: x => x.INVOICEITEMTYPEID,
                        principalTable: "INVOICE_ITEM_TYPE",
                        principalColumn: "INVOICE_ITEM_TYPE_ID");
                    table.ForeignKey(
                        name: "AGRMNT_TERM_TTYP",
                        column: x => x.TERMTYPEID,
                        principalTable: "TERM_TYPE",
                        principalColumn: "TERM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "AGREEMENT_TERM_ATTRIBUTE",
                columns: table => new
                {
                    AGREEMENTTERMID = table.Column<string>(name: "AGREEMENT_TERM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AGREEMENT_TERM_ATTRIBUTE", x => new { x.AGREEMENTTERMID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "AGRMNT_TERM_ATTR",
                        column: x => x.AGREEMENTTERMID,
                        principalTable: "AGREEMENT_TERM",
                        principalColumn: "AGREEMENT_TERM_ID");
                });

            migrationBuilder.CreateTable(
                name: "AGREEMENT_CONTENT",
                columns: table => new
                {
                    AGREEMENTID = table.Column<string>(name: "AGREEMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    AGREEMENTITEMSEQID = table.Column<string>(name: "AGREEMENT_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    AGREEMENTCONTENTTYPEID = table.Column<string>(name: "AGREEMENT_CONTENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AGREEMENT_CONTENT", x => new { x.CONTENTID, x.AGREEMENTID, x.AGREEMENTITEMSEQID, x.AGREEMENTCONTENTTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "AG_CNT_PROD",
                        column: x => x.AGREEMENTID,
                        principalTable: "AGREEMENT",
                        principalColumn: "AGREEMENT_ID");
                    table.ForeignKey(
                        name: "AG_CNT_TYPE",
                        column: x => x.AGREEMENTCONTENTTYPEID,
                        principalTable: "AGREEMENT_CONTENT_TYPE",
                        principalColumn: "AGREEMENT_CONTENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "AGREEMENT_EMPLOYMENT_APPL",
                columns: table => new
                {
                    AGREEMENTID = table.Column<string>(name: "AGREEMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    AGREEMENTITEMSEQID = table.Column<string>(name: "AGREEMENT_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYIDFROM = table.Column<string>(name: "PARTY_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYIDTO = table.Column<string>(name: "PARTY_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEIDFROM = table.Column<string>(name: "ROLE_TYPE_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEIDTO = table.Column<string>(name: "ROLE_TYPE_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    AGREEMENTDATE = table.Column<DateTime>(name: "AGREEMENT_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AGREEMENT_EMPLOYMENT_APPL", x => new { x.AGREEMENTID, x.AGREEMENTITEMSEQID, x.PARTYIDTO, x.PARTYIDFROM, x.ROLETYPEIDTO, x.ROLETYPEIDFROM, x.FROMDATE });
                    table.ForeignKey(
                        name: "AGRMNT_EMPL_AITM",
                        columns: x => new { x.AGREEMENTID, x.AGREEMENTITEMSEQID },
                        principalTable: "AGREEMENT_ITEM",
                        principalColumns: new[] { "AGREEMENT_ID", "AGREEMENT_ITEM_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "AGREEMENT_FACILITY_APPL",
                columns: table => new
                {
                    AGREEMENTID = table.Column<string>(name: "AGREEMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    AGREEMENTITEMSEQID = table.Column<string>(name: "AGREEMENT_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AGREEMENT_FACILITY_APPL", x => new { x.AGREEMENTID, x.AGREEMENTITEMSEQID, x.FACILITYID });
                    table.ForeignKey(
                        name: "AGRMNT_FACLT_AITM",
                        columns: x => new { x.AGREEMENTID, x.AGREEMENTITEMSEQID },
                        principalTable: "AGREEMENT_ITEM",
                        principalColumns: new[] { "AGREEMENT_ID", "AGREEMENT_ITEM_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "AGREEMENT_PARTY_APPLIC",
                columns: table => new
                {
                    AGREEMENTID = table.Column<string>(name: "AGREEMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    AGREEMENTITEMSEQID = table.Column<string>(name: "AGREEMENT_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AGREEMENT_PARTY_APPLIC", x => new { x.AGREEMENTID, x.AGREEMENTITEMSEQID, x.PARTYID });
                    table.ForeignKey(
                        name: "AGRMNT_PTYA_AGR",
                        column: x => x.AGREEMENTID,
                        principalTable: "AGREEMENT",
                        principalColumn: "AGREEMENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "AGREEMENT_PRODUCT_APPL",
                columns: table => new
                {
                    AGREEMENTID = table.Column<string>(name: "AGREEMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    AGREEMENTITEMSEQID = table.Column<string>(name: "AGREEMENT_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRICE = table.Column<decimal>(type: "decimal(18,3)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AGREEMENT_PRODUCT_APPL", x => new { x.AGREEMENTID, x.AGREEMENTITEMSEQID, x.PRODUCTID });
                    table.ForeignKey(
                        name: "AGRMNT_PRDA_AITM",
                        columns: x => new { x.AGREEMENTID, x.AGREEMENTITEMSEQID },
                        principalTable: "AGREEMENT_ITEM",
                        principalColumns: new[] { "AGREEMENT_ID", "AGREEMENT_ITEM_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "AGREEMENT_PROMO_APPL",
                columns: table => new
                {
                    AGREEMENTID = table.Column<string>(name: "AGREEMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    AGREEMENTITEMSEQID = table.Column<string>(name: "AGREEMENT_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPROMOID = table.Column<string>(name: "PRODUCT_PROMO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AGREEMENT_PROMO_APPL", x => new { x.AGREEMENTID, x.AGREEMENTITEMSEQID, x.PRODUCTPROMOID, x.FROMDATE });
                    table.ForeignKey(
                        name: "AGRMNT_PROM_AITM",
                        columns: x => new { x.AGREEMENTID, x.AGREEMENTITEMSEQID },
                        principalTable: "AGREEMENT_ITEM",
                        principalColumns: new[] { "AGREEMENT_ID", "AGREEMENT_ITEM_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "AGREEMENT_ROLE",
                columns: table => new
                {
                    AGREEMENTID = table.Column<string>(name: "AGREEMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AGREEMENT_ROLE", x => new { x.AGREEMENTID, x.PARTYID, x.ROLETYPEID });
                    table.ForeignKey(
                        name: "AGRMNT_ROLE_AGR",
                        column: x => x.AGREEMENTID,
                        principalTable: "AGREEMENT",
                        principalColumn: "AGREEMENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "AGREEMENT_STATUS",
                columns: table => new
                {
                    AGREEMENTID = table.Column<string>(name: "AGREEMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSDATE = table.Column<DateTime>(name: "STATUS_DATE", type: "datetime", nullable: false),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CHANGEBYUSERLOGINID = table.Column<string>(name: "CHANGE_BY_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AGREEMENT_STATUS", x => new { x.AGREEMENTID, x.STATUSID, x.STATUSDATE });
                    table.ForeignKey(
                        name: "AGRMNT_STTS_AGRMNT",
                        column: x => x.AGREEMENTID,
                        principalTable: "AGREEMENT",
                        principalColumn: "AGREEMENT_ID");
                    table.ForeignKey(
                        name: "AGRMNT_STTS_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "AGREEMENT_WORK_EFFORT_APPLIC",
                columns: table => new
                {
                    AGREEMENTID = table.Column<string>(name: "AGREEMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    AGREEMENTITEMSEQID = table.Column<string>(name: "AGREEMENT_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AGREEMENT_WORK_EFFORT_APPLI", x => new { x.AGREEMENTID, x.AGREEMENTITEMSEQID, x.WORKEFFORTID });
                    table.ForeignKey(
                        name: "AGRMNT_WEA_AGRMNT",
                        column: x => x.AGREEMENTID,
                        principalTable: "AGREEMENT",
                        principalColumn: "AGREEMENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "ALLOCATION_PLAN_HEADER",
                columns: table => new
                {
                    PLANID = table.Column<string>(name: "PLAN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PLANTYPEID = table.Column<string>(name: "PLAN_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PLANNAME = table.Column<string>(name: "PLAN_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ALLOCATION_PLAN_HEADER", x => new { x.PLANID, x.PRODUCTID });
                    table.ForeignKey(
                        name: "ALC_PLN_HDR_STS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "ALC_PLN_HDR_TYP",
                        column: x => x.PLANTYPEID,
                        principalTable: "ALLOCATION_PLAN_TYPE",
                        principalColumn: "PLAN_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ALLOCATION_PLAN_ITEM",
                columns: table => new
                {
                    PLANID = table.Column<string>(name: "PLAN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PLANITEMSEQID = table.Column<string>(name: "PLAN_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PLANMETHODENUMID = table.Column<string>(name: "PLAN_METHOD_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ALLOCATEDQUANTITY = table.Column<decimal>(name: "ALLOCATED_QUANTITY", type: "decimal(18,6)", nullable: true),
                    PRIORITYSEQID = table.Column<string>(name: "PRIORITY_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ALLOCATION_PLAN_ITEM", x => new { x.PLANID, x.PLANITEMSEQID, x.PRODUCTID });
                    table.ForeignKey(
                        name: "ALC_PLN_ITM_ENUM",
                        column: x => x.PLANMETHODENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "ALC_PLN_ITM_HDR",
                        columns: x => new { x.PLANID, x.PRODUCTID },
                        principalTable: "ALLOCATION_PLAN_HEADER",
                        principalColumns: new[] { "PLAN_ID", "PRODUCT_ID" });
                    table.ForeignKey(
                        name: "ALC_PLN_ITM_STS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "APPLICATION_SANDBOX",
                columns: table => new
                {
                    APPLICATIONID = table.Column<string>(name: "APPLICATION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    RUNTIMEDATAID = table.Column<string>(name: "RUNTIME_DATA_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_APPLICATION_SANDBOX", x => x.APPLICATIONID);
                    table.ForeignKey(
                        name: "APP_SNDBX_RNTMDTA",
                        column: x => x.RUNTIMEDATAID,
                        principalTable: "RUNTIME_DATA",
                        principalColumn: "RUNTIME_DATA_ID");
                });

            migrationBuilder.CreateTable(
                name: "AUDIO_DATA_RESOURCE",
                columns: table => new
                {
                    DATARESOURCEID = table.Column<string>(name: "DATA_RESOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    AUDIODATA = table.Column<byte[]>(name: "AUDIO_DATA", type: "image", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AUDIO_DATA_RESOURCE", x => x.DATARESOURCEID);
                });

            migrationBuilder.CreateTable(
                name: "BILLING_ACCOUNT_ROLE",
                columns: table => new
                {
                    BILLINGACCOUNTID = table.Column<string>(name: "BILLING_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BILLING_ACCOUNT_ROLE", x => new { x.BILLINGACCOUNTID, x.PARTYID, x.ROLETYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "BILLACCT_ROLE",
                        column: x => x.BILLINGACCOUNTID,
                        principalTable: "BILLING_ACCOUNT",
                        principalColumn: "BILLING_ACCOUNT_ID");
                });

            migrationBuilder.CreateTable(
                name: "BUDGET",
                columns: table => new
                {
                    BUDGETID = table.Column<string>(name: "BUDGET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    BUDGETTYPEID = table.Column<string>(name: "BUDGET_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CUSTOMTIMEPERIODID = table.Column<string>(name: "CUSTOM_TIME_PERIOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BUDGET", x => x.BUDGETID);
                    table.ForeignKey(
                        name: "BUDGET_BGTTYP",
                        column: x => x.BUDGETTYPEID,
                        principalTable: "BUDGET_TYPE",
                        principalColumn: "BUDGET_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "BUDGET_ATTRIBUTE",
                columns: table => new
                {
                    BUDGETID = table.Column<string>(name: "BUDGET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BUDGET_ATTRIBUTE", x => new { x.BUDGETID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "BUDGET_ATTR_BDGT",
                        column: x => x.BUDGETID,
                        principalTable: "BUDGET",
                        principalColumn: "BUDGET_ID");
                });

            migrationBuilder.CreateTable(
                name: "BUDGET_ITEM",
                columns: table => new
                {
                    BUDGETID = table.Column<string>(name: "BUDGET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    BUDGETITEMSEQID = table.Column<string>(name: "BUDGET_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    BUDGETITEMTYPEID = table.Column<string>(name: "BUDGET_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AMOUNT = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    PURPOSE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    JUSTIFICATION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BUDGET_ITEM", x => new { x.BUDGETID, x.BUDGETITEMSEQID });
                    table.ForeignKey(
                        name: "BDGTITM_TO_BDGT",
                        column: x => x.BUDGETID,
                        principalTable: "BUDGET",
                        principalColumn: "BUDGET_ID");
                    table.ForeignKey(
                        name: "BUDGET_ITEM_BTYP",
                        column: x => x.BUDGETITEMTYPEID,
                        principalTable: "BUDGET_ITEM_TYPE",
                        principalColumn: "BUDGET_ITEM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "BUDGET_REVISION",
                columns: table => new
                {
                    BUDGETID = table.Column<string>(name: "BUDGET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    REVISIONSEQID = table.Column<string>(name: "REVISION_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DATEREVISED = table.Column<DateTime>(name: "DATE_REVISED", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BUDGET_REVISION", x => new { x.BUDGETID, x.REVISIONSEQID });
                    table.ForeignKey(
                        name: "BUDGET_RVSN_BDGT",
                        column: x => x.BUDGETID,
                        principalTable: "BUDGET",
                        principalColumn: "BUDGET_ID");
                });

            migrationBuilder.CreateTable(
                name: "BUDGET_ITEM_ATTRIBUTE",
                columns: table => new
                {
                    BUDGETID = table.Column<string>(name: "BUDGET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    BUDGETITEMSEQID = table.Column<string>(name: "BUDGET_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BUDGET_ITEM_ATTRIBUTE", x => new { x.BUDGETID, x.BUDGETITEMSEQID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "BUDGET_ITEM_ATTR",
                        columns: x => new { x.BUDGETID, x.BUDGETITEMSEQID },
                        principalTable: "BUDGET_ITEM",
                        principalColumns: new[] { "BUDGET_ID", "BUDGET_ITEM_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "BUDGET_SCENARIO_APPLICATION",
                columns: table => new
                {
                    BUDGETSCENARIOAPPLICID = table.Column<string>(name: "BUDGET_SCENARIO_APPLIC_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    BUDGETSCENARIOID = table.Column<string>(name: "BUDGET_SCENARIO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    BUDGETID = table.Column<string>(name: "BUDGET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    BUDGETITEMSEQID = table.Column<string>(name: "BUDGET_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AMOUNTCHANGE = table.Column<decimal>(name: "AMOUNT_CHANGE", type: "decimal(18,2)", nullable: true),
                    PERCENTAGECHANGE = table.Column<decimal>(name: "PERCENTAGE_CHANGE", type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BUDGET_SCENARIO_APPLICATION", x => new { x.BUDGETSCENARIOAPPLICID, x.BUDGETSCENARIOID });
                    table.ForeignKey(
                        name: "BUDGET_SAPL_BDGT",
                        column: x => x.BUDGETID,
                        principalTable: "BUDGET",
                        principalColumn: "BUDGET_ID");
                    table.ForeignKey(
                        name: "BUDGET_SAPL_BITM",
                        columns: x => new { x.BUDGETID, x.BUDGETITEMSEQID },
                        principalTable: "BUDGET_ITEM",
                        principalColumns: new[] { "BUDGET_ID", "BUDGET_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "BUDGET_SAPL_BSCN",
                        column: x => x.BUDGETSCENARIOID,
                        principalTable: "BUDGET_SCENARIO",
                        principalColumn: "BUDGET_SCENARIO_ID");
                });

            migrationBuilder.CreateTable(
                name: "BUDGET_REVISION_IMPACT",
                columns: table => new
                {
                    BUDGETID = table.Column<string>(name: "BUDGET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    BUDGETITEMSEQID = table.Column<string>(name: "BUDGET_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    REVISIONSEQID = table.Column<string>(name: "REVISION_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    REVISEDAMOUNT = table.Column<decimal>(name: "REVISED_AMOUNT", type: "decimal(18,2)", nullable: true),
                    ADDDELETEFLAG = table.Column<string>(name: "ADD_DELETE_FLAG", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    REVISIONREASON = table.Column<string>(name: "REVISION_REASON", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BUDGET_REVISION_IMPACT", x => new { x.BUDGETID, x.BUDGETITEMSEQID, x.REVISIONSEQID });
                    table.ForeignKey(
                        name: "BUDGET_RNIMP_BDGT",
                        column: x => x.BUDGETID,
                        principalTable: "BUDGET",
                        principalColumn: "BUDGET_ID");
                    table.ForeignKey(
                        name: "BUDGET_RNIMP_BITM",
                        columns: x => new { x.BUDGETID, x.BUDGETITEMSEQID },
                        principalTable: "BUDGET_ITEM",
                        principalColumns: new[] { "BUDGET_ID", "BUDGET_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "BUDGET_RNIMP_REV",
                        columns: x => new { x.BUDGETID, x.REVISIONSEQID },
                        principalTable: "BUDGET_REVISION",
                        principalColumns: new[] { "BUDGET_ID", "REVISION_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "BUDGET_REVIEW",
                columns: table => new
                {
                    BUDGETID = table.Column<string>(name: "BUDGET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    BUDGETREVIEWID = table.Column<string>(name: "BUDGET_REVIEW_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    BUDGETREVIEWRESULTTYPEID = table.Column<string>(name: "BUDGET_REVIEW_RESULT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    REVIEWDATE = table.Column<DateTime>(name: "REVIEW_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BUDGET_REVIEW", x => new { x.BUDGETID, x.BUDGETREVIEWID, x.PARTYID, x.BUDGETREVIEWRESULTTYPEID });
                    table.ForeignKey(
                        name: "BUDGET_RVW_BDGT",
                        column: x => x.BUDGETID,
                        principalTable: "BUDGET",
                        principalColumn: "BUDGET_ID");
                    table.ForeignKey(
                        name: "BUDGET_RVW_RTYPE",
                        column: x => x.BUDGETREVIEWRESULTTYPEID,
                        principalTable: "BUDGET_REVIEW_RESULT_TYPE",
                        principalColumn: "BUDGET_REVIEW_RESULT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "BUDGET_ROLE",
                columns: table => new
                {
                    BUDGETID = table.Column<string>(name: "BUDGET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BUDGET_ROLE", x => new { x.BUDGETID, x.PARTYID, x.ROLETYPEID });
                    table.ForeignKey(
                        name: "BUDGET_ROLE_BDGT",
                        column: x => x.BUDGETID,
                        principalTable: "BUDGET",
                        principalColumn: "BUDGET_ID");
                });

            migrationBuilder.CreateTable(
                name: "BUDGET_STATUS",
                columns: table => new
                {
                    BUDGETID = table.Column<string>(name: "BUDGET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSDATE = table.Column<DateTime>(name: "STATUS_DATE", type: "datetime", nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CHANGEBYUSERLOGINID = table.Column<string>(name: "CHANGE_BY_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BUDGET_STATUS", x => new { x.BUDGETID, x.STATUSID });
                    table.ForeignKey(
                        name: "BUDGET_STTS_BDGT",
                        column: x => x.BUDGETID,
                        principalTable: "BUDGET",
                        principalColumn: "BUDGET_ID");
                    table.ForeignKey(
                        name: "BUDGET_STTS_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "CARRIER_SHIPMENT_BOX_TYPE",
                columns: table => new
                {
                    SHIPMENTBOXTYPEID = table.Column<string>(name: "SHIPMENT_BOX_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PACKAGINGTYPECODE = table.Column<string>(name: "PACKAGING_TYPE_CODE", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    OVERSIZECODE = table.Column<string>(name: "OVERSIZE_CODE", type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CARRIER_SHIPMENT_BOX_TYPE", x => new { x.SHIPMENTBOXTYPEID, x.PARTYID });
                    table.ForeignKey(
                        name: "CARR_SHBX_TYPE",
                        column: x => x.SHIPMENTBOXTYPEID,
                        principalTable: "SHIPMENT_BOX_TYPE",
                        principalColumn: "SHIPMENT_BOX_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "CARRIER_SHIPMENT_METHOD",
                columns: table => new
                {
                    SHIPMENTMETHODTYPEID = table.Column<string>(name: "SHIPMENT_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SEQUENCENUMBER = table.Column<int>(name: "SEQUENCE_NUMBER", type: "int", nullable: true),
                    CARRIERSERVICECODE = table.Column<string>(name: "CARRIER_SERVICE_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CARRIER_SHIPMENT_METHOD", x => new { x.SHIPMENTMETHODTYPEID, x.PARTYID, x.ROLETYPEID });
                    table.ForeignKey(
                        name: "CARR_SHMETH_TYPE",
                        column: x => x.SHIPMENTMETHODTYPEID,
                        principalTable: "SHIPMENT_METHOD_TYPE",
                        principalColumn: "SHIPMENT_METHOD_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT_TIME_ESTIMATE",
                columns: table => new
                {
                    SHIPMENTMETHODTYPEID = table.Column<string>(name: "SHIPMENT_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GEOIDTO = table.Column<string>(name: "GEO_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GEOIDFROM = table.Column<string>(name: "GEO_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LEADTIME = table.Column<decimal>(name: "LEAD_TIME", type: "decimal(18,6)", nullable: true),
                    LEADTIMEUOMID = table.Column<string>(name: "LEAD_TIME_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SEQUENCENUMBER = table.Column<int>(name: "SEQUENCE_NUMBER", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT_TIME_ESTIMATE", x => new { x.SHIPMENTMETHODTYPEID, x.PARTYID, x.ROLETYPEID, x.GEOIDTO, x.GEOIDFROM, x.FROMDATE });
                    table.ForeignKey(
                        name: "SHIPT_EST_GEO_FROM",
                        column: x => x.GEOIDFROM,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "SHIPT_EST_GEO_TO",
                        column: x => x.GEOIDTO,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "SHIPT_EST_METHOD",
                        columns: x => new { x.SHIPMENTMETHODTYPEID, x.PARTYID, x.ROLETYPEID },
                        principalTable: "CARRIER_SHIPMENT_METHOD",
                        principalColumns: new[] { "SHIPMENT_METHOD_TYPE_ID", "PARTY_ID", "ROLE_TYPE_ID" });
                    table.ForeignKey(
                        name: "SHIPT_EST_UOM",
                        column: x => x.LEADTIMEUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                });

            migrationBuilder.CreateTable(
                name: "CART_ABANDONED_LINE",
                columns: table => new
                {
                    VISITID = table.Column<string>(name: "VISIT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CARTABANDONEDLINESEQID = table.Column<string>(name: "CART_ABANDONED_LINE_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODCATALOGID = table.Column<string>(name: "PROD_CATALOG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    RESERVSTART = table.Column<DateTime>(name: "RESERV_START", type: "datetime", nullable: true),
                    RESERVLENGTH = table.Column<decimal>(name: "RESERV_LENGTH", type: "decimal(18,6)", nullable: true),
                    RESERVPERSONS = table.Column<decimal>(name: "RESERV_PERSONS", type: "decimal(18,6)", nullable: true),
                    UNITPRICE = table.Column<decimal>(name: "UNIT_PRICE", type: "decimal(18,2)", nullable: true),
                    RESERV2NDPPPERC = table.Column<decimal>(name: "RESERV2ND_P_P_PERC", type: "decimal(18,6)", nullable: true),
                    RESERVNTHPPPERC = table.Column<decimal>(name: "RESERV_NTH_P_P_PERC", type: "decimal(18,6)", nullable: true),
                    CONFIGID = table.Column<string>(name: "CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TOTALWITHADJUSTMENTS = table.Column<decimal>(name: "TOTAL_WITH_ADJUSTMENTS", type: "decimal(18,2)", nullable: true),
                    WASRESERVED = table.Column<string>(name: "WAS_RESERVED", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CART_ABANDONED_LINE", x => new { x.VISITID, x.CARTABANDONEDLINESEQID });
                    table.ForeignKey(
                        name: "CART_ABLN_PRDCAT",
                        column: x => x.PRODCATALOGID,
                        principalTable: "PROD_CATALOG",
                        principalColumn: "PROD_CATALOG_ID");
                });

            migrationBuilder.CreateTable(
                name: "CHECK_ACCOUNT",
                columns: table => new
                {
                    PAYMENTMETHODID = table.Column<string>(name: "PAYMENT_METHOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    BANKNAME = table.Column<string>(name: "BANK_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ROUTINGNUMBER = table.Column<string>(name: "ROUTING_NUMBER", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    ACCOUNTTYPE = table.Column<string>(name: "ACCOUNT_TYPE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    ACCOUNTNUMBER = table.Column<string>(name: "ACCOUNT_NUMBER", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    NAMEONACCOUNT = table.Column<string>(name: "NAME_ON_ACCOUNT", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    COMPANYNAMEONACCOUNT = table.Column<string>(name: "COMPANY_NAME_ON_ACCOUNT", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    BRANCHCODE = table.Column<string>(name: "BRANCH_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CHECK_ACCOUNT", x => x.PAYMENTMETHODID);
                    table.ForeignKey(
                        name: "CACCT_CMECH",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "CACCT_PADDR",
                        column: x => x.CONTACTMECHID,
                        principalTable: "POSTAL_ADDRESS",
                        principalColumn: "CONTACT_MECH_ID");
                });

            migrationBuilder.CreateTable(
                name: "COMM_EVENT_CONTENT_ASSOC",
                columns: table => new
                {
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COMMUNICATIONEVENTID = table.Column<string>(name: "COMMUNICATION_EVENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    COMMCONTENTASSOCTYPEID = table.Column<string>(name: "COMM_CONTENT_ASSOC_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COMM_EVENT_CONTENT_ASSOC", x => new { x.CONTENTID, x.COMMUNICATIONEVENTID, x.FROMDATE });
                    table.ForeignKey(
                        name: "COMMEV_CA_TYP",
                        column: x => x.COMMCONTENTASSOCTYPEID,
                        principalTable: "COMM_CONTENT_ASSOC_TYPE",
                        principalColumn: "COMM_CONTENT_ASSOC_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "COMMUNICATION_EVENT",
                columns: table => new
                {
                    COMMUNICATIONEVENTID = table.Column<string>(name: "COMMUNICATION_EVENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COMMUNICATIONEVENTTYPEID = table.Column<string>(name: "COMMUNICATION_EVENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORIGCOMMEVENTID = table.Column<string>(name: "ORIG_COMM_EVENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARENTCOMMEVENTID = table.Column<string>(name: "PARENT_COMM_EVENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CONTACTMECHTYPEID = table.Column<string>(name: "CONTACT_MECH_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CONTACTMECHIDFROM = table.Column<string>(name: "CONTACT_MECH_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CONTACTMECHIDTO = table.Column<string>(name: "CONTACT_MECH_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ROLETYPEIDFROM = table.Column<string>(name: "ROLE_TYPE_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ROLETYPEIDTO = table.Column<string>(name: "ROLE_TYPE_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYIDFROM = table.Column<string>(name: "PARTY_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYIDTO = table.Column<string>(name: "PARTY_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ENTRYDATE = table.Column<DateTime>(name: "ENTRY_DATE", type: "datetime", nullable: true),
                    DATETIMESTARTED = table.Column<DateTime>(name: "DATETIME_STARTED", type: "datetime", nullable: true),
                    DATETIMEENDED = table.Column<DateTime>(name: "DATETIME_ENDED", type: "datetime", nullable: true),
                    SUBJECT = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CONTENTMIMETYPEID = table.Column<string>(name: "CONTENT_MIME_TYPE_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    CONTENT = table.Column<string>(type: "text", nullable: true),
                    NOTE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    REASONENUMID = table.Column<string>(name: "REASON_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CONTACTLISTID = table.Column<string>(name: "CONTACT_LIST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HEADERSTRING = table.Column<string>(name: "HEADER_STRING", type: "text", nullable: true),
                    FROMSTRING = table.Column<string>(name: "FROM_STRING", type: "text", nullable: true),
                    TOSTRING = table.Column<string>(name: "TO_STRING", type: "text", nullable: true),
                    CCSTRING = table.Column<string>(name: "CC_STRING", type: "text", nullable: true),
                    BCCSTRING = table.Column<string>(name: "BCC_STRING", type: "text", nullable: true),
                    MESSAGEID = table.Column<string>(name: "MESSAGE_ID", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COMMUNICATION_EVENT", x => x.COMMUNICATIONEVENTID);
                    table.ForeignKey(
                        name: "COM_EVNT_CMTP",
                        column: x => x.CONTACTMECHTYPEID,
                        principalTable: "CONTACT_MECH_TYPE",
                        principalColumn: "CONTACT_MECH_TYPE_ID");
                    table.ForeignKey(
                        name: "COM_EVNT_FCM",
                        column: x => x.CONTACTMECHIDFROM,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "COM_EVNT_FRTYP",
                        column: x => x.ROLETYPEIDFROM,
                        principalTable: "ROLE_TYPE",
                        principalColumn: "ROLE_TYPE_ID");
                    table.ForeignKey(
                        name: "COM_EVNT_MIMETYPE",
                        column: x => x.CONTENTMIMETYPEID,
                        principalTable: "MIME_TYPE",
                        principalColumn: "MIME_TYPE_ID");
                    table.ForeignKey(
                        name: "COM_EVNT_RESENUM",
                        column: x => x.REASONENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "COM_EVNT_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "COM_EVNT_TCM",
                        column: x => x.CONTACTMECHIDTO,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "COM_EVNT_TRTYP",
                        column: x => x.ROLETYPEIDTO,
                        principalTable: "ROLE_TYPE",
                        principalColumn: "ROLE_TYPE_ID");
                    table.ForeignKey(
                        name: "COM_EVNT_TYPE",
                        column: x => x.COMMUNICATIONEVENTTYPEID,
                        principalTable: "COMMUNICATION_EVENT_TYPE",
                        principalColumn: "COMMUNICATION_EVENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "COMMUNICATION_EVENT_PURPOSE",
                columns: table => new
                {
                    COMMUNICATIONEVENTPRPTYPID = table.Column<string>(name: "COMMUNICATION_EVENT_PRP_TYP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COMMUNICATIONEVENTID = table.Column<string>(name: "COMMUNICATION_EVENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COMMUNICATION_EVENT_PURPOSE", x => new { x.COMMUNICATIONEVENTPRPTYPID, x.COMMUNICATIONEVENTID });
                    table.ForeignKey(
                        name: "COM_EVNT_PRP_EVNT",
                        column: x => x.COMMUNICATIONEVENTID,
                        principalTable: "COMMUNICATION_EVENT",
                        principalColumn: "COMMUNICATION_EVENT_ID");
                    table.ForeignKey(
                        name: "COM_EVNT_PRP_TYPE",
                        column: x => x.COMMUNICATIONEVENTPRPTYPID,
                        principalTable: "COMMUNICATION_EVENT_PRP_TYP",
                        principalColumn: "COMMUNICATION_EVENT_PRP_TYP_ID");
                });

            migrationBuilder.CreateTable(
                name: "COMMUNICATION_EVENT_ORDER",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COMMUNICATIONEVENTID = table.Column<string>(name: "COMMUNICATION_EVENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COMMUNICATION_EVENT_ORDER", x => new { x.ORDERID, x.COMMUNICATIONEVENTID });
                    table.ForeignKey(
                        name: "COMEV_ORDER_CMEV",
                        column: x => x.COMMUNICATIONEVENTID,
                        principalTable: "COMMUNICATION_EVENT",
                        principalColumn: "COMMUNICATION_EVENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "COMMUNICATION_EVENT_PRODUCT",
                columns: table => new
                {
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COMMUNICATIONEVENTID = table.Column<string>(name: "COMMUNICATION_EVENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COMMUNICATION_EVENT_PRODUCT", x => new { x.PRODUCTID, x.COMMUNICATIONEVENTID });
                    table.ForeignKey(
                        name: "COMEV_PROD_CMEV",
                        column: x => x.COMMUNICATIONEVENTID,
                        principalTable: "COMMUNICATION_EVENT",
                        principalColumn: "COMMUNICATION_EVENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "COMMUNICATION_EVENT_RETURN",
                columns: table => new
                {
                    RETURNID = table.Column<string>(name: "RETURN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COMMUNICATIONEVENTID = table.Column<string>(name: "COMMUNICATION_EVENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COMMUNICATION_EVENT_RETURN", x => new { x.RETURNID, x.COMMUNICATIONEVENTID });
                    table.ForeignKey(
                        name: "COMEV_RETURN_CMEV",
                        column: x => x.COMMUNICATIONEVENTID,
                        principalTable: "COMMUNICATION_EVENT",
                        principalColumn: "COMMUNICATION_EVENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "COMMUNICATION_EVENT_ROLE",
                columns: table => new
                {
                    COMMUNICATIONEVENTID = table.Column<string>(name: "COMMUNICATION_EVENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COMMUNICATION_EVENT_ROLE", x => new { x.COMMUNICATIONEVENTID, x.PARTYID, x.ROLETYPEID });
                    table.ForeignKey(
                        name: "COM_EVRL_CMCH",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "COM_EVRL_CMEV",
                        column: x => x.COMMUNICATIONEVENTID,
                        principalTable: "COMMUNICATION_EVENT",
                        principalColumn: "COMMUNICATION_EVENT_ID");
                    table.ForeignKey(
                        name: "COM_EVRL_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "COMMUNICATION_EVENT_WORK_EFF",
                columns: table => new
                {
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COMMUNICATIONEVENTID = table.Column<string>(name: "COMMUNICATION_EVENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COMMUNICATION_EVENT_WORK_EF", x => new { x.WORKEFFORTID, x.COMMUNICATIONEVENTID });
                    table.ForeignKey(
                        name: "COMEV_WEFF_CMEV",
                        column: x => x.COMMUNICATIONEVENTID,
                        principalTable: "COMMUNICATION_EVENT",
                        principalColumn: "COMMUNICATION_EVENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "CONFIG_OPTION_PRODUCT_OPTION",
                columns: table => new
                {
                    CONFIGID = table.Column<string>(name: "CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONFIGITEMID = table.Column<string>(name: "CONFIG_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: false),
                    CONFIGOPTIONID = table.Column<string>(name: "CONFIG_OPTION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTOPTIONID = table.Column<string>(name: "PRODUCT_OPTION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONFIG_OPTION_PRODUCT_OPTIO", x => new { x.CONFIGID, x.CONFIGITEMID, x.CONFIGOPTIONID, x.SEQUENCENUM, x.PRODUCTID });
                    table.ForeignKey(
                        name: "PROD_OPTN_CONF",
                        columns: x => new { x.CONFIGID, x.CONFIGITEMID, x.CONFIGOPTIONID, x.SEQUENCENUM },
                        principalTable: "PRODUCT_CONFIG_CONFIG",
                        principalColumns: new[] { "CONFIG_ID", "CONFIG_ITEM_ID", "CONFIG_OPTION_ID", "SEQUENCE_NUM" });
                });

            migrationBuilder.CreateTable(
                name: "CONTACT_LIST",
                columns: table => new
                {
                    CONTACTLISTID = table.Column<string>(name: "CONTACT_LIST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTLISTTYPEID = table.Column<string>(name: "CONTACT_LIST_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CONTACTMECHTYPEID = table.Column<string>(name: "CONTACT_MECH_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    MARKETINGCAMPAIGNID = table.Column<string>(name: "MARKETING_CAMPAIGN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CONTACTLISTNAME = table.Column<string>(name: "CONTACT_LIST_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ISPUBLIC = table.Column<string>(name: "IS_PUBLIC", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    SINGLEUSE = table.Column<string>(name: "SINGLE_USE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    OWNERPARTYID = table.Column<string>(name: "OWNER_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    VERIFYEMAILFROM = table.Column<string>(name: "VERIFY_EMAIL_FROM", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    VERIFYEMAILSCREEN = table.Column<string>(name: "VERIFY_EMAIL_SCREEN", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    VERIFYEMAILSUBJECT = table.Column<string>(name: "VERIFY_EMAIL_SUBJECT", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    VERIFYEMAILWEBSITEID = table.Column<string>(name: "VERIFY_EMAIL_WEB_SITE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    OPTOUTSCREEN = table.Column<string>(name: "OPT_OUT_SCREEN", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTACT_LIST", x => x.CONTACTLISTID);
                    table.ForeignKey(
                        name: "CNCT_LST_CMCHTP",
                        column: x => x.CONTACTMECHTYPEID,
                        principalTable: "CONTACT_MECH_TYPE",
                        principalColumn: "CONTACT_MECH_TYPE_ID");
                    table.ForeignKey(
                        name: "CNCT_LST_MKCMPN",
                        column: x => x.MARKETINGCAMPAIGNID,
                        principalTable: "MARKETING_CAMPAIGN",
                        principalColumn: "MARKETING_CAMPAIGN_ID");
                    table.ForeignKey(
                        name: "CNCT_LST_TYP",
                        column: x => x.CONTACTLISTTYPEID,
                        principalTable: "CONTACT_LIST_TYPE",
                        principalColumn: "CONTACT_LIST_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "CONTACT_LIST_COMM_STATUS",
                columns: table => new
                {
                    CONTACTLISTID = table.Column<string>(name: "CONTACT_LIST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COMMUNICATIONEVENTID = table.Column<string>(name: "COMMUNICATION_EVENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    MESSAGEID = table.Column<string>(name: "MESSAGE_ID", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CHANGEBYUSERLOGINID = table.Column<string>(name: "CHANGE_BY_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTACT_LIST_COMM_STATUS", x => new { x.CONTACTLISTID, x.COMMUNICATIONEVENTID, x.CONTACTMECHID });
                    table.ForeignKey(
                        name: "CNCT_LST_CST_CE",
                        column: x => x.COMMUNICATIONEVENTID,
                        principalTable: "COMMUNICATION_EVENT",
                        principalColumn: "COMMUNICATION_EVENT_ID");
                    table.ForeignKey(
                        name: "CNCT_LST_CST_CL",
                        column: x => x.CONTACTLISTID,
                        principalTable: "CONTACT_LIST",
                        principalColumn: "CONTACT_LIST_ID");
                    table.ForeignKey(
                        name: "CNCT_LST_CST_CM",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "CNCT_LST_CST_ST",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "CONTACT_LIST_PARTY",
                columns: table => new
                {
                    CONTACTLISTID = table.Column<string>(name: "CONTACT_LIST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PREFERREDCONTACTMECHID = table.Column<string>(name: "PREFERRED_CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTACT_LIST_PARTY", x => new { x.CONTACTLISTID, x.PARTYID, x.FROMDATE });
                    table.ForeignKey(
                        name: "CNCT_LSTPTY_CLST",
                        column: x => x.CONTACTLISTID,
                        principalTable: "CONTACT_LIST",
                        principalColumn: "CONTACT_LIST_ID");
                    table.ForeignKey(
                        name: "CNCT_LSTPTY_PCM",
                        column: x => x.PREFERREDCONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "CNCT_LSTPTY_STS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "CONTACT_LIST_PARTY_STATUS",
                columns: table => new
                {
                    CONTACTLISTID = table.Column<string>(name: "CONTACT_LIST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    STATUSDATE = table.Column<DateTime>(name: "STATUS_DATE", type: "datetime", nullable: false),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SETBYUSERLOGINID = table.Column<string>(name: "SET_BY_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    OPTINVERIFYCODE = table.Column<string>(name: "OPT_IN_VERIFY_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTACT_LIST_PARTY_STATUS", x => new { x.CONTACTLISTID, x.PARTYID, x.FROMDATE, x.STATUSDATE });
                    table.ForeignKey(
                        name: "CTLSTPTST_CLP",
                        columns: x => new { x.CONTACTLISTID, x.PARTYID, x.FROMDATE },
                        principalTable: "CONTACT_LIST_PARTY",
                        principalColumns: new[] { "CONTACT_LIST_ID", "PARTY_ID", "FROM_DATE" });
                });

            migrationBuilder.CreateTable(
                name: "CONTAINER",
                columns: table => new
                {
                    CONTAINERID = table.Column<string>(name: "CONTAINER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTAINERTYPEID = table.Column<string>(name: "CONTAINER_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTAINER", x => x.CONTAINERID);
                    table.ForeignKey(
                        name: "CONTAINER_CTTYP",
                        column: x => x.CONTAINERTYPEID,
                        principalTable: "CONTAINER_TYPE",
                        principalColumn: "CONTAINER_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "CONTAINER_GEO_POINT",
                columns: table => new
                {
                    CONTAINERID = table.Column<string>(name: "CONTAINER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GEOPOINTID = table.Column<string>(name: "GEO_POINT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTAINER_GEO_POINT", x => new { x.CONTAINERID, x.GEOPOINTID, x.FROMDATE });
                    table.ForeignKey(
                        name: "CONTNRGEOPT_CONTNR",
                        column: x => x.CONTAINERID,
                        principalTable: "CONTAINER",
                        principalColumn: "CONTAINER_ID");
                    table.ForeignKey(
                        name: "CONTNRGEOPT_GEOPT",
                        column: x => x.GEOPOINTID,
                        principalTable: "GEO_POINT",
                        principalColumn: "GEO_POINT_ID");
                });

            migrationBuilder.CreateTable(
                name: "CONTENT",
                columns: table => new
                {
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTENTTYPEID = table.Column<string>(name: "CONTENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    OWNERCONTENTID = table.Column<string>(name: "OWNER_CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DECORATORCONTENTID = table.Column<string>(name: "DECORATOR_CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INSTANCEOFCONTENTID = table.Column<string>(name: "INSTANCE_OF_CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DATARESOURCEID = table.Column<string>(name: "DATA_RESOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TEMPLATEDATARESOURCEID = table.Column<string>(name: "TEMPLATE_DATA_RESOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DATASOURCEID = table.Column<string>(name: "DATA_SOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRIVILEGEENUMID = table.Column<string>(name: "PRIVILEGE_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SERVICENAME = table.Column<string>(name: "SERVICE_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CUSTOMMETHODID = table.Column<string>(name: "CUSTOM_METHOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CONTENTNAME = table.Column<string>(name: "CONTENT_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LOCALESTRING = table.Column<string>(name: "LOCALE_STRING", type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    MIMETYPEID = table.Column<string>(name: "MIME_TYPE_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    CHARACTERSETID = table.Column<string>(name: "CHARACTER_SET_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    CHILDLEAFCOUNT = table.Column<int>(name: "CHILD_LEAF_COUNT", type: "int", nullable: true),
                    CHILDBRANCHCOUNT = table.Column<int>(name: "CHILD_BRANCH_COUNT", type: "int", nullable: true),
                    CREATEDDATE = table.Column<DateTime>(name: "CREATED_DATE", type: "datetime", nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDDATE = table.Column<DateTime>(name: "LAST_MODIFIED_DATE", type: "datetime", nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTENT", x => x.CONTENTID);
                    table.ForeignKey(
                        name: "CONTENT_CHST",
                        column: x => x.CHARACTERSETID,
                        principalTable: "CHARACTER_SET",
                        principalColumn: "CHARACTER_SET_ID");
                    table.ForeignKey(
                        name: "CONTENT_CUSTMET",
                        column: x => x.CUSTOMMETHODID,
                        principalTable: "CUSTOM_METHOD",
                        principalColumn: "CUSTOM_METHOD_ID");
                    table.ForeignKey(
                        name: "CONTENT_DCNTNT",
                        column: x => x.DECORATORCONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "CONTENT_DTSRC",
                        column: x => x.DATASOURCEID,
                        principalTable: "DATA_SOURCE",
                        principalColumn: "DATA_SOURCE_ID");
                    table.ForeignKey(
                        name: "CONTENT_IOFCNT",
                        column: x => x.INSTANCEOFCONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "CONTENT_PCNTNT",
                        column: x => x.OWNERCONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "CONTENT_PRIVENM",
                        column: x => x.PRIVILEGEENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "CONTENT_STATUS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "CONTENT_TO_TYPE",
                        column: x => x.CONTENTTYPEID,
                        principalTable: "CONTENT_TYPE",
                        principalColumn: "CONTENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "CONTENT_ATTRIBUTE",
                columns: table => new
                {
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTENT_ATTRIBUTE", x => new { x.CONTENTID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "CONTENT_ATTR",
                        column: x => x.CONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "CONTENT_KEYWORD",
                columns: table => new
                {
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    KEYWORD = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    RELEVANCYWEIGHT = table.Column<int>(name: "RELEVANCY_WEIGHT", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTENT_KEYWORD", x => new { x.CONTENTID, x.KEYWORD });
                    table.ForeignKey(
                        name: "CNT_KWD_CNT",
                        column: x => x.CONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "CONTENT_META_DATA",
                columns: table => new
                {
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    METADATAPREDICATEID = table.Column<string>(name: "META_DATA_PREDICATE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    METADATAVALUE = table.Column<string>(name: "META_DATA_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DATASOURCEID = table.Column<string>(name: "DATA_SOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTENT_META_DATA", x => new { x.CONTENTID, x.METADATAPREDICATEID });
                    table.ForeignKey(
                        name: "CONTENTMD_CNTNT",
                        column: x => x.CONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "CONTENTMD_DMDPRD",
                        column: x => x.METADATAPREDICATEID,
                        principalTable: "META_DATA_PREDICATE",
                        principalColumn: "META_DATA_PREDICATE_ID");
                    table.ForeignKey(
                        name: "CONTENTMD_DTSRC",
                        column: x => x.DATASOURCEID,
                        principalTable: "DATA_SOURCE",
                        principalColumn: "DATA_SOURCE_ID");
                });

            migrationBuilder.CreateTable(
                name: "CONTENT_PURPOSE",
                columns: table => new
                {
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTENTPURPOSETYPEID = table.Column<string>(name: "CONTENT_PURPOSE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTENT_PURPOSE", x => new { x.CONTENTID, x.CONTENTPURPOSETYPEID });
                    table.ForeignKey(
                        name: "CONTENT_PRP",
                        column: x => x.CONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "CONTENT_PRP_TYPE",
                        column: x => x.CONTENTPURPOSETYPEID,
                        principalTable: "CONTENT_PURPOSE_TYPE",
                        principalColumn: "CONTENT_PURPOSE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PORTAL_PAGE",
                columns: table => new
                {
                    PORTALPAGEID = table.Column<string>(name: "PORTAL_PAGE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PORTALPAGENAME = table.Column<string>(name: "PORTAL_PAGE_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    OWNERUSERLOGINID = table.Column<string>(name: "OWNER_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    ORIGINALPORTALPAGEID = table.Column<string>(name: "ORIGINAL_PORTAL_PAGE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARENTPORTALPAGEID = table.Column<string>(name: "PARENT_PORTAL_PAGE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    SECURITYGROUPID = table.Column<string>(name: "SECURITY_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true),
                    HELPCONTENTID = table.Column<string>(name: "HELP_CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PORTAL_PAGE", x => x.PORTALPAGEID);
                    table.ForeignKey(
                        name: "PORTPAGE_SECGRP",
                        column: x => x.SECURITYGROUPID,
                        principalTable: "SECURITY_GROUP",
                        principalColumn: "GROUP_ID");
                    table.ForeignKey(
                        name: "PORTPAL_HELP_CONT",
                        column: x => x.HELPCONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "PortPage_PARENT",
                        column: x => x.PARENTPORTALPAGEID,
                        principalTable: "PORTAL_PAGE",
                        principalColumn: "PORTAL_PAGE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PROD_CONF_ITEM_CONTENT",
                columns: table => new
                {
                    CONFIGITEMID = table.Column<string>(name: "CONFIG_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONFITEMCONTENTTYPEID = table.Column<string>(name: "CONF_ITEM_CONTENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PROD_CONF_ITEM_CONTENT", x => new { x.CONFIGITEMID, x.CONTENTID, x.CONFITEMCONTENTTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "CIMT_CNT_CNT",
                        column: x => x.CONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "CIMT_CNT_PCIT",
                        column: x => x.CONFIGITEMID,
                        principalTable: "PRODUCT_CONFIG_ITEM",
                        principalColumn: "CONFIG_ITEM_ID");
                    table.ForeignKey(
                        name: "CIMT_CNT_TYPE",
                        column: x => x.CONFITEMCONTENTTYPEID,
                        principalTable: "PROD_CONF_ITEM_CONTENT_TYPE",
                        principalColumn: "CONF_ITEM_CONTENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_CATEGORY_CONTENT",
                columns: table => new
                {
                    PRODUCTCATEGORYID = table.Column<string>(name: "PRODUCT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODCATCONTENTTYPEID = table.Column<string>(name: "PROD_CAT_CONTENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    PURCHASEFROMDATE = table.Column<DateTime>(name: "PURCHASE_FROM_DATE", type: "datetime", nullable: true),
                    PURCHASETHRUDATE = table.Column<DateTime>(name: "PURCHASE_THRU_DATE", type: "datetime", nullable: true),
                    USECOUNTLIMIT = table.Column<int>(name: "USE_COUNT_LIMIT", type: "int", nullable: true),
                    USEDAYSLIMIT = table.Column<decimal>(name: "USE_DAYS_LIMIT", type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_CATEGORY_CONTENT", x => new { x.PRODUCTCATEGORYID, x.CONTENTID, x.PRODCATCONTENTTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PRDCAT_CNT_CNT",
                        column: x => x.CONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "PRDCAT_CNT_PRDCAT",
                        column: x => x.PRODUCTCATEGORYID,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "PRDCAT_CNT_TYPE",
                        column: x => x.PRODCATCONTENTTYPEID,
                        principalTable: "PRODUCT_CATEGORY_CONTENT_TYPE",
                        principalColumn: "PROD_CAT_CONTENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "SURVEY_RESPONSE_ANSWER",
                columns: table => new
                {
                    SURVEYRESPONSEID = table.Column<string>(name: "SURVEY_RESPONSE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SURVEYQUESTIONID = table.Column<string>(name: "SURVEY_QUESTION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SURVEYMULTIRESPCOLID = table.Column<string>(name: "SURVEY_MULTI_RESP_COL_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SURVEYMULTIRESPID = table.Column<string>(name: "SURVEY_MULTI_RESP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    BOOLEANRESPONSE = table.Column<string>(name: "BOOLEAN_RESPONSE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    CURRENCYRESPONSE = table.Column<decimal>(name: "CURRENCY_RESPONSE", type: "decimal(18,2)", nullable: true),
                    FLOATRESPONSE = table.Column<double>(name: "FLOAT_RESPONSE", type: "float", nullable: true),
                    NUMERICRESPONSE = table.Column<int>(name: "NUMERIC_RESPONSE", type: "int", nullable: true),
                    TEXTRESPONSE = table.Column<string>(name: "TEXT_RESPONSE", type: "text", nullable: true),
                    SURVEYOPTIONSEQID = table.Column<string>(name: "SURVEY_OPTION_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ANSWEREDDATE = table.Column<DateTime>(name: "ANSWERED_DATE", type: "datetime", nullable: true),
                    AMOUNTBASE = table.Column<decimal>(name: "AMOUNT_BASE", type: "decimal(18,2)", nullable: true),
                    AMOUNTBASEUOMID = table.Column<string>(name: "AMOUNT_BASE_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    WEIGHTFACTOR = table.Column<double>(name: "WEIGHT_FACTOR", type: "float", nullable: true),
                    DURATION = table.Column<int>(type: "int", nullable: true),
                    DURATIONUOMID = table.Column<string>(name: "DURATION_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SURVEY_RESPONSE_ANSWER", x => new { x.SURVEYRESPONSEID, x.SURVEYQUESTIONID, x.SURVEYMULTIRESPCOLID });
                    table.ForeignKey(
                        name: "SRVYRSPA_CONT",
                        column: x => x.CONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "SRVYRSPA_OPT",
                        columns: x => new { x.SURVEYQUESTIONID, x.SURVEYOPTIONSEQID },
                        principalTable: "SURVEY_QUESTION_OPTION",
                        principalColumns: new[] { "SURVEY_QUESTION_ID", "SURVEY_OPTION_SEQ_ID" });
                    table.ForeignKey(
                        name: "SRVYRSPA_SVQU",
                        column: x => x.SURVEYQUESTIONID,
                        principalTable: "SURVEY_QUESTION",
                        principalColumn: "SURVEY_QUESTION_ID");
                    table.ForeignKey(
                        name: "SRVYRSPA_SVRSP",
                        column: x => x.SURVEYRESPONSEID,
                        principalTable: "SURVEY_RESPONSE",
                        principalColumn: "SURVEY_RESPONSE_ID");
                });

            migrationBuilder.CreateTable(
                name: "WEB_SITE_PUBLISH_POINT",
                columns: table => new
                {
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TEMPLATETITLE = table.Column<string>(name: "TEMPLATE_TITLE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    STYLESHEETFILE = table.Column<string>(name: "STYLE_SHEET_FILE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LOGO = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    MEDALLIONLOGO = table.Column<string>(name: "MEDALLION_LOGO", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LINELOGO = table.Column<string>(name: "LINE_LOGO", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LEFTBARID = table.Column<string>(name: "LEFT_BAR_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RIGHTBARID = table.Column<string>(name: "RIGHT_BAR_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CONTENTDEPT = table.Column<string>(name: "CONTENT_DEPT", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ABOUTCONTENTID = table.Column<string>(name: "ABOUT_CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WEB_SITE_PUBLISH_POINT", x => x.CONTENTID);
                    table.ForeignKey(
                        name: "WBSTPP_CONTENT",
                        column: x => x.CONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "PORTAL_PAGE_COLUMN",
                columns: table => new
                {
                    PORTALPAGEID = table.Column<string>(name: "PORTAL_PAGE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COLUMNSEQID = table.Column<string>(name: "COLUMN_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COLUMNWIDTHPIXELS = table.Column<int>(name: "COLUMN_WIDTH_PIXELS", type: "int", nullable: true),
                    COLUMNWIDTHPERCENTAGE = table.Column<int>(name: "COLUMN_WIDTH_PERCENTAGE", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PORTAL_PAGE_COLUMN", x => new { x.PORTALPAGEID, x.COLUMNSEQID });
                    table.ForeignKey(
                        name: "PRTL_PGCOL_PAGE",
                        column: x => x.PORTALPAGEID,
                        principalTable: "PORTAL_PAGE",
                        principalColumn: "PORTAL_PAGE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PORTAL_PAGE_PORTLET",
                columns: table => new
                {
                    PORTALPAGEID = table.Column<string>(name: "PORTAL_PAGE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PORTALPORTLETID = table.Column<string>(name: "PORTAL_PORTLET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PORTLETSEQID = table.Column<string>(name: "PORTLET_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COLUMNSEQID = table.Column<string>(name: "COLUMN_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PORTAL_PAGE_PORTLET", x => new { x.PORTALPAGEID, x.PORTALPORTLETID, x.PORTLETSEQID });
                    table.ForeignKey(
                        name: "PRTL_PGPTLT_PAGE",
                        column: x => x.PORTALPAGEID,
                        principalTable: "PORTAL_PAGE",
                        principalColumn: "PORTAL_PAGE_ID");
                    table.ForeignKey(
                        name: "PRTL_PGPTLT_PTLT",
                        column: x => x.PORTALPORTLETID,
                        principalTable: "PORTAL_PORTLET",
                        principalColumn: "PORTAL_PORTLET_ID");
                });

            migrationBuilder.CreateTable(
                name: "CONTENT_APPROVAL",
                columns: table => new
                {
                    CONTENTAPPROVALID = table.Column<string>(name: "CONTENT_APPROVAL_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CONTENTREVISIONSEQID = table.Column<string>(name: "CONTENT_REVISION_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    APPROVALSTATUSID = table.Column<string>(name: "APPROVAL_STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    APPROVALDATE = table.Column<DateTime>(name: "APPROVAL_DATE", type: "datetime", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTENT_APPROVAL", x => x.CONTENTAPPROVALID);
                    table.ForeignKey(
                        name: "CNTNTAPPR_APSI",
                        column: x => x.APPROVALSTATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "CNTNTAPPR_CNT",
                        column: x => x.CONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "CNTNTAPPR_RLTP",
                        column: x => x.ROLETYPEID,
                        principalTable: "ROLE_TYPE",
                        principalColumn: "ROLE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "CONTENT_ASSOC",
                columns: table => new
                {
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTENTIDTO = table.Column<string>(name: "CONTENT_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTENTASSOCTYPEID = table.Column<string>(name: "CONTENT_ASSOC_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    CONTENTASSOCPREDICATEID = table.Column<string>(name: "CONTENT_ASSOC_PREDICATE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DATASOURCEID = table.Column<string>(name: "DATA_SOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    MAPKEY = table.Column<string>(name: "MAP_KEY", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    UPPERCOORDINATE = table.Column<int>(name: "UPPER_COORDINATE", type: "int", nullable: true),
                    LEFTCOORDINATE = table.Column<int>(name: "LEFT_COORDINATE", type: "int", nullable: true),
                    CREATEDDATE = table.Column<DateTime>(name: "CREATED_DATE", type: "datetime", nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDDATE = table.Column<DateTime>(name: "LAST_MODIFIED_DATE", type: "datetime", nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTENT_ASSOC", x => new { x.CONTENTID, x.CONTENTIDTO, x.CONTENTASSOCTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "CONTENTASSC_DTSRC",
                        column: x => x.DATASOURCEID,
                        principalTable: "DATA_SOURCE",
                        principalColumn: "DATA_SOURCE_ID");
                    table.ForeignKey(
                        name: "CONTENTASSC_FROM",
                        column: x => x.CONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "CONTENTASSC_PRED",
                        column: x => x.CONTENTASSOCPREDICATEID,
                        principalTable: "CONTENT_ASSOC_PREDICATE",
                        principalColumn: "CONTENT_ASSOC_PREDICATE_ID");
                    table.ForeignKey(
                        name: "CONTENTASSC_TO",
                        column: x => x.CONTENTIDTO,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "CONTENTASSC_TYP",
                        column: x => x.CONTENTASSOCTYPEID,
                        principalTable: "CONTENT_ASSOC_TYPE",
                        principalColumn: "CONTENT_ASSOC_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "CONTENT_REVISION",
                columns: table => new
                {
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTENTREVISIONSEQID = table.Column<string>(name: "CONTENT_REVISION_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COMMITTEDBYPARTYID = table.Column<string>(name: "COMMITTED_BY_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTENT_REVISION", x => new { x.CONTENTID, x.CONTENTREVISIONSEQID });
                    table.ForeignKey(
                        name: "CNTNTREV_CNT",
                        column: x => x.CONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "CONTENT_REVISION_ITEM",
                columns: table => new
                {
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTENTREVISIONSEQID = table.Column<string>(name: "CONTENT_REVISION_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ITEMCONTENTID = table.Column<string>(name: "ITEM_CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    OLDDATARESOURCEID = table.Column<string>(name: "OLD_DATA_RESOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    NEWDATARESOURCEID = table.Column<string>(name: "NEW_DATA_RESOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTENT_REVISION_ITEM", x => new { x.CONTENTID, x.CONTENTREVISIONSEQID, x.ITEMCONTENTID });
                    table.ForeignKey(
                        name: "CNTNTREVIT_CNTREV",
                        columns: x => new { x.CONTENTID, x.CONTENTREVISIONSEQID },
                        principalTable: "CONTENT_REVISION",
                        principalColumns: new[] { "CONTENT_ID", "CONTENT_REVISION_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "CONTENT_ROLE",
                columns: table => new
                {
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CONTENT_ROLE", x => new { x.CONTENTID, x.PARTYID, x.ROLETYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "CNTNT_RL_CNTNT",
                        column: x => x.CONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "COST_COMPONENT",
                columns: table => new
                {
                    COSTCOMPONENTID = table.Column<string>(name: "COST_COMPONENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COSTCOMPONENTTYPEID = table.Column<string>(name: "COST_COMPONENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTFEATUREID = table.Column<string>(name: "PRODUCT_FEATURE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    GEOID = table.Column<string>(name: "GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FIXEDASSETID = table.Column<string>(name: "FIXED_ASSET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    COSTCOMPONENTCALCID = table.Column<string>(name: "COST_COMPONENT_CALC_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    COST = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    COSTUOMID = table.Column<string>(name: "COST_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COST_COMPONENT", x => x.COSTCOMPONENTID);
                    table.ForeignKey(
                        name: "COST_COMP_CALC",
                        column: x => x.COSTCOMPONENTCALCID,
                        principalTable: "COST_COMPONENT_CALC",
                        principalColumn: "COST_COMPONENT_CALC_ID");
                    table.ForeignKey(
                        name: "COST_COMP_CUOM",
                        column: x => x.COSTUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "COST_COMP_GEO",
                        column: x => x.GEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "COST_COMP_PRODFEAT",
                        column: x => x.PRODUCTFEATUREID,
                        principalTable: "PRODUCT_FEATURE",
                        principalColumn: "PRODUCT_FEATURE_ID");
                    table.ForeignKey(
                        name: "COST_COMP_TYPE",
                        column: x => x.COSTCOMPONENTTYPEID,
                        principalTable: "COST_COMPONENT_TYPE",
                        principalColumn: "COST_COMPONENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "COST_COMPONENT_ATTRIBUTE",
                columns: table => new
                {
                    COSTCOMPONENTID = table.Column<string>(name: "COST_COMPONENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COST_COMPONENT_ATTRIBUTE", x => new { x.COSTCOMPONENTID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "COST_COMP_ATTR",
                        column: x => x.COSTCOMPONENTID,
                        principalTable: "COST_COMPONENT",
                        principalColumn: "COST_COMPONENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "CREDIT_CARD",
                columns: table => new
                {
                    PAYMENTMETHODID = table.Column<string>(name: "PAYMENT_METHOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CARDTYPE = table.Column<string>(name: "CARD_TYPE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    CARDNUMBER = table.Column<string>(name: "CARD_NUMBER", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    VALIDFROMDATE = table.Column<string>(name: "VALID_FROM_DATE", type: "varchar(7)", unicode: false, maxLength: 7, nullable: true),
                    EXPIREDATE = table.Column<string>(name: "EXPIRE_DATE", type: "varchar(7)", unicode: false, maxLength: 7, nullable: true),
                    ISSUENUMBER = table.Column<string>(name: "ISSUE_NUMBER", type: "varchar(7)", unicode: false, maxLength: 7, nullable: true),
                    COMPANYNAMEONCARD = table.Column<string>(name: "COMPANY_NAME_ON_CARD", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TITLEONCARD = table.Column<string>(name: "TITLE_ON_CARD", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FIRSTNAMEONCARD = table.Column<string>(name: "FIRST_NAME_ON_CARD", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    MIDDLENAMEONCARD = table.Column<string>(name: "MIDDLE_NAME_ON_CARD", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LASTNAMEONCARD = table.Column<string>(name: "LAST_NAME_ON_CARD", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SUFFIXONCARD = table.Column<string>(name: "SUFFIX_ON_CARD", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CONSECUTIVEFAILEDAUTHS = table.Column<int>(name: "CONSECUTIVE_FAILED_AUTHS", type: "int", nullable: true),
                    LASTFAILEDAUTHDATE = table.Column<DateTime>(name: "LAST_FAILED_AUTH_DATE", type: "datetime", nullable: true),
                    CONSECUTIVEFAILEDNSF = table.Column<int>(name: "CONSECUTIVE_FAILED_NSF", type: "int", nullable: true),
                    LASTFAILEDNSFDATE = table.Column<DateTime>(name: "LAST_FAILED_NSF_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CREDIT_CARD", x => x.PAYMENTMETHODID);
                    table.ForeignKey(
                        name: "CREDCARD_CMECH",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "CREDCARD_PADDR",
                        column: x => x.CONTACTMECHID,
                        principalTable: "POSTAL_ADDRESS",
                        principalColumn: "CONTACT_MECH_ID");
                });

            migrationBuilder.CreateTable(
                name: "CUST_REQUEST",
                columns: table => new
                {
                    CUSTREQUESTID = table.Column<string>(name: "CUST_REQUEST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CUSTREQUESTTYPEID = table.Column<string>(name: "CUST_REQUEST_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CUSTREQUESTCATEGORYID = table.Column<string>(name: "CUST_REQUEST_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FROMPARTYID = table.Column<string>(name: "FROM_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRIORITY = table.Column<int>(type: "int", nullable: true),
                    CUSTREQUESTDATE = table.Column<DateTime>(name: "CUST_REQUEST_DATE", type: "datetime", nullable: false),
                    RESPONSEREQUIREDDATE = table.Column<DateTime>(name: "RESPONSE_REQUIRED_DATE", type: "datetime", nullable: true),
                    CUSTREQUESTNAME = table.Column<string>(name: "CUST_REQUEST_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    MAXIMUMAMOUNTUOMID = table.Column<string>(name: "MAXIMUM_AMOUNT_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SALESCHANNELENUMID = table.Column<string>(name: "SALES_CHANNEL_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FULFILLCONTACTMECHID = table.Column<string>(name: "FULFILL_CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CURRENCYUOMID = table.Column<string>(name: "CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    OPENDATETIME = table.Column<DateTime>(name: "OPEN_DATE_TIME", type: "datetime", nullable: true),
                    CLOSEDDATETIME = table.Column<DateTime>(name: "CLOSED_DATE_TIME", type: "datetime", nullable: true),
                    INTERNALCOMMENT = table.Column<string>(name: "INTERNAL_COMMENT", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    REASON = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CREATEDDATE = table.Column<DateTime>(name: "CREATED_DATE", type: "datetime", nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDDATE = table.Column<DateTime>(name: "LAST_MODIFIED_DATE", type: "datetime", nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CUST_REQUEST", x => x.CUSTREQUESTID);
                    table.ForeignKey(
                        name: "CUST_REQ_AUOM",
                        column: x => x.MAXIMUMAMOUNTUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "CUST_REQ_CHANNEL",
                        column: x => x.SALESCHANNELENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "CUST_REQ_CUOM",
                        column: x => x.CURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "CUST_REQ_FULCM",
                        column: x => x.FULFILLCONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "CUST_REQ_STATUS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "CUST_REQUEST_ATTRIBUTE",
                columns: table => new
                {
                    CUSTREQUESTID = table.Column<string>(name: "CUST_REQUEST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CUST_REQUEST_ATTRIBUTE", x => new { x.CUSTREQUESTID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "CUST_REQ_ATTR",
                        column: x => x.CUSTREQUESTID,
                        principalTable: "CUST_REQUEST",
                        principalColumn: "CUST_REQUEST_ID");
                });

            migrationBuilder.CreateTable(
                name: "CUST_REQUEST_COMM_EVENT",
                columns: table => new
                {
                    CUSTREQUESTID = table.Column<string>(name: "CUST_REQUEST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COMMUNICATIONEVENTID = table.Column<string>(name: "COMMUNICATION_EVENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CUST_REQUEST_COMM_EVENT", x => new { x.CUSTREQUESTID, x.COMMUNICATIONEVENTID });
                    table.ForeignKey(
                        name: "CUSTREQ_CEV_CEV",
                        column: x => x.COMMUNICATIONEVENTID,
                        principalTable: "COMMUNICATION_EVENT",
                        principalColumn: "COMMUNICATION_EVENT_ID");
                    table.ForeignKey(
                        name: "CUSTREQ_CEV_CRQ",
                        column: x => x.CUSTREQUESTID,
                        principalTable: "CUST_REQUEST",
                        principalColumn: "CUST_REQUEST_ID");
                });

            migrationBuilder.CreateTable(
                name: "CUST_REQUEST_CONTENT",
                columns: table => new
                {
                    CUSTREQUESTID = table.Column<string>(name: "CUST_REQUEST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CUST_REQUEST_CONTENT", x => new { x.CUSTREQUESTID, x.CONTENTID, x.FROMDATE });
                    table.ForeignKey(
                        name: "CUSTREQ_CNT_CNT",
                        column: x => x.CONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "CUSTREQ_CNT_CUSTRQ",
                        column: x => x.CUSTREQUESTID,
                        principalTable: "CUST_REQUEST",
                        principalColumn: "CUST_REQUEST_ID");
                });

            migrationBuilder.CreateTable(
                name: "CUST_REQUEST_CATEGORY",
                columns: table => new
                {
                    CUSTREQUESTCATEGORYID = table.Column<string>(name: "CUST_REQUEST_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CUSTREQUESTTYPEID = table.Column<string>(name: "CUST_REQUEST_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CUST_REQUEST_CATEGORY", x => x.CUSTREQUESTCATEGORYID);
                });

            migrationBuilder.CreateTable(
                name: "CUST_REQUEST_ITEM",
                columns: table => new
                {
                    CUSTREQUESTID = table.Column<string>(name: "CUST_REQUEST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CUSTREQUESTITEMSEQID = table.Column<string>(name: "CUST_REQUEST_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CUSTREQUESTRESOLUTIONID = table.Column<string>(name: "CUST_REQUEST_RESOLUTION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRIORITY = table.Column<int>(type: "int", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    REQUIREDBYDATE = table.Column<DateTime>(name: "REQUIRED_BY_DATE", type: "datetime", nullable: true),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    SELECTEDAMOUNT = table.Column<decimal>(name: "SELECTED_AMOUNT", type: "decimal(18,6)", nullable: true),
                    MAXIMUMAMOUNT = table.Column<decimal>(name: "MAXIMUM_AMOUNT", type: "decimal(18,2)", nullable: true),
                    RESERVSTART = table.Column<DateTime>(name: "RESERV_START", type: "datetime", nullable: true),
                    RESERVLENGTH = table.Column<decimal>(name: "RESERV_LENGTH", type: "decimal(18,6)", nullable: true),
                    RESERVPERSONS = table.Column<decimal>(name: "RESERV_PERSONS", type: "decimal(18,6)", nullable: true),
                    CONFIGID = table.Column<string>(name: "CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    STORY = table.Column<string>(type: "text", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CUST_REQUEST_ITEM", x => new { x.CUSTREQUESTID, x.CUSTREQUESTITEMSEQID });
                    table.ForeignKey(
                        name: "CUST_REQITM_CREQ",
                        column: x => x.CUSTREQUESTID,
                        principalTable: "CUST_REQUEST",
                        principalColumn: "CUST_REQUEST_ID");
                    table.ForeignKey(
                        name: "CUST_REQITM_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "CUST_REQUEST_ITEM_NOTE",
                columns: table => new
                {
                    CUSTREQUESTID = table.Column<string>(name: "CUST_REQUEST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CUSTREQUESTITEMSEQID = table.Column<string>(name: "CUST_REQUEST_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    NOTEID = table.Column<string>(name: "NOTE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CUST_REQUEST_ITEM_NOTE", x => new { x.CUSTREQUESTID, x.CUSTREQUESTITEMSEQID, x.NOTEID });
                    table.ForeignKey(
                        name: "CUST_REQ_ITNT",
                        columns: x => new { x.CUSTREQUESTID, x.CUSTREQUESTITEMSEQID },
                        principalTable: "CUST_REQUEST_ITEM",
                        principalColumns: new[] { "CUST_REQUEST_ID", "CUST_REQUEST_ITEM_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "CUST_REQUEST_ITEM_WORK_EFFORT",
                columns: table => new
                {
                    CUSTREQUESTID = table.Column<string>(name: "CUST_REQUEST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CUSTREQUESTITEMSEQID = table.Column<string>(name: "CUST_REQUEST_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CUST_REQUEST_ITEM_WORK_EFFO", x => new { x.CUSTREQUESTID, x.CUSTREQUESTITEMSEQID, x.WORKEFFORTID });
                    table.ForeignKey(
                        name: "WORK_REQFL_CSTRQ",
                        columns: x => new { x.CUSTREQUESTID, x.CUSTREQUESTITEMSEQID },
                        principalTable: "CUST_REQUEST_ITEM",
                        principalColumns: new[] { "CUST_REQUEST_ID", "CUST_REQUEST_ITEM_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "CUST_REQUEST_NOTE",
                columns: table => new
                {
                    CUSTREQUESTID = table.Column<string>(name: "CUST_REQUEST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    NOTEID = table.Column<string>(name: "NOTE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CUST_REQUEST_NOTE", x => new { x.CUSTREQUESTID, x.NOTEID });
                    table.ForeignKey(
                        name: "CRQ_CR",
                        column: x => x.CUSTREQUESTID,
                        principalTable: "CUST_REQUEST",
                        principalColumn: "CUST_REQUEST_ID");
                });

            migrationBuilder.CreateTable(
                name: "CUST_REQUEST_PARTY",
                columns: table => new
                {
                    CUSTREQUESTID = table.Column<string>(name: "CUST_REQUEST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CUST_REQUEST_PARTY", x => new { x.CUSTREQUESTID, x.PARTYID, x.ROLETYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "CREQ_RL_CRQST",
                        column: x => x.CUSTREQUESTID,
                        principalTable: "CUST_REQUEST",
                        principalColumn: "CUST_REQUEST_ID");
                });

            migrationBuilder.CreateTable(
                name: "CUST_REQUEST_RESOLUTION",
                columns: table => new
                {
                    CUSTREQUESTRESOLUTIONID = table.Column<string>(name: "CUST_REQUEST_RESOLUTION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CUSTREQUESTTYPEID = table.Column<string>(name: "CUST_REQUEST_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CUST_REQUEST_RESOLUTION", x => x.CUSTREQUESTRESOLUTIONID);
                });

            migrationBuilder.CreateTable(
                name: "CUST_REQUEST_STATUS",
                columns: table => new
                {
                    CUSTREQUESTSTATUSID = table.Column<string>(name: "CUST_REQUEST_STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CUSTREQUESTID = table.Column<string>(name: "CUST_REQUEST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CUSTREQUESTITEMSEQID = table.Column<string>(name: "CUST_REQUEST_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSDATE = table.Column<DateTime>(name: "STATUS_DATE", type: "datetime", nullable: true),
                    CHANGEBYUSERLOGINID = table.Column<string>(name: "CHANGE_BY_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CUST_REQUEST_STATUS", x => x.CUSTREQUESTSTATUSID);
                    table.ForeignKey(
                        name: "CUST_REQST_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "CUST_REQ_STRQ",
                        column: x => x.CUSTREQUESTID,
                        principalTable: "CUST_REQUEST",
                        principalColumn: "CUST_REQUEST_ID");
                });

            migrationBuilder.CreateTable(
                name: "CUST_REQUEST_TYPE",
                columns: table => new
                {
                    CUSTREQUESTTYPEID = table.Column<string>(name: "CUST_REQUEST_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTTYPEID = table.Column<string>(name: "PARENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HASTABLE = table.Column<string>(name: "HAS_TABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CUST_REQUEST_TYPE", x => x.CUSTREQUESTTYPEID);
                    table.ForeignKey(
                        name: "CUST_REQ_TYPE_PAR",
                        column: x => x.PARENTTYPEID,
                        principalTable: "CUST_REQUEST_TYPE",
                        principalColumn: "CUST_REQUEST_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "CUST_REQUEST_TYPE_ATTR",
                columns: table => new
                {
                    CUSTREQUESTTYPEID = table.Column<string>(name: "CUST_REQUEST_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CUST_REQUEST_TYPE_ATTR", x => new { x.CUSTREQUESTTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "CUST_REQ_TYPE_ATTR",
                        column: x => x.CUSTREQUESTTYPEID,
                        principalTable: "CUST_REQUEST_TYPE",
                        principalColumn: "CUST_REQUEST_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "CUST_REQUEST_WORK_EFFORT",
                columns: table => new
                {
                    CUSTREQUESTID = table.Column<string>(name: "CUST_REQUEST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CUST_REQUEST_WORK_EFFORT", x => new { x.CUSTREQUESTID, x.WORKEFFORTID });
                    table.ForeignKey(
                        name: "CSTREQ_WF_CREQ",
                        column: x => x.CUSTREQUESTID,
                        principalTable: "CUST_REQUEST",
                        principalColumn: "CUST_REQUEST_ID");
                });

            migrationBuilder.CreateTable(
                name: "CUSTOM_TIME_PERIOD",
                columns: table => new
                {
                    CUSTOMTIMEPERIODID = table.Column<string>(name: "CUSTOM_TIME_PERIOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTPERIODID = table.Column<string>(name: "PARENT_PERIOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PERIODTYPEID = table.Column<string>(name: "PERIOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PERIODNUM = table.Column<int>(name: "PERIOD_NUM", type: "int", nullable: true),
                    PERIODNAME = table.Column<string>(name: "PERIOD_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    ISCLOSED = table.Column<string>(name: "IS_CLOSED", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true),
                    ORGANIZATIONPARTYID = table.Column<string>(name: "ORGANIZATION_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CUSTOM_TIME_PERIOD", x => x.CUSTOMTIMEPERIODID);
                    table.ForeignKey(
                        name: "ORG_PRD_PARPER",
                        column: x => x.PARENTPERIODID,
                        principalTable: "CUSTOM_TIME_PERIOD",
                        principalColumn: "CUSTOM_TIME_PERIOD_ID");
                    table.ForeignKey(
                        name: "ORG_PRD_PERTYP",
                        column: x => x.PERIODTYPEID,
                        principalTable: "PERIOD_TYPE",
                        principalColumn: "PERIOD_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "DATA_RESOURCE",
                columns: table => new
                {
                    DATARESOURCEID = table.Column<string>(name: "DATA_RESOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DATARESOURCETYPEID = table.Column<string>(name: "DATA_RESOURCE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DATATEMPLATETYPEID = table.Column<string>(name: "DATA_TEMPLATE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DATACATEGORYID = table.Column<string>(name: "DATA_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DATASOURCEID = table.Column<string>(name: "DATA_SOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DATARESOURCENAME = table.Column<string>(name: "DATA_RESOURCE_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LOCALESTRING = table.Column<string>(name: "LOCALE_STRING", type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    MIMETYPEID = table.Column<string>(name: "MIME_TYPE_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    CHARACTERSETID = table.Column<string>(name: "CHARACTER_SET_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    OBJECTINFO = table.Column<string>(name: "OBJECT_INFO", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SURVEYID = table.Column<string>(name: "SURVEY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SURVEYRESPONSEID = table.Column<string>(name: "SURVEY_RESPONSE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RELATEDDETAILID = table.Column<string>(name: "RELATED_DETAIL_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ISPUBLIC = table.Column<string>(name: "IS_PUBLIC", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    CREATEDDATE = table.Column<DateTime>(name: "CREATED_DATE", type: "datetime", nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDDATE = table.Column<DateTime>(name: "LAST_MODIFIED_DATE", type: "datetime", nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DATA_RESOURCE", x => x.DATARESOURCEID);
                    table.ForeignKey(
                        name: "DATA_REC_CHST",
                        column: x => x.CHARACTERSETID,
                        principalTable: "CHARACTER_SET",
                        principalColumn: "CHARACTER_SET_ID");
                    table.ForeignKey(
                        name: "DATA_REC_DTSRC",
                        column: x => x.DATASOURCEID,
                        principalTable: "DATA_SOURCE",
                        principalColumn: "DATA_SOURCE_ID");
                    table.ForeignKey(
                        name: "DATA_REC_SURVEY",
                        column: x => x.SURVEYID,
                        principalTable: "SURVEY",
                        principalColumn: "SURVEY_ID");
                    table.ForeignKey(
                        name: "DATA_REC_SVRSP",
                        column: x => x.SURVEYRESPONSEID,
                        principalTable: "SURVEY_RESPONSE",
                        principalColumn: "SURVEY_RESPONSE_ID");
                    table.ForeignKey(
                        name: "DATA_REC_TO_CAT",
                        column: x => x.DATACATEGORYID,
                        principalTable: "DATA_CATEGORY",
                        principalColumn: "DATA_CATEGORY_ID");
                    table.ForeignKey(
                        name: "DATA_REC_TO_TTP",
                        column: x => x.DATATEMPLATETYPEID,
                        principalTable: "DATA_TEMPLATE_TYPE",
                        principalColumn: "DATA_TEMPLATE_TYPE_ID");
                    table.ForeignKey(
                        name: "DATA_REC_TO_TYPE",
                        column: x => x.DATARESOURCETYPEID,
                        principalTable: "DATA_RESOURCE_TYPE",
                        principalColumn: "DATA_RESOURCE_TYPE_ID");
                    table.ForeignKey(
                        name: "DTRSRC_STATUS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "DATA_RESOURCE_ATTRIBUTE",
                columns: table => new
                {
                    DATARESOURCEID = table.Column<string>(name: "DATA_RESOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DATA_RESOURCE_ATTRIBUTE", x => new { x.DATARESOURCEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "DATA_REC_ATTR",
                        column: x => x.DATARESOURCEID,
                        principalTable: "DATA_RESOURCE",
                        principalColumn: "DATA_RESOURCE_ID");
                });

            migrationBuilder.CreateTable(
                name: "DATA_RESOURCE_META_DATA",
                columns: table => new
                {
                    DATARESOURCEID = table.Column<string>(name: "DATA_RESOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    METADATAPREDICATEID = table.Column<string>(name: "META_DATA_PREDICATE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    METADATAVALUE = table.Column<string>(name: "META_DATA_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DATASOURCEID = table.Column<string>(name: "DATA_SOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DATA_RESOURCE_META_DATA", x => new { x.DATARESOURCEID, x.METADATAPREDICATEID });
                    table.ForeignKey(
                        name: "DATA_MD_DATREC",
                        column: x => x.DATARESOURCEID,
                        principalTable: "DATA_RESOURCE",
                        principalColumn: "DATA_RESOURCE_ID");
                    table.ForeignKey(
                        name: "DATA_MD_DMDPRD",
                        column: x => x.METADATAPREDICATEID,
                        principalTable: "META_DATA_PREDICATE",
                        principalColumn: "META_DATA_PREDICATE_ID");
                    table.ForeignKey(
                        name: "DATA_MD_DTSRC",
                        column: x => x.DATASOURCEID,
                        principalTable: "DATA_SOURCE",
                        principalColumn: "DATA_SOURCE_ID");
                });

            migrationBuilder.CreateTable(
                name: "DATA_RESOURCE_PURPOSE",
                columns: table => new
                {
                    DATARESOURCEID = table.Column<string>(name: "DATA_RESOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTENTPURPOSETYPEID = table.Column<string>(name: "CONTENT_PURPOSE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DATA_RESOURCE_PURPOSE", x => new { x.DATARESOURCEID, x.CONTENTPURPOSETYPEID });
                    table.ForeignKey(
                        name: "DATA_REC_PRP",
                        column: x => x.DATARESOURCEID,
                        principalTable: "DATA_RESOURCE",
                        principalColumn: "DATA_RESOURCE_ID");
                    table.ForeignKey(
                        name: "DATA_REC_PRP_TYPE",
                        column: x => x.CONTENTPURPOSETYPEID,
                        principalTable: "CONTENT_PURPOSE_TYPE",
                        principalColumn: "CONTENT_PURPOSE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ELECTRONIC_TEXT",
                columns: table => new
                {
                    DATARESOURCEID = table.Column<string>(name: "DATA_RESOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TEXTDATA = table.Column<string>(name: "TEXT_DATA", type: "text", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ELECTRONIC_TEXT", x => x.DATARESOURCEID);
                    table.ForeignKey(
                        name: "DATA_REC_TEXT",
                        column: x => x.DATARESOURCEID,
                        principalTable: "DATA_RESOURCE",
                        principalColumn: "DATA_RESOURCE_ID");
                });

            migrationBuilder.CreateTable(
                name: "IMAGE_DATA_RESOURCE",
                columns: table => new
                {
                    DATARESOURCEID = table.Column<string>(name: "DATA_RESOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    IMAGEDATA = table.Column<byte[]>(name: "IMAGE_DATA", type: "image", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IMAGE_DATA_RESOURCE", x => x.DATARESOURCEID);
                    table.ForeignKey(
                        name: "DATA_REC_IMAGE",
                        column: x => x.DATARESOURCEID,
                        principalTable: "DATA_RESOURCE",
                        principalColumn: "DATA_RESOURCE_ID");
                });

            migrationBuilder.CreateTable(
                name: "OTHER_DATA_RESOURCE",
                columns: table => new
                {
                    DATARESOURCEID = table.Column<string>(name: "DATA_RESOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DATARESOURCECONTENT = table.Column<byte[]>(name: "DATA_RESOURCE_CONTENT", type: "image", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OTHER_DATA_RESOURCE", x => x.DATARESOURCEID);
                    table.ForeignKey(
                        name: "DATA_REC_OTHER",
                        column: x => x.DATARESOURCEID,
                        principalTable: "DATA_RESOURCE",
                        principalColumn: "DATA_RESOURCE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_FEATURE_DATA_RESOURCE",
                columns: table => new
                {
                    DATARESOURCEID = table.Column<string>(name: "DATA_RESOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTFEATUREID = table.Column<string>(name: "PRODUCT_FEATURE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_FEATURE_DATA_RESOUR", x => new { x.DATARESOURCEID, x.PRODUCTFEATUREID });
                    table.ForeignKey(
                        name: "PFEAT_DR_DATRES",
                        column: x => x.DATARESOURCEID,
                        principalTable: "DATA_RESOURCE",
                        principalColumn: "DATA_RESOURCE_ID");
                    table.ForeignKey(
                        name: "PFEAT_DR_FEATURE",
                        column: x => x.PRODUCTFEATUREID,
                        principalTable: "PRODUCT_FEATURE",
                        principalColumn: "PRODUCT_FEATURE_ID");
                });

            migrationBuilder.CreateTable(
                name: "VIDEO_DATA_RESOURCE",
                columns: table => new
                {
                    DATARESOURCEID = table.Column<string>(name: "DATA_RESOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    VIDEODATA = table.Column<byte[]>(name: "VIDEO_DATA", type: "image", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VIDEO_DATA_RESOURCE", x => x.DATARESOURCEID);
                    table.ForeignKey(
                        name: "DATA_REC_VIDEO",
                        column: x => x.DATARESOURCEID,
                        principalTable: "DATA_RESOURCE",
                        principalColumn: "DATA_RESOURCE_ID");
                });

            migrationBuilder.CreateTable(
                name: "DATA_RESOURCE_ROLE",
                columns: table => new
                {
                    DATARESOURCEID = table.Column<string>(name: "DATA_RESOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DATA_RESOURCE_ROLE", x => new { x.DATARESOURCEID, x.PARTYID, x.ROLETYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "DATARECRL_DATREC",
                        column: x => x.DATARESOURCEID,
                        principalTable: "DATA_RESOURCE",
                        principalColumn: "DATA_RESOURCE_ID");
                });

            migrationBuilder.CreateTable(
                name: "DEDUCTION",
                columns: table => new
                {
                    DEDUCTIONID = table.Column<string>(name: "DEDUCTION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DEDUCTIONTYPEID = table.Column<string>(name: "DEDUCTION_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PAYMENTID = table.Column<string>(name: "PAYMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AMOUNT = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DEDUCTION", x => x.DEDUCTIONID);
                    table.ForeignKey(
                        name: "DEDCTN_DEDTYP",
                        column: x => x.DEDUCTIONTYPEID,
                        principalTable: "DEDUCTION_TYPE",
                        principalColumn: "DEDUCTION_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "DELIVERY",
                columns: table => new
                {
                    DELIVERYID = table.Column<string>(name: "DELIVERY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORIGINFACILITYID = table.Column<string>(name: "ORIGIN_FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESTFACILITYID = table.Column<string>(name: "DEST_FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ACTUALSTARTDATE = table.Column<DateTime>(name: "ACTUAL_START_DATE", type: "datetime", nullable: true),
                    ACTUALARRIVALDATE = table.Column<DateTime>(name: "ACTUAL_ARRIVAL_DATE", type: "datetime", nullable: true),
                    ESTIMATEDSTARTDATE = table.Column<DateTime>(name: "ESTIMATED_START_DATE", type: "datetime", nullable: true),
                    ESTIMATEDARRIVALDATE = table.Column<DateTime>(name: "ESTIMATED_ARRIVAL_DATE", type: "datetime", nullable: true),
                    FIXEDASSETID = table.Column<string>(name: "FIXED_ASSET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STARTMILEAGE = table.Column<decimal>(name: "START_MILEAGE", type: "decimal(18,6)", nullable: true),
                    ENDMILEAGE = table.Column<decimal>(name: "END_MILEAGE", type: "decimal(18,6)", nullable: true),
                    FUELUSED = table.Column<decimal>(name: "FUEL_USED", type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DELIVERY", x => x.DELIVERYID);
                });

            migrationBuilder.CreateTable(
                name: "DESIRED_FEATURE",
                columns: table => new
                {
                    DESIREDFEATUREID = table.Column<string>(name: "DESIRED_FEATURE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    REQUIREMENTID = table.Column<string>(name: "REQUIREMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTFEATUREID = table.Column<string>(name: "PRODUCT_FEATURE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    OPTIONALIND = table.Column<string>(name: "OPTIONAL_IND", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DESIRED_FEATURE", x => new { x.DESIREDFEATUREID, x.REQUIREMENTID });
                    table.ForeignKey(
                        name: "DES_FEAT_PFEAT",
                        column: x => x.PRODUCTFEATUREID,
                        principalTable: "PRODUCT_FEATURE",
                        principalColumn: "PRODUCT_FEATURE_ID");
                });

            migrationBuilder.CreateTable(
                name: "EFT_ACCOUNT",
                columns: table => new
                {
                    PAYMENTMETHODID = table.Column<string>(name: "PAYMENT_METHOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    BANKNAME = table.Column<string>(name: "BANK_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ROUTINGNUMBER = table.Column<string>(name: "ROUTING_NUMBER", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    ACCOUNTTYPE = table.Column<string>(name: "ACCOUNT_TYPE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    ACCOUNTNUMBER = table.Column<string>(name: "ACCOUNT_NUMBER", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    NAMEONACCOUNT = table.Column<string>(name: "NAME_ON_ACCOUNT", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    COMPANYNAMEONACCOUNT = table.Column<string>(name: "COMPANY_NAME_ON_ACCOUNT", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    YEARSATBANK = table.Column<int>(name: "YEARS_AT_BANK", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EFT_ACCOUNT", x => x.PAYMENTMETHODID);
                    table.ForeignKey(
                        name: "EFTACCT_CMECH",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "EFTACCT_PADDR",
                        column: x => x.CONTACTMECHID,
                        principalTable: "POSTAL_ADDRESS",
                        principalColumn: "CONTACT_MECH_ID");
                });

            migrationBuilder.CreateTable(
                name: "EMPL_LEAVE",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LEAVETYPEID = table.Column<string>(name: "LEAVE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    EMPLLEAVEREASONTYPEID = table.Column<string>(name: "EMPL_LEAVE_REASON_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    APPROVERPARTYID = table.Column<string>(name: "APPROVER_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LEAVESTATUS = table.Column<string>(name: "LEAVE_STATUS", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EMPL_LEAVE", x => new { x.PARTYID, x.LEAVETYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "EMPL_LEAVE_ELETP",
                        column: x => x.LEAVETYPEID,
                        principalTable: "EMPL_LEAVE_TYPE",
                        principalColumn: "LEAVE_TYPE_ID");
                    table.ForeignKey(
                        name: "EMPL_LEAVE_STS",
                        column: x => x.LEAVESTATUS,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "EMP_LEAV_REAS_ELTP",
                        column: x => x.EMPLLEAVEREASONTYPEID,
                        principalTable: "EMPL_LEAVE_REASON_TYPE",
                        principalColumn: "EMPL_LEAVE_REASON_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "EMPL_POSITION",
                columns: table => new
                {
                    EMPLPOSITIONID = table.Column<string>(name: "EMPL_POSITION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    BUDGETID = table.Column<string>(name: "BUDGET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    BUDGETITEMSEQID = table.Column<string>(name: "BUDGET_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    EMPLPOSITIONTYPEID = table.Column<string>(name: "EMPL_POSITION_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ESTIMATEDFROMDATE = table.Column<DateTime>(name: "ESTIMATED_FROM_DATE", type: "datetime", nullable: true),
                    ESTIMATEDTHRUDATE = table.Column<DateTime>(name: "ESTIMATED_THRU_DATE", type: "datetime", nullable: true),
                    SALARYFLAG = table.Column<string>(name: "SALARY_FLAG", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    EXEMPTFLAG = table.Column<string>(name: "EXEMPT_FLAG", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    FULLTIMEFLAG = table.Column<string>(name: "FULLTIME_FLAG", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    TEMPORARYFLAG = table.Column<string>(name: "TEMPORARY_FLAG", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ACTUALFROMDATE = table.Column<DateTime>(name: "ACTUAL_FROM_DATE", type: "datetime", nullable: true),
                    ACTUALTHRUDATE = table.Column<DateTime>(name: "ACTUAL_THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EMPL_POSITION", x => x.EMPLPOSITIONID);
                    table.ForeignKey(
                        name: "EMPL_POS_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "EMPL_POSITION_REPORTING_STRUCT",
                columns: table => new
                {
                    EMPLPOSITIONIDREPORTINGTO = table.Column<string>(name: "EMPL_POSITION_ID_REPORTING_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    EMPLPOSITIONIDMANAGEDBY = table.Column<string>(name: "EMPL_POSITION_ID_MANAGED_BY", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PRIMARYFLAG = table.Column<string>(name: "PRIMARY_FLAG", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EMPL_POSITION_REPORTING_STR", x => new { x.EMPLPOSITIONIDREPORTINGTO, x.EMPLPOSITIONIDMANAGEDBY, x.FROMDATE });
                    table.ForeignKey(
                        name: "EMPL_PSRPS_EMPSM",
                        column: x => x.EMPLPOSITIONIDMANAGEDBY,
                        principalTable: "EMPL_POSITION",
                        principalColumn: "EMPL_POSITION_ID");
                    table.ForeignKey(
                        name: "EMPL_PSRPS_EMPSR",
                        column: x => x.EMPLPOSITIONIDREPORTINGTO,
                        principalTable: "EMPL_POSITION",
                        principalColumn: "EMPL_POSITION_ID");
                });

            migrationBuilder.CreateTable(
                name: "EMPL_POSITION_RESPONSIBILITY",
                columns: table => new
                {
                    EMPLPOSITIONID = table.Column<string>(name: "EMPL_POSITION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    RESPONSIBILITYTYPEID = table.Column<string>(name: "RESPONSIBILITY_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EMPL_POSITION_RESPONSIBILIT", x => new { x.EMPLPOSITIONID, x.RESPONSIBILITYTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "EMPL_PSRTY_EMPS",
                        column: x => x.EMPLPOSITIONID,
                        principalTable: "EMPL_POSITION",
                        principalColumn: "EMPL_POSITION_ID");
                    table.ForeignKey(
                        name: "EMPL_PSRTY_RYTP",
                        column: x => x.RESPONSIBILITYTYPEID,
                        principalTable: "RESPONSIBILITY_TYPE",
                        principalColumn: "RESPONSIBILITY_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "EMPL_POSITION_FULFILLMENT",
                columns: table => new
                {
                    EMPLPOSITIONID = table.Column<string>(name: "EMPL_POSITION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EMPL_POSITION_FULFILLMENT", x => new { x.EMPLPOSITIONID, x.PARTYID, x.FROMDATE });
                    table.ForeignKey(
                        name: "EMPL_PSFLMT_EMPS",
                        column: x => x.EMPLPOSITIONID,
                        principalTable: "EMPL_POSITION",
                        principalColumn: "EMPL_POSITION_ID");
                });

            migrationBuilder.CreateTable(
                name: "EMPLOYMENT",
                columns: table => new
                {
                    ROLETYPEIDFROM = table.Column<string>(name: "ROLE_TYPE_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEIDTO = table.Column<string>(name: "ROLE_TYPE_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYIDFROM = table.Column<string>(name: "PARTY_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYIDTO = table.Column<string>(name: "PARTY_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    TERMINATIONREASONID = table.Column<string>(name: "TERMINATION_REASON_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TERMINATIONTYPEID = table.Column<string>(name: "TERMINATION_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EMPLOYMENT", x => new { x.ROLETYPEIDFROM, x.ROLETYPEIDTO, x.PARTYIDFROM, x.PARTYIDTO, x.FROMDATE });
                });

            migrationBuilder.CreateTable(
                name: "PAY_HISTORY",
                columns: table => new
                {
                    ROLETYPEIDFROM = table.Column<string>(name: "ROLE_TYPE_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEIDTO = table.Column<string>(name: "ROLE_TYPE_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYIDFROM = table.Column<string>(name: "PARTY_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYIDTO = table.Column<string>(name: "PARTY_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    EMPLFROMDATE = table.Column<DateTime>(name: "EMPL_FROM_DATE", type: "datetime", nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    SALARYSTEPSEQID = table.Column<string>(name: "SALARY_STEP_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PAYGRADEID = table.Column<string>(name: "PAY_GRADE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PERIODTYPEID = table.Column<string>(name: "PERIOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AMOUNT = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAY_HISTORY", x => new { x.ROLETYPEIDFROM, x.ROLETYPEIDTO, x.PARTYIDFROM, x.PARTYIDTO, x.EMPLFROMDATE, x.FROMDATE });
                    table.ForeignKey(
                        name: "PAY_HIST_EMPLMNT",
                        columns: x => new { x.ROLETYPEIDFROM, x.ROLETYPEIDTO, x.PARTYIDFROM, x.PARTYIDTO, x.EMPLFROMDATE },
                        principalTable: "EMPLOYMENT",
                        principalColumns: new[] { "ROLE_TYPE_ID_FROM", "ROLE_TYPE_ID_TO", "PARTY_ID_FROM", "PARTY_ID_TO", "FROM_DATE" });
                    table.ForeignKey(
                        name: "PAY_HIST_PDTP",
                        column: x => x.PERIODTYPEID,
                        principalTable: "PERIOD_TYPE",
                        principalColumn: "PERIOD_TYPE_ID");
                    table.ForeignKey(
                        name: "PAY_HIST_PGRD",
                        column: x => x.PAYGRADEID,
                        principalTable: "PAY_GRADE",
                        principalColumn: "PAY_GRADE_ID");
                });

            migrationBuilder.CreateTable(
                name: "EMPLOYMENT_APP",
                columns: table => new
                {
                    APPLICATIONID = table.Column<string>(name: "APPLICATION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    EMPLPOSITIONID = table.Column<string>(name: "EMPL_POSITION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    EMPLOYMENTAPPSOURCETYPEID = table.Column<string>(name: "EMPLOYMENT_APP_SOURCE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    APPLYINGPARTYID = table.Column<string>(name: "APPLYING_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    REFERREDBYPARTYID = table.Column<string>(name: "REFERRED_BY_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    APPLICATIONDATE = table.Column<DateTime>(name: "APPLICATION_DATE", type: "datetime", nullable: true),
                    APPROVERPARTYID = table.Column<string>(name: "APPROVER_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    JOBREQUISITIONID = table.Column<string>(name: "JOB_REQUISITION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EMPLOYMENT_APP", x => x.APPLICATIONID);
                    table.ForeignKey(
                        name: "EMPLMNT_APP_JBRQ",
                        column: x => x.JOBREQUISITIONID,
                        principalTable: "JOB_REQUISITION",
                        principalColumn: "JOB_REQUISITION_ID");
                });

            migrationBuilder.CreateTable(
                name: "FACILITY",
                columns: table => new
                {
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FACILITYTYPEID = table.Column<string>(name: "FACILITY_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARENTFACILITYID = table.Column<string>(name: "PARENT_FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    OWNERPARTYID = table.Column<string>(name: "OWNER_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DEFAULTINVENTORYITEMTYPEID = table.Column<string>(name: "DEFAULT_INVENTORY_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FACILITYNAME = table.Column<string>(name: "FACILITY_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PRIMARYFACILITYGROUPID = table.Column<string>(name: "PRIMARY_FACILITY_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SQUAREFOOTAGE = table.Column<int>(name: "SQUARE_FOOTAGE", type: "int", nullable: true),
                    FACILITYSIZE = table.Column<decimal>(name: "FACILITY_SIZE", type: "decimal(18,6)", nullable: true),
                    FACILITYSIZEUOMID = table.Column<string>(name: "FACILITY_SIZE_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DEFAULTDAYSTOSHIP = table.Column<int>(name: "DEFAULT_DAYS_TO_SHIP", type: "int", nullable: true),
                    OPENEDDATE = table.Column<DateTime>(name: "OPENED_DATE", type: "datetime", nullable: true),
                    CLOSEDDATE = table.Column<DateTime>(name: "CLOSED_DATE", type: "datetime", nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DEFAULTDIMENSIONUOMID = table.Column<string>(name: "DEFAULT_DIMENSION_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DEFAULTWEIGHTUOMID = table.Column<string>(name: "DEFAULT_WEIGHT_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    GEOPOINTID = table.Column<string>(name: "GEO_POINT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FACILITYLEVEL = table.Column<int>(name: "FACILITY_LEVEL", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FACILITY", x => x.FACILITYID);
                    table.ForeignKey(
                        name: "FACILITY_FCTYP",
                        column: x => x.FACILITYTYPEID,
                        principalTable: "FACILITY_TYPE",
                        principalColumn: "FACILITY_TYPE_ID");
                    table.ForeignKey(
                        name: "FACILITY_GEOPT",
                        column: x => x.GEOPOINTID,
                        principalTable: "GEO_POINT",
                        principalColumn: "GEO_POINT_ID");
                    table.ForeignKey(
                        name: "FACILITY_PARENT",
                        column: x => x.PARENTFACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "FACILITY_PGRP",
                        column: x => x.PRIMARYFACILITYGROUPID,
                        principalTable: "FACILITY_GROUP",
                        principalColumn: "FACILITY_GROUP_ID");
                    table.ForeignKey(
                        name: "FACILITY_SUOM",
                        column: x => x.FACILITYSIZEUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "FAC_DEF_DUOM",
                        column: x => x.DEFAULTDIMENSIONUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "FAC_DEF_WUOM",
                        column: x => x.DEFAULTWEIGHTUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "FAC_INVITM_TYPE",
                        column: x => x.DEFAULTINVENTORYITEMTYPEID,
                        principalTable: "INVENTORY_ITEM_TYPE",
                        principalColumn: "INVENTORY_ITEM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "FACILITY_ATTRIBUTE",
                columns: table => new
                {
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FACILITY_ATTRIBUTE", x => new { x.FACILITYID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "FACILITY_ATTR",
                        column: x => x.FACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                });

            migrationBuilder.CreateTable(
                name: "FACILITY_CALENDAR",
                columns: table => new
                {
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CALENDARID = table.Column<string>(name: "CALENDAR_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FACILITYCALENDARTYPEID = table.Column<string>(name: "FACILITY_CALENDAR_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FACILITY_CALENDAR", x => new { x.FACILITYID, x.CALENDARID, x.FACILITYCALENDARTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "FACILITY_CAL_FAC",
                        column: x => x.FACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "FACILITY_CAL_TYPE",
                        column: x => x.FACILITYCALENDARTYPEID,
                        principalTable: "FACILITY_CALENDAR_TYPE",
                        principalColumn: "FACILITY_CALENDAR_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "FACILITY_CONTACT_MECH",
                columns: table => new
                {
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    EXTENSION = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FACILITY_CONTACT_MECH", x => new { x.FACILITYID, x.CONTACTMECHID, x.FROMDATE });
                    table.ForeignKey(
                        name: "FACIL_CMECH_CMECH",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "FACIL_CMECH_FACIL",
                        column: x => x.FACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                });

            migrationBuilder.CreateTable(
                name: "FACILITY_CONTACT_MECH_PURPOSE",
                columns: table => new
                {
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTMECHPURPOSETYPEID = table.Column<string>(name: "CONTACT_MECH_PURPOSE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FACILITY_CONTACT_MECH_PURPO", x => new { x.FACILITYID, x.CONTACTMECHID, x.CONTACTMECHPURPOSETYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "FACIL_CMPRP_CMECH",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "FACIL_CMPRP_FACIL",
                        column: x => x.FACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "FACIL_CMPRP_TYPE",
                        column: x => x.CONTACTMECHPURPOSETYPEID,
                        principalTable: "CONTACT_MECH_PURPOSE_TYPE",
                        principalColumn: "CONTACT_MECH_PURPOSE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "FACILITY_CONTENT",
                columns: table => new
                {
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FACILITY_CONTENT", x => new { x.FACILITYID, x.CONTENTID, x.FROMDATE });
                    table.ForeignKey(
                        name: "FAC_CNT_CNT",
                        column: x => x.CONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "FAC_CNT_FAC",
                        column: x => x.FACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                });

            migrationBuilder.CreateTable(
                name: "FACILITY_GROUP_MEMBER",
                columns: table => new
                {
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FACILITYGROUPID = table.Column<string>(name: "FACILITY_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FACILITY_GROUP_MEMBER", x => new { x.FACILITYID, x.FACILITYGROUPID, x.FROMDATE });
                    table.ForeignKey(
                        name: "FACILITY_MEM_FAC",
                        column: x => x.FACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "FACILITY_MEM_FGRP",
                        column: x => x.FACILITYGROUPID,
                        principalTable: "FACILITY_GROUP",
                        principalColumn: "FACILITY_GROUP_ID");
                });

            migrationBuilder.CreateTable(
                name: "FACILITY_LOCATION",
                columns: table => new
                {
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LOCATIONSEQID = table.Column<string>(name: "LOCATION_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LOCATIONTYPEENUMID = table.Column<string>(name: "LOCATION_TYPE_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AREAID = table.Column<string>(name: "AREA_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AISLEID = table.Column<string>(name: "AISLE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SECTIONID = table.Column<string>(name: "SECTION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LEVELID = table.Column<string>(name: "LEVEL_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    POSITIONID = table.Column<string>(name: "POSITION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    GEOPOINTID = table.Column<string>(name: "GEO_POINT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FACILITY_LOCATION", x => new { x.FACILITYID, x.LOCATIONSEQID });
                    table.ForeignKey(
                        name: "FACILITY_LOC_FAC",
                        column: x => x.FACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "FACILITY_LOC_GEOPT",
                        column: x => x.GEOPOINTID,
                        principalTable: "GEO_POINT",
                        principalColumn: "GEO_POINT_ID");
                    table.ForeignKey(
                        name: "FACILITY_LOC_TENM",
                        column: x => x.LOCATIONTYPEENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                });

            migrationBuilder.CreateTable(
                name: "PICKLIST",
                columns: table => new
                {
                    PICKLISTID = table.Column<string>(name: "PICKLIST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SHIPMENTMETHODTYPEID = table.Column<string>(name: "SHIPMENT_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PICKLISTDATE = table.Column<DateTime>(name: "PICKLIST_DATE", type: "datetime", nullable: true),
                    CREATEDDATE = table.Column<DateTime>(name: "CREATED_DATE", type: "datetime", nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDDATE = table.Column<DateTime>(name: "LAST_MODIFIED_DATE", type: "datetime", nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PICKLIST", x => x.PICKLISTID);
                    table.ForeignKey(
                        name: "PICKLST_FLTY",
                        column: x => x.FACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "PICKLST_SMTP",
                        column: x => x.SHIPMENTMETHODTYPEID,
                        principalTable: "SHIPMENT_METHOD_TYPE",
                        principalColumn: "SHIPMENT_METHOD_TYPE_ID");
                    table.ForeignKey(
                        name: "PICKLST_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "PROD_CATALOG_INV_FACILITY",
                columns: table => new
                {
                    PRODCATALOGID = table.Column<string>(name: "PROD_CATALOG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PROD_CATALOG_INV_FACILITY", x => new { x.PRODCATALOGID, x.FACILITYID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PROD_CIF_CATALOG",
                        column: x => x.PRODCATALOGID,
                        principalTable: "PROD_CATALOG",
                        principalColumn: "PROD_CATALOG_ID");
                    table.ForeignKey(
                        name: "PROD_CIF_FACILITY",
                        column: x => x.FACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                });

            migrationBuilder.CreateTable(
                name: "FACILITY_LOCATION_GEO_POINT",
                columns: table => new
                {
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LOCATIONSEQID = table.Column<string>(name: "LOCATION_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GEOPOINTID = table.Column<string>(name: "GEO_POINT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FACILITY_LOCATION_GEO_POINT", x => new { x.FACILITYID, x.LOCATIONSEQID, x.GEOPOINTID, x.FROMDATE });
                    table.ForeignKey(
                        name: "FACLOCGEOPT_FACLOC",
                        columns: x => new { x.FACILITYID, x.LOCATIONSEQID },
                        principalTable: "FACILITY_LOCATION",
                        principalColumns: new[] { "FACILITY_ID", "LOCATION_SEQ_ID" });
                    table.ForeignKey(
                        name: "FACLOCGEOPT_GEOPT",
                        column: x => x.GEOPOINTID,
                        principalTable: "GEO_POINT",
                        principalColumn: "GEO_POINT_ID");
                });

            migrationBuilder.CreateTable(
                name: "FACILITY_CARRIER_SHIPMENT",
                columns: table => new
                {
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPMENTMETHODTYPEID = table.Column<string>(name: "SHIPMENT_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FACILITY_CARRIER_SHIPMENT", x => new { x.FACILITYID, x.PARTYID, x.ROLETYPEID, x.SHIPMENTMETHODTYPEID });
                    table.ForeignKey(
                        name: "FACILITY_CSH_CSM",
                        columns: x => new { x.SHIPMENTMETHODTYPEID, x.PARTYID, x.ROLETYPEID },
                        principalTable: "CARRIER_SHIPMENT_METHOD",
                        principalColumns: new[] { "SHIPMENT_METHOD_TYPE_ID", "PARTY_ID", "ROLE_TYPE_ID" });
                    table.ForeignKey(
                        name: "FACILITY_CSH_FAC",
                        column: x => x.FACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "FACILITY_CSH_STP",
                        column: x => x.SHIPMENTMETHODTYPEID,
                        principalTable: "SHIPMENT_METHOD_TYPE",
                        principalColumn: "SHIPMENT_METHOD_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "FACILITY_GROUP_ROLE",
                columns: table => new
                {
                    FACILITYGROUPID = table.Column<string>(name: "FACILITY_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FACILITY_GROUP_ROLE", x => new { x.FACILITYGROUPID, x.PARTYID, x.ROLETYPEID });
                    table.ForeignKey(
                        name: "FGROUP_RLE_FGRP",
                        column: x => x.FACILITYGROUPID,
                        principalTable: "FACILITY_GROUP",
                        principalColumn: "FACILITY_GROUP_ID");
                });

            migrationBuilder.CreateTable(
                name: "FACILITY_PARTY",
                columns: table => new
                {
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FACILITY_PARTY", x => new { x.FACILITYID, x.PARTYID, x.ROLETYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "FACILITY_RLE_FACI",
                        column: x => x.FACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "FACILITY_RLE_ROL",
                        column: x => x.ROLETYPEID,
                        principalTable: "ROLE_TYPE",
                        principalColumn: "ROLE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIN_ACCOUNT",
                columns: table => new
                {
                    FINACCOUNTID = table.Column<string>(name: "FIN_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FINACCOUNTTYPEID = table.Column<string>(name: "FIN_ACCOUNT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FINACCOUNTNAME = table.Column<string>(name: "FIN_ACCOUNT_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FINACCOUNTCODE = table.Column<string>(name: "FIN_ACCOUNT_CODE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    FINACCOUNTPIN = table.Column<string>(name: "FIN_ACCOUNT_PIN", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CURRENCYUOMID = table.Column<string>(name: "CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORGANIZATIONPARTYID = table.Column<string>(name: "ORGANIZATION_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    OWNERPARTYID = table.Column<string>(name: "OWNER_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    POSTTOGLACCOUNTID = table.Column<string>(name: "POST_TO_GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    ISREFUNDABLE = table.Column<string>(name: "IS_REFUNDABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    REPLENISHPAYMENTID = table.Column<string>(name: "REPLENISH_PAYMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    REPLENISHLEVEL = table.Column<decimal>(name: "REPLENISH_LEVEL", type: "decimal(18,2)", nullable: true),
                    ACTUALBALANCE = table.Column<decimal>(name: "ACTUAL_BALANCE", type: "decimal(18,2)", nullable: true),
                    AVAILABLEBALANCE = table.Column<decimal>(name: "AVAILABLE_BALANCE", type: "decimal(18,2)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIN_ACCOUNT", x => x.FINACCOUNTID);
                    table.ForeignKey(
                        name: "FINACCT_CURUOM",
                        column: x => x.CURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "FINACCT_GLAC",
                        column: x => x.POSTTOGLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "FINACCT_TYPE",
                        column: x => x.FINACCOUNTTYPEID,
                        principalTable: "FIN_ACCOUNT_TYPE",
                        principalColumn: "FIN_ACCOUNT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIN_ACCOUNT_ATTRIBUTE",
                columns: table => new
                {
                    FINACCOUNTID = table.Column<string>(name: "FIN_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIN_ACCOUNT_ATTRIBUTE", x => new { x.FINACCOUNTID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "FINACCT_ATTR",
                        column: x => x.FINACCOUNTID,
                        principalTable: "FIN_ACCOUNT",
                        principalColumn: "FIN_ACCOUNT_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIN_ACCOUNT_AUTH",
                columns: table => new
                {
                    FINACCOUNTAUTHID = table.Column<string>(name: "FIN_ACCOUNT_AUTH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FINACCOUNTID = table.Column<string>(name: "FIN_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AMOUNT = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    CURRENCYUOMID = table.Column<string>(name: "CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AUTHORIZATIONDATE = table.Column<DateTime>(name: "AUTHORIZATION_DATE", type: "datetime", nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIN_ACCOUNT_AUTH", x => x.FINACCOUNTAUTHID);
                    table.ForeignKey(
                        name: "FINACT_AUTH_FINACT",
                        column: x => x.FINACCOUNTID,
                        principalTable: "FIN_ACCOUNT",
                        principalColumn: "FIN_ACCOUNT_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIN_ACCOUNT_ROLE",
                columns: table => new
                {
                    FINACCOUNTID = table.Column<string>(name: "FIN_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIN_ACCOUNT_ROLE", x => new { x.FINACCOUNTID, x.PARTYID, x.ROLETYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "FIN_ACT_RL_FNACT",
                        column: x => x.FINACCOUNTID,
                        principalTable: "FIN_ACCOUNT",
                        principalColumn: "FIN_ACCOUNT_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIN_ACCOUNT_STATUS",
                columns: table => new
                {
                    FINACCOUNTID = table.Column<string>(name: "FIN_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSDATE = table.Column<DateTime>(name: "STATUS_DATE", type: "datetime", nullable: false),
                    STATUSENDDATE = table.Column<DateTime>(name: "STATUS_END_DATE", type: "datetime", nullable: true),
                    CHANGEBYUSERLOGINID = table.Column<string>(name: "CHANGE_BY_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIN_ACCOUNT_STATUS", x => new { x.FINACCOUNTID, x.STATUSID, x.STATUSDATE });
                    table.ForeignKey(
                        name: "FINACT_STTS_FNA",
                        column: x => x.FINACCOUNTID,
                        principalTable: "FIN_ACCOUNT",
                        principalColumn: "FIN_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "FINACT_STTS_STI",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIN_ACCOUNT_TRANS",
                columns: table => new
                {
                    FINACCOUNTTRANSID = table.Column<string>(name: "FIN_ACCOUNT_TRANS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FINACCOUNTTRANSTYPEID = table.Column<string>(name: "FIN_ACCOUNT_TRANS_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FINACCOUNTID = table.Column<string>(name: "FIN_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    GLRECONCILIATIONID = table.Column<string>(name: "GL_RECONCILIATION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TRANSACTIONDATE = table.Column<DateTime>(name: "TRANSACTION_DATE", type: "datetime", nullable: true),
                    ENTRYDATE = table.Column<DateTime>(name: "ENTRY_DATE", type: "datetime", nullable: true),
                    AMOUNT = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    PAYMENTID = table.Column<string>(name: "PAYMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PERFORMEDBYPARTYID = table.Column<string>(name: "PERFORMED_BY_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    REASONENUMID = table.Column<string>(name: "REASON_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIN_ACCOUNT_TRANS", x => x.FINACCOUNTTRANSID);
                    table.ForeignKey(
                        name: "FINACCT_TX_TYPE",
                        column: x => x.FINACCOUNTTRANSTYPEID,
                        principalTable: "FIN_ACCOUNT_TRANS_TYPE",
                        principalColumn: "FIN_ACCOUNT_TRANS_TYPE_ID");
                    table.ForeignKey(
                        name: "FIN_ACT_REAS_ENUM",
                        column: x => x.REASONENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "FIN_ACT_TX_FNACT",
                        column: x => x.FINACCOUNTID,
                        principalTable: "FIN_ACCOUNT",
                        principalColumn: "FIN_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "FIN_ACT_TX_STI",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIN_ACCOUNT_TRANS_ATTRIBUTE",
                columns: table => new
                {
                    FINACCOUNTTRANSID = table.Column<string>(name: "FIN_ACCOUNT_TRANS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIN_ACCOUNT_TRANS_ATTRIBUTE", x => new { x.FINACCOUNTTRANSID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "FINACCT_TX_ATTR",
                        column: x => x.FINACCOUNTTRANSID,
                        principalTable: "FIN_ACCOUNT_TRANS",
                        principalColumn: "FIN_ACCOUNT_TRANS_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIN_ACCOUNT_TYPE_GL_ACCOUNT",
                columns: table => new
                {
                    FINACCOUNTTYPEID = table.Column<string>(name: "FIN_ACCOUNT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORGANIZATIONPARTYID = table.Column<string>(name: "ORGANIZATION_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GLACCOUNTID = table.Column<string>(name: "GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIN_ACCOUNT_TYPE_GL_ACCOUNT", x => new { x.FINACCOUNTTYPEID, x.ORGANIZATIONPARTYID });
                    table.ForeignKey(
                        name: "FINACCT_TGA_GLAC",
                        column: x => x.GLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "FINACCT_TGA_PMT",
                        column: x => x.FINACCOUNTTYPEID,
                        principalTable: "FIN_ACCOUNT_TYPE",
                        principalColumn: "FIN_ACCOUNT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIXED_ASSET",
                columns: table => new
                {
                    FIXEDASSETID = table.Column<string>(name: "FIXED_ASSET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FIXEDASSETTYPEID = table.Column<string>(name: "FIXED_ASSET_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARENTFIXEDASSETID = table.Column<string>(name: "PARENT_FIXED_ASSET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INSTANCEOFPRODUCTID = table.Column<string>(name: "INSTANCE_OF_PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CLASSENUMID = table.Column<string>(name: "CLASS_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FIXEDASSETNAME = table.Column<string>(name: "FIXED_ASSET_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ACQUIREORDERID = table.Column<string>(name: "ACQUIRE_ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ACQUIREORDERITEMSEQID = table.Column<string>(name: "ACQUIRE_ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DATEACQUIRED = table.Column<DateTime>(name: "DATE_ACQUIRED", type: "datetime", nullable: true),
                    DATELASTSERVICED = table.Column<DateTime>(name: "DATE_LAST_SERVICED", type: "datetime", nullable: true),
                    DATENEXTSERVICE = table.Column<DateTime>(name: "DATE_NEXT_SERVICE", type: "datetime", nullable: true),
                    EXPECTEDENDOFLIFE = table.Column<DateTime>(name: "EXPECTED_END_OF_LIFE", type: "datetime", nullable: true),
                    ACTUALENDOFLIFE = table.Column<DateTime>(name: "ACTUAL_END_OF_LIFE", type: "datetime", nullable: true),
                    PRODUCTIONCAPACITY = table.Column<decimal>(name: "PRODUCTION_CAPACITY", type: "decimal(18,6)", nullable: true),
                    UOMID = table.Column<string>(name: "UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CALENDARID = table.Column<string>(name: "CALENDAR_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SERIALNUMBER = table.Column<string>(name: "SERIAL_NUMBER", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LOCATEDATFACILITYID = table.Column<string>(name: "LOCATED_AT_FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LOCATEDATLOCATIONSEQID = table.Column<string>(name: "LOCATED_AT_LOCATION_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SALVAGEVALUE = table.Column<decimal>(name: "SALVAGE_VALUE", type: "decimal(18,2)", nullable: true),
                    DEPRECIATION = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    PURCHASECOST = table.Column<decimal>(name: "PURCHASE_COST", type: "decimal(18,2)", nullable: true),
                    PURCHASECOSTUOMID = table.Column<string>(name: "PURCHASE_COST_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIXED_ASSET", x => x.FIXEDASSETID);
                    table.ForeignKey(
                        name: "FIXEDAST_CALENDAR",
                        column: x => x.CALENDARID,
                        principalTable: "TECH_DATA_CALENDAR",
                        principalColumn: "CALENDAR_ID");
                    table.ForeignKey(
                        name: "FIXEDAST_CLSENM",
                        column: x => x.CLASSENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "FIXEDAST_FAC",
                        column: x => x.LOCATEDATFACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "FIXEDAST_PAR",
                        column: x => x.PARENTFIXEDASSETID,
                        principalTable: "FIXED_ASSET",
                        principalColumn: "FIXED_ASSET_ID");
                    table.ForeignKey(
                        name: "FIXEDAST_ROLETYP",
                        column: x => x.ROLETYPEID,
                        principalTable: "ROLE_TYPE",
                        principalColumn: "ROLE_TYPE_ID");
                    table.ForeignKey(
                        name: "FIXEDAST_TYPE",
                        column: x => x.FIXEDASSETTYPEID,
                        principalTable: "FIXED_ASSET_TYPE",
                        principalColumn: "FIXED_ASSET_TYPE_ID");
                    table.ForeignKey(
                        name: "FIXEDAST_UOM",
                        column: x => x.UOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIXED_ASSET_ATTRIBUTE",
                columns: table => new
                {
                    FIXEDASSETID = table.Column<string>(name: "FIXED_ASSET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIXED_ASSET_ATTRIBUTE", x => new { x.FIXEDASSETID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "FIXEDAST_ATTR",
                        column: x => x.FIXEDASSETID,
                        principalTable: "FIXED_ASSET",
                        principalColumn: "FIXED_ASSET_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIXED_ASSET_DEP_METHOD",
                columns: table => new
                {
                    DEPRECIATIONCUSTOMMETHODID = table.Column<string>(name: "DEPRECIATION_CUSTOM_METHOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FIXEDASSETID = table.Column<string>(name: "FIXED_ASSET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIXED_ASSET_DEP_METHOD", x => new { x.DEPRECIATIONCUSTOMMETHODID, x.FIXEDASSETID });
                    table.ForeignKey(
                        name: "FIXDAST_DM_CMET",
                        column: x => x.DEPRECIATIONCUSTOMMETHODID,
                        principalTable: "CUSTOM_METHOD",
                        principalColumn: "CUSTOM_METHOD_ID");
                    table.ForeignKey(
                        name: "FIXDAST_DM_FXAST",
                        column: x => x.FIXEDASSETID,
                        principalTable: "FIXED_ASSET",
                        principalColumn: "FIXED_ASSET_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIXED_ASSET_GEO_POINT",
                columns: table => new
                {
                    FIXEDASSETID = table.Column<string>(name: "FIXED_ASSET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GEOPOINTID = table.Column<string>(name: "GEO_POINT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIXED_ASSET_GEO_POINT", x => new { x.FIXEDASSETID, x.GEOPOINTID, x.FROMDATE });
                    table.ForeignKey(
                        name: "FXDASTGEOPT_FXDAST",
                        column: x => x.FIXEDASSETID,
                        principalTable: "FIXED_ASSET",
                        principalColumn: "FIXED_ASSET_ID");
                    table.ForeignKey(
                        name: "FXDASTGEOPT_GEOPT",
                        column: x => x.GEOPOINTID,
                        principalTable: "GEO_POINT",
                        principalColumn: "GEO_POINT_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIXED_ASSET_IDENT",
                columns: table => new
                {
                    FIXEDASSETID = table.Column<string>(name: "FIXED_ASSET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FIXEDASSETIDENTTYPEID = table.Column<string>(name: "FIXED_ASSET_IDENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    IDVALUE = table.Column<string>(name: "ID_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIXED_ASSET_IDENT", x => new { x.FIXEDASSETID, x.FIXEDASSETIDENTTYPEID });
                    table.ForeignKey(
                        name: "FIXDASTID_FXAST",
                        column: x => x.FIXEDASSETID,
                        principalTable: "FIXED_ASSET",
                        principalColumn: "FIXED_ASSET_ID");
                    table.ForeignKey(
                        name: "FIXDASTID_IDTYP",
                        column: x => x.FIXEDASSETIDENTTYPEID,
                        principalTable: "FIXED_ASSET_IDENT_TYPE",
                        principalColumn: "FIXED_ASSET_IDENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIXED_ASSET_STD_COST",
                columns: table => new
                {
                    FIXEDASSETID = table.Column<string>(name: "FIXED_ASSET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FIXEDASSETSTDCOSTTYPEID = table.Column<string>(name: "FIXED_ASSET_STD_COST_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    AMOUNTUOMID = table.Column<string>(name: "AMOUNT_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AMOUNT = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIXED_ASSET_STD_COST", x => new { x.FIXEDASSETID, x.FIXEDASSETSTDCOSTTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "FIXASTCO_AMCURR",
                        column: x => x.AMOUNTUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "FIXASTCO_FIXAST",
                        column: x => x.FIXEDASSETID,
                        principalTable: "FIXED_ASSET",
                        principalColumn: "FIXED_ASSET_ID");
                    table.ForeignKey(
                        name: "FIXASTCO_TYPCOS",
                        column: x => x.FIXEDASSETSTDCOSTTYPEID,
                        principalTable: "FIXED_ASSET_STD_COST_TYPE",
                        principalColumn: "FIXED_ASSET_STD_COST_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIXED_ASSET_MAINT",
                columns: table => new
                {
                    FIXEDASSETID = table.Column<string>(name: "FIXED_ASSET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    MAINTHISTSEQID = table.Column<string>(name: "MAINT_HIST_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTMAINTTYPEID = table.Column<string>(name: "PRODUCT_MAINT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTMAINTSEQID = table.Column<string>(name: "PRODUCT_MAINT_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SCHEDULEWORKEFFORTID = table.Column<string>(name: "SCHEDULE_WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INTERVALQUANTITY = table.Column<decimal>(name: "INTERVAL_QUANTITY", type: "decimal(18,6)", nullable: true),
                    INTERVALUOMID = table.Column<string>(name: "INTERVAL_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INTERVALMETERTYPEID = table.Column<string>(name: "INTERVAL_METER_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PURCHASEORDERID = table.Column<string>(name: "PURCHASE_ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIXED_ASSET_MAINT", x => new { x.FIXEDASSETID, x.MAINTHISTSEQID });
                    table.ForeignKey(
                        name: "FXDASTMNT_FXAST",
                        column: x => x.FIXEDASSETID,
                        principalTable: "FIXED_ASSET",
                        principalColumn: "FIXED_ASSET_ID");
                    table.ForeignKey(
                        name: "FXDASTMNT_INTUOM",
                        column: x => x.INTERVALUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "FXDASTMNT_PDMTTYP",
                        column: x => x.INTERVALMETERTYPEID,
                        principalTable: "PRODUCT_METER_TYPE",
                        principalColumn: "PRODUCT_METER_TYPE_ID");
                    table.ForeignKey(
                        name: "FXDASTMNT_PMNTP",
                        column: x => x.PRODUCTMAINTTYPEID,
                        principalTable: "PRODUCT_MAINT_TYPE",
                        principalColumn: "PRODUCT_MAINT_TYPE_ID");
                    table.ForeignKey(
                        name: "FXDASTMNT_SI",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIXED_ASSET_METER",
                columns: table => new
                {
                    FIXEDASSETID = table.Column<string>(name: "FIXED_ASSET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTMETERTYPEID = table.Column<string>(name: "PRODUCT_METER_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    READINGDATE = table.Column<DateTime>(name: "READING_DATE", type: "datetime", nullable: false),
                    METERVALUE = table.Column<decimal>(name: "METER_VALUE", type: "decimal(18,6)", nullable: true),
                    READINGREASONENUMID = table.Column<string>(name: "READING_REASON_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    MAINTHISTSEQID = table.Column<string>(name: "MAINT_HIST_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIXED_ASSET_METER", x => new { x.FIXEDASSETID, x.PRODUCTMETERTYPEID, x.READINGDATE });
                    table.ForeignKey(
                        name: "FXDASTMTR_FAMNT",
                        columns: x => new { x.FIXEDASSETID, x.MAINTHISTSEQID },
                        principalTable: "FIXED_ASSET_MAINT",
                        principalColumns: new[] { "FIXED_ASSET_ID", "MAINT_HIST_SEQ_ID" });
                    table.ForeignKey(
                        name: "FXDASTMTR_PMTYP",
                        column: x => x.PRODUCTMETERTYPEID,
                        principalTable: "PRODUCT_METER_TYPE",
                        principalColumn: "PRODUCT_METER_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIXED_ASSET_MAINT_ORDER",
                columns: table => new
                {
                    FIXEDASSETID = table.Column<string>(name: "FIXED_ASSET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    MAINTHISTSEQID = table.Column<string>(name: "MAINT_HIST_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIXED_ASSET_MAINT_ORDER", x => new { x.FIXEDASSETID, x.MAINTHISTSEQID, x.ORDERID, x.ORDERITEMSEQID });
                    table.ForeignKey(
                        name: "FXDASTMNT_ORD_FXAS",
                        column: x => x.FIXEDASSETID,
                        principalTable: "FIXED_ASSET",
                        principalColumn: "FIXED_ASSET_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIXED_ASSET_PRODUCT",
                columns: table => new
                {
                    FIXEDASSETID = table.Column<string>(name: "FIXED_ASSET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FIXEDASSETPRODUCTTYPEID = table.Column<string>(name: "FIXED_ASSET_PRODUCT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    QUANTITYUOMID = table.Column<string>(name: "QUANTITY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIXED_ASSET_PRODUCT", x => new { x.FIXEDASSETID, x.PRODUCTID, x.FIXEDASSETPRODUCTTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "FIXDASTPRD_FA",
                        column: x => x.FIXEDASSETID,
                        principalTable: "FIXED_ASSET",
                        principalColumn: "FIXED_ASSET_ID");
                    table.ForeignKey(
                        name: "FIXDASTPRD_FAPT",
                        column: x => x.FIXEDASSETPRODUCTTYPEID,
                        principalTable: "FIXED_ASSET_PRODUCT_TYPE",
                        principalColumn: "FIXED_ASSET_PRODUCT_TYPE_ID");
                    table.ForeignKey(
                        name: "FIXDASTPRD_UOM",
                        column: x => x.QUANTITYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIXED_ASSET_REGISTRATION",
                columns: table => new
                {
                    FIXEDASSETID = table.Column<string>(name: "FIXED_ASSET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    REGISTRATIONDATE = table.Column<DateTime>(name: "REGISTRATION_DATE", type: "datetime", nullable: true),
                    GOVAGENCYPARTYID = table.Column<string>(name: "GOV_AGENCY_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    REGISTRATIONNUMBER = table.Column<string>(name: "REGISTRATION_NUMBER", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LICENSENUMBER = table.Column<string>(name: "LICENSE_NUMBER", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIXED_ASSET_REGISTRATION", x => new { x.FIXEDASSETID, x.FROMDATE });
                    table.ForeignKey(
                        name: "FIXDASTREG_FXAST",
                        column: x => x.FIXEDASSETID,
                        principalTable: "FIXED_ASSET",
                        principalColumn: "FIXED_ASSET_ID");
                });

            migrationBuilder.CreateTable(
                name: "FIXED_ASSET_TYPE_GL_ACCOUNT",
                columns: table => new
                {
                    FIXEDASSETTYPEID = table.Column<string>(name: "FIXED_ASSET_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FIXEDASSETID = table.Column<string>(name: "FIXED_ASSET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORGANIZATIONPARTYID = table.Column<string>(name: "ORGANIZATION_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ASSETGLACCOUNTID = table.Column<string>(name: "ASSET_GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ACCDEPGLACCOUNTID = table.Column<string>(name: "ACC_DEP_GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DEPGLACCOUNTID = table.Column<string>(name: "DEP_GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PROFITGLACCOUNTID = table.Column<string>(name: "PROFIT_GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LOSSGLACCOUNTID = table.Column<string>(name: "LOSS_GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIXED_ASSET_TYPE_GL_ACCOUNT", x => new { x.FIXEDASSETTYPEID, x.FIXEDASSETID, x.ORGANIZATIONPARTYID });
                    table.ForeignKey(
                        name: "FATGL_ACCDGL",
                        column: x => x.ACCDEPGLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "FATGL_AGL",
                        column: x => x.ASSETGLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "FATGL_DGL",
                        column: x => x.DEPGLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "FATGL_LGL",
                        column: x => x.LOSSGLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "FATGL_PGL",
                        column: x => x.PROFITGLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                });

            migrationBuilder.CreateTable(
                name: "GIFT_CARD",
                columns: table => new
                {
                    PAYMENTMETHODID = table.Column<string>(name: "PAYMENT_METHOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CARDNUMBER = table.Column<string>(name: "CARD_NUMBER", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PINNUMBER = table.Column<string>(name: "PIN_NUMBER", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    EXPIREDATE = table.Column<string>(name: "EXPIRE_DATE", type: "varchar(7)", unicode: false, maxLength: 7, nullable: true),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GIFT_CARD", x => x.PAYMENTMETHODID);
                    table.ForeignKey(
                        name: "GIFTCARD_CMECH",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "GIFTCARD_PADDR",
                        column: x => x.CONTACTMECHID,
                        principalTable: "POSTAL_ADDRESS",
                        principalColumn: "CONTACT_MECH_ID");
                });

            migrationBuilder.CreateTable(
                name: "GIFT_CARD_FULFILLMENT",
                columns: table => new
                {
                    FULFILLMENTID = table.Column<string>(name: "FULFILLMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TYPEENUMID = table.Column<string>(name: "TYPE_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    MERCHANTID = table.Column<string>(name: "MERCHANT_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SURVEYRESPONSEID = table.Column<string>(name: "SURVEY_RESPONSE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CARDNUMBER = table.Column<string>(name: "CARD_NUMBER", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PINNUMBER = table.Column<string>(name: "PIN_NUMBER", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    AMOUNT = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    RESPONSECODE = table.Column<string>(name: "RESPONSE_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    REFERENCENUM = table.Column<string>(name: "REFERENCE_NUM", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    AUTHCODE = table.Column<string>(name: "AUTH_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    FULFILLMENTDATE = table.Column<DateTime>(name: "FULFILLMENT_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GIFT_CARD_FULFILLMENT", x => x.FULFILLMENTID);
                    table.ForeignKey(
                        name: "GC_FILL_ENUM",
                        column: x => x.TYPEENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "GC_FILL_SURVY",
                        column: x => x.SURVEYRESPONSEID,
                        principalTable: "SURVEY_RESPONSE",
                        principalColumn: "SURVEY_RESPONSE_ID");
                });

            migrationBuilder.CreateTable(
                name: "GL_ACCOUNT_HISTORY",
                columns: table => new
                {
                    GLACCOUNTID = table.Column<string>(name: "GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORGANIZATIONPARTYID = table.Column<string>(name: "ORGANIZATION_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CUSTOMTIMEPERIODID = table.Column<string>(name: "CUSTOM_TIME_PERIOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    OPENINGBALANCE = table.Column<decimal>(name: "OPENING_BALANCE", type: "decimal(18,2)", nullable: true),
                    POSTEDDEBITS = table.Column<decimal>(name: "POSTED_DEBITS", type: "decimal(18,2)", nullable: true),
                    POSTEDCREDITS = table.Column<decimal>(name: "POSTED_CREDITS", type: "decimal(18,2)", nullable: true),
                    ENDINGBALANCE = table.Column<decimal>(name: "ENDING_BALANCE", type: "decimal(18,2)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GL_ACCOUNT_HISTORY", x => new { x.GLACCOUNTID, x.ORGANIZATIONPARTYID, x.CUSTOMTIMEPERIODID });
                    table.ForeignKey(
                        name: "GLACCT_HST_CTP",
                        column: x => x.CUSTOMTIMEPERIODID,
                        principalTable: "CUSTOM_TIME_PERIOD",
                        principalColumn: "CUSTOM_TIME_PERIOD_ID");
                    table.ForeignKey(
                        name: "GLACCT_HST_GLA",
                        column: x => x.GLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                });

            migrationBuilder.CreateTable(
                name: "GL_ACCOUNT_ORGANIZATION",
                columns: table => new
                {
                    GLACCOUNTID = table.Column<string>(name: "GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORGANIZATIONPARTYID = table.Column<string>(name: "ORGANIZATION_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GL_ACCOUNT_ORGANIZATION", x => new { x.GLACCOUNTID, x.ORGANIZATIONPARTYID });
                    table.ForeignKey(
                        name: "GLACCT_ORG_GLA",
                        column: x => x.GLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                });

            migrationBuilder.CreateTable(
                name: "GL_ACCOUNT_ROLE",
                columns: table => new
                {
                    GLACCOUNTID = table.Column<string>(name: "GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GL_ACCOUNT_ROLE", x => new { x.GLACCOUNTID, x.PARTYID, x.ROLETYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "GLACCT_RL_GLA",
                        column: x => x.GLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                });

            migrationBuilder.CreateTable(
                name: "GL_ACCOUNT_TYPE_DEFAULT",
                columns: table => new
                {
                    GLACCOUNTTYPEID = table.Column<string>(name: "GL_ACCOUNT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORGANIZATIONPARTYID = table.Column<string>(name: "ORGANIZATION_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GLACCOUNTID = table.Column<string>(name: "GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GL_ACCOUNT_TYPE_DEFAULT", x => new { x.GLACCOUNTTYPEID, x.ORGANIZATIONPARTYID });
                    table.ForeignKey(
                        name: "GLACCT_TPDF_GLA",
                        column: x => x.GLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "GLACCT_TPDF_GLAT",
                        column: x => x.GLACCOUNTTYPEID,
                        principalTable: "GL_ACCOUNT_TYPE",
                        principalColumn: "GL_ACCOUNT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "GL_JOURNAL",
                columns: table => new
                {
                    GLJOURNALID = table.Column<string>(name: "GL_JOURNAL_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GLJOURNALNAME = table.Column<string>(name: "GL_JOURNAL_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ORGANIZATIONPARTYID = table.Column<string>(name: "ORGANIZATION_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ISPOSTED = table.Column<string>(name: "IS_POSTED", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    POSTEDDATE = table.Column<DateTime>(name: "POSTED_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GL_JOURNAL", x => x.GLJOURNALID);
                });

            migrationBuilder.CreateTable(
                name: "GL_RECONCILIATION",
                columns: table => new
                {
                    GLRECONCILIATIONID = table.Column<string>(name: "GL_RECONCILIATION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GLRECONCILIATIONNAME = table.Column<string>(name: "GL_RECONCILIATION_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CREATEDDATE = table.Column<DateTime>(name: "CREATED_DATE", type: "datetime", nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDDATE = table.Column<DateTime>(name: "LAST_MODIFIED_DATE", type: "datetime", nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    GLACCOUNTID = table.Column<string>(name: "GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORGANIZATIONPARTYID = table.Column<string>(name: "ORGANIZATION_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RECONCILEDBALANCE = table.Column<decimal>(name: "RECONCILED_BALANCE", type: "decimal(18,2)", nullable: true),
                    OPENINGBALANCE = table.Column<decimal>(name: "OPENING_BALANCE", type: "decimal(18,2)", nullable: true),
                    RECONCILEDDATE = table.Column<DateTime>(name: "RECONCILED_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GL_RECONCILIATION", x => x.GLRECONCILIATIONID);
                    table.ForeignKey(
                        name: "GLREC_GLACCT",
                        column: x => x.GLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "GLREC_STI",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "GL_RECONCILIATION_ENTRY",
                columns: table => new
                {
                    GLRECONCILIATIONID = table.Column<string>(name: "GL_RECONCILIATION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ACCTGTRANSID = table.Column<string>(name: "ACCTG_TRANS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ACCTGTRANSENTRYSEQID = table.Column<string>(name: "ACCTG_TRANS_ENTRY_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    RECONCILEDAMOUNT = table.Column<decimal>(name: "RECONCILED_AMOUNT", type: "decimal(18,2)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GL_RECONCILIATION_ENTRY", x => new { x.GLRECONCILIATIONID, x.ACCTGTRANSID, x.ACCTGTRANSENTRYSEQID });
                    table.ForeignKey(
                        name: "GL_RECENT_ACTTXE",
                        columns: x => new { x.ACCTGTRANSID, x.ACCTGTRANSENTRYSEQID },
                        principalTable: "ACCTG_TRANS_ENTRY",
                        principalColumns: new[] { "ACCTG_TRANS_ID", "ACCTG_TRANS_ENTRY_SEQ_ID" });
                    table.ForeignKey(
                        name: "GL_RECENT_GLREC",
                        column: x => x.GLRECONCILIATIONID,
                        principalTable: "GL_RECONCILIATION",
                        principalColumn: "GL_RECONCILIATION_ID");
                });

            migrationBuilder.CreateTable(
                name: "GOOD_IDENTIFICATION",
                columns: table => new
                {
                    GOODIDENTIFICATIONTYPEID = table.Column<string>(name: "GOOD_IDENTIFICATION_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    IDVALUE = table.Column<string>(name: "ID_VALUE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GOOD_IDENTIFICATION", x => new { x.GOODIDENTIFICATIONTYPEID, x.PRODUCTID });
                    table.ForeignKey(
                        name: "GOOD_ID_TYPE",
                        column: x => x.GOODIDENTIFICATIONTYPEID,
                        principalTable: "GOOD_IDENTIFICATION_TYPE",
                        principalColumn: "GOOD_IDENTIFICATION_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVENTORY_ITEM",
                columns: table => new
                {
                    INVENTORYITEMID = table.Column<string>(name: "INVENTORY_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVENTORYITEMTYPEID = table.Column<string>(name: "INVENTORY_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    OWNERPARTYID = table.Column<string>(name: "OWNER_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DATETIMERECEIVED = table.Column<DateTime>(name: "DATETIME_RECEIVED", type: "datetime", nullable: true),
                    DATETIMEMANUFACTURED = table.Column<DateTime>(name: "DATETIME_MANUFACTURED", type: "datetime", nullable: true),
                    EXPIREDATE = table.Column<DateTime>(name: "EXPIRE_DATE", type: "datetime", nullable: true),
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CONTAINERID = table.Column<string>(name: "CONTAINER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LOTID = table.Column<string>(name: "LOT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    UOMID = table.Column<string>(name: "UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    BINNUMBER = table.Column<string>(name: "BIN_NUMBER", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LOCATIONSEQID = table.Column<string>(name: "LOCATION_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    QUANTITYONHANDTOTAL = table.Column<decimal>(name: "QUANTITY_ON_HAND_TOTAL", type: "decimal(18,6)", nullable: true),
                    AVAILABLETOPROMISETOTAL = table.Column<decimal>(name: "AVAILABLE_TO_PROMISE_TOTAL", type: "decimal(18,6)", nullable: true),
                    ACCOUNTINGQUANTITYTOTAL = table.Column<decimal>(name: "ACCOUNTING_QUANTITY_TOTAL", type: "decimal(18,6)", nullable: true),
                    QUANTITYONHAND = table.Column<decimal>(name: "QUANTITY_ON_HAND", type: "decimal(18,6)", nullable: true),
                    AVAILABLETOPROMISE = table.Column<decimal>(name: "AVAILABLE_TO_PROMISE", type: "decimal(18,6)", nullable: true),
                    SERIALNUMBER = table.Column<string>(name: "SERIAL_NUMBER", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SOFTIDENTIFIER = table.Column<string>(name: "SOFT_IDENTIFIER", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ACTIVATIONNUMBER = table.Column<string>(name: "ACTIVATION_NUMBER", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ACTIVATIONVALIDTHRU = table.Column<DateTime>(name: "ACTIVATION_VALID_THRU", type: "datetime", nullable: true),
                    UNITCOST = table.Column<decimal>(name: "UNIT_COST", type: "decimal(18,6)", nullable: true),
                    CURRENCYUOMID = table.Column<string>(name: "CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FIXEDASSETID = table.Column<string>(name: "FIXED_ASSET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVENTORY_ITEM", x => x.INVENTORYITEMID);
                    table.ForeignKey(
                        name: "INV_ITEM_CONTAINER",
                        column: x => x.CONTAINERID,
                        principalTable: "CONTAINER",
                        principalColumn: "CONTAINER_ID");
                    table.ForeignKey(
                        name: "INV_ITEM_CUOM",
                        column: x => x.CURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "INV_ITEM_FACILITY",
                        column: x => x.FACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "INV_ITEM_LOT",
                        column: x => x.LOTID,
                        principalTable: "LOT",
                        principalColumn: "LOT_ID");
                    table.ForeignKey(
                        name: "INV_ITEM_STTSITM",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "INV_ITEM_TYPE",
                        column: x => x.INVENTORYITEMTYPEID,
                        principalTable: "INVENTORY_ITEM_TYPE",
                        principalColumn: "INVENTORY_ITEM_TYPE_ID");
                    table.ForeignKey(
                        name: "INV_ITEM_UOM",
                        column: x => x.UOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "IYIM_FAST",
                        column: x => x.FIXEDASSETID,
                        principalTable: "FIXED_ASSET",
                        principalColumn: "FIXED_ASSET_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVENTORY_ITEM_ATTRIBUTE",
                columns: table => new
                {
                    INVENTORYITEMID = table.Column<string>(name: "INVENTORY_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVENTORY_ITEM_ATTRIBUTE", x => new { x.INVENTORYITEMID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "INV_ITEM_ATTR",
                        column: x => x.INVENTORYITEMID,
                        principalTable: "INVENTORY_ITEM",
                        principalColumn: "INVENTORY_ITEM_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVENTORY_ITEM_LABEL_APPL",
                columns: table => new
                {
                    INVENTORYITEMID = table.Column<string>(name: "INVENTORY_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVENTORYITEMLABELTYPEID = table.Column<string>(name: "INVENTORY_ITEM_LABEL_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVENTORYITEMLABELID = table.Column<string>(name: "INVENTORY_ITEM_LABEL_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVENTORY_ITEM_LABEL_APPL", x => new { x.INVENTORYITEMID, x.INVENTORYITEMLABELTYPEID });
                    table.ForeignKey(
                        name: "INV_ITLAP_ITEM",
                        column: x => x.INVENTORYITEMID,
                        principalTable: "INVENTORY_ITEM",
                        principalColumn: "INVENTORY_ITEM_ID");
                    table.ForeignKey(
                        name: "INV_ITLAP_LAB",
                        column: x => x.INVENTORYITEMLABELID,
                        principalTable: "INVENTORY_ITEM_LABEL",
                        principalColumn: "INVENTORY_ITEM_LABEL_ID");
                    table.ForeignKey(
                        name: "INV_ITLAP_TYPE",
                        column: x => x.INVENTORYITEMLABELTYPEID,
                        principalTable: "INVENTORY_ITEM_LABEL_TYPE",
                        principalColumn: "INVENTORY_ITEM_LABEL_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVENTORY_ITEM_VARIANCE",
                columns: table => new
                {
                    INVENTORYITEMID = table.Column<string>(name: "INVENTORY_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PHYSICALINVENTORYID = table.Column<string>(name: "PHYSICAL_INVENTORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    VARIANCEREASONID = table.Column<string>(name: "VARIANCE_REASON_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AVAILABLETOPROMISEVAR = table.Column<decimal>(name: "AVAILABLE_TO_PROMISE_VAR", type: "decimal(18,6)", nullable: true),
                    QUANTITYONHANDVAR = table.Column<decimal>(name: "QUANTITY_ON_HAND_VAR", type: "decimal(18,6)", nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVENTORY_ITEM_VARIANCE", x => new { x.INVENTORYITEMID, x.PHYSICALINVENTORYID });
                    table.ForeignKey(
                        name: "INV_ITEM_VAR_ITEM",
                        column: x => x.INVENTORYITEMID,
                        principalTable: "INVENTORY_ITEM",
                        principalColumn: "INVENTORY_ITEM_ID");
                    table.ForeignKey(
                        name: "INV_ITEM_VAR_PINV",
                        column: x => x.PHYSICALINVENTORYID,
                        principalTable: "PHYSICAL_INVENTORY",
                        principalColumn: "PHYSICAL_INVENTORY_ID");
                    table.ForeignKey(
                        name: "INV_ITEM_VAR_RSN",
                        column: x => x.VARIANCEREASONID,
                        principalTable: "VARIANCE_REASON",
                        principalColumn: "VARIANCE_REASON_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVENTORY_ITEM_DETAIL",
                columns: table => new
                {
                    INVENTORYITEMID = table.Column<string>(name: "INVENTORY_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVENTORYITEMDETAILSEQID = table.Column<string>(name: "INVENTORY_ITEM_DETAIL_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    EFFECTIVEDATE = table.Column<DateTime>(name: "EFFECTIVE_DATE", type: "datetime", nullable: true),
                    QUANTITYONHANDDIFF = table.Column<decimal>(name: "QUANTITY_ON_HAND_DIFF", type: "decimal(18,6)", nullable: true),
                    AVAILABLETOPROMISEDIFF = table.Column<decimal>(name: "AVAILABLE_TO_PROMISE_DIFF", type: "decimal(18,6)", nullable: true),
                    ACCOUNTINGQUANTITYDIFF = table.Column<decimal>(name: "ACCOUNTING_QUANTITY_DIFF", type: "decimal(18,6)", nullable: true),
                    UNITCOST = table.Column<decimal>(name: "UNIT_COST", type: "decimal(18,6)", nullable: true),
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SHIPGROUPSEQID = table.Column<string>(name: "SHIP_GROUP_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SHIPMENTID = table.Column<string>(name: "SHIPMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SHIPMENTITEMSEQID = table.Column<string>(name: "SHIPMENT_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RETURNID = table.Column<string>(name: "RETURN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RETURNITEMSEQID = table.Column<string>(name: "RETURN_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FIXEDASSETID = table.Column<string>(name: "FIXED_ASSET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    MAINTHISTSEQID = table.Column<string>(name: "MAINT_HIST_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ITEMISSUANCEID = table.Column<string>(name: "ITEM_ISSUANCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RECEIPTID = table.Column<string>(name: "RECEIPT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PHYSICALINVENTORYID = table.Column<string>(name: "PHYSICAL_INVENTORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    REASONENUMID = table.Column<string>(name: "REASON_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVENTORY_ITEM_DETAIL", x => new { x.INVENTORYITEMID, x.INVENTORYITEMDETAILSEQID });
                    table.ForeignKey(
                        name: "INV_ITDTL_FAMNT",
                        columns: x => new { x.FIXEDASSETID, x.MAINTHISTSEQID },
                        principalTable: "FIXED_ASSET_MAINT",
                        principalColumns: new[] { "FIXED_ASSET_ID", "MAINT_HIST_SEQ_ID" });
                    table.ForeignKey(
                        name: "INV_ITDTL_INVIT",
                        column: x => x.INVENTORYITEMID,
                        principalTable: "INVENTORY_ITEM",
                        principalColumn: "INVENTORY_ITEM_ID");
                    table.ForeignKey(
                        name: "INV_ITDTL_PHINV",
                        column: x => x.PHYSICALINVENTORYID,
                        principalTable: "PHYSICAL_INVENTORY",
                        principalColumn: "PHYSICAL_INVENTORY_ID");
                    table.ForeignKey(
                        name: "INV_ITDTL_REAS",
                        column: x => x.REASONENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVENTORY_ITEM_STATUS",
                columns: table => new
                {
                    INVENTORYITEMID = table.Column<string>(name: "INVENTORY_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSDATETIME = table.Column<DateTime>(name: "STATUS_DATETIME", type: "datetime", nullable: false),
                    STATUSENDDATETIME = table.Column<DateTime>(name: "STATUS_END_DATETIME", type: "datetime", nullable: true),
                    CHANGEBYUSERLOGINID = table.Column<string>(name: "CHANGE_BY_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    OWNERPARTYID = table.Column<string>(name: "OWNER_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVENTORY_ITEM_STATUS", x => new { x.INVENTORYITEMID, x.STATUSID, x.STATUSDATETIME });
                    table.ForeignKey(
                        name: "INV_ITEM_STTS_II",
                        column: x => x.INVENTORYITEMID,
                        principalTable: "INVENTORY_ITEM",
                        principalColumn: "INVENTORY_ITEM_ID");
                    table.ForeignKey(
                        name: "INV_ITEM_STTS_SI",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVENTORY_ITEM_TEMP_RES",
                columns: table => new
                {
                    VISITID = table.Column<string>(name: "VISIT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    RESERVEDDATE = table.Column<DateTime>(name: "RESERVED_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVENTORY_ITEM_TEMP_RES", x => new { x.VISITID, x.PRODUCTID, x.PRODUCTSTOREID });
                });

            migrationBuilder.CreateTable(
                name: "INVENTORY_TRANSFER",
                columns: table => new
                {
                    INVENTORYTRANSFERID = table.Column<string>(name: "INVENTORY_TRANSFER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INVENTORYITEMID = table.Column<string>(name: "INVENTORY_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LOCATIONSEQID = table.Column<string>(name: "LOCATION_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CONTAINERID = table.Column<string>(name: "CONTAINER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FACILITYIDTO = table.Column<string>(name: "FACILITY_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LOCATIONSEQIDTO = table.Column<string>(name: "LOCATION_SEQ_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CONTAINERIDTO = table.Column<string>(name: "CONTAINER_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ITEMISSUANCEID = table.Column<string>(name: "ITEM_ISSUANCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SENDDATE = table.Column<DateTime>(name: "SEND_DATE", type: "datetime", nullable: true),
                    RECEIVEDATE = table.Column<DateTime>(name: "RECEIVE_DATE", type: "datetime", nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVENTORY_TRANSFER", x => x.INVENTORYTRANSFERID);
                    table.ForeignKey(
                        name: "INV_XFER_CONT",
                        column: x => x.CONTAINERID,
                        principalTable: "CONTAINER",
                        principalColumn: "CONTAINER_ID");
                    table.ForeignKey(
                        name: "INV_XFER_FAC",
                        column: x => x.FACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "INV_XFER_ITEM",
                        column: x => x.INVENTORYITEMID,
                        principalTable: "INVENTORY_ITEM",
                        principalColumn: "INVENTORY_ITEM_ID");
                    table.ForeignKey(
                        name: "INV_XFER_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "INV_XFER_TCNT",
                        column: x => x.CONTAINERIDTO,
                        principalTable: "CONTAINER",
                        principalColumn: "CONTAINER_ID");
                    table.ForeignKey(
                        name: "INV_XFER_TFAC",
                        column: x => x.FACILITYIDTO,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVOICE",
                columns: table => new
                {
                    INVOICEID = table.Column<string>(name: "INVOICE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVOICETYPEID = table.Column<string>(name: "INVOICE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYIDFROM = table.Column<string>(name: "PARTY_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    BILLINGACCOUNTID = table.Column<string>(name: "BILLING_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INVOICEDATE = table.Column<DateTime>(name: "INVOICE_DATE", type: "datetime", nullable: true),
                    DUEDATE = table.Column<DateTime>(name: "DUE_DATE", type: "datetime", nullable: true),
                    PAIDDATE = table.Column<DateTime>(name: "PAID_DATE", type: "datetime", nullable: true),
                    INVOICEMESSAGE = table.Column<string>(name: "INVOICE_MESSAGE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    REFERENCENUMBER = table.Column<string>(name: "REFERENCE_NUMBER", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CURRENCYUOMID = table.Column<string>(name: "CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RECURRENCEINFOID = table.Column<string>(name: "RECURRENCE_INFO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVOICE", x => x.INVOICEID);
                    table.ForeignKey(
                        name: "INVOICE_BILLACCT",
                        column: x => x.BILLINGACCOUNTID,
                        principalTable: "BILLING_ACCOUNT",
                        principalColumn: "BILLING_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "INVOICE_CMECH",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "INVOICE_CUOM",
                        column: x => x.CURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "INVOICE_INVTYP",
                        column: x => x.INVOICETYPEID,
                        principalTable: "INVOICE_TYPE",
                        principalColumn: "INVOICE_TYPE_ID");
                    table.ForeignKey(
                        name: "INVOICE_RECINFO",
                        column: x => x.RECURRENCEINFOID,
                        principalTable: "RECURRENCE_INFO",
                        principalColumn: "RECURRENCE_INFO_ID");
                    table.ForeignKey(
                        name: "INVOICE_ROLETYP",
                        column: x => x.ROLETYPEID,
                        principalTable: "ROLE_TYPE",
                        principalColumn: "ROLE_TYPE_ID");
                    table.ForeignKey(
                        name: "INVOICE_STTSITM",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVOICE_ATTRIBUTE",
                columns: table => new
                {
                    INVOICEID = table.Column<string>(name: "INVOICE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVOICE_ATTRIBUTE", x => new { x.INVOICEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "INVOICE_ATTR",
                        column: x => x.INVOICEID,
                        principalTable: "INVOICE",
                        principalColumn: "INVOICE_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVOICE_CONTACT_MECH",
                columns: table => new
                {
                    INVOICEID = table.Column<string>(name: "INVOICE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTMECHPURPOSETYPEID = table.Column<string>(name: "CONTACT_MECH_PURPOSE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVOICE_CONTACT_MECH", x => new { x.INVOICEID, x.CONTACTMECHPURPOSETYPEID, x.CONTACTMECHID });
                    table.ForeignKey(
                        name: "INVOICE_CMECH_CM",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "INVOICE_CMECH_CMPT",
                        column: x => x.CONTACTMECHPURPOSETYPEID,
                        principalTable: "CONTACT_MECH_PURPOSE_TYPE",
                        principalColumn: "CONTACT_MECH_PURPOSE_TYPE_ID");
                    table.ForeignKey(
                        name: "INVOICE_CMECH_HDR",
                        column: x => x.INVOICEID,
                        principalTable: "INVOICE",
                        principalColumn: "INVOICE_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVOICE_CONTENT",
                columns: table => new
                {
                    INVOICEID = table.Column<string>(name: "INVOICE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVOICECONTENTTYPEID = table.Column<string>(name: "INVOICE_CONTENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVOICE_CONTENT", x => new { x.CONTENTID, x.INVOICEID, x.INVOICECONTENTTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "INV_CNT_CNT",
                        column: x => x.CONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "INV_CNT_PROD",
                        column: x => x.INVOICEID,
                        principalTable: "INVOICE",
                        principalColumn: "INVOICE_ID");
                    table.ForeignKey(
                        name: "INV_CNT_TYPE",
                        column: x => x.INVOICECONTENTTYPEID,
                        principalTable: "INVOICE_CONTENT_TYPE",
                        principalColumn: "INVOICE_CONTENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVOICE_TERM",
                columns: table => new
                {
                    INVOICETERMID = table.Column<string>(name: "INVOICE_TERM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TERMTYPEID = table.Column<string>(name: "TERM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INVOICEID = table.Column<string>(name: "INVOICE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INVOICEITEMSEQID = table.Column<string>(name: "INVOICE_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TERMVALUE = table.Column<decimal>(name: "TERM_VALUE", type: "decimal(18,2)", nullable: true),
                    TERMDAYS = table.Column<int>(name: "TERM_DAYS", type: "int", nullable: true),
                    TEXTVALUE = table.Column<string>(name: "TEXT_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    UOMID = table.Column<string>(name: "UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVOICE_TERM", x => x.INVOICETERMID);
                    table.ForeignKey(
                        name: "INVCE_TRM_INVCE",
                        column: x => x.INVOICEID,
                        principalTable: "INVOICE",
                        principalColumn: "INVOICE_ID");
                    table.ForeignKey(
                        name: "INVCE_TRM_TRM",
                        column: x => x.TERMTYPEID,
                        principalTable: "TERM_TYPE",
                        principalColumn: "TERM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVOICE_TERM_ATTRIBUTE",
                columns: table => new
                {
                    INVOICETERMID = table.Column<string>(name: "INVOICE_TERM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVOICE_TERM_ATTRIBUTE", x => new { x.INVOICETERMID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "INVOICE_TRM_ATTR",
                        column: x => x.INVOICETERMID,
                        principalTable: "INVOICE_TERM",
                        principalColumn: "INVOICE_TERM_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVOICE_ITEM",
                columns: table => new
                {
                    INVOICEID = table.Column<string>(name: "INVOICE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVOICEITEMSEQID = table.Column<string>(name: "INVOICE_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVOICEITEMTYPEID = table.Column<string>(name: "INVOICE_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    OVERRIDEGLACCOUNTID = table.Column<string>(name: "OVERRIDE_GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    OVERRIDEORGPARTYID = table.Column<string>(name: "OVERRIDE_ORG_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INVENTORYITEMID = table.Column<string>(name: "INVENTORY_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTFEATUREID = table.Column<string>(name: "PRODUCT_FEATURE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARENTINVOICEID = table.Column<string>(name: "PARENT_INVOICE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARENTINVOICEITEMSEQID = table.Column<string>(name: "PARENT_INVOICE_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    UOMID = table.Column<string>(name: "UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TAXABLEFLAG = table.Column<string>(name: "TAXABLE_FLAG", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    AMOUNT = table.Column<decimal>(type: "decimal(18,3)", nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    TAXAUTHPARTYID = table.Column<string>(name: "TAX_AUTH_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TAXAUTHGEOID = table.Column<string>(name: "TAX_AUTH_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TAXAUTHORITYRATESEQID = table.Column<string>(name: "TAX_AUTHORITY_RATE_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SALESOPPORTUNITYID = table.Column<string>(name: "SALES_OPPORTUNITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVOICE_ITEM", x => new { x.INVOICEID, x.INVOICEITEMSEQID });
                    table.ForeignKey(
                        name: "INVCE_ITM_INVCE",
                        column: x => x.INVOICEID,
                        principalTable: "INVOICE",
                        principalColumn: "INVOICE_ID");
                    table.ForeignKey(
                        name: "INVCE_ITM_INVITM",
                        column: x => x.INVENTORYITEMID,
                        principalTable: "INVENTORY_ITEM",
                        principalColumn: "INVENTORY_ITEM_ID");
                    table.ForeignKey(
                        name: "INVCE_ITM_ORGLA",
                        column: x => x.OVERRIDEGLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "INVCE_ITM_PINVIT",
                        columns: x => new { x.PARENTINVOICEID, x.PARENTINVOICEITEMSEQID },
                        principalTable: "INVOICE_ITEM",
                        principalColumns: new[] { "INVOICE_ID", "INVOICE_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "INVCE_ITM_PRDFT",
                        column: x => x.PRODUCTFEATUREID,
                        principalTable: "PRODUCT_FEATURE",
                        principalColumn: "PRODUCT_FEATURE_ID");
                    table.ForeignKey(
                        name: "INVCE_ITM_TAXGEO",
                        column: x => x.TAXAUTHGEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "INVCE_ITM_UOM",
                        column: x => x.UOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "INVOICE_ITMITYP",
                        column: x => x.INVOICEITEMTYPEID,
                        principalTable: "INVOICE_ITEM_TYPE",
                        principalColumn: "INVOICE_ITEM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVOICE_ITEM_ASSOC",
                columns: table => new
                {
                    INVOICEIDFROM = table.Column<string>(name: "INVOICE_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVOICEITEMSEQIDFROM = table.Column<string>(name: "INVOICE_ITEM_SEQ_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVOICEIDTO = table.Column<string>(name: "INVOICE_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVOICEITEMSEQIDTO = table.Column<string>(name: "INVOICE_ITEM_SEQ_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVOICEITEMASSOCTYPEID = table.Column<string>(name: "INVOICE_ITEM_ASSOC_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    PARTYIDFROM = table.Column<string>(name: "PARTY_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYIDTO = table.Column<string>(name: "PARTY_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    AMOUNT = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVOICE_ITEM_ASSOC", x => new { x.INVOICEIDFROM, x.INVOICEITEMSEQIDFROM, x.INVOICEIDTO, x.INVOICEITEMSEQIDTO, x.INVOICEITEMASSOCTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "INITMASCTYP_IIASC",
                        column: x => x.INVOICEITEMASSOCTYPEID,
                        principalTable: "INVOICE_ITEM_ASSOC_TYPE",
                        principalColumn: "INVOICE_ITEM_ASSOC_TYPE_ID");
                    table.ForeignKey(
                        name: "INITMASC_FIITM",
                        columns: x => new { x.INVOICEIDFROM, x.INVOICEITEMSEQIDFROM },
                        principalTable: "INVOICE_ITEM",
                        principalColumns: new[] { "INVOICE_ID", "INVOICE_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "INITMASC_TIITM",
                        columns: x => new { x.INVOICEIDTO, x.INVOICEITEMSEQIDTO },
                        principalTable: "INVOICE_ITEM",
                        principalColumns: new[] { "INVOICE_ID", "INVOICE_ITEM_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "INVOICE_ITEM_ATTRIBUTE",
                columns: table => new
                {
                    INVOICEID = table.Column<string>(name: "INVOICE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVOICEITEMSEQID = table.Column<string>(name: "INVOICE_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVOICE_ITEM_ATTRIBUTE", x => new { x.INVOICEID, x.INVOICEITEMSEQID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "INVOICE_IMAT_ITM",
                        columns: x => new { x.INVOICEID, x.INVOICEITEMSEQID },
                        principalTable: "INVOICE_ITEM",
                        principalColumns: new[] { "INVOICE_ID", "INVOICE_ITEM_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "INVOICE_ITEM_TYPE_GL_ACCOUNT",
                columns: table => new
                {
                    INVOICEITEMTYPEID = table.Column<string>(name: "INVOICE_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORGANIZATIONPARTYID = table.Column<string>(name: "ORGANIZATION_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GLACCOUNTID = table.Column<string>(name: "GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVOICE_ITEM_TYPE_GL_ACCOUN", x => new { x.INVOICEITEMTYPEID, x.ORGANIZATIONPARTYID });
                    table.ForeignKey(
                        name: "INVOICE_ITGA_GLAC",
                        column: x => x.GLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "INVOICE_ITGA_IIT",
                        column: x => x.INVOICEITEMTYPEID,
                        principalTable: "INVOICE_ITEM_TYPE",
                        principalColumn: "INVOICE_ITEM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVOICE_NOTE",
                columns: table => new
                {
                    INVOICEID = table.Column<string>(name: "INVOICE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    NOTEID = table.Column<string>(name: "NOTE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVOICE_NOTE", x => new { x.INVOICEID, x.NOTEID });
                    table.ForeignKey(
                        name: "INVOICE_NOTE_INV",
                        column: x => x.INVOICEID,
                        principalTable: "INVOICE",
                        principalColumn: "INVOICE_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVOICE_ROLE",
                columns: table => new
                {
                    INVOICEID = table.Column<string>(name: "INVOICE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DATETIMEPERFORMED = table.Column<DateTime>(name: "DATETIME_PERFORMED", type: "datetime", nullable: true),
                    PERCENTAGE = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVOICE_ROLE", x => new { x.INVOICEID, x.PARTYID, x.ROLETYPEID });
                    table.ForeignKey(
                        name: "INVCE_RLE_INVCE",
                        column: x => x.INVOICEID,
                        principalTable: "INVOICE",
                        principalColumn: "INVOICE_ID");
                });

            migrationBuilder.CreateTable(
                name: "INVOICE_STATUS",
                columns: table => new
                {
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVOICEID = table.Column<string>(name: "INVOICE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSDATE = table.Column<DateTime>(name: "STATUS_DATE", type: "datetime", nullable: false),
                    CHANGEBYUSERLOGINID = table.Column<string>(name: "CHANGE_BY_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_INVOICE_STATUS", x => new { x.STATUSID, x.INVOICEID, x.STATUSDATE });
                    table.ForeignKey(
                        name: "INVCE_STS_INVCE",
                        column: x => x.INVOICEID,
                        principalTable: "INVOICE",
                        principalColumn: "INVOICE_ID");
                    table.ForeignKey(
                        name: "INVCE_STS_STSITM",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "ITEM_ISSUANCE",
                columns: table => new
                {
                    ITEMISSUANCEID = table.Column<string>(name: "ITEM_ISSUANCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SHIPGROUPSEQID = table.Column<string>(name: "SHIP_GROUP_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INVENTORYITEMID = table.Column<string>(name: "INVENTORY_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SHIPMENTID = table.Column<string>(name: "SHIPMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SHIPMENTITEMSEQID = table.Column<string>(name: "SHIPMENT_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FIXEDASSETID = table.Column<string>(name: "FIXED_ASSET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    MAINTHISTSEQID = table.Column<string>(name: "MAINT_HIST_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ISSUEDDATETIME = table.Column<DateTime>(name: "ISSUED_DATE_TIME", type: "datetime", nullable: true),
                    ISSUEDBYUSERLOGINID = table.Column<string>(name: "ISSUED_BY_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    CANCELQUANTITY = table.Column<decimal>(name: "CANCEL_QUANTITY", type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ITEM_ISSUANCE", x => x.ITEMISSUANCEID);
                    table.ForeignKey(
                        name: "ITEM_ISS_FAMNT",
                        columns: x => new { x.FIXEDASSETID, x.MAINTHISTSEQID },
                        principalTable: "FIXED_ASSET_MAINT",
                        principalColumns: new[] { "FIXED_ASSET_ID", "MAINT_HIST_SEQ_ID" });
                    table.ForeignKey(
                        name: "ITEM_ISS_INVITM",
                        column: x => x.INVENTORYITEMID,
                        principalTable: "INVENTORY_ITEM",
                        principalColumn: "INVENTORY_ITEM_ID");
                });

            migrationBuilder.CreateTable(
                name: "ITEM_ISSUANCE_ROLE",
                columns: table => new
                {
                    ITEMISSUANCEID = table.Column<string>(name: "ITEM_ISSUANCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ITEM_ISSUANCE_ROLE", x => new { x.ITEMISSUANCEID, x.PARTYID, x.ROLETYPEID });
                    table.ForeignKey(
                        name: "ITEM_ISSRL_ITMIS",
                        column: x => x.ITEMISSUANCEID,
                        principalTable: "ITEM_ISSUANCE",
                        principalColumn: "ITEM_ISSUANCE_ID");
                });

            migrationBuilder.CreateTable(
                name: "JOB_INTERVIEW",
                columns: table => new
                {
                    JOBINTERVIEWID = table.Column<string>(name: "JOB_INTERVIEW_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    JOBINTERVIEWEEPARTYID = table.Column<string>(name: "JOB_INTERVIEWEE_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    JOBREQUISITIONID = table.Column<string>(name: "JOB_REQUISITION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    JOBINTERVIEWERPARTYID = table.Column<string>(name: "JOB_INTERVIEWER_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    JOBINTERVIEWTYPEID = table.Column<string>(name: "JOB_INTERVIEW_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    GRADESECUREDENUMID = table.Column<string>(name: "GRADE_SECURED_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    JOBINTERVIEWRESULT = table.Column<string>(name: "JOB_INTERVIEW_RESULT", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    JOBINTERVIEWDATE = table.Column<DateTime>(name: "JOB_INTERVIEW_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_JOB_INTERVIEW", x => x.JOBINTERVIEWID);
                    table.ForeignKey(
                        name: "JOB_INTW_ENUM",
                        column: x => x.GRADESECUREDENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "JOB_INTW_INTYP",
                        column: x => x.JOBINTERVIEWTYPEID,
                        principalTable: "JOB_INTERVIEW_TYPE",
                        principalColumn: "JOB_INTERVIEW_TYPE_ID");
                    table.ForeignKey(
                        name: "JOB_INTW_JBREQ",
                        column: x => x.JOBREQUISITIONID,
                        principalTable: "JOB_REQUISITION",
                        principalColumn: "JOB_REQUISITION_ID");
                });

            migrationBuilder.CreateTable(
                name: "JOB_SANDBOX",
                columns: table => new
                {
                    JOBID = table.Column<string>(name: "JOB_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    JOBNAME = table.Column<string>(name: "JOB_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    RUNTIME = table.Column<DateTime>(name: "RUN_TIME", type: "datetime", nullable: true),
                    PRIORITY = table.Column<int>(type: "int", nullable: true),
                    POOLID = table.Column<string>(name: "POOL_ID", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARENTJOBID = table.Column<string>(name: "PARENT_JOB_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PREVIOUSJOBID = table.Column<string>(name: "PREVIOUS_JOB_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SERVICENAME = table.Column<string>(name: "SERVICE_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LOADERNAME = table.Column<string>(name: "LOADER_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    MAXRETRY = table.Column<int>(name: "MAX_RETRY", type: "int", nullable: true),
                    CURRENTRETRYCOUNT = table.Column<int>(name: "CURRENT_RETRY_COUNT", type: "int", nullable: true),
                    AUTHUSERLOGINID = table.Column<string>(name: "AUTH_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    RUNASUSER = table.Column<string>(name: "RUN_AS_USER", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    RUNTIMEDATAID = table.Column<string>(name: "RUNTIME_DATA_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RECURRENCEINFOID = table.Column<string>(name: "RECURRENCE_INFO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TEMPEXPRID = table.Column<string>(name: "TEMP_EXPR_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CURRENTRECURRENCECOUNT = table.Column<int>(name: "CURRENT_RECURRENCE_COUNT", type: "int", nullable: true),
                    MAXRECURRENCECOUNT = table.Column<int>(name: "MAX_RECURRENCE_COUNT", type: "int", nullable: true),
                    RUNBYINSTANCEID = table.Column<string>(name: "RUN_BY_INSTANCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STARTDATETIME = table.Column<DateTime>(name: "START_DATE_TIME", type: "datetime", nullable: true),
                    FINISHDATETIME = table.Column<DateTime>(name: "FINISH_DATE_TIME", type: "datetime", nullable: true),
                    CANCELDATETIME = table.Column<DateTime>(name: "CANCEL_DATE_TIME", type: "datetime", nullable: true),
                    JOBRESULT = table.Column<string>(name: "JOB_RESULT", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    RECURRENCETIMEZONE = table.Column<string>(name: "RECURRENCE_TIME_ZONE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_JOB_SANDBOX", x => x.JOBID);
                    table.ForeignKey(
                        name: "JOB_SNDBX_RECINFO",
                        column: x => x.RECURRENCEINFOID,
                        principalTable: "RECURRENCE_INFO",
                        principalColumn: "RECURRENCE_INFO_ID");
                    table.ForeignKey(
                        name: "JOB_SNDBX_RNTMDTA",
                        column: x => x.RUNTIMEDATAID,
                        principalTable: "RUNTIME_DATA",
                        principalColumn: "RUNTIME_DATA_ID");
                    table.ForeignKey(
                        name: "JOB_SNDBX_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "JOB_SNDBX_TEMPEXPR",
                        column: x => x.TEMPEXPRID,
                        principalTable: "TEMPORAL_EXPRESSION",
                        principalColumn: "TEMP_EXPR_ID");
                });

            migrationBuilder.CreateTable(
                name: "MARKETING_CAMPAIGN_NOTE",
                columns: table => new
                {
                    MARKETINGCAMPAIGNID = table.Column<string>(name: "MARKETING_CAMPAIGN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    NOTEID = table.Column<string>(name: "NOTE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MARKETING_CAMPAIGN_NOTE", x => new { x.MARKETINGCAMPAIGNID, x.NOTEID });
                    table.ForeignKey(
                        name: "MKTGCPN_NOTE_CMPN",
                        column: x => x.MARKETINGCAMPAIGNID,
                        principalTable: "MARKETING_CAMPAIGN",
                        principalColumn: "MARKETING_CAMPAIGN_ID");
                });

            migrationBuilder.CreateTable(
                name: "MARKETING_CAMPAIGN_PROMO",
                columns: table => new
                {
                    MARKETINGCAMPAIGNID = table.Column<string>(name: "MARKETING_CAMPAIGN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPROMOID = table.Column<string>(name: "PRODUCT_PROMO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MARKETING_CAMPAIGN_PROMO", x => new { x.MARKETINGCAMPAIGNID, x.PRODUCTPROMOID, x.FROMDATE });
                    table.ForeignKey(
                        name: "MKTGCPN_PROMO_MC",
                        column: x => x.MARKETINGCAMPAIGNID,
                        principalTable: "MARKETING_CAMPAIGN",
                        principalColumn: "MARKETING_CAMPAIGN_ID");
                });

            migrationBuilder.CreateTable(
                name: "MARKETING_CAMPAIGN_ROLE",
                columns: table => new
                {
                    MARKETINGCAMPAIGNID = table.Column<string>(name: "MARKETING_CAMPAIGN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MARKETING_CAMPAIGN_ROLE", x => new { x.MARKETINGCAMPAIGNID, x.PARTYID, x.ROLETYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "MKTGCPN_ROLE_MC",
                        column: x => x.MARKETINGCAMPAIGNID,
                        principalTable: "MARKETING_CAMPAIGN",
                        principalColumn: "MARKETING_CAMPAIGN_ID");
                });

            migrationBuilder.CreateTable(
                name: "MRP_EVENT",
                columns: table => new
                {
                    MRPID = table.Column<string>(name: "MRP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    EVENTDATE = table.Column<DateTime>(name: "EVENT_DATE", type: "datetime", nullable: false),
                    MRPEVENTTYPEID = table.Column<string>(name: "MRP_EVENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUANTITY = table.Column<double>(type: "float", nullable: true),
                    EVENTNAME = table.Column<string>(name: "EVENT_NAME", type: "text", nullable: true),
                    ISLATE = table.Column<string>(name: "IS_LATE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    FACILITYIDTO = table.Column<string>(name: "FACILITY_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MRP_EVENT", x => new { x.MRPID, x.PRODUCTID, x.EVENTDATE, x.MRPEVENTTYPEID });
                    table.ForeignKey(
                        name: "MRPEV_FAC",
                        column: x => x.FACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "MRPEV_TYP",
                        column: x => x.MRPEVENTTYPEID,
                        principalTable: "MRP_EVENT_TYPE",
                        principalColumn: "MRP_EVENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "NOTE_DATA",
                columns: table => new
                {
                    NOTEID = table.Column<string>(name: "NOTE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    NOTENAME = table.Column<string>(name: "NOTE_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    NOTEINFO = table.Column<string>(name: "NOTE_INFO", type: "text", nullable: true),
                    NOTEDATETIME = table.Column<DateTime>(name: "NOTE_DATE_TIME", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true),
                    NOTEPARTY = table.Column<string>(name: "NOTE_PARTY", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    MOREINFOURL = table.Column<string>(name: "MORE_INFO_URL", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    MOREINFOITEMID = table.Column<string>(name: "MORE_INFO_ITEM_ID", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    MOREINFOITEMNAME = table.Column<string>(name: "MORE_INFO_ITEM_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NOTE_DATA", x => x.NOTEID);
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT",
                columns: table => new
                {
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    WORKEFFORTTYPEID = table.Column<string>(name: "WORK_EFFORT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CURRENTSTATUSID = table.Column<string>(name: "CURRENT_STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTSTATUSUPDATE = table.Column<DateTime>(name: "LAST_STATUS_UPDATE", type: "datetime", nullable: true),
                    WORKEFFORTPURPOSETYPEID = table.Column<string>(name: "WORK_EFFORT_PURPOSE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    WORKEFFORTPARENTID = table.Column<string>(name: "WORK_EFFORT_PARENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SCOPEENUMID = table.Column<string>(name: "SCOPE_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRIORITY = table.Column<int>(type: "int", nullable: true),
                    PERCENTCOMPLETE = table.Column<int>(name: "PERCENT_COMPLETE", type: "int", nullable: true),
                    WORKEFFORTNAME = table.Column<string>(name: "WORK_EFFORT_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SHOWASENUMID = table.Column<string>(name: "SHOW_AS_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SENDNOTIFICATIONEMAIL = table.Column<string>(name: "SEND_NOTIFICATION_EMAIL", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LOCATIONDESC = table.Column<string>(name: "LOCATION_DESC", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ESTIMATEDSTARTDATE = table.Column<DateTime>(name: "ESTIMATED_START_DATE", type: "datetime", nullable: true),
                    ESTIMATEDCOMPLETIONDATE = table.Column<DateTime>(name: "ESTIMATED_COMPLETION_DATE", type: "datetime", nullable: true),
                    ACTUALSTARTDATE = table.Column<DateTime>(name: "ACTUAL_START_DATE", type: "datetime", nullable: true),
                    ACTUALCOMPLETIONDATE = table.Column<DateTime>(name: "ACTUAL_COMPLETION_DATE", type: "datetime", nullable: true),
                    ESTIMATEDMILLISECONDS = table.Column<double>(name: "ESTIMATED_MILLI_SECONDS", type: "float", nullable: true),
                    ESTIMATEDSETUPMILLIS = table.Column<double>(name: "ESTIMATED_SETUP_MILLIS", type: "float", nullable: true),
                    ESTIMATECALCMETHOD = table.Column<string>(name: "ESTIMATE_CALC_METHOD", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ACTUALMILLISECONDS = table.Column<double>(name: "ACTUAL_MILLI_SECONDS", type: "float", nullable: true),
                    ACTUALSETUPMILLIS = table.Column<double>(name: "ACTUAL_SETUP_MILLIS", type: "float", nullable: true),
                    TOTALMILLISECONDSALLOWED = table.Column<double>(name: "TOTAL_MILLI_SECONDS_ALLOWED", type: "float", nullable: true),
                    TOTALMONEYALLOWED = table.Column<decimal>(name: "TOTAL_MONEY_ALLOWED", type: "decimal(18,2)", nullable: true),
                    MONEYUOMID = table.Column<string>(name: "MONEY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SPECIALTERMS = table.Column<string>(name: "SPECIAL_TERMS", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    TIMETRANSPARENCY = table.Column<int>(name: "TIME_TRANSPARENCY", type: "int", nullable: true),
                    UNIVERSALID = table.Column<string>(name: "UNIVERSAL_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    SOURCEREFERENCEID = table.Column<string>(name: "SOURCE_REFERENCE_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    FIXEDASSETID = table.Column<string>(name: "FIXED_ASSET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INFOURL = table.Column<string>(name: "INFO_URL", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    RECURRENCEINFOID = table.Column<string>(name: "RECURRENCE_INFO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TEMPEXPRID = table.Column<string>(name: "TEMP_EXPR_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RUNTIMEDATAID = table.Column<string>(name: "RUNTIME_DATA_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    NOTEID = table.Column<string>(name: "NOTE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SERVICELOADERNAME = table.Column<string>(name: "SERVICE_LOADER_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    QUANTITYTOPRODUCE = table.Column<decimal>(name: "QUANTITY_TO_PRODUCE", type: "decimal(18,6)", nullable: true),
                    QUANTITYPRODUCED = table.Column<decimal>(name: "QUANTITY_PRODUCED", type: "decimal(18,6)", nullable: true),
                    QUANTITYREJECTED = table.Column<decimal>(name: "QUANTITY_REJECTED", type: "decimal(18,6)", nullable: true),
                    RESERVPERSONS = table.Column<decimal>(name: "RESERV_PERSONS", type: "decimal(18,6)", nullable: true),
                    RESERV2NDPPPERC = table.Column<decimal>(name: "RESERV2ND_P_P_PERC", type: "decimal(18,6)", nullable: true),
                    RESERVNTHPPPERC = table.Column<decimal>(name: "RESERV_NTH_P_P_PERC", type: "decimal(18,6)", nullable: true),
                    ACCOMMODATIONMAPID = table.Column<string>(name: "ACCOMMODATION_MAP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ACCOMMODATIONSPOTID = table.Column<string>(name: "ACCOMMODATION_SPOT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    REVISIONNUMBER = table.Column<int>(name: "REVISION_NUMBER", type: "int", nullable: true),
                    CREATEDDATE = table.Column<DateTime>(name: "CREATED_DATE", type: "datetime", nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDDATE = table.Column<DateTime>(name: "LAST_MODIFIED_DATE", type: "datetime", nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT", x => x.WORKEFFORTID);
                    table.ForeignKey(
                        name: "WK_EFFRT_ACC_MAP",
                        column: x => x.ACCOMMODATIONMAPID,
                        principalTable: "ACCOMMODATION_MAP",
                        principalColumn: "ACCOMMODATION_MAP_ID");
                    table.ForeignKey(
                        name: "WK_EFFRT_ACC_SPOT",
                        column: x => x.ACCOMMODATIONSPOTID,
                        principalTable: "ACCOMMODATION_SPOT",
                        principalColumn: "ACCOMMODATION_SPOT_ID");
                    table.ForeignKey(
                        name: "WK_EFFRT_CURSTTS",
                        column: x => x.CURRENTSTATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "WK_EFFRT_CUS_MET",
                        column: x => x.ESTIMATECALCMETHOD,
                        principalTable: "CUSTOM_METHOD",
                        principalColumn: "CUSTOM_METHOD_ID");
                    table.ForeignKey(
                        name: "WK_EFFRT_FACILITY",
                        column: x => x.FACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "WK_EFFRT_FXDASST",
                        column: x => x.FIXEDASSETID,
                        principalTable: "FIXED_ASSET",
                        principalColumn: "FIXED_ASSET_ID");
                    table.ForeignKey(
                        name: "WK_EFFRT_MON_UOM",
                        column: x => x.MONEYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "WK_EFFRT_NOTE",
                        column: x => x.NOTEID,
                        principalTable: "NOTE_DATA",
                        principalColumn: "NOTE_ID");
                    table.ForeignKey(
                        name: "WK_EFFRT_PARENT",
                        column: x => x.WORKEFFORTPARENTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                    table.ForeignKey(
                        name: "WK_EFFRT_PRPTYP",
                        column: x => x.WORKEFFORTPURPOSETYPEID,
                        principalTable: "WORK_EFFORT_PURPOSE_TYPE",
                        principalColumn: "WORK_EFFORT_PURPOSE_TYPE_ID");
                    table.ForeignKey(
                        name: "WK_EFFRT_RECINFO",
                        column: x => x.RECURRENCEINFOID,
                        principalTable: "RECURRENCE_INFO",
                        principalColumn: "RECURRENCE_INFO_ID");
                    table.ForeignKey(
                        name: "WK_EFFRT_RNTMDTA",
                        column: x => x.RUNTIMEDATAID,
                        principalTable: "RUNTIME_DATA",
                        principalColumn: "RUNTIME_DATA_ID");
                    table.ForeignKey(
                        name: "WK_EFFRT_SC_ENUM",
                        column: x => x.SCOPEENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "WK_EFFRT_TEMPEXPR",
                        column: x => x.TEMPEXPRID,
                        principalTable: "TEMPORAL_EXPRESSION",
                        principalColumn: "TEMP_EXPR_ID");
                    table.ForeignKey(
                        name: "WK_EFFRT_TYPE",
                        column: x => x.WORKEFFORTTYPEID,
                        principalTable: "WORK_EFFORT_TYPE",
                        principalColumn: "WORK_EFFORT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_ASSOC",
                columns: table => new
                {
                    WORKEFFORTIDFROM = table.Column<string>(name: "WORK_EFFORT_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    WORKEFFORTIDTO = table.Column<string>(name: "WORK_EFFORT_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    WORKEFFORTASSOCTYPEID = table.Column<string>(name: "WORK_EFFORT_ASSOC_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_ASSOC", x => new { x.WORKEFFORTIDFROM, x.WORKEFFORTIDTO, x.WORKEFFORTASSOCTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "WK_EFFRTASSC_FWE",
                        column: x => x.WORKEFFORTIDFROM,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                    table.ForeignKey(
                        name: "WK_EFFRTASSC_TWE",
                        column: x => x.WORKEFFORTIDTO,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                    table.ForeignKey(
                        name: "WK_EFFRTASSC_TYP",
                        column: x => x.WORKEFFORTASSOCTYPEID,
                        principalTable: "WORK_EFFORT_ASSOC_TYPE",
                        principalColumn: "WORK_EFFORT_ASSOC_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_ATTRIBUTE",
                columns: table => new
                {
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_ATTRIBUTE", x => new { x.WORKEFFORTID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "WK_EFFRT_ATTR_WE",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_BILLING",
                columns: table => new
                {
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVOICEID = table.Column<string>(name: "INVOICE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVOICEITEMSEQID = table.Column<string>(name: "INVOICE_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PERCENTAGE = table.Column<double>(type: "float", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_BILLING", x => new { x.WORKEFFORTID, x.INVOICEID, x.INVOICEITEMSEQID });
                    table.ForeignKey(
                        name: "WK_EFFBLNG_INVITM",
                        columns: x => new { x.INVOICEID, x.INVOICEITEMSEQID },
                        principalTable: "INVOICE_ITEM",
                        principalColumns: new[] { "INVOICE_ID", "INVOICE_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "WK_EFFBLNG_WEFF",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_CONTACT_MECH_NEW",
                columns: table => new
                {
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_CONTACT_MECH_NE", x => new { x.WORKEFFORTID, x.CONTACTMECHID, x.FROMDATE });
                    table.ForeignKey(
                        name: "WKEFF_CMECH_CMECH",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "WKEFF_CMECH_WKEFF",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_CONTENT",
                columns: table => new
                {
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    WORKEFFORTCONTENTTYPEID = table.Column<string>(name: "WORK_EFFORT_CONTENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_CONTENT", x => new { x.WORKEFFORTID, x.CONTENTID, x.WORKEFFORTCONTENTTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "WKEFF_CNT_CNT",
                        column: x => x.CONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "WKEFF_CNT_WCTP",
                        column: x => x.WORKEFFORTCONTENTTYPEID,
                        principalTable: "WORK_EFFORT_CONTENT_TYPE",
                        principalColumn: "WORK_EFFORT_CONTENT_TYPE_ID");
                    table.ForeignKey(
                        name: "WKEFF_CNT_WKEFF",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_COST_CALC",
                columns: table => new
                {
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COSTCOMPONENTTYPEID = table.Column<string>(name: "COST_COMPONENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    COSTCOMPONENTCALCID = table.Column<string>(name: "COST_COMPONENT_CALC_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_COST_CALC", x => new { x.WORKEFFORTID, x.COSTCOMPONENTTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "WK_EFFRT_COS_CCC",
                        column: x => x.COSTCOMPONENTCALCID,
                        principalTable: "COST_COMPONENT_CALC",
                        principalColumn: "COST_COMPONENT_CALC_ID");
                    table.ForeignKey(
                        name: "WK_EFFRT_COS_CCT",
                        column: x => x.COSTCOMPONENTTYPEID,
                        principalTable: "COST_COMPONENT_TYPE",
                        principalColumn: "COST_COMPONENT_TYPE_ID");
                    table.ForeignKey(
                        name: "WK_EFFRT_COS_WEF",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_DELIVERABLE_PROD",
                columns: table => new
                {
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DELIVERABLEID = table.Column<string>(name: "DELIVERABLE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_DELIVERABLE_PRO", x => new { x.WORKEFFORTID, x.DELIVERABLEID });
                    table.ForeignKey(
                        name: "WKEFF_DELPRD_DEL",
                        column: x => x.DELIVERABLEID,
                        principalTable: "DELIVERABLE",
                        principalColumn: "DELIVERABLE_ID");
                    table.ForeignKey(
                        name: "WKEFF_DELPRD_WEFF",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_FIXED_ASSET_ASSIGN",
                columns: table => new
                {
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FIXEDASSETID = table.Column<string>(name: "FIXED_ASSET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    AVAILABILITYSTATUSID = table.Column<string>(name: "AVAILABILITY_STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ALLOCATEDCOST = table.Column<decimal>(name: "ALLOCATED_COST", type: "decimal(18,2)", nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_FIXED_ASSET_ASS", x => new { x.WORKEFFORTID, x.FIXEDASSETID, x.FROMDATE });
                    table.ForeignKey(
                        name: "WKEFF_FXDAA_AVAIL",
                        column: x => x.AVAILABILITYSTATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "WKEFF_FXDAA_FXAS",
                        column: x => x.FIXEDASSETID,
                        principalTable: "FIXED_ASSET",
                        principalColumn: "FIXED_ASSET_ID");
                    table.ForeignKey(
                        name: "WKEFF_FXDAA_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "WKEFF_FXDAA_WEFF",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_FIXED_ASSET_STD",
                columns: table => new
                {
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FIXEDASSETTYPEID = table.Column<string>(name: "FIXED_ASSET_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ESTIMATEDQUANTITY = table.Column<double>(name: "ESTIMATED_QUANTITY", type: "float", nullable: true),
                    ESTIMATEDDURATION = table.Column<double>(name: "ESTIMATED_DURATION", type: "float", nullable: true),
                    ESTIMATEDCOST = table.Column<decimal>(name: "ESTIMATED_COST", type: "decimal(18,2)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_FIXED_ASSET_STD", x => new { x.WORKEFFORTID, x.FIXEDASSETTYPEID });
                    table.ForeignKey(
                        name: "WKEFF_FASTD_FAT",
                        column: x => x.FIXEDASSETTYPEID,
                        principalTable: "FIXED_ASSET_TYPE",
                        principalColumn: "FIXED_ASSET_TYPE_ID");
                    table.ForeignKey(
                        name: "WKEFF_FASTD_WEFF",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_ICAL_DATA",
                columns: table => new
                {
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ICALDATA = table.Column<string>(name: "ICAL_DATA", type: "text", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_ICAL_DATA", x => x.WORKEFFORTID);
                    table.ForeignKey(
                        name: "WKEFF_ICAL_DATA",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_INVENTORY_ASSIGN",
                columns: table => new
                {
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVENTORYITEMID = table.Column<string>(name: "INVENTORY_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUANTITY = table.Column<double>(type: "float", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_INVENTORY_ASSIG", x => new { x.WORKEFFORTID, x.INVENTORYITEMID });
                    table.ForeignKey(
                        name: "WKEFF_INVAS_INVIT",
                        column: x => x.INVENTORYITEMID,
                        principalTable: "INVENTORY_ITEM",
                        principalColumn: "INVENTORY_ITEM_ID");
                    table.ForeignKey(
                        name: "WKEFF_INVAS_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "WKEFF_INVAS_WEFF",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_INVENTORY_PRODUCED",
                columns: table => new
                {
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVENTORYITEMID = table.Column<string>(name: "INVENTORY_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_INVENTORY_PRODU", x => new { x.WORKEFFORTID, x.INVENTORYITEMID });
                    table.ForeignKey(
                        name: "WKEFF_INVPD_INVIT",
                        column: x => x.INVENTORYITEMID,
                        principalTable: "INVENTORY_ITEM",
                        principalColumn: "INVENTORY_ITEM_ID");
                    table.ForeignKey(
                        name: "WKEFF_INVPD_WEFF",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_KEYWORD",
                columns: table => new
                {
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    KEYWORD = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    RELEVANCYWEIGHT = table.Column<int>(name: "RELEVANCY_WEIGHT", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_KEYWORD", x => new { x.WORKEFFORTID, x.KEYWORD });
                    table.ForeignKey(
                        name: "WEFF_KWD_WEFF",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_NOTE",
                columns: table => new
                {
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    NOTEID = table.Column<string>(name: "NOTE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INTERNALNOTE = table.Column<string>(name: "INTERNAL_NOTE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_NOTE", x => new { x.WORKEFFORTID, x.NOTEID });
                    table.ForeignKey(
                        name: "WKEFF_NTE_NOTE",
                        column: x => x.NOTEID,
                        principalTable: "NOTE_DATA",
                        principalColumn: "NOTE_ID");
                    table.ForeignKey(
                        name: "WKEFF_NTE_WEFF",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_SKILL_STANDARD",
                columns: table => new
                {
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SKILLTYPEID = table.Column<string>(name: "SKILL_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ESTIMATEDNUMPEOPLE = table.Column<double>(name: "ESTIMATED_NUM_PEOPLE", type: "float", nullable: true),
                    ESTIMATEDDURATION = table.Column<double>(name: "ESTIMATED_DURATION", type: "float", nullable: true),
                    ESTIMATEDCOST = table.Column<decimal>(name: "ESTIMATED_COST", type: "decimal(18,2)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_SKILL_STANDARD", x => new { x.WORKEFFORTID, x.SKILLTYPEID });
                    table.ForeignKey(
                        name: "WKEFF_SKLSTD_SKTP",
                        column: x => x.SKILLTYPEID,
                        principalTable: "SKILL_TYPE",
                        principalColumn: "SKILL_TYPE_ID");
                    table.ForeignKey(
                        name: "WKEFF_SKLSTD_WEFF",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_TRANS_BOX",
                columns: table => new
                {
                    PROCESSWORKEFFORTID = table.Column<string>(name: "PROCESS_WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TOACTIVITYID = table.Column<string>(name: "TO_ACTIVITY_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    TRANSITIONID = table.Column<string>(name: "TRANSITION_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_TRANS_BOX", x => new { x.PROCESSWORKEFFORTID, x.TOACTIVITYID, x.TRANSITIONID });
                    table.ForeignKey(
                        name: "WKEFF_TXBX_WE",
                        column: x => x.PROCESSWORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_ASSOC_ATTRIBUTE",
                columns: table => new
                {
                    WORKEFFORTIDFROM = table.Column<string>(name: "WORK_EFFORT_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    WORKEFFORTIDTO = table.Column<string>(name: "WORK_EFFORT_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    WORKEFFORTASSOCTYPEID = table.Column<string>(name: "WORK_EFFORT_ASSOC_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_ASSOC_ATTRIBUTE", x => new { x.WORKEFFORTIDFROM, x.WORKEFFORTIDTO, x.WORKEFFORTASSOCTYPEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "WK_EFFRTASSC_ATTR",
                        columns: x => new { x.WORKEFFORTIDFROM, x.WORKEFFORTIDTO, x.WORKEFFORTASSOCTYPEID, x.FROMDATE },
                        principalTable: "WORK_EFFORT_ASSOC",
                        principalColumns: new[] { "WORK_EFFORT_ID_FROM", "WORK_EFFORT_ID_TO", "WORK_EFFORT_ASSOC_TYPE_ID", "FROM_DATE" });
                });

            migrationBuilder.CreateTable(
                name: "ORDER_ADJUSTMENT",
                columns: table => new
                {
                    ORDERADJUSTMENTID = table.Column<string>(name: "ORDER_ADJUSTMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERADJUSTMENTTYPEID = table.Column<string>(name: "ORDER_ADJUSTMENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SHIPGROUPSEQID = table.Column<string>(name: "SHIP_GROUP_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    AMOUNT = table.Column<decimal>(type: "decimal(18,3)", nullable: true),
                    RECURRINGAMOUNT = table.Column<decimal>(name: "RECURRING_AMOUNT", type: "decimal(18,3)", nullable: true),
                    AMOUNTALREADYINCLUDED = table.Column<decimal>(name: "AMOUNT_ALREADY_INCLUDED", type: "decimal(18,3)", nullable: true),
                    PRODUCTPROMOID = table.Column<string>(name: "PRODUCT_PROMO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTPROMORULEID = table.Column<string>(name: "PRODUCT_PROMO_RULE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTPROMOACTIONSEQID = table.Column<string>(name: "PRODUCT_PROMO_ACTION_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTFEATUREID = table.Column<string>(name: "PRODUCT_FEATURE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CORRESPONDINGPRODUCTID = table.Column<string>(name: "CORRESPONDING_PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TAXAUTHORITYRATESEQID = table.Column<string>(name: "TAX_AUTHORITY_RATE_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SOURCEREFERENCEID = table.Column<string>(name: "SOURCE_REFERENCE_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    SOURCEPERCENTAGE = table.Column<decimal>(name: "SOURCE_PERCENTAGE", type: "decimal(18,6)", nullable: true),
                    CUSTOMERREFERENCEID = table.Column<string>(name: "CUSTOMER_REFERENCE_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    PRIMARYGEOID = table.Column<string>(name: "PRIMARY_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SECONDARYGEOID = table.Column<string>(name: "SECONDARY_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    EXEMPTAMOUNT = table.Column<decimal>(name: "EXEMPT_AMOUNT", type: "decimal(18,2)", nullable: true),
                    TAXAUTHGEOID = table.Column<string>(name: "TAX_AUTH_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TAXAUTHPARTYID = table.Column<string>(name: "TAX_AUTH_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    OVERRIDEGLACCOUNTID = table.Column<string>(name: "OVERRIDE_GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INCLUDEINTAX = table.Column<string>(name: "INCLUDE_IN_TAX", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    INCLUDEINSHIPPING = table.Column<string>(name: "INCLUDE_IN_SHIPPING", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ISMANUAL = table.Column<string>(name: "IS_MANUAL", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    CREATEDDATE = table.Column<DateTime>(name: "CREATED_DATE", type: "datetime", nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDDATE = table.Column<DateTime>(name: "LAST_MODIFIED_DATE", type: "datetime", nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    ORIGINALADJUSTMENTID = table.Column<string>(name: "ORIGINAL_ADJUSTMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_ADJUSTMENT", x => x.ORDERADJUSTMENTID);
                    table.ForeignKey(
                        name: "ORDER_ADJ_OGLA",
                        column: x => x.OVERRIDEGLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "ORDER_ADJ_PRGEO",
                        column: x => x.PRIMARYGEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "ORDER_ADJ_SCGEO",
                        column: x => x.SECONDARYGEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "ORDER_ADJ_TYPE",
                        column: x => x.ORDERADJUSTMENTTYPEID,
                        principalTable: "ORDER_ADJUSTMENT_TYPE",
                        principalColumn: "ORDER_ADJUSTMENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_ADJUSTMENT_ATTRIBUTE",
                columns: table => new
                {
                    ORDERADJUSTMENTID = table.Column<string>(name: "ORDER_ADJUSTMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_ADJUSTMENT_ATTRIBUTE", x => new { x.ORDERADJUSTMENTID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "ORDER_ADJ_ATTR",
                        column: x => x.ORDERADJUSTMENTID,
                        principalTable: "ORDER_ADJUSTMENT",
                        principalColumn: "ORDER_ADJUSTMENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_ADJUSTMENT_BILLING",
                columns: table => new
                {
                    ORDERADJUSTMENTID = table.Column<string>(name: "ORDER_ADJUSTMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVOICEID = table.Column<string>(name: "INVOICE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVOICEITEMSEQID = table.Column<string>(name: "INVOICE_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    AMOUNT = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_ADJUSTMENT_BILLING", x => new { x.ORDERADJUSTMENTID, x.INVOICEID, x.INVOICEITEMSEQID });
                    table.ForeignKey(
                        name: "ORDER_ADJBLNG_IITM",
                        columns: x => new { x.INVOICEID, x.INVOICEITEMSEQID },
                        principalTable: "INVOICE_ITEM",
                        principalColumns: new[] { "INVOICE_ID", "INVOICE_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "ORDER_ADJBLNG_OA",
                        column: x => x.ORDERADJUSTMENTID,
                        principalTable: "ORDER_ADJUSTMENT",
                        principalColumn: "ORDER_ADJUSTMENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_ATTRIBUTE",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_ATTRIBUTE", x => new { x.ORDERID, x.ATTRNAME });
                });

            migrationBuilder.CreateTable(
                name: "ORDER_CONTACT_MECH",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTMECHPURPOSETYPEID = table.Column<string>(name: "CONTACT_MECH_PURPOSE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_CONTACT_MECH", x => new { x.ORDERID, x.CONTACTMECHPURPOSETYPEID, x.CONTACTMECHID });
                    table.ForeignKey(
                        name: "ORDER_CMECH_CM",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "ORDER_CMECH_CMPT",
                        column: x => x.CONTACTMECHPURPOSETYPEID,
                        principalTable: "CONTACT_MECH_PURPOSE_TYPE",
                        principalColumn: "CONTACT_MECH_PURPOSE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_CONTENT",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERCONTENTTYPEID = table.Column<string>(name: "ORDER_CONTENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_CONTENT", x => new { x.CONTENTID, x.ORDERID, x.ORDERITEMSEQID, x.ORDERCONTENTTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "ORD_CNT_CNT",
                        column: x => x.CONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "ORD_CNT_TYPE",
                        column: x => x.ORDERCONTENTTYPEID,
                        principalTable: "ORDER_CONTENT_TYPE",
                        principalColumn: "ORDER_CONTENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_DELIVERY_SCHEDULE",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ESTIMATEDREADYDATE = table.Column<DateTime>(name: "ESTIMATED_READY_DATE", type: "datetime", nullable: true),
                    CARTONS = table.Column<int>(type: "int", nullable: true),
                    SKIDSPALLETS = table.Column<int>(name: "SKIDS_PALLETS", type: "int", nullable: true),
                    UNITSPIECES = table.Column<decimal>(name: "UNITS_PIECES", type: "decimal(18,6)", nullable: true),
                    TOTALCUBICSIZE = table.Column<decimal>(name: "TOTAL_CUBIC_SIZE", type: "decimal(18,6)", nullable: true),
                    TOTALCUBICUOMID = table.Column<string>(name: "TOTAL_CUBIC_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TOTALWEIGHT = table.Column<decimal>(name: "TOTAL_WEIGHT", type: "decimal(18,6)", nullable: true),
                    TOTALWEIGHTUOMID = table.Column<string>(name: "TOTAL_WEIGHT_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_DELIVERY_SCHEDULE", x => new { x.ORDERID, x.ORDERITEMSEQID });
                    table.ForeignKey(
                        name: "ORDER_DELSCH_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "ORDER_DELSCH_TCUOM",
                        column: x => x.TOTALCUBICUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "ORDER_DELSCH_TWUOM",
                        column: x => x.TOTALWEIGHTUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_HEADER",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERTYPEID = table.Column<string>(name: "ORDER_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERNAME = table.Column<string>(name: "ORDER_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    EXTERNALID = table.Column<string>(name: "EXTERNAL_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SALESCHANNELENUMID = table.Column<string>(name: "SALES_CHANNEL_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERDATE = table.Column<DateTime>(name: "ORDER_DATE", type: "datetime", nullable: true),
                    PRIORITY = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ENTRYDATE = table.Column<DateTime>(name: "ENTRY_DATE", type: "datetime", nullable: true),
                    PICKSHEETPRINTEDDATE = table.Column<DateTime>(name: "PICK_SHEET_PRINTED_DATE", type: "datetime", nullable: true),
                    VISITID = table.Column<string>(name: "VISIT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    VEHICLEID = table.Column<string>(name: "VEHICLE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CREATEDBY = table.Column<string>(name: "CREATED_BY", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    FIRSTATTEMPTORDERID = table.Column<string>(name: "FIRST_ATTEMPT_ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CURRENCYUOM = table.Column<string>(name: "CURRENCY_UOM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SYNCSTATUSID = table.Column<string>(name: "SYNC_STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    BILLINGACCOUNTID = table.Column<string>(name: "BILLING_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORIGINFACILITYID = table.Column<string>(name: "ORIGIN_FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    WEBSITEID = table.Column<string>(name: "WEB_SITE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AGREEMENTID = table.Column<string>(name: "AGREEMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TERMINALID = table.Column<string>(name: "TERMINAL_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    TRANSACTIONID = table.Column<string>(name: "TRANSACTION_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    AUTOORDERSHOPPINGLISTID = table.Column<string>(name: "AUTO_ORDER_SHOPPING_LIST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    NEEDSINVENTORYISSUANCE = table.Column<string>(name: "NEEDS_INVENTORY_ISSUANCE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ISRUSHORDER = table.Column<string>(name: "IS_RUSH_ORDER", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    INTERNALCODE = table.Column<string>(name: "INTERNAL_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    REMAININGSUBTOTAL = table.Column<decimal>(name: "REMAINING_SUB_TOTAL", type: "decimal(18,2)", nullable: true),
                    GRANDTOTAL = table.Column<decimal>(name: "GRAND_TOTAL", type: "decimal(18,2)", nullable: true),
                    CURRENTMILEAGE = table.Column<int>(name: "CURRENT_MILEAGE", type: "int", nullable: true),
                    ISVIEWED = table.Column<string>(name: "IS_VIEWED", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    INVOICEPERSHIPMENT = table.Column<string>(name: "INVOICE_PER_SHIPMENT", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    CUSTOMERREMARKS = table.Column<string>(name: "CUSTOMER_REMARKS", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    INTERNALREMARKS = table.Column<string>(name: "INTERNAL_REMARKS", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_HEADER", x => x.ORDERID);
                    table.ForeignKey(
                        name: "ORDER_HDR_BACCT",
                        column: x => x.BILLINGACCOUNTID,
                        principalTable: "BILLING_ACCOUNT",
                        principalColumn: "BILLING_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "ORDER_HDR_CUOM",
                        column: x => x.CURRENCYUOM,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "ORDER_HDR_OFAC",
                        column: x => x.ORIGINFACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "ORDER_HDR_SCENUM",
                        column: x => x.SALESCHANNELENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "ORDER_HDR_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "ORDER_HDR_SYST",
                        column: x => x.SYNCSTATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "ORDER_HDR_TYPE",
                        column: x => x.ORDERTYPEID,
                        principalTable: "ORDER_TYPE",
                        principalColumn: "ORDER_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_HEADER_NOTE",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    NOTEID = table.Column<string>(name: "NOTE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INTERNALNOTE = table.Column<string>(name: "INTERNAL_NOTE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_HEADER_NOTE", x => new { x.ORDERID, x.NOTEID });
                    table.ForeignKey(
                        name: "ORDER_HDRNT_HDR",
                        column: x => x.ORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                    table.ForeignKey(
                        name: "ORDER_HDRNT_NOTE",
                        column: x => x.NOTEID,
                        principalTable: "NOTE_DATA",
                        principalColumn: "NOTE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_HEADER_WORK_EFFORT",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_HEADER_WORK_EFFORT", x => new { x.ORDERID, x.WORKEFFORTID });
                    table.ForeignKey(
                        name: "ORDERHDWE_OH",
                        column: x => x.ORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                    table.ForeignKey(
                        name: "ORDERHDWE_WEFF",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_ITEM_ASSOC",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPGROUPSEQID = table.Column<string>(name: "SHIP_GROUP_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TOORDERID = table.Column<string>(name: "TO_ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TOORDERITEMSEQID = table.Column<string>(name: "TO_ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TOSHIPGROUPSEQID = table.Column<string>(name: "TO_SHIP_GROUP_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERITEMASSOCTYPEID = table.Column<string>(name: "ORDER_ITEM_ASSOC_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_ITEM_ASSOC", x => new { x.ORDERID, x.ORDERITEMSEQID, x.SHIPGROUPSEQID, x.TOORDERID, x.TOORDERITEMSEQID, x.TOSHIPGROUPSEQID, x.ORDERITEMASSOCTYPEID });
                    table.ForeignKey(
                        name: "ORDER_ITASS_FRHD",
                        column: x => x.ORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                    table.ForeignKey(
                        name: "ORDER_ITASS_TOHD",
                        column: x => x.TOORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                    table.ForeignKey(
                        name: "ORDER_ITASS_TYPE",
                        column: x => x.ORDERITEMASSOCTYPEID,
                        principalTable: "ORDER_ITEM_ASSOC_TYPE",
                        principalColumn: "ORDER_ITEM_ASSOC_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_ITEM_GROUP",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERITEMGROUPSEQID = table.Column<string>(name: "ORDER_ITEM_GROUP_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTGROUPSEQID = table.Column<string>(name: "PARENT_GROUP_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    GROUPNAME = table.Column<string>(name: "GROUP_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_ITEM_GROUP", x => new { x.ORDERID, x.ORDERITEMGROUPSEQID });
                    table.ForeignKey(
                        name: "ORDERITMGRP_HDR",
                        column: x => x.ORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                    table.ForeignKey(
                        name: "ORDERITMGRP_PGRP",
                        columns: x => new { x.ORDERID, x.PARENTGROUPSEQID },
                        principalTable: "ORDER_ITEM_GROUP",
                        principalColumns: new[] { "ORDER_ID", "ORDER_ITEM_GROUP_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "ORDER_NOTIFICATION",
                columns: table => new
                {
                    ORDERNOTIFICATIONID = table.Column<string>(name: "ORDER_NOTIFICATION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    EMAILTYPE = table.Column<string>(name: "EMAIL_TYPE", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    NOTIFICATIONDATE = table.Column<DateTime>(name: "NOTIFICATION_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_NOTIFICATION", x => x.ORDERNOTIFICATIONID);
                    table.ForeignKey(
                        name: "ORD_NOTIFY_ENUM",
                        column: x => x.EMAILTYPE,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "ORD_NOTIFY_ORDHDR",
                        column: x => x.ORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_TERM",
                columns: table => new
                {
                    TERMTYPEID = table.Column<string>(name: "TERM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TERMVALUE = table.Column<decimal>(name: "TERM_VALUE", type: "decimal(18,2)", nullable: true),
                    TERMDAYS = table.Column<int>(name: "TERM_DAYS", type: "int", nullable: true),
                    TEXTVALUE = table.Column<string>(name: "TEXT_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    UOMID = table.Column<string>(name: "UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_TERM", x => new { x.TERMTYPEID, x.ORDERID, x.ORDERITEMSEQID });
                    table.ForeignKey(
                        name: "ORDER_TERM_OHDR",
                        column: x => x.ORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                    table.ForeignKey(
                        name: "ORDER_TERM_TTYPE",
                        column: x => x.TERMTYPEID,
                        principalTable: "TERM_TYPE",
                        principalColumn: "TERM_TYPE_ID");
                    table.ForeignKey(
                        name: "ORDER_TERM_UOM",
                        column: x => x.UOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                });

            migrationBuilder.CreateTable(
                name: "TRACKING_CODE_ORDER",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TRACKINGCODETYPEID = table.Column<string>(name: "TRACKING_CODE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TRACKINGCODEID = table.Column<string>(name: "TRACKING_CODE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ISBILLABLE = table.Column<string>(name: "IS_BILLABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    SITEID = table.Column<string>(name: "SITE_ID", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    HASEXPORTED = table.Column<string>(name: "HAS_EXPORTED", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    AFFILIATEREFERREDTIMESTAMP = table.Column<DateTime>(name: "AFFILIATE_REFERRED_TIME_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TRACKING_CODE_ORDER", x => new { x.ORDERID, x.TRACKINGCODETYPEID });
                    table.ForeignKey(
                        name: "TKNG_CODODR_ODR",
                        column: x => x.ORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                    table.ForeignKey(
                        name: "TKNG_CODODR_TKCD",
                        column: x => x.TRACKINGCODEID,
                        principalTable: "TRACKING_CODE",
                        principalColumn: "TRACKING_CODE_ID");
                    table.ForeignKey(
                        name: "TKNG_CODODR_TYP",
                        column: x => x.TRACKINGCODETYPEID,
                        principalTable: "TRACKING_CODE_TYPE",
                        principalColumn: "TRACKING_CODE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_TERM_ATTRIBUTE",
                columns: table => new
                {
                    TERMTYPEID = table.Column<string>(name: "TERM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_TERM_ATTRIBUTE", x => new { x.TERMTYPEID, x.ORDERID, x.ORDERITEMSEQID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "ORDER_TATTR_OTRM",
                        columns: x => new { x.TERMTYPEID, x.ORDERID, x.ORDERITEMSEQID },
                        principalTable: "ORDER_TERM",
                        principalColumns: new[] { "TERM_TYPE_ID", "ORDER_ID", "ORDER_ITEM_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "ORDER_ITEM",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ParentORDERITEMSEQID = table.Column<string>(name: "Parent_ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    EXTERNALID = table.Column<string>(name: "EXTERNAL_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERITEMTYPEID = table.Column<string>(name: "ORDER_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERITEMGROUPSEQID = table.Column<string>(name: "ORDER_ITEM_GROUP_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ISITEMGROUPPRIMARY = table.Column<string>(name: "IS_ITEM_GROUP_PRIMARY", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    FROMINVENTORYITEMID = table.Column<string>(name: "FROM_INVENTORY_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    BUDGETID = table.Column<string>(name: "BUDGET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    BUDGETITEMSEQID = table.Column<string>(name: "BUDGET_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SUPPLIERPRODUCTID = table.Column<string>(name: "SUPPLIER_PRODUCT_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    PRODUCTFEATUREID = table.Column<string>(name: "PRODUCT_FEATURE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODCATALOGID = table.Column<string>(name: "PROD_CATALOG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTCATEGORYID = table.Column<string>(name: "PRODUCT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ISPROMO = table.Column<string>(name: "IS_PROMO", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    QUOTEID = table.Column<string>(name: "QUOTE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUOTEITEMSEQID = table.Column<string>(name: "QUOTE_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SHOPPINGLISTID = table.Column<string>(name: "SHOPPING_LIST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SHOPPINGLISTITEMSEQID = table.Column<string>(name: "SHOPPING_LIST_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SUBSCRIPTIONID = table.Column<string>(name: "SUBSCRIPTION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DEPLOYMENTID = table.Column<string>(name: "DEPLOYMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    CANCELQUANTITY = table.Column<decimal>(name: "CANCEL_QUANTITY", type: "decimal(18,6)", nullable: true),
                    SELECTEDAMOUNT = table.Column<decimal>(name: "SELECTED_AMOUNT", type: "decimal(18,6)", nullable: true),
                    UNITPRICE = table.Column<decimal>(name: "UNIT_PRICE", type: "decimal(18,3)", nullable: true),
                    UNITLISTPRICE = table.Column<decimal>(name: "UNIT_LIST_PRICE", type: "decimal(18,3)", nullable: true),
                    UNITAVERAGECOST = table.Column<decimal>(name: "UNIT_AVERAGE_COST", type: "decimal(18,2)", nullable: true),
                    UNITRECURRINGPRICE = table.Column<decimal>(name: "UNIT_RECURRING_PRICE", type: "decimal(18,2)", nullable: true),
                    ISMODIFIEDPRICE = table.Column<string>(name: "IS_MODIFIED_PRICE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    RECURRINGFREQUOMID = table.Column<string>(name: "RECURRING_FREQ_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ITEMDESCRIPTION = table.Column<string>(name: "ITEM_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CORRESPONDINGPOID = table.Column<string>(name: "CORRESPONDING_PO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SYNCSTATUSID = table.Column<string>(name: "SYNC_STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ESTIMATEDSHIPDATE = table.Column<DateTime>(name: "ESTIMATED_SHIP_DATE", type: "datetime", nullable: true),
                    ESTIMATEDDELIVERYDATE = table.Column<DateTime>(name: "ESTIMATED_DELIVERY_DATE", type: "datetime", nullable: true),
                    AUTOCANCELDATE = table.Column<DateTime>(name: "AUTO_CANCEL_DATE", type: "datetime", nullable: true),
                    DONTCANCELSETDATE = table.Column<DateTime>(name: "DONT_CANCEL_SET_DATE", type: "datetime", nullable: true),
                    DONTCANCELSETUSERLOGIN = table.Column<string>(name: "DONT_CANCEL_SET_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    SHIPBEFOREDATE = table.Column<DateTime>(name: "SHIP_BEFORE_DATE", type: "datetime", nullable: true),
                    SHIPAFTERDATE = table.Column<DateTime>(name: "SHIP_AFTER_DATE", type: "datetime", nullable: true),
                    RESERVEAFTERDATE = table.Column<DateTime>(name: "RESERVE_AFTER_DATE", type: "datetime", nullable: true),
                    CANCELBACKORDERDATE = table.Column<DateTime>(name: "CANCEL_BACK_ORDER_DATE", type: "datetime", nullable: true),
                    OVERRIDEGLACCOUNTID = table.Column<string>(name: "OVERRIDE_GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SALESOPPORTUNITYID = table.Column<string>(name: "SALES_OPPORTUNITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CHANGEBYUSERLOGINID = table.Column<string>(name: "CHANGE_BY_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_ITEM", x => new { x.ORDERID, x.ORDERITEMSEQID });
                    table.ForeignKey(
                        name: "ORDER_ITEM_FMINV",
                        column: x => x.FROMINVENTORYITEMID,
                        principalTable: "INVENTORY_ITEM",
                        principalColumn: "INVENTORY_ITEM_ID");
                    table.ForeignKey(
                        name: "ORDER_ITEM_HDR",
                        column: x => x.ORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                    table.ForeignKey(
                        name: "ORDER_ITEM_ITGRP",
                        columns: x => new { x.ORDERID, x.ORDERITEMGROUPSEQID },
                        principalTable: "ORDER_ITEM_GROUP",
                        principalColumns: new[] { "ORDER_ID", "ORDER_ITEM_GROUP_SEQ_ID" });
                    table.ForeignKey(
                        name: "ORDER_ITEM_OGLA",
                        column: x => x.OVERRIDEGLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "ORDER_ITEM_ORTYP",
                        column: x => x.ORDERITEMTYPEID,
                        principalTable: "ORDER_ITEM_TYPE",
                        principalColumn: "ORDER_ITEM_TYPE_ID");
                    table.ForeignKey(
                        name: "ORDER_ITEM_RFUOM",
                        column: x => x.RECURRINGFREQUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "ORDER_ITEM_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "ORDER_ITEM_SYST",
                        column: x => x.SYNCSTATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_ITEM_ATTRIBUTE",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_ITEM_ATTRIBUTE", x => new { x.ORDERID, x.ORDERITEMSEQID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "ORDER_ITEM_ATTR",
                        columns: x => new { x.ORDERID, x.ORDERITEMSEQID },
                        principalTable: "ORDER_ITEM",
                        principalColumns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "ORDER_ITEM_CONTACT_MECH",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTMECHPURPOSETYPEID = table.Column<string>(name: "CONTACT_MECH_PURPOSE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_ITEM_CONTACT_MECH", x => new { x.ORDERID, x.ORDERITEMSEQID, x.CONTACTMECHPURPOSETYPEID });
                    table.ForeignKey(
                        name: "ORDER_ITCM_CMECH",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "ORDER_ITCM_CMPT",
                        column: x => x.CONTACTMECHPURPOSETYPEID,
                        principalTable: "CONTACT_MECH_PURPOSE_TYPE",
                        principalColumn: "CONTACT_MECH_PURPOSE_TYPE_ID");
                    table.ForeignKey(
                        name: "ORDER_ITCM_OITM",
                        columns: x => new { x.ORDERID, x.ORDERITEMSEQID },
                        principalTable: "ORDER_ITEM",
                        principalColumns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "ORDER_ITEM_PRICE_INFO",
                columns: table => new
                {
                    ORDERITEMPRICEINFOID = table.Column<string>(name: "ORDER_ITEM_PRICE_INFO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTPRICERULEID = table.Column<string>(name: "PRODUCT_PRICE_RULE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTPRICEACTIONSEQID = table.Column<string>(name: "PRODUCT_PRICE_ACTION_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    MODIFYAMOUNT = table.Column<decimal>(name: "MODIFY_AMOUNT", type: "decimal(18,3)", nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    RATECODE = table.Column<string>(name: "RATE_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_ITEM_PRICE_INFO", x => x.ORDERITEMPRICEINFOID);
                    table.ForeignKey(
                        name: "ORDER_OIPI_OITM",
                        columns: x => new { x.ORDERID, x.ORDERITEMSEQID },
                        principalTable: "ORDER_ITEM",
                        principalColumns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "ORDER_OIPI_PRAI",
                        columns: x => new { x.PRODUCTPRICERULEID, x.PRODUCTPRICEACTIONSEQID },
                        principalTable: "PRODUCT_PRICE_ACTION",
                        principalColumns: new[] { "PRODUCT_PRICE_RULE_ID", "PRODUCT_PRICE_ACTION_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "ORDER_ITEM_SHIP_GRP_INV_RES",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPGROUPSEQID = table.Column<string>(name: "SHIP_GROUP_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVENTORYITEMID = table.Column<string>(name: "INVENTORY_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    RESERVEORDERENUMID = table.Column<string>(name: "RESERVE_ORDER_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    QUANTITYNOTAVAILABLE = table.Column<decimal>(name: "QUANTITY_NOT_AVAILABLE", type: "decimal(18,6)", nullable: true),
                    RESERVEDDATETIME = table.Column<DateTime>(name: "RESERVED_DATETIME", type: "datetime", nullable: true),
                    CREATEDDATETIME = table.Column<DateTime>(name: "CREATED_DATETIME", type: "datetime", nullable: true),
                    PROMISEDDATETIME = table.Column<DateTime>(name: "PROMISED_DATETIME", type: "datetime", nullable: true),
                    CURRENTPROMISEDDATE = table.Column<DateTime>(name: "CURRENT_PROMISED_DATE", type: "datetime", nullable: true),
                    PRIORITY = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    SEQUENCEID = table.Column<int>(name: "SEQUENCE_ID", type: "int", nullable: true),
                    PICKSTARTDATE = table.Column<DateTime>(name: "PICK_START_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_ITEM_SHIP_GRP_INV_RES", x => new { x.ORDERID, x.SHIPGROUPSEQID, x.ORDERITEMSEQID, x.INVENTORYITEMID });
                    table.ForeignKey(
                        name: "ORDER_ITIR_INVITM",
                        column: x => x.INVENTORYITEMID,
                        principalTable: "INVENTORY_ITEM",
                        principalColumn: "INVENTORY_ITEM_ID");
                    table.ForeignKey(
                        name: "ORDER_ITIR_OITM",
                        columns: x => new { x.ORDERID, x.ORDERITEMSEQID },
                        principalTable: "ORDER_ITEM",
                        principalColumns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "WORK_ORDER_ITEM_FULFILLMENT",
                columns: table => new
                {
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPGROUPSEQID = table.Column<string>(name: "SHIP_GROUP_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_ORDER_ITEM_FULFILLMENT", x => new { x.WORKEFFORTID, x.ORDERID, x.ORDERITEMSEQID });
                    table.ForeignKey(
                        name: "WORDER_ITFMT_OHDR",
                        column: x => x.ORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                    table.ForeignKey(
                        name: "WORDER_ITFMT_OITM",
                        columns: x => new { x.ORDERID, x.ORDERITEMSEQID },
                        principalTable: "ORDER_ITEM",
                        principalColumns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "WORDER_ITFMT_WEFRT",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_ITEM_BILLING",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVOICEID = table.Column<string>(name: "INVOICE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVOICEITEMSEQID = table.Column<string>(name: "INVOICE_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ITEMISSUANCEID = table.Column<string>(name: "ITEM_ISSUANCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SHIPMENTRECEIPTID = table.Column<string>(name: "SHIPMENT_RECEIPT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    AMOUNT = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_ITEM_BILLING", x => new { x.ORDERID, x.ORDERITEMSEQID, x.INVOICEID, x.INVOICEITEMSEQID });
                    table.ForeignKey(
                        name: "ORDER_ITBLNG_IISS",
                        column: x => x.ITEMISSUANCEID,
                        principalTable: "ITEM_ISSUANCE",
                        principalColumn: "ITEM_ISSUANCE_ID");
                    table.ForeignKey(
                        name: "ORDER_ITBLNG_IITM",
                        columns: x => new { x.INVOICEID, x.INVOICEITEMSEQID },
                        principalTable: "INVOICE_ITEM",
                        principalColumns: new[] { "INVOICE_ID", "INVOICE_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "ORDER_ITBLNG_OHDR",
                        column: x => x.ORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                    table.ForeignKey(
                        name: "ORDER_ITBLNG_OITM",
                        columns: x => new { x.ORDERID, x.ORDERITEMSEQID },
                        principalTable: "ORDER_ITEM",
                        principalColumns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "ORDER_ITEM_CHANGE",
                columns: table => new
                {
                    ORDERITEMCHANGEID = table.Column<string>(name: "ORDER_ITEM_CHANGE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CHANGETYPEENUMID = table.Column<string>(name: "CHANGE_TYPE_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CHANGEDATETIME = table.Column<DateTime>(name: "CHANGE_DATETIME", type: "datetime", nullable: true),
                    CHANGEUSERLOGIN = table.Column<string>(name: "CHANGE_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    CANCELQUANTITY = table.Column<decimal>(name: "CANCEL_QUANTITY", type: "decimal(18,6)", nullable: true),
                    UNITPRICE = table.Column<decimal>(name: "UNIT_PRICE", type: "decimal(18,2)", nullable: true),
                    ITEMDESCRIPTION = table.Column<string>(name: "ITEM_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    REASONENUMID = table.Column<string>(name: "REASON_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CHANGECOMMENTS = table.Column<string>(name: "CHANGE_COMMENTS", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_ITEM_CHANGE", x => x.ORDERITEMCHANGEID);
                    table.ForeignKey(
                        name: "ORDER_ITCH_OITM",
                        columns: x => new { x.ORDERID, x.ORDERITEMSEQID },
                        principalTable: "ORDER_ITEM",
                        principalColumns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "ORDER_ITCH_REAS",
                        column: x => x.REASONENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "ORDER_ITCH_TYPE",
                        column: x => x.CHANGETYPEENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_ITEM_GROUP_ORDER",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GROUPORDERID = table.Column<string>(name: "GROUP_ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_ITEM_GROUP_ORDER", x => new { x.ORDERID, x.ORDERITEMSEQID, x.GROUPORDERID });
                    table.ForeignKey(
                        name: "OIGO_ORDER_ITEM",
                        columns: x => new { x.ORDERID, x.ORDERITEMSEQID },
                        principalTable: "ORDER_ITEM",
                        principalColumns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "ORDER_ITEM_ROLE",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_ITEM_ROLE", x => new { x.ORDERID, x.ORDERITEMSEQID, x.PARTYID, x.ROLETYPEID });
                    table.ForeignKey(
                        name: "ORDER_ITRL_OHDR",
                        column: x => x.ORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                    table.ForeignKey(
                        name: "ORDER_ITRL_OITM",
                        columns: x => new { x.ORDERID, x.ORDERITEMSEQID },
                        principalTable: "ORDER_ITEM",
                        principalColumns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "ORDER_ITEM_SHIP_GROUP",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPGROUPSEQID = table.Column<string>(name: "SHIP_GROUP_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPMENTMETHODTYPEID = table.Column<string>(name: "SHIPMENT_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SUPPLIERPARTYID = table.Column<string>(name: "SUPPLIER_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SUPPLIERAGREEMENTID = table.Column<string>(name: "SUPPLIER_AGREEMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    VENDORPARTYID = table.Column<string>(name: "VENDOR_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CARRIERPARTYID = table.Column<string>(name: "CARRIER_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CARRIERROLETYPEID = table.Column<string>(name: "CARRIER_ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TELECOMCONTACTMECHID = table.Column<string>(name: "TELECOM_CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TRACKINGNUMBER = table.Column<string>(name: "TRACKING_NUMBER", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    SHIPPINGINSTRUCTIONS = table.Column<string>(name: "SHIPPING_INSTRUCTIONS", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    MAYSPLIT = table.Column<string>(name: "MAY_SPLIT", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    GIFTMESSAGE = table.Column<string>(name: "GIFT_MESSAGE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ISGIFT = table.Column<string>(name: "IS_GIFT", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    SHIPAFTERDATE = table.Column<DateTime>(name: "SHIP_AFTER_DATE", type: "datetime", nullable: true),
                    SHIPBYDATE = table.Column<DateTime>(name: "SHIP_BY_DATE", type: "datetime", nullable: true),
                    ESTIMATEDSHIPDATE = table.Column<DateTime>(name: "ESTIMATED_SHIP_DATE", type: "datetime", nullable: true),
                    ESTIMATEDDELIVERYDATE = table.Column<DateTime>(name: "ESTIMATED_DELIVERY_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_ITEM_SHIP_GROUP", x => new { x.ORDERID, x.SHIPGROUPSEQID });
                    table.ForeignKey(
                        name: "ORDER_ITSG_CNTM",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "ORDER_ITSG_CSHM",
                        columns: x => new { x.SHIPMENTMETHODTYPEID, x.CARRIERPARTYID, x.CARRIERROLETYPEID },
                        principalTable: "CARRIER_SHIPMENT_METHOD",
                        principalColumns: new[] { "SHIPMENT_METHOD_TYPE_ID", "PARTY_ID", "ROLE_TYPE_ID" });
                    table.ForeignKey(
                        name: "ORDER_ITSG_FAC",
                        column: x => x.FACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "ORDER_ITSG_ORDH",
                        column: x => x.ORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                    table.ForeignKey(
                        name: "ORDER_ITSG_PADR",
                        column: x => x.CONTACTMECHID,
                        principalTable: "POSTAL_ADDRESS",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "ORDER_ITSG_SAGR",
                        column: x => x.SUPPLIERAGREEMENTID,
                        principalTable: "AGREEMENT",
                        principalColumn: "AGREEMENT_ID");
                    table.ForeignKey(
                        name: "ORDER_ITSG_SHMTP",
                        column: x => x.SHIPMENTMETHODTYPEID,
                        principalTable: "SHIPMENT_METHOD_TYPE",
                        principalColumn: "SHIPMENT_METHOD_TYPE_ID");
                    table.ForeignKey(
                        name: "ORDER_ITSG_TCNB",
                        column: x => x.TELECOMCONTACTMECHID,
                        principalTable: "TELECOM_NUMBER",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "ORDER_ITSG_TCNT",
                        column: x => x.TELECOMCONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_ITEM_SHIP_GROUP_ASSOC",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPGROUPSEQID = table.Column<string>(name: "SHIP_GROUP_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    CANCELQUANTITY = table.Column<decimal>(name: "CANCEL_QUANTITY", type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_ITEM_SHIP_GROUP_ASSOC", x => new { x.ORDERID, x.ORDERITEMSEQID, x.SHIPGROUPSEQID });
                    table.ForeignKey(
                        name: "ORDER_ISGA_OISG",
                        columns: x => new { x.ORDERID, x.SHIPGROUPSEQID },
                        principalTable: "ORDER_ITEM_SHIP_GROUP",
                        principalColumns: new[] { "ORDER_ID", "SHIP_GROUP_SEQ_ID" });
                    table.ForeignKey(
                        name: "ORDER_ISGA_ORDH",
                        column: x => x.ORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                    table.ForeignKey(
                        name: "ORDER_ISGA_ORDI",
                        columns: x => new { x.ORDERID, x.ORDERITEMSEQID },
                        principalTable: "ORDER_ITEM",
                        principalColumns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "PICKLIST_BIN",
                columns: table => new
                {
                    PICKLISTBINID = table.Column<string>(name: "PICKLIST_BIN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PICKLISTID = table.Column<string>(name: "PICKLIST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    BINLOCATIONNUMBER = table.Column<int>(name: "BIN_LOCATION_NUMBER", type: "int", nullable: true),
                    PRIMARYORDERID = table.Column<string>(name: "PRIMARY_ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRIMARYSHIPGROUPSEQID = table.Column<string>(name: "PRIMARY_SHIP_GROUP_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PICKLIST_BIN", x => x.PICKLISTBINID);
                    table.ForeignKey(
                        name: "PCKLST_BIN_OISG",
                        columns: x => new { x.PRIMARYORDERID, x.PRIMARYSHIPGROUPSEQID },
                        principalTable: "ORDER_ITEM_SHIP_GROUP",
                        principalColumns: new[] { "ORDER_ID", "SHIP_GROUP_SEQ_ID" });
                    table.ForeignKey(
                        name: "PCKLST_BIN_PKLT",
                        column: x => x.PICKLISTID,
                        principalTable: "PICKLIST",
                        principalColumn: "PICKLIST_ID");
                });

            migrationBuilder.CreateTable(
                name: "PICKLIST_ITEM",
                columns: table => new
                {
                    PICKLISTBINID = table.Column<string>(name: "PICKLIST_BIN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPGROUPSEQID = table.Column<string>(name: "SHIP_GROUP_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVENTORYITEMID = table.Column<string>(name: "INVENTORY_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ITEMSTATUSID = table.Column<string>(name: "ITEM_STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PICKLIST_ITEM", x => new { x.PICKLISTBINID, x.ORDERID, x.ORDERITEMSEQID, x.SHIPGROUPSEQID, x.INVENTORYITEMID });
                    table.ForeignKey(
                        name: "PCKLST_ITM_BIN",
                        column: x => x.PICKLISTBINID,
                        principalTable: "PICKLIST_BIN",
                        principalColumn: "PICKLIST_BIN_ID");
                    table.ForeignKey(
                        name: "PCKLST_ITM_INV",
                        column: x => x.INVENTORYITEMID,
                        principalTable: "INVENTORY_ITEM",
                        principalColumn: "INVENTORY_ITEM_ID");
                    table.ForeignKey(
                        name: "PCKLST_ITM_ODIT",
                        columns: x => new { x.ORDERID, x.ORDERITEMSEQID },
                        principalTable: "ORDER_ITEM",
                        principalColumns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "PCKLST_ITM_OISG",
                        columns: x => new { x.ORDERID, x.SHIPGROUPSEQID },
                        principalTable: "ORDER_ITEM_SHIP_GROUP",
                        principalColumns: new[] { "ORDER_ID", "SHIP_GROUP_SEQ_ID" });
                    table.ForeignKey(
                        name: "PICKLST_ITM_STTS",
                        column: x => x.ITEMSTATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_PAYMENT_PREFERENCE",
                columns: table => new
                {
                    ORDERPAYMENTPREFERENCEID = table.Column<string>(name: "ORDER_PAYMENT_PREFERENCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SHIPGROUPSEQID = table.Column<string>(name: "SHIP_GROUP_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTPRICEPURPOSEID = table.Column<string>(name: "PRODUCT_PRICE_PURPOSE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PAYMENTMETHODTYPEID = table.Column<string>(name: "PAYMENT_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PAYMENTMETHODID = table.Column<string>(name: "PAYMENT_METHOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FINACCOUNTID = table.Column<string>(name: "FIN_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SECURITYCODE = table.Column<string>(name: "SECURITY_CODE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    TRACK2 = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PRESENTFLAG = table.Column<string>(name: "PRESENT_FLAG", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    SWIPEDFLAG = table.Column<string>(name: "SWIPED_FLAG", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    OVERFLOWFLAG = table.Column<string>(name: "OVERFLOW_FLAG", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    MAXAMOUNT = table.Column<decimal>(name: "MAX_AMOUNT", type: "decimal(18,2)", nullable: true),
                    PROCESSATTEMPT = table.Column<int>(name: "PROCESS_ATTEMPT", type: "int", nullable: true),
                    BILLINGPOSTALCODE = table.Column<string>(name: "BILLING_POSTAL_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    MANUALAUTHCODE = table.Column<string>(name: "MANUAL_AUTH_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    MANUALREFNUM = table.Column<string>(name: "MANUAL_REF_NUM", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    NEEDSNSFRETRY = table.Column<string>(name: "NEEDS_NSF_RETRY", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    CREATEDDATE = table.Column<DateTime>(name: "CREATED_DATE", type: "datetime", nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDDATE = table.Column<DateTime>(name: "LAST_MODIFIED_DATE", type: "datetime", nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_PAYMENT_PREFERENCE", x => x.ORDERPAYMENTPREFERENCEID);
                    table.ForeignKey(
                        name: "ORDER_PMPRF_FINACT",
                        column: x => x.FINACCOUNTID,
                        principalTable: "FIN_ACCOUNT",
                        principalColumn: "FIN_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "ORDER_PMPRF_OHDR",
                        column: x => x.ORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                    table.ForeignKey(
                        name: "ORDER_PMPRF_PMTP",
                        column: x => x.PAYMENTMETHODTYPEID,
                        principalTable: "PAYMENT_METHOD_TYPE",
                        principalColumn: "PAYMENT_METHOD_TYPE_ID");
                    table.ForeignKey(
                        name: "ORDER_PMPRF_PPRP",
                        column: x => x.PRODUCTPRICEPURPOSEID,
                        principalTable: "PRODUCT_PRICE_PURPOSE",
                        principalColumn: "PRODUCT_PRICE_PURPOSE_ID");
                    table.ForeignKey(
                        name: "ORDER_PMPRF_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_PRODUCT_PROMO_CODE",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPROMOCODEID = table.Column<string>(name: "PRODUCT_PROMO_CODE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_PRODUCT_PROMO_CODE", x => new { x.ORDERID, x.PRODUCTPROMOCODEID });
                    table.ForeignKey(
                        name: "ORDER_PPCD_ORD",
                        column: x => x.ORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_REQUIREMENT_COMMITMENT",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    REQUIREMENTID = table.Column<string>(name: "REQUIREMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_REQUIREMENT_COMMITMEN", x => new { x.ORDERID, x.ORDERITEMSEQID, x.REQUIREMENTID });
                    table.ForeignKey(
                        name: "ORDREQ_CMT_OITM",
                        columns: x => new { x.ORDERID, x.ORDERITEMSEQID },
                        principalTable: "ORDER_ITEM",
                        principalColumns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "ORDREQ_CMT_ORD",
                        column: x => x.ORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_ROLE",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_ROLE", x => new { x.ORDERID, x.PARTYID, x.ROLETYPEID });
                    table.ForeignKey(
                        name: "ORDER_ROLE_OHDR",
                        column: x => x.ORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_SHIPMENT",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPGROUPSEQID = table.Column<string>(name: "SHIP_GROUP_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPMENTID = table.Column<string>(name: "SHIPMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPMENTITEMSEQID = table.Column<string>(name: "SHIPMENT_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_SHIPMENT", x => new { x.ORDERID, x.ORDERITEMSEQID, x.SHIPGROUPSEQID, x.SHIPMENTID, x.SHIPMENTITEMSEQID });
                    table.ForeignKey(
                        name: "ORDER_SHPMT_OHDR",
                        column: x => x.ORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_STATUS",
                columns: table => new
                {
                    ORDERSTATUSID = table.Column<string>(name: "ORDER_STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERPAYMENTPREFERENCEID = table.Column<string>(name: "ORDER_PAYMENT_PREFERENCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSDATETIME = table.Column<DateTime>(name: "STATUS_DATETIME", type: "datetime", nullable: true),
                    STATUSUSERLOGIN = table.Column<string>(name: "STATUS_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    CHANGEREASON = table.Column<string>(name: "CHANGE_REASON", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_STATUS", x => x.ORDERSTATUSID);
                    table.ForeignKey(
                        name: "ORDER_STTS_OHDR",
                        column: x => x.ORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                    table.ForeignKey(
                        name: "ORDER_STTS_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "ORDER_SUMMARY_ENTRY",
                columns: table => new
                {
                    ENTRYDATE = table.Column<DateTime>(name: "ENTRY_DATE", type: "datetime", nullable: false),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TOTALQUANTITY = table.Column<decimal>(name: "TOTAL_QUANTITY", type: "decimal(18,6)", nullable: true),
                    GROSSSALES = table.Column<decimal>(name: "GROSS_SALES", type: "decimal(18,2)", nullable: true),
                    PRODUCTCOST = table.Column<decimal>(name: "PRODUCT_COST", type: "decimal(18,2)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ORDER_SUMMARY_ENTRY", x => new { x.ENTRYDATE, x.PRODUCTID, x.FACILITYID });
                    table.ForeignKey(
                        name: "ORDER_SMENT_FAC",
                        column: x => x.FACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYTYPEID = table.Column<string>(name: "PARTY_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    MainRole = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EXTERNALID = table.Column<string>(name: "EXTERNAL_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PREFERREDCURRENCYUOMID = table.Column<string>(name: "PREFERRED_CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CREATEDDATE = table.Column<DateTime>(name: "CREATED_DATE", type: "datetime", nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDDATE = table.Column<DateTime>(name: "LAST_MODIFIED_DATE", type: "datetime", nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    DATASOURCEID = table.Column<string>(name: "DATA_SOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ISUNREAD = table.Column<string>(name: "IS_UNREAD", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY", x => x.PARTYID);
                    table.ForeignKey(
                        name: "PARTY_DATSRC",
                        column: x => x.DATASOURCEID,
                        principalTable: "DATA_SOURCE",
                        principalColumn: "DATA_SOURCE_ID");
                    table.ForeignKey(
                        name: "PARTY_PREF_CRNCY",
                        column: x => x.PREFERREDCURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "PARTY_PTY_TYP",
                        column: x => x.PARTYTYPEID,
                        principalTable: "PARTY_TYPE",
                        principalColumn: "PARTY_TYPE_ID");
                    table.ForeignKey(
                        name: "PARTY_STATUSITM",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_ATTRIBUTE",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_ATTRIBUTE", x => new { x.PARTYID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "PARTY_ATTR",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_CARRIER_ACCOUNT",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CARRIERPARTYID = table.Column<string>(name: "CARRIER_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    ACCOUNTNUMBER = table.Column<string>(name: "ACCOUNT_NUMBER", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_CARRIER_ACCOUNT", x => new { x.PARTYID, x.CARRIERPARTYID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PARTY_CRRACT_CPT",
                        column: x => x.CARRIERPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PARTY_CRRACT_PTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_CLASSIFICATION",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYCLASSIFICATIONGROUPID = table.Column<string>(name: "PARTY_CLASSIFICATION_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_CLASSIFICATION", x => new { x.PARTYID, x.PARTYCLASSIFICATIONGROUPID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PARTY_CLASS_GRP",
                        column: x => x.PARTYCLASSIFICATIONGROUPID,
                        principalTable: "PARTY_CLASSIFICATION_GROUP",
                        principalColumn: "PARTY_CLASSIFICATION_GROUP_ID");
                    table.ForeignKey(
                        name: "PARTY_CLASS_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_CONTACT_MECH_PURPOSE",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTMECHPURPOSETYPEID = table.Column<string>(name: "CONTACT_MECH_PURPOSE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_CONTACT_MECH_PURPOSE", x => new { x.PARTYID, x.CONTACTMECHID, x.CONTACTMECHPURPOSETYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PARTY_CMPRP_CMECH",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "PARTY_CMPRP_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PARTY_CMPRP_TYPE",
                        column: x => x.CONTACTMECHPURPOSETYPEID,
                        principalTable: "CONTACT_MECH_PURPOSE_TYPE",
                        principalColumn: "CONTACT_MECH_PURPOSE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_CONTENT",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYCONTENTTYPEID = table.Column<string>(name: "PARTY_CONTENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_CONTENT", x => new { x.PARTYID, x.CONTENTID, x.PARTYCONTENTTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PARTY_CNT_CNT",
                        column: x => x.CONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "PARTY_CNT_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PARTY_CNT_TYPE",
                        column: x => x.PARTYCONTENTTYPEID,
                        principalTable: "PARTY_CONTENT_TYPE",
                        principalColumn: "PARTY_CONTENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_DATA_SOURCE",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DATASOURCEID = table.Column<string>(name: "DATA_SOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    VISITID = table.Column<string>(name: "VISIT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ISCREATE = table.Column<string>(name: "IS_CREATE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_DATA_SOURCE", x => new { x.PARTYID, x.DATASOURCEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PARTY_DATSRC_DSC",
                        column: x => x.DATASOURCEID,
                        principalTable: "DATA_SOURCE",
                        principalColumn: "DATA_SOURCE_ID");
                    table.ForeignKey(
                        name: "PARTY_DATSRC_PTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_GEO_POINT",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GEOPOINTID = table.Column<string>(name: "GEO_POINT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_GEO_POINT", x => new { x.PARTYID, x.GEOPOINTID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PARTYGEOPT_GEOPT",
                        column: x => x.GEOPOINTID,
                        principalTable: "GEO_POINT",
                        principalColumn: "GEO_POINT_ID");
                    table.ForeignKey(
                        name: "PARTYGEOPT_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_GROUP",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GROUPNAME = table.Column<string>(name: "GROUP_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    GROUPNAMELOCAL = table.Column<string>(name: "GROUP_NAME_LOCAL", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    OFFICESITENAME = table.Column<string>(name: "OFFICE_SITE_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ANNUALREVENUE = table.Column<decimal>(name: "ANNUAL_REVENUE", type: "decimal(18,2)", nullable: true),
                    NUMEMPLOYEES = table.Column<int>(name: "NUM_EMPLOYEES", type: "int", nullable: true),
                    TICKERSYMBOL = table.Column<string>(name: "TICKER_SYMBOL", type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LOGOIMAGEURL = table.Column<string>(name: "LOGO_IMAGE_URL", type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_GROUP", x => x.PARTYID);
                    table.ForeignKey(
                        name: "PARTY_GRP_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_ICS_AVS_OVERRIDE",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    AVSDECLINESTRING = table.Column<string>(name: "AVS_DECLINE_STRING", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_ICS_AVS_OVERRIDE", x => x.PARTYID);
                    table.ForeignKey(
                        name: "PARTY_ICSAVS_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_IDENTIFICATION",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYIDENTIFICATIONTYPEID = table.Column<string>(name: "PARTY_IDENTIFICATION_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    IDVALUE = table.Column<string>(name: "ID_VALUE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_IDENTIFICATION", x => new { x.PARTYID, x.PARTYIDENTIFICATIONTYPEID });
                    table.ForeignKey(
                        name: "PARTY_ID_PRODUCT",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PARTY_ID_TYPE",
                        column: x => x.PARTYIDENTIFICATIONTYPEID,
                        principalTable: "PARTY_IDENTIFICATION_TYPE",
                        principalColumn: "PARTY_IDENTIFICATION_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_INVITATION",
                columns: table => new
                {
                    PARTYINVITATIONID = table.Column<string>(name: "PARTY_INVITATION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYIDFROM = table.Column<string>(name: "PARTY_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TONAME = table.Column<string>(name: "TO_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    EMAILADDRESS = table.Column<string>(name: "EMAIL_ADDRESS", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTINVITEDATE = table.Column<DateTime>(name: "LAST_INVITE_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_INVITATION", x => x.PARTYINVITATIONID);
                    table.ForeignKey(
                        name: "PTYINV_PTY",
                        column: x => x.PARTYIDFROM,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PTYINV_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_NAME_HISTORY",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CHANGEDATE = table.Column<DateTime>(name: "CHANGE_DATE", type: "datetime", nullable: false),
                    GROUPNAME = table.Column<string>(name: "GROUP_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FIRSTNAME = table.Column<string>(name: "FIRST_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    MIDDLENAME = table.Column<string>(name: "MIDDLE_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LASTNAME = table.Column<string>(name: "LAST_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PERSONALTITLE = table.Column<string>(name: "PERSONAL_TITLE", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SUFFIX = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_NAME_HISTORY", x => new { x.PARTYID, x.CHANGEDATE });
                    table.ForeignKey(
                        name: "PTY_NMHIS_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_NOTE",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    NOTEID = table.Column<string>(name: "NOTE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_NOTE", x => new { x.PARTYID, x.NOTEID });
                    table.ForeignKey(
                        name: "PARTY_NOTE_NOTE",
                        column: x => x.NOTEID,
                        principalTable: "NOTE_DATA",
                        principalColumn: "NOTE_ID");
                    table.ForeignKey(
                        name: "PARTY_NOTE_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_QUAL",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYQUALTYPEID = table.Column<string>(name: "PARTY_QUAL_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    QUALIFICATIONDESC = table.Column<string>(name: "QUALIFICATION_DESC", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    TITLE = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    VERIFSTATUSID = table.Column<string>(name: "VERIF_STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_QUAL", x => new { x.PARTYID, x.PARTYQUALTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PARTY_QUAL_PQTYP",
                        column: x => x.PARTYQUALTYPEID,
                        principalTable: "PARTY_QUAL_TYPE",
                        principalColumn: "PARTY_QUAL_TYPE_ID");
                    table.ForeignKey(
                        name: "PARTY_QUAL_PRTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PARTY_QUAL_STATUS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "PARTY_QUAL_VERIF",
                        column: x => x.VERIFSTATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_RATE_NEW",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    RATETYPEID = table.Column<string>(name: "RATE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    DEFAULTRATE = table.Column<string>(name: "DEFAULT_RATE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    PERCENTAGEUSED = table.Column<double>(name: "PERCENTAGE_USED", type: "float", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_RATE_NEW", x => new { x.PARTYID, x.RATETYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PRTY_RATE_PRTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PRTY_RATE_RTTP",
                        column: x => x.RATETYPEID,
                        principalTable: "RATE_TYPE",
                        principalColumn: "RATE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_RESUME",
                columns: table => new
                {
                    RESUMEID = table.Column<string>(name: "RESUME_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RESUMEDATE = table.Column<DateTime>(name: "RESUME_DATE", type: "datetime", nullable: true),
                    RESUMETEXT = table.Column<string>(name: "RESUME_TEXT", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_RESUME", x => x.RESUMEID);
                    table.ForeignKey(
                        name: "PARTY_RSME_PRTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_ROLE",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_ROLE", x => new { x.PARTYID, x.ROLETYPEID });
                    table.ForeignKey(
                        name: "PARTY_RLE_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PARTY_RLE_ROLE",
                        column: x => x.ROLETYPEID,
                        principalTable: "ROLE_TYPE",
                        principalColumn: "ROLE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_SKILL",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SKILLTYPEID = table.Column<string>(name: "SKILL_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    YEARSEXPERIENCE = table.Column<int>(name: "YEARS_EXPERIENCE", type: "int", nullable: true),
                    RATING = table.Column<int>(type: "int", nullable: true),
                    SKILLLEVEL = table.Column<int>(name: "SKILL_LEVEL", type: "int", nullable: true),
                    STARTEDUSINGDATE = table.Column<DateTime>(name: "STARTED_USING_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_SKILL", x => new { x.PARTYID, x.SKILLTYPEID });
                    table.ForeignKey(
                        name: "PARTY_SKLL_PRTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PARTY_SKLL_SKTP",
                        column: x => x.SKILLTYPEID,
                        principalTable: "SKILL_TYPE",
                        principalColumn: "SKILL_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_GL_ACCOUNT_TYPE_MAP",
                columns: table => new
                {
                    PAYMENTTYPEID = table.Column<string>(name: "PAYMENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORGANIZATIONPARTYID = table.Column<string>(name: "ORGANIZATION_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GLACCOUNTTYPEID = table.Column<string>(name: "GL_ACCOUNT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_GL_ACCOUNT_TYPE_MAP", x => new { x.PAYMENTTYPEID, x.ORGANIZATIONPARTYID });
                    table.ForeignKey(
                        name: "PMTGLACCT_GLACCT",
                        column: x => x.GLACCOUNTTYPEID,
                        principalTable: "GL_ACCOUNT_TYPE",
                        principalColumn: "GL_ACCOUNT_TYPE_ID");
                    table.ForeignKey(
                        name: "PMTGLACCT_PARTY",
                        column: x => x.ORGANIZATIONPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PMTGLACCT_PMTTYPE",
                        column: x => x.PAYMENTTYPEID,
                        principalTable: "PAYMENT_TYPE",
                        principalColumn: "PAYMENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_METHOD",
                columns: table => new
                {
                    PAYMENTMETHODID = table.Column<string>(name: "PAYMENT_METHOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PAYMENTMETHODTYPEID = table.Column<string>(name: "PAYMENT_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    GLACCOUNTID = table.Column<string>(name: "GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FINACCOUNTID = table.Column<string>(name: "FIN_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_METHOD", x => x.PAYMENTMETHODID);
                    table.ForeignKey(
                        name: "PAYMETH_FINACCT",
                        column: x => x.FINACCOUNTID,
                        principalTable: "FIN_ACCOUNT",
                        principalColumn: "FIN_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "PAYMETH_GLACCT",
                        column: x => x.GLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "PAYMETH_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PAYMETH_TYPE",
                        column: x => x.PAYMENTMETHODTYPEID,
                        principalTable: "PAYMENT_METHOD_TYPE",
                        principalColumn: "PAYMENT_METHOD_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_METHOD_TYPE_GL_ACCOUNT",
                columns: table => new
                {
                    PAYMENTMETHODTYPEID = table.Column<string>(name: "PAYMENT_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORGANIZATIONPARTYID = table.Column<string>(name: "ORGANIZATION_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GLACCOUNTID = table.Column<string>(name: "GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_METHOD_TYPE_GL_ACCO", x => new { x.PAYMENTMETHODTYPEID, x.ORGANIZATIONPARTYID });
                    table.ForeignKey(
                        name: "PAYMENT_MTGA_GLAC",
                        column: x => x.GLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "PAYMENT_MTGA_OPTY",
                        column: x => x.ORGANIZATIONPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PAYMENT_MTGA_PMT",
                        column: x => x.PAYMENTMETHODTYPEID,
                        principalTable: "PAYMENT_METHOD_TYPE",
                        principalColumn: "PAYMENT_METHOD_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PERSON",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SALUTATION = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FIRSTNAME = table.Column<string>(name: "FIRST_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    MIDDLENAME = table.Column<string>(name: "MIDDLE_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LASTNAME = table.Column<string>(name: "LAST_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PERSONALTITLE = table.Column<string>(name: "PERSONAL_TITLE", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SUFFIX = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    NICKNAME = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FIRSTNAMELOCAL = table.Column<string>(name: "FIRST_NAME_LOCAL", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    MIDDLENAMELOCAL = table.Column<string>(name: "MIDDLE_NAME_LOCAL", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LASTNAMELOCAL = table.Column<string>(name: "LAST_NAME_LOCAL", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    OTHERLOCAL = table.Column<string>(name: "OTHER_LOCAL", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    MEMBERID = table.Column<string>(name: "MEMBER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    GENDER = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    BIRTHDATE = table.Column<DateTime>(name: "BIRTH_DATE", type: "datetime", nullable: true),
                    DECEASEDDATE = table.Column<DateTime>(name: "DECEASED_DATE", type: "datetime", nullable: true),
                    HEIGHT = table.Column<double>(type: "float", nullable: true),
                    WEIGHT = table.Column<double>(type: "float", nullable: true),
                    MOTHERSMAIDENNAME = table.Column<string>(name: "MOTHERS_MAIDEN_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    MARITALSTATUS = table.Column<string>(name: "MARITAL_STATUS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    MARITALSTATUSENUMID = table.Column<string>(name: "MARITAL_STATUS_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SOCIALSECURITYNUMBER = table.Column<string>(name: "SOCIAL_SECURITY_NUMBER", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PASSPORTNUMBER = table.Column<string>(name: "PASSPORT_NUMBER", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PASSPORTEXPIREDATE = table.Column<DateTime>(name: "PASSPORT_EXPIRE_DATE", type: "datetime", nullable: true),
                    TOTALYEARSWORKEXPERIENCE = table.Column<double>(name: "TOTAL_YEARS_WORK_EXPERIENCE", type: "float", nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    EMPLOYMENTSTATUSENUMID = table.Column<string>(name: "EMPLOYMENT_STATUS_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RESIDENCESTATUSENUMID = table.Column<string>(name: "RESIDENCE_STATUS_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    OCCUPATION = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    YEARSWITHEMPLOYER = table.Column<int>(name: "YEARS_WITH_EMPLOYER", type: "int", nullable: true),
                    MONTHSWITHEMPLOYER = table.Column<int>(name: "MONTHS_WITH_EMPLOYER", type: "int", nullable: true),
                    EXISTINGCUSTOMER = table.Column<string>(name: "EXISTING_CUSTOMER", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    CARDID = table.Column<string>(name: "CARD_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PERSON", x => x.PARTYID);
                    table.ForeignKey(
                        name: "PERSON_EMPS_ENUM",
                        column: x => x.EMPLOYMENTSTATUSENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "PERSON_MARITAL",
                        column: x => x.MARITALSTATUSENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "PERSON_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PERSON_RESS_ENUM",
                        column: x => x.RESIDENCESTATUSENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_CATEGORY_GL_ACCOUNT",
                columns: table => new
                {
                    PRODUCTCATEGORYID = table.Column<string>(name: "PRODUCT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORGANIZATIONPARTYID = table.Column<string>(name: "ORGANIZATION_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GLACCOUNTTYPEID = table.Column<string>(name: "GL_ACCOUNT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GLACCOUNTID = table.Column<string>(name: "GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_CATEGORY_GL_ACCOUNT", x => new { x.PRODUCTCATEGORYID, x.ORGANIZATIONPARTYID, x.GLACCOUNTTYPEID });
                    table.ForeignKey(
                        name: "PRD_CT_GLACT_GLACT",
                        column: x => x.GLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "PRD_CT_GLACT_PCAT",
                        column: x => x.PRODUCTCATEGORYID,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "PRD_CT_GLACT_PRTY",
                        column: x => x.ORGANIZATIONPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PRD_CT_GLACT_TYPE",
                        column: x => x.GLACCOUNTTYPEID,
                        principalTable: "GL_ACCOUNT_TYPE",
                        principalColumn: "GL_ACCOUNT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "RATE_AMOUNT",
                columns: table => new
                {
                    RATETYPEID = table.Column<string>(name: "RATE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    RATECURRENCYUOMID = table.Column<string>(name: "RATE_CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PERIODTYPEID = table.Column<string>(name: "PERIOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    EMPLPOSITIONTYPEID = table.Column<string>(name: "EMPL_POSITION_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    RATEAMOUNT = table.Column<decimal>(name: "RATE_AMOUNT", type: "decimal(18,2)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RATE_AMOUNT", x => new { x.RATETYPEID, x.RATECURRENCYUOMID, x.PERIODTYPEID, x.PARTYID, x.WORKEFFORTID, x.EMPLPOSITIONTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "RATE_AMOUNT_EPT",
                        column: x => x.EMPLPOSITIONTYPEID,
                        principalTable: "EMPL_POSITION_TYPE",
                        principalColumn: "EMPL_POSITION_TYPE_ID");
                    table.ForeignKey(
                        name: "RATE_AMOUNT_PT",
                        column: x => x.PERIODTYPEID,
                        principalTable: "PERIOD_TYPE",
                        principalColumn: "PERIOD_TYPE_ID");
                    table.ForeignKey(
                        name: "RATE_AMOUNT_PTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "RATE_AMOUNT_RCT",
                        column: x => x.RATECURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "RATE_AMOUNT_RT",
                        column: x => x.RATETYPEID,
                        principalTable: "RATE_TYPE",
                        principalColumn: "RATE_TYPE_ID");
                    table.ForeignKey(
                        name: "RATE_AMOUNT_WE",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "RESPONDING_PARTY",
                columns: table => new
                {
                    RESPONDINGPARTYSEQID = table.Column<string>(name: "RESPONDING_PARTY_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CUSTREQUESTID = table.Column<string>(name: "CUST_REQUEST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DATESENT = table.Column<DateTime>(name: "DATE_SENT", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RESPONDING_PARTY", x => new { x.RESPONDINGPARTYSEQID, x.CUSTREQUESTID, x.PARTYID });
                    table.ForeignKey(
                        name: "RESP_PTY_CMECH",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "RESP_PTY_CSREQ",
                        column: x => x.CUSTREQUESTID,
                        principalTable: "CUST_REQUEST",
                        principalColumn: "CUST_REQUEST_ID");
                    table.ForeignKey(
                        name: "RESP_PTY_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT_COST_ESTIMATE",
                columns: table => new
                {
                    SHIPMENTCOSTESTIMATEID = table.Column<string>(name: "SHIPMENT_COST_ESTIMATE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPMENTMETHODTYPEID = table.Column<string>(name: "SHIPMENT_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CARRIERPARTYID = table.Column<string>(name: "CARRIER_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CARRIERROLETYPEID = table.Column<string>(name: "CARRIER_ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTSTORESHIPMETHID = table.Column<string>(name: "PRODUCT_STORE_SHIP_METH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    GEOIDTO = table.Column<string>(name: "GEO_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    GEOIDFROM = table.Column<string>(name: "GEO_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    WEIGHTBREAKID = table.Column<string>(name: "WEIGHT_BREAK_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    WEIGHTUOMID = table.Column<string>(name: "WEIGHT_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    WEIGHTUNITPRICE = table.Column<decimal>(name: "WEIGHT_UNIT_PRICE", type: "decimal(18,2)", nullable: true),
                    QUANTITYBREAKID = table.Column<string>(name: "QUANTITY_BREAK_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUANTITYUOMID = table.Column<string>(name: "QUANTITY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUANTITYUNITPRICE = table.Column<decimal>(name: "QUANTITY_UNIT_PRICE", type: "decimal(18,2)", nullable: true),
                    PRICEBREAKID = table.Column<string>(name: "PRICE_BREAK_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRICEUOMID = table.Column<string>(name: "PRICE_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRICEUNITPRICE = table.Column<decimal>(name: "PRICE_UNIT_PRICE", type: "decimal(18,2)", nullable: true),
                    ORDERFLATPRICE = table.Column<decimal>(name: "ORDER_FLAT_PRICE", type: "decimal(18,2)", nullable: true),
                    ORDERPRICEPERCENT = table.Column<decimal>(name: "ORDER_PRICE_PERCENT", type: "decimal(18,6)", nullable: true),
                    ORDERITEMFLATPRICE = table.Column<decimal>(name: "ORDER_ITEM_FLAT_PRICE", type: "decimal(18,2)", nullable: true),
                    SHIPPINGPRICEPERCENT = table.Column<decimal>(name: "SHIPPING_PRICE_PERCENT", type: "decimal(18,6)", nullable: true),
                    PRODUCTFEATUREGROUPID = table.Column<string>(name: "PRODUCT_FEATURE_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    OVERSIZEUNIT = table.Column<decimal>(name: "OVERSIZE_UNIT", type: "decimal(18,6)", nullable: true),
                    OVERSIZEPRICE = table.Column<decimal>(name: "OVERSIZE_PRICE", type: "decimal(18,2)", nullable: true),
                    FEATUREPERCENT = table.Column<decimal>(name: "FEATURE_PERCENT", type: "decimal(18,6)", nullable: true),
                    FEATUREPRICE = table.Column<decimal>(name: "FEATURE_PRICE", type: "decimal(18,2)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT_COST_ESTIMATE", x => x.SHIPMENTCOSTESTIMATEID);
                    table.ForeignKey(
                        name: "SHPMNT_CE_CSHMTH",
                        columns: x => new { x.SHIPMENTMETHODTYPEID, x.CARRIERPARTYID, x.CARRIERROLETYPEID },
                        principalTable: "CARRIER_SHIPMENT_METHOD",
                        principalColumns: new[] { "SHIPMENT_METHOD_TYPE_ID", "PARTY_ID", "ROLE_TYPE_ID" });
                    table.ForeignKey(
                        name: "SHPMNT_CE_FGEO",
                        column: x => x.GEOIDFROM,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "SHPMNT_CE_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "SHPMNT_CE_PRC_QB",
                        column: x => x.PRICEBREAKID,
                        principalTable: "QUANTITY_BREAK",
                        principalColumn: "QUANTITY_BREAK_ID");
                    table.ForeignKey(
                        name: "SHPMNT_CE_PUOM",
                        column: x => x.PRICEUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "SHPMNT_CE_QNT_QB",
                        column: x => x.QUANTITYBREAKID,
                        principalTable: "QUANTITY_BREAK",
                        principalColumn: "QUANTITY_BREAK_ID");
                    table.ForeignKey(
                        name: "SHPMNT_CE_QUOM",
                        column: x => x.QUANTITYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "SHPMNT_CE_ROLET",
                        column: x => x.ROLETYPEID,
                        principalTable: "ROLE_TYPE",
                        principalColumn: "ROLE_TYPE_ID");
                    table.ForeignKey(
                        name: "SHPMNT_CE_TGEO",
                        column: x => x.GEOIDTO,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "SHPMNT_CE_WHT_QB",
                        column: x => x.WEIGHTBREAKID,
                        principalTable: "QUANTITY_BREAK",
                        principalColumn: "QUANTITY_BREAK_ID");
                    table.ForeignKey(
                        name: "SHPMNT_CE_WUOM",
                        column: x => x.WEIGHTUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "SHPMNT_PS_SH_METH",
                        column: x => x.PRODUCTSTORESHIPMETHID,
                        principalTable: "PRODUCT_STORE_SHIPMENT_METH",
                        principalColumn: "PRODUCT_STORE_SHIP_METH_ID");
                });

            migrationBuilder.CreateTable(
                name: "SUPPLIER_PRODUCT_FEATURE",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTFEATUREID = table.Column<string>(name: "PRODUCT_FEATURE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    UOMID = table.Column<string>(name: "UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    IDCODE = table.Column<string>(name: "ID_CODE", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SUPPLIER_PRODUCT_FEATURE", x => new { x.PARTYID, x.PRODUCTFEATUREID });
                    table.ForeignKey(
                        name: "SUPPL_FEAT_FEAT",
                        column: x => x.PRODUCTFEATUREID,
                        principalTable: "PRODUCT_FEATURE",
                        principalColumn: "PRODUCT_FEATURE_ID");
                    table.ForeignKey(
                        name: "SUPPL_FEAT_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "SUPPL_FEAT_UOM",
                        column: x => x.UOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                });

            migrationBuilder.CreateTable(
                name: "TAX_AUTHORITY",
                columns: table => new
                {
                    TAXAUTHGEOID = table.Column<string>(name: "TAX_AUTH_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TAXAUTHPARTYID = table.Column<string>(name: "TAX_AUTH_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    REQUIRETAXIDFOREXEMPTION = table.Column<string>(name: "REQUIRE_TAX_ID_FOR_EXEMPTION", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    TAXIDFORMATPATTERN = table.Column<string>(name: "TAX_ID_FORMAT_PATTERN", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    INCLUDETAXINPRICE = table.Column<string>(name: "INCLUDE_TAX_IN_PRICE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TAX_AUTHORITY", x => new { x.TAXAUTHGEOID, x.TAXAUTHPARTYID });
                    table.ForeignKey(
                        name: "TAXAUTH_TAGEO",
                        column: x => x.TAXAUTHGEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "TAXAUTH_TAPARTY",
                        column: x => x.TAXAUTHPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                });

            migrationBuilder.CreateTable(
                name: "USER_LOGIN",
                columns: table => new
                {
                    USERLOGINID = table.Column<string>(name: "USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    CURRENTPASSWORD = table.Column<string>(name: "CURRENT_PASSWORD", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PASSWORDHINT = table.Column<string>(name: "PASSWORD_HINT", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ISSYSTEM = table.Column<string>(name: "IS_SYSTEM", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ENABLED = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    HASLOGGEDOUT = table.Column<string>(name: "HAS_LOGGED_OUT", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    REQUIREPASSWORDCHANGE = table.Column<string>(name: "REQUIRE_PASSWORD_CHANGE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTCURRENCYUOM = table.Column<string>(name: "LAST_CURRENCY_UOM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTLOCALE = table.Column<string>(name: "LAST_LOCALE", type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    LASTTIMEZONE = table.Column<string>(name: "LAST_TIME_ZONE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    DISABLEDDATETIME = table.Column<DateTime>(name: "DISABLED_DATE_TIME", type: "datetime", nullable: true),
                    SUCCESSIVEFAILEDLOGINS = table.Column<int>(name: "SUCCESSIVE_FAILED_LOGINS", type: "int", nullable: true),
                    EXTERNALAUTHID = table.Column<string>(name: "EXTERNAL_AUTH_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    USERLDAPDN = table.Column<string>(name: "USER_LDAP_DN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    DISABLEDBY = table.Column<string>(name: "DISABLED_BY", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_USER_LOGIN", x => x.USERLOGINID);
                    table.ForeignKey(
                        name: "USER_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                });

            migrationBuilder.CreateTable(
                name: "VARIANCE_REASON_GL_ACCOUNT",
                columns: table => new
                {
                    VARIANCEREASONID = table.Column<string>(name: "VARIANCE_REASON_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORGANIZATIONPARTYID = table.Column<string>(name: "ORGANIZATION_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GLACCOUNTID = table.Column<string>(name: "GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VARIANCE_REASON_GL_ACCOUNT", x => new { x.VARIANCEREASONID, x.ORGANIZATIONPARTYID });
                    table.ForeignKey(
                        name: "VRGL_GLACCT",
                        column: x => x.GLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "VRGL_PARTY",
                        column: x => x.ORGANIZATIONPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "VRGL_VREAS",
                        column: x => x.VARIANCEREASONID,
                        principalTable: "VARIANCE_REASON",
                        principalColumn: "VARIANCE_REASON_ID");
                });

            migrationBuilder.CreateTable(
                name: "VEHICLES",
                columns: table => new
                {
                    VEHICLEID = table.Column<string>(name: "VEHICLE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ChassisNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Vin = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Year = table.Column<int>(type: "int", nullable: true),
                    PlateNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FromPartyId = table.Column<string>(type: "varchar(36)", nullable: true),
                    MakeId = table.Column<string>(type: "varchar(36)", nullable: false),
                    ModelId = table.Column<string>(type: "varchar(36)", nullable: false),
                    VehicleTypeId = table.Column<string>(type: "varchar(36)", nullable: false),
                    TransmissionTypeId = table.Column<string>(type: "varchar(36)", nullable: false),
                    ExteriorColorId = table.Column<string>(type: "varchar(36)", nullable: false),
                    InteriorColorId = table.Column<string>(type: "varchar(36)", nullable: false),
                    ServiceDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    Mileage = table.Column<int>(type: "int", nullable: false),
                    NextServiceDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LastUpdatedStamp = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CreatedStamp = table.Column<DateTime>(type: "datetime2", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VEHICLES", x => x.VEHICLEID);
                    table.ForeignKey(
                        name: "FK_VEHICLES_PARTY_FromPartyId",
                        column: x => x.FromPartyId,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "FK_VEHICLES_PRODUCT_CATEGORY_ExteriorColorId",
                        column: x => x.ExteriorColorId,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "FK_VEHICLES_PRODUCT_CATEGORY_InteriorColorId",
                        column: x => x.InteriorColorId,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "FK_VEHICLES_PRODUCT_CATEGORY_MakeId",
                        column: x => x.MakeId,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "FK_VEHICLES_PRODUCT_CATEGORY_ModelId",
                        column: x => x.ModelId,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "FK_VEHICLES_PRODUCT_CATEGORY_TransmissionTypeId",
                        column: x => x.TransmissionTypeId,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "FK_VEHICLES_PRODUCT_CATEGORY_VehicleTypeId",
                        column: x => x.VehicleTypeId,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                });

            migrationBuilder.CreateTable(
                name: "VENDOR",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    MANIFESTCOMPANYNAME = table.Column<string>(name: "MANIFEST_COMPANY_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    MANIFESTCOMPANYTITLE = table.Column<string>(name: "MANIFEST_COMPANY_TITLE", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    MANIFESTLOGOURL = table.Column<string>(name: "MANIFEST_LOGO_URL", type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    MANIFESTPOLICIES = table.Column<string>(name: "MANIFEST_POLICIES", type: "text", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VENDOR", x => x.PARTYID);
                    table.ForeignKey(
                        name: "VENDOR_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_EVENT_REMINDER",
                columns: table => new
                {
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SEQUENCEID = table.Column<string>(name: "SEQUENCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    REMINDERDATETIME = table.Column<DateTime>(name: "REMINDER_DATE_TIME", type: "datetime", nullable: true),
                    REPEATCOUNT = table.Column<int>(name: "REPEAT_COUNT", type: "int", nullable: true),
                    REPEATINTERVAL = table.Column<int>(name: "REPEAT_INTERVAL", type: "int", nullable: true),
                    CURRENTCOUNT = table.Column<int>(name: "CURRENT_COUNT", type: "int", nullable: true),
                    REMINDEROFFSET = table.Column<int>(name: "REMINDER_OFFSET", type: "int", nullable: true),
                    LOCALEID = table.Column<string>(name: "LOCALE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TIMEZONEID = table.Column<string>(name: "TIME_ZONE_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_EVENT_REMINDER", x => new { x.WORKEFFORTID, x.SEQUENCEID });
                    table.ForeignKey(
                        name: "WE_EVENT_REMIND_CM",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "WE_EVENT_REMIND_PY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "WE_EVENT_REMIND_WE",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_INVITATION_GROUP_ASSOC",
                columns: table => new
                {
                    PARTYINVITATIONID = table.Column<string>(name: "PARTY_INVITATION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYIDTO = table.Column<string>(name: "PARTY_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_INVITATION_GROUP_ASSO", x => new { x.PARTYINVITATIONID, x.PARTYIDTO });
                    table.ForeignKey(
                        name: "PTYINVGA_PTYGRP",
                        column: x => x.PARTYIDTO,
                        principalTable: "PARTY_GROUP",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PTYINVGA_PTYINV",
                        column: x => x.PARTYINVITATIONID,
                        principalTable: "PARTY_INVITATION",
                        principalColumn: "PARTY_INVITATION_ID");
                    table.ForeignKey(
                        name: "PTYINVGA_PTYTO",
                        column: x => x.PARTYIDTO,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_INVITATION_ROLE_ASSOC",
                columns: table => new
                {
                    PARTYINVITATIONID = table.Column<string>(name: "PARTY_INVITATION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_INVITATION_ROLE_ASSOC", x => new { x.PARTYINVITATIONID, x.ROLETYPEID });
                    table.ForeignKey(
                        name: "PTYINVROLE_PTYINV",
                        column: x => x.PARTYINVITATIONID,
                        principalTable: "PARTY_INVITATION",
                        principalColumn: "PARTY_INVITATION_ID");
                    table.ForeignKey(
                        name: "PTYINVROLE_ROLET",
                        column: x => x.ROLETYPEID,
                        principalTable: "ROLE_TYPE",
                        principalColumn: "ROLE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_BENEFIT",
                columns: table => new
                {
                    ROLETYPEIDFROM = table.Column<string>(name: "ROLE_TYPE_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEIDTO = table.Column<string>(name: "ROLE_TYPE_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYIDFROM = table.Column<string>(name: "PARTY_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYIDTO = table.Column<string>(name: "PARTY_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    BENEFITTYPEID = table.Column<string>(name: "BENEFIT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    PERIODTYPEID = table.Column<string>(name: "PERIOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    COST = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    ACTUALEMPLOYERPAIDPERCENT = table.Column<double>(name: "ACTUAL_EMPLOYER_PAID_PERCENT", type: "float", nullable: true),
                    AVAILABLETIME = table.Column<int>(name: "AVAILABLE_TIME", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_BENEFIT", x => new { x.ROLETYPEIDFROM, x.ROLETYPEIDTO, x.PARTYIDFROM, x.PARTYIDTO, x.BENEFITTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PTY_BNFT_BNFTTP",
                        column: x => x.BENEFITTYPEID,
                        principalTable: "BENEFIT_TYPE",
                        principalColumn: "BENEFIT_TYPE_ID");
                    table.ForeignKey(
                        name: "PTY_BNFT_FPTRL",
                        columns: x => new { x.PARTYIDFROM, x.ROLETYPEIDFROM },
                        principalTable: "PARTY_ROLE",
                        principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });
                    table.ForeignKey(
                        name: "PTY_BNFT_FPTY",
                        column: x => x.PARTYIDFROM,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PTY_BNFT_TPTRL",
                        columns: x => new { x.PARTYIDTO, x.ROLETYPEIDTO },
                        principalTable: "PARTY_ROLE",
                        principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });
                    table.ForeignKey(
                        name: "PTY_BNFT_TPTY",
                        column: x => x.PARTYIDTO,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_CONTACT_MECH",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ALLOWSOLICITATION = table.Column<string>(name: "ALLOW_SOLICITATION", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    EXTENSION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    VERIFIED = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    YEARSWITHCONTACTMECH = table.Column<int>(name: "YEARS_WITH_CONTACT_MECH", type: "int", nullable: true),
                    MONTHSWITHCONTACTMECH = table.Column<int>(name: "MONTHS_WITH_CONTACT_MECH", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_CONTACT_MECH", x => new { x.PARTYID, x.CONTACTMECHID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PARTY_CMECH_CMECH",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "PARTY_CMECH_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PARTY_CMECH_PROLE",
                        columns: x => new { x.PARTYID, x.ROLETYPEID },
                        principalTable: "PARTY_ROLE",
                        principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });
                    table.ForeignKey(
                        name: "PARTY_CMECH_ROLE",
                        column: x => x.ROLETYPEID,
                        principalTable: "ROLE_TYPE",
                        principalColumn: "ROLE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_FIXED_ASSET_ASSIGNMENT",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FIXEDASSETID = table.Column<string>(name: "FIXED_ASSET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    ALLOCATEDDATE = table.Column<DateTime>(name: "ALLOCATED_DATE", type: "datetime", nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_FIXED_ASSET_ASSIGNMEN", x => new { x.PARTYID, x.ROLETYPEID, x.FIXEDASSETID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PTY_FASTAS_FA",
                        column: x => x.FIXEDASSETID,
                        principalTable: "FIXED_ASSET",
                        principalColumn: "FIXED_ASSET_ID");
                    table.ForeignKey(
                        name: "PTY_FASTAS_PTRL",
                        columns: x => new { x.PARTYID, x.ROLETYPEID },
                        principalTable: "PARTY_ROLE",
                        principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });
                    table.ForeignKey(
                        name: "PTY_FASTAS_SI",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_GL_ACCOUNT",
                columns: table => new
                {
                    ORGANIZATIONPARTYID = table.Column<string>(name: "ORGANIZATION_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GLACCOUNTTYPEID = table.Column<string>(name: "GL_ACCOUNT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GLACCOUNTID = table.Column<string>(name: "GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_GL_ACCOUNT", x => new { x.ORGANIZATIONPARTYID, x.PARTYID, x.ROLETYPEID, x.GLACCOUNTTYPEID });
                    table.ForeignKey(
                        name: "PRTYGLACCT_GLACCT",
                        column: x => x.GLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "PRTYGLACCT_GLAT",
                        column: x => x.GLACCOUNTTYPEID,
                        principalTable: "GL_ACCOUNT_TYPE",
                        principalColumn: "GL_ACCOUNT_TYPE_ID");
                    table.ForeignKey(
                        name: "PRTYGLACCT_ORGPRTY",
                        column: x => x.ORGANIZATIONPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PRTYGLACCT_PRTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PRTYGLACCT_PTRL",
                        columns: x => new { x.PARTYID, x.ROLETYPEID },
                        principalTable: "PARTY_ROLE",
                        principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });
                });

            migrationBuilder.CreateTable(
                name: "PARTY_RELATIONSHIP",
                columns: table => new
                {
                    PARTYIDFROM = table.Column<string>(name: "PARTY_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYIDTO = table.Column<string>(name: "PARTY_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEIDFROM = table.Column<string>(name: "ROLE_TYPE_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEIDTO = table.Column<string>(name: "ROLE_TYPE_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RELATIONSHIPNAME = table.Column<string>(name: "RELATIONSHIP_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SECURITYGROUPID = table.Column<string>(name: "SECURITY_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRIORITYTYPEID = table.Column<string>(name: "PRIORITY_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYRELATIONSHIPTYPEID = table.Column<string>(name: "PARTY_RELATIONSHIP_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PERMISSIONSENUMID = table.Column<string>(name: "PERMISSIONS_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    POSITIONTITLE = table.Column<string>(name: "POSITION_TITLE", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_RELATIONSHIP", x => new { x.PARTYIDFROM, x.PARTYIDTO, x.ROLETYPEIDFROM, x.ROLETYPEIDTO, x.FROMDATE });
                    table.ForeignKey(
                        name: "PARTY_REL_FPROLE",
                        columns: x => new { x.PARTYIDFROM, x.ROLETYPEIDFROM },
                        principalTable: "PARTY_ROLE",
                        principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });
                    table.ForeignKey(
                        name: "PARTY_REL_PRTYP",
                        column: x => x.PRIORITYTYPEID,
                        principalTable: "PRIORITY_TYPE",
                        principalColumn: "PRIORITY_TYPE_ID");
                    table.ForeignKey(
                        name: "PARTY_REL_SECGRP",
                        column: x => x.SECURITYGROUPID,
                        principalTable: "SECURITY_GROUP",
                        principalColumn: "GROUP_ID");
                    table.ForeignKey(
                        name: "PARTY_REL_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "PARTY_REL_TPROLE",
                        columns: x => new { x.PARTYIDTO, x.ROLETYPEIDTO },
                        principalTable: "PARTY_ROLE",
                        principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });
                    table.ForeignKey(
                        name: "PARTY_REL_TYPE",
                        column: x => x.PARTYRELATIONSHIPTYPEID,
                        principalTable: "PARTY_RELATIONSHIP_TYPE",
                        principalColumn: "PARTY_RELATIONSHIP_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYROLL_PREFERENCE",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PAYROLLPREFERENCESEQID = table.Column<string>(name: "PAYROLL_PREFERENCE_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DEDUCTIONTYPEID = table.Column<string>(name: "DEDUCTION_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PAYMENTMETHODTYPEID = table.Column<string>(name: "PAYMENT_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PERIODTYPEID = table.Column<string>(name: "PERIOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    PERCENTAGE = table.Column<double>(type: "float", nullable: true),
                    FLATAMOUNT = table.Column<decimal>(name: "FLAT_AMOUNT", type: "decimal(18,2)", nullable: true),
                    ROUTINGNUMBER = table.Column<string>(name: "ROUTING_NUMBER", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    ACCOUNTNUMBER = table.Column<string>(name: "ACCOUNT_NUMBER", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    BANKNAME = table.Column<string>(name: "BANK_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYROLL_PREFERENCE", x => new { x.PARTYID, x.ROLETYPEID, x.PAYROLLPREFERENCESEQID });
                    table.ForeignKey(
                        name: "PRL_PREF_PRTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PRL_PREF_PTRL",
                        columns: x => new { x.PARTYID, x.ROLETYPEID },
                        principalTable: "PARTY_ROLE",
                        principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });
                });

            migrationBuilder.CreateTable(
                name: "PERFORMANCE_NOTE",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    COMMUNICATIONDATE = table.Column<DateTime>(name: "COMMUNICATION_DATE", type: "datetime", nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PERFORMANCE_NOTE", x => new { x.PARTYID, x.ROLETYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PERF_NOTE_PRLE",
                        columns: x => new { x.PARTYID, x.ROLETYPEID },
                        principalTable: "PARTY_ROLE",
                        principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });
                    table.ForeignKey(
                        name: "PERF_NOTE_PRTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                });

            migrationBuilder.CreateTable(
                name: "PROD_CATALOG_ROLE",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODCATALOGID = table.Column<string>(name: "PROD_CATALOG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PROD_CATALOG_ROLE", x => new { x.PARTYID, x.ROLETYPEID, x.PRODCATALOGID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PCATRLE_CATALOG",
                        column: x => x.PRODCATALOGID,
                        principalTable: "PROD_CATALOG",
                        principalColumn: "PROD_CATALOG_ID");
                    table.ForeignKey(
                        name: "PCATRLE_PTYRLE",
                        columns: x => new { x.PARTYID, x.ROLETYPEID },
                        principalTable: "PARTY_ROLE",
                        principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_CATEGORY_ROLE",
                columns: table => new
                {
                    PRODUCTCATEGORYID = table.Column<string>(name: "PRODUCT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_CATEGORY_ROLE", x => new { x.PRODUCTCATEGORYID, x.PARTYID, x.ROLETYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PROD_CRLE_CATEGORY",
                        column: x => x.PRODUCTCATEGORYID,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "PROD_CRLE_PTYRLE",
                        columns: x => new { x.PARTYID, x.ROLETYPEID },
                        principalTable: "PARTY_ROLE",
                        principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_STORE_GROUP_ROLE",
                columns: table => new
                {
                    PRODUCTSTOREGROUPID = table.Column<string>(name: "PRODUCT_STORE_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_STORE_GROUP_ROLE", x => new { x.PRODUCTSTOREGROUPID, x.PARTYID, x.ROLETYPEID });
                    table.ForeignKey(
                        name: "PSGRP_RLE_PSGP",
                        column: x => x.PRODUCTSTOREGROUPID,
                        principalTable: "PRODUCT_STORE_GROUP",
                        principalColumn: "PRODUCT_STORE_GROUP_ID");
                    table.ForeignKey(
                        name: "PSGRP_RLE_PTRLE",
                        columns: x => new { x.PARTYID, x.ROLETYPEID },
                        principalTable: "PARTY_ROLE",
                        principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });
                });

            migrationBuilder.CreateTable(
                name: "PARTY_ACCTG_PREFERENCE",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FISCALYEARSTARTMONTH = table.Column<int>(name: "FISCAL_YEAR_START_MONTH", type: "int", nullable: true),
                    FISCALYEARSTARTDAY = table.Column<int>(name: "FISCAL_YEAR_START_DAY", type: "int", nullable: true),
                    TAXFORMID = table.Column<string>(name: "TAX_FORM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    COGSMETHODID = table.Column<string>(name: "COGS_METHOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    BASECURRENCYUOMID = table.Column<string>(name: "BASE_CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INVOICESEQCUSTMETHID = table.Column<string>(name: "INVOICE_SEQ_CUST_METH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INVOICEIDPREFIX = table.Column<string>(name: "INVOICE_ID_PREFIX", type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    LASTINVOICENUMBER = table.Column<int>(name: "LAST_INVOICE_NUMBER", type: "int", nullable: true),
                    LASTINVOICERESTARTDATE = table.Column<DateTime>(name: "LAST_INVOICE_RESTART_DATE", type: "datetime", nullable: true),
                    USEINVOICEIDFORRETURNS = table.Column<string>(name: "USE_INVOICE_ID_FOR_RETURNS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    QUOTESEQCUSTMETHID = table.Column<string>(name: "QUOTE_SEQ_CUST_METH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUOTEIDPREFIX = table.Column<string>(name: "QUOTE_ID_PREFIX", type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    LASTQUOTENUMBER = table.Column<int>(name: "LAST_QUOTE_NUMBER", type: "int", nullable: true),
                    ORDERSEQCUSTMETHID = table.Column<string>(name: "ORDER_SEQ_CUST_METH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERIDPREFIX = table.Column<string>(name: "ORDER_ID_PREFIX", type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    LASTORDERNUMBER = table.Column<int>(name: "LAST_ORDER_NUMBER", type: "int", nullable: true),
                    REFUNDPAYMENTMETHODID = table.Column<string>(name: "REFUND_PAYMENT_METHOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ERRORGLJOURNALID = table.Column<string>(name: "ERROR_GL_JOURNAL_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ENABLEACCOUNTING = table.Column<string>(name: "ENABLE_ACCOUNTING", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    INVOICESEQUENCEENUMID = table.Column<string>(name: "INVOICE_SEQUENCE_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERSEQUENCEENUMID = table.Column<string>(name: "ORDER_SEQUENCE_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUOTESEQUENCEENUMID = table.Column<string>(name: "QUOTE_SEQUENCE_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_ACCTG_PREFERENCE", x => x.PARTYID);
                    table.ForeignKey(
                        name: "ACCTGPREF_CURNCY",
                        column: x => x.BASECURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "ACTGPREF_COGS",
                        column: x => x.COGSMETHODID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "ACTGPREF_GLJRNL",
                        column: x => x.ERRORGLJOURNALID,
                        principalTable: "GL_JOURNAL",
                        principalColumn: "GL_JOURNAL_ID");
                    table.ForeignKey(
                        name: "ACTGPREF_INVCM",
                        column: x => x.INVOICESEQCUSTMETHID,
                        principalTable: "CUSTOM_METHOD",
                        principalColumn: "CUSTOM_METHOD_ID");
                    table.ForeignKey(
                        name: "ACTGPREF_INVSQ",
                        column: x => x.INVOICESEQUENCEENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "ACTGPREF_ODRCM",
                        column: x => x.ORDERSEQCUSTMETHID,
                        principalTable: "CUSTOM_METHOD",
                        principalColumn: "CUSTOM_METHOD_ID");
                    table.ForeignKey(
                        name: "ACTGPREF_ODRSQ",
                        column: x => x.ORDERSEQUENCEENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "ACTGPREF_PAYMTH",
                        column: x => x.REFUNDPAYMENTMETHODID,
                        principalTable: "PAYMENT_METHOD",
                        principalColumn: "PAYMENT_METHOD_ID");
                    table.ForeignKey(
                        name: "ACTGPREF_QTECM",
                        column: x => x.QUOTESEQCUSTMETHID,
                        principalTable: "CUSTOM_METHOD",
                        principalColumn: "CUSTOM_METHOD_ID");
                    table.ForeignKey(
                        name: "ACTGPREF_QTESQ",
                        column: x => x.QUOTESEQUENCEENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "ACTGPREF_TAXFORM",
                        column: x => x.TAXFORMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "ACTG_PREF_PTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAY_PAL_PAYMENT_METHOD",
                columns: table => new
                {
                    PAYMENTMETHODID = table.Column<string>(name: "PAYMENT_METHOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PAYERID = table.Column<string>(name: "PAYER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    EXPRESSCHECKOUTTOKEN = table.Column<string>(name: "EXPRESS_CHECKOUT_TOKEN", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    PAYERSTATUS = table.Column<string>(name: "PAYER_STATUS", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    AVSADDR = table.Column<string>(name: "AVS_ADDR", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    AVSZIP = table.Column<string>(name: "AVS_ZIP", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    CORRELATIONID = table.Column<string>(name: "CORRELATION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TRANSACTIONID = table.Column<string>(name: "TRANSACTION_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAY_PAL_PAYMENT_METHOD", x => x.PAYMENTMETHODID);
                    table.ForeignKey(
                        name: "PAYPAL_CMECH",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "PAYPAL_PADDR",
                        column: x => x.CONTACTMECHID,
                        principalTable: "POSTAL_ADDRESS",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "PAYPAL_PMNTMETH",
                        column: x => x.PAYMENTMETHODID,
                        principalTable: "PAYMENT_METHOD",
                        principalColumn: "PAYMENT_METHOD_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_GATEWAY_RESPONSE",
                columns: table => new
                {
                    PAYMENTGATEWAYRESPONSEID = table.Column<string>(name: "PAYMENT_GATEWAY_RESPONSE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PAYMENTSERVICETYPEENUMID = table.Column<string>(name: "PAYMENT_SERVICE_TYPE_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERPAYMENTPREFERENCEID = table.Column<string>(name: "ORDER_PAYMENT_PREFERENCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PAYMENTMETHODTYPEID = table.Column<string>(name: "PAYMENT_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PAYMENTMETHODID = table.Column<string>(name: "PAYMENT_METHOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TRANSCODEENUMID = table.Column<string>(name: "TRANS_CODE_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AMOUNT = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    CURRENCYUOMID = table.Column<string>(name: "CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    REFERENCENUM = table.Column<string>(name: "REFERENCE_NUM", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    ALTREFERENCE = table.Column<string>(name: "ALT_REFERENCE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    SUBREFERENCE = table.Column<string>(name: "SUB_REFERENCE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    GATEWAYCODE = table.Column<string>(name: "GATEWAY_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    GATEWAYFLAG = table.Column<string>(name: "GATEWAY_FLAG", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    GATEWAYAVSRESULT = table.Column<string>(name: "GATEWAY_AVS_RESULT", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    GATEWAYCVRESULT = table.Column<string>(name: "GATEWAY_CV_RESULT", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    GATEWAYSCORERESULT = table.Column<string>(name: "GATEWAY_SCORE_RESULT", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    GATEWAYMESSAGE = table.Column<string>(name: "GATEWAY_MESSAGE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    TRANSACTIONDATE = table.Column<DateTime>(name: "TRANSACTION_DATE", type: "datetime", nullable: true),
                    RESULTDECLINED = table.Column<string>(name: "RESULT_DECLINED", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    RESULTNSF = table.Column<string>(name: "RESULT_NSF", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    RESULTBADEXPIRE = table.Column<string>(name: "RESULT_BAD_EXPIRE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    RESULTBADCARDNUMBER = table.Column<string>(name: "RESULT_BAD_CARD_NUMBER", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_GATEWAY_RESPONSE", x => x.PAYMENTGATEWAYRESPONSEID);
                    table.ForeignKey(
                        name: "PAYGATR_CUOM",
                        column: x => x.CURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "PAYGATR_ORDPMPRF",
                        column: x => x.ORDERPAYMENTPREFERENCEID,
                        principalTable: "ORDER_PAYMENT_PREFERENCE",
                        principalColumn: "ORDER_PAYMENT_PREFERENCE_ID");
                    table.ForeignKey(
                        name: "PAYGATR_PMETH",
                        column: x => x.PAYMENTMETHODID,
                        principalTable: "PAYMENT_METHOD",
                        principalColumn: "PAYMENT_METHOD_ID");
                    table.ForeignKey(
                        name: "PAYGATR_PMTP",
                        column: x => x.PAYMENTMETHODTYPEID,
                        principalTable: "PAYMENT_METHOD_TYPE",
                        principalColumn: "PAYMENT_METHOD_TYPE_ID");
                    table.ForeignKey(
                        name: "PAYGATR_PSTENUM",
                        column: x => x.PAYMENTSERVICETYPEENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "PAYGATR_TXCODE",
                        column: x => x.TRANSCODEENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                });

            migrationBuilder.CreateTable(
                name: "RETURN_HEADER",
                columns: table => new
                {
                    RETURNID = table.Column<string>(name: "RETURN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    RETURNHEADERTYPEID = table.Column<string>(name: "RETURN_HEADER_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CREATEDBY = table.Column<string>(name: "CREATED_BY", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    FROMPARTYID = table.Column<string>(name: "FROM_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TOPARTYID = table.Column<string>(name: "TO_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PAYMENTMETHODID = table.Column<string>(name: "PAYMENT_METHOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FINACCOUNTID = table.Column<string>(name: "FIN_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    BILLINGACCOUNTID = table.Column<string>(name: "BILLING_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ENTRYDATE = table.Column<DateTime>(name: "ENTRY_DATE", type: "datetime", nullable: true),
                    ORIGINCONTACTMECHID = table.Column<string>(name: "ORIGIN_CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESTINATIONFACILITYID = table.Column<string>(name: "DESTINATION_FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    NEEDSINVENTORYRECEIVE = table.Column<string>(name: "NEEDS_INVENTORY_RECEIVE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    CURRENCYUOMID = table.Column<string>(name: "CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SUPPLIERRMAID = table.Column<string>(name: "SUPPLIER_RMA_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RETURN_HEADER", x => x.RETURNID);
                    table.ForeignKey(
                        name: "RTN_FROM_CTM",
                        column: x => x.ORIGINCONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "RTN_FROM_PARTY",
                        column: x => x.FROMPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "RTN_HDR_CUOM",
                        column: x => x.CURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "RTN_HEAD_TYPE",
                        column: x => x.RETURNHEADERTYPEID,
                        principalTable: "RETURN_HEADER_TYPE",
                        principalColumn: "RETURN_HEADER_TYPE_ID");
                    table.ForeignKey(
                        name: "RTN_STTS_ITEM",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "RTN_TO_BACT",
                        column: x => x.BILLINGACCOUNTID,
                        principalTable: "BILLING_ACCOUNT",
                        principalColumn: "BILLING_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "RTN_TO_FACILITY",
                        column: x => x.DESTINATIONFACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "RTN_TO_FACT",
                        column: x => x.FINACCOUNTID,
                        principalTable: "FIN_ACCOUNT",
                        principalColumn: "FIN_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "RTN_TO_PARTY",
                        column: x => x.TOPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "RTN_TO_PAYMETH",
                        column: x => x.PAYMENTMETHODID,
                        principalTable: "PAYMENT_METHOD",
                        principalColumn: "PAYMENT_METHOD_ID");
                });

            migrationBuilder.CreateTable(
                name: "PERSON_TRAINING",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TRAININGCLASSTYPEID = table.Column<string>(name: "TRAINING_CLASS_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    TRAININGREQUESTID = table.Column<string>(name: "TRAINING_REQUEST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    APPROVERID = table.Column<string>(name: "APPROVER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    APPROVALSTATUS = table.Column<string>(name: "APPROVAL_STATUS", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    REASON = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PERSON_TRAINING", x => new { x.PARTYID, x.TRAININGCLASSTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PERS_TRNG_APPR",
                        column: x => x.APPROVERID,
                        principalTable: "PERSON",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PERS_TRNG_PRTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PERS_TRNG_TCTP",
                        column: x => x.TRAININGCLASSTYPEID,
                        principalTable: "TRAINING_CLASS_TYPE",
                        principalColumn: "TRAINING_CLASS_TYPE_ID");
                    table.ForeignKey(
                        name: "PERS_TRNG_TRNRQ",
                        column: x => x.TRAININGREQUESTID,
                        principalTable: "TRAINING_REQUEST",
                        principalColumn: "TRAINING_REQUEST_ID");
                    table.ForeignKey(
                        name: "PERS_TRNG_WREF",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_TAX_AUTH_INFO",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TAXAUTHGEOID = table.Column<string>(name: "TAX_AUTH_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TAXAUTHPARTYID = table.Column<string>(name: "TAX_AUTH_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    PARTYTAXID = table.Column<string>(name: "PARTY_TAX_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    ISEXEMPT = table.Column<string>(name: "IS_EXEMPT", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ISNEXUS = table.Column<string>(name: "IS_NEXUS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_TAX_AUTH_INFO", x => new { x.PARTYID, x.TAXAUTHGEOID, x.TAXAUTHPARTYID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PARTY_TXAI_PTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PARTY_TXAI_TXA",
                        columns: x => new { x.TAXAUTHGEOID, x.TAXAUTHPARTYID },
                        principalTable: "TAX_AUTHORITY",
                        principalColumns: new[] { "TAX_AUTH_GEO_ID", "TAX_AUTH_PARTY_ID" });
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_STORE",
                columns: table => new
                {
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRIMARYSTOREGROUPID = table.Column<string>(name: "PRIMARY_STORE_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STORENAME = table.Column<string>(name: "STORE_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    COMPANYNAME = table.Column<string>(name: "COMPANY_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TITLE = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SUBTITLE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PAYTOPARTYID = table.Column<string>(name: "PAY_TO_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DAYSTOCANCELNONPAY = table.Column<int>(name: "DAYS_TO_CANCEL_NON_PAY", type: "int", nullable: true),
                    MANUALAUTHISCAPTURE = table.Column<string>(name: "MANUAL_AUTH_IS_CAPTURE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    PRORATESHIPPING = table.Column<string>(name: "PRORATE_SHIPPING", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    PRORATETAXES = table.Column<string>(name: "PRORATE_TAXES", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    VIEWCARTONADD = table.Column<string>(name: "VIEW_CART_ON_ADD", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    AUTOSAVECART = table.Column<string>(name: "AUTO_SAVE_CART", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    AUTOAPPROVEREVIEWS = table.Column<string>(name: "AUTO_APPROVE_REVIEWS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ISDEMOSTORE = table.Column<string>(name: "IS_DEMO_STORE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ISIMMEDIATELYFULFILLED = table.Column<string>(name: "IS_IMMEDIATELY_FULFILLED", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    INVENTORYFACILITYID = table.Column<string>(name: "INVENTORY_FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ONEINVENTORYFACILITY = table.Column<string>(name: "ONE_INVENTORY_FACILITY", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    CHECKINVENTORY = table.Column<string>(name: "CHECK_INVENTORY", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    RESERVEINVENTORY = table.Column<string>(name: "RESERVE_INVENTORY", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    RESERVEORDERENUMID = table.Column<string>(name: "RESERVE_ORDER_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    REQUIREINVENTORY = table.Column<string>(name: "REQUIRE_INVENTORY", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    BALANCERESONORDERCREATION = table.Column<string>(name: "BALANCE_RES_ON_ORDER_CREATION", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    REQUIREMENTMETHODENUMID = table.Column<string>(name: "REQUIREMENT_METHOD_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SORDERNUMBERPREFIX = table.Column<string>(name: "S_ORDER_NUMBER_PREFIX", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    PORDERNUMBERPREFIX = table.Column<string>(name: "P_ORDER_NUMBER_PREFIX", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    DEFAULTLOCALESTRING = table.Column<string>(name: "DEFAULT_LOCALE_STRING", type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    DEFAULTCURRENCYUOMID = table.Column<string>(name: "DEFAULT_CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DEFAULTTIMEZONESTRING = table.Column<string>(name: "DEFAULT_TIME_ZONE_STRING", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    DEFAULTSALESCHANNELENUMID = table.Column<string>(name: "DEFAULT_SALES_CHANNEL_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ALLOWPASSWORD = table.Column<string>(name: "ALLOW_PASSWORD", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DEFAULTPASSWORD = table.Column<string>(name: "DEFAULT_PASSWORD", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    EXPLODEORDERITEMS = table.Column<string>(name: "EXPLODE_ORDER_ITEMS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    CHECKGCBALANCE = table.Column<string>(name: "CHECK_GC_BALANCE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    RETRYFAILEDAUTHS = table.Column<string>(name: "RETRY_FAILED_AUTHS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    HEADERAPPROVEDSTATUS = table.Column<string>(name: "HEADER_APPROVED_STATUS", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ITEMAPPROVEDSTATUS = table.Column<string>(name: "ITEM_APPROVED_STATUS", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DIGITALITEMAPPROVEDSTATUS = table.Column<string>(name: "DIGITAL_ITEM_APPROVED_STATUS", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HEADERDECLINEDSTATUS = table.Column<string>(name: "HEADER_DECLINED_STATUS", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ITEMDECLINEDSTATUS = table.Column<string>(name: "ITEM_DECLINED_STATUS", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HEADERCANCELSTATUS = table.Column<string>(name: "HEADER_CANCEL_STATUS", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ITEMCANCELSTATUS = table.Column<string>(name: "ITEM_CANCEL_STATUS", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AUTHDECLINEDMESSAGE = table.Column<string>(name: "AUTH_DECLINED_MESSAGE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    AUTHFRAUDMESSAGE = table.Column<string>(name: "AUTH_FRAUD_MESSAGE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    AUTHERRORMESSAGE = table.Column<string>(name: "AUTH_ERROR_MESSAGE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    VISUALTHEMEID = table.Column<string>(name: "VISUAL_THEME_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STORECREDITACCOUNTENUMID = table.Column<string>(name: "STORE_CREDIT_ACCOUNT_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    USEPRIMARYEMAILUSERNAME = table.Column<string>(name: "USE_PRIMARY_EMAIL_USERNAME", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    REQUIRECUSTOMERROLE = table.Column<string>(name: "REQUIRE_CUSTOMER_ROLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    AUTOINVOICEDIGITALITEMS = table.Column<string>(name: "AUTO_INVOICE_DIGITAL_ITEMS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    REQSHIPADDRFORDIGITEMS = table.Column<string>(name: "REQ_SHIP_ADDR_FOR_DIG_ITEMS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    SHOWCHECKOUTGIFTOPTIONS = table.Column<string>(name: "SHOW_CHECKOUT_GIFT_OPTIONS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    SELECTPAYMENTTYPEPERITEM = table.Column<string>(name: "SELECT_PAYMENT_TYPE_PER_ITEM", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    SHOWPRICESWITHVATTAX = table.Column<string>(name: "SHOW_PRICES_WITH_VAT_TAX", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    SHOWTAXISEXEMPT = table.Column<string>(name: "SHOW_TAX_IS_EXEMPT", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    VATTAXAUTHGEOID = table.Column<string>(name: "VAT_TAX_AUTH_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    VATTAXAUTHPARTYID = table.Column<string>(name: "VAT_TAX_AUTH_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ENABLEAUTOSUGGESTIONLIST = table.Column<string>(name: "ENABLE_AUTO_SUGGESTION_LIST", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ENABLEDIGPRODUPLOAD = table.Column<string>(name: "ENABLE_DIG_PROD_UPLOAD", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    PRODSEARCHEXCLUDEVARIANTS = table.Column<string>(name: "PROD_SEARCH_EXCLUDE_VARIANTS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DIGPRODUPLOADCATEGORYID = table.Column<string>(name: "DIG_PROD_UPLOAD_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AUTOORDERCCTRYEXP = table.Column<string>(name: "AUTO_ORDER_CC_TRY_EXP", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    AUTOORDERCCTRYOTHERCARDS = table.Column<string>(name: "AUTO_ORDER_CC_TRY_OTHER_CARDS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    AUTOORDERCCTRYLATERNSF = table.Column<string>(name: "AUTO_ORDER_CC_TRY_LATER_NSF", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    AUTOORDERCCTRYLATERMAX = table.Column<int>(name: "AUTO_ORDER_CC_TRY_LATER_MAX", type: "int", nullable: true),
                    STORECREDITVALIDDAYS = table.Column<int>(name: "STORE_CREDIT_VALID_DAYS", type: "int", nullable: true),
                    AUTOAPPROVEINVOICE = table.Column<string>(name: "AUTO_APPROVE_INVOICE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    AUTOAPPROVEORDER = table.Column<string>(name: "AUTO_APPROVE_ORDER", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    SHIPIFCAPTUREFAILS = table.Column<string>(name: "SHIP_IF_CAPTURE_FAILS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    SETOWNERUPONISSUANCE = table.Column<string>(name: "SET_OWNER_UPON_ISSUANCE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    REQRETURNINVENTORYRECEIVE = table.Column<string>(name: "REQ_RETURN_INVENTORY_RECEIVE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ADDTOCARTREMOVEINCOMPAT = table.Column<string>(name: "ADD_TO_CART_REMOVE_INCOMPAT", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ADDTOCARTREPLACEUPSELL = table.Column<string>(name: "ADD_TO_CART_REPLACE_UPSELL", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    SPLITPAYPREFPERSHPGRP = table.Column<string>(name: "SPLIT_PAY_PREF_PER_SHP_GRP", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    MANAGEDBYLOT = table.Column<string>(name: "MANAGED_BY_LOT", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    SHOWOUTOFSTOCKPRODUCTS = table.Column<string>(name: "SHOW_OUT_OF_STOCK_PRODUCTS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ORDERDECIMALQUANTITY = table.Column<string>(name: "ORDER_DECIMAL_QUANTITY", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ALLOWCOMMENT = table.Column<string>(name: "ALLOW_COMMENT", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ALLOCATEINVENTORY = table.Column<string>(name: "ALLOCATE_INVENTORY", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_STORE", x => x.PRODUCTSTOREID);
                    table.ForeignKey(
                        name: "PROD_STR_CURUOM",
                        column: x => x.DEFAULTCURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "PROD_STR_DIAPSTS",
                        column: x => x.DIGITALITEMAPPROVEDSTATUS,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "PROD_STR_FACILITY",
                        column: x => x.INVENTORYFACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "PROD_STR_HAPSTS",
                        column: x => x.HEADERAPPROVEDSTATUS,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "PROD_STR_HCNSTS",
                        column: x => x.HEADERCANCELSTATUS,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "PROD_STR_HDCSTS",
                        column: x => x.HEADERDECLINEDSTATUS,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "PROD_STR_IAPSTS",
                        column: x => x.ITEMAPPROVEDSTATUS,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "PROD_STR_ICNSTS",
                        column: x => x.ITEMCANCELSTATUS,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "PROD_STR_IDCSTS",
                        column: x => x.ITEMDECLINEDSTATUS,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "PROD_STR_PAYTOPTY",
                        column: x => x.PAYTOPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PROD_STR_PRSTRGP",
                        column: x => x.PRIMARYSTOREGROUPID,
                        principalTable: "PRODUCT_STORE_GROUP",
                        principalColumn: "PRODUCT_STORE_GROUP_ID");
                    table.ForeignKey(
                        name: "PROD_STR_RORDENUM",
                        column: x => x.RESERVEORDERENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "PROD_STR_RQMTENUM",
                        column: x => x.REQUIREMENTMETHODENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "PROD_STR_SALECHN",
                        column: x => x.DEFAULTSALESCHANNELENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "PROD_STR_STRCRDACT",
                        column: x => x.STORECREDITACCOUNTENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "PROD_STR_VATTXA",
                        columns: x => new { x.VATTAXAUTHGEOID, x.VATTAXAUTHPARTYID },
                        principalTable: "TAX_AUTHORITY",
                        principalColumns: new[] { "TAX_AUTH_GEO_ID", "TAX_AUTH_PARTY_ID" });
                });

            migrationBuilder.CreateTable(
                name: "TAX_AUTHORITY_ASSOC",
                columns: table => new
                {
                    TAXAUTHGEOID = table.Column<string>(name: "TAX_AUTH_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TAXAUTHPARTYID = table.Column<string>(name: "TAX_AUTH_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TOTAXAUTHGEOID = table.Column<string>(name: "TO_TAX_AUTH_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TOTAXAUTHPARTYID = table.Column<string>(name: "TO_TAX_AUTH_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    TAXAUTHORITYASSOCTYPEID = table.Column<string>(name: "TAX_AUTHORITY_ASSOC_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TAX_AUTHORITY_ASSOC", x => new { x.TAXAUTHGEOID, x.TAXAUTHPARTYID, x.TOTAXAUTHGEOID, x.TOTAXAUTHPARTYID, x.FROMDATE });
                    table.ForeignKey(
                        name: "TAXAUTHASC_ASTP",
                        column: x => x.TAXAUTHORITYASSOCTYPEID,
                        principalTable: "TAX_AUTHORITY_ASSOC_TYPE",
                        principalColumn: "TAX_AUTHORITY_ASSOC_TYPE_ID");
                    table.ForeignKey(
                        name: "TAXAUTHASC_TOTXA",
                        columns: x => new { x.TOTAXAUTHGEOID, x.TOTAXAUTHPARTYID },
                        principalTable: "TAX_AUTHORITY",
                        principalColumns: new[] { "TAX_AUTH_GEO_ID", "TAX_AUTH_PARTY_ID" });
                    table.ForeignKey(
                        name: "TAXAUTHASC_TXA",
                        columns: x => new { x.TAXAUTHGEOID, x.TAXAUTHPARTYID },
                        principalTable: "TAX_AUTHORITY",
                        principalColumns: new[] { "TAX_AUTH_GEO_ID", "TAX_AUTH_PARTY_ID" });
                });

            migrationBuilder.CreateTable(
                name: "TAX_AUTHORITY_CATEGORY",
                columns: table => new
                {
                    TAXAUTHGEOID = table.Column<string>(name: "TAX_AUTH_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TAXAUTHPARTYID = table.Column<string>(name: "TAX_AUTH_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTCATEGORYID = table.Column<string>(name: "PRODUCT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TAX_AUTHORITY_CATEGORY", x => new { x.TAXAUTHGEOID, x.TAXAUTHPARTYID, x.PRODUCTCATEGORYID });
                    table.ForeignKey(
                        name: "TAXAUTHCAT_CAT",
                        column: x => x.PRODUCTCATEGORYID,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "TAXAUTHCAT_TXA",
                        columns: x => new { x.TAXAUTHGEOID, x.TAXAUTHPARTYID },
                        principalTable: "TAX_AUTHORITY",
                        principalColumns: new[] { "TAX_AUTH_GEO_ID", "TAX_AUTH_PARTY_ID" });
                });

            migrationBuilder.CreateTable(
                name: "TAX_AUTHORITY_GL_ACCOUNT",
                columns: table => new
                {
                    TAXAUTHGEOID = table.Column<string>(name: "TAX_AUTH_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TAXAUTHPARTYID = table.Column<string>(name: "TAX_AUTH_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORGANIZATIONPARTYID = table.Column<string>(name: "ORGANIZATION_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GLACCOUNTID = table.Column<string>(name: "GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TAX_AUTHORITY_GL_ACCOUNT", x => new { x.TAXAUTHGEOID, x.TAXAUTHPARTYID, x.ORGANIZATIONPARTYID });
                    table.ForeignKey(
                        name: "TAXAUTHGLA_GLA",
                        column: x => x.GLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "TAXAUTHGLA_OPTY",
                        column: x => x.ORGANIZATIONPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "TAXAUTHGLA_TXA",
                        columns: x => new { x.TAXAUTHGEOID, x.TAXAUTHPARTYID },
                        principalTable: "TAX_AUTHORITY",
                        principalColumns: new[] { "TAX_AUTH_GEO_ID", "TAX_AUTH_PARTY_ID" });
                });

            migrationBuilder.CreateTable(
                name: "PARTY_STATUS",
                columns: table => new
                {
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSDATE = table.Column<DateTime>(name: "STATUS_DATE", type: "datetime", nullable: false),
                    CHANGEBYUSERLOGINID = table.Column<string>(name: "CHANGE_BY_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_STATUS", x => new { x.STATUSID, x.PARTYID, x.STATUSDATE });
                    table.ForeignKey(
                        name: "PARTY_STS_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PARTY_STS_STSITM",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "PARTY_STTS_USRLGN",
                        column: x => x.CHANGEBYUSERLOGINID,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                });

            migrationBuilder.CreateTable(
                name: "PICKLIST_ROLE",
                columns: table => new
                {
                    PICKLISTID = table.Column<string>(name: "PICKLIST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PICKLIST_ROLE", x => new { x.PICKLISTID, x.PARTYID, x.ROLETYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PCKLST_RLE_CBUL",
                        column: x => x.CREATEDBYUSERLOGIN,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                    table.ForeignKey(
                        name: "PCKLST_RLE_LMUL",
                        column: x => x.LASTMODIFIEDBYUSERLOGIN,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                    table.ForeignKey(
                        name: "PCKLST_RLE_PKLT",
                        column: x => x.PICKLISTID,
                        principalTable: "PICKLIST",
                        principalColumn: "PICKLIST_ID");
                    table.ForeignKey(
                        name: "PCKLST_RLE_PRLE",
                        columns: x => new { x.PARTYID, x.ROLETYPEID },
                        principalTable: "PARTY_ROLE",
                        principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });
                });

            migrationBuilder.CreateTable(
                name: "PICKLIST_STATUS",
                columns: table => new
                {
                    PICKLISTID = table.Column<string>(name: "PICKLIST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSDATE = table.Column<DateTime>(name: "STATUS_DATE", type: "datetime", nullable: false),
                    CHANGEBYUSERLOGINID = table.Column<string>(name: "CHANGE_BY_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSIDTO = table.Column<string>(name: "STATUS_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PICKLIST_STATUS", x => new { x.PICKLISTID, x.STATUSDATE });
                    table.ForeignKey(
                        name: "PCKLST_STST_CUL",
                        column: x => x.CHANGEBYUSERLOGINID,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                    table.ForeignKey(
                        name: "PCKLST_STST_FSI",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "PCKLST_STST_PKLT",
                        column: x => x.PICKLISTID,
                        principalTable: "PICKLIST",
                        principalColumn: "PICKLIST_ID");
                    table.ForeignKey(
                        name: "PCKLST_STST_TSI",
                        column: x => x.STATUSIDTO,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "PICKLIST_STATUS_HISTORY",
                columns: table => new
                {
                    PICKLISTID = table.Column<string>(name: "PICKLIST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CHANGEDATE = table.Column<DateTime>(name: "CHANGE_DATE", type: "datetime", nullable: false),
                    CHANGEUSERLOGINID = table.Column<string>(name: "CHANGE_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSIDTO = table.Column<string>(name: "STATUS_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PICKLIST_STATUS_HISTORY", x => new { x.PICKLISTID, x.CHANGEDATE });
                    table.ForeignKey(
                        name: "PCKLST_STHST_CUL",
                        column: x => x.CHANGEUSERLOGINID,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                    table.ForeignKey(
                        name: "PCKLST_STHST_FSI",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "PCKLST_STHST_PKLT",
                        column: x => x.PICKLISTID,
                        principalTable: "PICKLIST",
                        principalColumn: "PICKLIST_ID");
                    table.ForeignKey(
                        name: "PCKLST_STHST_SVC",
                        columns: x => new { x.STATUSID, x.STATUSIDTO },
                        principalTable: "STATUS_VALID_CHANGE",
                        principalColumns: new[] { "STATUS_ID", "STATUS_ID_TO" });
                    table.ForeignKey(
                        name: "PCKLST_STHST_TSI",
                        column: x => x.STATUSIDTO,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT",
                columns: table => new
                {
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTTYPEID = table.Column<string>(name: "PRODUCT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRIMARYPRODUCTCATEGORYID = table.Column<string>(name: "PRIMARY_PRODUCT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INTRODUCTIONDATE = table.Column<DateTime>(name: "INTRODUCTION_DATE", type: "datetime", nullable: true),
                    RELEASEDATE = table.Column<DateTime>(name: "RELEASE_DATE", type: "datetime", nullable: true),
                    SUPPORTDISCONTINUATIONDATE = table.Column<DateTime>(name: "SUPPORT_DISCONTINUATION_DATE", type: "datetime", nullable: true),
                    SALESDISCONTINUATIONDATE = table.Column<DateTime>(name: "SALES_DISCONTINUATION_DATE", type: "datetime", nullable: true),
                    SALESDISCWHENNOTAVAIL = table.Column<string>(name: "SALES_DISC_WHEN_NOT_AVAIL", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    INTERNALNAME = table.Column<string>(name: "INTERNAL_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    BRANDNAME = table.Column<string>(name: "BRAND_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PRODUCTNAME = table.Column<string>(name: "PRODUCT_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LONGDESCRIPTION = table.Column<string>(name: "LONG_DESCRIPTION", type: "text", nullable: true),
                    PRICEDETAILTEXT = table.Column<string>(name: "PRICE_DETAIL_TEXT", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SMALLIMAGEURL = table.Column<string>(name: "SMALL_IMAGE_URL", type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    MEDIUMIMAGEURL = table.Column<string>(name: "MEDIUM_IMAGE_URL", type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    LARGEIMAGEURL = table.Column<string>(name: "LARGE_IMAGE_URL", type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    DETAILIMAGEURL = table.Column<string>(name: "DETAIL_IMAGE_URL", type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    ORIGINALIMAGEURL = table.Column<string>(name: "ORIGINAL_IMAGE_URL", type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    DETAILSCREEN = table.Column<string>(name: "DETAIL_SCREEN", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    INVENTORYMESSAGE = table.Column<string>(name: "INVENTORY_MESSAGE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    INVENTORYITEMTYPEID = table.Column<string>(name: "INVENTORY_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    REQUIREINVENTORY = table.Column<string>(name: "REQUIRE_INVENTORY", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    QUANTITYUOMID = table.Column<string>(name: "QUANTITY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUANTITYINCLUDED = table.Column<decimal>(name: "QUANTITY_INCLUDED", type: "decimal(18,6)", nullable: true),
                    PIECESINCLUDED = table.Column<int>(name: "PIECES_INCLUDED", type: "int", nullable: true),
                    SERVICELIFEDAYS = table.Column<int>(name: "SERVICE_LIFE_DAYS", type: "int", nullable: true),
                    SERVICELIFEMILEAGE = table.Column<int>(name: "SERVICE_LIFE_MILEAGE", type: "int", nullable: true),
                    REQUIREAMOUNT = table.Column<string>(name: "REQUIRE_AMOUNT", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    FIXEDAMOUNT = table.Column<decimal>(name: "FIXED_AMOUNT", type: "decimal(18,2)", nullable: true),
                    AMOUNTUOMTYPEID = table.Column<string>(name: "AMOUNT_UOM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    WEIGHTUOMID = table.Column<string>(name: "WEIGHT_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SHIPPINGWEIGHT = table.Column<decimal>(name: "SHIPPING_WEIGHT", type: "decimal(18,6)", nullable: true),
                    PRODUCTWEIGHT = table.Column<decimal>(name: "PRODUCT_WEIGHT", type: "decimal(18,6)", nullable: true),
                    HEIGHTUOMID = table.Column<string>(name: "HEIGHT_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTHEIGHT = table.Column<decimal>(name: "PRODUCT_HEIGHT", type: "decimal(18,6)", nullable: true),
                    SHIPPINGHEIGHT = table.Column<decimal>(name: "SHIPPING_HEIGHT", type: "decimal(18,6)", nullable: true),
                    WIDTHUOMID = table.Column<string>(name: "WIDTH_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTWIDTH = table.Column<decimal>(name: "PRODUCT_WIDTH", type: "decimal(18,6)", nullable: true),
                    SHIPPINGWIDTH = table.Column<decimal>(name: "SHIPPING_WIDTH", type: "decimal(18,6)", nullable: true),
                    DEPTHUOMID = table.Column<string>(name: "DEPTH_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTDEPTH = table.Column<decimal>(name: "PRODUCT_DEPTH", type: "decimal(18,6)", nullable: true),
                    SHIPPINGDEPTH = table.Column<decimal>(name: "SHIPPING_DEPTH", type: "decimal(18,6)", nullable: true),
                    DIAMETERUOMID = table.Column<string>(name: "DIAMETER_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTDIAMETER = table.Column<decimal>(name: "PRODUCT_DIAMETER", type: "decimal(18,6)", nullable: true),
                    PRODUCTRATING = table.Column<decimal>(name: "PRODUCT_RATING", type: "decimal(18,6)", nullable: true),
                    RATINGTYPEENUM = table.Column<string>(name: "RATING_TYPE_ENUM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RETURNABLE = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    TAXABLE = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    CHARGESHIPPING = table.Column<string>(name: "CHARGE_SHIPPING", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    AUTOCREATEKEYWORDS = table.Column<string>(name: "AUTO_CREATE_KEYWORDS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    INCLUDEINPROMOTIONS = table.Column<string>(name: "INCLUDE_IN_PROMOTIONS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ISVIRTUAL = table.Column<string>(name: "IS_VIRTUAL", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ISVARIANT = table.Column<string>(name: "IS_VARIANT", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    VIRTUALVARIANTMETHODENUM = table.Column<string>(name: "VIRTUAL_VARIANT_METHOD_ENUM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORIGINGEOID = table.Column<string>(name: "ORIGIN_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    REQUIREMENTMETHODENUMID = table.Column<string>(name: "REQUIREMENT_METHOD_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    BILLOFMATERIALLEVEL = table.Column<int>(name: "BILL_OF_MATERIAL_LEVEL", type: "int", nullable: true),
                    RESERVMAXPERSONS = table.Column<decimal>(name: "RESERV_MAX_PERSONS", type: "decimal(18,6)", nullable: true),
                    RESERV2NDPPPERC = table.Column<decimal>(name: "RESERV2ND_P_P_PERC", type: "decimal(18,6)", nullable: true),
                    RESERVNTHPPPERC = table.Column<decimal>(name: "RESERV_NTH_P_P_PERC", type: "decimal(18,6)", nullable: true),
                    CONFIGID = table.Column<string>(name: "CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CREATEDDATE = table.Column<DateTime>(name: "CREATED_DATE", type: "datetime", nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDDATE = table.Column<DateTime>(name: "LAST_MODIFIED_DATE", type: "datetime", nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    INSHIPPINGBOX = table.Column<string>(name: "IN_SHIPPING_BOX", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DEFAULTSHIPMENTBOXTYPEID = table.Column<string>(name: "DEFAULT_SHIPMENT_BOX_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LOTIDFILLEDIN = table.Column<string>(name: "LOT_ID_FILLED_IN", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ORDERDECIMALQUANTITY = table.Column<string>(name: "ORDER_DECIMAL_QUANTITY", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT", x => x.PRODUCTID);
                    table.ForeignKey(
                        name: "PROD_AMOUNT_UOMT",
                        column: x => x.AMOUNTUOMTYPEID,
                        principalTable: "UOM_TYPE",
                        principalColumn: "UOM_TYPE_ID");
                    table.ForeignKey(
                        name: "PROD_CB_USERLOGIN",
                        column: x => x.CREATEDBYUSERLOGIN,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                    table.ForeignKey(
                        name: "PROD_DEPTH_UOM",
                        column: x => x.DEPTHUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "PROD_DIAMTR_UOM",
                        column: x => x.DIAMETERUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "PROD_FACILITY",
                        column: x => x.FACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "PROD_HEIGHT_UOM",
                        column: x => x.HEIGHTUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "PROD_INV_ITEM_TYPE",
                        column: x => x.INVENTORYITEMTYPEID,
                        principalTable: "INVENTORY_ITEM_TYPE",
                        principalColumn: "INVENTORY_ITEM_TYPE_ID");
                    table.ForeignKey(
                        name: "PROD_LMB_USERLOGIN",
                        column: x => x.LASTMODIFIEDBYUSERLOGIN,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                    table.ForeignKey(
                        name: "PROD_ORG_GEO",
                        column: x => x.ORIGINGEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "PROD_PRIMARY_CAT",
                        column: x => x.PRIMARYPRODUCTCATEGORYID,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "PROD_QUANT_UOM",
                        column: x => x.QUANTITYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "PROD_RATE_ENUM",
                        column: x => x.RATINGTYPEENUM,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "PROD_RQMT_ENUM",
                        column: x => x.REQUIREMENTMETHODENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "PROD_SHBX_TYPE",
                        column: x => x.DEFAULTSHIPMENTBOXTYPEID,
                        principalTable: "SHIPMENT_BOX_TYPE",
                        principalColumn: "SHIPMENT_BOX_TYPE_ID");
                    table.ForeignKey(
                        name: "PROD_TYPE",
                        column: x => x.PRODUCTTYPEID,
                        principalTable: "PRODUCT_TYPE",
                        principalColumn: "PRODUCT_TYPE_ID");
                    table.ForeignKey(
                        name: "PROD_VVMETHOD_ENUM",
                        column: x => x.VIRTUALVARIANTMETHODENUM,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "PROD_WEIGHT_UOM",
                        column: x => x.WEIGHTUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "PROD_WIDTH_UOM",
                        column: x => x.WIDTHUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_FEATURE_PRICE",
                columns: table => new
                {
                    PRODUCTFEATUREID = table.Column<string>(name: "PRODUCT_FEATURE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPRICETYPEID = table.Column<string>(name: "PRODUCT_PRICE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CURRENCYUOMID = table.Column<string>(name: "CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    PRICE = table.Column<decimal>(type: "decimal(18,3)", nullable: true),
                    CREATEDDATE = table.Column<DateTime>(name: "CREATED_DATE", type: "datetime", nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDDATE = table.Column<DateTime>(name: "LAST_MODIFIED_DATE", type: "datetime", nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_FEATURE_PRICE", x => new { x.PRODUCTFEATUREID, x.PRODUCTPRICETYPEID, x.CURRENCYUOMID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PROD_F_PRICE_CBUL",
                        column: x => x.CREATEDBYUSERLOGIN,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                    table.ForeignKey(
                        name: "PROD_F_PRICE_CUOM",
                        column: x => x.CURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "PROD_F_PRICE_LMBUL",
                        column: x => x.LASTMODIFIEDBYUSERLOGIN,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                    table.ForeignKey(
                        name: "PROD_F_PRICE_TYPE",
                        column: x => x.PRODUCTPRICETYPEID,
                        principalTable: "PRODUCT_PRICE_TYPE",
                        principalColumn: "PRODUCT_PRICE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_PRICE_CHANGE",
                columns: table => new
                {
                    PRODUCTPRICECHANGEID = table.Column<string>(name: "PRODUCT_PRICE_CHANGE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTPRICETYPEID = table.Column<string>(name: "PRODUCT_PRICE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTPRICEPURPOSEID = table.Column<string>(name: "PRODUCT_PRICE_PURPOSE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CURRENCYUOMID = table.Column<string>(name: "CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTSTOREGROUPID = table.Column<string>(name: "PRODUCT_STORE_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    PRICE = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    OLDPRICE = table.Column<decimal>(name: "OLD_PRICE", type: "decimal(18,2)", nullable: true),
                    CHANGEDDATE = table.Column<DateTime>(name: "CHANGED_DATE", type: "datetime", nullable: true),
                    CHANGEDBYUSERLOGIN = table.Column<string>(name: "CHANGED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_PRICE_CHANGE", x => x.PRODUCTPRICECHANGEID);
                    table.ForeignKey(
                        name: "PROD_PRCHNG_CHUL",
                        column: x => x.CHANGEDBYUSERLOGIN,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_PROMO",
                columns: table => new
                {
                    PRODUCTPROMOID = table.Column<string>(name: "PRODUCT_PROMO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PROMONAME = table.Column<string>(name: "PROMO_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PROMOTEXT = table.Column<string>(name: "PROMO_TEXT", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    USERENTERED = table.Column<string>(name: "USER_ENTERED", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    SHOWTOCUSTOMER = table.Column<string>(name: "SHOW_TO_CUSTOMER", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    REQUIRECODE = table.Column<string>(name: "REQUIRE_CODE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    USELIMITPERORDER = table.Column<int>(name: "USE_LIMIT_PER_ORDER", type: "int", nullable: true),
                    USELIMITPERCUSTOMER = table.Column<int>(name: "USE_LIMIT_PER_CUSTOMER", type: "int", nullable: true),
                    USELIMITPERPROMOTION = table.Column<int>(name: "USE_LIMIT_PER_PROMOTION", type: "int", nullable: true),
                    BILLBACKFACTOR = table.Column<decimal>(name: "BILLBACK_FACTOR", type: "decimal(18,6)", nullable: true),
                    OVERRIDEORGPARTYID = table.Column<string>(name: "OVERRIDE_ORG_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CREATEDDATE = table.Column<DateTime>(name: "CREATED_DATE", type: "datetime", nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDDATE = table.Column<DateTime>(name: "LAST_MODIFIED_DATE", type: "datetime", nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_PROMO", x => x.PRODUCTPROMOID);
                    table.ForeignKey(
                        name: "PROD_PRMO_CUL",
                        column: x => x.CREATEDBYUSERLOGIN,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                    table.ForeignKey(
                        name: "PROD_PRMO_LMCUL",
                        column: x => x.LASTMODIFIEDBYUSERLOGIN,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                    table.ForeignKey(
                        name: "PROD_PRMO_OPA",
                        column: x => x.OVERRIDEORGPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                });

            migrationBuilder.CreateTable(
                name: "SALES_FORECAST",
                columns: table => new
                {
                    SALESFORECASTID = table.Column<string>(name: "SALES_FORECAST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTSALESFORECASTID = table.Column<string>(name: "PARENT_SALES_FORECAST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORGANIZATIONPARTYID = table.Column<string>(name: "ORGANIZATION_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INTERNALPARTYID = table.Column<string>(name: "INTERNAL_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CUSTOMTIMEPERIODID = table.Column<string>(name: "CUSTOM_TIME_PERIOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CURRENCYUOMID = table.Column<string>(name: "CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUOTAAMOUNT = table.Column<decimal>(name: "QUOTA_AMOUNT", type: "decimal(18,2)", nullable: true),
                    FORECASTAMOUNT = table.Column<decimal>(name: "FORECAST_AMOUNT", type: "decimal(18,2)", nullable: true),
                    BESTCASEAMOUNT = table.Column<decimal>(name: "BEST_CASE_AMOUNT", type: "decimal(18,2)", nullable: true),
                    CLOSEDAMOUNT = table.Column<decimal>(name: "CLOSED_AMOUNT", type: "decimal(18,2)", nullable: true),
                    PERCENTOFQUOTAFORECAST = table.Column<decimal>(name: "PERCENT_OF_QUOTA_FORECAST", type: "decimal(18,6)", nullable: true),
                    PERCENTOFQUOTACLOSED = table.Column<decimal>(name: "PERCENT_OF_QUOTA_CLOSED", type: "decimal(18,6)", nullable: true),
                    PIPELINEAMOUNT = table.Column<decimal>(name: "PIPELINE_AMOUNT", type: "decimal(18,2)", nullable: true),
                    CREATEDBYUSERLOGINID = table.Column<string>(name: "CREATED_BY_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    MODIFIEDBYUSERLOGINID = table.Column<string>(name: "MODIFIED_BY_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SALES_FORECAST", x => x.SALESFORECASTID);
                    table.ForeignKey(
                        name: "SALES4C_CRT_USER",
                        column: x => x.CREATEDBYUSERLOGINID,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                    table.ForeignKey(
                        name: "SALES4C_CUR_UOM",
                        column: x => x.CURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "SALES4C_INT_PARTY",
                        column: x => x.INTERNALPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "SALES4C_MOD_USER",
                        column: x => x.MODIFIEDBYUSERLOGINID,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                    table.ForeignKey(
                        name: "SALES4C_ORG_PARTY",
                        column: x => x.ORGANIZATIONPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "SALES4C_PARENT",
                        column: x => x.PARENTSALESFORECASTID,
                        principalTable: "SALES_FORECAST",
                        principalColumn: "SALES_FORECAST_ID");
                    table.ForeignKey(
                        name: "SALES4C_TIME_PER",
                        column: x => x.CUSTOMTIMEPERIODID,
                        principalTable: "CUSTOM_TIME_PERIOD",
                        principalColumn: "CUSTOM_TIME_PERIOD_ID");
                });

            migrationBuilder.CreateTable(
                name: "SALES_OPPORTUNITY",
                columns: table => new
                {
                    SALESOPPORTUNITYID = table.Column<string>(name: "SALES_OPPORTUNITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    OPPORTUNITYNAME = table.Column<string>(name: "OPPORTUNITY_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "text", nullable: true),
                    NEXTSTEP = table.Column<string>(name: "NEXT_STEP", type: "text", nullable: true),
                    NEXTSTEPDATE = table.Column<DateTime>(name: "NEXT_STEP_DATE", type: "datetime", nullable: true),
                    ESTIMATEDAMOUNT = table.Column<decimal>(name: "ESTIMATED_AMOUNT", type: "decimal(18,2)", nullable: true),
                    ESTIMATEDPROBABILITY = table.Column<decimal>(name: "ESTIMATED_PROBABILITY", type: "decimal(18,6)", nullable: true),
                    CURRENCYUOMID = table.Column<string>(name: "CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    MARKETINGCAMPAIGNID = table.Column<string>(name: "MARKETING_CAMPAIGN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DATASOURCEID = table.Column<string>(name: "DATA_SOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ESTIMATEDCLOSEDATE = table.Column<DateTime>(name: "ESTIMATED_CLOSE_DATE", type: "datetime", nullable: true),
                    OPPORTUNITYSTAGEID = table.Column<string>(name: "OPPORTUNITY_STAGE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TYPEENUMID = table.Column<string>(name: "TYPE_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SALES_OPPORTUNITY", x => x.SALESOPPORTUNITYID);
                    table.ForeignKey(
                        name: "SLSOPP_CRNCY_UOM",
                        column: x => x.CURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "SLSOPP_DTSRC",
                        column: x => x.DATASOURCEID,
                        principalTable: "DATA_SOURCE",
                        principalColumn: "DATA_SOURCE_ID");
                    table.ForeignKey(
                        name: "SLSOPP_MKTGCMPG",
                        column: x => x.MARKETINGCAMPAIGNID,
                        principalTable: "MARKETING_CAMPAIGN",
                        principalColumn: "MARKETING_CAMPAIGN_ID");
                    table.ForeignKey(
                        name: "SLSOPP_STAGE",
                        column: x => x.OPPORTUNITYSTAGEID,
                        principalTable: "SALES_OPPORTUNITY_STAGE",
                        principalColumn: "OPPORTUNITY_STAGE_ID");
                    table.ForeignKey(
                        name: "SLSOPP_TYP_ENUM",
                        column: x => x.TYPEENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "SLSOPP_USRLGN",
                        column: x => x.CREATEDBYUSERLOGIN,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                });

            migrationBuilder.CreateTable(
                name: "TESTING_STATUS",
                columns: table => new
                {
                    TESTINGSTATUSID = table.Column<string>(name: "TESTING_STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TESTINGID = table.Column<string>(name: "TESTING_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSDATE = table.Column<DateTime>(name: "STATUS_DATE", type: "datetime", nullable: true),
                    CHANGEBYUSERLOGINID = table.Column<string>(name: "CHANGE_BY_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TESTING_STATUS", x => x.TESTINGSTATUSID);
                    table.ForeignKey(
                        name: "TEST_STA_STSITM",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "TEST_STA_USRLGN",
                        column: x => x.CHANGEBYUSERLOGINID,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                });

            migrationBuilder.CreateTable(
                name: "TIMESHEET",
                columns: table => new
                {
                    TIMESHEETID = table.Column<string>(name: "TIMESHEET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CLIENTPARTYID = table.Column<string>(name: "CLIENT_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    APPROVEDBYUSERLOGINID = table.Column<string>(name: "APPROVED_BY_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TIMESHEET", x => x.TIMESHEETID);
                    table.ForeignKey(
                        name: "TIMESHEET_AB_UL",
                        column: x => x.APPROVEDBYUSERLOGINID,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                    table.ForeignKey(
                        name: "TIMESHEET_CPTY",
                        column: x => x.CLIENTPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "TIMESHEET_PRTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "TIMESHEET_STS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                });

            migrationBuilder.CreateTable(
                name: "USER_LOGIN_HISTORY",
                columns: table => new
                {
                    USERLOGINID = table.Column<string>(name: "USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    VISITID = table.Column<string>(name: "VISIT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    PASSWORDUSED = table.Column<string>(name: "PASSWORD_USED", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SUCCESSFULLOGIN = table.Column<string>(name: "SUCCESSFUL_LOGIN", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ORIGINUSERLOGINID = table.Column<string>(name: "ORIGIN_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_USER_LOGIN_HISTORY", x => new { x.USERLOGINID, x.FROMDATE });
                    table.ForeignKey(
                        name: "USER_LH_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "USER_LH_USER",
                        column: x => x.USERLOGINID,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                });

            migrationBuilder.CreateTable(
                name: "USER_LOGIN_PASSWORD_HISTORY",
                columns: table => new
                {
                    USERLOGINID = table.Column<string>(name: "USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    CURRENTPASSWORD = table.Column<string>(name: "CURRENT_PASSWORD", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_USER_LOGIN_PASSWORD_HISTORY", x => new { x.USERLOGINID, x.FROMDATE });
                    table.ForeignKey(
                        name: "USER_LPH_USER",
                        column: x => x.USERLOGINID,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                });

            migrationBuilder.CreateTable(
                name: "USER_LOGIN_SECURITY_GROUP",
                columns: table => new
                {
                    USERLOGINID = table.Column<string>(name: "USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    GROUPID = table.Column<string>(name: "GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_USER_LOGIN_SECURITY_GROUP", x => new { x.USERLOGINID, x.GROUPID, x.FROMDATE });
                    table.ForeignKey(
                        name: "USER_SECGRP_GRP",
                        column: x => x.GROUPID,
                        principalTable: "SECURITY_GROUP",
                        principalColumn: "GROUP_ID");
                    table.ForeignKey(
                        name: "USER_SECGRP_USER",
                        column: x => x.USERLOGINID,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                });

            migrationBuilder.CreateTable(
                name: "USER_LOGIN_SESSION",
                columns: table => new
                {
                    USERLOGINID = table.Column<string>(name: "USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    SAVEDDATE = table.Column<DateTime>(name: "SAVED_DATE", type: "datetime", nullable: true),
                    SESSIONDATA = table.Column<string>(name: "SESSION_DATA", type: "text", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_USER_LOGIN_SESSION", x => x.USERLOGINID);
                    table.ForeignKey(
                        name: "USER_SESSION_USER",
                        column: x => x.USERLOGINID,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                });

            migrationBuilder.CreateTable(
                name: "WEB_USER_PREFERENCE",
                columns: table => new
                {
                    USERLOGINID = table.Column<string>(name: "USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    VISITID = table.Column<string>(name: "VISIT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    WEBPREFERENCETYPEID = table.Column<string>(name: "WEB_PREFERENCE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    WEBPREFERENCEVALUE = table.Column<string>(name: "WEB_PREFERENCE_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WEB_USER_PREFERENCE", x => new { x.USERLOGINID, x.PARTYID, x.VISITID, x.WEBPREFERENCETYPEID });
                    table.ForeignKey(
                        name: "WEB_PREF_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "WEB_PREF_TYPE",
                        column: x => x.WEBPREFERENCETYPEID,
                        principalTable: "WEB_PREFERENCE_TYPE",
                        principalColumn: "WEB_PREFERENCE_TYPE_ID");
                    table.ForeignKey(
                        name: "WEB_PREF_USER",
                        column: x => x.USERLOGINID,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_PARTY_ASSIGNMENT",
                columns: table => new
                {
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    ASSIGNEDBYUSERLOGINID = table.Column<string>(name: "ASSIGNED_BY_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSDATETIME = table.Column<DateTime>(name: "STATUS_DATE_TIME", type: "datetime", nullable: true),
                    EXPECTATIONENUMID = table.Column<string>(name: "EXPECTATION_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DELEGATEREASONENUMID = table.Column<string>(name: "DELEGATE_REASON_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    MUSTRSVP = table.Column<string>(name: "MUST_RSVP", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    AVAILABILITYSTATUSID = table.Column<string>(name: "AVAILABILITY_STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_PARTY_ASSIGNMEN", x => new { x.WORKEFFORTID, x.PARTYID, x.ROLETYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "WKEFF_PA_ABUSRLOG",
                        column: x => x.ASSIGNEDBYUSERLOGINID,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                    table.ForeignKey(
                        name: "WKEFF_PA_AVSTTS",
                        column: x => x.AVAILABILITYSTATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "WKEFF_PA_DELR_ENM",
                        column: x => x.DELEGATEREASONENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "WKEFF_PA_EXP_ENUM",
                        column: x => x.EXPECTATIONENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "WKEFF_PA_FACILITY",
                        column: x => x.FACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "WKEFF_PA_PRTY_ROLE",
                        columns: x => new { x.PARTYID, x.ROLETYPEID },
                        principalTable: "PARTY_ROLE",
                        principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });
                    table.ForeignKey(
                        name: "WKEFF_PA_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "WKEFF_PA_WE",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_REVIEW",
                columns: table => new
                {
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    USERLOGINID = table.Column<string>(name: "USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    REVIEWDATE = table.Column<DateTime>(name: "REVIEW_DATE", type: "datetime", nullable: false),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    POSTEDANONYMOUS = table.Column<string>(name: "POSTED_ANONYMOUS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    RATING = table.Column<double>(type: "float", nullable: true),
                    REVIEWTEXT = table.Column<string>(name: "REVIEW_TEXT", type: "text", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_REVIEW", x => new { x.WORKEFFORTID, x.USERLOGINID, x.REVIEWDATE });
                    table.ForeignKey(
                        name: "WEFF_REVIEW_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "WEFF_REVIEW_UL",
                        column: x => x.USERLOGINID,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                    table.ForeignKey(
                        name: "WEFF_REVIEW_WEFF",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_STATUS",
                columns: table => new
                {
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSDATETIME = table.Column<DateTime>(name: "STATUS_DATETIME", type: "datetime", nullable: false),
                    SETBYUSERLOGIN = table.Column<string>(name: "SET_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    REASON = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_STATUS", x => new { x.WORKEFFORTID, x.STATUSID, x.STATUSDATETIME });
                    table.ForeignKey(
                        name: "WKEFF_STTS_SB_UL",
                        column: x => x.SETBYUSERLOGIN,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                    table.ForeignKey(
                        name: "WKEFF_STTS_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "WKEFF_STTS_WE",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "VEHICLE_ANNOTATIONS",
                columns: table => new
                {
                    VehicleAnnotationId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    VehicleId = table.Column<string>(type: "varchar(36)", nullable: false),
                    AnnotationId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    LastUpdatedStamp = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CreatedStamp = table.Column<DateTime>(type: "datetime2", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VEHICLE_ANNOTATIONS", x => x.VehicleAnnotationId);
                    table.ForeignKey(
                        name: "FK_VEHICLE_ANNOTATIONS_ANNOTATIONS_AnnotationId",
                        column: x => x.AnnotationId,
                        principalTable: "ANNOTATIONS",
                        principalColumn: "AnnotationId");
                    table.ForeignKey(
                        name: "FK_VEHICLE_ANNOTATIONS_VEHICLES_VehicleId",
                        column: x => x.VehicleId,
                        principalTable: "VEHICLES",
                        principalColumn: "VEHICLE_ID");
                });

            migrationBuilder.CreateTable(
                name: "VEHICLE_CONTENTS",
                columns: table => new
                {
                    ContentId = table.Column<string>(type: "varchar(36)", nullable: false),
                    VehicleId = table.Column<string>(type: "varchar(36)", nullable: false),
                    LastUpdatedStamp = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CreatedStamp = table.Column<DateTime>(type: "datetime2", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VEHICLE_CONTENTS", x => new { x.VehicleId, x.ContentId });
                    table.ForeignKey(
                        name: "FK_VEHICLE_CONTENTS_CONTENT_ContentId",
                        column: x => x.ContentId,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "FK_VEHICLE_CONTENTS_VEHICLES_VehicleId",
                        column: x => x.VehicleId,
                        principalTable: "VEHICLES",
                        principalColumn: "VEHICLE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_PREF_DOC_TYPE_TPL",
                columns: table => new
                {
                    PARTYPREFDOCTYPETPLID = table.Column<string>(name: "PARTY_PREF_DOC_TYPE_TPL_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    INVOICETYPEID = table.Column<string>(name: "INVOICE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERTYPEID = table.Column<string>(name: "ORDER_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUOTETYPEID = table.Column<string>(name: "QUOTE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CUSTOMSCREENID = table.Column<string>(name: "CUSTOM_SCREEN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_PREF_DOC_TYPE_TPL", x => x.PARTYPREFDOCTYPETPLID);
                    table.ForeignKey(
                        name: "PAPDTT_TO_INVT",
                        column: x => x.INVOICETYPEID,
                        principalTable: "INVOICE_TYPE",
                        principalColumn: "INVOICE_TYPE_ID");
                    table.ForeignKey(
                        name: "PAPDTT_TO_ORDT",
                        column: x => x.ORDERTYPEID,
                        principalTable: "ORDER_TYPE",
                        principalColumn: "ORDER_TYPE_ID");
                    table.ForeignKey(
                        name: "PAPDTT_TO_PAP",
                        column: x => x.PARTYID,
                        principalTable: "PARTY_ACCTG_PREFERENCE",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PAPDTT_TO_PTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PAPDTT_TO_QUOT",
                        column: x => x.QUOTETYPEID,
                        principalTable: "QUOTE_TYPE",
                        principalColumn: "QUOTE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT",
                columns: table => new
                {
                    PAYMENTID = table.Column<string>(name: "PAYMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PAYMENTTYPEID = table.Column<string>(name: "PAYMENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PAYMENTMETHODTYPEID = table.Column<string>(name: "PAYMENT_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PAYMENTMETHODID = table.Column<string>(name: "PAYMENT_METHOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PAYMENTGATEWAYRESPONSEID = table.Column<string>(name: "PAYMENT_GATEWAY_RESPONSE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PAYMENTPREFERENCEID = table.Column<string>(name: "PAYMENT_PREFERENCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYIDFROM = table.Column<string>(name: "PARTY_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYIDTO = table.Column<string>(name: "PARTY_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ROLETYPEIDTO = table.Column<string>(name: "ROLE_TYPE_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    EFFECTIVEDATE = table.Column<DateTime>(name: "EFFECTIVE_DATE", type: "datetime", nullable: true),
                    PAYMENTREFNUM = table.Column<string>(name: "PAYMENT_REF_NUM", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    AMOUNT = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    CURRENCYUOMID = table.Column<string>(name: "CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    FINACCOUNTTRANSID = table.Column<string>(name: "FIN_ACCOUNT_TRANS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    OVERRIDEGLACCOUNTID = table.Column<string>(name: "OVERRIDE_GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ACTUALCURRENCYAMOUNT = table.Column<decimal>(name: "ACTUAL_CURRENCY_AMOUNT", type: "decimal(18,2)", nullable: true),
                    ACTUALCURRENCYUOMID = table.Column<string>(name: "ACTUAL_CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT", x => x.PAYMENTID);
                    table.ForeignKey(
                        name: "PAYMENT_ACUOM",
                        column: x => x.ACTUALCURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "PAYMENT_CUOM",
                        column: x => x.CURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "PAYMENT_FACTX",
                        column: x => x.FINACCOUNTTRANSID,
                        principalTable: "FIN_ACCOUNT_TRANS",
                        principalColumn: "FIN_ACCOUNT_TRANS_ID");
                    table.ForeignKey(
                        name: "PAYMENT_FPTY",
                        column: x => x.PARTYIDFROM,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PAYMENT_ORDPMPRF",
                        column: x => x.PAYMENTPREFERENCEID,
                        principalTable: "ORDER_PAYMENT_PREFERENCE",
                        principalColumn: "ORDER_PAYMENT_PREFERENCE_ID");
                    table.ForeignKey(
                        name: "PAYMENT_ORGLA",
                        column: x => x.OVERRIDEGLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "PAYMENT_PAYGATR",
                        column: x => x.PAYMENTGATEWAYRESPONSEID,
                        principalTable: "PAYMENT_GATEWAY_RESPONSE",
                        principalColumn: "PAYMENT_GATEWAY_RESPONSE_ID");
                    table.ForeignKey(
                        name: "PAYMENT_PMETH",
                        column: x => x.PAYMENTMETHODID,
                        principalTable: "PAYMENT_METHOD",
                        principalColumn: "PAYMENT_METHOD_ID");
                    table.ForeignKey(
                        name: "PAYMENT_PMETH_TP",
                        column: x => x.PAYMENTMETHODTYPEID,
                        principalTable: "PAYMENT_METHOD_TYPE",
                        principalColumn: "PAYMENT_METHOD_TYPE_ID");
                    table.ForeignKey(
                        name: "PAYMENT_PMTYP",
                        column: x => x.PAYMENTTYPEID,
                        principalTable: "PAYMENT_TYPE",
                        principalColumn: "PAYMENT_TYPE_ID");
                    table.ForeignKey(
                        name: "PAYMENT_STTSITM",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "PAYMENT_TPTY",
                        column: x => x.PARTYIDTO,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PAYMENT_TRTP",
                        column: x => x.ROLETYPEIDTO,
                        principalTable: "ROLE_TYPE",
                        principalColumn: "ROLE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_GATEWAY_RESP_MSG",
                columns: table => new
                {
                    PAYMENTGATEWAYRESPMSGID = table.Column<string>(name: "PAYMENT_GATEWAY_RESP_MSG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PAYMENTGATEWAYRESPONSEID = table.Column<string>(name: "PAYMENT_GATEWAY_RESPONSE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PGRMESSAGE = table.Column<string>(name: "PGR_MESSAGE", type: "text", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_GATEWAY_RESP_MSG", x => x.PAYMENTGATEWAYRESPMSGID);
                    table.ForeignKey(
                        name: "PAYGATRM_PAYGR",
                        column: x => x.PAYMENTGATEWAYRESPONSEID,
                        principalTable: "PAYMENT_GATEWAY_RESPONSE",
                        principalColumn: "PAYMENT_GATEWAY_RESPONSE_ID");
                });

            migrationBuilder.CreateTable(
                name: "RETURN_CONTACT_MECH",
                columns: table => new
                {
                    RETURNID = table.Column<string>(name: "RETURN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTMECHPURPOSETYPEID = table.Column<string>(name: "CONTACT_MECH_PURPOSE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RETURN_CONTACT_MECH", x => new { x.RETURNID, x.CONTACTMECHPURPOSETYPEID, x.CONTACTMECHID });
                    table.ForeignKey(
                        name: "RETURN_CMECH_CM",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "RETURN_CMECH_CMPT",
                        column: x => x.CONTACTMECHPURPOSETYPEID,
                        principalTable: "CONTACT_MECH_PURPOSE_TYPE",
                        principalColumn: "CONTACT_MECH_PURPOSE_TYPE_ID");
                    table.ForeignKey(
                        name: "RETURN_CMECH_HDR",
                        column: x => x.RETURNID,
                        principalTable: "RETURN_HEADER",
                        principalColumn: "RETURN_ID");
                });

            migrationBuilder.CreateTable(
                name: "RETURN_STATUS",
                columns: table => new
                {
                    RETURNSTATUSID = table.Column<string>(name: "RETURN_STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RETURNID = table.Column<string>(name: "RETURN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RETURNITEMSEQID = table.Column<string>(name: "RETURN_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CHANGEBYUSERLOGINID = table.Column<string>(name: "CHANGE_BY_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    STATUSDATETIME = table.Column<DateTime>(name: "STATUS_DATETIME", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RETURN_STATUS", x => x.RETURNSTATUSID);
                    table.ForeignKey(
                        name: "RTN_STTS_RTN",
                        column: x => x.RETURNID,
                        principalTable: "RETURN_HEADER",
                        principalColumn: "RETURN_ID");
                    table.ForeignKey(
                        name: "RTN_STTS_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "RTN_STTS_USRLGN",
                        column: x => x.CHANGEBYUSERLOGINID,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT",
                columns: table => new
                {
                    SHIPMENTID = table.Column<string>(name: "SHIPMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPMENTTYPEID = table.Column<string>(name: "SHIPMENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRIMARYORDERID = table.Column<string>(name: "PRIMARY_ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRIMARYRETURNID = table.Column<string>(name: "PRIMARY_RETURN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRIMARYSHIPGROUPSEQID = table.Column<string>(name: "PRIMARY_SHIP_GROUP_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PICKLISTBINID = table.Column<string>(name: "PICKLIST_BIN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ESTIMATEDREADYDATE = table.Column<DateTime>(name: "ESTIMATED_READY_DATE", type: "datetime", nullable: true),
                    ESTIMATEDSHIPDATE = table.Column<DateTime>(name: "ESTIMATED_SHIP_DATE", type: "datetime", nullable: true),
                    ESTIMATEDSHIPWORKEFFID = table.Column<string>(name: "ESTIMATED_SHIP_WORK_EFF_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ESTIMATEDARRIVALDATE = table.Column<DateTime>(name: "ESTIMATED_ARRIVAL_DATE", type: "datetime", nullable: true),
                    ESTIMATEDARRIVALWORKEFFID = table.Column<string>(name: "ESTIMATED_ARRIVAL_WORK_EFF_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LATESTCANCELDATE = table.Column<DateTime>(name: "LATEST_CANCEL_DATE", type: "datetime", nullable: true),
                    ESTIMATEDSHIPCOST = table.Column<decimal>(name: "ESTIMATED_SHIP_COST", type: "decimal(18,2)", nullable: true),
                    CURRENCYUOMID = table.Column<string>(name: "CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HANDLINGINSTRUCTIONS = table.Column<string>(name: "HANDLING_INSTRUCTIONS", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ORIGINFACILITYID = table.Column<string>(name: "ORIGIN_FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESTINATIONFACILITYID = table.Column<string>(name: "DESTINATION_FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORIGINCONTACTMECHID = table.Column<string>(name: "ORIGIN_CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORIGINTELECOMNUMBERID = table.Column<string>(name: "ORIGIN_TELECOM_NUMBER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESTINATIONCONTACTMECHID = table.Column<string>(name: "DESTINATION_CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESTINATIONTELECOMNUMBERID = table.Column<string>(name: "DESTINATION_TELECOM_NUMBER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYIDTO = table.Column<string>(name: "PARTY_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYIDFROM = table.Column<string>(name: "PARTY_ID_FROM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ADDITIONALSHIPPINGCHARGE = table.Column<decimal>(name: "ADDITIONAL_SHIPPING_CHARGE", type: "decimal(18,2)", nullable: true),
                    ADDTLSHIPPINGCHARGEDESC = table.Column<string>(name: "ADDTL_SHIPPING_CHARGE_DESC", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CREATEDDATE = table.Column<DateTime>(name: "CREATED_DATE", type: "datetime", nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDDATE = table.Column<DateTime>(name: "LAST_MODIFIED_DATE", type: "datetime", nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT", x => x.SHIPMENTID);
                    table.ForeignKey(
                        name: "SHPMNT_CUOM",
                        column: x => x.CURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "SHPMNT_DFAC",
                        column: x => x.DESTINATIONFACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "SHPMNT_DPAD",
                        column: x => x.DESTINATIONCONTACTMECHID,
                        principalTable: "POSTAL_ADDRESS",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "SHPMNT_DTCN",
                        column: x => x.DESTINATIONTELECOMNUMBERID,
                        principalTable: "TELECOM_NUMBER",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "SHPMNT_EARRWEFF",
                        column: x => x.ESTIMATEDARRIVALWORKEFFID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                    table.ForeignKey(
                        name: "SHPMNT_ESHWEFF",
                        column: x => x.ESTIMATEDSHIPWORKEFFID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                    table.ForeignKey(
                        name: "SHPMNT_OFAC",
                        column: x => x.ORIGINFACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "SHPMNT_OPAD",
                        column: x => x.ORIGINCONTACTMECHID,
                        principalTable: "POSTAL_ADDRESS",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "SHPMNT_OTCN",
                        column: x => x.ORIGINTELECOMNUMBERID,
                        principalTable: "TELECOM_NUMBER",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "SHPMNT_PKLSTBIN",
                        column: x => x.PICKLISTBINID,
                        principalTable: "PICKLIST_BIN",
                        principalColumn: "PICKLIST_BIN_ID");
                    table.ForeignKey(
                        name: "SHPMNT_PODR",
                        column: x => x.PRIMARYORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                    table.ForeignKey(
                        name: "SHPMNT_PRTNHDR",
                        column: x => x.PRIMARYRETURNID,
                        principalTable: "RETURN_HEADER",
                        principalColumn: "RETURN_ID");
                    table.ForeignKey(
                        name: "SHPMNT_PRTYFM",
                        column: x => x.PARTYIDFROM,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "SHPMNT_PRTYTO",
                        column: x => x.PARTYIDTO,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "SHPMNT_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "SHPMNT_TYPE",
                        column: x => x.SHIPMENTTYPEID,
                        principalTable: "SHIPMENT_TYPE",
                        principalColumn: "SHIPMENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "TRACKING_CODE_ORDER_RETURN",
                columns: table => new
                {
                    RETURNID = table.Column<string>(name: "RETURN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TRACKINGCODETYPEID = table.Column<string>(name: "TRACKING_CODE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TRACKINGCODEID = table.Column<string>(name: "TRACKING_CODE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ISBILLABLE = table.Column<string>(name: "IS_BILLABLE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    SITEID = table.Column<string>(name: "SITE_ID", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    HASEXPORTED = table.Column<string>(name: "HAS_EXPORTED", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    AFFILIATEREFERREDTIMESTAMP = table.Column<DateTime>(name: "AFFILIATE_REFERRED_TIME_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TRACKING_CODE_ORDER_RETURN", x => new { x.RETURNID, x.ORDERID, x.TRACKINGCODETYPEID });
                    table.ForeignKey(
                        name: "TKNG_CODODR_ODRTN",
                        column: x => x.ORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                    table.ForeignKey(
                        name: "TKNG_CODODR_RTN",
                        column: x => x.RETURNID,
                        principalTable: "RETURN_HEADER",
                        principalColumn: "RETURN_ID");
                    table.ForeignKey(
                        name: "TKNG_CODODR_RTNTCD",
                        column: x => x.TRACKINGCODEID,
                        principalTable: "TRACKING_CODE",
                        principalColumn: "TRACKING_CODE_ID");
                    table.ForeignKey(
                        name: "TKNG_CODODR_RTNTYP",
                        column: x => x.TRACKINGCODETYPEID,
                        principalTable: "TRACKING_CODE_TYPE",
                        principalColumn: "TRACKING_CODE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_PROFILE_DEFAULT",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DEFAULTSHIPADDR = table.Column<string>(name: "DEFAULT_SHIP_ADDR", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DEFAULTBILLADDR = table.Column<string>(name: "DEFAULT_BILL_ADDR", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DEFAULTPAYMETH = table.Column<string>(name: "DEFAULT_PAY_METH", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DEFAULTSHIPMETH = table.Column<string>(name: "DEFAULT_SHIP_METH", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_PROFILE_DEFAULT", x => new { x.PARTYID, x.PRODUCTSTOREID });
                    table.ForeignKey(
                        name: "PARTY_PROF_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PARTY_PROF_PSTORE",
                        column: x => x.PRODUCTSTOREID,
                        principalTable: "PRODUCT_STORE",
                        principalColumn: "PRODUCT_STORE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_STORE_CATALOG",
                columns: table => new
                {
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODCATALOGID = table.Column<string>(name: "PROD_CATALOG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_STORE_CATALOG", x => new { x.PRODUCTSTOREID, x.PRODCATALOGID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PS_CAT_CATALOG",
                        column: x => x.PRODCATALOGID,
                        principalTable: "PROD_CATALOG",
                        principalColumn: "PROD_CATALOG_ID");
                    table.ForeignKey(
                        name: "PS_CAT_PRDSTR",
                        column: x => x.PRODUCTSTOREID,
                        principalTable: "PRODUCT_STORE",
                        principalColumn: "PRODUCT_STORE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_STORE_EMAIL_SETTING",
                columns: table => new
                {
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    EMAILTYPE = table.Column<string>(name: "EMAIL_TYPE", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    BODYSCREENLOCATION = table.Column<string>(name: "BODY_SCREEN_LOCATION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    XSLFOATTACHSCREENLOCATION = table.Column<string>(name: "XSLFO_ATTACH_SCREEN_LOCATION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    FROMADDRESS = table.Column<string>(name: "FROM_ADDRESS", type: "varchar(320)", unicode: false, maxLength: 320, nullable: true),
                    CCADDRESS = table.Column<string>(name: "CC_ADDRESS", type: "varchar(320)", unicode: false, maxLength: 320, nullable: true),
                    BCCADDRESS = table.Column<string>(name: "BCC_ADDRESS", type: "varchar(320)", unicode: false, maxLength: 320, nullable: true),
                    SUBJECT = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CONTENTTYPE = table.Column<string>(name: "CONTENT_TYPE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_STORE_EMAIL_SETTING", x => new { x.PRODUCTSTOREID, x.EMAILTYPE });
                    table.ForeignKey(
                        name: "PRDSTREM_ENUM",
                        column: x => x.EMAILTYPE,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "PRDSTREM_PRDS",
                        column: x => x.PRODUCTSTOREID,
                        principalTable: "PRODUCT_STORE",
                        principalColumn: "PRODUCT_STORE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_STORE_FACILITY",
                columns: table => new
                {
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_STORE_FACILITY", x => new { x.PRODUCTSTOREID, x.FACILITYID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PRDSTRFAC_FAC",
                        column: x => x.FACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "PRDSTRFAC_PRDS",
                        column: x => x.PRODUCTSTOREID,
                        principalTable: "PRODUCT_STORE",
                        principalColumn: "PRODUCT_STORE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_STORE_FIN_ACT_SETTING",
                columns: table => new
                {
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FINACCOUNTTYPEID = table.Column<string>(name: "FIN_ACCOUNT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    REQUIREPINCODE = table.Column<string>(name: "REQUIRE_PIN_CODE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    VALIDATEGCFINACCT = table.Column<string>(name: "VALIDATE_G_C_FIN_ACCT", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ACCOUNTCODELENGTH = table.Column<int>(name: "ACCOUNT_CODE_LENGTH", type: "int", nullable: true),
                    PINCODELENGTH = table.Column<int>(name: "PIN_CODE_LENGTH", type: "int", nullable: true),
                    ACCOUNTVALIDDAYS = table.Column<int>(name: "ACCOUNT_VALID_DAYS", type: "int", nullable: true),
                    AUTHVALIDDAYS = table.Column<int>(name: "AUTH_VALID_DAYS", type: "int", nullable: true),
                    PURCHASESURVEYID = table.Column<string>(name: "PURCHASE_SURVEY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PURCHSURVEYSENDTO = table.Column<string>(name: "PURCH_SURVEY_SEND_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PURCHSURVEYCOPYME = table.Column<string>(name: "PURCH_SURVEY_COPY_ME", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ALLOWAUTHTONEGATIVE = table.Column<string>(name: "ALLOW_AUTH_TO_NEGATIVE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    MINBALANCE = table.Column<decimal>(name: "MIN_BALANCE", type: "decimal(18,2)", nullable: true),
                    REPLENISHTHRESHOLD = table.Column<decimal>(name: "REPLENISH_THRESHOLD", type: "decimal(18,2)", nullable: true),
                    REPLENISHMETHODENUMID = table.Column<string>(name: "REPLENISH_METHOD_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_STORE_FIN_ACT_SETTI", x => new { x.PRODUCTSTOREID, x.FINACCOUNTTYPEID });
                    table.ForeignKey(
                        name: "PRSTFNAC_FARPMTD",
                        column: x => x.REPLENISHMETHODENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "PRSTFNAC_FNACTP",
                        column: x => x.FINACCOUNTTYPEID,
                        principalTable: "FIN_ACCOUNT_TYPE",
                        principalColumn: "FIN_ACCOUNT_TYPE_ID");
                    table.ForeignKey(
                        name: "PRSTFNAC_PRDS",
                        column: x => x.PRODUCTSTOREID,
                        principalTable: "PRODUCT_STORE",
                        principalColumn: "PRODUCT_STORE_ID");
                    table.ForeignKey(
                        name: "PRSTFNAC_SRVY",
                        column: x => x.PURCHASESURVEYID,
                        principalTable: "SURVEY",
                        principalColumn: "SURVEY_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_STORE_GROUP_MEMBER",
                columns: table => new
                {
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTSTOREGROUPID = table.Column<string>(name: "PRODUCT_STORE_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_STORE_GROUP_MEMBER", x => new { x.PRODUCTSTOREID, x.PRODUCTSTOREGROUPID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PRDSTR_MEM_PRDSTR",
                        column: x => x.PRODUCTSTOREID,
                        principalTable: "PRODUCT_STORE",
                        principalColumn: "PRODUCT_STORE_ID");
                    table.ForeignKey(
                        name: "PRDSTR_MEM_PSGRP",
                        column: x => x.PRODUCTSTOREGROUPID,
                        principalTable: "PRODUCT_STORE_GROUP",
                        principalColumn: "PRODUCT_STORE_GROUP_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_STORE_KEYWORD_OVRD",
                columns: table => new
                {
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    KEYWORD = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    TARGET = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    TARGETTYPEENUMID = table.Column<string>(name: "TARGET_TYPE_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_STORE_KEYWORD_OVRD", x => new { x.PRODUCTSTOREID, x.KEYWORD, x.FROMDATE });
                    table.ForeignKey(
                        name: "PRDSTRKWO_ENM",
                        column: x => x.TARGETTYPEENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "PRDSTRKWO_PRDS",
                        column: x => x.PRODUCTSTOREID,
                        principalTable: "PRODUCT_STORE",
                        principalColumn: "PRODUCT_STORE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_STORE_PAYMENT_SETTING",
                columns: table => new
                {
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PAYMENTMETHODTYPEID = table.Column<string>(name: "PAYMENT_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PAYMENTSERVICETYPEENUMID = table.Column<string>(name: "PAYMENT_SERVICE_TYPE_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PAYMENTSERVICE = table.Column<string>(name: "PAYMENT_SERVICE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PAYMENTCUSTOMMETHODID = table.Column<string>(name: "PAYMENT_CUSTOM_METHOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PAYMENTGATEWAYCONFIGID = table.Column<string>(name: "PAYMENT_GATEWAY_CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PAYMENTPROPERTIESPATH = table.Column<string>(name: "PAYMENT_PROPERTIES_PATH", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    APPLYTOALLPRODUCTS = table.Column<string>(name: "APPLY_TO_ALL_PRODUCTS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_STORE_PAYMENT_SETTI", x => new { x.PRODUCTSTOREID, x.PAYMENTMETHODTYPEID, x.PAYMENTSERVICETYPEENUMID });
                    table.ForeignKey(
                        name: "PRDS_PS_CUS_MET",
                        column: x => x.PAYMENTCUSTOMMETHODID,
                        principalTable: "CUSTOM_METHOD",
                        principalColumn: "CUSTOM_METHOD_ID");
                    table.ForeignKey(
                        name: "PRDS_PS_ENUM",
                        column: x => x.PAYMENTSERVICETYPEENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "PRDS_PS_PGC",
                        column: x => x.PAYMENTGATEWAYCONFIGID,
                        principalTable: "PAYMENT_GATEWAY_CONFIG",
                        principalColumn: "PAYMENT_GATEWAY_CONFIG_ID");
                    table.ForeignKey(
                        name: "PRDS_PS_PMNTTP",
                        column: x => x.PAYMENTMETHODTYPEID,
                        principalTable: "PAYMENT_METHOD_TYPE",
                        principalColumn: "PAYMENT_METHOD_TYPE_ID");
                    table.ForeignKey(
                        name: "PRDS_PS_PRDS",
                        column: x => x.PRODUCTSTOREID,
                        principalTable: "PRODUCT_STORE",
                        principalColumn: "PRODUCT_STORE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_STORE_ROLE",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_STORE_ROLE", x => new { x.PARTYID, x.ROLETYPEID, x.PRODUCTSTOREID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PRDSTRRLE_PRDS",
                        column: x => x.PRODUCTSTOREID,
                        principalTable: "PRODUCT_STORE",
                        principalColumn: "PRODUCT_STORE_ID");
                    table.ForeignKey(
                        name: "PRDSTRRLE_PRLE",
                        columns: x => new { x.PARTYID, x.ROLETYPEID },
                        principalTable: "PARTY_ROLE",
                        principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_STORE_SURVEY_APPL",
                columns: table => new
                {
                    PRODUCTSTORESURVEYID = table.Column<string>(name: "PRODUCT_STORE_SURVEY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SURVEYAPPLTYPEID = table.Column<string>(name: "SURVEY_APPL_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    GROUPNAME = table.Column<string>(name: "GROUP_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SURVEYID = table.Column<string>(name: "SURVEY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTCATEGORYID = table.Column<string>(name: "PRODUCT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    SURVEYTEMPLATE = table.Column<string>(name: "SURVEY_TEMPLATE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    RESULTTEMPLATE = table.Column<string>(name: "RESULT_TEMPLATE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_STORE_SURVEY_APPL", x => x.PRODUCTSTORESURVEYID);
                    table.ForeignKey(
                        name: "PRDSTRSVY_PRDS",
                        column: x => x.PRODUCTSTOREID,
                        principalTable: "PRODUCT_STORE",
                        principalColumn: "PRODUCT_STORE_ID");
                    table.ForeignKey(
                        name: "PRDSTRSVY_SATP",
                        column: x => x.SURVEYAPPLTYPEID,
                        principalTable: "SURVEY_APPL_TYPE",
                        principalColumn: "SURVEY_APPL_TYPE_ID");
                    table.ForeignKey(
                        name: "PRDSTRSVY_SRVY",
                        column: x => x.SURVEYID,
                        principalTable: "SURVEY",
                        principalColumn: "SURVEY_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_STORE_TELECOM_SETTING",
                columns: table => new
                {
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TELECOMMETHODTYPEID = table.Column<string>(name: "TELECOM_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TELECOMMSGTYPEENUMID = table.Column<string>(name: "TELECOM_MSG_TYPE_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TELECOMCUSTOMMETHODID = table.Column<string>(name: "TELECOM_CUSTOM_METHOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TELECOMGATEWAYCONFIGID = table.Column<string>(name: "TELECOM_GATEWAY_CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_STORE_TELECOM_SETTI", x => new { x.PRODUCTSTOREID, x.TELECOMMETHODTYPEID, x.TELECOMMSGTYPEENUMID });
                    table.ForeignKey(
                        name: "PRDS_TS_CUS_MET",
                        column: x => x.TELECOMCUSTOMMETHODID,
                        principalTable: "CUSTOM_METHOD",
                        principalColumn: "CUSTOM_METHOD_ID");
                    table.ForeignKey(
                        name: "PRDS_TS_ENUM",
                        column: x => x.TELECOMMSGTYPEENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "PRDS_TS_PGC",
                        column: x => x.TELECOMGATEWAYCONFIGID,
                        principalTable: "TELECOM_GATEWAY_CONFIG",
                        principalColumn: "TELECOM_GATEWAY_CONFIG_ID");
                    table.ForeignKey(
                        name: "PRDS_TS_PRDS",
                        column: x => x.PRODUCTSTOREID,
                        principalTable: "PRODUCT_STORE",
                        principalColumn: "PRODUCT_STORE_ID");
                    table.ForeignKey(
                        name: "PRDS_TS_TELTP",
                        column: x => x.TELECOMMETHODTYPEID,
                        principalTable: "TELECOM_METHOD_TYPE",
                        principalColumn: "TELECOM_METHOD_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_STORE_VENDOR_PAYMENT",
                columns: table => new
                {
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    VENDORPARTYID = table.Column<string>(name: "VENDOR_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PAYMENTMETHODTYPEID = table.Column<string>(name: "PAYMENT_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CREDITCARDENUMID = table.Column<string>(name: "CREDIT_CARD_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_STORE_VENDOR_PAYMEN", x => new { x.PRODUCTSTOREID, x.VENDORPARTYID, x.PAYMENTMETHODTYPEID, x.CREDITCARDENUMID });
                    table.ForeignKey(
                        name: "PRDSTRVPM_CCEN",
                        column: x => x.CREDITCARDENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "PRDSTRVPM_PMMT",
                        column: x => x.PAYMENTMETHODTYPEID,
                        principalTable: "PAYMENT_METHOD_TYPE",
                        principalColumn: "PAYMENT_METHOD_TYPE_ID");
                    table.ForeignKey(
                        name: "PRDSTRVPM_PRDS",
                        column: x => x.PRODUCTSTOREID,
                        principalTable: "PRODUCT_STORE",
                        principalColumn: "PRODUCT_STORE_ID");
                    table.ForeignKey(
                        name: "PRDSTRVPM_VPTY",
                        column: x => x.VENDORPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_STORE_VENDOR_SHIPMENT",
                columns: table => new
                {
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    VENDORPARTYID = table.Column<string>(name: "VENDOR_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPMENTMETHODTYPEID = table.Column<string>(name: "SHIPMENT_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CARRIERPARTYID = table.Column<string>(name: "CARRIER_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_STORE_VENDOR_SHIPME", x => new { x.PRODUCTSTOREID, x.VENDORPARTYID, x.SHIPMENTMETHODTYPEID, x.CARRIERPARTYID });
                    table.ForeignKey(
                        name: "PRDSTRVSH_CPTY",
                        column: x => x.CARRIERPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PRDSTRVSH_PRDS",
                        column: x => x.PRODUCTSTOREID,
                        principalTable: "PRODUCT_STORE",
                        principalColumn: "PRODUCT_STORE_ID");
                    table.ForeignKey(
                        name: "PRDSTRVSH_SHMT",
                        column: x => x.SHIPMENTMETHODTYPEID,
                        principalTable: "SHIPMENT_METHOD_TYPE",
                        principalColumn: "SHIPMENT_METHOD_TYPE_ID");
                    table.ForeignKey(
                        name: "PRDSTRVSH_VPTY",
                        column: x => x.VENDORPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                });

            migrationBuilder.CreateTable(
                name: "QUOTE",
                columns: table => new
                {
                    QUOTEID = table.Column<string>(name: "QUOTE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    QUOTETYPEID = table.Column<string>(name: "QUOTE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    VEHICLEID = table.Column<string>(name: "VEHICLE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ISSUEDATE = table.Column<DateTime>(name: "ISSUE_DATE", type: "datetime", nullable: false),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CURRENCYUOMID = table.Column<string>(name: "CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SALESCHANNELENUMID = table.Column<string>(name: "SALES_CHANNEL_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    VALIDFROMDATE = table.Column<DateTime>(name: "VALID_FROM_DATE", type: "datetime", nullable: false),
                    VALIDTHRUDATE = table.Column<DateTime>(name: "VALID_THRU_DATE", type: "datetime", nullable: false),
                    QUOTENAME = table.Column<string>(name: "QUOTE_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    GRANDTOTAL = table.Column<decimal>(name: "GRAND_TOTAL", type: "decimal(18,2)", nullable: true),
                    CURRENTMILEAGE = table.Column<int>(name: "CURRENT_MILEAGE", type: "int", nullable: true),
                    CUSTOMERREMARKS = table.Column<string>(name: "CUSTOMER_REMARKS", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    INTERNALREMARKS = table.Column<string>(name: "INTERNAL_REMARKS", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QUOTE", x => x.QUOTEID);
                    table.ForeignKey(
                        name: "QUOTE_CHANNEL",
                        column: x => x.SALESCHANNELENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "QUOTE_CUOM",
                        column: x => x.CURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "QUOTE_PRDS",
                        column: x => x.PRODUCTSTOREID,
                        principalTable: "PRODUCT_STORE",
                        principalColumn: "PRODUCT_STORE_ID");
                    table.ForeignKey(
                        name: "QUOTE_PRTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "QUOTE_QTTYP",
                        column: x => x.QUOTETYPEID,
                        principalTable: "QUOTE_TYPE",
                        principalColumn: "QUOTE_TYPE_ID");
                    table.ForeignKey(
                        name: "QUOTE_STATUS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "QUOTE_VEHICLE",
                        column: x => x.VEHICLEID,
                        principalTable: "VEHICLES",
                        principalColumn: "VEHICLE_ID");
                });

            migrationBuilder.CreateTable(
                name: "SEGMENT_GROUP",
                columns: table => new
                {
                    SEGMENTGROUPID = table.Column<string>(name: "SEGMENT_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SEGMENTGROUPTYPEID = table.Column<string>(name: "SEGMENT_GROUP_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SEGMENT_GROUP", x => x.SEGMENTGROUPID);
                    table.ForeignKey(
                        name: "SGMTGRP_PRST",
                        column: x => x.PRODUCTSTOREID,
                        principalTable: "PRODUCT_STORE",
                        principalColumn: "PRODUCT_STORE_ID");
                    table.ForeignKey(
                        name: "SGMTGRP_TYPE",
                        column: x => x.SEGMENTGROUPTYPEID,
                        principalTable: "SEGMENT_GROUP_TYPE",
                        principalColumn: "SEGMENT_GROUP_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "SERVICE_RATES",
                columns: table => new
                {
                    ServiceRateId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    MakeId = table.Column<string>(type: "varchar(36)", nullable: false),
                    ModelId = table.Column<string>(type: "varchar(36)", nullable: false),
                    ProductStoreId = table.Column<string>(type: "varchar(36)", nullable: false),
                    Rate = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    FromDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ThruDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LastUpdatedStamp = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CreatedStamp = table.Column<DateTime>(type: "datetime2", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SERVICE_RATES", x => x.ServiceRateId);
                    table.ForeignKey(
                        name: "FK_SERVICE_RATES_PRODUCT_CATEGORY_MakeId",
                        column: x => x.MakeId,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "FK_SERVICE_RATES_PRODUCT_CATEGORY_ModelId",
                        column: x => x.ModelId,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "FK_SERVICE_RATES_PRODUCT_STORE_ProductStoreId",
                        column: x => x.ProductStoreId,
                        principalTable: "PRODUCT_STORE",
                        principalColumn: "PRODUCT_STORE_ID");
                });

            migrationBuilder.CreateTable(
                name: "TAX_AUTHORITY_RATE_PRODUCT",
                columns: table => new
                {
                    TAXAUTHORITYRATESEQID = table.Column<string>(name: "TAX_AUTHORITY_RATE_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TAXAUTHGEOID = table.Column<string>(name: "TAX_AUTH_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TAXAUTHPARTYID = table.Column<string>(name: "TAX_AUTH_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TAXAUTHORITYRATETYPEID = table.Column<string>(name: "TAX_AUTHORITY_RATE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTCATEGORYID = table.Column<string>(name: "PRODUCT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TITLETRANSFERENUMID = table.Column<string>(name: "TITLE_TRANSFER_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    MINITEMPRICE = table.Column<decimal>(name: "MIN_ITEM_PRICE", type: "decimal(18,2)", nullable: true),
                    MINPURCHASE = table.Column<decimal>(name: "MIN_PURCHASE", type: "decimal(18,2)", nullable: true),
                    TAXSHIPPING = table.Column<string>(name: "TAX_SHIPPING", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    TAXPERCENTAGE = table.Column<decimal>(name: "TAX_PERCENTAGE", type: "decimal(18,6)", nullable: true),
                    TAXPROMOTIONS = table.Column<string>(name: "TAX_PROMOTIONS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ISTAXINSHIPPINGPRICE = table.Column<string>(name: "IS_TAX_IN_SHIPPING_PRICE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TAX_AUTHORITY_RATE_PRODUCT", x => x.TAXAUTHORITYRATESEQID);
                    table.ForeignKey(
                        name: "TAXAUTHRTEP_PCAT",
                        column: x => x.PRODUCTCATEGORYID,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "TAXAUTHRTEP_PSTR",
                        column: x => x.PRODUCTSTOREID,
                        principalTable: "PRODUCT_STORE",
                        principalColumn: "PRODUCT_STORE_ID");
                    table.ForeignKey(
                        name: "TAXAUTHRTEP_RTTP",
                        column: x => x.TAXAUTHORITYRATETYPEID,
                        principalTable: "TAX_AUTHORITY_RATE_TYPE",
                        principalColumn: "TAX_AUTHORITY_RATE_TYPE_ID");
                    table.ForeignKey(
                        name: "TAXAUTHRTEP_TXA",
                        columns: x => new { x.TAXAUTHGEOID, x.TAXAUTHPARTYID },
                        principalTable: "TAX_AUTHORITY",
                        principalColumns: new[] { "TAX_AUTH_GEO_ID", "TAX_AUTH_PARTY_ID" });
                });

            migrationBuilder.CreateTable(
                name: "WEB_SITE",
                columns: table => new
                {
                    WEBSITEID = table.Column<string>(name: "WEB_SITE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SITENAME = table.Column<string>(name: "SITE_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    HTTPHOST = table.Column<string>(name: "HTTP_HOST", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    HTTPPORT = table.Column<string>(name: "HTTP_PORT", type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    HTTPSHOST = table.Column<string>(name: "HTTPS_HOST", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    HTTPSPORT = table.Column<string>(name: "HTTPS_PORT", type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ENABLEHTTPS = table.Column<string>(name: "ENABLE_HTTPS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    WEBAPPPATH = table.Column<string>(name: "WEBAPP_PATH", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    STANDARDCONTENTPREFIX = table.Column<string>(name: "STANDARD_CONTENT_PREFIX", type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    SECURECONTENTPREFIX = table.Column<string>(name: "SECURE_CONTENT_PREFIX", type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    COOKIEDOMAIN = table.Column<string>(name: "COOKIE_DOMAIN", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    VISUALTHEMESETID = table.Column<string>(name: "VISUAL_THEME_SET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true),
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ALLOWPRODUCTSTORECHANGE = table.Column<string>(name: "ALLOW_PRODUCT_STORE_CHANGE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    HOSTEDPATHALIAS = table.Column<string>(name: "HOSTED_PATH_ALIAS", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    ISDEFAULT = table.Column<string>(name: "IS_DEFAULT", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    DISPLAYMAINTENANCEPAGE = table.Column<string>(name: "DISPLAY_MAINTENANCE_PAGE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WEB_SITE", x => x.WEBSITEID);
                    table.ForeignKey(
                        name: "WEB_SITE_PRDS",
                        column: x => x.PRODUCTSTOREID,
                        principalTable: "PRODUCT_STORE",
                        principalColumn: "PRODUCT_STORE_ID");
                    table.ForeignKey(
                        name: "WEB_SITE_THEME_SET",
                        column: x => x.VISUALTHEMESETID,
                        principalTable: "VISUAL_THEME_SET",
                        principalColumn: "VISUAL_THEME_SET_ID");
                });

            migrationBuilder.CreateTable(
                name: "PARTY_NEED",
                columns: table => new
                {
                    PARTYNEEDID = table.Column<string>(name: "PARTY_NEED_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYTYPEID = table.Column<string>(name: "PARTY_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    NEEDTYPEID = table.Column<string>(name: "NEED_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    COMMUNICATIONEVENTID = table.Column<string>(name: "COMMUNICATION_EVENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTCATEGORYID = table.Column<string>(name: "PRODUCT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    VISITID = table.Column<string>(name: "VISIT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DATETIMERECORDED = table.Column<DateTime>(name: "DATETIME_RECORDED", type: "datetime", nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PARTY_NEED", x => new { x.PARTYNEEDID, x.PARTYID, x.ROLETYPEID });
                    table.ForeignKey(
                        name: "PARTY_NEED_CMEV",
                        column: x => x.COMMUNICATIONEVENTID,
                        principalTable: "COMMUNICATION_EVENT",
                        principalColumn: "COMMUNICATION_EVENT_ID");
                    table.ForeignKey(
                        name: "PARTY_NEED_NDTP",
                        column: x => x.NEEDTYPEID,
                        principalTable: "NEED_TYPE",
                        principalColumn: "NEED_TYPE_ID");
                    table.ForeignKey(
                        name: "PARTY_NEED_PCAT",
                        column: x => x.PRODUCTCATEGORYID,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "PARTY_NEED_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "PARTY_NEED_PTTP",
                        column: x => x.PARTYTYPEID,
                        principalTable: "PARTY_TYPE",
                        principalColumn: "PARTY_TYPE_ID");
                    table.ForeignKey(
                        name: "PARTY_NEED_PTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PARTY_NEED_RTYP",
                        column: x => x.ROLETYPEID,
                        principalTable: "ROLE_TYPE",
                        principalColumn: "ROLE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_ASSOC",
                columns: table => new
                {
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTIDTO = table.Column<string>(name: "PRODUCT_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTASSOCTYPEID = table.Column<string>(name: "PRODUCT_ASSOC_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    REASON = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    SCRAPFACTOR = table.Column<decimal>(name: "SCRAP_FACTOR", type: "decimal(18,6)", nullable: true),
                    INSTRUCTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ROUTINGWORKEFFORTID = table.Column<string>(name: "ROUTING_WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ESTIMATECALCMETHOD = table.Column<string>(name: "ESTIMATE_CALC_METHOD", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RECURRENCEINFOID = table.Column<string>(name: "RECURRENCE_INFO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_ASSOC", x => new { x.PRODUCTID, x.PRODUCTIDTO, x.PRODUCTASSOCTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PROD_ASSOC_APROD",
                        column: x => x.PRODUCTIDTO,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "PROD_ASSOC_CUSM",
                        column: x => x.ESTIMATECALCMETHOD,
                        principalTable: "CUSTOM_METHOD",
                        principalColumn: "CUSTOM_METHOD_ID");
                    table.ForeignKey(
                        name: "PROD_ASSOC_MPROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "PROD_ASSOC_RECINFO",
                        column: x => x.RECURRENCEINFOID,
                        principalTable: "RECURRENCE_INFO",
                        principalColumn: "RECURRENCE_INFO_ID");
                    table.ForeignKey(
                        name: "PROD_ASSOC_RTWE",
                        column: x => x.ROUTINGWORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                    table.ForeignKey(
                        name: "PROD_ASSOC_TYPE",
                        column: x => x.PRODUCTASSOCTYPEID,
                        principalTable: "PRODUCT_ASSOC_TYPE",
                        principalColumn: "PRODUCT_ASSOC_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_ATTRIBUTE",
                columns: table => new
                {
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRTYPE = table.Column<string>(name: "ATTR_TYPE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_ATTRIBUTE", x => new { x.PRODUCTID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "PROD_ATTR",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_AVERAGE_COST",
                columns: table => new
                {
                    PRODUCTAVERAGECOSTTYPEID = table.Column<string>(name: "PRODUCT_AVERAGE_COST_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORGANIZATIONPARTYID = table.Column<string>(name: "ORGANIZATION_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    AVERAGECOST = table.Column<decimal>(name: "AVERAGE_COST", type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_AVERAGE_COST", x => new { x.PRODUCTAVERAGECOSTTYPEID, x.ORGANIZATIONPARTYID, x.PRODUCTID, x.FACILITYID, x.FROMDATE });
                    table.ForeignKey(
                        name: "AVG_COST_FACI",
                        column: x => x.FACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "AVG_COST_PARTY",
                        column: x => x.ORGANIZATIONPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "AVG_COST_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "AVG_COST_TYPE",
                        column: x => x.PRODUCTAVERAGECOSTTYPEID,
                        principalTable: "PRODUCT_AVERAGE_COST_TYPE",
                        principalColumn: "PRODUCT_AVERAGE_COST_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_CALCULATED_INFO",
                columns: table => new
                {
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TOTALQUANTITYORDERED = table.Column<decimal>(name: "TOTAL_QUANTITY_ORDERED", type: "decimal(18,6)", nullable: true),
                    TOTALTIMESVIEWED = table.Column<int>(name: "TOTAL_TIMES_VIEWED", type: "int", nullable: true),
                    AVERAGECUSTOMERRATING = table.Column<decimal>(name: "AVERAGE_CUSTOMER_RATING", type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_CALCULATED_INFO", x => x.PRODUCTID);
                    table.ForeignKey(
                        name: "PRODCI_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_CATEGORY_MEMBER",
                columns: table => new
                {
                    PRODUCTCATEGORYID = table.Column<string>(name: "PRODUCT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_CATEGORY_MEMBER", x => new { x.PRODUCTCATEGORYID, x.PRODUCTID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PROD_CMBR_CATEGORY",
                        column: x => x.PRODUCTCATEGORYID,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "PROD_CMBR_PRODUCT",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_CONFIG",
                columns: table => new
                {
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONFIGITEMID = table.Column<string>(name: "CONFIG_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LONGDESCRIPTION = table.Column<string>(name: "LONG_DESCRIPTION", type: "text", nullable: true),
                    CONFIGTYPEID = table.Column<string>(name: "CONFIG_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DEFAULTCONFIGOPTIONID = table.Column<string>(name: "DEFAULT_CONFIG_OPTION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    ISMANDATORY = table.Column<string>(name: "IS_MANDATORY", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_CONFIG", x => new { x.PRODUCTID, x.CONFIGITEMID, x.SEQUENCENUM, x.FROMDATE });
                    table.ForeignKey(
                        name: "PROD_CONF_ITEM",
                        column: x => x.CONFIGITEMID,
                        principalTable: "PRODUCT_CONFIG_ITEM",
                        principalColumn: "CONFIG_ITEM_ID");
                    table.ForeignKey(
                        name: "PROD_CONF_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_CONFIG_PRODUCT",
                columns: table => new
                {
                    CONFIGITEMID = table.Column<string>(name: "CONFIG_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONFIGOPTIONID = table.Column<string>(name: "CONFIG_OPTION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_CONFIG_PRODUCT", x => new { x.CONFIGITEMID, x.CONFIGOPTIONID, x.PRODUCTID });
                    table.ForeignKey(
                        name: "PROD_CONFP_ITEM",
                        column: x => x.CONFIGITEMID,
                        principalTable: "PRODUCT_CONFIG_ITEM",
                        principalColumn: "CONFIG_ITEM_ID");
                    table.ForeignKey(
                        name: "PROD_CONFP_OPTN",
                        columns: x => new { x.CONFIGITEMID, x.CONFIGOPTIONID },
                        principalTable: "PRODUCT_CONFIG_OPTION",
                        principalColumns: new[] { "CONFIG_ITEM_ID", "CONFIG_OPTION_ID" });
                    table.ForeignKey(
                        name: "PROD_CONFP_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_CONFIG_STATS",
                columns: table => new
                {
                    CONFIGID = table.Column<string>(name: "CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    NUMOFCONFS = table.Column<int>(name: "NUM_OF_CONFS", type: "int", nullable: true),
                    CONFIGTYPEID = table.Column<string>(name: "CONFIG_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_CONFIG_STATS", x => new { x.CONFIGID, x.PRODUCTID });
                    table.ForeignKey(
                        name: "PROD_CONFS_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_CONTENT",
                columns: table => new
                {
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTCONTENTTYPEID = table.Column<string>(name: "PRODUCT_CONTENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    PURCHASEFROMDATE = table.Column<DateTime>(name: "PURCHASE_FROM_DATE", type: "datetime", nullable: true),
                    PURCHASETHRUDATE = table.Column<DateTime>(name: "PURCHASE_THRU_DATE", type: "datetime", nullable: true),
                    USECOUNTLIMIT = table.Column<int>(name: "USE_COUNT_LIMIT", type: "int", nullable: true),
                    USETIME = table.Column<int>(name: "USE_TIME", type: "int", nullable: true),
                    USETIMEUOMID = table.Column<string>(name: "USE_TIME_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    USEROLETYPEID = table.Column<string>(name: "USE_ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_CONTENT", x => new { x.PRODUCTID, x.CONTENTID, x.PRODUCTCONTENTTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PROD_CNT_CNT",
                        column: x => x.CONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "PROD_CNT_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "PROD_CNT_TYPE",
                        column: x => x.PRODUCTCONTENTTYPEID,
                        principalTable: "PRODUCT_CONTENT_TYPE",
                        principalColumn: "PRODUCT_CONTENT_TYPE_ID");
                    table.ForeignKey(
                        name: "PROD_CNT_URT",
                        column: x => x.USEROLETYPEID,
                        principalTable: "ROLE_TYPE",
                        principalColumn: "ROLE_TYPE_ID");
                    table.ForeignKey(
                        name: "PROD_CNT_UTU",
                        column: x => x.USETIMEUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_COST_COMPONENT_CALC",
                columns: table => new
                {
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COSTCOMPONENTTYPEID = table.Column<string>(name: "COST_COMPONENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    COSTCOMPONENTCALCID = table.Column<string>(name: "COST_COMPONENT_CALC_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_COST_COMPONENT_CALC", x => new { x.PRODUCTID, x.COSTCOMPONENTTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PR_COS_CCC",
                        column: x => x.COSTCOMPONENTCALCID,
                        principalTable: "COST_COMPONENT_CALC",
                        principalColumn: "COST_COMPONENT_CALC_ID");
                    table.ForeignKey(
                        name: "PR_COS_CCT",
                        column: x => x.COSTCOMPONENTTYPEID,
                        principalTable: "COST_COMPONENT_TYPE",
                        principalColumn: "COST_COMPONENT_TYPE_ID");
                    table.ForeignKey(
                        name: "PR_COS_COMPCALC",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_FACILITY",
                columns: table => new
                {
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    MINIMUMSTOCK = table.Column<decimal>(name: "MINIMUM_STOCK", type: "decimal(18,6)", nullable: true),
                    REORDERQUANTITY = table.Column<decimal>(name: "REORDER_QUANTITY", type: "decimal(18,6)", nullable: true),
                    DAYSTOSHIP = table.Column<int>(name: "DAYS_TO_SHIP", type: "int", nullable: true),
                    REPLENISHMETHODENUMID = table.Column<string>(name: "REPLENISH_METHOD_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTINVENTORYCOUNT = table.Column<decimal>(name: "LAST_INVENTORY_COUNT", type: "decimal(18,6)", nullable: true),
                    REQUIREMENTMETHODENUMID = table.Column<string>(name: "REQUIREMENT_METHOD_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_FACILITY", x => new { x.PRODUCTID, x.FACILITYID });
                    table.ForeignKey(
                        name: "PROD_FAC_FAC",
                        column: x => x.FACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "PROD_FAC_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "PROD_FAC_REP",
                        column: x => x.REPLENISHMETHODENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "PROD_FAC_REQ",
                        column: x => x.REQUIREMENTMETHODENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_FACILITY_ASSOC",
                columns: table => new
                {
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FACILITYIDTO = table.Column<string>(name: "FACILITY_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FACILITYASSOCTYPEID = table.Column<string>(name: "FACILITY_ASSOC_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    TRANSITTIME = table.Column<int>(name: "TRANSIT_TIME", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_FACILITY_ASSOC", x => new { x.PRODUCTID, x.FACILITYID, x.FACILITYIDTO, x.FACILITYASSOCTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PRFACASSOC_FAC",
                        column: x => x.FACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "PRFACASSOC_FACTO",
                        column: x => x.FACILITYIDTO,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "PRFACASSOC_PRO",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "PRFACASSOC_TYPE",
                        column: x => x.FACILITYASSOCTYPEID,
                        principalTable: "FACILITY_ASSOC_TYPE",
                        principalColumn: "FACILITY_ASSOC_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_FACILITY_LOCATION",
                columns: table => new
                {
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LOCATIONSEQID = table.Column<string>(name: "LOCATION_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    MINIMUMSTOCK = table.Column<decimal>(name: "MINIMUM_STOCK", type: "decimal(18,6)", nullable: true),
                    MOVEQUANTITY = table.Column<decimal>(name: "MOVE_QUANTITY", type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_FACILITY_LOCATION", x => new { x.PRODUCTID, x.FACILITYID, x.LOCATIONSEQID });
                    table.ForeignKey(
                        name: "PROD_FCL_FCL",
                        columns: x => new { x.FACILITYID, x.LOCATIONSEQID },
                        principalTable: "FACILITY_LOCATION",
                        principalColumns: new[] { "FACILITY_ID", "LOCATION_SEQ_ID" });
                    table.ForeignKey(
                        name: "PROD_FCL_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_FEATURE_APPL",
                columns: table => new
                {
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTFEATUREID = table.Column<string>(name: "PRODUCT_FEATURE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    PRODUCTFEATUREAPPLTYPEID = table.Column<string>(name: "PRODUCT_FEATURE_APPL_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    AMOUNT = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    RECURRINGAMOUNT = table.Column<decimal>(name: "RECURRING_AMOUNT", type: "decimal(18,2)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_FEATURE_APPL", x => new { x.PRODUCTID, x.PRODUCTFEATUREID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PROD_FAPPL_FEATURE",
                        column: x => x.PRODUCTFEATUREID,
                        principalTable: "PRODUCT_FEATURE",
                        principalColumn: "PRODUCT_FEATURE_ID");
                    table.ForeignKey(
                        name: "PROD_FAPPL_PRODUCT",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "PROD_FAPPL_TYPE",
                        column: x => x.PRODUCTFEATUREAPPLTYPEID,
                        principalTable: "PRODUCT_FEATURE_APPL_TYPE",
                        principalColumn: "PRODUCT_FEATURE_APPL_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_GEO",
                columns: table => new
                {
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GEOID = table.Column<string>(name: "GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTGEOENUMID = table.Column<string>(name: "PRODUCT_GEO_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_GEO", x => new { x.PRODUCTID, x.GEOID });
                    table.ForeignKey(
                        name: "PRDGEO_ENUM",
                        column: x => x.PRODUCTGEOENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "PRDGEO_GEO",
                        column: x => x.GEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "PRDGEO_PRODUCT",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_GL_ACCOUNT",
                columns: table => new
                {
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORGANIZATIONPARTYID = table.Column<string>(name: "ORGANIZATION_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GLACCOUNTTYPEID = table.Column<string>(name: "GL_ACCOUNT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GLACCOUNTID = table.Column<string>(name: "GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_GL_ACCOUNT", x => new { x.PRODUCTID, x.ORGANIZATIONPARTYID, x.GLACCOUNTTYPEID });
                    table.ForeignKey(
                        name: "PROD_GLACT_GLACT",
                        column: x => x.GLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "PROD_GLACT_PARTY",
                        column: x => x.ORGANIZATIONPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PROD_GLACT_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "PROD_GLACT_TYPE",
                        column: x => x.GLACCOUNTTYPEID,
                        principalTable: "GL_ACCOUNT_TYPE",
                        principalColumn: "GL_ACCOUNT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_GROUP_ORDER",
                columns: table => new
                {
                    GROUPORDERID = table.Column<string>(name: "GROUP_ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    REQORDERQTY = table.Column<decimal>(name: "REQ_ORDER_QTY", type: "decimal(18,6)", nullable: true),
                    SOLDORDERQTY = table.Column<decimal>(name: "SOLD_ORDER_QTY", type: "decimal(18,6)", nullable: true),
                    JOBID = table.Column<string>(name: "JOB_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_GROUP_ORDER", x => x.GROUPORDERID);
                    table.ForeignKey(
                        name: "GROUP_ORDER_JOB",
                        column: x => x.JOBID,
                        principalTable: "JOB_SANDBOX",
                        principalColumn: "JOB_ID");
                    table.ForeignKey(
                        name: "GROUP_ORDER_STATUS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "PROD_GROUP_ORDER",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_KEYWORD_NEW",
                columns: table => new
                {
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    KEYWORD = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    KEYWORDTYPEID = table.Column<string>(name: "KEYWORD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    RELEVANCYWEIGHT = table.Column<int>(name: "RELEVANCY_WEIGHT", type: "int", nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_KEYWORD_NEW", x => new { x.PRODUCTID, x.KEYWORD, x.KEYWORDTYPEID });
                    table.ForeignKey(
                        name: "PROD_KWD_PROD_NEW",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "PROD_KWD_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "PROD_KWD_TYPE",
                        column: x => x.KEYWORDTYPEID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_MAINT",
                columns: table => new
                {
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTMAINTSEQID = table.Column<string>(name: "PRODUCT_MAINT_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTMAINTTYPEID = table.Column<string>(name: "PRODUCT_MAINT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    MAINTNAME = table.Column<string>(name: "MAINT_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    MAINTTEMPLATEWORKEFFORTID = table.Column<string>(name: "MAINT_TEMPLATE_WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INTERVALQUANTITY = table.Column<decimal>(name: "INTERVAL_QUANTITY", type: "decimal(18,6)", nullable: true),
                    INTERVALUOMID = table.Column<string>(name: "INTERVAL_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INTERVALMETERTYPEID = table.Column<string>(name: "INTERVAL_METER_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    REPEATCOUNT = table.Column<int>(name: "REPEAT_COUNT", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_MAINT", x => new { x.PRODUCTID, x.PRODUCTMAINTSEQID });
                    table.ForeignKey(
                        name: "PRODMNT_INTUOM",
                        column: x => x.INTERVALUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "PRODMNT_MNTTYP",
                        column: x => x.PRODUCTMAINTTYPEID,
                        principalTable: "PRODUCT_MAINT_TYPE",
                        principalColumn: "PRODUCT_MAINT_TYPE_ID");
                    table.ForeignKey(
                        name: "PRODMNT_PDMTTYP",
                        column: x => x.INTERVALMETERTYPEID,
                        principalTable: "PRODUCT_METER_TYPE",
                        principalColumn: "PRODUCT_METER_TYPE_ID");
                    table.ForeignKey(
                        name: "PRODMNT_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "PRODMNT_TPLHWE",
                        column: x => x.MAINTTEMPLATEWORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_MANUFACTURING_RULE",
                columns: table => new
                {
                    RULEID = table.Column<string>(name: "RULE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTIDFOR = table.Column<string>(name: "PRODUCT_ID_FOR", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTIDIN = table.Column<string>(name: "PRODUCT_ID_IN", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RULESEQID = table.Column<string>(name: "RULE_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    PRODUCTIDINSUBST = table.Column<string>(name: "PRODUCT_ID_IN_SUBST", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTFEATURE = table.Column<string>(name: "PRODUCT_FEATURE", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RULEOPERATOR = table.Column<string>(name: "RULE_OPERATOR", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUANTITY = table.Column<double>(type: "float", nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_MANUFACTURING_RULE", x => x.RULEID);
                    table.ForeignKey(
                        name: "PRODUCT_FEAT",
                        column: x => x.PRODUCTFEATURE,
                        principalTable: "PRODUCT_FEATURE",
                        principalColumn: "PRODUCT_FEATURE_ID");
                    table.ForeignKey(
                        name: "PRODUCT_FOR",
                        column: x => x.PRODUCTIDFOR,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "PRODUCT_IN",
                        column: x => x.PRODUCTIDIN,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "PRODUCT_PARENT",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "PRODUCT_SUBST",
                        column: x => x.PRODUCTIDINSUBST,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_METER",
                columns: table => new
                {
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTMETERTYPEID = table.Column<string>(name: "PRODUCT_METER_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    METERUOMID = table.Column<string>(name: "METER_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    METERNAME = table.Column<string>(name: "METER_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_METER", x => new { x.PRODUCTID, x.PRODUCTMETERTYPEID });
                    table.ForeignKey(
                        name: "PRODMTR_MTRTYP",
                        column: x => x.PRODUCTMETERTYPEID,
                        principalTable: "PRODUCT_METER_TYPE",
                        principalColumn: "PRODUCT_METER_TYPE_ID");
                    table.ForeignKey(
                        name: "PRODMTR_MTRUOM",
                        column: x => x.METERUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "PRODMTR_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_ORDER_ITEM",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ENGAGEMENTID = table.Column<string>(name: "ENGAGEMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ENGAGEMENTITEMSEQID = table.Column<string>(name: "ENGAGEMENT_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_ORDER_ITEM", x => new { x.ORDERID, x.ORDERITEMSEQID, x.ENGAGEMENTID, x.ENGAGEMENTITEMSEQID });
                    table.ForeignKey(
                        name: "PROD_OITEM_ENOHDR",
                        column: x => x.ENGAGEMENTID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                    table.ForeignKey(
                        name: "PROD_OITEM_ENOITM",
                        columns: x => new { x.ENGAGEMENTID, x.ENGAGEMENTITEMSEQID },
                        principalTable: "ORDER_ITEM",
                        principalColumns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "PROD_OITEM_OHDR",
                        column: x => x.ORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                    table.ForeignKey(
                        name: "PROD_OITEM_OITEM",
                        columns: x => new { x.ORDERID, x.ORDERITEMSEQID },
                        principalTable: "ORDER_ITEM",
                        principalColumns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "PROD_OITEM_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_PAYMENT_METHOD_TYPE",
                columns: table => new
                {
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PAYMENTMETHODTYPEID = table.Column<string>(name: "PAYMENT_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPRICEPURPOSEID = table.Column<string>(name: "PRODUCT_PRICE_PURPOSE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_PAYMENT_METHOD_TYPE", x => new { x.PRODUCTID, x.PAYMENTMETHODTYPEID, x.PRODUCTPRICEPURPOSEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PROD_PMT_PMT",
                        column: x => x.PAYMENTMETHODTYPEID,
                        principalTable: "PAYMENT_METHOD_TYPE",
                        principalColumn: "PAYMENT_METHOD_TYPE_ID");
                    table.ForeignKey(
                        name: "PROD_PMT_PPRP",
                        column: x => x.PRODUCTPRICEPURPOSEID,
                        principalTable: "PRODUCT_PRICE_PURPOSE",
                        principalColumn: "PRODUCT_PRICE_PURPOSE_ID");
                    table.ForeignKey(
                        name: "PROD_PMT_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_PRICE",
                columns: table => new
                {
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPRICETYPEID = table.Column<string>(name: "PRODUCT_PRICE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CURRENCYUOMID = table.Column<string>(name: "CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    PRODUCTPRICEPURPOSEID = table.Column<string>(name: "PRODUCT_PRICE_PURPOSE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTSTOREGROUPID = table.Column<string>(name: "PRODUCT_STORE_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    PRICE = table.Column<decimal>(type: "decimal(18,3)", nullable: true),
                    TERMUOMID = table.Column<string>(name: "TERM_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CUSTOMPRICECALCSERVICE = table.Column<string>(name: "CUSTOM_PRICE_CALC_SERVICE", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRICEWITHOUTTAX = table.Column<decimal>(name: "PRICE_WITHOUT_TAX", type: "decimal(18,3)", nullable: true),
                    PRICEWITHTAX = table.Column<decimal>(name: "PRICE_WITH_TAX", type: "decimal(18,3)", nullable: true),
                    TAXAMOUNT = table.Column<decimal>(name: "TAX_AMOUNT", type: "decimal(18,3)", nullable: true),
                    TAXPERCENTAGE = table.Column<decimal>(name: "TAX_PERCENTAGE", type: "decimal(18,6)", nullable: true),
                    TAXAUTHPARTYID = table.Column<string>(name: "TAX_AUTH_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TAXAUTHGEOID = table.Column<string>(name: "TAX_AUTH_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TAXINPRICE = table.Column<string>(name: "TAX_IN_PRICE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    CREATEDDATE = table.Column<DateTime>(name: "CREATED_DATE", type: "datetime", nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDDATE = table.Column<DateTime>(name: "LAST_MODIFIED_DATE", type: "datetime", nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_PRICE", x => new { x.PRODUCTID, x.PRODUCTPRICETYPEID, x.CURRENCYUOMID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PROD_PRC_TAXGEO",
                        column: x => x.TAXAUTHGEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "PROD_PRC_TAXPTY",
                        column: x => x.TAXAUTHPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PROD_PRICE_CBUL",
                        column: x => x.CREATEDBYUSERLOGIN,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                    table.ForeignKey(
                        name: "PROD_PRICE_CMET",
                        column: x => x.CUSTOMPRICECALCSERVICE,
                        principalTable: "CUSTOM_METHOD",
                        principalColumn: "CUSTOM_METHOD_ID");
                    table.ForeignKey(
                        name: "PROD_PRICE_CUOM",
                        column: x => x.CURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "PROD_PRICE_LMBUL",
                        column: x => x.LASTMODIFIEDBYUSERLOGIN,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                    table.ForeignKey(
                        name: "PROD_PRICE_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "PROD_PRICE_PSTG",
                        column: x => x.PRODUCTSTOREGROUPID,
                        principalTable: "PRODUCT_STORE_GROUP",
                        principalColumn: "PRODUCT_STORE_GROUP_ID");
                    table.ForeignKey(
                        name: "PROD_PRICE_PURP",
                        column: x => x.PRODUCTPRICEPURPOSEID,
                        principalTable: "PRODUCT_PRICE_PURPOSE",
                        principalColumn: "PRODUCT_PRICE_PURPOSE_ID");
                    table.ForeignKey(
                        name: "PROD_PRICE_TUOM",
                        column: x => x.TERMUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "PROD_PRICE_TYPE",
                        column: x => x.PRODUCTPRICETYPEID,
                        principalTable: "PRODUCT_PRICE_TYPE",
                        principalColumn: "PRODUCT_PRICE_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_REVIEW",
                columns: table => new
                {
                    PRODUCTREVIEWID = table.Column<string>(name: "PRODUCT_REVIEW_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    USERLOGINID = table.Column<string>(name: "USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    POSTEDANONYMOUS = table.Column<string>(name: "POSTED_ANONYMOUS", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    POSTEDDATETIME = table.Column<DateTime>(name: "POSTED_DATE_TIME", type: "datetime", nullable: true),
                    PRODUCTRATING = table.Column<decimal>(name: "PRODUCT_RATING", type: "decimal(18,6)", nullable: true),
                    PRODUCTREVIEW = table.Column<string>(name: "PRODUCT_REVIEW", type: "text", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_REVIEW", x => x.PRODUCTREVIEWID);
                    table.ForeignKey(
                        name: "PROD_REVIEW_PRDSTR",
                        column: x => x.PRODUCTSTOREID,
                        principalTable: "PRODUCT_STORE",
                        principalColumn: "PRODUCT_STORE_ID");
                    table.ForeignKey(
                        name: "PROD_REVIEW_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "PROD_REVIEW_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "PROD_REVIEW_ULH",
                        column: x => x.USERLOGINID,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_ROLE",
                columns: table => new
                {
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_ROLE", x => new { x.PRODUCTID, x.PARTYID, x.ROLETYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PROD_RLE_PRODUCT",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "PROD_RLE_PTYRLE",
                        columns: x => new { x.PARTYID, x.ROLETYPEID },
                        principalTable: "PARTY_ROLE",
                        principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });
                });

            migrationBuilder.CreateTable(
                name: "REORDER_GUIDELINE",
                columns: table => new
                {
                    REORDERGUIDELINEID = table.Column<string>(name: "REORDER_GUIDELINE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    GEOID = table.Column<string>(name: "GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    REORDERQUANTITY = table.Column<decimal>(name: "REORDER_QUANTITY", type: "decimal(18,6)", nullable: true),
                    REORDERLEVEL = table.Column<decimal>(name: "REORDER_LEVEL", type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_REORDER_GUIDELINE", x => x.REORDERGUIDELINEID);
                    table.ForeignKey(
                        name: "REORDER_GD_FAC",
                        column: x => x.FACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "REORDER_GD_GEO",
                        column: x => x.GEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "REORDER_GD_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "REORDER_GD_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                });

            migrationBuilder.CreateTable(
                name: "REQUIREMENT",
                columns: table => new
                {
                    REQUIREMENTID = table.Column<string>(name: "REQUIREMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    REQUIREMENTTYPEID = table.Column<string>(name: "REQUIREMENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FACILITYID = table.Column<string>(name: "FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DELIVERABLEID = table.Column<string>(name: "DELIVERABLE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FIXEDASSETID = table.Column<string>(name: "FIXED_ASSET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    REQUIREMENTSTARTDATE = table.Column<DateTime>(name: "REQUIREMENT_START_DATE", type: "datetime", nullable: true),
                    REQUIREDBYDATE = table.Column<DateTime>(name: "REQUIRED_BY_DATE", type: "datetime", nullable: true),
                    ESTIMATEDBUDGET = table.Column<decimal>(name: "ESTIMATED_BUDGET", type: "decimal(18,2)", nullable: true),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    USECASE = table.Column<string>(name: "USE_CASE", type: "text", nullable: true),
                    REASON = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CREATEDDATE = table.Column<DateTime>(name: "CREATED_DATE", type: "datetime", nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDDATE = table.Column<DateTime>(name: "LAST_MODIFIED_DATE", type: "datetime", nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    FACILITYIDTO = table.Column<string>(name: "FACILITY_ID_TO", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_REQUIREMENT", x => x.REQUIREMENTID);
                    table.ForeignKey(
                        name: "REQ_DELIVERABLE",
                        column: x => x.DELIVERABLEID,
                        principalTable: "DELIVERABLE",
                        principalColumn: "DELIVERABLE_ID");
                    table.ForeignKey(
                        name: "REQ_FACILITY",
                        column: x => x.FACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "REQ_FIXED_ASSET",
                        column: x => x.FIXEDASSETID,
                        principalTable: "FIXED_ASSET",
                        principalColumn: "FIXED_ASSET_ID");
                    table.ForeignKey(
                        name: "REQ_PRODUCT",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "REQ_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "REQ_TYPE",
                        column: x => x.REQUIREMENTTYPEID,
                        principalTable: "REQUIREMENT_TYPE",
                        principalColumn: "REQUIREMENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "SERVICE_SPECIFICATION",
                columns: table => new
                {
                    ServiceSpecificationId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ProductId = table.Column<string>(type: "varchar(36)", nullable: false),
                    MakeId = table.Column<string>(type: "varchar(36)", nullable: false),
                    ModelId = table.Column<string>(type: "varchar(36)", nullable: false),
                    StandardTimeInMinutes = table.Column<int>(type: "int", nullable: false),
                    FromDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ThruDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LastUpdatedStamp = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CreatedStamp = table.Column<DateTime>(type: "datetime2", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SERVICE_SPECIFICATION", x => x.ServiceSpecificationId);
                    table.ForeignKey(
                        name: "FK_SERVICE_SPECIFICATION_PRODUCT_CATEGORY_MakeId",
                        column: x => x.MakeId,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "FK_SERVICE_SPECIFICATION_PRODUCT_CATEGORY_ModelId",
                        column: x => x.ModelId,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "FK_SERVICE_SPECIFICATION_PRODUCT_ProductId",
                        column: x => x.ProductId,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                });

            migrationBuilder.CreateTable(
                name: "SUPPLIER_PRODUCT",
                columns: table => new
                {
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    AVAILABLEFROMDATE = table.Column<DateTime>(name: "AVAILABLE_FROM_DATE", type: "datetime", nullable: false),
                    MINIMUMORDERQUANTITY = table.Column<decimal>(name: "MINIMUM_ORDER_QUANTITY", type: "decimal(18,6)", nullable: false),
                    CURRENCYUOMID = table.Column<string>(name: "CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    AVAILABLETHRUDATE = table.Column<DateTime>(name: "AVAILABLE_THRU_DATE", type: "datetime", nullable: true),
                    SUPPLIERPREFORDERID = table.Column<string>(name: "SUPPLIER_PREF_ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SUPPLIERRATINGTYPEID = table.Column<string>(name: "SUPPLIER_RATING_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STANDARDLEADTIMEDAYS = table.Column<decimal>(name: "STANDARD_LEAD_TIME_DAYS", type: "decimal(18,6)", nullable: true),
                    ORDERQTYINCREMENTS = table.Column<decimal>(name: "ORDER_QTY_INCREMENTS", type: "decimal(18,6)", nullable: true),
                    UNITSINCLUDED = table.Column<decimal>(name: "UNITS_INCLUDED", type: "decimal(18,6)", nullable: true),
                    QUANTITYUOMID = table.Column<string>(name: "QUANTITY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AGREEMENTID = table.Column<string>(name: "AGREEMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AGREEMENTITEMSEQID = table.Column<string>(name: "AGREEMENT_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTPRICE = table.Column<decimal>(name: "LAST_PRICE", type: "decimal(18,3)", nullable: true),
                    SHIPPINGPRICE = table.Column<decimal>(name: "SHIPPING_PRICE", type: "decimal(18,3)", nullable: true),
                    SUPPLIERPRODUCTNAME = table.Column<string>(name: "SUPPLIER_PRODUCT_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SUPPLIERPRODUCTID = table.Column<string>(name: "SUPPLIER_PRODUCT_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    CANDROPSHIP = table.Column<string>(name: "CAN_DROP_SHIP", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SUPPLIER_PRODUCT", x => new { x.PRODUCTID, x.PARTYID, x.CURRENCYUOMID, x.MINIMUMORDERQUANTITY, x.AVAILABLEFROMDATE });
                    table.ForeignKey(
                        name: "SUPPL_PROD_AGRIT",
                        columns: x => new { x.AGREEMENTID, x.AGREEMENTITEMSEQID },
                        principalTable: "AGREEMENT_ITEM",
                        principalColumns: new[] { "AGREEMENT_ID", "AGREEMENT_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "SUPPL_PROD_CUOM",
                        column: x => x.CURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "SUPPL_PROD_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "SUPPL_PROD_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "SUPPL_PROD_QUOM",
                        column: x => x.QUANTITYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "SUPPL_PROD_SPORD",
                        column: x => x.SUPPLIERPREFORDERID,
                        principalTable: "SUPPLIER_PREF_ORDER",
                        principalColumn: "SUPPLIER_PREF_ORDER_ID");
                    table.ForeignKey(
                        name: "SUPPL_PROD_SRTPE",
                        column: x => x.SUPPLIERRATINGTYPEID,
                        principalTable: "SUPPLIER_RATING_TYPE",
                        principalColumn: "SUPPLIER_RATING_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "VENDOR_PRODUCT",
                columns: table => new
                {
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    VENDORPARTYID = table.Column<string>(name: "VENDOR_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTSTOREGROUPID = table.Column<string>(name: "PRODUCT_STORE_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VENDOR_PRODUCT", x => new { x.PRODUCTID, x.VENDORPARTYID, x.PRODUCTSTOREGROUPID });
                    table.ForeignKey(
                        name: "VENDPROD_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "VENDPROD_PSGRP",
                        column: x => x.PRODUCTSTOREGROUPID,
                        principalTable: "PRODUCT_STORE_GROUP",
                        principalColumn: "PRODUCT_STORE_GROUP_ID");
                    table.ForeignKey(
                        name: "VENDPROD_VPTY",
                        column: x => x.VENDORPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_GOOD_STANDARD",
                columns: table => new
                {
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    WORKEFFORTGOODSTDTYPEID = table.Column<string>(name: "WORK_EFFORT_GOOD_STD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ESTIMATEDQUANTITY = table.Column<double>(name: "ESTIMATED_QUANTITY", type: "float", nullable: true),
                    ESTIMATEDCOST = table.Column<decimal>(name: "ESTIMATED_COST", type: "decimal(18,2)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_GOOD_STANDARD", x => new { x.WORKEFFORTID, x.PRODUCTID, x.WORKEFFORTGOODSTDTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "WKEFF_GDSTD_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "WKEFF_GDSTD_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "WKEFF_GDSTD_TYPE",
                        column: x => x.WORKEFFORTGOODSTDTYPEID,
                        principalTable: "WORK_EFFORT_GOOD_STANDARD_TYPE",
                        principalColumn: "WORK_EFFORT_GOOD_STD_TYPE_ID");
                    table.ForeignKey(
                        name: "WKEFF_GDSTD_WEFF",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_PROMO_CATEGORY",
                columns: table => new
                {
                    PRODUCTPROMOID = table.Column<string>(name: "PRODUCT_PROMO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPROMORULEID = table.Column<string>(name: "PRODUCT_PROMO_RULE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPROMOACTIONSEQID = table.Column<string>(name: "PRODUCT_PROMO_ACTION_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPROMOCONDSEQID = table.Column<string>(name: "PRODUCT_PROMO_COND_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTCATEGORYID = table.Column<string>(name: "PRODUCT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ANDGROUPID = table.Column<string>(name: "AND_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPROMOAPPLENUMID = table.Column<string>(name: "PRODUCT_PROMO_APPL_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INCLUDESUBCATEGORIES = table.Column<string>(name: "INCLUDE_SUB_CATEGORIES", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_PROMO_CATEGORY", x => new { x.PRODUCTPROMOID, x.PRODUCTPROMORULEID, x.PRODUCTPROMOACTIONSEQID, x.PRODUCTPROMOCONDSEQID, x.PRODUCTCATEGORYID, x.ANDGROUPID });
                    table.ForeignKey(
                        name: "PROD_PRCAT_ENUM",
                        column: x => x.PRODUCTPROMOAPPLENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "PROD_PRCAT_PRCAT",
                        column: x => x.PRODUCTCATEGORYID,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "PROD_PRCAT_PROMO",
                        column: x => x.PRODUCTPROMOID,
                        principalTable: "PRODUCT_PROMO",
                        principalColumn: "PRODUCT_PROMO_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_PROMO_CODE",
                columns: table => new
                {
                    PRODUCTPROMOCODEID = table.Column<string>(name: "PRODUCT_PROMO_CODE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPROMOID = table.Column<string>(name: "PRODUCT_PROMO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    USERENTERED = table.Column<string>(name: "USER_ENTERED", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    REQUIREEMAILORPARTY = table.Column<string>(name: "REQUIRE_EMAIL_OR_PARTY", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    USELIMITPERCODE = table.Column<int>(name: "USE_LIMIT_PER_CODE", type: "int", nullable: true),
                    USELIMITPERCUSTOMER = table.Column<int>(name: "USE_LIMIT_PER_CUSTOMER", type: "int", nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    CREATEDDATE = table.Column<DateTime>(name: "CREATED_DATE", type: "datetime", nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDDATE = table.Column<DateTime>(name: "LAST_MODIFIED_DATE", type: "datetime", nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_PROMO_CODE", x => x.PRODUCTPROMOCODEID);
                    table.ForeignKey(
                        name: "PROD_PRCOD_CUL",
                        column: x => x.CREATEDBYUSERLOGIN,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                    table.ForeignKey(
                        name: "PROD_PRCOD_LMCUL",
                        column: x => x.LASTMODIFIEDBYUSERLOGIN,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                    table.ForeignKey(
                        name: "PROD_PRCOD_PROMO",
                        column: x => x.PRODUCTPROMOID,
                        principalTable: "PRODUCT_PROMO",
                        principalColumn: "PRODUCT_PROMO_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_PROMO_CONTENT",
                columns: table => new
                {
                    PRODUCTPROMOID = table.Column<string>(name: "PRODUCT_PROMO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPROMOCONTENTTYPEID = table.Column<string>(name: "PRODUCT_PROMO_CONTENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_PROMO_CONTENT", x => new { x.PRODUCTPROMOID, x.CONTENTID, x.PRODUCTPROMOCONTENTTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PRODPR_CNT_CNT",
                        column: x => x.CONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "PRODPR_CNT_PROD_PR",
                        column: x => x.PRODUCTPROMOID,
                        principalTable: "PRODUCT_PROMO",
                        principalColumn: "PRODUCT_PROMO_ID");
                    table.ForeignKey(
                        name: "PRODPR_CNT_TYPE",
                        column: x => x.PRODUCTPROMOCONTENTTYPEID,
                        principalTable: "PRODUCT_CONTENT_TYPE",
                        principalColumn: "PRODUCT_CONTENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_PROMO_PRODUCT",
                columns: table => new
                {
                    PRODUCTPROMOID = table.Column<string>(name: "PRODUCT_PROMO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPROMORULEID = table.Column<string>(name: "PRODUCT_PROMO_RULE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPROMOACTIONSEQID = table.Column<string>(name: "PRODUCT_PROMO_ACTION_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPROMOCONDSEQID = table.Column<string>(name: "PRODUCT_PROMO_COND_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPROMOAPPLENUMID = table.Column<string>(name: "PRODUCT_PROMO_APPL_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_PROMO_PRODUCT", x => new { x.PRODUCTPROMOID, x.PRODUCTPROMORULEID, x.PRODUCTPROMOACTIONSEQID, x.PRODUCTPROMOCONDSEQID, x.PRODUCTID });
                    table.ForeignKey(
                        name: "PROD_PRPRD_ENUM",
                        column: x => x.PRODUCTPROMOAPPLENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "PROD_PRPRD_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "PROD_PRPRD_PROMO",
                        column: x => x.PRODUCTPROMOID,
                        principalTable: "PRODUCT_PROMO",
                        principalColumn: "PRODUCT_PROMO_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_PROMO_RULE",
                columns: table => new
                {
                    PRODUCTPROMOID = table.Column<string>(name: "PRODUCT_PROMO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPROMORULEID = table.Column<string>(name: "PRODUCT_PROMO_RULE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    RULENAME = table.Column<string>(name: "RULE_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_PROMO_RULE", x => new { x.PRODUCTPROMOID, x.PRODUCTPROMORULEID });
                    table.ForeignKey(
                        name: "PROD_PRRLE_PROMO",
                        column: x => x.PRODUCTPROMOID,
                        principalTable: "PRODUCT_PROMO",
                        principalColumn: "PRODUCT_PROMO_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_STORE_PROMO_APPL",
                columns: table => new
                {
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPROMOID = table.Column<string>(name: "PRODUCT_PROMO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    MANUALONLY = table.Column<string>(name: "MANUAL_ONLY", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_STORE_PROMO_APPL", x => new { x.PRODUCTSTOREID, x.PRODUCTPROMOID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PRDSTRPRMO_PRDS",
                        column: x => x.PRODUCTSTOREID,
                        principalTable: "PRODUCT_STORE",
                        principalColumn: "PRODUCT_STORE_ID");
                    table.ForeignKey(
                        name: "PRDSTRPRMO_PRMO",
                        column: x => x.PRODUCTPROMOID,
                        principalTable: "PRODUCT_PROMO",
                        principalColumn: "PRODUCT_PROMO_ID");
                });

            migrationBuilder.CreateTable(
                name: "SALES_FORECAST_DETAIL",
                columns: table => new
                {
                    SALESFORECASTID = table.Column<string>(name: "SALES_FORECAST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SALESFORECASTDETAILID = table.Column<string>(name: "SALES_FORECAST_DETAIL_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    AMOUNT = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    QUANTITYUOMID = table.Column<string>(name: "QUANTITY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTCATEGORYID = table.Column<string>(name: "PRODUCT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SALES_FORECAST_DETAIL", x => new { x.SALESFORECASTID, x.SALESFORECASTDETAILID });
                    table.ForeignKey(
                        name: "SALES4CDTL_PCTGRY",
                        column: x => x.PRODUCTCATEGORYID,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "SALES4CDTL_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "SALES4CDTL_QTY_UOM",
                        column: x => x.QUANTITYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "SALES4CDTL_SALES4C",
                        column: x => x.SALESFORECASTID,
                        principalTable: "SALES_FORECAST",
                        principalColumn: "SALES_FORECAST_ID");
                });

            migrationBuilder.CreateTable(
                name: "SALES_FORECAST_HISTORY",
                columns: table => new
                {
                    SALESFORECASTHISTORYID = table.Column<string>(name: "SALES_FORECAST_HISTORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SALESFORECASTID = table.Column<string>(name: "SALES_FORECAST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARENTSALESFORECASTID = table.Column<string>(name: "PARENT_SALES_FORECAST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORGANIZATIONPARTYID = table.Column<string>(name: "ORGANIZATION_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INTERNALPARTYID = table.Column<string>(name: "INTERNAL_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CUSTOMTIMEPERIODID = table.Column<string>(name: "CUSTOM_TIME_PERIOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CURRENCYUOMID = table.Column<string>(name: "CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUOTAAMOUNT = table.Column<decimal>(name: "QUOTA_AMOUNT", type: "decimal(18,2)", nullable: true),
                    FORECASTAMOUNT = table.Column<decimal>(name: "FORECAST_AMOUNT", type: "decimal(18,2)", nullable: true),
                    BESTCASEAMOUNT = table.Column<decimal>(name: "BEST_CASE_AMOUNT", type: "decimal(18,2)", nullable: true),
                    CLOSEDAMOUNT = table.Column<decimal>(name: "CLOSED_AMOUNT", type: "decimal(18,2)", nullable: true),
                    PERCENTOFQUOTAFORECAST = table.Column<decimal>(name: "PERCENT_OF_QUOTA_FORECAST", type: "decimal(18,6)", nullable: true),
                    PERCENTOFQUOTACLOSED = table.Column<decimal>(name: "PERCENT_OF_QUOTA_CLOSED", type: "decimal(18,6)", nullable: true),
                    CHANGENOTE = table.Column<string>(name: "CHANGE_NOTE", type: "text", nullable: true),
                    MODIFIEDBYUSERLOGINID = table.Column<string>(name: "MODIFIED_BY_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    MODIFIEDTIMESTAMP = table.Column<DateTime>(name: "MODIFIED_TIMESTAMP", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SALES_FORECAST_HISTORY", x => x.SALESFORECASTHISTORYID);
                    table.ForeignKey(
                        name: "SALES4CH_CUR_UOM",
                        column: x => x.CURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "SALES4CH_INT_PARTY",
                        column: x => x.INTERNALPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "SALES4CH_MOD_USER",
                        column: x => x.MODIFIEDBYUSERLOGINID,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                    table.ForeignKey(
                        name: "SALES4CH_ORG_PARTY",
                        column: x => x.ORGANIZATIONPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "SALES4CH_SALES4C",
                        column: x => x.SALESFORECASTID,
                        principalTable: "SALES_FORECAST",
                        principalColumn: "SALES_FORECAST_ID");
                    table.ForeignKey(
                        name: "SALES4CH_TIME_PER",
                        column: x => x.CUSTOMTIMEPERIODID,
                        principalTable: "CUSTOM_TIME_PERIOD",
                        principalColumn: "CUSTOM_TIME_PERIOD_ID");
                });

            migrationBuilder.CreateTable(
                name: "SALES_OPPORTUNITY_COMPETITOR",
                columns: table => new
                {
                    SALESOPPORTUNITYID = table.Column<string>(name: "SALES_OPPORTUNITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COMPETITORPARTYID = table.Column<string>(name: "COMPETITOR_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    POSITIONENUMID = table.Column<string>(name: "POSITION_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STRENGTHS = table.Column<string>(type: "text", nullable: true),
                    WEAKNESSES = table.Column<string>(type: "text", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SALES_OPPORTUNITY_COMPETITO", x => new { x.SALESOPPORTUNITYID, x.COMPETITORPARTYID });
                    table.ForeignKey(
                        name: "SOPPCOMP_SOPP",
                        column: x => x.SALESOPPORTUNITYID,
                        principalTable: "SALES_OPPORTUNITY",
                        principalColumn: "SALES_OPPORTUNITY_ID");
                });

            migrationBuilder.CreateTable(
                name: "SALES_OPPORTUNITY_HISTORY",
                columns: table => new
                {
                    SALESOPPORTUNITYHISTORYID = table.Column<string>(name: "SALES_OPPORTUNITY_HISTORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SALESOPPORTUNITYID = table.Column<string>(name: "SALES_OPPORTUNITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "text", nullable: true),
                    NEXTSTEP = table.Column<string>(name: "NEXT_STEP", type: "text", nullable: true),
                    ESTIMATEDAMOUNT = table.Column<decimal>(name: "ESTIMATED_AMOUNT", type: "decimal(18,2)", nullable: true),
                    ESTIMATEDPROBABILITY = table.Column<decimal>(name: "ESTIMATED_PROBABILITY", type: "decimal(18,6)", nullable: true),
                    CURRENCYUOMID = table.Column<string>(name: "CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ESTIMATEDCLOSEDATE = table.Column<DateTime>(name: "ESTIMATED_CLOSE_DATE", type: "datetime", nullable: true),
                    OPPORTUNITYSTAGEID = table.Column<string>(name: "OPPORTUNITY_STAGE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CHANGENOTE = table.Column<string>(name: "CHANGE_NOTE", type: "text", nullable: true),
                    MODIFIEDBYUSERLOGIN = table.Column<string>(name: "MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    MODIFIEDTIMESTAMP = table.Column<DateTime>(name: "MODIFIED_TIMESTAMP", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SALES_OPPORTUNITY_HISTORY", x => x.SALESOPPORTUNITYHISTORYID);
                    table.ForeignKey(
                        name: "SLOPHI_CRNCY_UOM",
                        column: x => x.CURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "SLOPHI_SLSOPP",
                        column: x => x.SALESOPPORTUNITYID,
                        principalTable: "SALES_OPPORTUNITY",
                        principalColumn: "SALES_OPPORTUNITY_ID");
                    table.ForeignKey(
                        name: "SLOPHI_STAGE",
                        column: x => x.OPPORTUNITYSTAGEID,
                        principalTable: "SALES_OPPORTUNITY_STAGE",
                        principalColumn: "OPPORTUNITY_STAGE_ID");
                    table.ForeignKey(
                        name: "SLOPHI_USRLGN",
                        column: x => x.MODIFIEDBYUSERLOGIN,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                });

            migrationBuilder.CreateTable(
                name: "SALES_OPPORTUNITY_ROLE",
                columns: table => new
                {
                    SALESOPPORTUNITYID = table.Column<string>(name: "SALES_OPPORTUNITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SALES_OPPORTUNITY_ROLE", x => new { x.SALESOPPORTUNITYID, x.PARTYID, x.ROLETYPEID });
                    table.ForeignKey(
                        name: "SLSOPPRL_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "SLSOPPRL_PTYROLE",
                        columns: x => new { x.PARTYID, x.ROLETYPEID },
                        principalTable: "PARTY_ROLE",
                        principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });
                    table.ForeignKey(
                        name: "SLSOPPRL_ROLETYPE",
                        column: x => x.ROLETYPEID,
                        principalTable: "ROLE_TYPE",
                        principalColumn: "ROLE_TYPE_ID");
                    table.ForeignKey(
                        name: "SLSOPPRL_SLSOPP",
                        column: x => x.SALESOPPORTUNITYID,
                        principalTable: "SALES_OPPORTUNITY",
                        principalColumn: "SALES_OPPORTUNITY_ID");
                });

            migrationBuilder.CreateTable(
                name: "SALES_OPPORTUNITY_TRCK_CODE",
                columns: table => new
                {
                    SALESOPPORTUNITYID = table.Column<string>(name: "SALES_OPPORTUNITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TRACKINGCODEID = table.Column<string>(name: "TRACKING_CODE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    RECEIVEDDATE = table.Column<DateTime>(name: "RECEIVED_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SALES_OPPORTUNITY_TRCK_CODE", x => new { x.SALESOPPORTUNITYID, x.TRACKINGCODEID });
                    table.ForeignKey(
                        name: "SOPPTRKCD_SOPP",
                        column: x => x.SALESOPPORTUNITYID,
                        principalTable: "SALES_OPPORTUNITY",
                        principalColumn: "SALES_OPPORTUNITY_ID");
                });

            migrationBuilder.CreateTable(
                name: "SALES_OPPORTUNITY_WORK_EFFORT",
                columns: table => new
                {
                    SALESOPPORTUNITYID = table.Column<string>(name: "SALES_OPPORTUNITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SALES_OPPORTUNITY_WORK_EFFO", x => new { x.SALESOPPORTUNITYID, x.WORKEFFORTID });
                    table.ForeignKey(
                        name: "SOPPWEFF_SOPP",
                        column: x => x.SALESOPPORTUNITYID,
                        principalTable: "SALES_OPPORTUNITY",
                        principalColumn: "SALES_OPPORTUNITY_ID");
                    table.ForeignKey(
                        name: "SOPPWEFF_WEFF",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "TIME_ENTRY",
                columns: table => new
                {
                    TIMEENTRYID = table.Column<string>(name: "TIME_ENTRY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    RATETYPEID = table.Column<string>(name: "RATE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TIMESHEETID = table.Column<string>(name: "TIMESHEET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INVOICEID = table.Column<string>(name: "INVOICE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INVOICEITEMSEQID = table.Column<string>(name: "INVOICE_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HOURS = table.Column<double>(type: "float", nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TIME_ENTRY", x => x.TIMEENTRYID);
                    table.ForeignKey(
                        name: "TIME_ENT_INVIT",
                        columns: x => new { x.INVOICEID, x.INVOICEITEMSEQID },
                        principalTable: "INVOICE_ITEM",
                        principalColumns: new[] { "INVOICE_ID", "INVOICE_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "TIME_ENT_PRTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "TIME_ENT_RTTP",
                        column: x => x.RATETYPEID,
                        principalTable: "RATE_TYPE",
                        principalColumn: "RATE_TYPE_ID");
                    table.ForeignKey(
                        name: "TIME_ENT_TSHT",
                        column: x => x.TIMESHEETID,
                        principalTable: "TIMESHEET",
                        principalColumn: "TIMESHEET_ID");
                    table.ForeignKey(
                        name: "TIME_ENT_WEFF",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "TIMESHEET_ROLE",
                columns: table => new
                {
                    TIMESHEETID = table.Column<string>(name: "TIMESHEET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TIMESHEET_ROLE", x => new { x.TIMESHEETID, x.PARTYID, x.ROLETYPEID });
                    table.ForeignKey(
                        name: "TIMESHTRL_PRTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "TIMESHTRL_PTRL",
                        columns: x => new { x.PARTYID, x.ROLETYPEID },
                        principalTable: "PARTY_ROLE",
                        principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });
                    table.ForeignKey(
                        name: "TIMESHTRL_TSHT",
                        column: x => x.TIMESHEETID,
                        principalTable: "TIMESHEET",
                        principalColumn: "TIMESHEET_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_APPLICATION",
                columns: table => new
                {
                    PAYMENTAPPLICATIONID = table.Column<string>(name: "PAYMENT_APPLICATION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PAYMENTID = table.Column<string>(name: "PAYMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INVOICEID = table.Column<string>(name: "INVOICE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INVOICEITEMSEQID = table.Column<string>(name: "INVOICE_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    BILLINGACCOUNTID = table.Column<string>(name: "BILLING_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    OVERRIDEGLACCOUNTID = table.Column<string>(name: "OVERRIDE_GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TOPAYMENTID = table.Column<string>(name: "TO_PAYMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TAXAUTHGEOID = table.Column<string>(name: "TAX_AUTH_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AMOUNTAPPLIED = table.Column<decimal>(name: "AMOUNT_APPLIED", type: "decimal(18,2)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_APPLICATION", x => x.PAYMENTAPPLICATIONID);
                    table.ForeignKey(
                        name: "PAYMENT_APP_BACT",
                        column: x => x.BILLINGACCOUNTID,
                        principalTable: "BILLING_ACCOUNT",
                        principalColumn: "BILLING_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "PAYMENT_APP_GEO",
                        column: x => x.TAXAUTHGEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "PAYMENT_APP_INV",
                        column: x => x.INVOICEID,
                        principalTable: "INVOICE",
                        principalColumn: "INVOICE_ID");
                    table.ForeignKey(
                        name: "PAYMENT_APP_ORGLA",
                        column: x => x.OVERRIDEGLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "PAYMENT_APP_PMT",
                        column: x => x.PAYMENTID,
                        principalTable: "PAYMENT",
                        principalColumn: "PAYMENT_ID");
                    table.ForeignKey(
                        name: "PAYMENT_APP_TPMT",
                        column: x => x.TOPAYMENTID,
                        principalTable: "PAYMENT",
                        principalColumn: "PAYMENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_ATTRIBUTE",
                columns: table => new
                {
                    PAYMENTID = table.Column<string>(name: "PAYMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_ATTRIBUTE", x => new { x.PAYMENTID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "PAYMENT_ATTR",
                        column: x => x.PAYMENTID,
                        principalTable: "PAYMENT",
                        principalColumn: "PAYMENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_BUDGET_ALLOCATION",
                columns: table => new
                {
                    BUDGETID = table.Column<string>(name: "BUDGET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    BUDGETITEMSEQID = table.Column<string>(name: "BUDGET_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PAYMENTID = table.Column<string>(name: "PAYMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    AMOUNT = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_BUDGET_ALLOCATION", x => new { x.BUDGETID, x.BUDGETITEMSEQID, x.PAYMENTID });
                    table.ForeignKey(
                        name: "PAYMENT_BA_BDGT",
                        column: x => x.BUDGETID,
                        principalTable: "BUDGET",
                        principalColumn: "BUDGET_ID");
                    table.ForeignKey(
                        name: "PAYMENT_BA_PMT",
                        column: x => x.PAYMENTID,
                        principalTable: "PAYMENT",
                        principalColumn: "PAYMENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_CONTENT",
                columns: table => new
                {
                    PAYMENTID = table.Column<string>(name: "PAYMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PAYMENTCONTENTTYPEID = table.Column<string>(name: "PAYMENT_CONTENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_CONTENT", x => new { x.CONTENTID, x.PAYMENTID, x.PAYMENTCONTENTTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PAYMENT_CNT_CNT",
                        column: x => x.CONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "PAYMENT_CNT_PROD",
                        column: x => x.PAYMENTID,
                        principalTable: "PAYMENT",
                        principalColumn: "PAYMENT_ID");
                    table.ForeignKey(
                        name: "PAYMENT_CNT_TYPE",
                        column: x => x.PAYMENTCONTENTTYPEID,
                        principalTable: "PAYMENT_CONTENT_TYPE",
                        principalColumn: "PAYMENT_CONTENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PAYMENT_GROUP_MEMBER",
                columns: table => new
                {
                    PAYMENTGROUPID = table.Column<string>(name: "PAYMENT_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PAYMENTID = table.Column<string>(name: "PAYMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAYMENT_GROUP_MEMBER", x => new { x.PAYMENTGROUPID, x.PAYMENTID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PAYGRPMMBR_PAYMNT",
                        column: x => x.PAYMENTID,
                        principalTable: "PAYMENT",
                        principalColumn: "PAYMENT_ID");
                    table.ForeignKey(
                        name: "PAYGRPMMBR_PG",
                        column: x => x.PAYMENTGROUPID,
                        principalTable: "PAYMENT_GROUP",
                        principalColumn: "PAYMENT_GROUP_ID");
                });

            migrationBuilder.CreateTable(
                name: "PERF_REVIEW",
                columns: table => new
                {
                    EMPLOYEEPARTYID = table.Column<string>(name: "EMPLOYEE_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    EMPLOYEEROLETYPEID = table.Column<string>(name: "EMPLOYEE_ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PERFREVIEWID = table.Column<string>(name: "PERF_REVIEW_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    MANAGERPARTYID = table.Column<string>(name: "MANAGER_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    MANAGERROLETYPEID = table.Column<string>(name: "MANAGER_ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PAYMENTID = table.Column<string>(name: "PAYMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    EMPLPOSITIONID = table.Column<string>(name: "EMPL_POSITION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PERF_REVIEW", x => new { x.EMPLOYEEPARTYID, x.EMPLOYEEROLETYPEID, x.PERFREVIEWID });
                    table.ForeignKey(
                        name: "PERF_REV_EPTRL",
                        columns: x => new { x.EMPLOYEEPARTYID, x.EMPLOYEEROLETYPEID },
                        principalTable: "PARTY_ROLE",
                        principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });
                    table.ForeignKey(
                        name: "PERF_REV_EPTY",
                        column: x => x.EMPLOYEEPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PERF_REV_MPTY",
                        column: x => x.MANAGERPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PERF_REV_PMNT",
                        column: x => x.PAYMENTID,
                        principalTable: "PAYMENT",
                        principalColumn: "PAYMENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "RETURN_ITEM_RESPONSE",
                columns: table => new
                {
                    RETURNITEMRESPONSEID = table.Column<string>(name: "RETURN_ITEM_RESPONSE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ORDERPAYMENTPREFERENCEID = table.Column<string>(name: "ORDER_PAYMENT_PREFERENCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    REPLACEMENTORDERID = table.Column<string>(name: "REPLACEMENT_ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PAYMENTID = table.Column<string>(name: "PAYMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    BILLINGACCOUNTID = table.Column<string>(name: "BILLING_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FINACCOUNTTRANSID = table.Column<string>(name: "FIN_ACCOUNT_TRANS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RESPONSEAMOUNT = table.Column<decimal>(name: "RESPONSE_AMOUNT", type: "decimal(18,2)", nullable: true),
                    RESPONSEDATE = table.Column<DateTime>(name: "RESPONSE_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RETURN_ITEM_RESPONSE", x => x.RETURNITEMRESPONSEID);
                    table.ForeignKey(
                        name: "RTN_PAY_BACT",
                        column: x => x.BILLINGACCOUNTID,
                        principalTable: "BILLING_ACCOUNT",
                        principalColumn: "BILLING_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "RTN_PAY_FINACTTX",
                        column: x => x.FINACCOUNTTRANSID,
                        principalTable: "FIN_ACCOUNT_TRANS",
                        principalColumn: "FIN_ACCOUNT_TRANS_ID");
                    table.ForeignKey(
                        name: "RTN_PAY_ORDPAYPF",
                        column: x => x.ORDERPAYMENTPREFERENCEID,
                        principalTable: "ORDER_PAYMENT_PREFERENCE",
                        principalColumn: "ORDER_PAYMENT_PREFERENCE_ID");
                    table.ForeignKey(
                        name: "RTN_PAY_PAYMENT",
                        column: x => x.PAYMENTID,
                        principalTable: "PAYMENT",
                        principalColumn: "PAYMENT_ID");
                    table.ForeignKey(
                        name: "RTN_RESP_NEWORD",
                        column: x => x.REPLACEMENTORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT_ATTRIBUTE",
                columns: table => new
                {
                    SHIPMENTID = table.Column<string>(name: "SHIPMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT_ATTRIBUTE", x => new { x.SHIPMENTID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "SHPMNT_ATTR",
                        column: x => x.SHIPMENTID,
                        principalTable: "SHIPMENT",
                        principalColumn: "SHIPMENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT_CONTACT_MECH",
                columns: table => new
                {
                    SHIPMENTID = table.Column<string>(name: "SHIPMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPMENTCONTACTMECHTYPEID = table.Column<string>(name: "SHIPMENT_CONTACT_MECH_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT_CONTACT_MECH", x => new { x.SHIPMENTID, x.SHIPMENTCONTACTMECHTYPEID });
                    table.ForeignKey(
                        name: "SHPMT_CMECH",
                        column: x => x.SHIPMENTID,
                        principalTable: "SHIPMENT",
                        principalColumn: "SHIPMENT_ID");
                    table.ForeignKey(
                        name: "SHPMT_CMECH_CM",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "SHPMT_CMECH_TYPE",
                        column: x => x.SHIPMENTCONTACTMECHTYPEID,
                        principalTable: "SHIPMENT_CONTACT_MECH_TYPE",
                        principalColumn: "SHIPMENT_CONTACT_MECH_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT_ITEM",
                columns: table => new
                {
                    SHIPMENTID = table.Column<string>(name: "SHIPMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPMENTITEMSEQID = table.Column<string>(name: "SHIPMENT_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    SHIPMENTCONTENTDESCRIPTION = table.Column<string>(name: "SHIPMENT_CONTENT_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT_ITEM", x => new { x.SHIPMENTID, x.SHIPMENTITEMSEQID });
                    table.ForeignKey(
                        name: "SHPMNT_ITM_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "SHPMNT_ITM_SHPMT",
                        column: x => x.SHIPMENTID,
                        principalTable: "SHIPMENT",
                        principalColumn: "SHIPMENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT_PACKAGE",
                columns: table => new
                {
                    SHIPMENTID = table.Column<string>(name: "SHIPMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPMENTPACKAGESEQID = table.Column<string>(name: "SHIPMENT_PACKAGE_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPMENTBOXTYPEID = table.Column<string>(name: "SHIPMENT_BOX_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DATECREATED = table.Column<DateTime>(name: "DATE_CREATED", type: "datetime", nullable: true),
                    BOXLENGTH = table.Column<decimal>(name: "BOX_LENGTH", type: "decimal(18,6)", nullable: true),
                    BOXHEIGHT = table.Column<decimal>(name: "BOX_HEIGHT", type: "decimal(18,6)", nullable: true),
                    BOXWIDTH = table.Column<decimal>(name: "BOX_WIDTH", type: "decimal(18,6)", nullable: true),
                    DIMENSIONUOMID = table.Column<string>(name: "DIMENSION_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    WEIGHT = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    WEIGHTUOMID = table.Column<string>(name: "WEIGHT_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INSUREDVALUE = table.Column<decimal>(name: "INSURED_VALUE", type: "decimal(18,2)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT_PACKAGE", x => new { x.SHIPMENTID, x.SHIPMENTPACKAGESEQID });
                    table.ForeignKey(
                        name: "SHPKG_BXTYP",
                        column: x => x.SHIPMENTBOXTYPEID,
                        principalTable: "SHIPMENT_BOX_TYPE",
                        principalColumn: "SHIPMENT_BOX_TYPE_ID");
                    table.ForeignKey(
                        name: "SHPKG_DUOM",
                        column: x => x.DIMENSIONUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "SHPKG_SHPMNT",
                        column: x => x.SHIPMENTID,
                        principalTable: "SHIPMENT",
                        principalColumn: "SHIPMENT_ID");
                    table.ForeignKey(
                        name: "SHPKG_WUOM",
                        column: x => x.WEIGHTUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT_ROUTE_SEGMENT",
                columns: table => new
                {
                    SHIPMENTID = table.Column<string>(name: "SHIPMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPMENTROUTESEGMENTID = table.Column<string>(name: "SHIPMENT_ROUTE_SEGMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DELIVERYID = table.Column<string>(name: "DELIVERY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORIGINFACILITYID = table.Column<string>(name: "ORIGIN_FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESTFACILITYID = table.Column<string>(name: "DEST_FACILITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORIGINCONTACTMECHID = table.Column<string>(name: "ORIGIN_CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORIGINTELECOMNUMBERID = table.Column<string>(name: "ORIGIN_TELECOM_NUMBER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESTCONTACTMECHID = table.Column<string>(name: "DEST_CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESTTELECOMNUMBERID = table.Column<string>(name: "DEST_TELECOM_NUMBER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CARRIERPARTYID = table.Column<string>(name: "CARRIER_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SHIPMENTMETHODTYPEID = table.Column<string>(name: "SHIPMENT_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CARRIERSERVICESTATUSID = table.Column<string>(name: "CARRIER_SERVICE_STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CARRIERDELIVERYZONE = table.Column<string>(name: "CARRIER_DELIVERY_ZONE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    CARRIERRESTRICTIONCODES = table.Column<string>(name: "CARRIER_RESTRICTION_CODES", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    CARRIERRESTRICTIONDESC = table.Column<string>(name: "CARRIER_RESTRICTION_DESC", type: "text", nullable: true),
                    BILLINGWEIGHT = table.Column<decimal>(name: "BILLING_WEIGHT", type: "decimal(18,6)", nullable: true),
                    BILLINGWEIGHTUOMID = table.Column<string>(name: "BILLING_WEIGHT_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ACTUALTRANSPORTCOST = table.Column<decimal>(name: "ACTUAL_TRANSPORT_COST", type: "decimal(18,2)", nullable: true),
                    ACTUALSERVICECOST = table.Column<decimal>(name: "ACTUAL_SERVICE_COST", type: "decimal(18,2)", nullable: true),
                    ACTUALOTHERCOST = table.Column<decimal>(name: "ACTUAL_OTHER_COST", type: "decimal(18,2)", nullable: true),
                    ACTUALCOST = table.Column<decimal>(name: "ACTUAL_COST", type: "decimal(18,2)", nullable: true),
                    CURRENCYUOMID = table.Column<string>(name: "CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ACTUALSTARTDATE = table.Column<DateTime>(name: "ACTUAL_START_DATE", type: "datetime", nullable: true),
                    ACTUALARRIVALDATE = table.Column<DateTime>(name: "ACTUAL_ARRIVAL_DATE", type: "datetime", nullable: true),
                    ESTIMATEDSTARTDATE = table.Column<DateTime>(name: "ESTIMATED_START_DATE", type: "datetime", nullable: true),
                    ESTIMATEDARRIVALDATE = table.Column<DateTime>(name: "ESTIMATED_ARRIVAL_DATE", type: "datetime", nullable: true),
                    TRACKINGIDNUMBER = table.Column<string>(name: "TRACKING_ID_NUMBER", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    TRACKINGDIGEST = table.Column<string>(name: "TRACKING_DIGEST", type: "text", nullable: true),
                    UPDATEDBYUSERLOGINID = table.Column<string>(name: "UPDATED_BY_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDDATE = table.Column<DateTime>(name: "LAST_UPDATED_DATE", type: "datetime", nullable: true),
                    HOMEDELIVERYTYPE = table.Column<string>(name: "HOME_DELIVERY_TYPE", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    HOMEDELIVERYDATE = table.Column<DateTime>(name: "HOME_DELIVERY_DATE", type: "datetime", nullable: true),
                    THIRDPARTYACCOUNTNUMBER = table.Column<string>(name: "THIRD_PARTY_ACCOUNT_NUMBER", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    THIRDPARTYPOSTALCODE = table.Column<string>(name: "THIRD_PARTY_POSTAL_CODE", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    THIRDPARTYCOUNTRYGEOCODE = table.Column<string>(name: "THIRD_PARTY_COUNTRY_GEO_CODE", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    UPSHIGHVALUEREPORT = table.Column<byte[]>(name: "UPS_HIGH_VALUE_REPORT", type: "image", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT_ROUTE_SEGMENT", x => new { x.SHIPMENTID, x.SHIPMENTROUTESEGMENTID });
                    table.ForeignKey(
                        name: "SHPKRTSG_BWUOM",
                        column: x => x.BILLINGWEIGHTUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "SHPKRTSG_CSSTS",
                        column: x => x.CARRIERSERVICESTATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "SHPMT_RTSEG_CPTY",
                        column: x => x.CARRIERPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "SHPMT_RTSEG_CUOM",
                        column: x => x.CURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "SHPMT_RTSEG_DEL",
                        column: x => x.DELIVERYID,
                        principalTable: "DELIVERY",
                        principalColumn: "DELIVERY_ID");
                    table.ForeignKey(
                        name: "SHPMT_RTSEG_DFAC",
                        column: x => x.DESTFACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "SHPMT_RTSEG_DPAD",
                        column: x => x.DESTCONTACTMECHID,
                        principalTable: "POSTAL_ADDRESS",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "SHPMT_RTSEG_DTCN",
                        column: x => x.DESTTELECOMNUMBERID,
                        principalTable: "TELECOM_NUMBER",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "SHPMT_RTSEG_OFAC",
                        column: x => x.ORIGINFACILITYID,
                        principalTable: "FACILITY",
                        principalColumn: "FACILITY_ID");
                    table.ForeignKey(
                        name: "SHPMT_RTSEG_OPAD",
                        column: x => x.ORIGINCONTACTMECHID,
                        principalTable: "POSTAL_ADDRESS",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "SHPMT_RTSEG_OTCN",
                        column: x => x.ORIGINTELECOMNUMBERID,
                        principalTable: "TELECOM_NUMBER",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "SHPMT_RTSEG_SHMT",
                        column: x => x.SHIPMENTMETHODTYPEID,
                        principalTable: "SHIPMENT_METHOD_TYPE",
                        principalColumn: "SHIPMENT_METHOD_TYPE_ID");
                    table.ForeignKey(
                        name: "SHPMT_RTSEG_SHPMT",
                        column: x => x.SHIPMENTID,
                        principalTable: "SHIPMENT",
                        principalColumn: "SHIPMENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT_STATUS",
                columns: table => new
                {
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPMENTID = table.Column<string>(name: "SHIPMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSDATE = table.Column<DateTime>(name: "STATUS_DATE", type: "datetime", nullable: true),
                    CHANGEBYUSERLOGINID = table.Column<string>(name: "CHANGE_BY_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT_STATUS", x => new { x.STATUSID, x.SHIPMENTID });
                    table.ForeignKey(
                        name: "SHPMNT_STTS_SHMT",
                        column: x => x.SHIPMENTID,
                        principalTable: "SHIPMENT",
                        principalColumn: "SHIPMENT_ID");
                    table.ForeignKey(
                        name: "SHPMNT_STTS_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "SHPMNT_STTS_USRLGN",
                        column: x => x.CHANGEBYUSERLOGINID,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_EFFORT_SURVEY_APPL",
                columns: table => new
                {
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SURVEYID = table.Column<string>(name: "SURVEY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_EFFORT_SURVEY_APPL", x => new { x.WORKEFFORTID, x.SURVEYID, x.FROMDATE });
                    table.ForeignKey(
                        name: "WKEF_SURVAPL_PSSA",
                        column: x => x.SURVEYID,
                        principalTable: "PRODUCT_STORE_SURVEY_APPL",
                        principalColumn: "PRODUCT_STORE_SURVEY_ID");
                    table.ForeignKey(
                        name: "WKEF_SURVAPL_SVY",
                        column: x => x.SURVEYID,
                        principalTable: "SURVEY",
                        principalColumn: "SURVEY_ID");
                    table.ForeignKey(
                        name: "WKEF_SURVAPL_WKE",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "QUOTE_ADJUSTMENT",
                columns: table => new
                {
                    QUOTEADJUSTMENTID = table.Column<string>(name: "QUOTE_ADJUSTMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    QUOTEADJUSTMENTTYPEID = table.Column<string>(name: "QUOTE_ADJUSTMENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUOTEID = table.Column<string>(name: "QUOTE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUOTEITEMSEQID = table.Column<string>(name: "QUOTE_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ISMANUAL = table.Column<string>(name: "IS_MANUAL", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    AMOUNT = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    PRODUCTPROMOID = table.Column<string>(name: "PRODUCT_PROMO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTPROMORULEID = table.Column<string>(name: "PRODUCT_PROMO_RULE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTPROMOACTIONSEQID = table.Column<string>(name: "PRODUCT_PROMO_ACTION_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTFEATUREID = table.Column<string>(name: "PRODUCT_FEATURE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CORRESPONDINGPRODUCTID = table.Column<string>(name: "CORRESPONDING_PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SOURCEREFERENCEID = table.Column<string>(name: "SOURCE_REFERENCE_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    SOURCEPERCENTAGE = table.Column<decimal>(name: "SOURCE_PERCENTAGE", type: "decimal(18,6)", nullable: true),
                    CUSTOMERREFERENCEID = table.Column<string>(name: "CUSTOMER_REFERENCE_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    PRIMARYGEOID = table.Column<string>(name: "PRIMARY_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SECONDARYGEOID = table.Column<string>(name: "SECONDARY_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    EXEMPTAMOUNT = table.Column<decimal>(name: "EXEMPT_AMOUNT", type: "decimal(18,2)", nullable: true),
                    TAXAUTHGEOID = table.Column<string>(name: "TAX_AUTH_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TAXAUTHPARTYID = table.Column<string>(name: "TAX_AUTH_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    OVERRIDEGLACCOUNTID = table.Column<string>(name: "OVERRIDE_GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INCLUDEINTAX = table.Column<string>(name: "INCLUDE_IN_TAX", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    INCLUDEINSHIPPING = table.Column<string>(name: "INCLUDE_IN_SHIPPING", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    CREATEDDATE = table.Column<DateTime>(name: "CREATED_DATE", type: "datetime", nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDDATE = table.Column<DateTime>(name: "LAST_MODIFIED_DATE", type: "datetime", nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QUOTE_ADJUSTMENT", x => x.QUOTEADJUSTMENTID);
                    table.ForeignKey(
                        name: "QUOTE_ADJ_OGLA",
                        column: x => x.OVERRIDEGLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "QUOTE_ADJ_OHEAD",
                        column: x => x.QUOTEID,
                        principalTable: "QUOTE",
                        principalColumn: "QUOTE_ID");
                    table.ForeignKey(
                        name: "QUOTE_ADJ_PRGEO",
                        column: x => x.PRIMARYGEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "QUOTE_ADJ_PROMO",
                        column: x => x.PRODUCTPROMOID,
                        principalTable: "PRODUCT_PROMO",
                        principalColumn: "PRODUCT_PROMO_ID");
                    table.ForeignKey(
                        name: "QUOTE_ADJ_SCGEO",
                        column: x => x.SECONDARYGEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "QUOTE_ADJ_TXA",
                        columns: x => new { x.TAXAUTHGEOID, x.TAXAUTHPARTYID },
                        principalTable: "TAX_AUTHORITY",
                        principalColumns: new[] { "TAX_AUTH_GEO_ID", "TAX_AUTH_PARTY_ID" });
                    table.ForeignKey(
                        name: "QUOTE_ADJ_TYPE",
                        column: x => x.QUOTEADJUSTMENTTYPEID,
                        principalTable: "ORDER_ADJUSTMENT_TYPE",
                        principalColumn: "ORDER_ADJUSTMENT_TYPE_ID");
                    table.ForeignKey(
                        name: "QUOTE_ADJ_USERL",
                        column: x => x.CREATEDBYUSERLOGIN,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                });

            migrationBuilder.CreateTable(
                name: "QUOTE_ATTRIBUTE",
                columns: table => new
                {
                    QUOTEID = table.Column<string>(name: "QUOTE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QUOTE_ATTRIBUTE", x => new { x.QUOTEID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "QUOTE_ATTR",
                        column: x => x.QUOTEID,
                        principalTable: "QUOTE",
                        principalColumn: "QUOTE_ID");
                });

            migrationBuilder.CreateTable(
                name: "QUOTE_COEFFICIENT",
                columns: table => new
                {
                    QUOTEID = table.Column<string>(name: "QUOTE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COEFFNAME = table.Column<string>(name: "COEFF_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    COEFFVALUE = table.Column<decimal>(name: "COEFF_VALUE", type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QUOTE_COEFFICIENT", x => new { x.QUOTEID, x.COEFFNAME });
                    table.ForeignKey(
                        name: "QUOTE_COEFF",
                        column: x => x.QUOTEID,
                        principalTable: "QUOTE",
                        principalColumn: "QUOTE_ID");
                });

            migrationBuilder.CreateTable(
                name: "QUOTE_ITEM",
                columns: table => new
                {
                    QUOTEID = table.Column<string>(name: "QUOTE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    QUOTEITEMSEQID = table.Column<string>(name: "QUOTE_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTFEATUREID = table.Column<string>(name: "PRODUCT_FEATURE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DELIVERABLETYPEID = table.Column<string>(name: "DELIVERABLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SKILLTYPEID = table.Column<string>(name: "SKILL_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    UOMID = table.Column<string>(name: "UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CUSTREQUESTID = table.Column<string>(name: "CUST_REQUEST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CUSTREQUESTITEMSEQID = table.Column<string>(name: "CUST_REQUEST_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    SELECTEDAMOUNT = table.Column<decimal>(name: "SELECTED_AMOUNT", type: "decimal(18,6)", nullable: true),
                    QUOTEUNITPRICE = table.Column<decimal>(name: "QUOTE_UNIT_PRICE", type: "decimal(18,2)", nullable: true),
                    QUOTEUNITLISTPRICE = table.Column<decimal>(name: "QUOTE_UNIT_LIST_PRICE", type: "decimal(18,2)", nullable: true),
                    RESERVSTART = table.Column<DateTime>(name: "RESERV_START", type: "datetime", nullable: true),
                    RESERVLENGTH = table.Column<decimal>(name: "RESERV_LENGTH", type: "decimal(18,6)", nullable: true),
                    RESERVPERSONS = table.Column<decimal>(name: "RESERV_PERSONS", type: "decimal(18,6)", nullable: true),
                    CONFIGID = table.Column<string>(name: "CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ESTIMATEDDELIVERYDATE = table.Column<DateTime>(name: "ESTIMATED_DELIVERY_DATE", type: "datetime", nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ISPROMO = table.Column<string>(name: "IS_PROMO", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LEADTIMEDAYS = table.Column<int>(name: "LEAD_TIME_DAYS", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QUOTE_ITEM", x => new { x.QUOTEID, x.QUOTEITEMSEQID });
                    table.ForeignKey(
                        name: "QUOTE_ITM_CSRITM",
                        columns: x => new { x.CUSTREQUESTID, x.CUSTREQUESTITEMSEQID },
                        principalTable: "CUST_REQUEST_ITEM",
                        principalColumns: new[] { "CUST_REQUEST_ID", "CUST_REQUEST_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "QUOTE_ITM_CSRQ",
                        column: x => x.CUSTREQUESTID,
                        principalTable: "CUST_REQUEST",
                        principalColumn: "CUST_REQUEST_ID");
                    table.ForeignKey(
                        name: "QUOTE_ITM_DELT",
                        column: x => x.DELIVERABLETYPEID,
                        principalTable: "DELIVERABLE_TYPE",
                        principalColumn: "DELIVERABLE_TYPE_ID");
                    table.ForeignKey(
                        name: "QUOTE_ITM_PFEAT",
                        column: x => x.PRODUCTFEATUREID,
                        principalTable: "PRODUCT_FEATURE",
                        principalColumn: "PRODUCT_FEATURE_ID");
                    table.ForeignKey(
                        name: "QUOTE_ITM_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "QUOTE_ITM_QTE",
                        column: x => x.QUOTEID,
                        principalTable: "QUOTE",
                        principalColumn: "QUOTE_ID");
                    table.ForeignKey(
                        name: "QUOTE_ITM_SKLT",
                        column: x => x.SKILLTYPEID,
                        principalTable: "SKILL_TYPE",
                        principalColumn: "SKILL_TYPE_ID");
                    table.ForeignKey(
                        name: "QUOTE_ITM_UOM",
                        column: x => x.UOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "QUOTE_ITM_WKEFF",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "QUOTE_NOTE",
                columns: table => new
                {
                    QUOTEID = table.Column<string>(name: "QUOTE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    NOTEID = table.Column<string>(name: "NOTE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QUOTE_NOTE", x => new { x.QUOTEID, x.NOTEID });
                    table.ForeignKey(
                        name: "QUOTE_NT_NOTE",
                        column: x => x.NOTEID,
                        principalTable: "NOTE_DATA",
                        principalColumn: "NOTE_ID");
                    table.ForeignKey(
                        name: "QUOTE_NT_QTE",
                        column: x => x.QUOTEID,
                        principalTable: "QUOTE",
                        principalColumn: "QUOTE_ID");
                });

            migrationBuilder.CreateTable(
                name: "QUOTE_ROLE",
                columns: table => new
                {
                    QUOTEID = table.Column<string>(name: "QUOTE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QUOTE_ROLE", x => new { x.QUOTEID, x.PARTYID, x.ROLETYPEID });
                    table.ForeignKey(
                        name: "QUOTE_RL_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "QUOTE_RL_PROLE",
                        columns: x => new { x.PARTYID, x.ROLETYPEID },
                        principalTable: "PARTY_ROLE",
                        principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });
                    table.ForeignKey(
                        name: "QUOTE_RL_QUOTE",
                        column: x => x.QUOTEID,
                        principalTable: "QUOTE",
                        principalColumn: "QUOTE_ID");
                });

            migrationBuilder.CreateTable(
                name: "QUOTE_TERM",
                columns: table => new
                {
                    TERMTYPEID = table.Column<string>(name: "TERM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    QUOTEID = table.Column<string>(name: "QUOTE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    QUOTEITEMSEQID = table.Column<string>(name: "QUOTE_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TERMVALUE = table.Column<int>(name: "TERM_VALUE", type: "int", nullable: true),
                    UOMID = table.Column<string>(name: "UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TERMDAYS = table.Column<int>(name: "TERM_DAYS", type: "int", nullable: true),
                    TEXTVALUE = table.Column<string>(name: "TEXT_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QUOTE_TERM", x => new { x.TERMTYPEID, x.QUOTEID, x.QUOTEITEMSEQID });
                    table.ForeignKey(
                        name: "QUOTE_TERM_QTE",
                        column: x => x.QUOTEID,
                        principalTable: "QUOTE",
                        principalColumn: "QUOTE_ID");
                    table.ForeignKey(
                        name: "QUOTE_TERM_TTYPE",
                        column: x => x.TERMTYPEID,
                        principalTable: "TERM_TYPE",
                        principalColumn: "TERM_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "QUOTE_WORK_EFFORT",
                columns: table => new
                {
                    QUOTEID = table.Column<string>(name: "QUOTE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QUOTE_WORK_EFFORT", x => new { x.QUOTEID, x.WORKEFFORTID });
                    table.ForeignKey(
                        name: "QUOTE_WE_QUOTE",
                        column: x => x.QUOTEID,
                        principalTable: "QUOTE",
                        principalColumn: "QUOTE_ID");
                    table.ForeignKey(
                        name: "QUOTE_WE_WEFF",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "SALES_OPPORTUNITY_QUOTE",
                columns: table => new
                {
                    SALESOPPORTUNITYID = table.Column<string>(name: "SALES_OPPORTUNITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    QUOTEID = table.Column<string>(name: "QUOTE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SALES_OPPORTUNITY_QUOTE", x => new { x.SALESOPPORTUNITYID, x.QUOTEID });
                    table.ForeignKey(
                        name: "SOPPQTE_QTE",
                        column: x => x.QUOTEID,
                        principalTable: "QUOTE",
                        principalColumn: "QUOTE_ID");
                    table.ForeignKey(
                        name: "SOPPQTE_SOPP",
                        column: x => x.SALESOPPORTUNITYID,
                        principalTable: "SALES_OPPORTUNITY",
                        principalColumn: "SALES_OPPORTUNITY_ID");
                });

            migrationBuilder.CreateTable(
                name: "SEGMENT_GROUP_CLASSIFICATION",
                columns: table => new
                {
                    SEGMENTGROUPID = table.Column<string>(name: "SEGMENT_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYCLASSIFICATIONGROUPID = table.Column<string>(name: "PARTY_CLASSIFICATION_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SEGMENT_GROUP_CLASSIFICATIO", x => new { x.SEGMENTGROUPID, x.PARTYCLASSIFICATIONGROUPID });
                    table.ForeignKey(
                        name: "SGMTGRPCLS_PCGP",
                        column: x => x.PARTYCLASSIFICATIONGROUPID,
                        principalTable: "PARTY_CLASSIFICATION_GROUP",
                        principalColumn: "PARTY_CLASSIFICATION_GROUP_ID");
                    table.ForeignKey(
                        name: "SGMTGRPCLS_SGGP",
                        column: x => x.SEGMENTGROUPID,
                        principalTable: "SEGMENT_GROUP",
                        principalColumn: "SEGMENT_GROUP_ID");
                });

            migrationBuilder.CreateTable(
                name: "SEGMENT_GROUP_GEO",
                columns: table => new
                {
                    SEGMENTGROUPID = table.Column<string>(name: "SEGMENT_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    GEOID = table.Column<string>(name: "GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SEGMENT_GROUP_GEO", x => new { x.SEGMENTGROUPID, x.GEOID });
                    table.ForeignKey(
                        name: "SGMTGRPGEO_GEO",
                        column: x => x.GEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "SGMTGRPGEO_SGGP",
                        column: x => x.SEGMENTGROUPID,
                        principalTable: "SEGMENT_GROUP",
                        principalColumn: "SEGMENT_GROUP_ID");
                });

            migrationBuilder.CreateTable(
                name: "SEGMENT_GROUP_ROLE",
                columns: table => new
                {
                    SEGMENTGROUPID = table.Column<string>(name: "SEGMENT_GROUP_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SEGMENT_GROUP_ROLE", x => new { x.SEGMENTGROUPID, x.PARTYID, x.ROLETYPEID });
                    table.ForeignKey(
                        name: "SGMTGRPRL_PRLE",
                        columns: x => new { x.PARTYID, x.ROLETYPEID },
                        principalTable: "PARTY_ROLE",
                        principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });
                    table.ForeignKey(
                        name: "SGMTGRPRL_SGGP",
                        column: x => x.SEGMENTGROUPID,
                        principalTable: "SEGMENT_GROUP",
                        principalColumn: "SEGMENT_GROUP_ID");
                });

            migrationBuilder.CreateTable(
                name: "RETURN_ADJUSTMENT",
                columns: table => new
                {
                    RETURNADJUSTMENTID = table.Column<string>(name: "RETURN_ADJUSTMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    RETURNADJUSTMENTTYPEID = table.Column<string>(name: "RETURN_ADJUSTMENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RETURNID = table.Column<string>(name: "RETURN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RETURNITEMSEQID = table.Column<string>(name: "RETURN_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SHIPGROUPSEQID = table.Column<string>(name: "SHIP_GROUP_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    RETURNTYPEID = table.Column<string>(name: "RETURN_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERADJUSTMENTID = table.Column<string>(name: "ORDER_ADJUSTMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AMOUNT = table.Column<decimal>(type: "decimal(18,3)", nullable: true),
                    PRODUCTPROMOID = table.Column<string>(name: "PRODUCT_PROMO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTPROMORULEID = table.Column<string>(name: "PRODUCT_PROMO_RULE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTPROMOACTIONSEQID = table.Column<string>(name: "PRODUCT_PROMO_ACTION_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTFEATUREID = table.Column<string>(name: "PRODUCT_FEATURE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CORRESPONDINGPRODUCTID = table.Column<string>(name: "CORRESPONDING_PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TAXAUTHORITYRATESEQID = table.Column<string>(name: "TAX_AUTHORITY_RATE_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SOURCEREFERENCEID = table.Column<string>(name: "SOURCE_REFERENCE_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    SOURCEPERCENTAGE = table.Column<decimal>(name: "SOURCE_PERCENTAGE", type: "decimal(18,6)", nullable: true),
                    CUSTOMERREFERENCEID = table.Column<string>(name: "CUSTOMER_REFERENCE_ID", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    PRIMARYGEOID = table.Column<string>(name: "PRIMARY_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SECONDARYGEOID = table.Column<string>(name: "SECONDARY_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    EXEMPTAMOUNT = table.Column<decimal>(name: "EXEMPT_AMOUNT", type: "decimal(18,2)", nullable: true),
                    TAXAUTHGEOID = table.Column<string>(name: "TAX_AUTH_GEO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TAXAUTHPARTYID = table.Column<string>(name: "TAX_AUTH_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    OVERRIDEGLACCOUNTID = table.Column<string>(name: "OVERRIDE_GL_ACCOUNT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INCLUDEINTAX = table.Column<string>(name: "INCLUDE_IN_TAX", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    INCLUDEINSHIPPING = table.Column<string>(name: "INCLUDE_IN_SHIPPING", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    CREATEDDATE = table.Column<DateTime>(name: "CREATED_DATE", type: "datetime", nullable: true),
                    CREATEDBYUSERLOGIN = table.Column<string>(name: "CREATED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTMODIFIEDDATE = table.Column<DateTime>(name: "LAST_MODIFIED_DATE", type: "datetime", nullable: true),
                    LASTMODIFIEDBYUSERLOGIN = table.Column<string>(name: "LAST_MODIFIED_BY_USER_LOGIN", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RETURN_ADJUSTMENT", x => x.RETURNADJUSTMENTID);
                    table.ForeignKey(
                        name: "RETURN_ADJ_OGLA",
                        column: x => x.OVERRIDEGLACCOUNTID,
                        principalTable: "GL_ACCOUNT",
                        principalColumn: "GL_ACCOUNT_ID");
                    table.ForeignKey(
                        name: "RETURN_ADJ_ORDADJ",
                        column: x => x.ORDERADJUSTMENTID,
                        principalTable: "ORDER_ADJUSTMENT",
                        principalColumn: "ORDER_ADJUSTMENT_ID");
                    table.ForeignKey(
                        name: "RETURN_ADJ_PRGEO",
                        column: x => x.PRIMARYGEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "RETURN_ADJ_PROMO",
                        column: x => x.PRODUCTPROMOID,
                        principalTable: "PRODUCT_PROMO",
                        principalColumn: "PRODUCT_PROMO_ID");
                    table.ForeignKey(
                        name: "RETURN_ADJ_RHEAD",
                        column: x => x.RETURNID,
                        principalTable: "RETURN_HEADER",
                        principalColumn: "RETURN_ID");
                    table.ForeignKey(
                        name: "RETURN_ADJ_SCGEO",
                        column: x => x.SECONDARYGEOID,
                        principalTable: "GEO",
                        principalColumn: "GEO_ID");
                    table.ForeignKey(
                        name: "RETURN_ADJ_TARP",
                        column: x => x.TAXAUTHORITYRATESEQID,
                        principalTable: "TAX_AUTHORITY_RATE_PRODUCT",
                        principalColumn: "TAX_AUTHORITY_RATE_SEQ_ID");
                    table.ForeignKey(
                        name: "RETURN_ADJ_TXA",
                        columns: x => new { x.TAXAUTHGEOID, x.TAXAUTHPARTYID },
                        principalTable: "TAX_AUTHORITY",
                        principalColumns: new[] { "TAX_AUTH_GEO_ID", "TAX_AUTH_PARTY_ID" });
                    table.ForeignKey(
                        name: "RETURN_ADJ_TYPE",
                        column: x => x.RETURNADJUSTMENTTYPEID,
                        principalTable: "RETURN_ADJUSTMENT_TYPE",
                        principalColumn: "RETURN_ADJUSTMENT_TYPE_ID");
                    table.ForeignKey(
                        name: "RETURN_ADJ_USERL",
                        column: x => x.CREATEDBYUSERLOGIN,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                    table.ForeignKey(
                        name: "RET_ADJ_RTN_TYPE",
                        column: x => x.RETURNTYPEID,
                        principalTable: "RETURN_TYPE",
                        principalColumn: "RETURN_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "SUBSCRIPTION_RESOURCE",
                columns: table => new
                {
                    SUBSCRIPTIONRESOURCEID = table.Column<string>(name: "SUBSCRIPTION_RESOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARENTRESOURCEID = table.Column<string>(name: "PARENT_RESOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    WEBSITEID = table.Column<string>(name: "WEB_SITE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SERVICENAMEONEXPIRY = table.Column<string>(name: "SERVICE_NAME_ON_EXPIRY", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SUBSCRIPTION_RESOURCE", x => x.SUBSCRIPTIONRESOURCEID);
                    table.ForeignKey(
                        name: "SUBSC_RES_CNTNT",
                        column: x => x.CONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "SUBSC_RES_PARENT",
                        column: x => x.PARENTRESOURCEID,
                        principalTable: "SUBSCRIPTION_RESOURCE",
                        principalColumn: "SUBSCRIPTION_RESOURCE_ID");
                    table.ForeignKey(
                        name: "SUBSC_RES_WBSITE",
                        column: x => x.WEBSITEID,
                        principalTable: "WEB_SITE",
                        principalColumn: "WEB_SITE_ID");
                });

            migrationBuilder.CreateTable(
                name: "WEB_PAGE",
                columns: table => new
                {
                    WEBPAGEID = table.Column<string>(name: "WEB_PAGE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PAGENAME = table.Column<string>(name: "PAGE_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    WEBSITEID = table.Column<string>(name: "WEB_SITE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true),
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WEB_PAGE", x => x.WEBPAGEID);
                    table.ForeignKey(
                        name: "WEB_PAGE_CONTENT",
                        column: x => x.CONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "WEB_PAGE_SITE",
                        column: x => x.WEBSITEID,
                        principalTable: "WEB_SITE",
                        principalColumn: "WEB_SITE_ID");
                });

            migrationBuilder.CreateTable(
                name: "WEB_SITE_CONTACT_LIST",
                columns: table => new
                {
                    WEBSITEID = table.Column<string>(name: "WEB_SITE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTLISTID = table.Column<string>(name: "CONTACT_LIST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WEB_SITE_CONTACT_LIST", x => new { x.WEBSITEID, x.CONTACTLISTID, x.FROMDATE });
                    table.ForeignKey(
                        name: "CNTCT_LST_WEB_SITE",
                        column: x => x.CONTACTLISTID,
                        principalTable: "CONTACT_LIST",
                        principalColumn: "CONTACT_LIST_ID");
                    table.ForeignKey(
                        name: "WEB_SITE_CNTCT_LST",
                        column: x => x.WEBSITEID,
                        principalTable: "WEB_SITE",
                        principalColumn: "WEB_SITE_ID");
                });

            migrationBuilder.CreateTable(
                name: "WEB_SITE_CONTENT",
                columns: table => new
                {
                    WEBSITEID = table.Column<string>(name: "WEB_SITE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    WEBSITECONTENTTYPEID = table.Column<string>(name: "WEB_SITE_CONTENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WEB_SITE_CONTENT", x => new { x.WEBSITEID, x.CONTENTID, x.WEBSITECONTENTTYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "WSCTNT_CONTENT",
                        column: x => x.CONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "WSCTNT_WEBSITE",
                        column: x => x.WEBSITEID,
                        principalTable: "WEB_SITE",
                        principalColumn: "WEB_SITE_ID");
                    table.ForeignKey(
                        name: "WSCTNT_WSCTTYPE",
                        column: x => x.WEBSITECONTENTTYPEID,
                        principalTable: "WEB_SITE_CONTENT_TYPE",
                        principalColumn: "WEB_SITE_CONTENT_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "WEB_SITE_PATH_ALIAS",
                columns: table => new
                {
                    WEBSITEID = table.Column<string>(name: "WEB_SITE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PATHALIAS = table.Column<string>(name: "PATH_ALIAS", type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    ALIASTO = table.Column<string>(name: "ALIAS_TO", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CONTENTID = table.Column<string>(name: "CONTENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    MAPKEY = table.Column<string>(name: "MAP_KEY", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WEB_SITE_PATH_ALIAS", x => new { x.WEBSITEID, x.PATHALIAS, x.FROMDATE });
                    table.ForeignKey(
                        name: "WSPATH_CONTENT",
                        column: x => x.CONTENTID,
                        principalTable: "CONTENT",
                        principalColumn: "CONTENT_ID");
                    table.ForeignKey(
                        name: "WSPATH_WEBSITE",
                        column: x => x.WEBSITEID,
                        principalTable: "WEB_SITE",
                        principalColumn: "WEB_SITE_ID");
                });

            migrationBuilder.CreateTable(
                name: "WEB_SITE_ROLE",
                columns: table => new
                {
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    WEBSITEID = table.Column<string>(name: "WEB_SITE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    SEQUENCENUM = table.Column<int>(name: "SEQUENCE_NUM", type: "int", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WEB_SITE_ROLE", x => new { x.PARTYID, x.ROLETYPEID, x.WEBSITEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "WSRLE_PTYRLE",
                        columns: x => new { x.PARTYID, x.ROLETYPEID },
                        principalTable: "PARTY_ROLE",
                        principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });
                    table.ForeignKey(
                        name: "WSRLE_WSITE",
                        column: x => x.WEBSITEID,
                        principalTable: "WEB_SITE",
                        principalColumn: "WEB_SITE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_FEATURE_APPL_ATTR",
                columns: table => new
                {
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTFEATUREID = table.Column<string>(name: "PRODUCT_FEATURE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_FEATURE_APPL_ATTR", x => new { x.PRODUCTID, x.PRODUCTFEATUREID, x.FROMDATE, x.ATTRNAME });
                    table.ForeignKey(
                        name: "PROD_FAPPA_FEATAPP",
                        columns: x => new { x.PRODUCTID, x.PRODUCTFEATUREID, x.FROMDATE },
                        principalTable: "PRODUCT_FEATURE_APPL",
                        principalColumns: new[] { "PRODUCT_ID", "PRODUCT_FEATURE_ID", "FROM_DATE" });
                    table.ForeignKey(
                        name: "PROD_FAPPA_FEATURE",
                        column: x => x.PRODUCTFEATUREID,
                        principalTable: "PRODUCT_FEATURE",
                        principalColumn: "PRODUCT_FEATURE_ID");
                    table.ForeignKey(
                        name: "PROD_FAPPA_PRODUCT",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                });

            migrationBuilder.CreateTable(
                name: "REQUIREMENT_ATTRIBUTE",
                columns: table => new
                {
                    REQUIREMENTID = table.Column<string>(name: "REQUIREMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_REQUIREMENT_ATTRIBUTE", x => new { x.REQUIREMENTID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "REQ_ATTR",
                        column: x => x.REQUIREMENTID,
                        principalTable: "REQUIREMENT",
                        principalColumn: "REQUIREMENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "REQUIREMENT_BUDGET_ALLOCATION",
                columns: table => new
                {
                    BUDGETID = table.Column<string>(name: "BUDGET_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    BUDGETITEMSEQID = table.Column<string>(name: "BUDGET_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    REQUIREMENTID = table.Column<string>(name: "REQUIREMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    AMOUNT = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_REQUIREMENT_BUDGET_ALLOCATI", x => new { x.BUDGETID, x.BUDGETITEMSEQID, x.REQUIREMENTID });
                    table.ForeignKey(
                        name: "REQ_BDGTAL_BITM",
                        columns: x => new { x.BUDGETID, x.BUDGETITEMSEQID },
                        principalTable: "BUDGET_ITEM",
                        principalColumns: new[] { "BUDGET_ID", "BUDGET_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "REQ_BDGTAL_REQ",
                        column: x => x.REQUIREMENTID,
                        principalTable: "REQUIREMENT",
                        principalColumn: "REQUIREMENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "REQUIREMENT_CUST_REQUEST",
                columns: table => new
                {
                    CUSTREQUESTID = table.Column<string>(name: "CUST_REQUEST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CUSTREQUESTITEMSEQID = table.Column<string>(name: "CUST_REQUEST_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    REQUIREMENTID = table.Column<string>(name: "REQUIREMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_REQUIREMENT_CUST_REQUEST", x => new { x.CUSTREQUESTID, x.CUSTREQUESTITEMSEQID, x.REQUIREMENTID });
                    table.ForeignKey(
                        name: "REQ_CSREQ_CRITM",
                        columns: x => new { x.CUSTREQUESTID, x.CUSTREQUESTITEMSEQID },
                        principalTable: "CUST_REQUEST_ITEM",
                        principalColumns: new[] { "CUST_REQUEST_ID", "CUST_REQUEST_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "REQ_CSREQ_REQ",
                        column: x => x.REQUIREMENTID,
                        principalTable: "REQUIREMENT",
                        principalColumn: "REQUIREMENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "REQUIREMENT_ROLE",
                columns: table => new
                {
                    REQUIREMENTID = table.Column<string>(name: "REQUIREMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_REQUIREMENT_ROLE", x => new { x.REQUIREMENTID, x.PARTYID, x.ROLETYPEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "REQ_ROLE_PROLE",
                        columns: x => new { x.PARTYID, x.ROLETYPEID },
                        principalTable: "PARTY_ROLE",
                        principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });
                    table.ForeignKey(
                        name: "REQ_ROLE_PRTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "REQ_ROLE_REQ",
                        column: x => x.REQUIREMENTID,
                        principalTable: "REQUIREMENT",
                        principalColumn: "REQUIREMENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "REQUIREMENT_STATUS",
                columns: table => new
                {
                    REQUIREMENTID = table.Column<string>(name: "REQUIREMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    STATUSDATE = table.Column<DateTime>(name: "STATUS_DATE", type: "datetime", nullable: true),
                    CHANGEBYUSERLOGINID = table.Column<string>(name: "CHANGE_BY_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_REQUIREMENT_STATUS", x => new { x.REQUIREMENTID, x.STATUSID });
                    table.ForeignKey(
                        name: "REQ_STTS_REQ",
                        column: x => x.REQUIREMENTID,
                        principalTable: "REQUIREMENT",
                        principalColumn: "REQUIREMENT_ID");
                    table.ForeignKey(
                        name: "REQ_STTS_STTS",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "REQ_STTS_USRLGN",
                        column: x => x.CHANGEBYUSERLOGINID,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                });

            migrationBuilder.CreateTable(
                name: "WORK_REQUIREMENT_FULFILLMENT",
                columns: table => new
                {
                    REQUIREMENTID = table.Column<string>(name: "REQUIREMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    WORKREQFULFTYPEID = table.Column<string>(name: "WORK_REQ_FULF_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WORK_REQUIREMENT_FULFILLMEN", x => new { x.REQUIREMENTID, x.WORKEFFORTID });
                    table.ForeignKey(
                        name: "WORK_REQFL_REQ",
                        column: x => x.REQUIREMENTID,
                        principalTable: "REQUIREMENT",
                        principalColumn: "REQUIREMENT_ID");
                    table.ForeignKey(
                        name: "WORK_REQFL_WEFF",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                    table.ForeignKey(
                        name: "WORK_REQFL_WRFT",
                        column: x => x.WORKREQFULFTYPEID,
                        principalTable: "WORK_REQ_FULF_TYPE",
                        principalColumn: "WORK_REQ_FULF_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PROD_PROMO_CODE_CONTACT_MECH",
                columns: table => new
                {
                    PRODUCTPROMOCODEID = table.Column<string>(name: "PRODUCT_PROMO_CODE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PROD_PROMO_CODE_CONTACT_MEC", x => new { x.PRODUCTPROMOCODEID, x.CONTACTMECHID });
                    table.ForeignKey(
                        name: "PROD_PRCDE_CM",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "PROD_PRCDE_PCD",
                        column: x => x.PRODUCTPROMOCODEID,
                        principalTable: "PRODUCT_PROMO_CODE",
                        principalColumn: "PRODUCT_PROMO_CODE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_PROMO_CODE_EMAIL",
                columns: table => new
                {
                    PRODUCTPROMOCODEID = table.Column<string>(name: "PRODUCT_PROMO_CODE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    EMAILADDRESS = table.Column<string>(name: "EMAIL_ADDRESS", type: "varchar(320)", unicode: false, maxLength: 320, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_PROMO_CODE_EMAIL", x => new { x.PRODUCTPROMOCODEID, x.EMAILADDRESS });
                    table.ForeignKey(
                        name: "PROD_PRCDE_OPCD",
                        column: x => x.PRODUCTPROMOCODEID,
                        principalTable: "PRODUCT_PROMO_CODE",
                        principalColumn: "PRODUCT_PROMO_CODE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_PROMO_CODE_PARTY",
                columns: table => new
                {
                    PRODUCTPROMOCODEID = table.Column<string>(name: "PRODUCT_PROMO_CODE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_PROMO_CODE_PARTY", x => new { x.PRODUCTPROMOCODEID, x.PARTYID });
                    table.ForeignKey(
                        name: "PROD_PRCDP_PCD",
                        column: x => x.PRODUCTPROMOCODEID,
                        principalTable: "PRODUCT_PROMO_CODE",
                        principalColumn: "PRODUCT_PROMO_CODE_ID");
                    table.ForeignKey(
                        name: "PROD_PRCDP_PRTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_PROMO_USE",
                columns: table => new
                {
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PROMOSEQUENCEID = table.Column<string>(name: "PROMO_SEQUENCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPROMOID = table.Column<string>(name: "PRODUCT_PROMO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTPROMOCODEID = table.Column<string>(name: "PRODUCT_PROMO_CODE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    TOTALDISCOUNTAMOUNT = table.Column<decimal>(name: "TOTAL_DISCOUNT_AMOUNT", type: "decimal(18,2)", nullable: true),
                    QUANTITYLEFTINACTIONS = table.Column<decimal>(name: "QUANTITY_LEFT_IN_ACTIONS", type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_PROMO_USE", x => new { x.ORDERID, x.PROMOSEQUENCEID });
                    table.ForeignKey(
                        name: "PROD_PRUSE_CODE",
                        column: x => x.PRODUCTPROMOCODEID,
                        principalTable: "PRODUCT_PROMO_CODE",
                        principalColumn: "PRODUCT_PROMO_CODE_ID");
                    table.ForeignKey(
                        name: "PROD_PRUSE_ORDR",
                        column: x => x.ORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                    table.ForeignKey(
                        name: "PROD_PRUSE_PROMO",
                        column: x => x.PRODUCTPROMOID,
                        principalTable: "PRODUCT_PROMO",
                        principalColumn: "PRODUCT_PROMO_ID");
                    table.ForeignKey(
                        name: "PROD_PRUSE_PTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                });

            migrationBuilder.CreateTable(
                name: "SHOPPING_LIST",
                columns: table => new
                {
                    SHOPPINGLISTID = table.Column<string>(name: "SHOPPING_LIST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHOPPINGLISTTYPEID = table.Column<string>(name: "SHOPPING_LIST_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARENTSHOPPINGLISTID = table.Column<string>(name: "PARENT_SHOPPING_LIST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTSTOREID = table.Column<string>(name: "PRODUCT_STORE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    VISITORID = table.Column<string>(name: "VISITOR_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LISTNAME = table.Column<string>(name: "LIST_NAME", type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ISPUBLIC = table.Column<string>(name: "IS_PUBLIC", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ISACTIVE = table.Column<string>(name: "IS_ACTIVE", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    CURRENCYUOM = table.Column<string>(name: "CURRENCY_UOM", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SHIPMENTMETHODTYPEID = table.Column<string>(name: "SHIPMENT_METHOD_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CARRIERPARTYID = table.Column<string>(name: "CARRIER_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CARRIERROLETYPEID = table.Column<string>(name: "CARRIER_ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PAYMENTMETHODID = table.Column<string>(name: "PAYMENT_METHOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RECURRENCEINFOID = table.Column<string>(name: "RECURRENCE_INFO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTORDEREDDATE = table.Column<DateTime>(name: "LAST_ORDERED_DATE", type: "datetime", nullable: true),
                    LASTADMINMODIFIED = table.Column<DateTime>(name: "LAST_ADMIN_MODIFIED", type: "datetime", nullable: true),
                    PRODUCTPROMOCODEID = table.Column<string>(name: "PRODUCT_PROMO_CODE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHOPPING_LIST", x => x.SHOPPINGLISTID);
                    table.ForeignKey(
                        name: "SHLIST_CMECH",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "SHLIST_CSSM",
                        columns: x => new { x.SHIPMENTMETHODTYPEID, x.CARRIERPARTYID, x.CARRIERROLETYPEID },
                        principalTable: "CARRIER_SHIPMENT_METHOD",
                        principalColumns: new[] { "SHIPMENT_METHOD_TYPE_ID", "PARTY_ID", "ROLE_TYPE_ID" });
                    table.ForeignKey(
                        name: "SHLIST_PARENT",
                        column: x => x.PARENTSHOPPINGLISTID,
                        principalTable: "SHOPPING_LIST",
                        principalColumn: "SHOPPING_LIST_ID");
                    table.ForeignKey(
                        name: "SHLIST_PRDS",
                        column: x => x.PRODUCTSTOREID,
                        principalTable: "PRODUCT_STORE",
                        principalColumn: "PRODUCT_STORE_ID");
                    table.ForeignKey(
                        name: "SHLIST_PRMCD",
                        column: x => x.PRODUCTPROMOCODEID,
                        principalTable: "PRODUCT_PROMO_CODE",
                        principalColumn: "PRODUCT_PROMO_CODE_ID");
                    table.ForeignKey(
                        name: "SHLIST_PTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "SHLIST_PYMETH",
                        column: x => x.PAYMENTMETHODID,
                        principalTable: "PAYMENT_METHOD",
                        principalColumn: "PAYMENT_METHOD_ID");
                    table.ForeignKey(
                        name: "SHLIST_RECINFO",
                        column: x => x.RECURRENCEINFOID,
                        principalTable: "RECURRENCE_INFO",
                        principalColumn: "RECURRENCE_INFO_ID");
                    table.ForeignKey(
                        name: "SHLIST_TYPE",
                        column: x => x.SHOPPINGLISTTYPEID,
                        principalTable: "SHOPPING_LIST_TYPE",
                        principalColumn: "SHOPPING_LIST_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_PROMO_ACTION",
                columns: table => new
                {
                    PRODUCTPROMOID = table.Column<string>(name: "PRODUCT_PROMO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPROMORULEID = table.Column<string>(name: "PRODUCT_PROMO_RULE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPROMOACTIONSEQID = table.Column<string>(name: "PRODUCT_PROMO_ACTION_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPROMOACTIONENUMID = table.Column<string>(name: "PRODUCT_PROMO_ACTION_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CUSTOMMETHODID = table.Column<string>(name: "CUSTOM_METHOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERADJUSTMENTTYPEID = table.Column<string>(name: "ORDER_ADJUSTMENT_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SERVICENAME = table.Column<string>(name: "SERVICE_NAME", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    AMOUNT = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    USECARTQUANTITY = table.Column<string>(name: "USE_CART_QUANTITY", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_PROMO_ACTION", x => new { x.PRODUCTPROMOID, x.PRODUCTPROMORULEID, x.PRODUCTPROMOACTIONSEQID });
                    table.ForeignKey(
                        name: "PROD_PRACT_CMET",
                        column: x => x.CUSTOMMETHODID,
                        principalTable: "CUSTOM_METHOD",
                        principalColumn: "CUSTOM_METHOD_ID");
                    table.ForeignKey(
                        name: "PROD_PRACT_ENUM",
                        column: x => x.PRODUCTPROMOACTIONENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "PROD_PRACT_OATYPE",
                        column: x => x.ORDERADJUSTMENTTYPEID,
                        principalTable: "ORDER_ADJUSTMENT_TYPE",
                        principalColumn: "ORDER_ADJUSTMENT_TYPE_ID");
                    table.ForeignKey(
                        name: "PROD_PRACT_PR",
                        column: x => x.PRODUCTPROMOID,
                        principalTable: "PRODUCT_PROMO",
                        principalColumn: "PRODUCT_PROMO_ID");
                    table.ForeignKey(
                        name: "PROD_PRACT_RL",
                        columns: x => new { x.PRODUCTPROMOID, x.PRODUCTPROMORULEID },
                        principalTable: "PRODUCT_PROMO_RULE",
                        principalColumns: new[] { "PRODUCT_PROMO_ID", "PRODUCT_PROMO_RULE_ID" });
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_PROMO_COND",
                columns: table => new
                {
                    PRODUCTPROMOID = table.Column<string>(name: "PRODUCT_PROMO_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPROMORULEID = table.Column<string>(name: "PRODUCT_PROMO_RULE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTPROMOCONDSEQID = table.Column<string>(name: "PRODUCT_PROMO_COND_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    CUSTOMMETHODID = table.Column<string>(name: "CUSTOM_METHOD_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INPUTPARAMENUMID = table.Column<string>(name: "INPUT_PARAM_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    OPERATORENUMID = table.Column<string>(name: "OPERATOR_ENUM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CONDVALUE = table.Column<string>(name: "COND_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    OTHERVALUE = table.Column<string>(name: "OTHER_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_PROMO_COND", x => new { x.PRODUCTPROMOID, x.PRODUCTPROMORULEID, x.PRODUCTPROMOCONDSEQID });
                    table.ForeignKey(
                        name: "PROD_PRCOND_CMETH",
                        column: x => x.CUSTOMMETHODID,
                        principalTable: "CUSTOM_METHOD",
                        principalColumn: "CUSTOM_METHOD_ID");
                    table.ForeignKey(
                        name: "PROD_PRCOND_INENUM",
                        column: x => x.INPUTPARAMENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "PROD_PRCOND_OPENUM",
                        column: x => x.OPERATORENUMID,
                        principalTable: "ENUMERATION",
                        principalColumn: "ENUM_ID");
                    table.ForeignKey(
                        name: "PROD_PRCOND_PROMO",
                        column: x => x.PRODUCTPROMOID,
                        principalTable: "PRODUCT_PROMO",
                        principalColumn: "PRODUCT_PROMO_ID");
                    table.ForeignKey(
                        name: "PROD_PRCOND_RULE",
                        columns: x => new { x.PRODUCTPROMOID, x.PRODUCTPROMORULEID },
                        principalTable: "PRODUCT_PROMO_RULE",
                        principalColumns: new[] { "PRODUCT_PROMO_ID", "PRODUCT_PROMO_RULE_ID" });
                });

            migrationBuilder.CreateTable(
                name: "PERF_REVIEW_ITEM",
                columns: table => new
                {
                    EMPLOYEEPARTYID = table.Column<string>(name: "EMPLOYEE_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    EMPLOYEEROLETYPEID = table.Column<string>(name: "EMPLOYEE_ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PERFREVIEWID = table.Column<string>(name: "PERF_REVIEW_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PERFREVIEWITEMSEQID = table.Column<string>(name: "PERF_REVIEW_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PERFREVIEWITEMTYPEID = table.Column<string>(name: "PERF_REVIEW_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PERFRATINGTYPEID = table.Column<string>(name: "PERF_RATING_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    COMMENTS = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PERF_REVIEW_ITEM", x => new { x.EMPLOYEEPARTYID, x.EMPLOYEEROLETYPEID, x.PERFREVIEWID, x.PERFREVIEWITEMSEQID });
                    table.ForeignKey(
                        name: "PERF_RVITM_EPTRL",
                        columns: x => new { x.EMPLOYEEPARTYID, x.EMPLOYEEROLETYPEID },
                        principalTable: "PARTY_ROLE",
                        principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });
                    table.ForeignKey(
                        name: "PERF_RVITM_EPTY",
                        column: x => x.EMPLOYEEPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "PERF_RVITM_PFRV",
                        columns: x => new { x.EMPLOYEEPARTYID, x.EMPLOYEEROLETYPEID, x.PERFREVIEWID },
                        principalTable: "PERF_REVIEW",
                        principalColumns: new[] { "EMPLOYEE_PARTY_ID", "EMPLOYEE_ROLE_TYPE_ID", "PERF_REVIEW_ID" });
                });

            migrationBuilder.CreateTable(
                name: "RETURN_ITEM",
                columns: table => new
                {
                    RETURNID = table.Column<string>(name: "RETURN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    RETURNITEMSEQID = table.Column<string>(name: "RETURN_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    RETURNREASONID = table.Column<string>(name: "RETURN_REASON_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RETURNTYPEID = table.Column<string>(name: "RETURN_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RETURNITEMTYPEID = table.Column<string>(name: "RETURN_ITEM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    STATUSID = table.Column<string>(name: "STATUS_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    EXPECTEDITEMSTATUS = table.Column<string>(name: "EXPECTED_ITEM_STATUS", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RETURNQUANTITY = table.Column<decimal>(name: "RETURN_QUANTITY", type: "decimal(18,6)", nullable: true),
                    RECEIVEDQUANTITY = table.Column<decimal>(name: "RECEIVED_QUANTITY", type: "decimal(18,6)", nullable: true),
                    RETURNPRICE = table.Column<decimal>(name: "RETURN_PRICE", type: "decimal(18,2)", nullable: true),
                    RETURNITEMRESPONSEID = table.Column<string>(name: "RETURN_ITEM_RESPONSE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RETURN_ITEM", x => new { x.RETURNID, x.RETURNITEMSEQID });
                    table.ForeignKey(
                        name: "RTN_ITEM_ITSTT",
                        column: x => x.EXPECTEDITEMSTATUS,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "RTN_ITEM_ODR",
                        column: x => x.ORDERID,
                        principalTable: "ORDER_HEADER",
                        principalColumn: "ORDER_ID");
                    table.ForeignKey(
                        name: "RTN_ITEM_ODRIT",
                        columns: x => new { x.ORDERID, x.ORDERITEMSEQID },
                        principalTable: "ORDER_ITEM",
                        principalColumns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "RTN_ITEM_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "RTN_ITEM_REASON",
                        column: x => x.RETURNREASONID,
                        principalTable: "RETURN_REASON",
                        principalColumn: "RETURN_REASON_ID");
                    table.ForeignKey(
                        name: "RTN_ITEM_RESP",
                        column: x => x.RETURNITEMRESPONSEID,
                        principalTable: "RETURN_ITEM_RESPONSE",
                        principalColumn: "RETURN_ITEM_RESPONSE_ID");
                    table.ForeignKey(
                        name: "RTN_ITEM_RTN",
                        column: x => x.RETURNID,
                        principalTable: "RETURN_HEADER",
                        principalColumn: "RETURN_ID");
                    table.ForeignKey(
                        name: "RTN_ITEM_STTSIT",
                        column: x => x.STATUSID,
                        principalTable: "STATUS_ITEM",
                        principalColumn: "STATUS_ID");
                    table.ForeignKey(
                        name: "RTN_ITEM_TYPE",
                        column: x => x.RETURNITEMTYPEID,
                        principalTable: "RETURN_ITEM_TYPE",
                        principalColumn: "RETURN_ITEM_TYPE_ID");
                    table.ForeignKey(
                        name: "RTN_TYPE",
                        column: x => x.RETURNTYPEID,
                        principalTable: "RETURN_TYPE",
                        principalColumn: "RETURN_TYPE_ID");
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT_ITEM_BILLING",
                columns: table => new
                {
                    SHIPMENTID = table.Column<string>(name: "SHIPMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPMENTITEMSEQID = table.Column<string>(name: "SHIPMENT_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVOICEID = table.Column<string>(name: "INVOICE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVOICEITEMSEQID = table.Column<string>(name: "INVOICE_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT_ITEM_BILLING", x => new { x.SHIPMENTID, x.SHIPMENTITEMSEQID, x.INVOICEID, x.INVOICEITEMSEQID });
                    table.ForeignKey(
                        name: "SHPMNT_ITBL_INIM",
                        columns: x => new { x.INVOICEID, x.INVOICEITEMSEQID },
                        principalTable: "INVOICE_ITEM",
                        principalColumns: new[] { "INVOICE_ID", "INVOICE_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "SHPMNT_ITBL_SPIM",
                        columns: x => new { x.SHIPMENTID, x.SHIPMENTITEMSEQID },
                        principalTable: "SHIPMENT_ITEM",
                        principalColumns: new[] { "SHIPMENT_ID", "SHIPMENT_ITEM_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT_ITEM_FEATURE",
                columns: table => new
                {
                    SHIPMENTID = table.Column<string>(name: "SHIPMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPMENTITEMSEQID = table.Column<string>(name: "SHIPMENT_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTFEATUREID = table.Column<string>(name: "PRODUCT_FEATURE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT_ITEM_FEATURE", x => new { x.SHIPMENTID, x.SHIPMENTITEMSEQID, x.PRODUCTFEATUREID });
                    table.ForeignKey(
                        name: "SHPMNT_ITFT_FEAT",
                        column: x => x.PRODUCTFEATUREID,
                        principalTable: "PRODUCT_FEATURE",
                        principalColumn: "PRODUCT_FEATURE_ID");
                    table.ForeignKey(
                        name: "SHPMNT_ITFT_SPIM",
                        columns: x => new { x.SHIPMENTID, x.SHIPMENTITEMSEQID },
                        principalTable: "SHIPMENT_ITEM",
                        principalColumns: new[] { "SHIPMENT_ID", "SHIPMENT_ITEM_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT_PACKAGE_CONTENT",
                columns: table => new
                {
                    SHIPMENTID = table.Column<string>(name: "SHIPMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPMENTPACKAGESEQID = table.Column<string>(name: "SHIPMENT_PACKAGE_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPMENTITEMSEQID = table.Column<string>(name: "SHIPMENT_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    SUBPRODUCTID = table.Column<string>(name: "SUB_PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SUBPRODUCTQUANTITY = table.Column<decimal>(name: "SUB_PRODUCT_QUANTITY", type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT_PACKAGE_CONTENT", x => new { x.SHIPMENTID, x.SHIPMENTPACKAGESEQID, x.SHIPMENTITEMSEQID });
                    table.ForeignKey(
                        name: "PCK_CNTNT_PROD",
                        column: x => x.SUBPRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "PCK_CNTNT_SHITM",
                        columns: x => new { x.SHIPMENTID, x.SHIPMENTITEMSEQID },
                        principalTable: "SHIPMENT_ITEM",
                        principalColumns: new[] { "SHIPMENT_ID", "SHIPMENT_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "PCK_CNTNT_SHPKG",
                        columns: x => new { x.SHIPMENTID, x.SHIPMENTPACKAGESEQID },
                        principalTable: "SHIPMENT_PACKAGE",
                        principalColumns: new[] { "SHIPMENT_ID", "SHIPMENT_PACKAGE_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "SHIPPING_DOCUMENT",
                columns: table => new
                {
                    DOCUMENTID = table.Column<string>(name: "DOCUMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPMENTID = table.Column<string>(name: "SHIPMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SHIPMENTITEMSEQID = table.Column<string>(name: "SHIPMENT_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SHIPMENTPACKAGESEQID = table.Column<string>(name: "SHIPMENT_PACKAGE_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPPING_DOCUMENT", x => x.DOCUMENTID);
                    table.ForeignKey(
                        name: "SHPNG_DOC_DOC",
                        column: x => x.DOCUMENTID,
                        principalTable: "DOCUMENT",
                        principalColumn: "DOCUMENT_ID");
                    table.ForeignKey(
                        name: "SHPNG_DOC_SHPKG",
                        columns: x => new { x.SHIPMENTID, x.SHIPMENTPACKAGESEQID },
                        principalTable: "SHIPMENT_PACKAGE",
                        principalColumns: new[] { "SHIPMENT_ID", "SHIPMENT_PACKAGE_SEQ_ID" });
                    table.ForeignKey(
                        name: "SHPNG_DOC_SMITM",
                        columns: x => new { x.SHIPMENTID, x.SHIPMENTITEMSEQID },
                        principalTable: "SHIPMENT_ITEM",
                        principalColumns: new[] { "SHIPMENT_ID", "SHIPMENT_ITEM_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT_PACKAGE_ROUTE_SEG",
                columns: table => new
                {
                    SHIPMENTID = table.Column<string>(name: "SHIPMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPMENTPACKAGESEQID = table.Column<string>(name: "SHIPMENT_PACKAGE_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPMENTROUTESEGMENTID = table.Column<string>(name: "SHIPMENT_ROUTE_SEGMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    TRACKINGCODE = table.Column<string>(name: "TRACKING_CODE", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    BOXNUMBER = table.Column<string>(name: "BOX_NUMBER", type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    LABELIMAGE = table.Column<byte[]>(name: "LABEL_IMAGE", type: "image", nullable: true),
                    LABELINTLSIGNIMAGE = table.Column<byte[]>(name: "LABEL_INTL_SIGN_IMAGE", type: "image", nullable: true),
                    LABELHTML = table.Column<string>(name: "LABEL_HTML", type: "text", nullable: true),
                    LABELPRINTED = table.Column<string>(name: "LABEL_PRINTED", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    INTERNATIONALINVOICE = table.Column<byte[]>(name: "INTERNATIONAL_INVOICE", type: "image", nullable: true),
                    PACKAGETRANSPORTCOST = table.Column<decimal>(name: "PACKAGE_TRANSPORT_COST", type: "decimal(18,2)", nullable: true),
                    PACKAGESERVICECOST = table.Column<decimal>(name: "PACKAGE_SERVICE_COST", type: "decimal(18,2)", nullable: true),
                    PACKAGEOTHERCOST = table.Column<decimal>(name: "PACKAGE_OTHER_COST", type: "decimal(18,2)", nullable: true),
                    CODAMOUNT = table.Column<decimal>(name: "COD_AMOUNT", type: "decimal(18,2)", nullable: true),
                    INSUREDAMOUNT = table.Column<decimal>(name: "INSURED_AMOUNT", type: "decimal(18,2)", nullable: true),
                    CURRENCYUOMID = table.Column<string>(name: "CURRENCY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT_PACKAGE_ROUTE_SEG", x => new { x.SHIPMENTID, x.SHIPMENTPACKAGESEQID, x.SHIPMENTROUTESEGMENTID });
                    table.ForeignKey(
                        name: "SHPKRTSG_CUOM",
                        column: x => x.CURRENCYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "SHPKRTSG_RTSG",
                        columns: x => new { x.SHIPMENTID, x.SHIPMENTROUTESEGMENTID },
                        principalTable: "SHIPMENT_ROUTE_SEGMENT",
                        principalColumns: new[] { "SHIPMENT_ID", "SHIPMENT_ROUTE_SEGMENT_ID" });
                    table.ForeignKey(
                        name: "SHPKRTSG_SHPKG",
                        columns: x => new { x.SHIPMENTID, x.SHIPMENTPACKAGESEQID },
                        principalTable: "SHIPMENT_PACKAGE",
                        principalColumns: new[] { "SHIPMENT_ID", "SHIPMENT_PACKAGE_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "QUOTE_TERM_ATTRIBUTE",
                columns: table => new
                {
                    TERMTYPEID = table.Column<string>(name: "TERM_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    QUOTEID = table.Column<string>(name: "QUOTE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    QUOTEITEMSEQID = table.Column<string>(name: "QUOTE_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QUOTE_TERM_ATTRIBUTE", x => new { x.TERMTYPEID, x.QUOTEID, x.QUOTEITEMSEQID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "QUOTE_TERM_ATTR",
                        columns: x => new { x.TERMTYPEID, x.QUOTEID, x.QUOTEITEMSEQID },
                        principalTable: "QUOTE_TERM",
                        principalColumns: new[] { "TERM_TYPE_ID", "QUOTE_ID", "QUOTE_ITEM_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "PRODUCT_SUBSCRIPTION_RESOURCE",
                columns: table => new
                {
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SUBSCRIPTIONRESOURCEID = table.Column<string>(name: "SUBSCRIPTION_RESOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: false),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    PURCHASEFROMDATE = table.Column<DateTime>(name: "PURCHASE_FROM_DATE", type: "datetime", nullable: true),
                    PURCHASETHRUDATE = table.Column<DateTime>(name: "PURCHASE_THRU_DATE", type: "datetime", nullable: true),
                    MAXLIFETIME = table.Column<int>(name: "MAX_LIFE_TIME", type: "int", nullable: true),
                    MAXLIFETIMEUOMID = table.Column<string>(name: "MAX_LIFE_TIME_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AVAILABLETIME = table.Column<int>(name: "AVAILABLE_TIME", type: "int", nullable: true),
                    AVAILABLETIMEUOMID = table.Column<string>(name: "AVAILABLE_TIME_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    USECOUNTLIMIT = table.Column<int>(name: "USE_COUNT_LIMIT", type: "int", nullable: true),
                    USETIME = table.Column<int>(name: "USE_TIME", type: "int", nullable: true),
                    USETIMEUOMID = table.Column<string>(name: "USE_TIME_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    USEROLETYPEID = table.Column<string>(name: "USE_ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AUTOMATICEXTEND = table.Column<string>(name: "AUTOMATIC_EXTEND", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    CANCLAUTMEXTTIME = table.Column<int>(name: "CANCL_AUTM_EXT_TIME", type: "int", nullable: true),
                    CANCLAUTMEXTTIMEUOMID = table.Column<string>(name: "CANCL_AUTM_EXT_TIME_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    GRACEPERIODONEXPIRY = table.Column<int>(name: "GRACE_PERIOD_ON_EXPIRY", type: "int", nullable: true),
                    GRACEPERIODONEXPIRYUOMID = table.Column<string>(name: "GRACE_PERIOD_ON_EXPIRY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRODUCT_SUBSCRIPTION_RESOUR", x => new { x.PRODUCTID, x.SUBSCRIPTIONRESOURCEID, x.FROMDATE });
                    table.ForeignKey(
                        name: "PROD_SBRS_ATU",
                        column: x => x.AVAILABLETIMEUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "PROD_SBRS_CTU",
                        column: x => x.CANCLAUTMEXTTIMEUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "PROD_SBRS_GTU",
                        column: x => x.GRACEPERIODONEXPIRYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "PROD_SBRS_MTU",
                        column: x => x.MAXLIFETIMEUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "PROD_SBRS_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "PROD_SBRS_SBRS",
                        column: x => x.SUBSCRIPTIONRESOURCEID,
                        principalTable: "SUBSCRIPTION_RESOURCE",
                        principalColumn: "SUBSCRIPTION_RESOURCE_ID");
                    table.ForeignKey(
                        name: "PROD_SBRS_URT",
                        column: x => x.USEROLETYPEID,
                        principalTable: "ROLE_TYPE",
                        principalColumn: "ROLE_TYPE_ID");
                    table.ForeignKey(
                        name: "PROD_SBRS_UTU",
                        column: x => x.USETIMEUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                });

            migrationBuilder.CreateTable(
                name: "SUBSCRIPTION",
                columns: table => new
                {
                    SUBSCRIPTIONID = table.Column<string>(name: "SUBSCRIPTION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    DESCRIPTION = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SUBSCRIPTIONRESOURCEID = table.Column<string>(name: "SUBSCRIPTION_RESOURCE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    COMMUNICATIONEVENTID = table.Column<string>(name: "COMMUNICATION_EVENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    CONTACTMECHID = table.Column<string>(name: "CONTACT_MECH_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORIGINATEDFROMPARTYID = table.Column<string>(name: "ORIGINATED_FROM_PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORIGINATEDFROMROLETYPEID = table.Column<string>(name: "ORIGINATED_FROM_ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PARTYNEEDID = table.Column<string>(name: "PARTY_NEED_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    NEEDTYPEID = table.Column<string>(name: "NEED_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTCATEGORYID = table.Column<string>(name: "PRODUCT_CATEGORY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    INVENTORYITEMID = table.Column<string>(name: "INVENTORY_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SUBSCRIPTIONTYPEID = table.Column<string>(name: "SUBSCRIPTION_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    EXTERNALSUBSCRIPTIONID = table.Column<string>(name: "EXTERNAL_SUBSCRIPTION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    FROMDATE = table.Column<DateTime>(name: "FROM_DATE", type: "datetime", nullable: true),
                    THRUDATE = table.Column<DateTime>(name: "THRU_DATE", type: "datetime", nullable: true),
                    PURCHASEFROMDATE = table.Column<DateTime>(name: "PURCHASE_FROM_DATE", type: "datetime", nullable: true),
                    PURCHASETHRUDATE = table.Column<DateTime>(name: "PURCHASE_THRU_DATE", type: "datetime", nullable: true),
                    MAXLIFETIME = table.Column<int>(name: "MAX_LIFE_TIME", type: "int", nullable: true),
                    MAXLIFETIMEUOMID = table.Column<string>(name: "MAX_LIFE_TIME_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AVAILABLETIME = table.Column<int>(name: "AVAILABLE_TIME", type: "int", nullable: true),
                    AVAILABLETIMEUOMID = table.Column<string>(name: "AVAILABLE_TIME_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    USECOUNTLIMIT = table.Column<int>(name: "USE_COUNT_LIMIT", type: "int", nullable: true),
                    USETIME = table.Column<int>(name: "USE_TIME", type: "int", nullable: true),
                    USETIMEUOMID = table.Column<string>(name: "USE_TIME_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    AUTOMATICEXTEND = table.Column<string>(name: "AUTOMATIC_EXTEND", type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    CANCLAUTMEXTTIME = table.Column<int>(name: "CANCL_AUTM_EXT_TIME", type: "int", nullable: true),
                    CANCLAUTMEXTTIMEUOMID = table.Column<string>(name: "CANCL_AUTM_EXT_TIME_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    GRACEPERIODONEXPIRY = table.Column<int>(name: "GRACE_PERIOD_ON_EXPIRY", type: "int", nullable: true),
                    GRACEPERIODONEXPIRYUOMID = table.Column<string>(name: "GRACE_PERIOD_ON_EXPIRY_UOM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    EXPIRATIONCOMPLETEDDATE = table.Column<DateTime>(name: "EXPIRATION_COMPLETED_DATE", type: "datetime", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SUBSCRIPTION", x => x.SUBSCRIPTIONID);
                    table.ForeignKey(
                        name: "SUBSC_ATU",
                        column: x => x.AVAILABLETIMEUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "SUBSC_CONT_MECH",
                        column: x => x.CONTACTMECHID,
                        principalTable: "CONTACT_MECH",
                        principalColumn: "CONTACT_MECH_ID");
                    table.ForeignKey(
                        name: "SUBSC_CTU",
                        column: x => x.CANCLAUTMEXTTIMEUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "SUBSC_GTU",
                        column: x => x.GRACEPERIODONEXPIRYUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "SUBSC_INV_ITM",
                        column: x => x.INVENTORYITEMID,
                        principalTable: "INVENTORY_ITEM",
                        principalColumn: "INVENTORY_ITEM_ID");
                    table.ForeignKey(
                        name: "SUBSC_MTU",
                        column: x => x.MAXLIFETIMEUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                    table.ForeignKey(
                        name: "SUBSC_NEED_TYPE",
                        column: x => x.NEEDTYPEID,
                        principalTable: "NEED_TYPE",
                        principalColumn: "NEED_TYPE_ID");
                    table.ForeignKey(
                        name: "SUBSC_OPARTY",
                        column: x => x.ORIGINATEDFROMPARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "SUBSC_ORDERITM",
                        columns: x => new { x.ORDERID, x.ORDERITEMSEQID },
                        principalTable: "ORDER_ITEM",
                        principalColumns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "SUBSC_OROLE_TYPE",
                        column: x => x.ORIGINATEDFROMROLETYPEID,
                        principalTable: "ROLE_TYPE",
                        principalColumn: "ROLE_TYPE_ID");
                    table.ForeignKey(
                        name: "SUBSC_PARTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "SUBSC_PRODUCT",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "SUBSC_PROD_CAT",
                        column: x => x.PRODUCTCATEGORYID,
                        principalTable: "PRODUCT_CATEGORY",
                        principalColumn: "PRODUCT_CATEGORY_ID");
                    table.ForeignKey(
                        name: "SUBSC_ROLE_TYPE",
                        column: x => x.ROLETYPEID,
                        principalTable: "ROLE_TYPE",
                        principalColumn: "ROLE_TYPE_ID");
                    table.ForeignKey(
                        name: "SUBSC_SRESRC",
                        column: x => x.SUBSCRIPTIONRESOURCEID,
                        principalTable: "SUBSCRIPTION_RESOURCE",
                        principalColumn: "SUBSCRIPTION_RESOURCE_ID");
                    table.ForeignKey(
                        name: "SUBSC_TO_TYPE",
                        column: x => x.SUBSCRIPTIONTYPEID,
                        principalTable: "SUBSCRIPTION_TYPE",
                        principalColumn: "SUBSCRIPTION_TYPE_ID");
                    table.ForeignKey(
                        name: "SUBSC_UTU",
                        column: x => x.USETIMEUOMID,
                        principalTable: "UOM",
                        principalColumn: "UOM_ID");
                });

            migrationBuilder.CreateTable(
                name: "SHOPPING_LIST_ITEM",
                columns: table => new
                {
                    SHOPPINGLISTID = table.Column<string>(name: "SHOPPING_LIST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHOPPINGLISTITEMSEQID = table.Column<string>(name: "SHOPPING_LIST_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    MODIFIEDPRICE = table.Column<decimal>(name: "MODIFIED_PRICE", type: "decimal(18,3)", nullable: true),
                    RESERVSTART = table.Column<DateTime>(name: "RESERV_START", type: "datetime", nullable: true),
                    RESERVLENGTH = table.Column<decimal>(name: "RESERV_LENGTH", type: "decimal(18,6)", nullable: true),
                    RESERVPERSONS = table.Column<decimal>(name: "RESERV_PERSONS", type: "decimal(18,6)", nullable: true),
                    QUANTITYPURCHASED = table.Column<decimal>(name: "QUANTITY_PURCHASED", type: "decimal(18,6)", nullable: true),
                    CONFIGID = table.Column<string>(name: "CONFIG_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHOPPING_LIST_ITEM", x => new { x.SHOPPINGLISTID, x.SHOPPINGLISTITEMSEQID });
                    table.ForeignKey(
                        name: "SHLIST_ITEM_LIST",
                        column: x => x.SHOPPINGLISTID,
                        principalTable: "SHOPPING_LIST",
                        principalColumn: "SHOPPING_LIST_ID");
                    table.ForeignKey(
                        name: "SHLIST_ITEM_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                });

            migrationBuilder.CreateTable(
                name: "SHOPPING_LIST_WORK_EFFORT",
                columns: table => new
                {
                    SHOPPINGLISTID = table.Column<string>(name: "SHOPPING_LIST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    WORKEFFORTID = table.Column<string>(name: "WORK_EFFORT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHOPPING_LIST_WORK_EFFORT", x => new { x.SHOPPINGLISTID, x.WORKEFFORTID });
                    table.ForeignKey(
                        name: "SHLISTWE_SHLST",
                        column: x => x.SHOPPINGLISTID,
                        principalTable: "SHOPPING_LIST",
                        principalColumn: "SHOPPING_LIST_ID");
                    table.ForeignKey(
                        name: "SHLISTWE_WEFF",
                        column: x => x.WORKEFFORTID,
                        principalTable: "WORK_EFFORT",
                        principalColumn: "WORK_EFFORT_ID");
                });

            migrationBuilder.CreateTable(
                name: "RETURN_ITEM_SHIPMENT",
                columns: table => new
                {
                    RETURNID = table.Column<string>(name: "RETURN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    RETURNITEMSEQID = table.Column<string>(name: "RETURN_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPMENTID = table.Column<string>(name: "SHIPMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPMENTITEMSEQID = table.Column<string>(name: "SHIPMENT_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RETURN_ITEM_SHIPMENT", x => new { x.RETURNID, x.RETURNITEMSEQID, x.SHIPMENTID, x.SHIPMENTITEMSEQID });
                    table.ForeignKey(
                        name: "RIT_SHPMT_RHDR",
                        column: x => x.RETURNID,
                        principalTable: "RETURN_HEADER",
                        principalColumn: "RETURN_ID");
                    table.ForeignKey(
                        name: "RIT_SHPMT_RITM",
                        columns: x => new { x.RETURNID, x.RETURNITEMSEQID },
                        principalTable: "RETURN_ITEM",
                        principalColumns: new[] { "RETURN_ID", "RETURN_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "RIT_SHPMT_SHPITM",
                        columns: x => new { x.SHIPMENTID, x.SHIPMENTITEMSEQID },
                        principalTable: "SHIPMENT_ITEM",
                        principalColumns: new[] { "SHIPMENT_ID", "SHIPMENT_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "RIT_SHPMT_SHPMT",
                        column: x => x.SHIPMENTID,
                        principalTable: "SHIPMENT",
                        principalColumn: "SHIPMENT_ID");
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT_RECEIPT",
                columns: table => new
                {
                    RECEIPTID = table.Column<string>(name: "RECEIPT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVENTORYITEMID = table.Column<string>(name: "INVENTORY_ITEM_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    PRODUCTID = table.Column<string>(name: "PRODUCT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SHIPMENTID = table.Column<string>(name: "SHIPMENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SHIPMENTITEMSEQID = table.Column<string>(name: "SHIPMENT_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    SHIPMENTPACKAGESEQID = table.Column<string>(name: "SHIPMENT_PACKAGE_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERID = table.Column<string>(name: "ORDER_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ORDERITEMSEQID = table.Column<string>(name: "ORDER_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RETURNID = table.Column<string>(name: "RETURN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RETURNITEMSEQID = table.Column<string>(name: "RETURN_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    REJECTIONID = table.Column<string>(name: "REJECTION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    RECEIVEDBYUSERLOGINID = table.Column<string>(name: "RECEIVED_BY_USER_LOGIN_ID", type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    DATETIMERECEIVED = table.Column<DateTime>(name: "DATETIME_RECEIVED", type: "datetime", nullable: true),
                    ITEMDESCRIPTION = table.Column<string>(name: "ITEM_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    QUANTITYACCEPTED = table.Column<decimal>(name: "QUANTITY_ACCEPTED", type: "decimal(18,6)", nullable: true),
                    QUANTITYREJECTED = table.Column<decimal>(name: "QUANTITY_REJECTED", type: "decimal(18,6)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT_RECEIPT", x => x.RECEIPTID);
                    table.ForeignKey(
                        name: "SHP_RCPT_INVITM",
                        column: x => x.INVENTORYITEMID,
                        principalTable: "INVENTORY_ITEM",
                        principalColumn: "INVENTORY_ITEM_ID");
                    table.ForeignKey(
                        name: "SHP_RCPT_ORDITM",
                        columns: x => new { x.ORDERID, x.ORDERITEMSEQID },
                        principalTable: "ORDER_ITEM",
                        principalColumns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "SHP_RCPT_PROD",
                        column: x => x.PRODUCTID,
                        principalTable: "PRODUCT",
                        principalColumn: "PRODUCT_ID");
                    table.ForeignKey(
                        name: "SHP_RCPT_REJRSN",
                        column: x => x.REJECTIONID,
                        principalTable: "REJECTION_REASON",
                        principalColumn: "REJECTION_ID");
                    table.ForeignKey(
                        name: "SHP_RCPT_RETINVITM",
                        columns: x => new { x.RETURNID, x.RETURNITEMSEQID },
                        principalTable: "RETURN_ITEM",
                        principalColumns: new[] { "RETURN_ID", "RETURN_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "SHP_RCPT_SHPKG",
                        columns: x => new { x.SHIPMENTID, x.SHIPMENTPACKAGESEQID },
                        principalTable: "SHIPMENT_PACKAGE",
                        principalColumns: new[] { "SHIPMENT_ID", "SHIPMENT_PACKAGE_SEQ_ID" });
                    table.ForeignKey(
                        name: "SHP_RCPT_USERLGN",
                        column: x => x.RECEIVEDBYUSERLOGINID,
                        principalTable: "USER_LOGIN",
                        principalColumn: "USER_LOGIN_ID");
                });

            migrationBuilder.CreateTable(
                name: "SUBSCRIPTION_ATTRIBUTE",
                columns: table => new
                {
                    SUBSCRIPTIONID = table.Column<string>(name: "SUBSCRIPTION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ATTRNAME = table.Column<string>(name: "ATTR_NAME", type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    ATTRVALUE = table.Column<string>(name: "ATTR_VALUE", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ATTRDESCRIPTION = table.Column<string>(name: "ATTR_DESCRIPTION", type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SUBSCRIPTION_ATTRIBUTE", x => new { x.SUBSCRIPTIONID, x.ATTRNAME });
                    table.ForeignKey(
                        name: "SUBSC_ATTR",
                        column: x => x.SUBSCRIPTIONID,
                        principalTable: "SUBSCRIPTION",
                        principalColumn: "SUBSCRIPTION_ID");
                });

            migrationBuilder.CreateTable(
                name: "SUBSCRIPTION_COMM_EVENT",
                columns: table => new
                {
                    SUBSCRIPTIONID = table.Column<string>(name: "SUBSCRIPTION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    COMMUNICATIONEVENTID = table.Column<string>(name: "COMMUNICATION_EVENT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SUBSCRIPTION_COMM_EVENT", x => new { x.SUBSCRIPTIONID, x.COMMUNICATIONEVENTID });
                    table.ForeignKey(
                        name: "SUBSC_COM_EVENT",
                        column: x => x.COMMUNICATIONEVENTID,
                        principalTable: "COMMUNICATION_EVENT",
                        principalColumn: "COMMUNICATION_EVENT_ID");
                    table.ForeignKey(
                        name: "SUBSC_SUBSC",
                        column: x => x.SUBSCRIPTIONID,
                        principalTable: "SUBSCRIPTION",
                        principalColumn: "SUBSCRIPTION_ID");
                });

            migrationBuilder.CreateTable(
                name: "SUBSCRIPTION_FULFILLMENT_PIECE",
                columns: table => new
                {
                    SUBSCRIPTIONACTIVITYID = table.Column<string>(name: "SUBSCRIPTION_ACTIVITY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SUBSCRIPTIONID = table.Column<string>(name: "SUBSCRIPTION_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SUBSCRIPTION_FULFILLMENT_PI", x => new { x.SUBSCRIPTIONACTIVITYID, x.SUBSCRIPTIONID });
                    table.ForeignKey(
                        name: "SUBSC_FP",
                        column: x => x.SUBSCRIPTIONID,
                        principalTable: "SUBSCRIPTION",
                        principalColumn: "SUBSCRIPTION_ID");
                    table.ForeignKey(
                        name: "SUBSC_FP_ACT",
                        column: x => x.SUBSCRIPTIONACTIVITYID,
                        principalTable: "SUBSCRIPTION_ACTIVITY",
                        principalColumn: "SUBSCRIPTION_ACTIVITY_ID");
                });

            migrationBuilder.CreateTable(
                name: "SHOPPING_LIST_ITEM_SURVEY",
                columns: table => new
                {
                    SHOPPINGLISTID = table.Column<string>(name: "SHOPPING_LIST_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHOPPINGLISTITEMSEQID = table.Column<string>(name: "SHOPPING_LIST_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SURVEYRESPONSEID = table.Column<string>(name: "SURVEY_RESPONSE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHOPPING_LIST_ITEM_SURVEY", x => new { x.SHOPPINGLISTID, x.SHOPPINGLISTITEMSEQID, x.SURVEYRESPONSEID });
                    table.ForeignKey(
                        name: "SHLIST_ITSUR_ITEM",
                        columns: x => new { x.SHOPPINGLISTID, x.SHOPPINGLISTITEMSEQID },
                        principalTable: "SHOPPING_LIST_ITEM",
                        principalColumns: new[] { "SHOPPING_LIST_ID", "SHOPPING_LIST_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "SHLIST_ITSUR_LIST",
                        column: x => x.SHOPPINGLISTID,
                        principalTable: "SHOPPING_LIST",
                        principalColumn: "SHOPPING_LIST_ID");
                    table.ForeignKey(
                        name: "SHLIST_ITSUR_RESP",
                        column: x => x.SURVEYRESPONSEID,
                        principalTable: "SURVEY_RESPONSE",
                        principalColumn: "SURVEY_RESPONSE_ID");
                });

            migrationBuilder.CreateTable(
                name: "RETURN_ITEM_BILLING",
                columns: table => new
                {
                    RETURNID = table.Column<string>(name: "RETURN_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    RETURNITEMSEQID = table.Column<string>(name: "RETURN_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVOICEID = table.Column<string>(name: "INVOICE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    INVOICEITEMSEQID = table.Column<string>(name: "INVOICE_ITEM_SEQ_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    SHIPMENTRECEIPTID = table.Column<string>(name: "SHIPMENT_RECEIPT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    QUANTITY = table.Column<decimal>(type: "decimal(18,6)", nullable: true),
                    AMOUNT = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RETURN_ITEM_BILLING", x => new { x.RETURNID, x.RETURNITEMSEQID, x.INVOICEID, x.INVOICEITEMSEQID });
                    table.ForeignKey(
                        name: "RETURN_ITBLNG_IITM",
                        columns: x => new { x.INVOICEID, x.INVOICEITEMSEQID },
                        principalTable: "INVOICE_ITEM",
                        principalColumns: new[] { "INVOICE_ID", "INVOICE_ITEM_SEQ_ID" });
                    table.ForeignKey(
                        name: "RITBL_SHIPRCPT",
                        column: x => x.SHIPMENTRECEIPTID,
                        principalTable: "SHIPMENT_RECEIPT",
                        principalColumn: "RECEIPT_ID");
                    table.ForeignKey(
                        name: "RTN_ITBLNG_RHDR",
                        column: x => x.RETURNID,
                        principalTable: "RETURN_HEADER",
                        principalColumn: "RETURN_ID");
                    table.ForeignKey(
                        name: "RTN_ITBLNG_RITM",
                        columns: x => new { x.RETURNID, x.RETURNITEMSEQID },
                        principalTable: "RETURN_ITEM",
                        principalColumns: new[] { "RETURN_ID", "RETURN_ITEM_SEQ_ID" });
                });

            migrationBuilder.CreateTable(
                name: "SHIPMENT_RECEIPT_ROLE",
                columns: table => new
                {
                    RECEIPTID = table.Column<string>(name: "RECEIPT_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    PARTYID = table.Column<string>(name: "PARTY_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    ROLETYPEID = table.Column<string>(name: "ROLE_TYPE_ID", type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    LASTUPDATEDSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_STAMP", type: "datetime", nullable: true),
                    LASTUPDATEDTXSTAMP = table.Column<DateTime>(name: "LAST_UPDATED_TX_STAMP", type: "datetime", nullable: true),
                    CREATEDSTAMP = table.Column<DateTime>(name: "CREATED_STAMP", type: "datetime", nullable: true),
                    CREATEDTXSTAMP = table.Column<DateTime>(name: "CREATED_TX_STAMP", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SHIPMENT_RECEIPT_ROLE", x => new { x.RECEIPTID, x.PARTYID, x.ROLETYPEID });
                    table.ForeignKey(
                        name: "SHP_RCPTRL_PTRL",
                        columns: x => new { x.PARTYID, x.ROLETYPEID },
                        principalTable: "PARTY_ROLE",
                        principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });
                    table.ForeignKey(
                        name: "SHP_RCPTRL_PTY",
                        column: x => x.PARTYID,
                        principalTable: "PARTY",
                        principalColumn: "PARTY_ID");
                    table.ForeignKey(
                        name: "SHP_RCPTRL_RCPT",
                        column: x => x.RECEIPTID,
                        principalTable: "SHIPMENT_RECEIPT",
                        principalColumn: "RECEIPT_ID");
                });

            migrationBuilder.InsertData(
                table: "AspNetRoles",
                columns: new[] { "Id", "ConcurrencyStamp", "Name", "NormalizedName", "PercentageAllowed" },
                values: new object[,]
                {
                    { "1", null, "Member", "MEMBER", null },
                    { "2", null, "Admin", "ADMIN", null },
                    { "3", null, "AddAdjustments", "ADDADJUSTMENTS", 2 },
                    { "4", null, "AddDiscountAdjustment5", "ADDDISCOUNTADJUSTMENT5", 5 },
                    { "5", null, "AddDiscountAdjustment10", "ADDDISCOUNTADJUSTMENT10", 10 }
                });

            migrationBuilder.CreateIndex(
                name: "ACCMMDN_CLS_TXCRTS",
                table: "ACCOMMODATION_CLASS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ACCMMDN_CLS_TXSTMP",
                table: "ACCOMMODATION_CLASS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ACCOMM_CLASS_PAR",
                table: "ACCOMMODATION_CLASS",
                column: "PARENT_CLASS_ID");

            migrationBuilder.CreateIndex(
                name: "ACCMMDTN_MP_TXCRTS",
                table: "ACCOMMODATION_MAP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ACCMMDTN_MP_TXSTMP",
                table: "ACCOMMODATION_MAP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ACMD_MAP_CLASS",
                table: "ACCOMMODATION_MAP",
                column: "ACCOMMODATION_CLASS_ID");

            migrationBuilder.CreateIndex(
                name: "ACMD_MAP_FA",
                table: "ACCOMMODATION_MAP",
                column: "FIXED_ASSET_ID");

            migrationBuilder.CreateIndex(
                name: "ACMD_MAP_TYPE",
                table: "ACCOMMODATION_MAP",
                column: "ACCOMMODATION_MAP_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ACCMMN_MP_TP_TXCRS",
                table: "ACCOMMODATION_MAP_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ACCMMN_MP_TP_TXSTP",
                table: "ACCOMMODATION_MAP_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ACCMMDN_SPT_TXCRTS",
                table: "ACCOMMODATION_SPOT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ACCMMDN_SPT_TXSTMP",
                table: "ACCOMMODATION_SPOT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ACCOM_CLASS",
                table: "ACCOMMODATION_SPOT",
                column: "ACCOMMODATION_CLASS_ID");

            migrationBuilder.CreateIndex(
                name: "SPOT_FA",
                table: "ACCOMMODATION_SPOT",
                column: "FIXED_ASSET_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTG_TRANS_TXCRTS",
                table: "ACCTG_TRANS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ACCTG_TRANS_TXSTMP",
                table: "ACCTG_TRANS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ACCTTX_FASSET",
                table: "ACCTG_TRANS",
                column: "FIXED_ASSET_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTX_FNACTTR",
                table: "ACCTG_TRANS",
                column: "FIN_ACCOUNT_TRANS_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTX_GLFST",
                table: "ACCTG_TRANS",
                column: "GL_FISCAL_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTX_GLJRNL",
                table: "ACCTG_TRANS",
                column: "GL_JOURNAL_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTX_GRPSTTS",
                table: "ACCTG_TRANS",
                column: "GROUP_STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTX_INVITEM",
                table: "ACCTG_TRANS",
                column: "INVENTORY_ITEM_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTX_INVITEMVAR",
                table: "ACCTG_TRANS",
                columns: new[] { "INVENTORY_ITEM_ID", "PHYSICAL_INVENTORY_ID" });

            migrationBuilder.CreateIndex(
                name: "ACCTTX_INVOICE",
                table: "ACCTG_TRANS",
                column: "INVOICE_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTX_PARTY",
                table: "ACCTG_TRANS",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTX_PAYMENT",
                table: "ACCTG_TRANS",
                column: "PAYMENT_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTX_PHS_INV",
                table: "ACCTG_TRANS",
                column: "PHYSICAL_INVENTORY_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTX_ROLETYP",
                table: "ACCTG_TRANS",
                column: "ROLE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTX_SHIPMENT",
                table: "ACCTG_TRANS",
                column: "SHIPMENT_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTX_SHIPRCPT",
                table: "ACCTG_TRANS",
                column: "RECEIPT_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTX_TYPE",
                table: "ACCTG_TRANS",
                column: "ACCTG_TRANS_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTX_WEFF",
                table: "ACCTG_TRANS",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTX_ATTR",
                table: "ACCTG_TRANS_ATTRIBUTE",
                column: "ACCTG_TRANS_ID");

            migrationBuilder.CreateIndex(
                name: "ACG_TRS_ATTT_TXCRS",
                table: "ACCTG_TRANS_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ACG_TRS_ATTT_TXSTP",
                table: "ACCTG_TRANS_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ACCG_TRS_ENR_TXCRS",
                table: "ACCTG_TRANS_ENTRY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ACCG_TRS_ENR_TXSTP",
                table: "ACCTG_TRANS_ENTRY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ACCTTXENT_ACTX",
                table: "ACCTG_TRANS_ENTRY",
                column: "ACCTG_TRANS_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTXENT_ATET",
                table: "ACCTG_TRANS_ENTRY",
                column: "ACCTG_TRANS_ENTRY_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTXENT_CURNCY",
                table: "ACCTG_TRANS_ENTRY",
                column: "CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTXENT_GLACOG",
                table: "ACCTG_TRANS_ENTRY",
                columns: new[] { "GL_ACCOUNT_ID", "ORGANIZATION_PARTY_ID" });

            migrationBuilder.CreateIndex(
                name: "ACCTTXENT_GLACT",
                table: "ACCTG_TRANS_ENTRY",
                column: "GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTXENT_GLACTT",
                table: "ACCTG_TRANS_ENTRY",
                column: "GL_ACCOUNT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTXENT_INVITEM",
                table: "ACCTG_TRANS_ENTRY",
                column: "INVENTORY_ITEM_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTXENT_OCURNCY",
                table: "ACCTG_TRANS_ENTRY",
                column: "ORIG_CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTXENT_PARTY",
                table: "ACCTG_TRANS_ENTRY",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTXENT_RCSTS",
                table: "ACCTG_TRANS_ENTRY",
                column: "RECONCILE_STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTXENT_RLTYP",
                table: "ACCTG_TRANS_ENTRY",
                column: "ROLE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTXENT_STLEN",
                table: "ACCTG_TRANS_ENTRY",
                column: "SETTLEMENT_TERM_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTXE_TYPE_PAR",
                table: "ACCTG_TRANS_ENTRY_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ACG_TRS_ENR_TP_TXP",
                table: "ACCTG_TRANS_ENTRY_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ACG_TRS_ENR_TP_TXS",
                table: "ACCTG_TRANS_ENTRY_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ACCG_TRS_TP_TXCRTS",
                table: "ACCTG_TRANS_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ACCG_TRS_TP_TXSTMP",
                table: "ACCTG_TRANS_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ACCTTX_TYPE_PAR",
                table: "ACCTG_TRANS_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTTX_TYPE_ATTR",
                table: "ACCTG_TRANS_TYPE_ATTR",
                column: "ACCTG_TRANS_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ACG_TRS_TP_ATR_TXP",
                table: "ACCTG_TRANS_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ACG_TRS_TP_ATR_TXS",
                table: "ACCTG_TRANS_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ADDENDUM_TXCRTS",
                table: "ADDENDUM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ADDENDUM_TXSTMP",
                table: "ADDENDUM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ADDNDM_AGRMNT",
                table: "ADDENDUM",
                column: "AGREEMENT_ID");

            migrationBuilder.CreateIndex(
                name: "ADDNDM_AGRMNT_ITM",
                table: "ADDENDUM",
                columns: new[] { "AGREEMENT_ID", "AGREEMENT_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "ADDRS_MTH_MP_TXCRS",
                table: "ADDRESS_MATCH_MAP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ADDRS_MTH_MP_TXSTP",
                table: "ADDRESS_MATCH_MAP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AFFILIATE_PARTY",
                table: "AFFILIATE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "AFFILIATE_PGRP",
                table: "AFFILIATE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "AFFILIATE_TXCRTS",
                table: "AFFILIATE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AFFILIATE_TXSTMP",
                table: "AFFILIATE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGREEMENT_TXCRTS",
                table: "AGREEMENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGREEMENT_TXSTMP",
                table: "AGREEMENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_FPRTYRLE",
                table: "AGREEMENT",
                columns: new[] { "PARTY_ID_FROM", "ROLE_TYPE_ID_FROM" });

            migrationBuilder.CreateIndex(
                name: "AGRMNT_PRODUCT",
                table: "AGREEMENT",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_TPRTYRLE",
                table: "AGREEMENT",
                columns: new[] { "PARTY_ID_TO", "ROLE_TYPE_ID_TO" });

            migrationBuilder.CreateIndex(
                name: "AGRMNT_TYPE",
                table: "AGREEMENT",
                column: "AGREEMENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_ATTR",
                table: "AGREEMENT_ATTRIBUTE",
                column: "AGREEMENT_ID");

            migrationBuilder.CreateIndex(
                name: "AGRMT_ATTRT_TXCRTS",
                table: "AGREEMENT_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMT_ATTRT_TXSTMP",
                table: "AGREEMENT_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AG_CNT_CNT",
                table: "AGREEMENT_CONTENT",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "AG_CNT_PROD",
                table: "AGREEMENT_CONTENT",
                column: "AGREEMENT_ID");

            migrationBuilder.CreateIndex(
                name: "AG_CNT_TYPE",
                table: "AGREEMENT_CONTENT",
                column: "AGREEMENT_CONTENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_CNTT_TXCRTS",
                table: "AGREEMENT_CONTENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_CNTT_TXSTMP",
                table: "AGREEMENT_CONTENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGCT_TYP_PARENT",
                table: "AGREEMENT_CONTENT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "AGRMT_CNT_TP_TXCRS",
                table: "AGREEMENT_CONTENT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMT_CNT_TP_TXSTP",
                table: "AGREEMENT_CONTENT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_EMPL_AITM",
                table: "AGREEMENT_EMPLOYMENT_APPL",
                columns: new[] { "AGREEMENT_ID", "AGREEMENT_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "AGRMNT_EMPL_APPL",
                table: "AGREEMENT_EMPLOYMENT_APPL",
                columns: new[] { "ROLE_TYPE_ID_FROM", "ROLE_TYPE_ID_TO", "PARTY_ID_FROM", "PARTY_ID_TO", "FROM_DATE" });

            migrationBuilder.CreateIndex(
                name: "AGRT_EMPT_APL_TXCS",
                table: "AGREEMENT_EMPLOYMENT_APPL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRT_EMPT_APL_TXSP",
                table: "AGREEMENT_EMPLOYMENT_APPL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_FACLT_AITM",
                table: "AGREEMENT_FACILITY_APPL",
                columns: new[] { "AGREEMENT_ID", "AGREEMENT_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "AGRMNT_FACLT_PRD",
                table: "AGREEMENT_FACILITY_APPL",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "AGRT_FCT_APL_TXCRS",
                table: "AGREEMENT_FACILITY_APPL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRT_FCT_APL_TXSTP",
                table: "AGREEMENT_FACILITY_APPL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_GEOAP_AGR",
                table: "AGREEMENT_GEOGRAPHICAL_APPLIC",
                column: "AGREEMENT_ID");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_GEOAP_AGRI",
                table: "AGREEMENT_GEOGRAPHICAL_APPLIC",
                columns: new[] { "AGREEMENT_ID", "AGREEMENT_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "AGRMNT_GEOAP_GEO",
                table: "AGREEMENT_GEOGRAPHICAL_APPLIC",
                column: "GEO_ID");

            migrationBuilder.CreateIndex(
                name: "AGRT_GGRL_APC_TXCS",
                table: "AGREEMENT_GEOGRAPHICAL_APPLIC",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRT_GGRL_APC_TXSP",
                table: "AGREEMENT_GEOGRAPHICAL_APPLIC",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_ITEM_AGR",
                table: "AGREEMENT_ITEM",
                column: "AGREEMENT_ID");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_ITEM_TYPE",
                table: "AGREEMENT_ITEM",
                column: "AGREEMENT_ITEM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_ITM_TXCRTS",
                table: "AGREEMENT_ITEM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_ITM_TXSTMP",
                table: "AGREEMENT_ITEM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_ITEM_ATTR",
                table: "AGREEMENT_ITEM_ATTRIBUTE",
                columns: new[] { "AGREEMENT_ID", "AGREEMENT_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "AGRT_ITM_ATTT_TXCS",
                table: "AGREEMENT_ITEM_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRT_ITM_ATTT_TXSP",
                table: "AGREEMENT_ITEM_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_TYPEPAR",
                table: "AGREEMENT_ITEM_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "AGRMT_ITM_TP_TXCRS",
                table: "AGREEMENT_ITEM_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMT_ITM_TP_TXSTP",
                table: "AGREEMENT_ITEM_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_ITEM_TYPATR",
                table: "AGREEMENT_ITEM_TYPE_ATTR",
                column: "AGREEMENT_ITEM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "AGT_ITM_TP_ATR_TXP",
                table: "AGREEMENT_ITEM_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGT_ITM_TP_ATR_TXS",
                table: "AGREEMENT_ITEM_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_PTYA_AGR",
                table: "AGREEMENT_PARTY_APPLIC",
                column: "AGREEMENT_ID");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_PTYA_PTY",
                table: "AGREEMENT_PARTY_APPLIC",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "AGRT_PRT_APC_TXCRS",
                table: "AGREEMENT_PARTY_APPLIC",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRT_PRT_APC_TXSTP",
                table: "AGREEMENT_PARTY_APPLIC",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_PRDA_AITM",
                table: "AGREEMENT_PRODUCT_APPL",
                columns: new[] { "AGREEMENT_ID", "AGREEMENT_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "AGRMNT_PRDA_PRD",
                table: "AGREEMENT_PRODUCT_APPL",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "AGRT_PRT_APL_TXCRS",
                table: "AGREEMENT_PRODUCT_APPL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRT_PRT_APL_TXSTP",
                table: "AGREEMENT_PRODUCT_APPL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_PROM_AITM",
                table: "AGREEMENT_PROMO_APPL",
                columns: new[] { "AGREEMENT_ID", "AGREEMENT_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "AGRMNT_PROM_PRO",
                table: "AGREEMENT_PROMO_APPL",
                column: "PRODUCT_PROMO_ID");

            migrationBuilder.CreateIndex(
                name: "AGRT_PRM_APL_TXCRS",
                table: "AGREEMENT_PROMO_APPL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRT_PRM_APL_TXSTP",
                table: "AGREEMENT_PROMO_APPL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_RL_TXCRTS",
                table: "AGREEMENT_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_RL_TXSTMP",
                table: "AGREEMENT_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_ROLE_AGR",
                table: "AGREEMENT_ROLE",
                column: "AGREEMENT_ID");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_ROLE_PRLE",
                table: "AGREEMENT_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "AGRMNT_ROLE_PTY",
                table: "AGREEMENT_ROLE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_STTS_AGRMNT",
                table: "AGREEMENT_STATUS",
                column: "AGREEMENT_ID");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_STTS_STTS",
                table: "AGREEMENT_STATUS",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_STTS_TXCRTS",
                table: "AGREEMENT_STATUS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_STTS_TXSTMP",
                table: "AGREEMENT_STATUS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_STTS_USRLGN",
                table: "AGREEMENT_STATUS",
                column: "CHANGE_BY_USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_TERM_AGR",
                table: "AGREEMENT_TERM",
                column: "AGREEMENT_ID");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_TERM_AITM",
                table: "AGREEMENT_TERM",
                columns: new[] { "AGREEMENT_ID", "AGREEMENT_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "AGRMNT_TERM_IIT",
                table: "AGREEMENT_TERM",
                column: "INVOICE_ITEM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_TERM_TTYP",
                table: "AGREEMENT_TERM",
                column: "TERM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_TRM_TXCRTS",
                table: "AGREEMENT_TERM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_TRM_TXSTMP",
                table: "AGREEMENT_TERM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_TERM_ATTR",
                table: "AGREEMENT_TERM_ATTRIBUTE",
                column: "AGREEMENT_TERM_ID");

            migrationBuilder.CreateIndex(
                name: "AGRT_TRM_ATTT_TXCS",
                table: "AGREEMENT_TERM_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRT_TRM_ATTT_TXSP",
                table: "AGREEMENT_TERM_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_TP_TXCRTS",
                table: "AGREEMENT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_TP_TXSTMP",
                table: "AGREEMENT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_TYPE_PAR",
                table: "AGREEMENT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_TYPE_ATTR",
                table: "AGREEMENT_TYPE_ATTR",
                column: "AGREEMENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "AGRMT_TP_ATR_TXCRS",
                table: "AGREEMENT_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMT_TP_ATR_TXSTP",
                table: "AGREEMENT_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_WEA_AGRMNT",
                table: "AGREEMENT_WORK_EFFORT_APPLIC",
                column: "AGREEMENT_ID");

            migrationBuilder.CreateIndex(
                name: "AGRMNT_WEA_WE",
                table: "AGREEMENT_WORK_EFFORT_APPLIC",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "AGT_WRK_EFT_APC_TP",
                table: "AGREEMENT_WORK_EFFORT_APPLIC",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AGT_WRK_EFT_APC_TS",
                table: "AGREEMENT_WORK_EFFORT_APPLIC",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ALC_PLN_HDR_CBUL",
                table: "ALLOCATION_PLAN_HEADER",
                column: "CREATED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "ALC_PLN_HDR_LMUL",
                table: "ALLOCATION_PLAN_HEADER",
                column: "LAST_MODIFIED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "ALC_PLN_HDR_STS",
                table: "ALLOCATION_PLAN_HEADER",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "ALC_PLN_HDR_TYP",
                table: "ALLOCATION_PLAN_HEADER",
                column: "PLAN_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ALLN_PLN_HDR_TXCRS",
                table: "ALLOCATION_PLAN_HEADER",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ALLN_PLN_HDR_TXSTP",
                table: "ALLOCATION_PLAN_HEADER",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ALC_PLN_ITM_CBUL",
                table: "ALLOCATION_PLAN_ITEM",
                column: "CREATED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "ALC_PLN_ITM_ENUM",
                table: "ALLOCATION_PLAN_ITEM",
                column: "PLAN_METHOD_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "ALC_PLN_ITM_HDR",
                table: "ALLOCATION_PLAN_ITEM",
                columns: new[] { "PLAN_ID", "PRODUCT_ID" });

            migrationBuilder.CreateIndex(
                name: "ALC_PLN_ITM_LMUL",
                table: "ALLOCATION_PLAN_ITEM",
                column: "LAST_MODIFIED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "ALC_PLN_ITM_ODRHDR",
                table: "ALLOCATION_PLAN_ITEM",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "ALC_PLN_ITM_ODRITM",
                table: "ALLOCATION_PLAN_ITEM",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "ALC_PLN_ITM_STS",
                table: "ALLOCATION_PLAN_ITEM",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "ALLN_PLN_ITM_TXCRS",
                table: "ALLOCATION_PLAN_ITEM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ALLN_PLN_ITM_TXSTP",
                table: "ALLOCATION_PLAN_ITEM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ALLCN_PLN_TP_TXCRS",
                table: "ALLOCATION_PLAN_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ALLCN_PLN_TP_TXSTP",
                table: "ALLOCATION_PLAN_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "APP_SNDBX_RNTMDTA",
                table: "APPLICATION_SANDBOX",
                column: "RUNTIME_DATA_ID");

            migrationBuilder.CreateIndex(
                name: "APP_SNDBX_WEPA",
                table: "APPLICATION_SANDBOX",
                columns: new[] { "WORK_EFFORT_ID", "PARTY_ID", "ROLE_TYPE_ID", "FROM_DATE" });

            migrationBuilder.CreateIndex(
                name: "APPLCN_SNDX_TXCRTS",
                table: "APPLICATION_SANDBOX",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "APPLCN_SNDX_TXSTMP",
                table: "APPLICATION_SANDBOX",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetRoleClaims_RoleId",
                table: "AspNetRoleClaims",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "RoleNameIndex",
                table: "AspNetRoles",
                column: "NormalizedName",
                unique: true,
                filter: "[NormalizedName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserClaims_UserId",
                table: "AspNetUserClaims",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserLogins_UserId",
                table: "AspNetUserLogins",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserRoles_RoleId",
                table: "AspNetUserRoles",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "EmailIndex",
                table: "AspNetUsers",
                column: "NormalizedEmail");

            migrationBuilder.CreateIndex(
                name: "UserNameIndex",
                table: "AspNetUsers",
                column: "NormalizedUserName",
                unique: true,
                filter: "[NormalizedUserName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "AD_DT_RSRC_TXCRTS",
                table: "AUDIO_DATA_RESOURCE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AD_DT_RSRC_TXSTMP",
                table: "AUDIO_DATA_RESOURCE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DATA_REC_AUDIO",
                table: "AUDIO_DATA_RESOURCE",
                column: "DATA_RESOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "BEN_TYPE_PAR",
                table: "BENEFIT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "BNFT_TP_TXCRTS",
                table: "BENEFIT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BNFT_TP_TXSTMP",
                table: "BENEFIT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BILLACCT_CMECH",
                table: "BILLING_ACCOUNT",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "BILLACCT_CUOM",
                table: "BILLING_ACCOUNT",
                column: "ACCOUNT_CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "BILLACCT_PADDR",
                table: "BILLING_ACCOUNT",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "BLLNG_ACCNT_TXCRTS",
                table: "BILLING_ACCOUNT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BLLNG_ACCNT_TXSTMP",
                table: "BILLING_ACCOUNT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BILLACCT_RL_PARTY",
                table: "BILLING_ACCOUNT_ROLE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "BILLACCT_RL_PTRL",
                table: "BILLING_ACCOUNT_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "BILLACCT_ROLE",
                table: "BILLING_ACCOUNT_ROLE",
                column: "BILLING_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "BLLG_ACCT_RL_TXCRS",
                table: "BILLING_ACCOUNT_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BLLG_ACCT_RL_TXSTP",
                table: "BILLING_ACCOUNT_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BILLACCT_TRM_BACT",
                table: "BILLING_ACCOUNT_TERM",
                column: "BILLING_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "BILLACCT_TRM_TRM",
                table: "BILLING_ACCOUNT_TERM",
                column: "TERM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "BILLACCT_TRM_UOM",
                table: "BILLING_ACCOUNT_TERM",
                column: "UOM_ID");

            migrationBuilder.CreateIndex(
                name: "BLLG_ACT_TRM_TXCRS",
                table: "BILLING_ACCOUNT_TERM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BLLG_ACT_TRM_TXSTP",
                table: "BILLING_ACCOUNT_TERM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BILLACCT_TRM_ATTR",
                table: "BILLING_ACCOUNT_TERM_ATTR",
                column: "BILLING_ACCOUNT_TERM_ID");

            migrationBuilder.CreateIndex(
                name: "BLG_ACT_TRM_ATR_TP",
                table: "BILLING_ACCOUNT_TERM_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BLG_ACT_TRM_ATR_TS",
                table: "BILLING_ACCOUNT_TERM_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BRWSR_TP_TXCRTS",
                table: "BROWSER_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BRWSR_TP_TXSTMP",
                table: "BROWSER_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BUDGET_BGTTYP",
                table: "BUDGET",
                column: "BUDGET_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "BUDGET_CTP",
                table: "BUDGET",
                column: "CUSTOM_TIME_PERIOD_ID");

            migrationBuilder.CreateIndex(
                name: "BUDGET_TXCRTS",
                table: "BUDGET",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BUDGET_TXSTMP",
                table: "BUDGET",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BDGT_ATTRBT_TXCRTS",
                table: "BUDGET_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BDGT_ATTRBT_TXSTMP",
                table: "BUDGET_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BUDGET_ATTR_BDGT",
                table: "BUDGET_ATTRIBUTE",
                column: "BUDGET_ID");

            migrationBuilder.CreateIndex(
                name: "BDGTITM_TO_BDGT",
                table: "BUDGET_ITEM",
                column: "BUDGET_ID");

            migrationBuilder.CreateIndex(
                name: "BUDGET_ITEM_BTYP",
                table: "BUDGET_ITEM",
                column: "BUDGET_ITEM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "BUDGET_ITEM_TXCRTS",
                table: "BUDGET_ITEM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BUDGET_ITEM_TXSTMP",
                table: "BUDGET_ITEM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BDT_ITM_ATTT_TXCRS",
                table: "BUDGET_ITEM_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BDT_ITM_ATTT_TXSTP",
                table: "BUDGET_ITEM_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BUDGET_ITEM_ATTR",
                table: "BUDGET_ITEM_ATTRIBUTE",
                columns: new[] { "BUDGET_ID", "BUDGET_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "BDGT_ITM_TP_TXCRTS",
                table: "BUDGET_ITEM_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BDGT_ITM_TP_TXSTMP",
                table: "BUDGET_ITEM_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BUDGET_ITM_TYPPAR",
                table: "BUDGET_ITEM_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "BDT_ITM_TP_ATR_TXP",
                table: "BUDGET_ITEM_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BDT_ITM_TP_ATR_TXS",
                table: "BUDGET_ITEM_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BUDGET_ITMTYPATTR",
                table: "BUDGET_ITEM_TYPE_ATTR",
                column: "BUDGET_ITEM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "BDGT_RVW_TXCRTS",
                table: "BUDGET_REVIEW",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BDGT_RVW_TXSTMP",
                table: "BUDGET_REVIEW",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BUDGET_RVW_BDGT",
                table: "BUDGET_REVIEW",
                column: "BUDGET_ID");

            migrationBuilder.CreateIndex(
                name: "BUDGET_RVW_PARTY",
                table: "BUDGET_REVIEW",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "BUDGET_RVW_RTYPE",
                table: "BUDGET_REVIEW",
                column: "BUDGET_REVIEW_RESULT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "BDT_RVW_RST_TP_TXP",
                table: "BUDGET_REVIEW_RESULT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BDT_RVW_RST_TP_TXS",
                table: "BUDGET_REVIEW_RESULT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BDGT_RVSN_TXCRTS",
                table: "BUDGET_REVISION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BDGT_RVSN_TXSTMP",
                table: "BUDGET_REVISION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BUDGET_RVSN_BDGT",
                table: "BUDGET_REVISION",
                column: "BUDGET_ID");

            migrationBuilder.CreateIndex(
                name: "BDT_RVN_IMPT_TXCRS",
                table: "BUDGET_REVISION_IMPACT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BDT_RVN_IMPT_TXSTP",
                table: "BUDGET_REVISION_IMPACT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BUDGET_RNIMP_BDGT",
                table: "BUDGET_REVISION_IMPACT",
                column: "BUDGET_ID");

            migrationBuilder.CreateIndex(
                name: "BUDGET_RNIMP_BITM",
                table: "BUDGET_REVISION_IMPACT",
                columns: new[] { "BUDGET_ID", "BUDGET_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "BUDGET_RNIMP_REV",
                table: "BUDGET_REVISION_IMPACT",
                columns: new[] { "BUDGET_ID", "REVISION_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "BUDGET_ROLE_BDGT",
                table: "BUDGET_ROLE",
                column: "BUDGET_ID");

            migrationBuilder.CreateIndex(
                name: "BUDGET_ROLE_PARTY",
                table: "BUDGET_ROLE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "BUDGET_ROLE_PROLE",
                table: "BUDGET_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "BUDGET_ROLE_TXCRTS",
                table: "BUDGET_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BUDGET_ROLE_TXSTMP",
                table: "BUDGET_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BDGT_SCNR_TXCRTS",
                table: "BUDGET_SCENARIO",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BDGT_SCNR_TXSTMP",
                table: "BUDGET_SCENARIO",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BDT_SCR_APPLN_TXCS",
                table: "BUDGET_SCENARIO_APPLICATION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BDT_SCR_APPLN_TXSP",
                table: "BUDGET_SCENARIO_APPLICATION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BUDGET_SAPL_BDGT",
                table: "BUDGET_SCENARIO_APPLICATION",
                column: "BUDGET_ID");

            migrationBuilder.CreateIndex(
                name: "BUDGET_SAPL_BITM",
                table: "BUDGET_SCENARIO_APPLICATION",
                columns: new[] { "BUDGET_ID", "BUDGET_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "BUDGET_SAPL_BSCN",
                table: "BUDGET_SCENARIO_APPLICATION",
                column: "BUDGET_SCENARIO_ID");

            migrationBuilder.CreateIndex(
                name: "BDGT_SCR_RL_TXCRTS",
                table: "BUDGET_SCENARIO_RULE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BDGT_SCR_RL_TXSTMP",
                table: "BUDGET_SCENARIO_RULE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BUDGET_SRLE_BITP",
                table: "BUDGET_SCENARIO_RULE",
                column: "BUDGET_ITEM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "BUDGET_SRLE_BSCN",
                table: "BUDGET_SCENARIO_RULE",
                column: "BUDGET_SCENARIO_ID");

            migrationBuilder.CreateIndex(
                name: "BDGT_STTS_TXCRTS",
                table: "BUDGET_STATUS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BDGT_STTS_TXSTMP",
                table: "BUDGET_STATUS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BUDGET_STTS_BDGT",
                table: "BUDGET_STATUS",
                column: "BUDGET_ID");

            migrationBuilder.CreateIndex(
                name: "BUDGET_STTS_STTS",
                table: "BUDGET_STATUS",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "BUDGET_STTS_USRLGN",
                table: "BUDGET_STATUS",
                column: "CHANGE_BY_USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "BUDGET_TYPE_PAR",
                table: "BUDGET_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "BUDGET_TYPE_TXCRTS",
                table: "BUDGET_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BUDGET_TYPE_TXSTMP",
                table: "BUDGET_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BDGT_TP_ATR_TXCRTS",
                table: "BUDGET_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BDGT_TP_ATR_TXSTMP",
                table: "BUDGET_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "BUDGET_TPATR_BT",
                table: "BUDGET_TYPE_ATTR",
                column: "BUDGET_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CARR_SHBX_PARTY",
                table: "CARRIER_SHIPMENT_BOX_TYPE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "CARR_SHBX_TYPE",
                table: "CARRIER_SHIPMENT_BOX_TYPE",
                column: "SHIPMENT_BOX_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CRR_SHT_BX_TP_TXCS",
                table: "CARRIER_SHIPMENT_BOX_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CRR_SHT_BX_TP_TXSP",
                table: "CARRIER_SHIPMENT_BOX_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CARR_SHMETH_PARTY",
                table: "CARRIER_SHIPMENT_METHOD",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "CARR_SHMETH_PROLE",
                table: "CARRIER_SHIPMENT_METHOD",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "CARR_SHMETH_TYPE",
                table: "CARRIER_SHIPMENT_METHOD",
                column: "SHIPMENT_METHOD_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CRR_SHPT_MTD_TXCRS",
                table: "CARRIER_SHIPMENT_METHOD",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CRR_SHPT_MTD_TXSTP",
                table: "CARRIER_SHIPMENT_METHOD",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CART_ABLN_PRD",
                table: "CART_ABANDONED_LINE",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "CART_ABLN_PRDCAT",
                table: "CART_ABANDONED_LINE",
                column: "PROD_CATALOG_ID");

            migrationBuilder.CreateIndex(
                name: "CRT_ABNDD_LN_TXCRS",
                table: "CART_ABANDONED_LINE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CRT_ABNDD_LN_TXSTP",
                table: "CART_ABANDONED_LINE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CTLN_SSSN_TXCRTS",
                table: "CATALINA_SESSION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CTLN_SSSN_TXSTMP",
                table: "CATALINA_SESSION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CHRCTR_ST_TXCRTS",
                table: "CHARACTER_SET",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CHRCTR_ST_TXSTMP",
                table: "CHARACTER_SET",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CACCT_CMECH",
                table: "CHECK_ACCOUNT",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "CACCT_PADDR",
                table: "CHECK_ACCOUNT",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "CACCT_PMETH",
                table: "CHECK_ACCOUNT",
                column: "PAYMENT_METHOD_ID");

            migrationBuilder.CreateIndex(
                name: "CHCK_ACCNT_TXCRTS",
                table: "CHECK_ACCOUNT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CHCK_ACCNT_TXSTMP",
                table: "CHECK_ACCOUNT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CMM_CNT_ASC_TP_TXP",
                table: "COMM_CONTENT_ASSOC_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CMM_CNT_ASC_TP_TXS",
                table: "COMM_CONTENT_ASSOC_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CMM_EVT_CNT_ASC_TP",
                table: "COMM_EVENT_CONTENT_ASSOC",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CMM_EVT_CNT_ASC_TS",
                table: "COMM_EVENT_CONTENT_ASSOC",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "COMMEV_CA_COMMEV",
                table: "COMM_EVENT_CONTENT_ASSOC",
                column: "COMMUNICATION_EVENT_ID");

            migrationBuilder.CreateIndex(
                name: "COMMEV_CA_FROM",
                table: "COMM_EVENT_CONTENT_ASSOC",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "COMMEV_CA_TYP",
                table: "COMM_EVENT_CONTENT_ASSOC",
                column: "COMM_CONTENT_ASSOC_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CMMNCTN_EVT_TXCRTS",
                table: "COMMUNICATION_EVENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CMMNCTN_EVT_TXSTMP",
                table: "COMMUNICATION_EVENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "COM_EVNT_CLST",
                table: "COMMUNICATION_EVENT",
                column: "CONTACT_LIST_ID");

            migrationBuilder.CreateIndex(
                name: "COM_EVNT_CMTP",
                table: "COMMUNICATION_EVENT",
                column: "CONTACT_MECH_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "COM_EVNT_FCM",
                table: "COMMUNICATION_EVENT",
                column: "CONTACT_MECH_ID_FROM");

            migrationBuilder.CreateIndex(
                name: "COM_EVNT_FPTY",
                table: "COMMUNICATION_EVENT",
                column: "PARTY_ID_FROM");

            migrationBuilder.CreateIndex(
                name: "COM_EVNT_FRTYP",
                table: "COMMUNICATION_EVENT",
                column: "ROLE_TYPE_ID_FROM");

            migrationBuilder.CreateIndex(
                name: "COM_EVNT_MIMETYPE",
                table: "COMMUNICATION_EVENT",
                column: "CONTENT_MIME_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "COM_EVNT_RESENUM",
                table: "COMMUNICATION_EVENT",
                column: "REASON_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "COM_EVNT_STTS",
                table: "COMMUNICATION_EVENT",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "COM_EVNT_TCM",
                table: "COMMUNICATION_EVENT",
                column: "CONTACT_MECH_ID_TO");

            migrationBuilder.CreateIndex(
                name: "COM_EVNT_TPTY",
                table: "COMMUNICATION_EVENT",
                column: "PARTY_ID_TO");

            migrationBuilder.CreateIndex(
                name: "COM_EVNT_TRTYP",
                table: "COMMUNICATION_EVENT",
                column: "ROLE_TYPE_ID_TO");

            migrationBuilder.CreateIndex(
                name: "COM_EVNT_TYPE",
                table: "COMMUNICATION_EVENT",
                column: "COMMUNICATION_EVENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "COMMEVT_MSG_ID",
                table: "COMMUNICATION_EVENT",
                column: "MESSAGE_ID",
                unique: true,
                filter: "[MESSAGE_ID] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "CMMNN_EVT_ORR_TXCS",
                table: "COMMUNICATION_EVENT_ORDER",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CMMNN_EVT_ORR_TXSP",
                table: "COMMUNICATION_EVENT_ORDER",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "COMEV_ORDER_CMEV",
                table: "COMMUNICATION_EVENT_ORDER",
                column: "COMMUNICATION_EVENT_ID");

            migrationBuilder.CreateIndex(
                name: "COMEV_ORDER_ORDER",
                table: "COMMUNICATION_EVENT_ORDER",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "CMMNN_EVT_PRT_TXCS",
                table: "COMMUNICATION_EVENT_PRODUCT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CMMNN_EVT_PRT_TXSP",
                table: "COMMUNICATION_EVENT_PRODUCT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "COMEV_PROD_CMEV",
                table: "COMMUNICATION_EVENT_PRODUCT",
                column: "COMMUNICATION_EVENT_ID");

            migrationBuilder.CreateIndex(
                name: "COMEV_PROD_PROD",
                table: "COMMUNICATION_EVENT_PRODUCT",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "CMN_EVT_PRP_TP_TXP",
                table: "COMMUNICATION_EVENT_PRP_TYP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CMN_EVT_PRP_TP_TXS",
                table: "COMMUNICATION_EVENT_PRP_TYP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "COM_EVNT_PRP_TYP",
                table: "COMMUNICATION_EVENT_PRP_TYP",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CMMNN_EVT_PRS_TXCS",
                table: "COMMUNICATION_EVENT_PURPOSE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CMMNN_EVT_PRS_TXSP",
                table: "COMMUNICATION_EVENT_PURPOSE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "COM_EVNT_PRP_EVNT",
                table: "COMMUNICATION_EVENT_PURPOSE",
                column: "COMMUNICATION_EVENT_ID");

            migrationBuilder.CreateIndex(
                name: "COM_EVNT_PRP_TYPE",
                table: "COMMUNICATION_EVENT_PURPOSE",
                column: "COMMUNICATION_EVENT_PRP_TYP_ID");

            migrationBuilder.CreateIndex(
                name: "CMMNN_EVT_RTN_TXCS",
                table: "COMMUNICATION_EVENT_RETURN",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CMMNN_EVT_RTN_TXSP",
                table: "COMMUNICATION_EVENT_RETURN",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "COMEV_ORDER_RETURN",
                table: "COMMUNICATION_EVENT_RETURN",
                column: "RETURN_ID");

            migrationBuilder.CreateIndex(
                name: "COMEV_RETURN_CMEV",
                table: "COMMUNICATION_EVENT_RETURN",
                column: "COMMUNICATION_EVENT_ID");

            migrationBuilder.CreateIndex(
                name: "CMMNN_EVT_RL_TXCRS",
                table: "COMMUNICATION_EVENT_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CMMNN_EVT_RL_TXSTP",
                table: "COMMUNICATION_EVENT_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "COM_EVRL_CMCH",
                table: "COMMUNICATION_EVENT_ROLE",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "COM_EVRL_CMEV",
                table: "COMMUNICATION_EVENT_ROLE",
                column: "COMMUNICATION_EVENT_ID");

            migrationBuilder.CreateIndex(
                name: "COM_EVRL_PRLE",
                table: "COMMUNICATION_EVENT_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "COM_EVRL_PTY",
                table: "COMMUNICATION_EVENT_ROLE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "COM_EVRL_STTS",
                table: "COMMUNICATION_EVENT_ROLE",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "CMMNN_EVT_TP_TXCRS",
                table: "COMMUNICATION_EVENT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CMMNN_EVT_TP_TXSTP",
                table: "COMMUNICATION_EVENT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "COM_EVNT_TYPE_CMT",
                table: "COMMUNICATION_EVENT_TYPE",
                column: "CONTACT_MECH_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "COM_EVNT_TYPE_PAR",
                table: "COMMUNICATION_EVENT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CMN_EVT_WRK_EFF_TP",
                table: "COMMUNICATION_EVENT_WORK_EFF",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CMN_EVT_WRK_EFF_TS",
                table: "COMMUNICATION_EVENT_WORK_EFF",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "COMEV_WEFF_CMEV",
                table: "COMMUNICATION_EVENT_WORK_EFF",
                column: "COMMUNICATION_EVENT_ID");

            migrationBuilder.CreateIndex(
                name: "COMEV_WEFF_WEFF",
                table: "COMMUNICATION_EVENT_WORK_EFF",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "COMPONENT_TXCRTS",
                table: "COMPONENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "COMPONENT_TXSTMP",
                table: "COMPONENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNG_OPN_PRT_OPN_TP",
                table: "CONFIG_OPTION_PRODUCT_OPTION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNG_OPN_PRT_OPN_TS",
                table: "CONFIG_OPTION_PRODUCT_OPTION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_OPTN_CONF",
                table: "CONFIG_OPTION_PRODUCT_OPTION",
                columns: new[] { "CONFIG_ID", "CONFIG_ITEM_ID", "CONFIG_OPTION_ID", "SEQUENCE_NUM" });

            migrationBuilder.CreateIndex(
                name: "PROD_OPTN_PROD",
                table: "CONFIG_OPTION_PRODUCT_OPTION",
                columns: new[] { "CONFIG_ITEM_ID", "CONFIG_OPTION_ID", "PRODUCT_ID" });

            migrationBuilder.CreateIndex(
                name: "CNCT_LST_CBUL",
                table: "CONTACT_LIST",
                column: "CREATED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "CNCT_LST_CMCHTP",
                table: "CONTACT_LIST",
                column: "CONTACT_MECH_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CNCT_LST_LMUL",
                table: "CONTACT_LIST",
                column: "LAST_MODIFIED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "CNCT_LST_MKCMPN",
                table: "CONTACT_LIST",
                column: "MARKETING_CAMPAIGN_ID");

            migrationBuilder.CreateIndex(
                name: "CNCT_LST_OPTY",
                table: "CONTACT_LIST",
                column: "OWNER_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "CNCT_LST_TYP",
                table: "CONTACT_LIST",
                column: "CONTACT_LIST_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CNTCT_LST_TXCRTS",
                table: "CONTACT_LIST",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTCT_LST_TXSTMP",
                table: "CONTACT_LIST",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNCT_LST_CST_CE",
                table: "CONTACT_LIST_COMM_STATUS",
                column: "COMMUNICATION_EVENT_ID");

            migrationBuilder.CreateIndex(
                name: "CNCT_LST_CST_CL",
                table: "CONTACT_LIST_COMM_STATUS",
                column: "CONTACT_LIST_ID");

            migrationBuilder.CreateIndex(
                name: "CNCT_LST_CST_CM",
                table: "CONTACT_LIST_COMM_STATUS",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "CNCT_LST_CST_PT",
                table: "CONTACT_LIST_COMM_STATUS",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "CNCT_LST_CST_ST",
                table: "CONTACT_LIST_COMM_STATUS",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "CNCT_LST_CST_ST_UL",
                table: "CONTACT_LIST_COMM_STATUS",
                column: "CHANGE_BY_USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "CNT_LST_CMM_STS_TP",
                table: "CONTACT_LIST_COMM_STATUS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNT_LST_CMM_STS_TS",
                table: "CONTACT_LIST_COMM_STATUS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTLSTCST_MSG_ID",
                table: "CONTACT_LIST_COMM_STATUS",
                column: "MESSAGE_ID",
                unique: true,
                filter: "[MESSAGE_ID] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "CNCT_LSTPTY_CLST",
                table: "CONTACT_LIST_PARTY",
                column: "CONTACT_LIST_ID");

            migrationBuilder.CreateIndex(
                name: "CNCT_LSTPTY_PCM",
                table: "CONTACT_LIST_PARTY",
                column: "PREFERRED_CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "CNCT_LSTPTY_PTY",
                table: "CONTACT_LIST_PARTY",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "CNCT_LSTPTY_STS",
                table: "CONTACT_LIST_PARTY",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "CNTT_LST_PRT_TXCRS",
                table: "CONTACT_LIST_PARTY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTT_LST_PRT_TXSTP",
                table: "CONTACT_LIST_PARTY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNT_LST_PRT_STS_TP",
                table: "CONTACT_LIST_PARTY_STATUS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNT_LST_PRT_STS_TS",
                table: "CONTACT_LIST_PARTY_STATUS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CTLSTPTST_CLP",
                table: "CONTACT_LIST_PARTY_STATUS",
                columns: new[] { "CONTACT_LIST_ID", "PARTY_ID", "FROM_DATE" });

            migrationBuilder.CreateIndex(
                name: "CNTT_LST_TP_TXCRTS",
                table: "CONTACT_LIST_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTT_LST_TP_TXSTMP",
                table: "CONTACT_LIST_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTCT_MCH_TXCRTS",
                table: "CONTACT_MECH",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTCT_MCH_TXSTMP",
                table: "CONTACT_MECH",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CONT_MECH_TYPE",
                table: "CONTACT_MECH",
                column: "CONTACT_MECH_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "INFO_STRING_IDX",
                table: "CONTACT_MECH",
                column: "INFO_STRING");

            migrationBuilder.CreateIndex(
                name: "CNT_MCH_ATTT_TXCRS",
                table: "CONTACT_MECH_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNT_MCH_ATTT_TXSTP",
                table: "CONTACT_MECH_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CONT_MECH_ATTR",
                table: "CONTACT_MECH_ATTRIBUTE",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "CNTT_MCH_LNK_TXCRS",
                table: "CONTACT_MECH_LINK",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTT_MCH_LNK_TXSTP",
                table: "CONTACT_MECH_LINK",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CONT_MECH_FCMECH",
                table: "CONTACT_MECH_LINK",
                column: "CONTACT_MECH_ID_FROM");

            migrationBuilder.CreateIndex(
                name: "CONT_MECH_TCMECH",
                table: "CONTACT_MECH_LINK",
                column: "CONTACT_MECH_ID_TO");

            migrationBuilder.CreateIndex(
                name: "CNT_MCH_PRS_TP_TXP",
                table: "CONTACT_MECH_PURPOSE_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNT_MCH_PRS_TP_TXS",
                table: "CONTACT_MECH_PURPOSE_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTT_MCH_TP_TXCRTS",
                table: "CONTACT_MECH_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTT_MCH_TP_TXSTMP",
                table: "CONTACT_MECH_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CONT_MECH_TYP_PAR",
                table: "CONTACT_MECH_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CNT_MCH_TP_ATR_TXP",
                table: "CONTACT_MECH_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNT_MCH_TP_ATR_TXS",
                table: "CONTACT_MECH_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CONT_MECH_TYP_ATR",
                table: "CONTACT_MECH_TYPE_ATTR",
                column: "CONTACT_MECH_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CNT_MCH_TP_PRS_TXP",
                table: "CONTACT_MECH_TYPE_PURPOSE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNT_MCH_TP_PRS_TXS",
                table: "CONTACT_MECH_TYPE_PURPOSE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CONT_MECH_TP_PRPTP",
                table: "CONTACT_MECH_TYPE_PURPOSE",
                column: "CONTACT_MECH_PURPOSE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CONT_MECH_TP_TYPE",
                table: "CONTACT_MECH_TYPE_PURPOSE",
                column: "CONTACT_MECH_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CONTAINER_CTTYP",
                table: "CONTAINER",
                column: "CONTAINER_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CONTAINER_FACILITY",
                table: "CONTAINER",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "CONTAINER_TXCRTS",
                table: "CONTAINER",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CONTAINER_TXSTMP",
                table: "CONTAINER",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTNR_G_PNT_TXCRTS",
                table: "CONTAINER_GEO_POINT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTNR_G_PNT_TXSTMP",
                table: "CONTAINER_GEO_POINT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CONTNRGEOPT_CONTNR",
                table: "CONTAINER_GEO_POINT",
                column: "CONTAINER_ID");

            migrationBuilder.CreateIndex(
                name: "CONTNRGEOPT_GEOPT",
                table: "CONTAINER_GEO_POINT",
                column: "GEO_POINT_ID");

            migrationBuilder.CreateIndex(
                name: "CNTNR_TP_TXCRTS",
                table: "CONTAINER_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTNR_TP_TXSTMP",
                table: "CONTAINER_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CONTENT_CB_ULGN",
                table: "CONTENT",
                column: "CREATED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "CONTENT_CHST",
                table: "CONTENT",
                column: "CHARACTER_SET_ID");

            migrationBuilder.CreateIndex(
                name: "CONTENT_CUSTMET",
                table: "CONTENT",
                column: "CUSTOM_METHOD_ID");

            migrationBuilder.CreateIndex(
                name: "CONTENT_DCNTNT",
                table: "CONTENT",
                column: "DECORATOR_CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "CONTENT_DTSRC",
                table: "CONTENT",
                column: "DATA_SOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "CONTENT_IOFCNT",
                table: "CONTENT",
                column: "INSTANCE_OF_CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "CONTENT_LMB_ULGN",
                table: "CONTENT",
                column: "LAST_MODIFIED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "CONTENT_PCNTNT",
                table: "CONTENT",
                column: "OWNER_CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "CONTENT_PRIVENM",
                table: "CONTENT",
                column: "PRIVILEGE_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "CONTENT_STATUS",
                table: "CONTENT",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "CONTENT_TO_DATA",
                table: "CONTENT",
                column: "DATA_RESOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "CONTENT_TO_TMPDATA",
                table: "CONTENT",
                column: "TEMPLATE_DATA_RESOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "CONTENT_TO_TYPE",
                table: "CONTENT",
                column: "CONTENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CONTENT_TXCRTS",
                table: "CONTENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CONTENT_TXSTMP",
                table: "CONTENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTNT_APPRL_TXCRTS",
                table: "CONTENT_APPROVAL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTNT_APPRL_TXSTMP",
                table: "CONTENT_APPROVAL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTNTAPPR_APSI",
                table: "CONTENT_APPROVAL",
                column: "APPROVAL_STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "CNTNTAPPR_CNT",
                table: "CONTENT_APPROVAL",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "CNTNTAPPR_PTY",
                table: "CONTENT_APPROVAL",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "CNTNTAPPR_RLTP",
                table: "CONTENT_APPROVAL",
                column: "ROLE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CNTNT_ASSC_TXCRTS",
                table: "CONTENT_ASSOC",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTNT_ASSC_TXSTMP",
                table: "CONTENT_ASSOC",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CONTENTASSC_CBUSR",
                table: "CONTENT_ASSOC",
                column: "CREATED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "CONTENTASSC_DTSRC",
                table: "CONTENT_ASSOC",
                column: "DATA_SOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "CONTENTASSC_FROM",
                table: "CONTENT_ASSOC",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "CONTENTASSC_LMBUR",
                table: "CONTENT_ASSOC",
                column: "LAST_MODIFIED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "CONTENTASSC_PRED",
                table: "CONTENT_ASSOC",
                column: "CONTENT_ASSOC_PREDICATE_ID");

            migrationBuilder.CreateIndex(
                name: "CONTENTASSC_TO",
                table: "CONTENT_ASSOC",
                column: "CONTENT_ID_TO");

            migrationBuilder.CreateIndex(
                name: "CONTENTASSC_TOQRY",
                table: "CONTENT_ASSOC",
                columns: new[] { "CONTENT_ID_TO", "CONTENT_ASSOC_TYPE_ID", "THRU_DATE" });

            migrationBuilder.CreateIndex(
                name: "CONTENTASSC_TYP",
                table: "CONTENT_ASSOC",
                column: "CONTENT_ASSOC_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CNTT_ASC_PRT_TXCRS",
                table: "CONTENT_ASSOC_PREDICATE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTT_ASC_PRT_TXSTP",
                table: "CONTENT_ASSOC_PREDICATE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTT_ASC_TP_TXCRTS",
                table: "CONTENT_ASSOC_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTT_ASC_TP_TXSTMP",
                table: "CONTENT_ASSOC_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTNT_ATTRT_TXCRTS",
                table: "CONTENT_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTNT_ATTRT_TXSTMP",
                table: "CONTENT_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CONTENT_ATTR",
                table: "CONTENT_ATTRIBUTE",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "CNT_KWD_CNT",
                table: "CONTENT_KEYWORD",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "CNT_KWD_KWD",
                table: "CONTENT_KEYWORD",
                column: "KEYWORD");

            migrationBuilder.CreateIndex(
                name: "CNTNT_KWRD_TXCRTS",
                table: "CONTENT_KEYWORD",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTNT_KWRD_TXSTMP",
                table: "CONTENT_KEYWORD",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTNT_MT_DT_TXCRTS",
                table: "CONTENT_META_DATA",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTNT_MT_DT_TXSTMP",
                table: "CONTENT_META_DATA",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CONTENTMD_CNTNT",
                table: "CONTENT_META_DATA",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "CONTENTMD_DMDPRD",
                table: "CONTENT_META_DATA",
                column: "META_DATA_PREDICATE_ID");

            migrationBuilder.CreateIndex(
                name: "CONTENTMD_DTSRC",
                table: "CONTENT_META_DATA",
                column: "DATA_SOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "CNTNT_OPRTN_TXCRTS",
                table: "CONTENT_OPERATION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTNT_OPRTN_TXSTMP",
                table: "CONTENT_OPERATION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTNT_PRPS_TXCRTS",
                table: "CONTENT_PURPOSE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTNT_PRPS_TXSTMP",
                table: "CONTENT_PURPOSE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CONTENT_PRP",
                table: "CONTENT_PURPOSE",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "CONTENT_PRP_TYPE",
                table: "CONTENT_PURPOSE",
                column: "CONTENT_PURPOSE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CNTT_PRS_OPN_TXCRS",
                table: "CONTENT_PURPOSE_OPERATION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTT_PRS_OPN_TXSTP",
                table: "CONTENT_PURPOSE_OPERATION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CONTENT_PRO_OPER",
                table: "CONTENT_PURPOSE_OPERATION",
                column: "CONTENT_OPERATION_ID");

            migrationBuilder.CreateIndex(
                name: "CONTENT_PRO_PEI",
                table: "CONTENT_PURPOSE_OPERATION",
                column: "PRIVILEGE_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "CONTENT_PRO_RLT",
                table: "CONTENT_PURPOSE_OPERATION",
                column: "ROLE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CONTENT_PRO_STI",
                table: "CONTENT_PURPOSE_OPERATION",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "CONTENT_PRO_TYPE",
                table: "CONTENT_PURPOSE_OPERATION",
                column: "CONTENT_PURPOSE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CNTT_PRS_TP_TXCRTS",
                table: "CONTENT_PURPOSE_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTT_PRS_TP_TXSTMP",
                table: "CONTENT_PURPOSE_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTNT_RVSN_TXCRTS",
                table: "CONTENT_REVISION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTNT_RVSN_TXSTMP",
                table: "CONTENT_REVISION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTNTREV_CBPTY",
                table: "CONTENT_REVISION",
                column: "COMMITTED_BY_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "CNTNTREV_CNT",
                table: "CONTENT_REVISION",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "CNTNTREVIT_CNTREV",
                table: "CONTENT_REVISION_ITEM",
                columns: new[] { "CONTENT_ID", "CONTENT_REVISION_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "CNTNTREVIT_NEWDR",
                table: "CONTENT_REVISION_ITEM",
                column: "NEW_DATA_RESOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "CNTNTREVIT_OLDDR",
                table: "CONTENT_REVISION_ITEM",
                column: "OLD_DATA_RESOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "CNTT_RVN_ITM_TXCRS",
                table: "CONTENT_REVISION_ITEM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTT_RVN_ITM_TXSTP",
                table: "CONTENT_REVISION_ITEM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTNT_RL_CNTNT",
                table: "CONTENT_ROLE",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "CNTNT_RL_PTRL",
                table: "CONTENT_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "CNTNT_RL_TXCRTS",
                table: "CONTENT_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTNT_RL_TXSTMP",
                table: "CONTENT_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNT_SCHRSI_RES",
                table: "CONTENT_SEARCH_CONSTRAINT",
                column: "CONTENT_SEARCH_RESULT_ID");

            migrationBuilder.CreateIndex(
                name: "CNT_SRH_CNSTT_TXCS",
                table: "CONTENT_SEARCH_CONSTRAINT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNT_SRH_CNSTT_TXSP",
                table: "CONTENT_SEARCH_CONSTRAINT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTT_SRH_RST_TXCRS",
                table: "CONTENT_SEARCH_RESULT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTT_SRH_RST_TXSTP",
                table: "CONTENT_SEARCH_RESULT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTNT_TP_TXCRTS",
                table: "CONTENT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTNT_TP_TXSTMP",
                table: "CONTENT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTNT_TYPE_PARENT",
                table: "CONTENT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CNTT_TP_ATR_TXCRTS",
                table: "CONTENT_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTT_TP_ATR_TXSTMP",
                table: "CONTENT_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CONTENT_TPAT_TYP",
                table: "CONTENT_TYPE_ATTR",
                column: "CONTENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "COST_COMP_CALC",
                table: "COST_COMPONENT",
                column: "COST_COMPONENT_CALC_ID");

            migrationBuilder.CreateIndex(
                name: "COST_COMP_CUOM",
                table: "COST_COMPONENT",
                column: "COST_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "COST_COMP_FXADSST",
                table: "COST_COMPONENT",
                column: "FIXED_ASSET_ID");

            migrationBuilder.CreateIndex(
                name: "COST_COMP_GEO",
                table: "COST_COMPONENT",
                column: "GEO_ID");

            migrationBuilder.CreateIndex(
                name: "COST_COMP_PARTY",
                table: "COST_COMPONENT",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "COST_COMP_PRODFEAT",
                table: "COST_COMPONENT",
                column: "PRODUCT_FEATURE_ID");

            migrationBuilder.CreateIndex(
                name: "COST_COMP_PRODUCT",
                table: "COST_COMPONENT",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "COST_COMP_TYPE",
                table: "COST_COMPONENT",
                column: "COST_COMPONENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "COST_COMP_WEFF",
                table: "COST_COMPONENT",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "CST_CMPNNT_TXCRTS",
                table: "COST_COMPONENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CST_CMPNNT_TXSTMP",
                table: "COST_COMPONENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "COST_COMP_ATTR",
                table: "COST_COMPONENT_ATTRIBUTE",
                column: "COST_COMPONENT_ID");

            migrationBuilder.CreateIndex(
                name: "CST_CMPT_ATTT_TXCS",
                table: "COST_COMPONENT_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CST_CMPT_ATTT_TXSP",
                table: "COST_COMPONENT_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "COST_COM_CGLAT",
                table: "COST_COMPONENT_CALC",
                column: "COST_GL_ACCOUNT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "COST_COM_CMET",
                table: "COST_COMPONENT_CALC",
                column: "COST_CUSTOM_METHOD_ID");

            migrationBuilder.CreateIndex(
                name: "COST_COM_CUOM",
                table: "COST_COMPONENT_CALC",
                column: "CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "COST_COM_OGLAT",
                table: "COST_COMPONENT_CALC",
                column: "OFFSETTING_GL_ACCOUNT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CST_CMPT_CLC_TXCRS",
                table: "COST_COMPONENT_CALC",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CST_CMPT_CLC_TXSTP",
                table: "COST_COMPONENT_CALC",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "COST_COMP_TYPE_PAR",
                table: "COST_COMPONENT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CST_CMPNT_TP_TXCRS",
                table: "COST_COMPONENT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CST_CMPNT_TP_TXSTP",
                table: "COST_COMPONENT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "COST_COMP_TATTR",
                table: "COST_COMPONENT_TYPE_ATTR",
                column: "COST_COMPONENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CST_CMT_TP_ATR_TXP",
                table: "COST_COMPONENT_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CST_CMT_TP_ATR_TXS",
                table: "COST_COMPONENT_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNR_ADDS_FRT_TXCRS",
                table: "COUNTRY_ADDRESS_FORMAT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNR_ADDS_FRT_TXSTP",
                table: "COUNTRY_ADDRESS_FORMAT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNY_ADR_GEO",
                table: "COUNTRY_ADDRESS_FORMAT",
                column: "GEO_ID");

            migrationBuilder.CreateIndex(
                name: "CNY_ADR_GEO_TYPE",
                table: "COUNTRY_ADDRESS_FORMAT",
                column: "GEO_ASSOC_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CNTR_CPTL_TXCRTS",
                table: "COUNTRY_CAPITAL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTR_CPTL_TXSTMP",
                table: "COUNTRY_CAPITAL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTRY_CAP_TO_CODE",
                table: "COUNTRY_CAPITAL",
                column: "COUNTRY_CODE");

            migrationBuilder.CreateIndex(
                name: "CNTR_CD_TXCRTS",
                table: "COUNTRY_CODE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTR_CD_TXSTMP",
                table: "COUNTRY_CODE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTR_TL_CD_TXCRTS",
                table: "COUNTRY_TELE_CODE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTR_TL_CD_TXSTMP",
                table: "COUNTRY_TELE_CODE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTRY_TELE_TO_CODE",
                table: "COUNTRY_TELE_CODE",
                column: "COUNTRY_CODE");

            migrationBuilder.CreateIndex(
                name: "CREDCARD_CMECH",
                table: "CREDIT_CARD",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "CREDCARD_PADDR",
                table: "CREDIT_CARD",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "CREDCARD_PMNTMETH",
                table: "CREDIT_CARD",
                column: "PAYMENT_METHOD_ID");

            migrationBuilder.CreateIndex(
                name: "CREDIT_CARD_TXCRTS",
                table: "CREDIT_CARD",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CREDIT_CARD_TXSTMP",
                table: "CREDIT_CARD",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CRT_TP_GL_ACT_TP",
                table: "CREDIT_CARD_TYPE_GL_ACCOUNT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CRT_TP_GL_ACT_TS",
                table: "CREDIT_CARD_TYPE_GL_ACCOUNT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CST_RQST_TXCRTS",
                table: "CUST_REQUEST",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CST_RQST_TXSTMP",
                table: "CUST_REQUEST",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CUST_REQ_AUOM",
                table: "CUST_REQUEST",
                column: "MAXIMUM_AMOUNT_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "CUST_REQ_CAT",
                table: "CUST_REQUEST",
                column: "CUST_REQUEST_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "CUST_REQ_CHANNEL",
                table: "CUST_REQUEST",
                column: "SALES_CHANNEL_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "CUST_REQ_CUOM",
                table: "CUST_REQUEST",
                column: "CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "CUST_REQ_FRMPTY",
                table: "CUST_REQUEST",
                column: "FROM_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "CUST_REQ_FULCM",
                table: "CUST_REQUEST",
                column: "FULFILL_CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "CUST_REQ_PRDS",
                table: "CUST_REQUEST",
                column: "PRODUCT_STORE_ID");

            migrationBuilder.CreateIndex(
                name: "CUST_REQ_STATUS",
                table: "CUST_REQUEST",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "CUST_REQ_TYPE",
                table: "CUST_REQUEST",
                column: "CUST_REQUEST_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CST_RQT_ATTT_TXCRS",
                table: "CUST_REQUEST_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CST_RQT_ATTT_TXSTP",
                table: "CUST_REQUEST_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CUST_REQ_ATTR",
                table: "CUST_REQUEST_ATTRIBUTE",
                column: "CUST_REQUEST_ID");

            migrationBuilder.CreateIndex(
                name: "CST_RQT_CTR_TXCRTS",
                table: "CUST_REQUEST_CATEGORY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CST_RQT_CTR_TXSTMP",
                table: "CUST_REQUEST_CATEGORY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CUST_RQCT_TYPE",
                table: "CUST_REQUEST_CATEGORY",
                column: "CUST_REQUEST_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CST_RQT_CMM_EVT_TP",
                table: "CUST_REQUEST_COMM_EVENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CST_RQT_CMM_EVT_TS",
                table: "CUST_REQUEST_COMM_EVENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CUSTREQ_CEV_CEV",
                table: "CUST_REQUEST_COMM_EVENT",
                column: "COMMUNICATION_EVENT_ID");

            migrationBuilder.CreateIndex(
                name: "CUSTREQ_CEV_CRQ",
                table: "CUST_REQUEST_COMM_EVENT",
                column: "CUST_REQUEST_ID");

            migrationBuilder.CreateIndex(
                name: "CST_RQT_CNTT_TXCRS",
                table: "CUST_REQUEST_CONTENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CST_RQT_CNTT_TXSTP",
                table: "CUST_REQUEST_CONTENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CUSTREQ_CNT_CNT",
                table: "CUST_REQUEST_CONTENT",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "CUSTREQ_CNT_CUSTRQ",
                table: "CUST_REQUEST_CONTENT",
                column: "CUST_REQUEST_ID");

            migrationBuilder.CreateIndex(
                name: "CST_RQT_ITM_TXCRTS",
                table: "CUST_REQUEST_ITEM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CST_RQT_ITM_TXSTMP",
                table: "CUST_REQUEST_ITEM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CUST_REQITM_CREQ",
                table: "CUST_REQUEST_ITEM",
                column: "CUST_REQUEST_ID");

            migrationBuilder.CreateIndex(
                name: "CUST_REQITM_PRD",
                table: "CUST_REQUEST_ITEM",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "CUST_REQITM_RES",
                table: "CUST_REQUEST_ITEM",
                column: "CUST_REQUEST_RESOLUTION_ID");

            migrationBuilder.CreateIndex(
                name: "CUST_REQITM_STTS",
                table: "CUST_REQUEST_ITEM",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "CST_RQT_ITM_NT_TXP",
                table: "CUST_REQUEST_ITEM_NOTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CST_RQT_ITM_NT_TXS",
                table: "CUST_REQUEST_ITEM_NOTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CUST_REQ_ITNT",
                table: "CUST_REQUEST_ITEM_NOTE",
                columns: new[] { "CUST_REQUEST_ID", "CUST_REQUEST_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "CUST_REQ_NOTE",
                table: "CUST_REQUEST_ITEM_NOTE",
                column: "NOTE_ID");

            migrationBuilder.CreateIndex(
                name: "CST_ITM_WRK_EFT_TP",
                table: "CUST_REQUEST_ITEM_WORK_EFFORT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CST_ITM_WRK_EFT_TS",
                table: "CUST_REQUEST_ITEM_WORK_EFFORT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CUST_REQ_WEFF",
                table: "CUST_REQUEST_ITEM_WORK_EFFORT",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "WORK_REQFL_CSTRQ",
                table: "CUST_REQUEST_ITEM_WORK_EFFORT",
                columns: new[] { "CUST_REQUEST_ID", "CUST_REQUEST_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "CRQ_CR",
                table: "CUST_REQUEST_NOTE",
                column: "CUST_REQUEST_ID");

            migrationBuilder.CreateIndex(
                name: "CRQ_NOTE",
                table: "CUST_REQUEST_NOTE",
                column: "NOTE_ID");

            migrationBuilder.CreateIndex(
                name: "CST_RQST_NT_TXCRTS",
                table: "CUST_REQUEST_NOTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CST_RQST_NT_TXSTMP",
                table: "CUST_REQUEST_NOTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CREQ_RL_CRQST",
                table: "CUST_REQUEST_PARTY",
                column: "CUST_REQUEST_ID");

            migrationBuilder.CreateIndex(
                name: "CREQ_RL_PARTY",
                table: "CUST_REQUEST_PARTY",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "CREQ_RL_PROLE",
                table: "CUST_REQUEST_PARTY",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "CST_RQT_PRT_TXCRTS",
                table: "CUST_REQUEST_PARTY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CST_RQT_PRT_TXSTMP",
                table: "CUST_REQUEST_PARTY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CST_RQT_RSLN_TXCRS",
                table: "CUST_REQUEST_RESOLUTION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CST_RQT_RSLN_TXSTP",
                table: "CUST_REQUEST_RESOLUTION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CUST_RQRS_TYPE",
                table: "CUST_REQUEST_RESOLUTION",
                column: "CUST_REQUEST_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CST_RQT_STS_TXCRTS",
                table: "CUST_REQUEST_STATUS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CST_RQT_STS_TXSTMP",
                table: "CUST_REQUEST_STATUS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CUST_REQ_STRQ",
                table: "CUST_REQUEST_STATUS",
                column: "CUST_REQUEST_ID");

            migrationBuilder.CreateIndex(
                name: "CUST_REQST_STTS",
                table: "CUST_REQUEST_STATUS",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "CUST_RQSTTS_USRLGN",
                table: "CUST_REQUEST_STATUS",
                column: "CHANGE_BY_USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "CST_RQST_TP_TXCRTS",
                table: "CUST_REQUEST_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CST_RQST_TP_TXSTMP",
                table: "CUST_REQUEST_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CUST_PTY_PARTY",
                table: "CUST_REQUEST_TYPE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "CUST_REQ_TYPE_PAR",
                table: "CUST_REQUEST_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CST_RQT_TP_ATR_TXP",
                table: "CUST_REQUEST_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CST_RQT_TP_ATR_TXS",
                table: "CUST_REQUEST_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CUST_REQ_TYPE_ATTR",
                table: "CUST_REQUEST_TYPE_ATTR",
                column: "CUST_REQUEST_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CST_RQT_WRK_EFT_TP",
                table: "CUST_REQUEST_WORK_EFFORT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CST_RQT_WRK_EFT_TS",
                table: "CUST_REQUEST_WORK_EFFORT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CSTREQ_WF_CREQ",
                table: "CUST_REQUEST_WORK_EFFORT",
                column: "CUST_REQUEST_ID");

            migrationBuilder.CreateIndex(
                name: "CSTREQ_WF_WEFF",
                table: "CUST_REQUEST_WORK_EFFORT",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "CME_TO_TYPE",
                table: "CUSTOM_METHOD",
                column: "CUSTOM_METHOD_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CSTM_MTHD_TXCRTS",
                table: "CUSTOM_METHOD",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CSTM_MTHD_TXSTMP",
                table: "CUSTOM_METHOD",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CME_TYPE_PARENT",
                table: "CUSTOM_METHOD_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CSTM_MTD_TP_TXCRTS",
                table: "CUSTOM_METHOD_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CSTM_MTD_TP_TXSTMP",
                table: "CUSTOM_METHOD_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CSCR_TO_TYPE",
                table: "CUSTOM_SCREEN",
                column: "CUSTOM_SCREEN_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "CSTM_SCRN_TXCRTS",
                table: "CUSTOM_SCREEN",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CSTM_SCRN_TXSTMP",
                table: "CUSTOM_SCREEN",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CSTM_SCN_TP_TXCRTS",
                table: "CUSTOM_SCREEN_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CSTM_SCN_TP_TXSTMP",
                table: "CUSTOM_SCREEN_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CSTM_TM_PRD_TXCRTS",
                table: "CUSTOM_TIME_PERIOD",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CSTM_TM_PRD_TXSTMP",
                table: "CUSTOM_TIME_PERIOD",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORG_PRD_PARPER",
                table: "CUSTOM_TIME_PERIOD",
                column: "PARENT_PERIOD_ID");

            migrationBuilder.CreateIndex(
                name: "ORG_PRD_PARTY",
                table: "CUSTOM_TIME_PERIOD",
                column: "ORGANIZATION_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "ORG_PRD_PERTYP",
                table: "CUSTOM_TIME_PERIOD",
                column: "PERIOD_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "DATA_CAT_PARENT",
                table: "DATA_CATEGORY",
                column: "PARENT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "DT_CTGR_TXCRTS",
                table: "DATA_CATEGORY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DT_CTGR_TXSTMP",
                table: "DATA_CATEGORY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DATA_REC_CB_ULGN",
                table: "DATA_RESOURCE",
                column: "CREATED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "DATA_REC_CHST",
                table: "DATA_RESOURCE",
                column: "CHARACTER_SET_ID");

            migrationBuilder.CreateIndex(
                name: "DATA_REC_DTSRC",
                table: "DATA_RESOURCE",
                column: "DATA_SOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "DATA_REC_LMB_ULGN",
                table: "DATA_RESOURCE",
                column: "LAST_MODIFIED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "DATA_REC_SURVEY",
                table: "DATA_RESOURCE",
                column: "SURVEY_ID");

            migrationBuilder.CreateIndex(
                name: "DATA_REC_SVRSP",
                table: "DATA_RESOURCE",
                column: "SURVEY_RESPONSE_ID");

            migrationBuilder.CreateIndex(
                name: "DATA_REC_TO_CAT",
                table: "DATA_RESOURCE",
                column: "DATA_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "DATA_REC_TO_TTP",
                table: "DATA_RESOURCE",
                column: "DATA_TEMPLATE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "DATA_REC_TO_TYPE",
                table: "DATA_RESOURCE",
                column: "DATA_RESOURCE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "DT_RSRC_TXCRTS",
                table: "DATA_RESOURCE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DT_RSRC_TXSTMP",
                table: "DATA_RESOURCE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DTRSRC_STATUS",
                table: "DATA_RESOURCE",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "DATA_REC_ATTR",
                table: "DATA_RESOURCE_ATTRIBUTE",
                column: "DATA_RESOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "DT_RSC_ATTRT_TXCRS",
                table: "DATA_RESOURCE_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DT_RSC_ATTRT_TXSTP",
                table: "DATA_RESOURCE_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DATA_MD_DATREC",
                table: "DATA_RESOURCE_META_DATA",
                column: "DATA_RESOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "DATA_MD_DMDPRD",
                table: "DATA_RESOURCE_META_DATA",
                column: "META_DATA_PREDICATE_ID");

            migrationBuilder.CreateIndex(
                name: "DATA_MD_DTSRC",
                table: "DATA_RESOURCE_META_DATA",
                column: "DATA_SOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "DT_RSC_MT_DT_TXCRS",
                table: "DATA_RESOURCE_META_DATA",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DT_RSC_MT_DT_TXSTP",
                table: "DATA_RESOURCE_META_DATA",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DATA_REC_PRP",
                table: "DATA_RESOURCE_PURPOSE",
                column: "DATA_RESOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "DATA_REC_PRP_TYPE",
                table: "DATA_RESOURCE_PURPOSE",
                column: "CONTENT_PURPOSE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "DT_RSRC_PRS_TXCRTS",
                table: "DATA_RESOURCE_PURPOSE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DT_RSRC_PRS_TXSTMP",
                table: "DATA_RESOURCE_PURPOSE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DATARECRL_DATREC",
                table: "DATA_RESOURCE_ROLE",
                column: "DATA_RESOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "DATARECRL_PTRL",
                table: "DATA_RESOURCE_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "DT_RSRC_RL_TXCRTS",
                table: "DATA_RESOURCE_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DT_RSRC_RL_TXSTMP",
                table: "DATA_RESOURCE_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DATA_OBTYPE_PARENT",
                table: "DATA_RESOURCE_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "DT_RSRC_TP_TXCRTS",
                table: "DATA_RESOURCE_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DT_RSRC_TP_TXSTMP",
                table: "DATA_RESOURCE_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DATA_OBTYPE_ATTR",
                table: "DATA_RESOURCE_TYPE_ATTR",
                column: "DATA_RESOURCE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "DT_RSC_TP_ATR_TXCS",
                table: "DATA_RESOURCE_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DT_RSC_TP_ATR_TXSP",
                table: "DATA_RESOURCE_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DATA_SOURCE_TXCRTS",
                table: "DATA_SOURCE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DATA_SOURCE_TXSTMP",
                table: "DATA_SOURCE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DATA_SRC_TYP",
                table: "DATA_SOURCE",
                column: "DATA_SOURCE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "DT_SRC_TP_TXCRTS",
                table: "DATA_SOURCE_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DT_SRC_TP_TXSTMP",
                table: "DATA_SOURCE_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DT_TMPLT_TP_TXCRTS",
                table: "DATA_TEMPLATE_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DT_TMPLT_TP_TXSTMP",
                table: "DATA_TEMPLATE_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DEDCTN_DEDTYP",
                table: "DEDUCTION",
                column: "DEDUCTION_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "DEDCTN_PMNT",
                table: "DEDUCTION",
                column: "PAYMENT_ID");

            migrationBuilder.CreateIndex(
                name: "DEDUCTION_TXCRTS",
                table: "DEDUCTION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DEDUCTION_TXSTMP",
                table: "DEDUCTION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DDCTN_TP_TXCRTS",
                table: "DEDUCTION_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DDCTN_TP_TXSTMP",
                table: "DEDUCTION_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DEDUCT_TYP_PAR",
                table: "DEDUCTION_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "DELIVERABLE_DLTYP",
                table: "DELIVERABLE",
                column: "DELIVERABLE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "DELIVERABLE_TXCRTS",
                table: "DELIVERABLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DELIVERABLE_TXSTMP",
                table: "DELIVERABLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DLVRBL_TP_TXCRTS",
                table: "DELIVERABLE_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DLVRBL_TP_TXSTMP",
                table: "DELIVERABLE_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DELIV_DFAC",
                table: "DELIVERY",
                column: "DEST_FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "DELIV_FXAS",
                table: "DELIVERY",
                column: "FIXED_ASSET_ID");

            migrationBuilder.CreateIndex(
                name: "DELIV_OFAC",
                table: "DELIVERY",
                column: "ORIGIN_FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "DELIVERY_TXCRTS",
                table: "DELIVERY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DELIVERY_TXSTMP",
                table: "DELIVERY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DES_FEAT_PFEAT",
                table: "DESIRED_FEATURE",
                column: "PRODUCT_FEATURE_ID");

            migrationBuilder.CreateIndex(
                name: "DES_FEAT_REQ",
                table: "DESIRED_FEATURE",
                column: "REQUIREMENT_ID");

            migrationBuilder.CreateIndex(
                name: "DSRD_FTR_TXCRTS",
                table: "DESIRED_FEATURE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DSRD_FTR_TXSTMP",
                table: "DESIRED_FEATURE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DOCUMENT_TO_TYPE",
                table: "DOCUMENT",
                column: "DOCUMENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "DOCUMENT_TXCRTS",
                table: "DOCUMENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DOCUMENT_TXSTMP",
                table: "DOCUMENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DCMNT_ATTRT_TXCRTS",
                table: "DOCUMENT_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DCMNT_ATTRT_TXSTMP",
                table: "DOCUMENT_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DOCUMENT_ATTR",
                table: "DOCUMENT_ATTRIBUTE",
                column: "DOCUMENT_ID");

            migrationBuilder.CreateIndex(
                name: "DCMNT_TP_TXCRTS",
                table: "DOCUMENT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DCMNT_TP_TXSTMP",
                table: "DOCUMENT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DOC_TYPE_PARENT",
                table: "DOCUMENT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "DCMT_TP_ATR_TXCRTS",
                table: "DOCUMENT_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DCMT_TP_ATR_TXSTMP",
                table: "DOCUMENT_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DOC_TYPE_ATTR",
                table: "DOCUMENT_TYPE_ATTR",
                column: "DOCUMENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "EFT_ACCOUNT_TXCRTS",
                table: "EFT_ACCOUNT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EFT_ACCOUNT_TXSTMP",
                table: "EFT_ACCOUNT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EFTACCT_CMECH",
                table: "EFT_ACCOUNT",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "EFTACCT_PADDR",
                table: "EFT_ACCOUNT",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "EFTACCT_PMETH",
                table: "EFT_ACCOUNT",
                column: "PAYMENT_METHOD_ID");

            migrationBuilder.CreateIndex(
                name: "DATA_REC_TEXT",
                table: "ELECTRONIC_TEXT",
                column: "DATA_RESOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "ELCTRNC_TXT_TXCRTS",
                table: "ELECTRONIC_TEXT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ELCTRNC_TXT_TXSTMP",
                table: "ELECTRONIC_TEXT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EMAIL_VERIFY_HASH",
                table: "EMAIL_ADDRESS_VERIFICATION",
                column: "VERIFY_HASH",
                unique: true,
                filter: "[VERIFY_HASH] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "EML_ADDS_VRFN_TXCS",
                table: "EMAIL_ADDRESS_VERIFICATION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EML_ADDS_VRFN_TXSP",
                table: "EMAIL_ADDRESS_VERIFICATION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EMAILSET_ENUM",
                table: "EMAIL_TEMPLATE_SETTING",
                column: "EMAIL_TYPE");

            migrationBuilder.CreateIndex(
                name: "EML_TMPT_STG_TXCRS",
                table: "EMAIL_TEMPLATE_SETTING",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EML_TMPT_STG_TXSTP",
                table: "EMAIL_TEMPLATE_SETTING",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EMP_LEAV_REAS_ELTP",
                table: "EMPL_LEAVE",
                column: "EMPL_LEAVE_REASON_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "EMPL_LEAVE_APPR",
                table: "EMPL_LEAVE",
                column: "APPROVER_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "EMPL_LEAVE_ELETP",
                table: "EMPL_LEAVE",
                column: "LEAVE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "EMPL_LEAVE_PRTY",
                table: "EMPL_LEAVE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "EMPL_LEAVE_STS",
                table: "EMPL_LEAVE",
                column: "LEAVE_STATUS");

            migrationBuilder.CreateIndex(
                name: "EMPL_LEAVE_TXCRTS",
                table: "EMPL_LEAVE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EMPL_LEAVE_TXSTMP",
                table: "EMPL_LEAVE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EML_LV_RSN_TP_TXCS",
                table: "EMPL_LEAVE_REASON_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EML_LV_RSN_TP_TXSP",
                table: "EMPL_LEAVE_REASON_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EMPL_REASON_TPAR",
                table: "EMPL_LEAVE_REASON_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "EMPL_LEAVE_TPAR",
                table: "EMPL_LEAVE_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "EMPL_LV_TP_TXCRTS",
                table: "EMPL_LEAVE_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EMPL_LV_TP_TXSTMP",
                table: "EMPL_LEAVE_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EMPL_POS_PRTY",
                table: "EMPL_POSITION",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "EMPL_POS_STTS",
                table: "EMPL_POSITION",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "EMPL_PSTN_TXCRTS",
                table: "EMPL_POSITION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EMPL_PSTN_TXSTMP",
                table: "EMPL_POSITION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EML_PSN_CLS_TP_TXP",
                table: "EMPL_POSITION_CLASS_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EML_PSN_CLS_TP_TXS",
                table: "EMPL_POSITION_CLASS_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EMPL_CLS_TYP_PAR",
                table: "EMPL_POSITION_CLASS_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "EML_PSN_FLFLT_TXCS",
                table: "EMPL_POSITION_FULFILLMENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EML_PSN_FLFLT_TXSP",
                table: "EMPL_POSITION_FULFILLMENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EMPL_PSFLMT_EMPS",
                table: "EMPL_POSITION_FULFILLMENT",
                column: "EMPL_POSITION_ID");

            migrationBuilder.CreateIndex(
                name: "EMPL_PSFLMT_PRTY",
                table: "EMPL_POSITION_FULFILLMENT",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "EML_PSN_RPG_STT_TP",
                table: "EMPL_POSITION_REPORTING_STRUCT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EML_PSN_RPG_STT_TS",
                table: "EMPL_POSITION_REPORTING_STRUCT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EMPL_PSRPS_EMPSM",
                table: "EMPL_POSITION_REPORTING_STRUCT",
                column: "EMPL_POSITION_ID_MANAGED_BY");

            migrationBuilder.CreateIndex(
                name: "EMPL_PSRPS_EMPSR",
                table: "EMPL_POSITION_REPORTING_STRUCT",
                column: "EMPL_POSITION_ID_REPORTING_TO");

            migrationBuilder.CreateIndex(
                name: "EML_PSN_RSPNT_TXCS",
                table: "EMPL_POSITION_RESPONSIBILITY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EML_PSN_RSPNT_TXSP",
                table: "EMPL_POSITION_RESPONSIBILITY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EMPL_PSRTY_EMPS",
                table: "EMPL_POSITION_RESPONSIBILITY",
                column: "EMPL_POSITION_ID");

            migrationBuilder.CreateIndex(
                name: "EMPL_PSRTY_RYTP",
                table: "EMPL_POSITION_RESPONSIBILITY",
                column: "RESPONSIBILITY_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "EMPL_POSI_TYP_PAR",
                table: "EMPL_POSITION_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "EMPL_PSN_TP_TXCRTS",
                table: "EMPL_POSITION_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EMPL_PSN_TP_TXSTMP",
                table: "EMPL_POSITION_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EML_PSN_TP_CLS_TXP",
                table: "EMPL_POSITION_TYPE_CLASS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EML_PSN_TP_CLS_TXS",
                table: "EMPL_POSITION_TYPE_CLASS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EMPL_PSTPCS_EPCTP",
                table: "EMPL_POSITION_TYPE_CLASS",
                column: "EMPL_POSITION_CLASS_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "EMPL_PSTPCS_EPTP",
                table: "EMPL_POSITION_TYPE_CLASS",
                column: "EMPL_POSITION_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "EML_TP_RT_NW_TP",
                table: "EMPL_POSITION_TYPE_RATE_NEW",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EML_TP_RT_NW_TS",
                table: "EMPL_POSITION_TYPE_RATE_NEW",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EMPL_PTPRT_EPTP",
                table: "EMPL_POSITION_TYPE_RATE_NEW",
                column: "EMPL_POSITION_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "EMPLMNT_FPTRL",
                table: "EMPLOYMENT",
                columns: new[] { "PARTY_ID_FROM", "ROLE_TYPE_ID_FROM" });

            migrationBuilder.CreateIndex(
                name: "EMPLMNT_FPTY",
                table: "EMPLOYMENT",
                column: "PARTY_ID_FROM");

            migrationBuilder.CreateIndex(
                name: "EMPLMNT_TPTRL",
                table: "EMPLOYMENT",
                columns: new[] { "PARTY_ID_TO", "ROLE_TYPE_ID_TO" });

            migrationBuilder.CreateIndex(
                name: "EMPLMNT_TPTY",
                table: "EMPLOYMENT",
                column: "PARTY_ID_TO");

            migrationBuilder.CreateIndex(
                name: "EMPLOYMENT_TXCRTS",
                table: "EMPLOYMENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EMPLOYMENT_TXSTMP",
                table: "EMPLOYMENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EMPLMNT_APP_APER",
                table: "EMPLOYMENT_APP",
                column: "APPROVER_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "EMPLMNT_APP_JBRQ",
                table: "EMPLOYMENT_APP",
                column: "JOB_REQUISITION_ID");

            migrationBuilder.CreateIndex(
                name: "EMPLMNT_APP_TXCRTS",
                table: "EMPLOYMENT_APP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EMPLMNT_APP_TXSTMP",
                table: "EMPLOYMENT_APP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EMPL_APP_SRC_TYP",
                table: "EMPLOYMENT_APP_SOURCE_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "EMT_APP_SRC_TP_TXP",
                table: "EMPLOYMENT_APP_SOURCE_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EMT_APP_SRC_TP_TXS",
                table: "EMPLOYMENT_APP_SOURCE_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ENTT_ADT_LG_TXCRTS",
                table: "ENTITY_AUDIT_LOG",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ENTT_ADT_LG_TXSTMP",
                table: "ENTITY_AUDIT_LOG",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ENTT_GRP_TXCRTS",
                table: "ENTITY_GROUP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ENTT_GRP_TXSTMP",
                table: "ENTITY_GROUP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ENT_GRP_ENR_TXCRTS",
                table: "ENTITY_GROUP_ENTRY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ENT_GRP_ENR_TXSTMP",
                table: "ENTITY_GROUP_ENTRY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ENTGRP_GRP",
                table: "ENTITY_GROUP_ENTRY",
                column: "ENTITY_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "ENTT_K_STR_TXCRTS",
                table: "ENTITY_KEY_STORE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ENTT_K_STR_TXSTMP",
                table: "ENTITY_KEY_STORE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ENTITY_SYNC_TXCRTS",
                table: "ENTITY_SYNC",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ENTITY_SYNC_TXSTMP",
                table: "ENTITY_SYNC",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ENT_SNC_HSR_TXCRTS",
                table: "ENTITY_SYNC_HISTORY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ENT_SNC_HSR_TXSTMP",
                table: "ENTITY_SYNC_HISTORY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ENTSYNC_HSTSNC",
                table: "ENTITY_SYNC_HISTORY",
                column: "ENTITY_SYNC_ID");

            migrationBuilder.CreateIndex(
                name: "ENT_SNC_INCD_TXCRS",
                table: "ENTITY_SYNC_INCLUDE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ENT_SNC_INCD_TXSTP",
                table: "ENTITY_SYNC_INCLUDE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ENTSYNC_INCSNC",
                table: "ENTITY_SYNC_INCLUDE",
                column: "ENTITY_SYNC_ID");

            migrationBuilder.CreateIndex(
                name: "ENT_SNC_IND_GRP_TP",
                table: "ENTITY_SYNC_INCLUDE_GROUP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ENT_SNC_IND_GRP_TS",
                table: "ENTITY_SYNC_INCLUDE_GROUP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ENTSNCGU_GRP",
                table: "ENTITY_SYNC_INCLUDE_GROUP",
                column: "ENTITY_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "ENTSNCGU_SNC",
                table: "ENTITY_SYNC_INCLUDE_GROUP",
                column: "ENTITY_SYNC_ID");

            migrationBuilder.CreateIndex(
                name: "ENT_SNC_RMV_TXCRTS",
                table: "ENTITY_SYNC_REMOVE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ENT_SNC_RMV_TXSTMP",
                table: "ENTITY_SYNC_REMOVE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ENUM_TO_TYPE",
                table: "ENUMERATION",
                column: "ENUM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ENUMERATION_TXCRTS",
                table: "ENUMERATION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ENUMERATION_TXSTMP",
                table: "ENUMERATION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ENMRTN_TP_TXCRTS",
                table: "ENUMERATION_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ENMRTN_TP_TXSTMP",
                table: "ENUMERATION_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ENUM_TYPE_PARENT",
                table: "ENUMERATION_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FAC_DEF_DUOM",
                table: "FACILITY",
                column: "DEFAULT_DIMENSION_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "FAC_DEF_WUOM",
                table: "FACILITY",
                column: "DEFAULT_WEIGHT_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "FAC_INVITM_TYPE",
                table: "FACILITY",
                column: "DEFAULT_INVENTORY_ITEM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FACILITY_FCTYP",
                table: "FACILITY",
                column: "FACILITY_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FACILITY_GEOPT",
                table: "FACILITY",
                column: "GEO_POINT_ID");

            migrationBuilder.CreateIndex(
                name: "FACILITY_OWNER",
                table: "FACILITY",
                column: "OWNER_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "FACILITY_PARENT",
                table: "FACILITY",
                column: "PARENT_FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "FACILITY_PGRP",
                table: "FACILITY",
                column: "PRIMARY_FACILITY_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "FACILITY_SUOM",
                table: "FACILITY",
                column: "FACILITY_SIZE_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "FACILITY_TXCRTS",
                table: "FACILITY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FACILITY_TXSTMP",
                table: "FACILITY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FCLT_ASC_TP_TXCRTS",
                table: "FACILITY_ASSOC_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FCLT_ASC_TP_TXSTMP",
                table: "FACILITY_ASSOC_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FACILITY_ATTR",
                table: "FACILITY_ATTRIBUTE",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "FCLT_ATTRBT_TXCRTS",
                table: "FACILITY_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FCLT_ATTRBT_TXSTMP",
                table: "FACILITY_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FACILITY_CAL_FAC",
                table: "FACILITY_CALENDAR",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "FACILITY_CAL_TYPE",
                table: "FACILITY_CALENDAR",
                column: "FACILITY_CALENDAR_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FCLT_CLNDR_TXCRTS",
                table: "FACILITY_CALENDAR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FCLT_CLNDR_TXSTMP",
                table: "FACILITY_CALENDAR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FCT_CLNR_TP_TXCRTS",
                table: "FACILITY_CALENDAR_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FCT_CLNR_TP_TXSTMP",
                table: "FACILITY_CALENDAR_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FACILITY_CSH_CSM",
                table: "FACILITY_CARRIER_SHIPMENT",
                columns: new[] { "SHIPMENT_METHOD_TYPE_ID", "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "FACILITY_CSH_FAC",
                table: "FACILITY_CARRIER_SHIPMENT",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "FACILITY_CSH_PTY",
                table: "FACILITY_CARRIER_SHIPMENT",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "FACILITY_CSH_STP",
                table: "FACILITY_CARRIER_SHIPMENT",
                column: "SHIPMENT_METHOD_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FCT_CRR_SHPT_TXCRS",
                table: "FACILITY_CARRIER_SHIPMENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FCT_CRR_SHPT_TXSTP",
                table: "FACILITY_CARRIER_SHIPMENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FACIL_CMECH_CMECH",
                table: "FACILITY_CONTACT_MECH",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "FACIL_CMECH_FACIL",
                table: "FACILITY_CONTACT_MECH",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "FCT_CNTT_MCH_TXCRS",
                table: "FACILITY_CONTACT_MECH",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FCT_CNTT_MCH_TXSTP",
                table: "FACILITY_CONTACT_MECH",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FACIL_CMPRP_CMECH",
                table: "FACILITY_CONTACT_MECH_PURPOSE",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "FACIL_CMPRP_FACIL",
                table: "FACILITY_CONTACT_MECH_PURPOSE",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "FACIL_CMPRP_TYPE",
                table: "FACILITY_CONTACT_MECH_PURPOSE",
                column: "CONTACT_MECH_PURPOSE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FCT_CNT_MCH_PRS_TP",
                table: "FACILITY_CONTACT_MECH_PURPOSE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FCT_CNT_MCH_PRS_TS",
                table: "FACILITY_CONTACT_MECH_PURPOSE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FAC_CNT_CNT",
                table: "FACILITY_CONTENT",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "FAC_CNT_FAC",
                table: "FACILITY_CONTENT",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "FCLT_CNTNT_TXCRTS",
                table: "FACILITY_CONTENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FCLT_CNTNT_TXSTMP",
                table: "FACILITY_CONTENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FACILITY_GP_PGRP",
                table: "FACILITY_GROUP",
                column: "PRIMARY_PARENT_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "FACILITY_GP_TYPE",
                table: "FACILITY_GROUP",
                column: "FACILITY_GROUP_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FCLT_GRP_TXCRTS",
                table: "FACILITY_GROUP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FCLT_GRP_TXSTMP",
                table: "FACILITY_GROUP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FACILITY_MEM_FAC",
                table: "FACILITY_GROUP_MEMBER",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "FACILITY_MEM_FGRP",
                table: "FACILITY_GROUP_MEMBER",
                column: "FACILITY_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "FCT_GRP_MMR_TXCRTS",
                table: "FACILITY_GROUP_MEMBER",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FCT_GRP_MMR_TXSTMP",
                table: "FACILITY_GROUP_MEMBER",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FCLT_GRP_RL_TXCRTS",
                table: "FACILITY_GROUP_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FCLT_GRP_RL_TXSTMP",
                table: "FACILITY_GROUP_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FGROUP_RLE_FGRP",
                table: "FACILITY_GROUP_ROLE",
                column: "FACILITY_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "FGROUP_RLE_PTRLE",
                table: "FACILITY_GROUP_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "FCT_GRP_RLP_TXCRTS",
                table: "FACILITY_GROUP_ROLLUP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FCT_GRP_RLP_TXSTMP",
                table: "FACILITY_GROUP_ROLLUP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FGRP_FRLP_CURRENT",
                table: "FACILITY_GROUP_ROLLUP",
                column: "FACILITY_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "FGRP_FRLP_PARENT",
                table: "FACILITY_GROUP_ROLLUP",
                column: "PARENT_FACILITY_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "FCLT_GRP_TP_TXCRTS",
                table: "FACILITY_GROUP_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FCLT_GRP_TP_TXSTMP",
                table: "FACILITY_GROUP_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FACILITY_LOC_FAC",
                table: "FACILITY_LOCATION",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "FACILITY_LOC_GEOPT",
                table: "FACILITY_LOCATION",
                column: "GEO_POINT_ID");

            migrationBuilder.CreateIndex(
                name: "FACILITY_LOC_TENM",
                table: "FACILITY_LOCATION",
                column: "LOCATION_TYPE_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "FCLT_LCTN_TXCRTS",
                table: "FACILITY_LOCATION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FCLT_LCTN_TXSTMP",
                table: "FACILITY_LOCATION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FACLOCGEOPT_FACLOC",
                table: "FACILITY_LOCATION_GEO_POINT",
                columns: new[] { "FACILITY_ID", "LOCATION_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "FACLOCGEOPT_GEOPT",
                table: "FACILITY_LOCATION_GEO_POINT",
                column: "GEO_POINT_ID");

            migrationBuilder.CreateIndex(
                name: "FCT_LCN_G_PNT_TXCS",
                table: "FACILITY_LOCATION_GEO_POINT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FCT_LCN_G_PNT_TXSP",
                table: "FACILITY_LOCATION_GEO_POINT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FACILITY_PRTY_ROLE",
                table: "FACILITY_PARTY",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "FACILITY_RLE_FACI",
                table: "FACILITY_PARTY",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "FACILITY_RLE_PRT",
                table: "FACILITY_PARTY",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "FACILITY_RLE_ROL",
                table: "FACILITY_PARTY",
                column: "ROLE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FCLT_PRT_TXCRTS",
                table: "FACILITY_PARTY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FCLT_PRT_TXSTMP",
                table: "FACILITY_PARTY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FACILITY_TYPEPAR",
                table: "FACILITY_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FCLT_TP_TXCRTS",
                table: "FACILITY_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FCLT_TP_TXSTMP",
                table: "FACILITY_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FACILITY_TPAT_FT",
                table: "FACILITY_TYPE_ATTR",
                column: "FACILITY_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FCLT_TP_ATR_TXCRTS",
                table: "FACILITY_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FCLT_TP_ATR_TXSTMP",
                table: "FACILITY_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FILEEXT_MMTYP",
                table: "FILE_EXTENSION",
                column: "MIME_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FL_EXTNSN_TXCRTS",
                table: "FILE_EXTENSION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FL_EXTNSN_TXSTMP",
                table: "FILE_EXTENSION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FIN_ACCOUNT_TXCRTS",
                table: "FIN_ACCOUNT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FIN_ACCOUNT_TXSTMP",
                table: "FIN_ACCOUNT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FINACCT_CURUOM",
                table: "FIN_ACCOUNT",
                column: "CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "FINACCT_GLAC",
                table: "FIN_ACCOUNT",
                column: "POST_TO_GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "FINACCT_ORGPTY",
                table: "FIN_ACCOUNT",
                column: "ORGANIZATION_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "FINACCT_OWNPTY",
                table: "FIN_ACCOUNT",
                column: "OWNER_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "FINACCT_PAYMETH",
                table: "FIN_ACCOUNT",
                column: "REPLENISH_PAYMENT_ID");

            migrationBuilder.CreateIndex(
                name: "FINACCT_TYPE",
                table: "FIN_ACCOUNT",
                column: "FIN_ACCOUNT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FINACCT_ATTR",
                table: "FIN_ACCOUNT_ATTRIBUTE",
                column: "FIN_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "FN_ACCT_ATTT_TXCRS",
                table: "FIN_ACCOUNT_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FN_ACCT_ATTT_TXSTP",
                table: "FIN_ACCOUNT_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FINACT_AUTH_FINACT",
                table: "FIN_ACCOUNT_AUTH",
                column: "FIN_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "FN_ACCT_ATH_TXCRTS",
                table: "FIN_ACCOUNT_AUTH",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FN_ACCT_ATH_TXSTMP",
                table: "FIN_ACCOUNT_AUTH",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FIN_ACT_RL_FNACT",
                table: "FIN_ACCOUNT_ROLE",
                column: "FIN_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "FIN_ACT_RL_RTRL",
                table: "FIN_ACCOUNT_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "FN_ACCNT_RL_TXCRTS",
                table: "FIN_ACCOUNT_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FN_ACCNT_RL_TXSTMP",
                table: "FIN_ACCOUNT_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FINACT_STTS_FNA",
                table: "FIN_ACCOUNT_STATUS",
                column: "FIN_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "FINACT_STTS_STI",
                table: "FIN_ACCOUNT_STATUS",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "FINACT_STTS_USER",
                table: "FIN_ACCOUNT_STATUS",
                column: "CHANGE_BY_USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "FN_ACCT_STS_TXCRTS",
                table: "FIN_ACCOUNT_STATUS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FN_ACCT_STS_TXSTMP",
                table: "FIN_ACCOUNT_STATUS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FIN_ACT_REAS_ENUM",
                table: "FIN_ACCOUNT_TRANS",
                column: "REASON_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "FIN_ACT_TX_FNACT",
                table: "FIN_ACCOUNT_TRANS",
                column: "FIN_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "FIN_ACT_TX_GLREC",
                table: "FIN_ACCOUNT_TRANS",
                column: "GL_RECONCILIATION_ID");

            migrationBuilder.CreateIndex(
                name: "FIN_ACT_TX_ODITM",
                table: "FIN_ACCOUNT_TRANS",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "FIN_ACT_TX_PARTY",
                table: "FIN_ACCOUNT_TRANS",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "FIN_ACT_TX_PBPTY",
                table: "FIN_ACCOUNT_TRANS",
                column: "PERFORMED_BY_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "FIN_ACT_TX_PMT",
                table: "FIN_ACCOUNT_TRANS",
                column: "PAYMENT_ID");

            migrationBuilder.CreateIndex(
                name: "FIN_ACT_TX_STI",
                table: "FIN_ACCOUNT_TRANS",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "FINACCT_TX_TYPE",
                table: "FIN_ACCOUNT_TRANS",
                column: "FIN_ACCOUNT_TRANS_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FN_ACCT_TRS_TXCRTS",
                table: "FIN_ACCOUNT_TRANS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FN_ACCT_TRS_TXSTMP",
                table: "FIN_ACCOUNT_TRANS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FINACCT_TX_ATTR",
                table: "FIN_ACCOUNT_TRANS_ATTRIBUTE",
                column: "FIN_ACCOUNT_TRANS_ID");

            migrationBuilder.CreateIndex(
                name: "FN_ACT_TRS_ATT_TXP",
                table: "FIN_ACCOUNT_TRANS_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FN_ACT_TRS_ATT_TXS",
                table: "FIN_ACCOUNT_TRANS_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FINACCT_TX_TYPPAR",
                table: "FIN_ACCOUNT_TRANS_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FN_ACT_TRS_TP_TXCS",
                table: "FIN_ACCOUNT_TRANS_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FN_ACT_TRS_TP_TXSP",
                table: "FIN_ACCOUNT_TRANS_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FINACCT_TX_TYPATR",
                table: "FIN_ACCOUNT_TRANS_TYPE_ATTR",
                column: "FIN_ACCOUNT_TRANS_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FN_TRS_TP_ATR_TP",
                table: "FIN_ACCOUNT_TRANS_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FN_TRS_TP_ATR_TS",
                table: "FIN_ACCOUNT_TRANS_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FINACCT_TYPE_PAR",
                table: "FIN_ACCOUNT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FINACCT_TYPE_RENUM",
                table: "FIN_ACCOUNT_TYPE",
                column: "REPLENISH_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "FN_ACCNT_TP_TXCRTS",
                table: "FIN_ACCOUNT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FN_ACCNT_TP_TXSTMP",
                table: "FIN_ACCOUNT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FINACCT_TYPE_ATTR",
                table: "FIN_ACCOUNT_TYPE_ATTR",
                column: "FIN_ACCOUNT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FN_ACT_TP_ATR_TXCS",
                table: "FIN_ACCOUNT_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FN_ACT_TP_ATR_TXSP",
                table: "FIN_ACCOUNT_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FINACCT_TGA_GLAC",
                table: "FIN_ACCOUNT_TYPE_GL_ACCOUNT",
                column: "GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "FINACCT_TGA_OPTY",
                table: "FIN_ACCOUNT_TYPE_GL_ACCOUNT",
                column: "ORGANIZATION_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "FINACCT_TGA_PMT",
                table: "FIN_ACCOUNT_TYPE_GL_ACCOUNT",
                column: "FIN_ACCOUNT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FN_TP_GL_ACT_TP",
                table: "FIN_ACCOUNT_TYPE_GL_ACCOUNT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FN_TP_GL_ACT_TS",
                table: "FIN_ACCOUNT_TYPE_GL_ACCOUNT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FIXED_ASSET_TXCRTS",
                table: "FIXED_ASSET",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FIXED_ASSET_TXSTMP",
                table: "FIXED_ASSET",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FIXEDAST_CALENDAR",
                table: "FIXED_ASSET",
                column: "CALENDAR_ID");

            migrationBuilder.CreateIndex(
                name: "FIXEDAST_CLSENM",
                table: "FIXED_ASSET",
                column: "CLASS_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "FIXEDAST_FAC",
                table: "FIXED_ASSET",
                column: "LOCATED_AT_FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "FIXEDAST_IOPROD",
                table: "FIXED_ASSET",
                column: "INSTANCE_OF_PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "FIXEDAST_ORDHDR",
                table: "FIXED_ASSET",
                column: "ACQUIRE_ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "FIXEDAST_ORDITM",
                table: "FIXED_ASSET",
                columns: new[] { "ACQUIRE_ORDER_ID", "ACQUIRE_ORDER_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "FIXEDAST_PAR",
                table: "FIXED_ASSET",
                column: "PARENT_FIXED_ASSET_ID");

            migrationBuilder.CreateIndex(
                name: "FIXEDAST_PARTY",
                table: "FIXED_ASSET",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "FIXEDAST_ROLETYP",
                table: "FIXED_ASSET",
                column: "ROLE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FIXEDAST_TYPE",
                table: "FIXED_ASSET",
                column: "FIXED_ASSET_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FIXEDAST_UOM",
                table: "FIXED_ASSET",
                column: "UOM_ID");

            migrationBuilder.CreateIndex(
                name: "FIXEDAST_ATTR",
                table: "FIXED_ASSET_ATTRIBUTE",
                column: "FIXED_ASSET_ID");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_ATTT_TXCRS",
                table: "FIXED_ASSET_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_ATTT_TXSTP",
                table: "FIXED_ASSET_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FIXDAST_DM_CMET",
                table: "FIXED_ASSET_DEP_METHOD",
                column: "DEPRECIATION_CUSTOM_METHOD_ID");

            migrationBuilder.CreateIndex(
                name: "FIXDAST_DM_FXAST",
                table: "FIXED_ASSET_DEP_METHOD",
                column: "FIXED_ASSET_ID");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_DP_MTD_TXP",
                table: "FIXED_ASSET_DEP_METHOD",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_DP_MTD_TXS",
                table: "FIXED_ASSET_DEP_METHOD",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_G_PNT_TXCS",
                table: "FIXED_ASSET_GEO_POINT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_G_PNT_TXSP",
                table: "FIXED_ASSET_GEO_POINT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FXDASTGEOPT_FXDAST",
                table: "FIXED_ASSET_GEO_POINT",
                column: "FIXED_ASSET_ID");

            migrationBuilder.CreateIndex(
                name: "FXDASTGEOPT_GEOPT",
                table: "FIXED_ASSET_GEO_POINT",
                column: "GEO_POINT_ID");

            migrationBuilder.CreateIndex(
                name: "FIXDASTID_FXAST",
                table: "FIXED_ASSET_IDENT",
                column: "FIXED_ASSET_ID");

            migrationBuilder.CreateIndex(
                name: "FIXDASTID_IDTYP",
                table: "FIXED_ASSET_IDENT",
                column: "FIXED_ASSET_IDENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_IDT_TXCRTS",
                table: "FIXED_ASSET_IDENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_IDT_TXSTMP",
                table: "FIXED_ASSET_IDENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_IDT_TP_TXP",
                table: "FIXED_ASSET_IDENT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_IDT_TP_TXS",
                table: "FIXED_ASSET_IDENT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_MNT_TXCRTS",
                table: "FIXED_ASSET_MAINT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_MNT_TXSTMP",
                table: "FIXED_ASSET_MAINT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FXDASTMNT_FXAST",
                table: "FIXED_ASSET_MAINT",
                column: "FIXED_ASSET_ID");

            migrationBuilder.CreateIndex(
                name: "FXDASTMNT_INTUOM",
                table: "FIXED_ASSET_MAINT",
                column: "INTERVAL_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "FXDASTMNT_PDMTTYP",
                table: "FIXED_ASSET_MAINT",
                column: "INTERVAL_METER_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FXDASTMNT_PMNTP",
                table: "FIXED_ASSET_MAINT",
                column: "PRODUCT_MAINT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FXDASTMNT_PURORD",
                table: "FIXED_ASSET_MAINT",
                column: "PURCHASE_ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "FXDASTMNT_SCHWE",
                table: "FIXED_ASSET_MAINT",
                column: "SCHEDULE_WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "FXDASTMNT_SI",
                table: "FIXED_ASSET_MAINT",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_MNT_ORR_TP",
                table: "FIXED_ASSET_MAINT_ORDER",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_MNT_ORR_TS",
                table: "FIXED_ASSET_MAINT_ORDER",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FXDASTMNT_ORD",
                table: "FIXED_ASSET_MAINT_ORDER",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "FXDASTMNT_ORD_FXAS",
                table: "FIXED_ASSET_MAINT_ORDER",
                column: "FIXED_ASSET_ID");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_MTR_TXCRTS",
                table: "FIXED_ASSET_METER",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_MTR_TXSTMP",
                table: "FIXED_ASSET_METER",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FXDASTMTR_FAMNT",
                table: "FIXED_ASSET_METER",
                columns: new[] { "FIXED_ASSET_ID", "MAINT_HIST_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "FXDASTMTR_PMTYP",
                table: "FIXED_ASSET_METER",
                column: "PRODUCT_METER_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FIXDASTPRD_FA",
                table: "FIXED_ASSET_PRODUCT",
                column: "FIXED_ASSET_ID");

            migrationBuilder.CreateIndex(
                name: "FIXDASTPRD_FAPT",
                table: "FIXED_ASSET_PRODUCT",
                column: "FIXED_ASSET_PRODUCT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FIXDASTPRD_PRD",
                table: "FIXED_ASSET_PRODUCT",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "FIXDASTPRD_UOM",
                table: "FIXED_ASSET_PRODUCT",
                column: "QUANTITY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_PRDT_TXCRS",
                table: "FIXED_ASSET_PRODUCT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_PRDT_TXSTP",
                table: "FIXED_ASSET_PRODUCT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_PRT_TP_TXP",
                table: "FIXED_ASSET_PRODUCT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_PRT_TP_TXS",
                table: "FIXED_ASSET_PRODUCT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FIXDASTREG_FXAST",
                table: "FIXED_ASSET_REGISTRATION",
                column: "FIXED_ASSET_ID");

            migrationBuilder.CreateIndex(
                name: "FIXDASTREG_GVAPTY",
                table: "FIXED_ASSET_REGISTRATION",
                column: "GOV_AGENCY_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_RGSTN_TXCS",
                table: "FIXED_ASSET_REGISTRATION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_RGSTN_TXSP",
                table: "FIXED_ASSET_REGISTRATION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FIXASTCO_AMCURR",
                table: "FIXED_ASSET_STD_COST",
                column: "AMOUNT_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "FIXASTCO_FIXAST",
                table: "FIXED_ASSET_STD_COST",
                column: "FIXED_ASSET_ID");

            migrationBuilder.CreateIndex(
                name: "FIXASTCO_TYPCOS",
                table: "FIXED_ASSET_STD_COST",
                column: "FIXED_ASSET_STD_COST_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_STD_CST_TP",
                table: "FIXED_ASSET_STD_COST",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_STD_CST_TS",
                table: "FIXED_ASSET_STD_COST",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FIXASTCO_TYPPAR",
                table: "FIXED_ASSET_STD_COST_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FXD_STD_CST_TP_TP",
                table: "FIXED_ASSET_STD_COST_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FXD_STD_CST_TP_TS",
                table: "FIXED_ASSET_STD_COST_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FIXEDAST_TYPPAR",
                table: "FIXED_ASSET_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FXD_ASST_TP_TXCRTS",
                table: "FIXED_ASSET_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FXD_ASST_TP_TXSTMP",
                table: "FIXED_ASSET_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FIXEDAST_TYPATTR",
                table: "FIXED_ASSET_TYPE_ATTR",
                column: "FIXED_ASSET_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_TP_ATR_TXP",
                table: "FIXED_ASSET_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FXD_AST_TP_ATR_TXS",
                table: "FIXED_ASSET_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FATGL_ACCDGL",
                table: "FIXED_ASSET_TYPE_GL_ACCOUNT",
                column: "ACC_DEP_GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "FATGL_AGL",
                table: "FIXED_ASSET_TYPE_GL_ACCOUNT",
                column: "ASSET_GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "FATGL_DGL",
                table: "FIXED_ASSET_TYPE_GL_ACCOUNT",
                column: "DEP_GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "FATGL_LGL",
                table: "FIXED_ASSET_TYPE_GL_ACCOUNT",
                column: "LOSS_GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "FATGL_OP",
                table: "FIXED_ASSET_TYPE_GL_ACCOUNT",
                column: "ORGANIZATION_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "FATGL_PGL",
                table: "FIXED_ASSET_TYPE_GL_ACCOUNT",
                column: "PROFIT_GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "FXD_TP_GL_ACT_TP",
                table: "FIXED_ASSET_TYPE_GL_ACCOUNT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FXD_TP_GL_ACT_TS",
                table: "FIXED_ASSET_TYPE_GL_ACCOUNT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FTP_ADDRESS_TXCRTS",
                table: "FTP_ADDRESS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FTP_ADDRESS_TXSTMP",
                table: "FTP_ADDRESS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FTP_SRV_CMECH",
                table: "FTP_ADDRESS",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "GEO_TO_TYPE",
                table: "GEO",
                column: "GEO_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "GEO_TXCRTS",
                table: "GEO",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GEO_TXSTMP",
                table: "GEO",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GEO_ASSC_TO_ASSC",
                table: "GEO_ASSOC",
                column: "GEO_ID_TO");

            migrationBuilder.CreateIndex(
                name: "GEO_ASSC_TO_MAIN",
                table: "GEO_ASSOC",
                column: "GEO_ID");

            migrationBuilder.CreateIndex(
                name: "GEO_ASSC_TO_TYPE",
                table: "GEO_ASSOC",
                column: "GEO_ASSOC_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "GEO_ASSOC_TXCRTS",
                table: "GEO_ASSOC",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GEO_ASSOC_TXSTMP",
                table: "GEO_ASSOC",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "G_ASSC_TP_TXCRTS",
                table: "GEO_ASSOC_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "G_ASSC_TP_TXSTMP",
                table: "GEO_ASSOC_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GEO_POINT_TXCRTS",
                table: "GEO_POINT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GEO_POINT_TXSTMP",
                table: "GEO_POINT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GEOPOINT_DTSRC",
                table: "GEO_POINT",
                column: "DATA_SOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "GEOPOINT_TYPE",
                table: "GEO_POINT",
                column: "GEO_POINT_TYPE_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "GPT_ELEV_UOM",
                table: "GEO_POINT",
                column: "ELEVATION_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "GEO_TYPE_PARENT",
                table: "GEO_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "GEO_TYPE_TXCRTS",
                table: "GEO_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GEO_TYPE_TXSTMP",
                table: "GEO_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GIFT_CARD_TXCRTS",
                table: "GIFT_CARD",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GIFT_CARD_TXSTMP",
                table: "GIFT_CARD",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GIFTCARD_CMECH",
                table: "GIFT_CARD",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "GIFTCARD_PADDR",
                table: "GIFT_CARD",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "GIFTCARD_PMNTMETH",
                table: "GIFT_CARD",
                column: "PAYMENT_METHOD_ID");

            migrationBuilder.CreateIndex(
                name: "GC_FILL_ENUM",
                table: "GIFT_CARD_FULFILLMENT",
                column: "TYPE_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "GC_FILL_ODRH",
                table: "GIFT_CARD_FULFILLMENT",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "GC_FILL_ODRI",
                table: "GIFT_CARD_FULFILLMENT",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "GC_FILL_PARTY",
                table: "GIFT_CARD_FULFILLMENT",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "GC_FILL_SURVY",
                table: "GIFT_CARD_FULFILLMENT",
                column: "SURVEY_RESPONSE_ID");

            migrationBuilder.CreateIndex(
                name: "GFT_CRD_FLFLT_TXCS",
                table: "GIFT_CARD_FULFILLMENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GFT_CRD_FLFLT_TXSP",
                table: "GIFT_CARD_FULFILLMENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_ACCOUNT_TXCRTS",
                table: "GL_ACCOUNT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_ACCOUNT_TXSTMP",
                table: "GL_ACCOUNT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GLACCT_CLSS",
                table: "GL_ACCOUNT",
                column: "GL_ACCOUNT_CLASS_ID");

            migrationBuilder.CreateIndex(
                name: "GLACCT_PAR",
                table: "GL_ACCOUNT",
                column: "PARENT_GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "GLACCT_REC",
                table: "GL_ACCOUNT",
                column: "GL_RESOURCE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "GLACCT_TYPE",
                table: "GL_ACCOUNT",
                column: "GL_ACCOUNT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "GLACCT_UNQCD",
                table: "GL_ACCOUNT",
                column: "ACCOUNT_CODE",
                unique: true,
                filter: "[ACCOUNT_CODE] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "GLACCT_XBRLCLS",
                table: "GL_ACCOUNT",
                column: "GL_XBRL_CLASS_ID");

            migrationBuilder.CreateIndex(
                name: "GL_ACCT_CTR_TXCRTS",
                table: "GL_ACCOUNT_CATEGORY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_ACCT_CTR_TXSTMP",
                table: "GL_ACCOUNT_CATEGORY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GLACT_CAT_TP",
                table: "GL_ACCOUNT_CATEGORY",
                column: "GL_ACCOUNT_CATEGORY_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "GL_ACT_CTR_MMR_TXP",
                table: "GL_ACCOUNT_CATEGORY_MEMBER",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_ACT_CTR_MMR_TXS",
                table: "GL_ACCOUNT_CATEGORY_MEMBER",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GLACT_CATMBR_AC",
                table: "GL_ACCOUNT_CATEGORY_MEMBER",
                column: "GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "GLACT_CATMBR_CAT",
                table: "GL_ACCOUNT_CATEGORY_MEMBER",
                column: "GL_ACCOUNT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "GL_ACT_CTR_TP_TXCS",
                table: "GL_ACCOUNT_CATEGORY_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_ACT_CTR_TP_TXSP",
                table: "GL_ACCOUNT_CATEGORY_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_ACCT_CLS_TXCRTS",
                table: "GL_ACCOUNT_CLASS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_ACCT_CLS_TXSTMP",
                table: "GL_ACCOUNT_CLASS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GLACTCLS_PAR",
                table: "GL_ACCOUNT_CLASS",
                column: "PARENT_CLASS_ID");

            migrationBuilder.CreateIndex(
                name: "GL_ACCT_GRP_TXCRTS",
                table: "GL_ACCOUNT_GROUP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_ACCT_GRP_TXSTMP",
                table: "GL_ACCOUNT_GROUP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GLACT_GRP_TP",
                table: "GL_ACCOUNT_GROUP",
                column: "GL_ACCOUNT_GROUP_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "GL_ACT_GRP_MMR_TXP",
                table: "GL_ACCOUNT_GROUP_MEMBER",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_ACT_GRP_MMR_TXS",
                table: "GL_ACCOUNT_GROUP_MEMBER",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GLACT_GPMBR_AC",
                table: "GL_ACCOUNT_GROUP_MEMBER",
                column: "GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "GLACT_GPMBR_GP",
                table: "GL_ACCOUNT_GROUP_MEMBER",
                column: "GL_ACCOUNT_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "GLACT_GPMBR_TP",
                table: "GL_ACCOUNT_GROUP_MEMBER",
                column: "GL_ACCOUNT_GROUP_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "GL_ACT_GRP_TP_TXCS",
                table: "GL_ACCOUNT_GROUP_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_ACT_GRP_TP_TXSP",
                table: "GL_ACCOUNT_GROUP_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_ACCT_HSR_TXCRTS",
                table: "GL_ACCOUNT_HISTORY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_ACCT_HSR_TXSTMP",
                table: "GL_ACCOUNT_HISTORY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GLACCT_HST_CTP",
                table: "GL_ACCOUNT_HISTORY",
                column: "CUSTOM_TIME_PERIOD_ID");

            migrationBuilder.CreateIndex(
                name: "GLACCT_HST_GLA",
                table: "GL_ACCOUNT_HISTORY",
                column: "GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "GLACCT_HST_PARTY",
                table: "GL_ACCOUNT_HISTORY",
                column: "ORGANIZATION_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "GL_ACT_ORGNN_TXCRS",
                table: "GL_ACCOUNT_ORGANIZATION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_ACT_ORGNN_TXSTP",
                table: "GL_ACCOUNT_ORGANIZATION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GLACCT_ORG_GLA",
                table: "GL_ACCOUNT_ORGANIZATION",
                column: "GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "GLACCT_ORG_PARTY",
                table: "GL_ACCOUNT_ORGANIZATION",
                column: "ORGANIZATION_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "GL_ACCNT_RL_TXCRTS",
                table: "GL_ACCOUNT_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_ACCNT_RL_TXSTMP",
                table: "GL_ACCOUNT_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GLACCT_RL_GLA",
                table: "GL_ACCOUNT_ROLE",
                column: "GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "GLACCT_RL_PTRLE",
                table: "GL_ACCOUNT_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "GL_ACCNT_TP_TXCRTS",
                table: "GL_ACCOUNT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_ACCNT_TP_TXSTMP",
                table: "GL_ACCOUNT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GLACTTY_PAR",
                table: "GL_ACCOUNT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "GL_ACT_TP_DFT_TXCS",
                table: "GL_ACCOUNT_TYPE_DEFAULT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_ACT_TP_DFT_TXSP",
                table: "GL_ACCOUNT_TYPE_DEFAULT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GLACCT_TPDF_GLA",
                table: "GL_ACCOUNT_TYPE_DEFAULT",
                column: "GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "GLACCT_TPDF_GLAT",
                table: "GL_ACCOUNT_TYPE_DEFAULT",
                column: "GL_ACCOUNT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "GLACCT_TPDF_OPTY",
                table: "GL_ACCOUNT_TYPE_DEFAULT",
                column: "ORGANIZATION_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "GL_BDGT_XRF_BIT",
                table: "GL_BUDGET_XREF",
                column: "BUDGET_ITEM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "GL_BDGT_XRF_GLA",
                table: "GL_BUDGET_XREF",
                column: "GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "GL_BDGT_XRF_TXCRTS",
                table: "GL_BUDGET_XREF",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_BDGT_XRF_TXSTMP",
                table: "GL_BUDGET_XREF",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_FSCL_TP_TXCRTS",
                table: "GL_FISCAL_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_FSCL_TP_TXSTMP",
                table: "GL_FISCAL_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_JOURNAL_TXCRTS",
                table: "GL_JOURNAL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_JOURNAL_TXSTMP",
                table: "GL_JOURNAL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GLJOURN_PARTY",
                table: "GL_JOURNAL",
                column: "ORGANIZATION_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "GL_RCNCLTN_TXCRTS",
                table: "GL_RECONCILIATION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_RCNCLTN_TXSTMP",
                table: "GL_RECONCILIATION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GLREC_GLACCT",
                table: "GL_RECONCILIATION",
                column: "GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "GLREC_GLPARTY",
                table: "GL_RECONCILIATION",
                column: "ORGANIZATION_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "GLREC_STI",
                table: "GL_RECONCILIATION",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "GL_RCNCN_ENR_TXCRS",
                table: "GL_RECONCILIATION_ENTRY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_RCNCN_ENR_TXSTP",
                table: "GL_RECONCILIATION_ENTRY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_RECENT_ACTTXE",
                table: "GL_RECONCILIATION_ENTRY",
                columns: new[] { "ACCTG_TRANS_ID", "ACCTG_TRANS_ENTRY_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "GL_RECENT_GLREC",
                table: "GL_RECONCILIATION_ENTRY",
                column: "GL_RECONCILIATION_ID");

            migrationBuilder.CreateIndex(
                name: "GL_RSRC_TP_TXCRTS",
                table: "GL_RESOURCE_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_RSRC_TP_TXSTMP",
                table: "GL_RESOURCE_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_XBRL_CLS_TXCRTS",
                table: "GL_XBRL_CLASS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_XBRL_CLS_TXSTMP",
                table: "GL_XBRL_CLASS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GL_XBRL_CLSPAR",
                table: "GL_XBRL_CLASS",
                column: "PARENT_GL_XBRL_CLASS_ID");

            migrationBuilder.CreateIndex(
                name: "GD_IDNTFCTN_TXCRTS",
                table: "GOOD_IDENTIFICATION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GD_IDNTFCTN_TXSTMP",
                table: "GOOD_IDENTIFICATION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GOOD_ID_PRODICT",
                table: "GOOD_IDENTIFICATION",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "GOOD_ID_TYPE",
                table: "GOOD_IDENTIFICATION",
                column: "GOOD_IDENTIFICATION_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "GOOD_ID_VALIDX",
                table: "GOOD_IDENTIFICATION",
                column: "ID_VALUE");

            migrationBuilder.CreateIndex(
                name: "GD_IDNTFN_TP_TXCRS",
                table: "GOOD_IDENTIFICATION_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GD_IDNTFN_TP_TXSTP",
                table: "GOOD_IDENTIFICATION_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "GOOD_ID_TYPE_PAR",
                table: "GOOD_IDENTIFICATION_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "DATA_REC_IMAGE",
                table: "IMAGE_DATA_RESOURCE",
                column: "DATA_RESOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "IMG_DT_RSRC_TXCRTS",
                table: "IMAGE_DATA_RESOURCE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "IMG_DT_RSRC_TXSTMP",
                table: "IMAGE_DATA_RESOURCE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INV_ITEM_CONTAINER",
                table: "INVENTORY_ITEM",
                column: "CONTAINER_ID");

            migrationBuilder.CreateIndex(
                name: "INV_ITEM_CUOM",
                table: "INVENTORY_ITEM",
                column: "CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "INV_ITEM_FACILITY",
                table: "INVENTORY_ITEM",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "INV_ITEM_LOT",
                table: "INVENTORY_ITEM",
                column: "LOT_ID");

            migrationBuilder.CreateIndex(
                name: "INV_ITEM_OWNPARTY",
                table: "INVENTORY_ITEM",
                column: "OWNER_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "INV_ITEM_PARTY",
                table: "INVENTORY_ITEM",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "INV_ITEM_PRODUCT",
                table: "INVENTORY_ITEM",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "INV_ITEM_STTSITM",
                table: "INVENTORY_ITEM",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "INV_ITEM_TYPE",
                table: "INVENTORY_ITEM",
                column: "INVENTORY_ITEM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "INV_ITEM_UOM",
                table: "INVENTORY_ITEM",
                column: "UOM_ID");

            migrationBuilder.CreateIndex(
                name: "INVNTR_ITM_TXCRTS",
                table: "INVENTORY_ITEM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVNTR_ITM_TXSTMP",
                table: "INVENTORY_ITEM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "IYIM_FAST",
                table: "INVENTORY_ITEM",
                column: "FIXED_ASSET_ID");

            migrationBuilder.CreateIndex(
                name: "INV_ITEM_ATTR",
                table: "INVENTORY_ITEM_ATTRIBUTE",
                column: "INVENTORY_ITEM_ID");

            migrationBuilder.CreateIndex(
                name: "INVR_ITM_ATTT_TXCS",
                table: "INVENTORY_ITEM_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVR_ITM_ATTT_TXSP",
                table: "INVENTORY_ITEM_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INV_ITDTL_FAMNT",
                table: "INVENTORY_ITEM_DETAIL",
                columns: new[] { "FIXED_ASSET_ID", "MAINT_HIST_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "INV_ITDTL_INVIT",
                table: "INVENTORY_ITEM_DETAIL",
                column: "INVENTORY_ITEM_ID");

            migrationBuilder.CreateIndex(
                name: "INV_ITDTL_ITMIS",
                table: "INVENTORY_ITEM_DETAIL",
                column: "ITEM_ISSUANCE_ID");

            migrationBuilder.CreateIndex(
                name: "INV_ITDTL_PHINV",
                table: "INVENTORY_ITEM_DETAIL",
                column: "PHYSICAL_INVENTORY_ID");

            migrationBuilder.CreateIndex(
                name: "INV_ITDTL_REAS",
                table: "INVENTORY_ITEM_DETAIL",
                column: "REASON_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "INV_ITDTL_SHRCT",
                table: "INVENTORY_ITEM_DETAIL",
                column: "RECEIPT_ID");

            migrationBuilder.CreateIndex(
                name: "INV_ITDTL_WEFF",
                table: "INVENTORY_ITEM_DETAIL",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "INVR_ITM_DTL_TXCRS",
                table: "INVENTORY_ITEM_DETAIL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVR_ITM_DTL_TXSTP",
                table: "INVENTORY_ITEM_DETAIL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INV_ITLA_TYPE",
                table: "INVENTORY_ITEM_LABEL",
                column: "INVENTORY_ITEM_LABEL_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "INVR_ITM_LBL_TXCRS",
                table: "INVENTORY_ITEM_LABEL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVR_ITM_LBL_TXSTP",
                table: "INVENTORY_ITEM_LABEL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INR_ITM_LBL_APL_TP",
                table: "INVENTORY_ITEM_LABEL_APPL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INR_ITM_LBL_APL_TS",
                table: "INVENTORY_ITEM_LABEL_APPL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INV_ITLAP_ITEM",
                table: "INVENTORY_ITEM_LABEL_APPL",
                column: "INVENTORY_ITEM_ID");

            migrationBuilder.CreateIndex(
                name: "INV_ITLAP_LAB",
                table: "INVENTORY_ITEM_LABEL_APPL",
                column: "INVENTORY_ITEM_LABEL_ID");

            migrationBuilder.CreateIndex(
                name: "INV_ITLAP_TYPE",
                table: "INVENTORY_ITEM_LABEL_APPL",
                column: "INVENTORY_ITEM_LABEL_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "INR_ITM_LBL_TP_TXP",
                table: "INVENTORY_ITEM_LABEL_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INR_ITM_LBL_TP_TXS",
                table: "INVENTORY_ITEM_LABEL_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INV_ITLT_TYPPAR",
                table: "INVENTORY_ITEM_LABEL_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "INV_ITEM_STTS_II",
                table: "INVENTORY_ITEM_STATUS",
                column: "INVENTORY_ITEM_ID");

            migrationBuilder.CreateIndex(
                name: "INV_ITEM_STTS_SI",
                table: "INVENTORY_ITEM_STATUS",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "INV_ITEM_STTS_USER",
                table: "INVENTORY_ITEM_STATUS",
                column: "CHANGE_BY_USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "INVR_ITM_STS_TXCRS",
                table: "INVENTORY_ITEM_STATUS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVR_ITM_STS_TXSTP",
                table: "INVENTORY_ITEM_STATUS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INR_ITM_TMP_RS_TXP",
                table: "INVENTORY_ITEM_TEMP_RES",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INR_ITM_TMP_RS_TXS",
                table: "INVENTORY_ITEM_TEMP_RES",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INV_ITEM_TR_PRDS",
                table: "INVENTORY_ITEM_TEMP_RES",
                column: "PRODUCT_STORE_ID");

            migrationBuilder.CreateIndex(
                name: "INV_ITEM_TR_PROD",
                table: "INVENTORY_ITEM_TEMP_RES",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "INV_ITEM_TYPPAR",
                table: "INVENTORY_ITEM_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "INVNR_ITM_TP_TXCRS",
                table: "INVENTORY_ITEM_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVNR_ITM_TP_TXSTP",
                table: "INVENTORY_ITEM_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INR_ITM_TP_ATR_TXP",
                table: "INVENTORY_ITEM_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INR_ITM_TP_ATR_TXS",
                table: "INVENTORY_ITEM_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INV_ITEM_TYP_ATTR",
                table: "INVENTORY_ITEM_TYPE_ATTR",
                column: "INVENTORY_ITEM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "INV_ITEM_VAR_ITEM",
                table: "INVENTORY_ITEM_VARIANCE",
                column: "INVENTORY_ITEM_ID");

            migrationBuilder.CreateIndex(
                name: "INV_ITEM_VAR_PINV",
                table: "INVENTORY_ITEM_VARIANCE",
                column: "PHYSICAL_INVENTORY_ID");

            migrationBuilder.CreateIndex(
                name: "INV_ITEM_VAR_RSN",
                table: "INVENTORY_ITEM_VARIANCE",
                column: "VARIANCE_REASON_ID");

            migrationBuilder.CreateIndex(
                name: "INVR_ITM_VRC_TXCRS",
                table: "INVENTORY_ITEM_VARIANCE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVR_ITM_VRC_TXSTP",
                table: "INVENTORY_ITEM_VARIANCE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INV_XFER_CONT",
                table: "INVENTORY_TRANSFER",
                column: "CONTAINER_ID");

            migrationBuilder.CreateIndex(
                name: "INV_XFER_FAC",
                table: "INVENTORY_TRANSFER",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "INV_XFER_ISSU",
                table: "INVENTORY_TRANSFER",
                column: "ITEM_ISSUANCE_ID");

            migrationBuilder.CreateIndex(
                name: "INV_XFER_ITEM",
                table: "INVENTORY_TRANSFER",
                column: "INVENTORY_ITEM_ID");

            migrationBuilder.CreateIndex(
                name: "INV_XFER_STTS",
                table: "INVENTORY_TRANSFER",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "INV_XFER_TCNT",
                table: "INVENTORY_TRANSFER",
                column: "CONTAINER_ID_TO");

            migrationBuilder.CreateIndex(
                name: "INV_XFER_TFAC",
                table: "INVENTORY_TRANSFER",
                column: "FACILITY_ID_TO");

            migrationBuilder.CreateIndex(
                name: "INVNR_TRNSR_TXCRTS",
                table: "INVENTORY_TRANSFER",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVNR_TRNSR_TXSTMP",
                table: "INVENTORY_TRANSFER",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVOICE_BILLACCT",
                table: "INVOICE",
                column: "BILLING_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "INVOICE_CMECH",
                table: "INVOICE",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "INVOICE_CUOM",
                table: "INVOICE",
                column: "CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "INVOICE_INVTYP",
                table: "INVOICE",
                column: "INVOICE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "INVOICE_PARTY",
                table: "INVOICE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "INVOICE_PARTY_FRM",
                table: "INVOICE",
                column: "PARTY_ID_FROM");

            migrationBuilder.CreateIndex(
                name: "INVOICE_RECINFO",
                table: "INVOICE",
                column: "RECURRENCE_INFO_ID");

            migrationBuilder.CreateIndex(
                name: "INVOICE_ROLETYP",
                table: "INVOICE",
                column: "ROLE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "INVOICE_STTSITM",
                table: "INVOICE",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "INVOICE_TXCRTS",
                table: "INVOICE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVOICE_TXSTMP",
                table: "INVOICE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVC_ATTRBT_TXCRTS",
                table: "INVOICE_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVC_ATTRBT_TXSTMP",
                table: "INVOICE_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVOICE_ATTR",
                table: "INVOICE_ATTRIBUTE",
                column: "INVOICE_ID");

            migrationBuilder.CreateIndex(
                name: "INC_CNTT_MCH_TXCRS",
                table: "INVOICE_CONTACT_MECH",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INC_CNTT_MCH_TXSTP",
                table: "INVOICE_CONTACT_MECH",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVOICE_CMECH_CM",
                table: "INVOICE_CONTACT_MECH",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "INVOICE_CMECH_CMPT",
                table: "INVOICE_CONTACT_MECH",
                column: "CONTACT_MECH_PURPOSE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "INVOICE_CMECH_HDR",
                table: "INVOICE_CONTACT_MECH",
                column: "INVOICE_ID");

            migrationBuilder.CreateIndex(
                name: "INV_CNT_CNT",
                table: "INVOICE_CONTENT",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "INV_CNT_PROD",
                table: "INVOICE_CONTENT",
                column: "INVOICE_ID");

            migrationBuilder.CreateIndex(
                name: "INV_CNT_TYPE",
                table: "INVOICE_CONTENT",
                column: "INVOICE_CONTENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "INVC_CNTNT_TXCRTS",
                table: "INVOICE_CONTENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVC_CNTNT_TXSTMP",
                table: "INVOICE_CONTENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INC_CNTT_TP_TXCRTS",
                table: "INVOICE_CONTENT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INC_CNTT_TP_TXSTMP",
                table: "INVOICE_CONTENT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVCT_TYP_PARENT",
                table: "INVOICE_CONTENT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "INVC_ITM_TXCRTS",
                table: "INVOICE_ITEM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVC_ITM_TXSTMP",
                table: "INVOICE_ITEM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVCE_ITM_INVCE",
                table: "INVOICE_ITEM",
                column: "INVOICE_ID");

            migrationBuilder.CreateIndex(
                name: "INVCE_ITM_INVITM",
                table: "INVOICE_ITEM",
                column: "INVENTORY_ITEM_ID");

            migrationBuilder.CreateIndex(
                name: "INVCE_ITM_ORGLA",
                table: "INVOICE_ITEM",
                column: "OVERRIDE_GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "INVCE_ITM_OVRPTY",
                table: "INVOICE_ITEM",
                column: "OVERRIDE_ORG_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "INVCE_ITM_PINVIT",
                table: "INVOICE_ITEM",
                columns: new[] { "PARENT_INVOICE_ID", "PARENT_INVOICE_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "INVCE_ITM_PRDFT",
                table: "INVOICE_ITEM",
                column: "PRODUCT_FEATURE_ID");

            migrationBuilder.CreateIndex(
                name: "INVCE_ITM_PROD",
                table: "INVOICE_ITEM",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "INVCE_ITM_SLSOPP",
                table: "INVOICE_ITEM",
                column: "SALES_OPPORTUNITY_ID");

            migrationBuilder.CreateIndex(
                name: "INVCE_ITM_TAXGEO",
                table: "INVOICE_ITEM",
                column: "TAX_AUTH_GEO_ID");

            migrationBuilder.CreateIndex(
                name: "INVCE_ITM_TAXPTY",
                table: "INVOICE_ITEM",
                column: "TAX_AUTH_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "INVCE_ITM_UOM",
                table: "INVOICE_ITEM",
                column: "UOM_ID");

            migrationBuilder.CreateIndex(
                name: "INVOICE_ITM_TARP",
                table: "INVOICE_ITEM",
                column: "TAX_AUTHORITY_RATE_SEQ_ID");

            migrationBuilder.CreateIndex(
                name: "INVOICE_ITMITYP",
                table: "INVOICE_ITEM",
                column: "INVOICE_ITEM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "INC_ITM_ASC_TXCRTS",
                table: "INVOICE_ITEM_ASSOC",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INC_ITM_ASC_TXSTMP",
                table: "INVOICE_ITEM_ASSOC",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INITMASC_FIITM",
                table: "INVOICE_ITEM_ASSOC",
                columns: new[] { "INVOICE_ID_FROM", "INVOICE_ITEM_SEQ_ID_FROM" });

            migrationBuilder.CreateIndex(
                name: "INITMASC_TIITM",
                table: "INVOICE_ITEM_ASSOC",
                columns: new[] { "INVOICE_ID_TO", "INVOICE_ITEM_SEQ_ID_TO" });

            migrationBuilder.CreateIndex(
                name: "INITMASCTYP_IIASC",
                table: "INVOICE_ITEM_ASSOC",
                column: "INVOICE_ITEM_ASSOC_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "INC_ITM_ASC_TP_TXP",
                table: "INVOICE_ITEM_ASSOC_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INC_ITM_ASC_TP_TXS",
                table: "INVOICE_ITEM_ASSOC_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INITMASCTYP_PRNT",
                table: "INVOICE_ITEM_ASSOC_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "INC_ITM_ATTT_TXCRS",
                table: "INVOICE_ITEM_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INC_ITM_ATTT_TXSTP",
                table: "INVOICE_ITEM_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVOICE_IMAT_ITM",
                table: "INVOICE_ITEM_ATTRIBUTE",
                columns: new[] { "INVOICE_ID", "INVOICE_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "INVC_ITM_TP_TXCRTS",
                table: "INVOICE_ITEM_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVC_ITM_TP_TXSTMP",
                table: "INVOICE_ITEM_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVOICE_ITEM_TPAR",
                table: "INVOICE_ITEM_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "INVOICE_ITM_DGLAC",
                table: "INVOICE_ITEM_TYPE",
                column: "DEFAULT_GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "INC_ITM_TP_ATR_TXP",
                table: "INVOICE_ITEM_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INC_ITM_TP_ATR_TXS",
                table: "INVOICE_ITEM_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVOICE_ITEM_TATR",
                table: "INVOICE_ITEM_TYPE_ATTR",
                column: "INVOICE_ITEM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "INC_TP_GL_ACT_TP",
                table: "INVOICE_ITEM_TYPE_GL_ACCOUNT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INC_TP_GL_ACT_TS",
                table: "INVOICE_ITEM_TYPE_GL_ACCOUNT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVOICE_ITGA_GLAC",
                table: "INVOICE_ITEM_TYPE_GL_ACCOUNT",
                column: "GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "INVOICE_ITGA_IIT",
                table: "INVOICE_ITEM_TYPE_GL_ACCOUNT",
                column: "INVOICE_ITEM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "INVOICE_ITGA_OPTY",
                table: "INVOICE_ITEM_TYPE_GL_ACCOUNT",
                column: "ORGANIZATION_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "INC_ITM_TP_MP_TXCS",
                table: "INVOICE_ITEM_TYPE_MAP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INC_ITM_TP_MP_TXSP",
                table: "INVOICE_ITEM_TYPE_MAP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVITMMAP_INVTYP",
                table: "INVOICE_ITEM_TYPE_MAP",
                column: "INVOICE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "INVOICE_ITEM_MAP",
                table: "INVOICE_ITEM_TYPE_MAP",
                column: "INVOICE_ITEM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "INVC_NT_TXCRTS",
                table: "INVOICE_NOTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVC_NT_TXSTMP",
                table: "INVOICE_NOTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVOICE_NOTE_INV",
                table: "INVOICE_NOTE",
                column: "INVOICE_ID");

            migrationBuilder.CreateIndex(
                name: "INVOICE_NOTE_NOTE",
                table: "INVOICE_NOTE",
                column: "NOTE_ID");

            migrationBuilder.CreateIndex(
                name: "INVC_RL_TXCRTS",
                table: "INVOICE_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVC_RL_TXSTMP",
                table: "INVOICE_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVCE_RLE_INVCE",
                table: "INVOICE_ROLE",
                column: "INVOICE_ID");

            migrationBuilder.CreateIndex(
                name: "INVCE_RLE_PARTY",
                table: "INVOICE_ROLE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "INVCE_RLE_PTRL",
                table: "INVOICE_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "INV_STTS_USRLGN",
                table: "INVOICE_STATUS",
                column: "CHANGE_BY_USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "INVC_STTS_TXCRTS",
                table: "INVOICE_STATUS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVC_STTS_TXSTMP",
                table: "INVOICE_STATUS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVCE_STS_INVCE",
                table: "INVOICE_STATUS",
                column: "INVOICE_ID");

            migrationBuilder.CreateIndex(
                name: "INVCE_STS_STSITM",
                table: "INVOICE_STATUS",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "INVC_TRM_TXCRTS",
                table: "INVOICE_TERM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVC_TRM_TXSTMP",
                table: "INVOICE_TERM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVCE_TRM_INVCE",
                table: "INVOICE_TERM",
                column: "INVOICE_ID");

            migrationBuilder.CreateIndex(
                name: "INVCE_TRM_TRM",
                table: "INVOICE_TERM",
                column: "TERM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "INC_TRM_ATTT_TXCRS",
                table: "INVOICE_TERM_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INC_TRM_ATTT_TXSTP",
                table: "INVOICE_TERM_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVOICE_TRM_ATTR",
                table: "INVOICE_TERM_ATTRIBUTE",
                column: "INVOICE_TERM_ID");

            migrationBuilder.CreateIndex(
                name: "INVC_TP_TXCRTS",
                table: "INVOICE_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVC_TP_TXSTMP",
                table: "INVOICE_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVOICE_TYPE_PAR",
                table: "INVOICE_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "INVC_TP_ATR_TXCRTS",
                table: "INVOICE_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVC_TP_ATR_TXSTMP",
                table: "INVOICE_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "INVOICE_TPAT_TYP",
                table: "INVOICE_TYPE_ATTR",
                column: "INVOICE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ITEM_ISS_FAMNT",
                table: "ITEM_ISSUANCE",
                columns: new[] { "FIXED_ASSET_ID", "MAINT_HIST_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "ITEM_ISS_IBUL",
                table: "ITEM_ISSUANCE",
                column: "ISSUED_BY_USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "ITEM_ISS_INVITM",
                table: "ITEM_ISSUANCE",
                column: "INVENTORY_ITEM_ID");

            migrationBuilder.CreateIndex(
                name: "ITEM_ISS_ORITM",
                table: "ITEM_ISSUANCE",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "ITEM_ISS_SHITM",
                table: "ITEM_ISSUANCE",
                columns: new[] { "SHIPMENT_ID", "SHIPMENT_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "ITM_ISSNC_TXCRTS",
                table: "ITEM_ISSUANCE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ITM_ISSNC_TXSTMP",
                table: "ITEM_ISSUANCE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ITEM_ISSRL_ITMIS",
                table: "ITEM_ISSUANCE_ROLE",
                column: "ITEM_ISSUANCE_ID");

            migrationBuilder.CreateIndex(
                name: "ITEM_ISSRL_PTRL",
                table: "ITEM_ISSUANCE_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "ITEM_ISSRL_PTY",
                table: "ITEM_ISSUANCE_ROLE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "ITM_ISSC_RL_TXCRTS",
                table: "ITEM_ISSUANCE_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ITM_ISSC_RL_TXSTMP",
                table: "ITEM_ISSUANCE_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "JV_RSRC_TXCRTS",
                table: "JAVA_RESOURCE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "JV_RSRC_TXSTMP",
                table: "JAVA_RESOURCE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "JB_INTRVW_TXCRTS",
                table: "JOB_INTERVIEW",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "JB_INTRVW_TXSTMP",
                table: "JOB_INTERVIEW",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "JOB_INTW_ENUM",
                table: "JOB_INTERVIEW",
                column: "GRADE_SECURED_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "JOB_INTW_IEPR",
                table: "JOB_INTERVIEW",
                column: "JOB_INTERVIEWEE_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "JOB_INTW_INTYP",
                table: "JOB_INTERVIEW",
                column: "JOB_INTERVIEW_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "JOB_INTW_IRPR",
                table: "JOB_INTERVIEW",
                column: "JOB_INTERVIEWER_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "JOB_INTW_JBREQ",
                table: "JOB_INTERVIEW",
                column: "JOB_REQUISITION_ID");

            migrationBuilder.CreateIndex(
                name: "JB_INTRW_TP_TXCRTS",
                table: "JOB_INTERVIEW_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "JB_INTRW_TP_TXSTMP",
                table: "JOB_INTERVIEW_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "JB_MNGR_LCK_TXCRTS",
                table: "JOB_MANAGER_LOCK",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "JB_MNGR_LCK_TXSTMP",
                table: "JOB_MANAGER_LOCK",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "JOBLK_ENUM_REAS",
                table: "JOB_MANAGER_LOCK",
                column: "REASON_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "JB_RQSTN_TXCRTS",
                table: "JOB_REQUISITION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "JB_RQSTN_TXSTMP",
                table: "JOB_REQUISITION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "JOB_REQ_ENUMEXM",
                table: "JOB_REQUISITION",
                column: "EXAM_TYPE_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "JOB_REQ_ENUMJBP",
                table: "JOB_REQUISITION",
                column: "JOB_POSTING_TYPE_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "JOB_REQ_SKTYP",
                table: "JOB_REQUISITION",
                column: "SKILL_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "JOB_SANDBOX_TXCRTS",
                table: "JOB_SANDBOX",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "JOB_SANDBOX_TXSTMP",
                table: "JOB_SANDBOX",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "JOB_SNDBX_AUSRLGN",
                table: "JOB_SANDBOX",
                column: "AUTH_USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "JOB_SNDBX_RECINFO",
                table: "JOB_SANDBOX",
                column: "RECURRENCE_INFO_ID");

            migrationBuilder.CreateIndex(
                name: "JOB_SNDBX_RNTMDTA",
                table: "JOB_SANDBOX",
                column: "RUNTIME_DATA_ID");

            migrationBuilder.CreateIndex(
                name: "JOB_SNDBX_RUNSTAT",
                table: "JOB_SANDBOX",
                columns: new[] { "RUN_BY_INSTANCE_ID", "STATUS_ID" });

            migrationBuilder.CreateIndex(
                name: "JOB_SNDBX_STTS",
                table: "JOB_SANDBOX",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "JOB_SNDBX_TEMPEXPR",
                table: "JOB_SANDBOX",
                column: "TEMP_EXPR_ID");

            migrationBuilder.CreateIndex(
                name: "JOB_SNDBX_USRLGN",
                table: "JOB_SANDBOX",
                column: "RUN_AS_USER");

            migrationBuilder.CreateIndex(
                name: "KW_THRS_RLENM",
                table: "KEYWORD_THESAURUS",
                column: "RELATIONSHIP_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "KWRD_THSRS_TXCRTS",
                table: "KEYWORD_THESAURUS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "KWRD_THSRS_TXSTMP",
                table: "KEYWORD_THESAURUS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "LOT_TXCRTS",
                table: "LOT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "LOT_TXSTMP",
                table: "LOT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "MARKET_INT_PCAT",
                table: "MARKET_INTEREST",
                column: "PRODUCT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "MARKET_INT_PCGRP",
                table: "MARKET_INTEREST",
                column: "PARTY_CLASSIFICATION_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "MRKT_INTRST_TXCRTS",
                table: "MARKET_INTEREST",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "MRKT_INTRST_TXSTMP",
                table: "MARKET_INTEREST",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "MKTGCPN_CUOM",
                table: "MARKETING_CAMPAIGN",
                column: "CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "MKTGCPN_PRNT",
                table: "MARKETING_CAMPAIGN",
                column: "PARENT_CAMPAIGN_ID");

            migrationBuilder.CreateIndex(
                name: "MKTGCPN_STS",
                table: "MARKETING_CAMPAIGN",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "MRKTNG_CMPN_TXCRTS",
                table: "MARKETING_CAMPAIGN",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "MRKTNG_CMPN_TXSTMP",
                table: "MARKETING_CAMPAIGN",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "MKTGCPN_NOTE_CMPN",
                table: "MARKETING_CAMPAIGN_NOTE",
                column: "MARKETING_CAMPAIGN_ID");

            migrationBuilder.CreateIndex(
                name: "MKTGCPN_NOTE_NOTE",
                table: "MARKETING_CAMPAIGN_NOTE",
                column: "NOTE_ID");

            migrationBuilder.CreateIndex(
                name: "MRKTG_CMN_NT_TXCRS",
                table: "MARKETING_CAMPAIGN_NOTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "MRKTG_CMN_NT_TXSTP",
                table: "MARKETING_CAMPAIGN_NOTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "MKTGCPN_PRICE_MC",
                table: "MARKETING_CAMPAIGN_PRICE",
                column: "MARKETING_CAMPAIGN_ID");

            migrationBuilder.CreateIndex(
                name: "MKTGCPN_PRICE_PP",
                table: "MARKETING_CAMPAIGN_PRICE",
                column: "PRODUCT_PRICE_RULE_ID");

            migrationBuilder.CreateIndex(
                name: "MRKG_CMN_PRC_TXCRS",
                table: "MARKETING_CAMPAIGN_PRICE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "MRKG_CMN_PRC_TXSTP",
                table: "MARKETING_CAMPAIGN_PRICE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "MKTGCPN_PROMO_MC",
                table: "MARKETING_CAMPAIGN_PROMO",
                column: "MARKETING_CAMPAIGN_ID");

            migrationBuilder.CreateIndex(
                name: "MKTGCPN_PROMO_PP",
                table: "MARKETING_CAMPAIGN_PROMO",
                column: "PRODUCT_PROMO_ID");

            migrationBuilder.CreateIndex(
                name: "MRKG_CMN_PRM_TXCRS",
                table: "MARKETING_CAMPAIGN_PROMO",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "MRKG_CMN_PRM_TXSTP",
                table: "MARKETING_CAMPAIGN_PROMO",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "MKTGCPN_ROLE_MC",
                table: "MARKETING_CAMPAIGN_ROLE",
                column: "MARKETING_CAMPAIGN_ID");

            migrationBuilder.CreateIndex(
                name: "MKTGCPN_ROLE_PR",
                table: "MARKETING_CAMPAIGN_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "MRKTG_CMN_RL_TXCRS",
                table: "MARKETING_CAMPAIGN_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "MRKTG_CMN_RL_TXSTP",
                table: "MARKETING_CAMPAIGN_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "MT_DT_PRDCT_TXCRTS",
                table: "META_DATA_PREDICATE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "MT_DT_PRDCT_TXSTMP",
                table: "META_DATA_PREDICATE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "MIME_TYPE_TXCRTS",
                table: "MIME_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "MIME_TYPE_TXSTMP",
                table: "MIME_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "MIMETYPE_TPL_MT",
                table: "MIME_TYPE_HTML_TEMPLATE",
                column: "MIME_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "MM_TP_HTL_TMT_TXCS",
                table: "MIME_TYPE_HTML_TEMPLATE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "MM_TP_HTL_TMT_TXSP",
                table: "MIME_TYPE_HTML_TEMPLATE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "MRP_EVENT_TXCRTS",
                table: "MRP_EVENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "MRP_EVENT_TXSTMP",
                table: "MRP_EVENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "MRPEV_FAC",
                table: "MRP_EVENT",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "MRPEV_PROD",
                table: "MRP_EVENT",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "MRPEV_TYP",
                table: "MRP_EVENT",
                column: "MRP_EVENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "MRP_EVNT_TP_TXCRTS",
                table: "MRP_EVENT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "MRP_EVNT_TP_TXSTMP",
                table: "MRP_EVENT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "NEED_TYPE_TXCRTS",
                table: "NEED_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "NEED_TYPE_TXSTMP",
                table: "NEED_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "NOTE_DATA_PTY",
                table: "NOTE_DATA",
                column: "NOTE_PARTY");

            migrationBuilder.CreateIndex(
                name: "NOTE_DATA_TXCRTS",
                table: "NOTE_DATA",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "NOTE_DATA_TXSTMP",
                table: "NOTE_DATA",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "systemInfo",
                table: "NOTE_DATA",
                column: "NOTE_NAME");

            migrationBuilder.CreateIndex(
                name: "ORDER_ADJ_OGLA",
                table: "ORDER_ADJUSTMENT",
                column: "OVERRIDE_GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ADJ_OHEAD",
                table: "ORDER_ADJUSTMENT",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ADJ_PRGEO",
                table: "ORDER_ADJUSTMENT",
                column: "PRIMARY_GEO_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ADJ_PROMO",
                table: "ORDER_ADJUSTMENT",
                column: "PRODUCT_PROMO_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ADJ_SCGEO",
                table: "ORDER_ADJUSTMENT",
                column: "SECONDARY_GEO_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ADJ_TARP",
                table: "ORDER_ADJUSTMENT",
                column: "TAX_AUTHORITY_RATE_SEQ_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ADJ_TXA",
                table: "ORDER_ADJUSTMENT",
                columns: new[] { "TAX_AUTH_GEO_ID", "TAX_AUTH_PARTY_ID" });

            migrationBuilder.CreateIndex(
                name: "ORDER_ADJ_TYPE",
                table: "ORDER_ADJUSTMENT",
                column: "ORDER_ADJUSTMENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ADJ_USERL",
                table: "ORDER_ADJUSTMENT",
                column: "CREATED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "ORR_ADJSTMT_TXCRTS",
                table: "ORDER_ADJUSTMENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_ADJSTMT_TXSTMP",
                table: "ORDER_ADJUSTMENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_ADJ_ATTR",
                table: "ORDER_ADJUSTMENT_ATTRIBUTE",
                column: "ORDER_ADJUSTMENT_ID");

            migrationBuilder.CreateIndex(
                name: "ORR_ADJST_ATT_TXCS",
                table: "ORDER_ADJUSTMENT_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_ADJST_ATT_TXSP",
                table: "ORDER_ADJUSTMENT_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_ADJBLNG_IITM",
                table: "ORDER_ADJUSTMENT_BILLING",
                columns: new[] { "INVOICE_ID", "INVOICE_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "ORDER_ADJBLNG_OA",
                table: "ORDER_ADJUSTMENT_BILLING",
                column: "ORDER_ADJUSTMENT_ID");

            migrationBuilder.CreateIndex(
                name: "ORR_ADJST_BLG_TXCS",
                table: "ORDER_ADJUSTMENT_BILLING",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_ADJST_BLG_TXSP",
                table: "ORDER_ADJUSTMENT_BILLING",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_ADJ_TYPPAR",
                table: "ORDER_ADJUSTMENT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ORR_ADJSTT_TP_TXCS",
                table: "ORDER_ADJUSTMENT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_ADJSTT_TP_TXSP",
                table: "ORDER_ADJUSTMENT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_ADJ_TYPATTR",
                table: "ORDER_ADJUSTMENT_TYPE_ATTR",
                column: "ORDER_ADJUSTMENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ORR_ADJT_TP_ATR_TP",
                table: "ORDER_ADJUSTMENT_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_ADJT_TP_ATR_TS",
                table: "ORDER_ADJUSTMENT_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_ATTR_HDR",
                table: "ORDER_ATTRIBUTE",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "ORDR_ATTRBT_TXCRTS",
                table: "ORDER_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDR_ATTRBT_TXSTMP",
                table: "ORDER_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_BKL_TYPE",
                table: "ORDER_BLACKLIST",
                column: "ORDER_BLACKLIST_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ORDR_BLCKLT_TXCRTS",
                table: "ORDER_BLACKLIST",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDR_BLCKLT_TXSTMP",
                table: "ORDER_BLACKLIST",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_BLCKT_TP_TXCRS",
                table: "ORDER_BLACKLIST_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_BLCKT_TP_TXSTP",
                table: "ORDER_BLACKLIST_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_CMECH_CM",
                table: "ORDER_CONTACT_MECH",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_CMECH_CMPT",
                table: "ORDER_CONTACT_MECH",
                column: "CONTACT_MECH_PURPOSE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_CMECH_HDR",
                table: "ORDER_CONTACT_MECH",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "ORR_CNTT_MCH_TXCRS",
                table: "ORDER_CONTACT_MECH",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_CNTT_MCH_TXSTP",
                table: "ORDER_CONTACT_MECH",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORD_CNT_CNT",
                table: "ORDER_CONTENT",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "ORD_CNT_PROD",
                table: "ORDER_CONTENT",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "ORD_CNT_TYPE",
                table: "ORDER_CONTENT",
                column: "ORDER_CONTENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ORDR_CNTNT_TXCRTS",
                table: "ORDER_CONTENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDR_CNTNT_TXSTMP",
                table: "ORDER_CONTENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDCT_TYP_PARENT",
                table: "ORDER_CONTENT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ORR_CNTT_TP_TXCRTS",
                table: "ORDER_CONTENT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_CNTT_TP_TXSTMP",
                table: "ORDER_CONTENT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_DELSCH_OHDR",
                table: "ORDER_DELIVERY_SCHEDULE",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_DELSCH_STTS",
                table: "ORDER_DELIVERY_SCHEDULE",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_DELSCH_TCUOM",
                table: "ORDER_DELIVERY_SCHEDULE",
                column: "TOTAL_CUBIC_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_DELSCH_TWUOM",
                table: "ORDER_DELIVERY_SCHEDULE",
                column: "TOTAL_WEIGHT_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "ORR_DLR_SCHL_TXCRS",
                table: "ORDER_DELIVERY_SCHEDULE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_DLR_SCHL_TXSTP",
                table: "ORDER_DELIVERY_SCHEDULE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_DNY_TYPE",
                table: "ORDER_DENYLIST",
                column: "ORDER_DENYLIST_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ORDR_DNLST_TXCRTS",
                table: "ORDER_DENYLIST",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDR_DNLST_TXSTMP",
                table: "ORDER_DENYLIST",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_DNLT_TP_TXCRTS",
                table: "ORDER_DENYLIST_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_DNLT_TP_TXSTMP",
                table: "ORDER_DENYLIST_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "IX_ORDER_HEADER_VEHICLE_ID",
                table: "ORDER_HEADER",
                column: "VEHICLE_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_HDR_AOSHLST",
                table: "ORDER_HEADER",
                column: "AUTO_ORDER_SHOPPING_LIST_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_HDR_BACCT",
                table: "ORDER_HEADER",
                column: "BILLING_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_HDR_CBUL",
                table: "ORDER_HEADER",
                column: "CREATED_BY");

            migrationBuilder.CreateIndex(
                name: "ORDER_HDR_CUOM",
                table: "ORDER_HEADER",
                column: "CURRENCY_UOM");

            migrationBuilder.CreateIndex(
                name: "ORDER_HDR_OFAC",
                table: "ORDER_HEADER",
                column: "ORIGIN_FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_HDR_PDSTR",
                table: "ORDER_HEADER",
                column: "PRODUCT_STORE_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_HDR_SCENUM",
                table: "ORDER_HEADER",
                column: "SALES_CHANNEL_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_HDR_STTS",
                table: "ORDER_HEADER",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_HDR_SYST",
                table: "ORDER_HEADER",
                column: "SYNC_STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_HDR_TYPE",
                table: "ORDER_HEADER",
                column: "ORDER_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_HDR_WS",
                table: "ORDER_HEADER",
                column: "WEB_SITE_ID");

            migrationBuilder.CreateIndex(
                name: "ORDEREXT_ID_IDX",
                table: "ORDER_HEADER",
                column: "EXTERNAL_ID");

            migrationBuilder.CreateIndex(
                name: "ORDR_HDR_TXCRTS",
                table: "ORDER_HEADER",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDR_HDR_TXSTMP",
                table: "ORDER_HEADER",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_HDRNT_HDR",
                table: "ORDER_HEADER_NOTE",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_HDRNT_NOTE",
                table: "ORDER_HEADER_NOTE",
                column: "NOTE_ID");

            migrationBuilder.CreateIndex(
                name: "ORDR_HDR_NT_TXCRTS",
                table: "ORDER_HEADER_NOTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDR_HDR_NT_TXSTMP",
                table: "ORDER_HEADER_NOTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDERHDWE_OH",
                table: "ORDER_HEADER_WORK_EFFORT",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "ORDERHDWE_WEFF",
                table: "ORDER_HEADER_WORK_EFFORT",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "ORR_HDR_WRK_EFT_TP",
                table: "ORDER_HEADER_WORK_EFFORT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_HDR_WRK_EFT_TS",
                table: "ORDER_HEADER_WORK_EFFORT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITEM_DCUL",
                table: "ORDER_ITEM",
                column: "DONT_CANCEL_SET_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITEM_FMINV",
                table: "ORDER_ITEM",
                column: "FROM_INVENTORY_ITEM_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITEM_HDR",
                table: "ORDER_ITEM",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITEM_ITGRP",
                table: "ORDER_ITEM",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_GROUP_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "ORDER_ITEM_OGLA",
                table: "ORDER_ITEM",
                column: "OVERRIDE_GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITEM_ORTYP",
                table: "ORDER_ITEM",
                column: "ORDER_ITEM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITEM_PRODUCT",
                table: "ORDER_ITEM",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITEM_QUIT",
                table: "ORDER_ITEM",
                columns: new[] { "QUOTE_ID", "QUOTE_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "ORDER_ITEM_RFUOM",
                table: "ORDER_ITEM",
                column: "RECURRING_FREQ_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITEM_SLSOPP",
                table: "ORDER_ITEM",
                column: "SALES_OPPORTUNITY_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITEM_STTS",
                table: "ORDER_ITEM",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITEM_SYST",
                table: "ORDER_ITEM",
                column: "SYNC_STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITEM_TXCRTS",
                table: "ORDER_ITEM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITEM_TXSTMP",
                table: "ORDER_ITEM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITEM_USRLGN",
                table: "ORDER_ITEM",
                column: "CHANGE_BY_USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "ORDITMEXT_ID_IDX",
                table: "ORDER_ITEM",
                column: "EXTERNAL_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITASS_FRHD",
                table: "ORDER_ITEM_ASSOC",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITASS_TOHD",
                table: "ORDER_ITEM_ASSOC",
                column: "TO_ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITASS_TYPE",
                table: "ORDER_ITEM_ASSOC",
                column: "ORDER_ITEM_ASSOC_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ORR_ITM_ASC_TXCRTS",
                table: "ORDER_ITEM_ASSOC",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_ITM_ASC_TXSTMP",
                table: "ORDER_ITEM_ASSOC",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITAS_TYPPAR",
                table: "ORDER_ITEM_ASSOC_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ORR_ITM_ASC_TP_TXP",
                table: "ORDER_ITEM_ASSOC_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_ITM_ASC_TP_TXS",
                table: "ORDER_ITEM_ASSOC_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITEM_ATTR",
                table: "ORDER_ITEM_ATTRIBUTE",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "ORR_ITM_ATTT_TXCRS",
                table: "ORDER_ITEM_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_ITM_ATTT_TXSTP",
                table: "ORDER_ITEM_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITBL_SHIPRCP",
                table: "ORDER_ITEM_BILLING",
                column: "SHIPMENT_RECEIPT_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITBLNG_IISS",
                table: "ORDER_ITEM_BILLING",
                column: "ITEM_ISSUANCE_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITBLNG_IITM",
                table: "ORDER_ITEM_BILLING",
                columns: new[] { "INVOICE_ID", "INVOICE_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "ORDER_ITBLNG_OHDR",
                table: "ORDER_ITEM_BILLING",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITBLNG_OITM",
                table: "ORDER_ITEM_BILLING",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "ORR_ITM_BLLG_TXCRS",
                table: "ORDER_ITEM_BILLING",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_ITM_BLLG_TXSTP",
                table: "ORDER_ITEM_BILLING",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITCH_OITM",
                table: "ORDER_ITEM_CHANGE",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "ORDER_ITCH_REAS",
                table: "ORDER_ITEM_CHANGE",
                column: "REASON_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITCH_TYPE",
                table: "ORDER_ITEM_CHANGE",
                column: "CHANGE_TYPE_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITCH_USER",
                table: "ORDER_ITEM_CHANGE",
                column: "CHANGE_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "ORR_ITM_CHG_TXCRTS",
                table: "ORDER_ITEM_CHANGE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_ITM_CHG_TXSTMP",
                table: "ORDER_ITEM_CHANGE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITCM_CMECH",
                table: "ORDER_ITEM_CONTACT_MECH",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITCM_CMPT",
                table: "ORDER_ITEM_CONTACT_MECH",
                column: "CONTACT_MECH_PURPOSE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITCM_OITM",
                table: "ORDER_ITEM_CONTACT_MECH",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "ORR_ITM_CNT_MCH_TP",
                table: "ORDER_ITEM_CONTACT_MECH",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_ITM_CNT_MCH_TS",
                table: "ORDER_ITEM_CONTACT_MECH",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDERITMGRP_HDR",
                table: "ORDER_ITEM_GROUP",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "ORDERITMGRP_PGRP",
                table: "ORDER_ITEM_GROUP",
                columns: new[] { "ORDER_ID", "PARENT_GROUP_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "ORR_ITM_GRP_TXCRTS",
                table: "ORDER_ITEM_GROUP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_ITM_GRP_TXSTMP",
                table: "ORDER_ITEM_GROUP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "OIGO_GROUP_ORDER",
                table: "ORDER_ITEM_GROUP_ORDER",
                column: "GROUP_ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "OIGO_ORDER_ITEM",
                table: "ORDER_ITEM_GROUP_ORDER",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "ORR_ITM_GRP_ORR_TP",
                table: "ORDER_ITEM_GROUP_ORDER",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_ITM_GRP_ORR_TS",
                table: "ORDER_ITEM_GROUP_ORDER",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_OIPI_OITM",
                table: "ORDER_ITEM_PRICE_INFO",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "ORDER_OIPI_PRAI",
                table: "ORDER_ITEM_PRICE_INFO",
                columns: new[] { "PRODUCT_PRICE_RULE_ID", "PRODUCT_PRICE_ACTION_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "ORR_ITM_PRC_INF_TP",
                table: "ORDER_ITEM_PRICE_INFO",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_ITM_PRC_INF_TS",
                table: "ORDER_ITEM_PRICE_INFO",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITRL_OHDR",
                table: "ORDER_ITEM_ROLE",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITRL_OITM",
                table: "ORDER_ITEM_ROLE",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "ORDER_ITRL_PARTY",
                table: "ORDER_ITEM_ROLE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITRL_PTRLE",
                table: "ORDER_ITEM_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "ORDR_ITM_RL_TXCRTS",
                table: "ORDER_ITEM_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDR_ITM_RL_TXSTMP",
                table: "ORDER_ITEM_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITSG_CNTM",
                table: "ORDER_ITEM_SHIP_GROUP",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITSG_CPRLE",
                table: "ORDER_ITEM_SHIP_GROUP",
                columns: new[] { "CARRIER_PARTY_ID", "CARRIER_ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "ORDER_ITSG_CPRTY",
                table: "ORDER_ITEM_SHIP_GROUP",
                column: "CARRIER_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITSG_CSHM",
                table: "ORDER_ITEM_SHIP_GROUP",
                columns: new[] { "SHIPMENT_METHOD_TYPE_ID", "CARRIER_PARTY_ID", "CARRIER_ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "ORDER_ITSG_FAC",
                table: "ORDER_ITEM_SHIP_GROUP",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITSG_ORDH",
                table: "ORDER_ITEM_SHIP_GROUP",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITSG_PADR",
                table: "ORDER_ITEM_SHIP_GROUP",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITSG_SAGR",
                table: "ORDER_ITEM_SHIP_GROUP",
                column: "SUPPLIER_AGREEMENT_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITSG_SHMTP",
                table: "ORDER_ITEM_SHIP_GROUP",
                column: "SHIPMENT_METHOD_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITSG_SPRTY",
                table: "ORDER_ITEM_SHIP_GROUP",
                column: "SUPPLIER_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITSG_TCNB",
                table: "ORDER_ITEM_SHIP_GROUP",
                column: "TELECOM_CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITSG_TCNT",
                table: "ORDER_ITEM_SHIP_GROUP",
                column: "TELECOM_CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITSG_VPRTY",
                table: "ORDER_ITEM_SHIP_GROUP",
                column: "VENDOR_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "ORR_ITM_SHP_GRP_TP",
                table: "ORDER_ITEM_SHIP_GROUP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_ITM_SHP_GRP_TS",
                table: "ORDER_ITEM_SHIP_GROUP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_ISGA_OISG",
                table: "ORDER_ITEM_SHIP_GROUP_ASSOC",
                columns: new[] { "ORDER_ID", "SHIP_GROUP_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "ORDER_ISGA_ORDH",
                table: "ORDER_ITEM_SHIP_GROUP_ASSOC",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ISGA_ORDI",
                table: "ORDER_ITEM_SHIP_GROUP_ASSOC",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "ORR_SHP_GRP_ASC_TP",
                table: "ORDER_ITEM_SHIP_GROUP_ASSOC",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_SHP_GRP_ASC_TS",
                table: "ORDER_ITEM_SHIP_GROUP_ASSOC",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITIR_INVITM",
                table: "ORDER_ITEM_SHIP_GRP_INV_RES",
                column: "INVENTORY_ITEM_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITIR_OITM",
                table: "ORDER_ITEM_SHIP_GRP_INV_RES",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "ORR_GRP_INV_RS_TP",
                table: "ORDER_ITEM_SHIP_GRP_INV_RES",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_GRP_INV_RS_TS",
                table: "ORDER_ITEM_SHIP_GRP_INV_RES",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITEM_TYPPAR",
                table: "ORDER_ITEM_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ORDR_ITM_TP_TXCRTS",
                table: "ORDER_ITEM_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDR_ITM_TP_TXSTMP",
                table: "ORDER_ITEM_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_ITEM_TYPATR",
                table: "ORDER_ITEM_TYPE_ATTR",
                column: "ORDER_ITEM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ORR_ITM_TP_ATR_TXP",
                table: "ORDER_ITEM_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_ITM_TP_ATR_TXS",
                table: "ORDER_ITEM_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORD_NOTIFY_ENUM",
                table: "ORDER_NOTIFICATION",
                column: "EMAIL_TYPE");

            migrationBuilder.CreateIndex(
                name: "ORD_NOTIFY_ORDHDR",
                table: "ORDER_NOTIFICATION",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "ORDR_NTFCTN_TXCRTS",
                table: "ORDER_NOTIFICATION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDR_NTFCTN_TXSTMP",
                table: "ORDER_NOTIFICATION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "NSF_RETRY_CHECK",
                table: "ORDER_PAYMENT_PREFERENCE",
                column: "NEEDS_NSF_RETRY");

            migrationBuilder.CreateIndex(
                name: "ORDER_PMPRF_FINACT",
                table: "ORDER_PAYMENT_PREFERENCE",
                column: "FIN_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_PMPRF_OHDR",
                table: "ORDER_PAYMENT_PREFERENCE",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_PMPRF_PMETH",
                table: "ORDER_PAYMENT_PREFERENCE",
                column: "PAYMENT_METHOD_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_PMPRF_PMTP",
                table: "ORDER_PAYMENT_PREFERENCE",
                column: "PAYMENT_METHOD_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_PMPRF_PPRP",
                table: "ORDER_PAYMENT_PREFERENCE",
                column: "PRODUCT_PRICE_PURPOSE_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_PMPRF_STTS",
                table: "ORDER_PAYMENT_PREFERENCE",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_PMPRF_USRL",
                table: "ORDER_PAYMENT_PREFERENCE",
                column: "CREATED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "ORR_PMT_PRFC_TXCRS",
                table: "ORDER_PAYMENT_PREFERENCE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_PMT_PRFC_TXSTP",
                table: "ORDER_PAYMENT_PREFERENCE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_PPCD_ORD",
                table: "ORDER_PRODUCT_PROMO_CODE",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_PPCD_PPC",
                table: "ORDER_PRODUCT_PROMO_CODE",
                column: "PRODUCT_PROMO_CODE_ID");

            migrationBuilder.CreateIndex(
                name: "ORR_PRT_PRM_CD_TXP",
                table: "ORDER_PRODUCT_PROMO_CODE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_PRT_PRM_CD_TXS",
                table: "ORDER_PRODUCT_PROMO_CODE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDREQ_CMT_OITM",
                table: "ORDER_REQUIREMENT_COMMITMENT",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "ORDREQ_CMT_ORD",
                table: "ORDER_REQUIREMENT_COMMITMENT",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "ORDREQ_CMT_REQ",
                table: "ORDER_REQUIREMENT_COMMITMENT",
                column: "REQUIREMENT_ID");

            migrationBuilder.CreateIndex(
                name: "ORR_RQRT_CMMT_TXCS",
                table: "ORDER_REQUIREMENT_COMMITMENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_RQRT_CMMT_TXSP",
                table: "ORDER_REQUIREMENT_COMMITMENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_ROLE_OHDR",
                table: "ORDER_ROLE",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ROLE_PARTY",
                table: "ORDER_ROLE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_ROLE_PROLE",
                table: "ORDER_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "ORDER_ROLE_TXCRTS",
                table: "ORDER_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_ROLE_TXSTMP",
                table: "ORDER_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_SHPMT_OHDR",
                table: "ORDER_SHIPMENT",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_SHPMT_SHPMT",
                table: "ORDER_SHIPMENT",
                column: "SHIPMENT_ID");

            migrationBuilder.CreateIndex(
                name: "ORDR_SHPMNT_TXCRTS",
                table: "ORDER_SHIPMENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDR_SHPMNT_TXSTMP",
                table: "ORDER_SHIPMENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_STTS_OHDR",
                table: "ORDER_STATUS",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_STTS_STTS",
                table: "ORDER_STATUS",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_STTS_USER",
                table: "ORDER_STATUS",
                column: "STATUS_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "ORDR_STTS_TXCRTS",
                table: "ORDER_STATUS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDR_STTS_TXSTMP",
                table: "ORDER_STATUS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_SMENT_FAC",
                table: "ORDER_SUMMARY_ENTRY",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_SMENT_PROD",
                table: "ORDER_SUMMARY_ENTRY",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "ORR_SMR_ENR_TXCRTS",
                table: "ORDER_SUMMARY_ENTRY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_SMR_ENR_TXSTMP",
                table: "ORDER_SUMMARY_ENTRY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_TERM_OHDR",
                table: "ORDER_TERM",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_TERM_TTYPE",
                table: "ORDER_TERM",
                column: "TERM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_TERM_TXCRTS",
                table: "ORDER_TERM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_TERM_TXSTMP",
                table: "ORDER_TERM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_TERM_UOM",
                table: "ORDER_TERM",
                column: "UOM_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_TATTR_OTRM",
                table: "ORDER_TERM_ATTRIBUTE",
                columns: new[] { "TERM_TYPE_ID", "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "ORR_TRM_ATTT_TXCRS",
                table: "ORDER_TERM_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORR_TRM_ATTT_TXSTP",
                table: "ORDER_TERM_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_TYPE_PARENT",
                table: "ORDER_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ORDER_TYPE_TXCRTS",
                table: "ORDER_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_TYPE_TXSTMP",
                table: "ORDER_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDER_TPAT_ORTYP",
                table: "ORDER_TYPE_ATTR",
                column: "ORDER_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ORDR_TP_ATR_TXCRTS",
                table: "ORDER_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ORDR_TP_ATR_TXSTMP",
                table: "ORDER_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DATA_REC_OTHER",
                table: "OTHER_DATA_RESOURCE",
                column: "DATA_RESOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "OTHR_DT_RSC_TXCRTS",
                table: "OTHER_DATA_RESOURCE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "OTHR_DT_RSC_TXSTMP",
                table: "OTHER_DATA_RESOURCE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_CUL",
                table: "PARTY",
                column: "CREATED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "PARTY_DATSRC",
                table: "PARTY",
                column: "DATA_SOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_LMCUL",
                table: "PARTY",
                column: "LAST_MODIFIED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "PARTY_PREF_CRNCY",
                table: "PARTY",
                column: "PREFERRED_CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_PTY_TYP",
                table: "PARTY",
                column: "PARTY_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_STATUSITM",
                table: "PARTY",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_TXCRTS",
                table: "PARTY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_TXSTMP",
                table: "PARTY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTYEXT_ID_IDX",
                table: "PARTY",
                column: "EXTERNAL_ID");

            migrationBuilder.CreateIndex(
                name: "ACCTGPREF_CURNCY",
                table: "PARTY_ACCTG_PREFERENCE",
                column: "BASE_CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "ACTG_PREF_PTY",
                table: "PARTY_ACCTG_PREFERENCE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "ACTGPREF_COGS",
                table: "PARTY_ACCTG_PREFERENCE",
                column: "COGS_METHOD_ID");

            migrationBuilder.CreateIndex(
                name: "ACTGPREF_GLJRNL",
                table: "PARTY_ACCTG_PREFERENCE",
                column: "ERROR_GL_JOURNAL_ID");

            migrationBuilder.CreateIndex(
                name: "ACTGPREF_INVCM",
                table: "PARTY_ACCTG_PREFERENCE",
                column: "INVOICE_SEQ_CUST_METH_ID");

            migrationBuilder.CreateIndex(
                name: "ACTGPREF_INVSQ",
                table: "PARTY_ACCTG_PREFERENCE",
                column: "INVOICE_SEQUENCE_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "ACTGPREF_ODRCM",
                table: "PARTY_ACCTG_PREFERENCE",
                column: "ORDER_SEQ_CUST_METH_ID");

            migrationBuilder.CreateIndex(
                name: "ACTGPREF_ODRSQ",
                table: "PARTY_ACCTG_PREFERENCE",
                column: "ORDER_SEQUENCE_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "ACTGPREF_PAYMTH",
                table: "PARTY_ACCTG_PREFERENCE",
                column: "REFUND_PAYMENT_METHOD_ID");

            migrationBuilder.CreateIndex(
                name: "ACTGPREF_QTECM",
                table: "PARTY_ACCTG_PREFERENCE",
                column: "QUOTE_SEQ_CUST_METH_ID");

            migrationBuilder.CreateIndex(
                name: "ACTGPREF_QTESQ",
                table: "PARTY_ACCTG_PREFERENCE",
                column: "QUOTE_SEQUENCE_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "ACTGPREF_TAXFORM",
                table: "PARTY_ACCTG_PREFERENCE",
                column: "TAX_FORM_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_ACG_PRFC_TXCRS",
                table: "PARTY_ACCTG_PREFERENCE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_ACG_PRFC_TXSTP",
                table: "PARTY_ACCTG_PREFERENCE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_ATTR",
                table: "PARTY_ATTRIBUTE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_ATTRBT_TXCRTS",
                table: "PARTY_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_ATTRBT_TXSTMP",
                table: "PARTY_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_BNFT_TXCRTS",
                table: "PARTY_BENEFIT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_BNFT_TXSTMP",
                table: "PARTY_BENEFIT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PTY_BNFT_BNFTTP",
                table: "PARTY_BENEFIT",
                column: "BENEFIT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PTY_BNFT_FPTRL",
                table: "PARTY_BENEFIT",
                columns: new[] { "PARTY_ID_FROM", "ROLE_TYPE_ID_FROM" });

            migrationBuilder.CreateIndex(
                name: "PTY_BNFT_FPTY",
                table: "PARTY_BENEFIT",
                column: "PARTY_ID_FROM");

            migrationBuilder.CreateIndex(
                name: "PTY_BNFT_TPTRL",
                table: "PARTY_BENEFIT",
                columns: new[] { "PARTY_ID_TO", "ROLE_TYPE_ID_TO" });

            migrationBuilder.CreateIndex(
                name: "PTY_BNFT_TPTY",
                table: "PARTY_BENEFIT",
                column: "PARTY_ID_TO");

            migrationBuilder.CreateIndex(
                name: "PARTY_CRRACT_CPT",
                table: "PARTY_CARRIER_ACCOUNT",
                column: "CARRIER_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_CRRACT_PTY",
                table: "PARTY_CARRIER_ACCOUNT",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_CRR_ACCT_TXCRS",
                table: "PARTY_CARRIER_ACCOUNT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_CRR_ACCT_TXSTP",
                table: "PARTY_CARRIER_ACCOUNT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_CLASS_GRP",
                table: "PARTY_CLASSIFICATION",
                column: "PARTY_CLASSIFICATION_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_CLASS_PARTY",
                table: "PARTY_CLASSIFICATION",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_CLSSFCN_TXCRTS",
                table: "PARTY_CLASSIFICATION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_CLSSFCN_TXSTMP",
                table: "PARTY_CLASSIFICATION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_CLASS_GRPPAR",
                table: "PARTY_CLASSIFICATION_GROUP",
                column: "PARENT_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_CLSGRP_TYPE",
                table: "PARTY_CLASSIFICATION_GROUP",
                column: "PARTY_CLASSIFICATION_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_CLSSN_GRP_TXCS",
                table: "PARTY_CLASSIFICATION_GROUP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_CLSSN_GRP_TXSP",
                table: "PARTY_CLASSIFICATION_GROUP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_CLASS_TYPPAR",
                table: "PARTY_CLASSIFICATION_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_CLSSFN_TP_TXCS",
                table: "PARTY_CLASSIFICATION_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_CLSSFN_TP_TXSP",
                table: "PARTY_CLASSIFICATION_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_CMECH_CMECH",
                table: "PARTY_CONTACT_MECH",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_CMECH_PARTY",
                table: "PARTY_CONTACT_MECH",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_CMECH_PROLE",
                table: "PARTY_CONTACT_MECH",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "PARTY_CMECH_ROLE",
                table: "PARTY_CONTACT_MECH",
                column: "ROLE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_CNTT_MCH_TXCRS",
                table: "PARTY_CONTACT_MECH",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_CNTT_MCH_TXSTP",
                table: "PARTY_CONTACT_MECH",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_CMPRP_CMECH",
                table: "PARTY_CONTACT_MECH_PURPOSE",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_CMPRP_PARTY",
                table: "PARTY_CONTACT_MECH_PURPOSE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_CMPRP_TYPE",
                table: "PARTY_CONTACT_MECH_PURPOSE",
                column: "CONTACT_MECH_PURPOSE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_CNT_MCH_PRS_TP",
                table: "PARTY_CONTACT_MECH_PURPOSE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_CNT_MCH_PRS_TS",
                table: "PARTY_CONTACT_MECH_PURPOSE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_CNT_CNT",
                table: "PARTY_CONTENT",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_CNT_PARTY",
                table: "PARTY_CONTENT",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_CNT_TYPE",
                table: "PARTY_CONTENT",
                column: "PARTY_CONTENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_CNTNT_TXCRTS",
                table: "PARTY_CONTENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_CNTNT_TXSTMP",
                table: "PARTY_CONTENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTYCNT_TP_PAR",
                table: "PARTY_CONTENT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_CNTT_TP_TXCRTS",
                table: "PARTY_CONTENT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_CNTT_TP_TXSTMP",
                table: "PARTY_CONTENT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_DATSRC_DSC",
                table: "PARTY_DATA_SOURCE",
                column: "DATA_SOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_DATSRC_PTY",
                table: "PARTY_DATA_SOURCE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_DT_SRC_TXCRTS",
                table: "PARTY_DATA_SOURCE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_DT_SRC_TXSTMP",
                table: "PARTY_DATA_SOURCE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_FXD_AST_AST_TP",
                table: "PARTY_FIXED_ASSET_ASSIGNMENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_FXD_AST_AST_TS",
                table: "PARTY_FIXED_ASSET_ASSIGNMENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PTY_FASTAS_FA",
                table: "PARTY_FIXED_ASSET_ASSIGNMENT",
                column: "FIXED_ASSET_ID");

            migrationBuilder.CreateIndex(
                name: "PTY_FASTAS_PTRL",
                table: "PARTY_FIXED_ASSET_ASSIGNMENT",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "PTY_FASTAS_SI",
                table: "PARTY_FIXED_ASSET_ASSIGNMENT",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "PARTYGEOPT_GEOPT",
                table: "PARTY_GEO_POINT",
                column: "GEO_POINT_ID");

            migrationBuilder.CreateIndex(
                name: "PARTYGEOPT_PARTY",
                table: "PARTY_GEO_POINT",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_G_PNT_TXCRTS",
                table: "PARTY_GEO_POINT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_G_PNT_TXSTMP",
                table: "PARTY_GEO_POINT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_GL_ACCT_TXCRTS",
                table: "PARTY_GL_ACCOUNT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_GL_ACCT_TXSTMP",
                table: "PARTY_GL_ACCOUNT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRTYGLACCT_GLACCT",
                table: "PARTY_GL_ACCOUNT",
                column: "GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "PRTYGLACCT_GLAT",
                table: "PARTY_GL_ACCOUNT",
                column: "GL_ACCOUNT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRTYGLACCT_ORGPRTY",
                table: "PARTY_GL_ACCOUNT",
                column: "ORGANIZATION_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PRTYGLACCT_PRTY",
                table: "PARTY_GL_ACCOUNT",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PRTYGLACCT_PTRL",
                table: "PARTY_GL_ACCOUNT",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "GROUP_NAME_IDX",
                table: "PARTY_GROUP",
                column: "GROUP_NAME");

            migrationBuilder.CreateIndex(
                name: "PARTY_GROUP_TXCRTS",
                table: "PARTY_GROUP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_GROUP_TXSTMP",
                table: "PARTY_GROUP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_GRP_PARTY",
                table: "PARTY_GROUP",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_ICSAVS_PARTY",
                table: "PARTY_ICS_AVS_OVERRIDE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_ICS_AVS_OVD_TP",
                table: "PARTY_ICS_AVS_OVERRIDE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_ICS_AVS_OVD_TS",
                table: "PARTY_ICS_AVS_OVERRIDE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_ID_PRODUCT",
                table: "PARTY_IDENTIFICATION",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_ID_TYPE",
                table: "PARTY_IDENTIFICATION",
                column: "PARTY_IDENTIFICATION_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_ID_VALIDX",
                table: "PARTY_IDENTIFICATION",
                column: "ID_VALUE");

            migrationBuilder.CreateIndex(
                name: "PRT_IDNTFCN_TXCRTS",
                table: "PARTY_IDENTIFICATION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_IDNTFCN_TXSTMP",
                table: "PARTY_IDENTIFICATION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_ID_TYPE_PAR",
                table: "PARTY_IDENTIFICATION_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_IDNTFN_TP_TXCS",
                table: "PARTY_IDENTIFICATION_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_IDNTFN_TP_TXSP",
                table: "PARTY_IDENTIFICATION_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_INVTTN_TXCRTS",
                table: "PARTY_INVITATION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_INVTTN_TXSTMP",
                table: "PARTY_INVITATION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PTYINV_PTY",
                table: "PARTY_INVITATION",
                column: "PARTY_ID_FROM");

            migrationBuilder.CreateIndex(
                name: "PTYINV_STTS",
                table: "PARTY_INVITATION",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_INN_GRP_ASC_TP",
                table: "PARTY_INVITATION_GROUP_ASSOC",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_INN_GRP_ASC_TS",
                table: "PARTY_INVITATION_GROUP_ASSOC",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PTYINVGA_PTYGRP",
                table: "PARTY_INVITATION_GROUP_ASSOC",
                column: "PARTY_ID_TO");

            migrationBuilder.CreateIndex(
                name: "PTYINVGA_PTYINV",
                table: "PARTY_INVITATION_GROUP_ASSOC",
                column: "PARTY_INVITATION_ID");

            migrationBuilder.CreateIndex(
                name: "PTYINVGA_PTYTO",
                table: "PARTY_INVITATION_GROUP_ASSOC",
                column: "PARTY_ID_TO");

            migrationBuilder.CreateIndex(
                name: "PRT_INN_RL_ASC_TXP",
                table: "PARTY_INVITATION_ROLE_ASSOC",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_INN_RL_ASC_TXS",
                table: "PARTY_INVITATION_ROLE_ASSOC",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PTYINVROLE_PTYINV",
                table: "PARTY_INVITATION_ROLE_ASSOC",
                column: "PARTY_INVITATION_ID");

            migrationBuilder.CreateIndex(
                name: "PTYINVROLE_ROLET",
                table: "PARTY_INVITATION_ROLE_ASSOC",
                column: "ROLE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_NM_HSTR_TXCRTS",
                table: "PARTY_NAME_HISTORY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_NM_HSTR_TXSTMP",
                table: "PARTY_NAME_HISTORY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PTY_NMHIS_PARTY",
                table: "PARTY_NAME_HISTORY",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_NEED_CMEV",
                table: "PARTY_NEED",
                column: "COMMUNICATION_EVENT_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_NEED_NDTP",
                table: "PARTY_NEED",
                column: "NEED_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_NEED_PCAT",
                table: "PARTY_NEED",
                column: "PRODUCT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_NEED_PROD",
                table: "PARTY_NEED",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_NEED_PTTP",
                table: "PARTY_NEED",
                column: "PARTY_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_NEED_PTY",
                table: "PARTY_NEED",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_NEED_RTYP",
                table: "PARTY_NEED",
                column: "ROLE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_NEED_TXCRTS",
                table: "PARTY_NEED",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_NEED_TXSTMP",
                table: "PARTY_NEED",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_NOTE_NOTE",
                table: "PARTY_NOTE",
                column: "NOTE_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_NOTE_PARTY",
                table: "PARTY_NOTE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_NOTE_TXCRTS",
                table: "PARTY_NOTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_NOTE_TXSTMP",
                table: "PARTY_NOTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PAPDTT_TO_INVT",
                table: "PARTY_PREF_DOC_TYPE_TPL",
                column: "INVOICE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PAPDTT_TO_ORDT",
                table: "PARTY_PREF_DOC_TYPE_TPL",
                column: "ORDER_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PAPDTT_TO_PAP",
                table: "PARTY_PREF_DOC_TYPE_TPL",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PAPDTT_TO_PTY",
                table: "PARTY_PREF_DOC_TYPE_TPL",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PAPDTT_TO_QUOT",
                table: "PARTY_PREF_DOC_TYPE_TPL",
                column: "QUOTE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_DC_TP_TPL_TP",
                table: "PARTY_PREF_DOC_TYPE_TPL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_DC_TP_TPL_TS",
                table: "PARTY_PREF_DOC_TYPE_TPL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_PROF_PARTY",
                table: "PARTY_PROFILE_DEFAULT",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_PROF_PSTORE",
                table: "PARTY_PROFILE_DEFAULT",
                column: "PRODUCT_STORE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_PRL_DFT_TXCRTS",
                table: "PARTY_PROFILE_DEFAULT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_PRL_DFT_TXSTMP",
                table: "PARTY_PROFILE_DEFAULT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_QUAL_PQTYP",
                table: "PARTY_QUAL",
                column: "PARTY_QUAL_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_QUAL_PRTY",
                table: "PARTY_QUAL",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_QUAL_STATUS",
                table: "PARTY_QUAL",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_QUAL_TXCRTS",
                table: "PARTY_QUAL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_QUAL_TXSTMP",
                table: "PARTY_QUAL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_QUAL_VERIF",
                table: "PARTY_QUAL",
                column: "VERIF_STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_QUAL_TPAR",
                table: "PARTY_QUAL_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_QL_TP_TXCRTS",
                table: "PARTY_QUAL_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_QL_TP_TXSTMP",
                table: "PARTY_QUAL_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_RT_NW_TXCRTS",
                table: "PARTY_RATE_NEW",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_RT_NW_TXSTMP",
                table: "PARTY_RATE_NEW",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRTY_RATE_PRTY",
                table: "PARTY_RATE_NEW",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PRTY_RATE_RTTP",
                table: "PARTY_RATE_NEW",
                column: "RATE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_REL_FPROLE",
                table: "PARTY_RELATIONSHIP",
                columns: new[] { "PARTY_ID_FROM", "ROLE_TYPE_ID_FROM" });

            migrationBuilder.CreateIndex(
                name: "PARTY_REL_PRTYP",
                table: "PARTY_RELATIONSHIP",
                column: "PRIORITY_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_REL_SECGRP",
                table: "PARTY_RELATIONSHIP",
                column: "SECURITY_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_REL_STTS",
                table: "PARTY_RELATIONSHIP",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_REL_TPROLE",
                table: "PARTY_RELATIONSHIP",
                columns: new[] { "PARTY_ID_TO", "ROLE_TYPE_ID_TO" });

            migrationBuilder.CreateIndex(
                name: "PARTY_REL_TYPE",
                table: "PARTY_RELATIONSHIP",
                column: "PARTY_RELATIONSHIP_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_RLTNSHP_TXCRTS",
                table: "PARTY_RELATIONSHIP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_RLTNSHP_TXSTMP",
                table: "PARTY_RELATIONSHIP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_RELTYP_PAR",
                table: "PARTY_RELATIONSHIP_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_RELTYP_VFRT",
                table: "PARTY_RELATIONSHIP_TYPE",
                column: "ROLE_TYPE_ID_VALID_FROM");

            migrationBuilder.CreateIndex(
                name: "PARTY_RELTYP_VTRT",
                table: "PARTY_RELATIONSHIP_TYPE",
                column: "ROLE_TYPE_ID_VALID_TO");

            migrationBuilder.CreateIndex(
                name: "PRT_RLTNP_TP_TXCRS",
                table: "PARTY_RELATIONSHIP_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_RLTNP_TP_TXSTP",
                table: "PARTY_RELATIONSHIP_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_RSME_PRTY",
                table: "PARTY_RESUME",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_RSM_TXCRTS",
                table: "PARTY_RESUME",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_RSM_TXSTMP",
                table: "PARTY_RESUME",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_RLE_PARTY",
                table: "PARTY_ROLE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_RLE_ROLE",
                table: "PARTY_ROLE",
                column: "ROLE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_ROLE_TXCRTS",
                table: "PARTY_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_ROLE_TXSTMP",
                table: "PARTY_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_SKILL_TXCRTS",
                table: "PARTY_SKILL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_SKILL_TXSTMP",
                table: "PARTY_SKILL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_SKLL_PRTY",
                table: "PARTY_SKILL",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_SKLL_SKTP",
                table: "PARTY_SKILL",
                column: "SKILL_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_STS_PARTY",
                table: "PARTY_STATUS",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_STS_STSITM",
                table: "PARTY_STATUS",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_STTS_USRLGN",
                table: "PARTY_STATUS",
                column: "CHANGE_BY_USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_STTS_TXCRTS",
                table: "PARTY_STATUS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_STTS_TXSTMP",
                table: "PARTY_STATUS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_TXAI_PTY",
                table: "PARTY_TAX_AUTH_INFO",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_TXAI_TXA",
                table: "PARTY_TAX_AUTH_INFO",
                columns: new[] { "TAX_AUTH_GEO_ID", "TAX_AUTH_PARTY_ID" });

            migrationBuilder.CreateIndex(
                name: "PRT_TX_ATH_INF_TXP",
                table: "PARTY_TAX_AUTH_INFO",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_TX_ATH_INF_TXS",
                table: "PARTY_TAX_AUTH_INFO",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_TYPE_PAR",
                table: "PARTY_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PARTY_TYPE_TXCRTS",
                table: "PARTY_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_TYPE_TXSTMP",
                table: "PARTY_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PARTY_TYP_ATTR",
                table: "PARTY_TYPE_ATTR",
                column: "PARTY_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_TP_ATTR_TXCRTS",
                table: "PARTY_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_TP_ATTR_TXSTMP",
                table: "PARTY_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PAY_GRADE_TXCRTS",
                table: "PAY_GRADE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PAY_GRADE_TXSTMP",
                table: "PAY_GRADE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PAY_HIST_EMPLMNT",
                table: "PAY_HISTORY",
                columns: new[] { "ROLE_TYPE_ID_FROM", "ROLE_TYPE_ID_TO", "PARTY_ID_FROM", "PARTY_ID_TO", "EMPL_FROM_DATE" });

            migrationBuilder.CreateIndex(
                name: "PAY_HIST_PDTP",
                table: "PAY_HISTORY",
                column: "PERIOD_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PAY_HIST_PGRD",
                table: "PAY_HISTORY",
                column: "PAY_GRADE_ID");

            migrationBuilder.CreateIndex(
                name: "PAY_HISTORY_TXCRTS",
                table: "PAY_HISTORY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PAY_HISTORY_TXSTMP",
                table: "PAY_HISTORY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "P_PL_PMT_MTD_TXCRS",
                table: "PAY_PAL_PAYMENT_METHOD",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "P_PL_PMT_MTD_TXSTP",
                table: "PAY_PAL_PAYMENT_METHOD",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PAYPAL_CMECH",
                table: "PAY_PAL_PAYMENT_METHOD",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "PAYPAL_PADDR",
                table: "PAY_PAL_PAYMENT_METHOD",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "PAYPAL_PMNTMETH",
                table: "PAY_PAL_PAYMENT_METHOD",
                column: "PAYMENT_METHOD_ID");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_ACUOM",
                table: "PAYMENT",
                column: "ACTUAL_CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_CUOM",
                table: "PAYMENT",
                column: "CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_FACTX",
                table: "PAYMENT",
                column: "FIN_ACCOUNT_TRANS_ID");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_FPTY",
                table: "PAYMENT",
                column: "PARTY_ID_FROM");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_ORDPMPRF",
                table: "PAYMENT",
                column: "PAYMENT_PREFERENCE_ID");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_ORGLA",
                table: "PAYMENT",
                column: "OVERRIDE_GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_PAYGATR",
                table: "PAYMENT",
                column: "PAYMENT_GATEWAY_RESPONSE_ID");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_PMETH",
                table: "PAYMENT",
                column: "PAYMENT_METHOD_ID");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_PMETH_TP",
                table: "PAYMENT",
                column: "PAYMENT_METHOD_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_PMTYP",
                table: "PAYMENT",
                column: "PAYMENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_STTSITM",
                table: "PAYMENT",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_TPTY",
                table: "PAYMENT",
                column: "PARTY_ID_TO");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_TRTP",
                table: "PAYMENT",
                column: "ROLE_TYPE_ID_TO");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_TXCRTS",
                table: "PAYMENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_TXSTMP",
                table: "PAYMENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_APP_BACT",
                table: "PAYMENT_APPLICATION",
                column: "BILLING_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_APP_GEO",
                table: "PAYMENT_APPLICATION",
                column: "TAX_AUTH_GEO_ID");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_APP_INV",
                table: "PAYMENT_APPLICATION",
                column: "INVOICE_ID");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_APP_ORGLA",
                table: "PAYMENT_APPLICATION",
                column: "OVERRIDE_GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_APP_PMT",
                table: "PAYMENT_APPLICATION",
                column: "PAYMENT_ID");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_APP_TPMT",
                table: "PAYMENT_APPLICATION",
                column: "TO_PAYMENT_ID");

            migrationBuilder.CreateIndex(
                name: "PMNT_APPLCN_TXCRTS",
                table: "PAYMENT_APPLICATION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMNT_APPLCN_TXSTMP",
                table: "PAYMENT_APPLICATION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_ATTR",
                table: "PAYMENT_ATTRIBUTE",
                column: "PAYMENT_ID");

            migrationBuilder.CreateIndex(
                name: "PMNT_ATTRBT_TXCRTS",
                table: "PAYMENT_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMNT_ATTRBT_TXSTMP",
                table: "PAYMENT_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_BA_BDGT",
                table: "PAYMENT_BUDGET_ALLOCATION",
                column: "BUDGET_ID");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_BA_PMT",
                table: "PAYMENT_BUDGET_ALLOCATION",
                column: "PAYMENT_ID");

            migrationBuilder.CreateIndex(
                name: "PMT_BDT_ALLN_TXCRS",
                table: "PAYMENT_BUDGET_ALLOCATION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMT_BDT_ALLN_TXSTP",
                table: "PAYMENT_BUDGET_ALLOCATION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_CNT_CNT",
                table: "PAYMENT_CONTENT",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_CNT_PROD",
                table: "PAYMENT_CONTENT",
                column: "PAYMENT_ID");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_CNT_TYPE",
                table: "PAYMENT_CONTENT",
                column: "PAYMENT_CONTENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PMNT_CNTNT_TXCRTS",
                table: "PAYMENT_CONTENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMNT_CNTNT_TXSTMP",
                table: "PAYMENT_CONTENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PAYCT_TYP_PARENT",
                table: "PAYMENT_CONTENT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PMT_CNTT_TP_TXCRTS",
                table: "PAYMENT_CONTENT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMT_CNTT_TP_TXSTMP",
                table: "PAYMENT_CONTENT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PGAN_PGC",
                table: "PAYMENT_GATEWAY_AUTHORIZE_NET",
                column: "PAYMENT_GATEWAY_CONFIG_ID");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_ATZ_NT_TXP",
                table: "PAYMENT_GATEWAY_AUTHORIZE_NET",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_ATZ_NT_TXS",
                table: "PAYMENT_GATEWAY_AUTHORIZE_NET",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PGCC_PGC",
                table: "PAYMENT_GATEWAY_CLEAR_COMMERCE",
                column: "PAYMENT_GATEWAY_CONFIG_ID");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_CLR_CMC_TP",
                table: "PAYMENT_GATEWAY_CLEAR_COMMERCE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_CLR_CMC_TS",
                table: "PAYMENT_GATEWAY_CLEAR_COMMERCE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PGC_PGCT",
                table: "PAYMENT_GATEWAY_CONFIG",
                column: "PAYMENT_GATEWAY_CONFIG_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_CNG_TXCRTS",
                table: "PAYMENT_GATEWAY_CONFIG",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_CNG_TXSTMP",
                table: "PAYMENT_GATEWAY_CONFIG",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PGCT_PAR",
                table: "PAYMENT_GATEWAY_CONFIG_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_CNG_TP_TXP",
                table: "PAYMENT_GATEWAY_CONFIG_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_CNG_TP_TXS",
                table: "PAYMENT_GATEWAY_CONFIG_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PGCS_PGC",
                table: "PAYMENT_GATEWAY_CYBER_SOURCE",
                column: "PAYMENT_GATEWAY_CONFIG_ID");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_CBR_SRC_TP",
                table: "PAYMENT_GATEWAY_CYBER_SOURCE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_CBR_SRC_TS",
                table: "PAYMENT_GATEWAY_CYBER_SOURCE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PGEW_PGC",
                table: "PAYMENT_GATEWAY_EWAY",
                column: "PAYMENT_GATEWAY_CONFIG_ID");

            migrationBuilder.CreateIndex(
                name: "PMNT_GTW_EW_TXCRTS",
                table: "PAYMENT_GATEWAY_EWAY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMNT_GTW_EW_TXSTMP",
                table: "PAYMENT_GATEWAY_EWAY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PGORB_PGC",
                table: "PAYMENT_GATEWAY_ORBITAL",
                column: "PAYMENT_GATEWAY_CONFIG_ID");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_ORBL_TXCRS",
                table: "PAYMENT_GATEWAY_ORBITAL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_ORBL_TXSTP",
                table: "PAYMENT_GATEWAY_ORBITAL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PGPP_PGC",
                table: "PAYMENT_GATEWAY_PAY_PAL",
                column: "PAYMENT_GATEWAY_CONFIG_ID");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_P_PL_TXCRS",
                table: "PAYMENT_GATEWAY_PAY_PAL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_P_PL_TXSTP",
                table: "PAYMENT_GATEWAY_PAY_PAL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PGPF_PGC",
                table: "PAYMENT_GATEWAY_PAYFLOW_PRO",
                column: "PAYMENT_GATEWAY_CONFIG_ID");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_PFW_PR_TXP",
                table: "PAYMENT_GATEWAY_PAYFLOW_PRO",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_PFW_PR_TXS",
                table: "PAYMENT_GATEWAY_PAYFLOW_PRO",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PAYGATRM_PAYGR",
                table: "PAYMENT_GATEWAY_RESP_MSG",
                column: "PAYMENT_GATEWAY_RESPONSE_ID");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_RSP_MSG_TP",
                table: "PAYMENT_GATEWAY_RESP_MSG",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_RSP_MSG_TS",
                table: "PAYMENT_GATEWAY_RESP_MSG",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PAYGATR_CUOM",
                table: "PAYMENT_GATEWAY_RESPONSE",
                column: "CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "PAYGATR_ORDPMPRF",
                table: "PAYMENT_GATEWAY_RESPONSE",
                column: "ORDER_PAYMENT_PREFERENCE_ID");

            migrationBuilder.CreateIndex(
                name: "PAYGATR_PMETH",
                table: "PAYMENT_GATEWAY_RESPONSE",
                column: "PAYMENT_METHOD_ID");

            migrationBuilder.CreateIndex(
                name: "PAYGATR_PMTP",
                table: "PAYMENT_GATEWAY_RESPONSE",
                column: "PAYMENT_METHOD_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PAYGATR_PSTENUM",
                table: "PAYMENT_GATEWAY_RESPONSE",
                column: "PAYMENT_SERVICE_TYPE_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PAYGATR_TXCODE",
                table: "PAYMENT_GATEWAY_RESPONSE",
                column: "TRANS_CODE_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_RSPS_TXCRS",
                table: "PAYMENT_GATEWAY_RESPONSE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_RSPS_TXSTP",
                table: "PAYMENT_GATEWAY_RESPONSE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PGSP_PGC",
                table: "PAYMENT_GATEWAY_SAGE_PAY",
                column: "PAYMENT_GATEWAY_CONFIG_ID");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_SG_P_TXCRS",
                table: "PAYMENT_GATEWAY_SAGE_PAY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_SG_P_TXSTP",
                table: "PAYMENT_GATEWAY_SAGE_PAY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PGSCP_PGC",
                table: "PAYMENT_GATEWAY_SECURE_PAY",
                column: "PAYMENT_GATEWAY_CONFIG_ID");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_SCR_P_TXCS",
                table: "PAYMENT_GATEWAY_SECURE_PAY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_SCR_P_TXSP",
                table: "PAYMENT_GATEWAY_SECURE_PAY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PGWP_PGC",
                table: "PAYMENT_GATEWAY_WORLD_PAY",
                column: "PAYMENT_GATEWAY_CONFIG_ID");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_WRD_P_TXCS",
                table: "PAYMENT_GATEWAY_WORLD_PAY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMT_GTW_WRD_P_TXSP",
                table: "PAYMENT_GATEWAY_WORLD_PAY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMT_ACT_TP_MP_TP",
                table: "PAYMENT_GL_ACCOUNT_TYPE_MAP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMT_ACT_TP_MP_TS",
                table: "PAYMENT_GL_ACCOUNT_TYPE_MAP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMTGLACCT_GLACCT",
                table: "PAYMENT_GL_ACCOUNT_TYPE_MAP",
                column: "GL_ACCOUNT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PMTGLACCT_PARTY",
                table: "PAYMENT_GL_ACCOUNT_TYPE_MAP",
                column: "ORGANIZATION_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PMTGLACCT_PMTTYPE",
                table: "PAYMENT_GL_ACCOUNT_TYPE_MAP",
                column: "PAYMENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PAYMNTGP_PGTYPE",
                table: "PAYMENT_GROUP",
                column: "PAYMENT_GROUP_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PMNT_GRP_TXCRTS",
                table: "PAYMENT_GROUP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMNT_GRP_TXSTMP",
                table: "PAYMENT_GROUP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PAYGRPMMBR_PAYMNT",
                table: "PAYMENT_GROUP_MEMBER",
                column: "PAYMENT_ID");

            migrationBuilder.CreateIndex(
                name: "PAYGRPMMBR_PG",
                table: "PAYMENT_GROUP_MEMBER",
                column: "PAYMENT_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "PMT_GRP_MMR_TXCRTS",
                table: "PAYMENT_GROUP_MEMBER",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMT_GRP_MMR_TXSTMP",
                table: "PAYMENT_GROUP_MEMBER",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PAYMNTGP_TYP_PAR",
                table: "PAYMENT_GROUP_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PMNT_GRP_TP_TXCRTS",
                table: "PAYMENT_GROUP_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMNT_GRP_TP_TXSTMP",
                table: "PAYMENT_GROUP_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PAYMETH_FINACCT",
                table: "PAYMENT_METHOD",
                column: "FIN_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "PAYMETH_GLACCT",
                table: "PAYMENT_METHOD",
                column: "GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "PAYMETH_PARTY",
                table: "PAYMENT_METHOD",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PAYMETH_TYPE",
                table: "PAYMENT_METHOD",
                column: "PAYMENT_METHOD_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PMNT_MTHD_TXCRTS",
                table: "PAYMENT_METHOD",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMNT_MTHD_TXSTMP",
                table: "PAYMENT_METHOD",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_MTP_DGLAC",
                table: "PAYMENT_METHOD_TYPE",
                column: "DEFAULT_GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "PMNT_MTD_TP_TXCRTS",
                table: "PAYMENT_METHOD_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMNT_MTD_TP_TXSTMP",
                table: "PAYMENT_METHOD_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_MTGA_GLAC",
                table: "PAYMENT_METHOD_TYPE_GL_ACCOUNT",
                column: "GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_MTGA_OPTY",
                table: "PAYMENT_METHOD_TYPE_GL_ACCOUNT",
                column: "ORGANIZATION_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_MTGA_PMT",
                table: "PAYMENT_METHOD_TYPE_GL_ACCOUNT",
                column: "PAYMENT_METHOD_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PMT_TP_GL_ACT_TP",
                table: "PAYMENT_METHOD_TYPE_GL_ACCOUNT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMT_TP_GL_ACT_TS",
                table: "PAYMENT_METHOD_TYPE_GL_ACCOUNT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PAYMENT_TYPE_PAR",
                table: "PAYMENT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PMNT_TP_TXCRTS",
                table: "PAYMENT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMNT_TP_TXSTMP",
                table: "PAYMENT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PAYMETH_TYPE_ATTR",
                table: "PAYMENT_TYPE_ATTR",
                column: "PAYMENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PMNT_TP_ATR_TXCRTS",
                table: "PAYMENT_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PMNT_TP_ATR_TXSTMP",
                table: "PAYMENT_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRL_PREF_PRTY",
                table: "PAYROLL_PREFERENCE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PRL_PREF_PTRL",
                table: "PAYROLL_PREFERENCE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "PRLL_PRFRNC_TXCRTS",
                table: "PAYROLL_PREFERENCE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRLL_PRFRNC_TXSTMP",
                table: "PAYROLL_PREFERENCE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PERF_RATNG_TYP",
                table: "PERF_RATING_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRF_RTNG_TP_TXCRTS",
                table: "PERF_RATING_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRF_RTNG_TP_TXSTMP",
                table: "PERF_RATING_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PERF_REV_EPTRL",
                table: "PERF_REVIEW",
                columns: new[] { "EMPLOYEE_PARTY_ID", "EMPLOYEE_ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "PERF_REV_EPTY",
                table: "PERF_REVIEW",
                column: "EMPLOYEE_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PERF_REV_MPTY",
                table: "PERF_REVIEW",
                column: "MANAGER_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PERF_REV_PMNT",
                table: "PERF_REVIEW",
                column: "PAYMENT_ID");

            migrationBuilder.CreateIndex(
                name: "PERF_REVIEW_TXCRTS",
                table: "PERF_REVIEW",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PERF_REVIEW_TXSTMP",
                table: "PERF_REVIEW",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PERF_RVITM_EPTRL",
                table: "PERF_REVIEW_ITEM",
                columns: new[] { "EMPLOYEE_PARTY_ID", "EMPLOYEE_ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "PERF_RVITM_EPTY",
                table: "PERF_REVIEW_ITEM",
                column: "EMPLOYEE_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PERF_RVITM_PFRV",
                table: "PERF_REVIEW_ITEM",
                columns: new[] { "EMPLOYEE_PARTY_ID", "EMPLOYEE_ROLE_TYPE_ID", "PERF_REVIEW_ID" });

            migrationBuilder.CreateIndex(
                name: "PRF_RVW_ITM_TXCRTS",
                table: "PERF_REVIEW_ITEM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRF_RVW_ITM_TXSTMP",
                table: "PERF_REVIEW_ITEM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PERF_REV_ITM_TYP",
                table: "PERF_REVIEW_ITEM_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRF_RVW_ITM_TP_TXP",
                table: "PERF_REVIEW_ITEM_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRF_RVW_ITM_TP_TXS",
                table: "PERF_REVIEW_ITEM_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PERF_NOTE_PRLE",
                table: "PERFORMANCE_NOTE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "PERF_NOTE_PRTY",
                table: "PERFORMANCE_NOTE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PRFRMNC_NT_TXCRTS",
                table: "PERFORMANCE_NOTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRFRMNC_NT_TXSTMP",
                table: "PERFORMANCE_NOTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PER_TYPE_UOM",
                table: "PERIOD_TYPE",
                column: "UOM_ID");

            migrationBuilder.CreateIndex(
                name: "PERIOD_TYPE_TXCRTS",
                table: "PERIOD_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PERIOD_TYPE_TXSTMP",
                table: "PERIOD_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "FIRST_NAME_IDX",
                table: "PERSON",
                column: "FIRST_NAME");

            migrationBuilder.CreateIndex(
                name: "LAST_NAME_IDX",
                table: "PERSON",
                column: "LAST_NAME");

            migrationBuilder.CreateIndex(
                name: "PERSON_EMPS_ENUM",
                table: "PERSON",
                column: "EMPLOYMENT_STATUS_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PERSON_MARITAL",
                table: "PERSON",
                column: "MARITAL_STATUS_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PERSON_PARTY",
                table: "PERSON",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PERSON_RESS_ENUM",
                table: "PERSON",
                column: "RESIDENCE_STATUS_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PERSON_TXCRTS",
                table: "PERSON",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PERSON_TXSTMP",
                table: "PERSON",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PERS_TRNG_APPR",
                table: "PERSON_TRAINING",
                column: "APPROVER_ID");

            migrationBuilder.CreateIndex(
                name: "PERS_TRNG_PRTY",
                table: "PERSON_TRAINING",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PERS_TRNG_TCTP",
                table: "PERSON_TRAINING",
                column: "TRAINING_CLASS_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PERS_TRNG_TRNRQ",
                table: "PERSON_TRAINING",
                column: "TRAINING_REQUEST_ID");

            migrationBuilder.CreateIndex(
                name: "PERS_TRNG_WREF",
                table: "PERSON_TRAINING",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "PRSN_TRNNG_TXCRTS",
                table: "PERSON_TRAINING",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRSN_TRNNG_TXSTMP",
                table: "PERSON_TRAINING",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "IX_Photos_AppUserLoginId",
                table: "Photos",
                column: "AppUserLoginId");

            migrationBuilder.CreateIndex(
                name: "PHSCL_INVNR_TXCRTS",
                table: "PHYSICAL_INVENTORY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PHSCL_INVNR_TXSTMP",
                table: "PHYSICAL_INVENTORY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PICKLIST_TXCRTS",
                table: "PICKLIST",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PICKLIST_TXSTMP",
                table: "PICKLIST",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PICKLST_FLTY",
                table: "PICKLIST",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "PICKLST_SMTP",
                table: "PICKLIST",
                column: "SHIPMENT_METHOD_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PICKLST_STTS",
                table: "PICKLIST",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "PCKLST_BIN_OISG",
                table: "PICKLIST_BIN",
                columns: new[] { "PRIMARY_ORDER_ID", "PRIMARY_SHIP_GROUP_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "PCKLST_BIN_PKLT",
                table: "PICKLIST_BIN",
                column: "PICKLIST_ID");

            migrationBuilder.CreateIndex(
                name: "PCKLST_BN_TXCRTS",
                table: "PICKLIST_BIN",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PCKLST_BN_TXSTMP",
                table: "PICKLIST_BIN",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PCKLST_ITM_BIN",
                table: "PICKLIST_ITEM",
                column: "PICKLIST_BIN_ID");

            migrationBuilder.CreateIndex(
                name: "PCKLST_ITM_INV",
                table: "PICKLIST_ITEM",
                column: "INVENTORY_ITEM_ID");

            migrationBuilder.CreateIndex(
                name: "PCKLST_ITM_ODIT",
                table: "PICKLIST_ITEM",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "PCKLST_ITM_OISG",
                table: "PICKLIST_ITEM",
                columns: new[] { "ORDER_ID", "SHIP_GROUP_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "PCKLST_ITM_TXCRTS",
                table: "PICKLIST_ITEM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PCKLST_ITM_TXSTMP",
                table: "PICKLIST_ITEM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PICKLST_ITM_STTS",
                table: "PICKLIST_ITEM",
                column: "ITEM_STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "PCKLST_RL_TXCRTS",
                table: "PICKLIST_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PCKLST_RL_TXSTMP",
                table: "PICKLIST_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PCKLST_RLE_CBUL",
                table: "PICKLIST_ROLE",
                column: "CREATED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "PCKLST_RLE_LMUL",
                table: "PICKLIST_ROLE",
                column: "LAST_MODIFIED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "PCKLST_RLE_PKLT",
                table: "PICKLIST_ROLE",
                column: "PICKLIST_ID");

            migrationBuilder.CreateIndex(
                name: "PCKLST_RLE_PRLE",
                table: "PICKLIST_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "PCKLST_STST_CUL",
                table: "PICKLIST_STATUS",
                column: "CHANGE_BY_USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "PCKLST_STST_FSI",
                table: "PICKLIST_STATUS",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "PCKLST_STST_PKLT",
                table: "PICKLIST_STATUS",
                column: "PICKLIST_ID");

            migrationBuilder.CreateIndex(
                name: "PCKLST_STST_TSI",
                table: "PICKLIST_STATUS",
                column: "STATUS_ID_TO");

            migrationBuilder.CreateIndex(
                name: "PCKLST_STTS_TXCRTS",
                table: "PICKLIST_STATUS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PCKLST_STTS_TXSTMP",
                table: "PICKLIST_STATUS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PCKLST_STHST_CUL",
                table: "PICKLIST_STATUS_HISTORY",
                column: "CHANGE_USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "PCKLST_STHST_FSI",
                table: "PICKLIST_STATUS_HISTORY",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "PCKLST_STHST_PKLT",
                table: "PICKLIST_STATUS_HISTORY",
                column: "PICKLIST_ID");

            migrationBuilder.CreateIndex(
                name: "PCKLST_STHST_SVC",
                table: "PICKLIST_STATUS_HISTORY",
                columns: new[] { "STATUS_ID", "STATUS_ID_TO" });

            migrationBuilder.CreateIndex(
                name: "PCKLST_STHST_TSI",
                table: "PICKLIST_STATUS_HISTORY",
                column: "STATUS_ID_TO");

            migrationBuilder.CreateIndex(
                name: "PCKT_STS_HSR_TXCRS",
                table: "PICKLIST_STATUS_HISTORY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PCKT_STS_HSR_TXSTP",
                table: "PICKLIST_STATUS_HISTORY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PLTFRM_TP_TXCRTS",
                table: "PLATFORM_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PLTFRM_TP_TXSTMP",
                table: "PLATFORM_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PORTAL_PAGE_TXCRTS",
                table: "PORTAL_PAGE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PORTAL_PAGE_TXSTMP",
                table: "PORTAL_PAGE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PortPage_PARENT",
                table: "PORTAL_PAGE",
                column: "PARENT_PORTAL_PAGE_ID");

            migrationBuilder.CreateIndex(
                name: "PORTPAGE_SECGRP",
                table: "PORTAL_PAGE",
                column: "SECURITY_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "PORTPAL_HELP_CONT",
                table: "PORTAL_PAGE",
                column: "HELP_CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "PRTL_PG_CLN_TXCRTS",
                table: "PORTAL_PAGE_COLUMN",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRTL_PG_CLN_TXSTMP",
                table: "PORTAL_PAGE_COLUMN",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRTL_PGCOL_PAGE",
                table: "PORTAL_PAGE_COLUMN",
                column: "PORTAL_PAGE_ID");

            migrationBuilder.CreateIndex(
                name: "PRL_PG_PRTT_TXCRTS",
                table: "PORTAL_PAGE_PORTLET",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRL_PG_PRTT_TXSTMP",
                table: "PORTAL_PAGE_PORTLET",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRTL_PGPTLT_PAGE",
                table: "PORTAL_PAGE_PORTLET",
                column: "PORTAL_PAGE_ID");

            migrationBuilder.CreateIndex(
                name: "PRTL_PGPTLT_PTLT",
                table: "PORTAL_PAGE_PORTLET",
                column: "PORTAL_PORTLET_ID");

            migrationBuilder.CreateIndex(
                name: "PRTL_PRTLT_TXCRTS",
                table: "PORTAL_PORTLET",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRTL_PRTLT_TXSTMP",
                table: "PORTAL_PORTLET",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRTLT_ATTRT_TXCRTS",
                table: "PORTLET_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRTLT_ATTRT_TXSTMP",
                table: "PORTLET_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PTLT_ATTR_PTLT",
                table: "PORTLET_ATTRIBUTE",
                column: "PORTAL_PORTLET_ID");

            migrationBuilder.CreateIndex(
                name: "PRTLT_CTGR_TXCRTS",
                table: "PORTLET_CATEGORY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRTLT_CTGR_TXSTMP",
                table: "PORTLET_CATEGORY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PPTLTCAT_PTLTCAT",
                table: "PORTLET_PORTLET_CATEGORY",
                column: "PORTLET_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "PPTLTCAT_PTPL",
                table: "PORTLET_PORTLET_CATEGORY",
                column: "PORTAL_PORTLET_ID");

            migrationBuilder.CreateIndex(
                name: "PRTT_PRT_CTR_TXCRS",
                table: "PORTLET_PORTLET_CATEGORY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRTT_PRT_CTR_TXSTP",
                table: "PORTLET_PORTLET_CATEGORY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ADDRESS1_IDX",
                table: "POSTAL_ADDRESS",
                column: "ADDRESS1");

            migrationBuilder.CreateIndex(
                name: "ADDRESS2_IDX",
                table: "POSTAL_ADDRESS",
                column: "ADDRESS2");

            migrationBuilder.CreateIndex(
                name: "CITY_IDX",
                table: "POSTAL_ADDRESS",
                column: "CITY");

            migrationBuilder.CreateIndex(
                name: "POST_ADDR_CGEO",
                table: "POSTAL_ADDRESS",
                column: "COUNTRY_GEO_ID");

            migrationBuilder.CreateIndex(
                name: "POST_ADDR_CITY",
                table: "POSTAL_ADDRESS",
                column: "CITY_GEO_ID");

            migrationBuilder.CreateIndex(
                name: "POST_ADDR_CMECH",
                table: "POSTAL_ADDRESS",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "POST_ADDR_CNTG",
                table: "POSTAL_ADDRESS",
                column: "COUNTY_GEO_ID");

            migrationBuilder.CreateIndex(
                name: "POST_ADDR_GEOPT",
                table: "POSTAL_ADDRESS",
                column: "GEO_POINT_ID");

            migrationBuilder.CreateIndex(
                name: "POST_ADDR_MNCP",
                table: "POSTAL_ADDRESS",
                column: "MUNICIPALITY_GEO_ID");

            migrationBuilder.CreateIndex(
                name: "POST_ADDR_PCGEO",
                table: "POSTAL_ADDRESS",
                column: "POSTAL_CODE_GEO_ID");

            migrationBuilder.CreateIndex(
                name: "POST_ADDR_SPGEO",
                table: "POSTAL_ADDRESS",
                column: "STATE_PROVINCE_GEO_ID");

            migrationBuilder.CreateIndex(
                name: "POSTAL_CODE_IDX",
                table: "POSTAL_ADDRESS",
                column: "POSTAL_CODE");

            migrationBuilder.CreateIndex(
                name: "PSTL_ADDRSS_TXCRTS",
                table: "POSTAL_ADDRESS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PSTL_ADDRSS_TXSTMP",
                table: "POSTAL_ADDRESS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "POST_ADDR_BNDRY",
                table: "POSTAL_ADDRESS_BOUNDARY",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "POST_ADDR_BNDRYGEO",
                table: "POSTAL_ADDRESS_BOUNDARY",
                column: "GEO_ID");

            migrationBuilder.CreateIndex(
                name: "PSL_ADDS_BNR_TXCRS",
                table: "POSTAL_ADDRESS_BOUNDARY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PSL_ADDS_BNR_TXSTP",
                table: "POSTAL_ADDRESS_BOUNDARY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRRT_TP_TXCRTS",
                table: "PRIORITY_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRRT_TP_TXSTMP",
                table: "PRIORITY_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRD_CTLG_TXCRTS",
                table: "PROD_CATALOG",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRD_CTLG_TXSTMP",
                table: "PROD_CATALOG",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRD_CTG_CTR_TXCRTS",
                table: "PROD_CATALOG_CATEGORY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRD_CTG_CTR_TXSTMP",
                table: "PROD_CATALOG_CATEGORY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_CC_CATALOG",
                table: "PROD_CATALOG_CATEGORY",
                column: "PROD_CATALOG_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_CC_CATEGORY",
                table: "PROD_CATALOG_CATEGORY",
                column: "PRODUCT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_CC_TYPE",
                table: "PROD_CATALOG_CATEGORY",
                column: "PROD_CATALOG_CATEGORY_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRD_CTG_CTR_TP_TXP",
                table: "PROD_CATALOG_CATEGORY_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRD_CTG_CTR_TP_TXS",
                table: "PROD_CATALOG_CATEGORY_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_PCCT_TYPEPAR",
                table: "PROD_CATALOG_CATEGORY_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRD_CTG_INV_FCT_TP",
                table: "PROD_CATALOG_INV_FACILITY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRD_CTG_INV_FCT_TS",
                table: "PROD_CATALOG_INV_FACILITY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_CIF_CATALOG",
                table: "PROD_CATALOG_INV_FACILITY",
                column: "PROD_CATALOG_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_CIF_FACILITY",
                table: "PROD_CATALOG_INV_FACILITY",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "PCATRLE_CATALOG",
                table: "PROD_CATALOG_ROLE",
                column: "PROD_CATALOG_ID");

            migrationBuilder.CreateIndex(
                name: "PCATRLE_PTYRLE",
                table: "PROD_CATALOG_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "PRD_CTLG_RL_TXCRTS",
                table: "PROD_CATALOG_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRD_CTLG_RL_TXSTMP",
                table: "PROD_CATALOG_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CIMT_CNT_CNT",
                table: "PROD_CONF_ITEM_CONTENT",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "CIMT_CNT_PCIT",
                table: "PROD_CONF_ITEM_CONTENT",
                column: "CONFIG_ITEM_ID");

            migrationBuilder.CreateIndex(
                name: "CIMT_CNT_TYPE",
                table: "PROD_CONF_ITEM_CONTENT",
                column: "CONF_ITEM_CONTENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRD_CNF_ITM_CNT_TP",
                table: "PROD_CONF_ITEM_CONTENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRD_CNF_ITM_CNT_TS",
                table: "PROD_CONF_ITEM_CONTENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PCICT_TYP_PARENT",
                table: "PROD_CONF_ITEM_CONTENT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRD_ITM_CNT_TP_TP",
                table: "PROD_CONF_ITEM_CONTENT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRD_ITM_CNT_TP_TS",
                table: "PROD_CONF_ITEM_CONTENT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRD_CD_CNT_MCH_TP",
                table: "PROD_PROMO_CODE_CONTACT_MECH",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRD_CD_CNT_MCH_TS",
                table: "PROD_PROMO_CODE_CONTACT_MECH",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_PRCDE_CM",
                table: "PROD_PROMO_CODE_CONTACT_MECH",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRCDE_PCD",
                table: "PROD_PROMO_CODE_CONTACT_MECH",
                column: "PRODUCT_PROMO_CODE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_AMOUNT_UOMT",
                table: "PRODUCT",
                column: "AMOUNT_UOM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_CB_USERLOGIN",
                table: "PRODUCT",
                column: "CREATED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "PROD_DEPTH_UOM",
                table: "PRODUCT",
                column: "DEPTH_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_DIAMTR_UOM",
                table: "PRODUCT",
                column: "DIAMETER_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_FACILITY",
                table: "PRODUCT",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_HEIGHT_UOM",
                table: "PRODUCT",
                column: "HEIGHT_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_INV_ITEM_TYPE",
                table: "PRODUCT",
                column: "INVENTORY_ITEM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_LMB_USERLOGIN",
                table: "PRODUCT",
                column: "LAST_MODIFIED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "PROD_ORG_GEO",
                table: "PRODUCT",
                column: "ORIGIN_GEO_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRIMARY_CAT",
                table: "PRODUCT",
                column: "PRIMARY_PRODUCT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_QUANT_UOM",
                table: "PRODUCT",
                column: "QUANTITY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_RATE_ENUM",
                table: "PRODUCT",
                column: "RATING_TYPE_ENUM");

            migrationBuilder.CreateIndex(
                name: "PROD_RQMT_ENUM",
                table: "PRODUCT",
                column: "REQUIREMENT_METHOD_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_SHBX_TYPE",
                table: "PRODUCT",
                column: "DEFAULT_SHIPMENT_BOX_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_TYPE",
                table: "PRODUCT",
                column: "PRODUCT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_VVMETHOD_ENUM",
                table: "PRODUCT",
                column: "VIRTUAL_VARIANT_METHOD_ENUM");

            migrationBuilder.CreateIndex(
                name: "PROD_WEIGHT_UOM",
                table: "PRODUCT",
                column: "WEIGHT_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_WIDTH_UOM",
                table: "PRODUCT",
                column: "WIDTH_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "PRODUCT_TXCRTS",
                table: "PRODUCT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRODUCT_TXSTMP",
                table: "PRODUCT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDCT_ASSC_TXCRTS",
                table: "PRODUCT_ASSOC",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDCT_ASSC_TXSTMP",
                table: "PRODUCT_ASSOC",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_ASSOC_APROD",
                table: "PRODUCT_ASSOC",
                column: "PRODUCT_ID_TO");

            migrationBuilder.CreateIndex(
                name: "PROD_ASSOC_CUSM",
                table: "PRODUCT_ASSOC",
                column: "ESTIMATE_CALC_METHOD");

            migrationBuilder.CreateIndex(
                name: "PROD_ASSOC_MPROD",
                table: "PRODUCT_ASSOC",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_ASSOC_RECINFO",
                table: "PRODUCT_ASSOC",
                column: "RECURRENCE_INFO_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_ASSOC_RTWE",
                table: "PRODUCT_ASSOC",
                column: "ROUTING_WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_ASSOC_TYPE",
                table: "PRODUCT_ASSOC",
                column: "PRODUCT_ASSOC_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_ASC_TP_TXCRTS",
                table: "PRODUCT_ASSOC_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_ASC_TP_TXSTMP",
                table: "PRODUCT_ASSOC_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_ASSOC_TYPEPAR",
                table: "PRODUCT_ASSOC_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDCT_ATTRT_TXCRTS",
                table: "PRODUCT_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDCT_ATTRT_TXSTMP",
                table: "PRODUCT_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_ATTR",
                table: "PRODUCT_ATTRIBUTE",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "AVG_COST_FACI",
                table: "PRODUCT_AVERAGE_COST",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "AVG_COST_PARTY",
                table: "PRODUCT_AVERAGE_COST",
                column: "ORGANIZATION_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "AVG_COST_PROD",
                table: "PRODUCT_AVERAGE_COST",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "AVG_COST_TYPE",
                table: "PRODUCT_AVERAGE_COST",
                column: "PRODUCT_AVERAGE_COST_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_AVG_CST_TXCRS",
                table: "PRODUCT_AVERAGE_COST",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_AVG_CST_TXSTP",
                table: "PRODUCT_AVERAGE_COST",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AVGCOST_TYPE_PAR",
                table: "PRODUCT_AVERAGE_COST_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_AVG_CST_TP_TXP",
                table: "PRODUCT_AVERAGE_COST_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_AVG_CST_TP_TXS",
                table: "PRODUCT_AVERAGE_COST_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRODCI_PROD",
                table: "PRODUCT_CALCULATED_INFO",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_CLCD_INF_TXCRS",
                table: "PRODUCT_CALCULATED_INFO",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_CLCD_INF_TXSTP",
                table: "PRODUCT_CALCULATED_INFO",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDCT_CTGR_TXCRTS",
                table: "PRODUCT_CATEGORY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDCT_CTGR_TXSTMP",
                table: "PRODUCT_CATEGORY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_CTGRY_PARENT",
                table: "PRODUCT_CATEGORY",
                column: "PRIMARY_PARENT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_CTGRY_TYPE",
                table: "PRODUCT_CATEGORY",
                column: "PRODUCT_CATEGORY_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_CTGRY_ATTR",
                table: "PRODUCT_CATEGORY_ATTRIBUTE",
                column: "PRODUCT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_CTR_ATTT_TXCRS",
                table: "PRODUCT_CATEGORY_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_CTR_ATTT_TXSTP",
                table: "PRODUCT_CATEGORY_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDCAT_CNT_CNT",
                table: "PRODUCT_CATEGORY_CONTENT",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "PRDCAT_CNT_CTTP",
                table: "PRODUCT_CATEGORY_CONTENT",
                columns: new[] { "PRODUCT_CATEGORY_ID", "PROD_CAT_CONTENT_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "PRDCAT_CNT_PRDCAT",
                table: "PRODUCT_CATEGORY_CONTENT",
                column: "PRODUCT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "PRDCAT_CNT_TYPE",
                table: "PRODUCT_CATEGORY_CONTENT",
                column: "PROD_CAT_CONTENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_CTR_CNT_TXCRS",
                table: "PRODUCT_CATEGORY_CONTENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_CTR_CNT_TXSTP",
                table: "PRODUCT_CATEGORY_CONTENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDCATCNT_TYP_PAR",
                table: "PRODUCT_CATEGORY_CONTENT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_CTR_CNT_TP_TXP",
                table: "PRODUCT_CATEGORY_CONTENT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_CTR_CNT_TP_TXS",
                table: "PRODUCT_CATEGORY_CONTENT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRD_CT_GLACT_GLACT",
                table: "PRODUCT_CATEGORY_GL_ACCOUNT",
                column: "GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "PRD_CT_GLACT_PCAT",
                table: "PRODUCT_CATEGORY_GL_ACCOUNT",
                column: "PRODUCT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "PRD_CT_GLACT_PRTY",
                table: "PRODUCT_CATEGORY_GL_ACCOUNT",
                column: "ORGANIZATION_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PRD_CT_GLACT_TYPE",
                table: "PRODUCT_CATEGORY_GL_ACCOUNT",
                column: "GL_ACCOUNT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_CTR_GL_ACT_TXP",
                table: "PRODUCT_CATEGORY_GL_ACCOUNT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_CTR_GL_ACT_TXS",
                table: "PRODUCT_CATEGORY_GL_ACCOUNT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_CTR_LNK_TXCRS",
                table: "PRODUCT_CATEGORY_LINK",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_CTR_LNK_TXSTP",
                table: "PRODUCT_CATEGORY_LINK",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_CLNK_CATEGORY",
                table: "PRODUCT_CATEGORY_LINK",
                column: "PRODUCT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_CLNK_LKTPENM",
                table: "PRODUCT_CATEGORY_LINK",
                column: "LINK_TYPE_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PRD_CMBR_PCT",
                table: "PRODUCT_CATEGORY_MEMBER",
                column: "PRODUCT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_CTR_MMR_TXCRS",
                table: "PRODUCT_CATEGORY_MEMBER",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_CTR_MMR_TXSTP",
                table: "PRODUCT_CATEGORY_MEMBER",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_CMBR_CATEGORY",
                table: "PRODUCT_CATEGORY_MEMBER",
                column: "PRODUCT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_CMBR_PRODUCT",
                table: "PRODUCT_CATEGORY_MEMBER",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_CTR_RL_TXCRTS",
                table: "PRODUCT_CATEGORY_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_CTR_RL_TXSTMP",
                table: "PRODUCT_CATEGORY_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_CRLE_CATEGORY",
                table: "PRODUCT_CATEGORY_ROLE",
                column: "PRODUCT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_CRLE_PTYRLE",
                table: "PRODUCT_CATEGORY_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "PRDCR_PARPC",
                table: "PRODUCT_CATEGORY_ROLLUP",
                column: "PARENT_PRODUCT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_CTR_RLP_TXCRS",
                table: "PRODUCT_CATEGORY_ROLLUP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_CTR_RLP_TXSTP",
                table: "PRODUCT_CATEGORY_ROLLUP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_CRLP_CURRENT",
                table: "PRODUCT_CATEGORY_ROLLUP",
                column: "PRODUCT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_CRLP_PARENT",
                table: "PRODUCT_CATEGORY_ROLLUP",
                column: "PARENT_PRODUCT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_CTR_TP_TXCRTS",
                table: "PRODUCT_CATEGORY_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_CTR_TP_TXSTMP",
                table: "PRODUCT_CATEGORY_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_CTGRY_TYPEPAR",
                table: "PRODUCT_CATEGORY_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_CTGRY_TATTR",
                table: "PRODUCT_CATEGORY_TYPE_ATTR",
                column: "PRODUCT_CATEGORY_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_CTR_TP_ATR_TXP",
                table: "PRODUCT_CATEGORY_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_CTR_TP_ATR_TXS",
                table: "PRODUCT_CATEGORY_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDCT_CNFG_TXCRTS",
                table: "PRODUCT_CONFIG",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDCT_CNFG_TXSTMP",
                table: "PRODUCT_CONFIG",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_CONF_ITEM",
                table: "PRODUCT_CONFIG",
                column: "CONFIG_ITEM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_CONF_PROD",
                table: "PRODUCT_CONFIG",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_CNG_CNG_TXCRS",
                table: "PRODUCT_CONFIG_CONFIG",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_CNG_CNG_TXSTP",
                table: "PRODUCT_CONFIG_CONFIG",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_CONFC_ITEM",
                table: "PRODUCT_CONFIG_CONFIG",
                column: "CONFIG_ITEM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_CONFC_OPTN",
                table: "PRODUCT_CONFIG_CONFIG",
                columns: new[] { "CONFIG_ITEM_ID", "CONFIG_OPTION_ID" });

            migrationBuilder.CreateIndex(
                name: "PRDT_CNG_ITM_TXCRS",
                table: "PRODUCT_CONFIG_ITEM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_CNG_ITM_TXSTP",
                table: "PRODUCT_CONFIG_ITEM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_CNG_OPN_TXCRS",
                table: "PRODUCT_CONFIG_OPTION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_CNG_OPN_TXSTP",
                table: "PRODUCT_CONFIG_OPTION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_OPTN_ITEM",
                table: "PRODUCT_CONFIG_OPTION",
                column: "CONFIG_ITEM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_OPTIA_ITEM",
                table: "PRODUCT_CONFIG_OPTION_IACTN",
                column: "CONFIG_ITEM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_OPTIA_ITMT",
                table: "PRODUCT_CONFIG_OPTION_IACTN",
                column: "CONFIG_ITEM_ID_TO");

            migrationBuilder.CreateIndex(
                name: "PROD_OPTIA_OPTN",
                table: "PRODUCT_CONFIG_OPTION_IACTN",
                columns: new[] { "CONFIG_ITEM_ID", "CONFIG_OPTION_ID" });

            migrationBuilder.CreateIndex(
                name: "PROD_OPTIA_OPTT",
                table: "PRODUCT_CONFIG_OPTION_IACTN",
                columns: new[] { "CONFIG_ITEM_ID_TO", "CONFIG_OPTION_ID_TO" });

            migrationBuilder.CreateIndex(
                name: "PRT_CNG_OPN_ICN_TP",
                table: "PRODUCT_CONFIG_OPTION_IACTN",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_CNG_OPN_ICN_TS",
                table: "PRODUCT_CONFIG_OPTION_IACTN",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_CNG_PRT_TXCRS",
                table: "PRODUCT_CONFIG_PRODUCT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_CNG_PRT_TXSTP",
                table: "PRODUCT_CONFIG_PRODUCT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_CONFP_ITEM",
                table: "PRODUCT_CONFIG_PRODUCT",
                column: "CONFIG_ITEM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_CONFP_OPTN",
                table: "PRODUCT_CONFIG_PRODUCT",
                columns: new[] { "CONFIG_ITEM_ID", "CONFIG_OPTION_ID" });

            migrationBuilder.CreateIndex(
                name: "PROD_CONFP_PROD",
                table: "PRODUCT_CONFIG_PRODUCT",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_CNG_STS_TXCRS",
                table: "PRODUCT_CONFIG_STATS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_CNG_STS_TXSTP",
                table: "PRODUCT_CONFIG_STATS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_CONFS_PROD",
                table: "PRODUCT_CONFIG_STATS",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PRDCT_CNTNT_TXCRTS",
                table: "PRODUCT_CONTENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDCT_CNTNT_TXSTMP",
                table: "PRODUCT_CONTENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_CNT_CNT",
                table: "PRODUCT_CONTENT",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_CNT_PROD",
                table: "PRODUCT_CONTENT",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_CNT_TYPE",
                table: "PRODUCT_CONTENT",
                column: "PRODUCT_CONTENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_CNT_URT",
                table: "PRODUCT_CONTENT",
                column: "USE_ROLE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_CNT_UTU",
                table: "PRODUCT_CONTENT",
                column: "USE_TIME_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "PRDCT_TYP_PARENT",
                table: "PRODUCT_CONTENT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_CNTT_TP_TXCRS",
                table: "PRODUCT_CONTENT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_CNTT_TP_TXSTP",
                table: "PRODUCT_CONTENT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PR_COS_CCC",
                table: "PRODUCT_COST_COMPONENT_CALC",
                column: "COST_COMPONENT_CALC_ID");

            migrationBuilder.CreateIndex(
                name: "PR_COS_CCT",
                table: "PRODUCT_COST_COMPONENT_CALC",
                column: "COST_COMPONENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PR_COS_COMPCALC",
                table: "PRODUCT_COST_COMPONENT_CALC",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_CST_CMT_CLC_TP",
                table: "PRODUCT_COST_COMPONENT_CALC",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_CST_CMT_CLC_TS",
                table: "PRODUCT_COST_COMPONENT_CALC",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDCT_FCLT_TXCRTS",
                table: "PRODUCT_FACILITY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDCT_FCLT_TXSTMP",
                table: "PRODUCT_FACILITY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_FAC_FAC",
                table: "PRODUCT_FACILITY",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_FAC_PROD",
                table: "PRODUCT_FACILITY",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_FAC_REP",
                table: "PRODUCT_FACILITY",
                column: "REPLENISH_METHOD_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_FAC_REQ",
                table: "PRODUCT_FACILITY",
                column: "REQUIREMENT_METHOD_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_FCT_ASC_TXCRS",
                table: "PRODUCT_FACILITY_ASSOC",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_FCT_ASC_TXSTP",
                table: "PRODUCT_FACILITY_ASSOC",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRFACASSOC_FAC",
                table: "PRODUCT_FACILITY_ASSOC",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "PRFACASSOC_FACTO",
                table: "PRODUCT_FACILITY_ASSOC",
                column: "FACILITY_ID_TO");

            migrationBuilder.CreateIndex(
                name: "PRFACASSOC_PRO",
                table: "PRODUCT_FACILITY_ASSOC",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PRFACASSOC_TYPE",
                table: "PRODUCT_FACILITY_ASSOC",
                column: "FACILITY_ASSOC_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_FCT_LCN_TXCRS",
                table: "PRODUCT_FACILITY_LOCATION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_FCT_LCN_TXSTP",
                table: "PRODUCT_FACILITY_LOCATION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_FCL_FCL",
                table: "PRODUCT_FACILITY_LOCATION",
                columns: new[] { "FACILITY_ID", "LOCATION_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "PROD_FCL_PROD",
                table: "PRODUCT_FACILITY_LOCATION",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PRDCT_FTR_TXCRTS",
                table: "PRODUCT_FEATURE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDCT_FTR_TXSTMP",
                table: "PRODUCT_FEATURE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_FEAT_CATEGORY",
                table: "PRODUCT_FEATURE",
                column: "PRODUCT_FEATURE_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_FEAT_TYPE",
                table: "PRODUCT_FEATURE",
                column: "PRODUCT_FEATURE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_FEAT_UOM",
                table: "PRODUCT_FEATURE",
                column: "UOM_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_FTR_APL_TXCRS",
                table: "PRODUCT_FEATURE_APPL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_FTR_APL_TXSTP",
                table: "PRODUCT_FEATURE_APPL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_FAPPL_FEATURE",
                table: "PRODUCT_FEATURE_APPL",
                column: "PRODUCT_FEATURE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_FAPPL_PRODUCT",
                table: "PRODUCT_FEATURE_APPL",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_FAPPL_TYPE",
                table: "PRODUCT_FEATURE_APPL",
                column: "PRODUCT_FEATURE_APPL_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_FAPPA_FEATAPP",
                table: "PRODUCT_FEATURE_APPL_ATTR",
                columns: new[] { "PRODUCT_ID", "PRODUCT_FEATURE_ID", "FROM_DATE" });

            migrationBuilder.CreateIndex(
                name: "PROD_FAPPA_FEATURE",
                table: "PRODUCT_FEATURE_APPL_ATTR",
                column: "PRODUCT_FEATURE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_FAPPA_PRODUCT",
                table: "PRODUCT_FEATURE_APPL_ATTR",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_FTR_APL_ATR_TP",
                table: "PRODUCT_FEATURE_APPL_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_FTR_APL_ATR_TS",
                table: "PRODUCT_FEATURE_APPL_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_FAPPL_TYPPAR",
                table: "PRODUCT_FEATURE_APPL_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_FTR_APL_TP_TXP",
                table: "PRODUCT_FEATURE_APPL_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_FTR_APL_TP_TXS",
                table: "PRODUCT_FEATURE_APPL_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_FCGAPL_CAT",
                table: "PRODUCT_FEATURE_CAT_GRP_APPL",
                column: "PRODUCT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_FCGAPL_FGRP",
                table: "PRODUCT_FEATURE_CAT_GRP_APPL",
                column: "PRODUCT_FEATURE_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_CT_GRP_APL_TP",
                table: "PRODUCT_FEATURE_CAT_GRP_APPL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_CT_GRP_APL_TS",
                table: "PRODUCT_FEATURE_CAT_GRP_APPL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_FTR_CTR_TXCRS",
                table: "PRODUCT_FEATURE_CATEGORY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_FTR_CTR_TXSTP",
                table: "PRODUCT_FEATURE_CATEGORY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_FEAT_CAT_PAR",
                table: "PRODUCT_FEATURE_CATEGORY",
                column: "PARENT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_FCAPPL_CAT",
                table: "PRODUCT_FEATURE_CATEGORY_APPL",
                column: "PRODUCT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_FCAPPL_FCAT",
                table: "PRODUCT_FEATURE_CATEGORY_APPL",
                column: "PRODUCT_FEATURE_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_FTR_CTR_APL_TP",
                table: "PRODUCT_FEATURE_CATEGORY_APPL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_FTR_CTR_APL_TS",
                table: "PRODUCT_FEATURE_CATEGORY_APPL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PFEAT_DR_DATRES",
                table: "PRODUCT_FEATURE_DATA_RESOURCE",
                column: "DATA_RESOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "PFEAT_DR_FEATURE",
                table: "PRODUCT_FEATURE_DATA_RESOURCE",
                column: "PRODUCT_FEATURE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_FTR_DT_RSC_TXP",
                table: "PRODUCT_FEATURE_DATA_RESOURCE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_FTR_DT_RSC_TXS",
                table: "PRODUCT_FEATURE_DATA_RESOURCE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_FTR_GRP_TXCRS",
                table: "PRODUCT_FEATURE_GROUP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_FTR_GRP_TXSTP",
                table: "PRODUCT_FEATURE_GROUP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_FGAPP_FEATURE",
                table: "PRODUCT_FEATURE_GROUP_APPL",
                column: "PRODUCT_FEATURE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_FGAPP_PRODUCT",
                table: "PRODUCT_FEATURE_GROUP_APPL",
                column: "PRODUCT_FEATURE_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_FTR_GRP_APL_TP",
                table: "PRODUCT_FEATURE_GROUP_APPL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_FTR_GRP_APL_TS",
                table: "PRODUCT_FEATURE_GROUP_APPL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_FTR_ICN_TXCRS",
                table: "PRODUCT_FEATURE_IACTN",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_FTR_ICN_TXSTP",
                table: "PRODUCT_FEATURE_IACTN",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_FICTN_AFEAT",
                table: "PRODUCT_FEATURE_IACTN",
                column: "PRODUCT_FEATURE_ID_TO");

            migrationBuilder.CreateIndex(
                name: "PROD_FICTN_MFEAT",
                table: "PRODUCT_FEATURE_IACTN",
                column: "PRODUCT_FEATURE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_FICTN_TYPE",
                table: "PRODUCT_FEATURE_IACTN",
                column: "PRODUCT_FEATURE_IACTN_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_FICTN_TYPPAR",
                table: "PRODUCT_FEATURE_IACTN_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_FTR_ICN_TP_TXP",
                table: "PRODUCT_FEATURE_IACTN_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_FTR_ICN_TP_TXS",
                table: "PRODUCT_FEATURE_IACTN_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRD_FT_PRC_GENLKP",
                table: "PRODUCT_FEATURE_PRICE",
                columns: new[] { "PRODUCT_FEATURE_ID", "CURRENCY_UOM_ID" });

            migrationBuilder.CreateIndex(
                name: "PRDT_FTR_PRC_TXCRS",
                table: "PRODUCT_FEATURE_PRICE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_FTR_PRC_TXSTP",
                table: "PRODUCT_FEATURE_PRICE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_F_PRICE_CBUL",
                table: "PRODUCT_FEATURE_PRICE",
                column: "CREATED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "PROD_F_PRICE_CUOM",
                table: "PRODUCT_FEATURE_PRICE",
                column: "CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_F_PRICE_LMBUL",
                table: "PRODUCT_FEATURE_PRICE",
                column: "LAST_MODIFIED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "PROD_F_PRICE_TYPE",
                table: "PRODUCT_FEATURE_PRICE",
                column: "PRODUCT_PRICE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_FTR_TP_TXCRTS",
                table: "PRODUCT_FEATURE_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_FTR_TP_TXSTMP",
                table: "PRODUCT_FEATURE_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_FEAT_TYPPAR",
                table: "PRODUCT_FEATURE_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDGEO_ENUM",
                table: "PRODUCT_GEO",
                column: "PRODUCT_GEO_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PRDGEO_GEO",
                table: "PRODUCT_GEO",
                column: "GEO_ID");

            migrationBuilder.CreateIndex(
                name: "PRDGEO_PRODUCT",
                table: "PRODUCT_GEO",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PRODUCT_GEO_TXCRTS",
                table: "PRODUCT_GEO",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRODUCT_GEO_TXSTMP",
                table: "PRODUCT_GEO",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_GL_ACCT_TXCRS",
                table: "PRODUCT_GL_ACCOUNT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_GL_ACCT_TXSTP",
                table: "PRODUCT_GL_ACCOUNT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_GLACT_GLACT",
                table: "PRODUCT_GL_ACCOUNT",
                column: "GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_GLACT_PARTY",
                table: "PRODUCT_GL_ACCOUNT",
                column: "ORGANIZATION_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_GLACT_PROD",
                table: "PRODUCT_GL_ACCOUNT",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_GLACT_TYPE",
                table: "PRODUCT_GL_ACCOUNT",
                column: "GL_ACCOUNT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "GROUP_ORDER_JOB",
                table: "PRODUCT_GROUP_ORDER",
                column: "JOB_ID");

            migrationBuilder.CreateIndex(
                name: "GROUP_ORDER_STATUS",
                table: "PRODUCT_GROUP_ORDER",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_GRP_ORR_TXCRS",
                table: "PRODUCT_GROUP_ORDER",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_GRP_ORR_TXSTP",
                table: "PRODUCT_GROUP_ORDER",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_GROUP_ORDER",
                table: "PRODUCT_GROUP_ORDER",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_KWD_NW_TXCRTS",
                table: "PRODUCT_KEYWORD_NEW",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_KWD_NW_TXSTMP",
                table: "PRODUCT_KEYWORD_NEW",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_KWD_KWD_NEW",
                table: "PRODUCT_KEYWORD_NEW",
                column: "KEYWORD");

            migrationBuilder.CreateIndex(
                name: "PROD_KWD_PROD_NEW",
                table: "PRODUCT_KEYWORD_NEW",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_KWD_STTS",
                table: "PRODUCT_KEYWORD_NEW",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_KWD_TYPE",
                table: "PRODUCT_KEYWORD_NEW",
                column: "KEYWORD_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDCT_MNT_TXCRTS",
                table: "PRODUCT_MAINT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDCT_MNT_TXSTMP",
                table: "PRODUCT_MAINT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRODMNT_INTUOM",
                table: "PRODUCT_MAINT",
                column: "INTERVAL_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "PRODMNT_MNTTYP",
                table: "PRODUCT_MAINT",
                column: "PRODUCT_MAINT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRODMNT_PDMTTYP",
                table: "PRODUCT_MAINT",
                column: "INTERVAL_METER_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRODMNT_PROD",
                table: "PRODUCT_MAINT",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PRODMNT_TPLHWE",
                table: "PRODUCT_MAINT",
                column: "MAINT_TEMPLATE_WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_MNT_TP_TXCRTS",
                table: "PRODUCT_MAINT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_MNT_TP_TXSTMP",
                table: "PRODUCT_MAINT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRODMNT_TYPE_PAR",
                table: "PRODUCT_MAINT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRODUCT_FEAT",
                table: "PRODUCT_MANUFACTURING_RULE",
                column: "PRODUCT_FEATURE");

            migrationBuilder.CreateIndex(
                name: "PRODUCT_FOR",
                table: "PRODUCT_MANUFACTURING_RULE",
                column: "PRODUCT_ID_FOR");

            migrationBuilder.CreateIndex(
                name: "PRODUCT_IN",
                table: "PRODUCT_MANUFACTURING_RULE",
                column: "PRODUCT_ID_IN");

            migrationBuilder.CreateIndex(
                name: "PRODUCT_PARENT",
                table: "PRODUCT_MANUFACTURING_RULE",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PRODUCT_SUBST",
                table: "PRODUCT_MANUFACTURING_RULE",
                column: "PRODUCT_ID_IN_SUBST");

            migrationBuilder.CreateIndex(
                name: "PRT_MNFCTG_RL_TXCS",
                table: "PRODUCT_MANUFACTURING_RULE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_MNFCTG_RL_TXSP",
                table: "PRODUCT_MANUFACTURING_RULE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDCT_MTR_TXCRTS",
                table: "PRODUCT_METER",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDCT_MTR_TXSTMP",
                table: "PRODUCT_METER",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRODMTR_MTRTYP",
                table: "PRODUCT_METER",
                column: "PRODUCT_METER_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRODMTR_MTRUOM",
                table: "PRODUCT_METER",
                column: "METER_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "PRODMTR_PROD",
                table: "PRODUCT_METER",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_MTR_TP_TXCRTS",
                table: "PRODUCT_METER_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_MTR_TP_TXSTMP",
                table: "PRODUCT_METER_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRODMTRTP_DUOM",
                table: "PRODUCT_METER_TYPE",
                column: "DEFAULT_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_ORR_ITM_TXCRS",
                table: "PRODUCT_ORDER_ITEM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_ORR_ITM_TXSTP",
                table: "PRODUCT_ORDER_ITEM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_OITEM_ENOHDR",
                table: "PRODUCT_ORDER_ITEM",
                column: "ENGAGEMENT_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_OITEM_ENOITM",
                table: "PRODUCT_ORDER_ITEM",
                columns: new[] { "ENGAGEMENT_ID", "ENGAGEMENT_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "PROD_OITEM_OHDR",
                table: "PRODUCT_ORDER_ITEM",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_OITEM_OITEM",
                table: "PRODUCT_ORDER_ITEM",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "PROD_OITEM_PROD",
                table: "PRODUCT_ORDER_ITEM",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PMT_PMT",
                table: "PRODUCT_PAYMENT_METHOD_TYPE",
                column: "PAYMENT_METHOD_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PMT_PPRP",
                table: "PRODUCT_PAYMENT_METHOD_TYPE",
                column: "PRODUCT_PRICE_PURPOSE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PMT_PROD",
                table: "PRODUCT_PAYMENT_METHOD_TYPE",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_PMT_MTD_TP_TXP",
                table: "PRODUCT_PAYMENT_METHOD_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_PMT_MTD_TP_TXS",
                table: "PRODUCT_PAYMENT_METHOD_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRD_PRC_GENLKP",
                table: "PRODUCT_PRICE",
                columns: new[] { "PRODUCT_ID", "PRODUCT_PRICE_TYPE_ID", "CURRENCY_UOM_ID" });

            migrationBuilder.CreateIndex(
                name: "PRDCT_PRC_TXCRTS",
                table: "PRODUCT_PRICE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDCT_PRC_TXSTMP",
                table: "PRODUCT_PRICE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_PRC_TAXGEO",
                table: "PRODUCT_PRICE",
                column: "TAX_AUTH_GEO_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRC_TAXPTY",
                table: "PRODUCT_PRICE",
                column: "TAX_AUTH_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRICE_CBUL",
                table: "PRODUCT_PRICE",
                column: "CREATED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "PROD_PRICE_CMET",
                table: "PRODUCT_PRICE",
                column: "CUSTOM_PRICE_CALC_SERVICE");

            migrationBuilder.CreateIndex(
                name: "PROD_PRICE_CUOM",
                table: "PRODUCT_PRICE",
                column: "CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRICE_LMBUL",
                table: "PRODUCT_PRICE",
                column: "LAST_MODIFIED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "PROD_PRICE_PROD",
                table: "PRODUCT_PRICE",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRICE_PSTG",
                table: "PRODUCT_PRICE",
                column: "PRODUCT_STORE_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRICE_PURP",
                table: "PRODUCT_PRICE",
                column: "PRODUCT_PRICE_PURPOSE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRICE_TUOM",
                table: "PRODUCT_PRICE",
                column: "TERM_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRICE_TYPE",
                table: "PRODUCT_PRICE",
                column: "PRODUCT_PRICE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRC_ACN_TXCRS",
                table: "PRODUCT_PRICE_ACTION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRC_ACN_TXSTP",
                table: "PRODUCT_PRICE_ACTION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_PCACT_RL",
                table: "PRODUCT_PRICE_ACTION",
                column: "PRODUCT_PRICE_RULE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PCACT_TYPE",
                table: "PRODUCT_PRICE_ACTION",
                column: "PRODUCT_PRICE_ACTION_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_PRC_ACN_TP_TXP",
                table: "PRODUCT_PRICE_ACTION_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_PRC_ACN_TP_TXS",
                table: "PRODUCT_PRICE_ACTION_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_PRC_AT_NTC_TXP",
                table: "PRODUCT_PRICE_AUTO_NOTICE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_PRC_AT_NTC_TXS",
                table: "PRODUCT_PRICE_AUTO_NOTICE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRC_CHG_TXCRS",
                table: "PRODUCT_PRICE_CHANGE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRC_CHG_TXSTP",
                table: "PRODUCT_PRICE_CHANGE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_PRCHNG_CHUL",
                table: "PRODUCT_PRICE_CHANGE",
                column: "CHANGED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRC_CND_TXCRS",
                table: "PRODUCT_PRICE_COND",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRC_CND_TXSTP",
                table: "PRODUCT_PRICE_COND",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_PCCOND_INENUM",
                table: "PRODUCT_PRICE_COND",
                column: "INPUT_PARAM_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PCCOND_OPENUM",
                table: "PRODUCT_PRICE_COND",
                column: "OPERATOR_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PCCOND_RULE",
                table: "PRODUCT_PRICE_COND",
                column: "PRODUCT_PRICE_RULE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRC_PRS_TXCRS",
                table: "PRODUCT_PRICE_PURPOSE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRC_PRS_TXSTP",
                table: "PRODUCT_PRICE_PURPOSE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRC_RL_TXCRTS",
                table: "PRODUCT_PRICE_RULE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRC_RL_TXSTMP",
                table: "PRODUCT_PRICE_RULE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRC_TP_TXCRTS",
                table: "PRODUCT_PRICE_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRC_TP_TXSTMP",
                table: "PRODUCT_PRICE_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDCT_PRM_TXCRTS",
                table: "PRODUCT_PROMO",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDCT_PRM_TXSTMP",
                table: "PRODUCT_PROMO",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_PRMO_CUL",
                table: "PRODUCT_PROMO",
                column: "CREATED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "PROD_PRMO_LMCUL",
                table: "PRODUCT_PROMO",
                column: "LAST_MODIFIED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "PROD_PRMO_OPA",
                table: "PRODUCT_PROMO",
                column: "OVERRIDE_ORG_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRM_ACN_TXCRS",
                table: "PRODUCT_PROMO_ACTION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRM_ACN_TXSTP",
                table: "PRODUCT_PROMO_ACTION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_PRACT_CMET",
                table: "PRODUCT_PROMO_ACTION",
                column: "CUSTOM_METHOD_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRACT_ENUM",
                table: "PRODUCT_PROMO_ACTION",
                column: "PRODUCT_PROMO_ACTION_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRACT_OATYPE",
                table: "PRODUCT_PROMO_ACTION",
                column: "ORDER_ADJUSTMENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRACT_PR",
                table: "PRODUCT_PROMO_ACTION",
                column: "PRODUCT_PROMO_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRACT_RL",
                table: "PRODUCT_PROMO_ACTION",
                columns: new[] { "PRODUCT_PROMO_ID", "PRODUCT_PROMO_RULE_ID" });

            migrationBuilder.CreateIndex(
                name: "PRDT_PRM_CTR_TXCRS",
                table: "PRODUCT_PROMO_CATEGORY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRM_CTR_TXSTP",
                table: "PRODUCT_PROMO_CATEGORY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_PRCAT_ENUM",
                table: "PRODUCT_PROMO_CATEGORY",
                column: "PRODUCT_PROMO_APPL_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRCAT_PRCAT",
                table: "PRODUCT_PROMO_CATEGORY",
                column: "PRODUCT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRCAT_PROMO",
                table: "PRODUCT_PROMO_CATEGORY",
                column: "PRODUCT_PROMO_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRM_CD_TXCRTS",
                table: "PRODUCT_PROMO_CODE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRM_CD_TXSTMP",
                table: "PRODUCT_PROMO_CODE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_PRCOD_CUL",
                table: "PRODUCT_PROMO_CODE",
                column: "CREATED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "PROD_PRCOD_LMCUL",
                table: "PRODUCT_PROMO_CODE",
                column: "LAST_MODIFIED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "PROD_PRCOD_PROMO",
                table: "PRODUCT_PROMO_CODE",
                column: "PRODUCT_PROMO_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRCDE_OPCD",
                table: "PRODUCT_PROMO_CODE_EMAIL",
                column: "PRODUCT_PROMO_CODE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_PRM_CD_EML_TXP",
                table: "PRODUCT_PROMO_CODE_EMAIL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_PRM_CD_EML_TXS",
                table: "PRODUCT_PROMO_CODE_EMAIL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_PRCDP_PCD",
                table: "PRODUCT_PROMO_CODE_PARTY",
                column: "PRODUCT_PROMO_CODE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRCDP_PRTY",
                table: "PRODUCT_PROMO_CODE_PARTY",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_PRM_CD_PRT_TXP",
                table: "PRODUCT_PROMO_CODE_PARTY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_PRM_CD_PRT_TXS",
                table: "PRODUCT_PROMO_CODE_PARTY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRM_CND_TXCRS",
                table: "PRODUCT_PROMO_COND",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRM_CND_TXSTP",
                table: "PRODUCT_PROMO_COND",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_PRCOND_CMETH",
                table: "PRODUCT_PROMO_COND",
                column: "CUSTOM_METHOD_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRCOND_INENUM",
                table: "PRODUCT_PROMO_COND",
                column: "INPUT_PARAM_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRCOND_OPENUM",
                table: "PRODUCT_PROMO_COND",
                column: "OPERATOR_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRCOND_PROMO",
                table: "PRODUCT_PROMO_COND",
                column: "PRODUCT_PROMO_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRCOND_RULE",
                table: "PRODUCT_PROMO_COND",
                columns: new[] { "PRODUCT_PROMO_ID", "PRODUCT_PROMO_RULE_ID" });

            migrationBuilder.CreateIndex(
                name: "PRDT_PRM_CNT_TXCRS",
                table: "PRODUCT_PROMO_CONTENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRM_CNT_TXSTP",
                table: "PRODUCT_PROMO_CONTENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRODPR_CNT_CNT",
                table: "PRODUCT_PROMO_CONTENT",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "PRODPR_CNT_PROD_PR",
                table: "PRODUCT_PROMO_CONTENT",
                column: "PRODUCT_PROMO_ID");

            migrationBuilder.CreateIndex(
                name: "PRODPR_CNT_TYPE",
                table: "PRODUCT_PROMO_CONTENT",
                column: "PRODUCT_PROMO_CONTENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRM_PRT_TXCRS",
                table: "PRODUCT_PROMO_PRODUCT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRM_PRT_TXSTP",
                table: "PRODUCT_PROMO_PRODUCT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_PRPRD_ENUM",
                table: "PRODUCT_PROMO_PRODUCT",
                column: "PRODUCT_PROMO_APPL_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRPRD_PROD",
                table: "PRODUCT_PROMO_PRODUCT",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRPRD_PROMO",
                table: "PRODUCT_PROMO_PRODUCT",
                column: "PRODUCT_PROMO_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRM_RL_TXCRTS",
                table: "PRODUCT_PROMO_RULE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRM_RL_TXSTMP",
                table: "PRODUCT_PROMO_RULE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_PRRLE_PROMO",
                table: "PRODUCT_PROMO_RULE",
                column: "PRODUCT_PROMO_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRM_US_TXCRTS",
                table: "PRODUCT_PROMO_USE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_PRM_US_TXSTMP",
                table: "PRODUCT_PROMO_USE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_PRUSE_CODE",
                table: "PRODUCT_PROMO_USE",
                column: "PRODUCT_PROMO_CODE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRUSE_ORDR",
                table: "PRODUCT_PROMO_USE",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRUSE_PROMO",
                table: "PRODUCT_PROMO_USE",
                column: "PRODUCT_PROMO_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_PRUSE_PTY",
                table: "PRODUCT_PROMO_USE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PRODPRUSE_PCDPTY",
                table: "PRODUCT_PROMO_USE",
                columns: new[] { "PRODUCT_PROMO_CODE_ID", "PARTY_ID" });

            migrationBuilder.CreateIndex(
                name: "PRODPRUSE_PRMPTY",
                table: "PRODUCT_PROMO_USE",
                columns: new[] { "PRODUCT_PROMO_ID", "PARTY_ID" });

            migrationBuilder.CreateIndex(
                name: "PRDCT_RVW_TXCRTS",
                table: "PRODUCT_REVIEW",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDCT_RVW_TXSTMP",
                table: "PRODUCT_REVIEW",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_REVIEW_PRDSTR",
                table: "PRODUCT_REVIEW",
                column: "PRODUCT_STORE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_REVIEW_PROD",
                table: "PRODUCT_REVIEW",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_REVIEW_STTS",
                table: "PRODUCT_REVIEW",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_REVIEW_ULH",
                table: "PRODUCT_REVIEW",
                column: "USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "PRDCT_RL_TXCRTS",
                table: "PRODUCT_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDCT_RL_TXSTMP",
                table: "PRODUCT_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_RLE_PRODUCT",
                table: "PRODUCT_ROLE",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_RLE_PTYRLE",
                table: "PRODUCT_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "PROD_SCHRSI_RES",
                table: "PRODUCT_SEARCH_CONSTRAINT",
                column: "PRODUCT_SEARCH_RESULT_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_SRH_CNSTT_TXCS",
                table: "PRODUCT_SEARCH_CONSTRAINT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_SRH_CNSTT_TXSP",
                table: "PRODUCT_SEARCH_CONSTRAINT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_SRH_RST_TXCRS",
                table: "PRODUCT_SEARCH_RESULT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_SRH_RST_TXSTP",
                table: "PRODUCT_SEARCH_RESULT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDCT_STR_TXCRTS",
                table: "PRODUCT_STORE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDCT_STR_TXSTMP",
                table: "PRODUCT_STORE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_STR_CURUOM",
                table: "PRODUCT_STORE",
                column: "DEFAULT_CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_STR_DIAPSTS",
                table: "PRODUCT_STORE",
                column: "DIGITAL_ITEM_APPROVED_STATUS");

            migrationBuilder.CreateIndex(
                name: "PROD_STR_FACILITY",
                table: "PRODUCT_STORE",
                column: "INVENTORY_FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_STR_HAPSTS",
                table: "PRODUCT_STORE",
                column: "HEADER_APPROVED_STATUS");

            migrationBuilder.CreateIndex(
                name: "PROD_STR_HCNSTS",
                table: "PRODUCT_STORE",
                column: "HEADER_CANCEL_STATUS");

            migrationBuilder.CreateIndex(
                name: "PROD_STR_HDCSTS",
                table: "PRODUCT_STORE",
                column: "HEADER_DECLINED_STATUS");

            migrationBuilder.CreateIndex(
                name: "PROD_STR_IAPSTS",
                table: "PRODUCT_STORE",
                column: "ITEM_APPROVED_STATUS");

            migrationBuilder.CreateIndex(
                name: "PROD_STR_ICNSTS",
                table: "PRODUCT_STORE",
                column: "ITEM_CANCEL_STATUS");

            migrationBuilder.CreateIndex(
                name: "PROD_STR_IDCSTS",
                table: "PRODUCT_STORE",
                column: "ITEM_DECLINED_STATUS");

            migrationBuilder.CreateIndex(
                name: "PROD_STR_PAYTOPTY",
                table: "PRODUCT_STORE",
                column: "PAY_TO_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_STR_PRSTRGP",
                table: "PRODUCT_STORE",
                column: "PRIMARY_STORE_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_STR_RORDENUM",
                table: "PRODUCT_STORE",
                column: "RESERVE_ORDER_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_STR_RQMTENUM",
                table: "PRODUCT_STORE",
                column: "REQUIREMENT_METHOD_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_STR_SALECHN",
                table: "PRODUCT_STORE",
                column: "DEFAULT_SALES_CHANNEL_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_STR_STRCRDACT",
                table: "PRODUCT_STORE",
                column: "STORE_CREDIT_ACCOUNT_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_STR_VATTXA",
                table: "PRODUCT_STORE",
                columns: new[] { "VAT_TAX_AUTH_GEO_ID", "VAT_TAX_AUTH_PARTY_ID" });

            migrationBuilder.CreateIndex(
                name: "PRDT_STR_CTG_TXCRS",
                table: "PRODUCT_STORE_CATALOG",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_STR_CTG_TXSTP",
                table: "PRODUCT_STORE_CATALOG",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PS_CAT_CATALOG",
                table: "PRODUCT_STORE_CATALOG",
                column: "PROD_CATALOG_ID");

            migrationBuilder.CreateIndex(
                name: "PS_CAT_PRDSTR",
                table: "PRODUCT_STORE_CATALOG",
                column: "PRODUCT_STORE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDSTREM_ENUM",
                table: "PRODUCT_STORE_EMAIL_SETTING",
                column: "EMAIL_TYPE");

            migrationBuilder.CreateIndex(
                name: "PRDSTREM_PRDS",
                table: "PRODUCT_STORE_EMAIL_SETTING",
                column: "PRODUCT_STORE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_STR_EML_STG_TP",
                table: "PRODUCT_STORE_EMAIL_SETTING",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_STR_EML_STG_TS",
                table: "PRODUCT_STORE_EMAIL_SETTING",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDSTRFAC_FAC",
                table: "PRODUCT_STORE_FACILITY",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "PRDSTRFAC_PRDS",
                table: "PRODUCT_STORE_FACILITY",
                column: "PRODUCT_STORE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_STR_FCT_TXCRS",
                table: "PRODUCT_STORE_FACILITY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_STR_FCT_TXSTP",
                table: "PRODUCT_STORE_FACILITY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRSTFNAC_FARPMTD",
                table: "PRODUCT_STORE_FIN_ACT_SETTING",
                column: "REPLENISH_METHOD_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PRSTFNAC_FNACTP",
                table: "PRODUCT_STORE_FIN_ACT_SETTING",
                column: "FIN_ACCOUNT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRSTFNAC_PRDS",
                table: "PRODUCT_STORE_FIN_ACT_SETTING",
                column: "PRODUCT_STORE_ID");

            migrationBuilder.CreateIndex(
                name: "PRSTFNAC_SRVY",
                table: "PRODUCT_STORE_FIN_ACT_SETTING",
                column: "PURCHASE_SURVEY_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_FN_ACT_STG_TP",
                table: "PRODUCT_STORE_FIN_ACT_SETTING",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_FN_ACT_STG_TS",
                table: "PRODUCT_STORE_FIN_ACT_SETTING",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDSTR_GP_PGRP",
                table: "PRODUCT_STORE_GROUP",
                column: "PRIMARY_PARENT_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "PRDSTR_GP_TYPE",
                table: "PRODUCT_STORE_GROUP",
                column: "PRODUCT_STORE_GROUP_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_STR_GRP_TXCRS",
                table: "PRODUCT_STORE_GROUP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_STR_GRP_TXSTP",
                table: "PRODUCT_STORE_GROUP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDSTR_MEM_PRDSTR",
                table: "PRODUCT_STORE_GROUP_MEMBER",
                column: "PRODUCT_STORE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDSTR_MEM_PSGRP",
                table: "PRODUCT_STORE_GROUP_MEMBER",
                column: "PRODUCT_STORE_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_STR_GRP_MMR_TP",
                table: "PRODUCT_STORE_GROUP_MEMBER",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_STR_GRP_MMR_TS",
                table: "PRODUCT_STORE_GROUP_MEMBER",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_STR_GRP_RL_TXP",
                table: "PRODUCT_STORE_GROUP_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_STR_GRP_RL_TXS",
                table: "PRODUCT_STORE_GROUP_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PSGRP_RLE_PSGP",
                table: "PRODUCT_STORE_GROUP_ROLE",
                column: "PRODUCT_STORE_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "PSGRP_RLE_PTRLE",
                table: "PRODUCT_STORE_GROUP_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "PRT_STR_GRP_RLP_TP",
                table: "PRODUCT_STORE_GROUP_ROLLUP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_STR_GRP_RLP_TS",
                table: "PRODUCT_STORE_GROUP_ROLLUP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PSGRP_RLP_CURRENT",
                table: "PRODUCT_STORE_GROUP_ROLLUP",
                column: "PRODUCT_STORE_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "PSGRP_RLP_PARENT",
                table: "PRODUCT_STORE_GROUP_ROLLUP",
                column: "PARENT_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_STR_GRP_TP_TXP",
                table: "PRODUCT_STORE_GROUP_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_STR_GRP_TP_TXS",
                table: "PRODUCT_STORE_GROUP_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDSTRKWO_ENM",
                table: "PRODUCT_STORE_KEYWORD_OVRD",
                column: "TARGET_TYPE_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PRDSTRKWO_PRDS",
                table: "PRODUCT_STORE_KEYWORD_OVRD",
                column: "PRODUCT_STORE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_STR_KWD_OVD_TP",
                table: "PRODUCT_STORE_KEYWORD_OVRD",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_STR_KWD_OVD_TS",
                table: "PRODUCT_STORE_KEYWORD_OVRD",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDS_PS_CUS_MET",
                table: "PRODUCT_STORE_PAYMENT_SETTING",
                column: "PAYMENT_CUSTOM_METHOD_ID");

            migrationBuilder.CreateIndex(
                name: "PRDS_PS_ENUM",
                table: "PRODUCT_STORE_PAYMENT_SETTING",
                column: "PAYMENT_SERVICE_TYPE_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PRDS_PS_PGC",
                table: "PRODUCT_STORE_PAYMENT_SETTING",
                column: "PAYMENT_GATEWAY_CONFIG_ID");

            migrationBuilder.CreateIndex(
                name: "PRDS_PS_PMNTTP",
                table: "PRODUCT_STORE_PAYMENT_SETTING",
                column: "PAYMENT_METHOD_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDS_PS_PRDS",
                table: "PRODUCT_STORE_PAYMENT_SETTING",
                column: "PRODUCT_STORE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_STR_PMT_STG_TP",
                table: "PRODUCT_STORE_PAYMENT_SETTING",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_STR_PMT_STG_TS",
                table: "PRODUCT_STORE_PAYMENT_SETTING",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDSTRPRMO_PRDS",
                table: "PRODUCT_STORE_PROMO_APPL",
                column: "PRODUCT_STORE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDSTRPRMO_PRMO",
                table: "PRODUCT_STORE_PROMO_APPL",
                column: "PRODUCT_PROMO_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_STR_PRM_APL_TP",
                table: "PRODUCT_STORE_PROMO_APPL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_STR_PRM_APL_TS",
                table: "PRODUCT_STORE_PROMO_APPL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDSTRRLE_PRDS",
                table: "PRODUCT_STORE_ROLE",
                column: "PRODUCT_STORE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDSTRRLE_PRLE",
                table: "PRODUCT_STORE_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "PRDT_STR_RL_TXCRTS",
                table: "PRODUCT_STORE_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_STR_RL_TXSTMP",
                table: "PRODUCT_STORE_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDS_SM_CUS_MET",
                table: "PRODUCT_STORE_SHIPMENT_METH",
                column: "SHIPMENT_CUSTOM_METHOD_ID");

            migrationBuilder.CreateIndex(
                name: "PRDS_SM_SGC",
                table: "PRODUCT_STORE_SHIPMENT_METH",
                column: "SHIPMENT_GATEWAY_CONFIG_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_STR_SHT_MTH_TP",
                table: "PRODUCT_STORE_SHIPMENT_METH",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_STR_SHT_MTH_TS",
                table: "PRODUCT_STORE_SHIPMENT_METH",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHIPMENTMETHODTYPE",
                table: "PRODUCT_STORE_SHIPMENT_METH",
                column: "SHIPMENT_METHOD_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDSTRSVY_PRDS",
                table: "PRODUCT_STORE_SURVEY_APPL",
                column: "PRODUCT_STORE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDSTRSVY_SATP",
                table: "PRODUCT_STORE_SURVEY_APPL",
                column: "SURVEY_APPL_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDSTRSVY_SRVY",
                table: "PRODUCT_STORE_SURVEY_APPL",
                column: "SURVEY_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_STR_SRV_APL_TP",
                table: "PRODUCT_STORE_SURVEY_APPL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_STR_SRV_APL_TS",
                table: "PRODUCT_STORE_SURVEY_APPL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDS_TS_CUS_MET",
                table: "PRODUCT_STORE_TELECOM_SETTING",
                column: "TELECOM_CUSTOM_METHOD_ID");

            migrationBuilder.CreateIndex(
                name: "PRDS_TS_ENUM",
                table: "PRODUCT_STORE_TELECOM_SETTING",
                column: "TELECOM_MSG_TYPE_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PRDS_TS_PGC",
                table: "PRODUCT_STORE_TELECOM_SETTING",
                column: "TELECOM_GATEWAY_CONFIG_ID");

            migrationBuilder.CreateIndex(
                name: "PRDS_TS_PRDS",
                table: "PRODUCT_STORE_TELECOM_SETTING",
                column: "PRODUCT_STORE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDS_TS_TELTP",
                table: "PRODUCT_STORE_TELECOM_SETTING",
                column: "TELECOM_METHOD_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_STR_TLM_STG_TP",
                table: "PRODUCT_STORE_TELECOM_SETTING",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_STR_TLM_STG_TS",
                table: "PRODUCT_STORE_TELECOM_SETTING",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDSTRVPM_CCEN",
                table: "PRODUCT_STORE_VENDOR_PAYMENT",
                column: "CREDIT_CARD_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "PRDSTRVPM_PMMT",
                table: "PRODUCT_STORE_VENDOR_PAYMENT",
                column: "PAYMENT_METHOD_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDSTRVPM_PRDS",
                table: "PRODUCT_STORE_VENDOR_PAYMENT",
                column: "PRODUCT_STORE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDSTRVPM_VPTY",
                table: "PRODUCT_STORE_VENDOR_PAYMENT",
                column: "VENDOR_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_STR_VNR_PMT_TP",
                table: "PRODUCT_STORE_VENDOR_PAYMENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_STR_VNR_PMT_TS",
                table: "PRODUCT_STORE_VENDOR_PAYMENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDSTRVSH_CPTY",
                table: "PRODUCT_STORE_VENDOR_SHIPMENT",
                column: "CARRIER_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PRDSTRVSH_PRDS",
                table: "PRODUCT_STORE_VENDOR_SHIPMENT",
                column: "PRODUCT_STORE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDSTRVSH_SHMT",
                table: "PRODUCT_STORE_VENDOR_SHIPMENT",
                column: "SHIPMENT_METHOD_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDSTRVSH_VPTY",
                table: "PRODUCT_STORE_VENDOR_SHIPMENT",
                column: "VENDOR_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_STR_VNR_SHT_TP",
                table: "PRODUCT_STORE_VENDOR_SHIPMENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_STR_VNR_SHT_TS",
                table: "PRODUCT_STORE_VENDOR_SHIPMENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_SBRS_ATU",
                table: "PRODUCT_SUBSCRIPTION_RESOURCE",
                column: "AVAILABLE_TIME_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_SBRS_CTU",
                table: "PRODUCT_SUBSCRIPTION_RESOURCE",
                column: "CANCL_AUTM_EXT_TIME_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_SBRS_GTU",
                table: "PRODUCT_SUBSCRIPTION_RESOURCE",
                column: "GRACE_PERIOD_ON_EXPIRY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_SBRS_MTU",
                table: "PRODUCT_SUBSCRIPTION_RESOURCE",
                column: "MAX_LIFE_TIME_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_SBRS_PROD",
                table: "PRODUCT_SUBSCRIPTION_RESOURCE",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_SBRS_SBRS",
                table: "PRODUCT_SUBSCRIPTION_RESOURCE",
                column: "SUBSCRIPTION_RESOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_SBRS_URT",
                table: "PRODUCT_SUBSCRIPTION_RESOURCE",
                column: "USE_ROLE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PROD_SBRS_UTU",
                table: "PRODUCT_SUBSCRIPTION_RESOURCE",
                column: "USE_TIME_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "PRT_SBSCN_RSC_TXCS",
                table: "PRODUCT_SUBSCRIPTION_RESOURCE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRT_SBSCN_RSC_TXSP",
                table: "PRODUCT_SUBSCRIPTION_RESOURCE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDCT_TP_TXCRTS",
                table: "PRODUCT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDCT_TP_TXSTMP",
                table: "PRODUCT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_TYPE_PARENT",
                table: "PRODUCT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRDT_TP_ATR_TXCRTS",
                table: "PRODUCT_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRDT_TP_ATR_TXSTMP",
                table: "PRODUCT_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PROD_TYPE_ATTR",
                table: "PRODUCT_TYPE_ATTR",
                column: "PRODUCT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "PRTCTD_VW_TXCRTS",
                table: "PROTECTED_VIEW",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRTCTD_VW_TXSTMP",
                table: "PROTECTED_VIEW",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "VIEW_SECGRP_GRP",
                table: "PROTECTED_VIEW",
                column: "GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "PRTCL_TP_TXCRTS",
                table: "PROTOCOL_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PRTCL_TP_TXSTMP",
                table: "PROTOCOL_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QNTT_BRK_TXCRTS",
                table: "QUANTITY_BREAK",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QNTT_BRK_TXSTMP",
                table: "QUANTITY_BREAK",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QUANT_BRK_TYPE",
                table: "QUANTITY_BREAK",
                column: "QUANTITY_BREAK_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "QNTT_BRK_TP_TXCRTS",
                table: "QUANTITY_BREAK_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QNTT_BRK_TP_TXSTMP",
                table: "QUANTITY_BREAK_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "IX_QUOTE_VEHICLE_ID",
                table: "QUOTE",
                column: "VEHICLE_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_CHANNEL",
                table: "QUOTE",
                column: "SALES_CHANNEL_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_CUOM",
                table: "QUOTE",
                column: "CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_PRDS",
                table: "QUOTE",
                column: "PRODUCT_STORE_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_PRTY",
                table: "QUOTE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_QTTYP",
                table: "QUOTE",
                column: "QUOTE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_STATUS",
                table: "QUOTE",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_TXCRTS",
                table: "QUOTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QUOTE_TXSTMP",
                table: "QUOTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QT_ADJSTMNT_TXCRTS",
                table: "QUOTE_ADJUSTMENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QT_ADJSTMNT_TXSTMP",
                table: "QUOTE_ADJUSTMENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QUOTE_ADJ_OGLA",
                table: "QUOTE_ADJUSTMENT",
                column: "OVERRIDE_GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_ADJ_OHEAD",
                table: "QUOTE_ADJUSTMENT",
                column: "QUOTE_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_ADJ_PRGEO",
                table: "QUOTE_ADJUSTMENT",
                column: "PRIMARY_GEO_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_ADJ_PROMO",
                table: "QUOTE_ADJUSTMENT",
                column: "PRODUCT_PROMO_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_ADJ_SCGEO",
                table: "QUOTE_ADJUSTMENT",
                column: "SECONDARY_GEO_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_ADJ_TXA",
                table: "QUOTE_ADJUSTMENT",
                columns: new[] { "TAX_AUTH_GEO_ID", "TAX_AUTH_PARTY_ID" });

            migrationBuilder.CreateIndex(
                name: "QUOTE_ADJ_TYPE",
                table: "QUOTE_ADJUSTMENT",
                column: "QUOTE_ADJUSTMENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_ADJ_USERL",
                table: "QUOTE_ADJUSTMENT",
                column: "CREATED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "QT_ATTRBT_TXCRTS",
                table: "QUOTE_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QT_ATTRBT_TXSTMP",
                table: "QUOTE_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QUOTE_ATTR",
                table: "QUOTE_ATTRIBUTE",
                column: "QUOTE_ID");

            migrationBuilder.CreateIndex(
                name: "QT_CFFCNT_TXCRTS",
                table: "QUOTE_COEFFICIENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QT_CFFCNT_TXSTMP",
                table: "QUOTE_COEFFICIENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QUOTE_COEFF",
                table: "QUOTE_COEFFICIENT",
                column: "QUOTE_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_ITEM_TXCRTS",
                table: "QUOTE_ITEM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QUOTE_ITEM_TXSTMP",
                table: "QUOTE_ITEM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QUOTE_ITM_CSRITM",
                table: "QUOTE_ITEM",
                columns: new[] { "CUST_REQUEST_ID", "CUST_REQUEST_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "QUOTE_ITM_CSRQ",
                table: "QUOTE_ITEM",
                column: "CUST_REQUEST_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_ITM_DELT",
                table: "QUOTE_ITEM",
                column: "DELIVERABLE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_ITM_PFEAT",
                table: "QUOTE_ITEM",
                column: "PRODUCT_FEATURE_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_ITM_PROD",
                table: "QUOTE_ITEM",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_ITM_QTE",
                table: "QUOTE_ITEM",
                column: "QUOTE_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_ITM_SKLT",
                table: "QUOTE_ITEM",
                column: "SKILL_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_ITM_UOM",
                table: "QUOTE_ITEM",
                column: "UOM_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_ITM_WKEFF",
                table: "QUOTE_ITEM",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_NOTE_TXCRTS",
                table: "QUOTE_NOTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QUOTE_NOTE_TXSTMP",
                table: "QUOTE_NOTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QUOTE_NT_NOTE",
                table: "QUOTE_NOTE",
                column: "NOTE_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_NT_QTE",
                table: "QUOTE_NOTE",
                column: "QUOTE_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_RL_PARTY",
                table: "QUOTE_ROLE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_RL_PROLE",
                table: "QUOTE_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "QUOTE_RL_QUOTE",
                table: "QUOTE_ROLE",
                column: "QUOTE_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_ROLE_TXCRTS",
                table: "QUOTE_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QUOTE_ROLE_TXSTMP",
                table: "QUOTE_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QUOTE_TERM_QTE",
                table: "QUOTE_TERM",
                column: "QUOTE_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_TERM_TTYPE",
                table: "QUOTE_TERM",
                column: "TERM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_TERM_TXCRTS",
                table: "QUOTE_TERM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QUOTE_TERM_TXSTMP",
                table: "QUOTE_TERM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QT_TRM_ATTRT_TXCRS",
                table: "QUOTE_TERM_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QT_TRM_ATTRT_TXSTP",
                table: "QUOTE_TERM_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QUOTE_TERM_ATTR",
                table: "QUOTE_TERM_ATTRIBUTE",
                columns: new[] { "TERM_TYPE_ID", "QUOTE_ID", "QUOTE_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "QUOTE_TYPE_PAR",
                table: "QUOTE_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_TYPE_TXCRTS",
                table: "QUOTE_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QUOTE_TYPE_TXSTMP",
                table: "QUOTE_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QT_TP_ATTR_TXCRTS",
                table: "QUOTE_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QT_TP_ATTR_TXSTMP",
                table: "QUOTE_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QUOTE_TPAT_QTYP",
                table: "QUOTE_TYPE_ATTR",
                column: "QUOTE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "QT_WRK_EFFT_TXCRTS",
                table: "QUOTE_WORK_EFFORT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QT_WRK_EFFT_TXSTMP",
                table: "QUOTE_WORK_EFFORT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "QUOTE_WE_QUOTE",
                table: "QUOTE_WORK_EFFORT",
                column: "QUOTE_ID");

            migrationBuilder.CreateIndex(
                name: "QUOTE_WE_WEFF",
                table: "QUOTE_WORK_EFFORT",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "RATE_AMOUNT_EPT",
                table: "RATE_AMOUNT",
                column: "EMPL_POSITION_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "RATE_AMOUNT_PT",
                table: "RATE_AMOUNT",
                column: "PERIOD_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "RATE_AMOUNT_PTY",
                table: "RATE_AMOUNT",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "RATE_AMOUNT_RCT",
                table: "RATE_AMOUNT",
                column: "RATE_CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "RATE_AMOUNT_RT",
                table: "RATE_AMOUNT",
                column: "RATE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "RATE_AMOUNT_TXCRTS",
                table: "RATE_AMOUNT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RATE_AMOUNT_TXSTMP",
                table: "RATE_AMOUNT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RATE_AMOUNT_WE",
                table: "RATE_AMOUNT",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "RATE_TYPE_TXCRTS",
                table: "RATE_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RATE_TYPE_TXSTMP",
                table: "RATE_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RCRRNC_INF_TXCRTS",
                table: "RECURRENCE_INFO",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RCRRNC_INF_TXSTMP",
                table: "RECURRENCE_INFO",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "REC_INFO_EX_RCRLE",
                table: "RECURRENCE_INFO",
                column: "EXCEPTION_RULE_ID");

            migrationBuilder.CreateIndex(
                name: "REC_INFO_RCRLE",
                table: "RECURRENCE_INFO",
                column: "RECURRENCE_RULE_ID");

            migrationBuilder.CreateIndex(
                name: "RCRRNC_RL_TXCRTS",
                table: "RECURRENCE_RULE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RCRRNC_RL_TXSTMP",
                table: "RECURRENCE_RULE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RJCTN_RSN_TXCRTS",
                table: "REJECTION_REASON",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RJCTN_RSN_TXSTMP",
                table: "REJECTION_REASON",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "REORDER_GD_FAC",
                table: "REORDER_GUIDELINE",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "REORDER_GD_GEO",
                table: "REORDER_GUIDELINE",
                column: "GEO_ID");

            migrationBuilder.CreateIndex(
                name: "REORDER_GD_PARTY",
                table: "REORDER_GUIDELINE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "REORDER_GD_PROD",
                table: "REORDER_GUIDELINE",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "RRDR_GDLN_TXCRTS",
                table: "REORDER_GUIDELINE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RRDR_GDLN_TXSTMP",
                table: "REORDER_GUIDELINE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "REQ_DELIVERABLE",
                table: "REQUIREMENT",
                column: "DELIVERABLE_ID");

            migrationBuilder.CreateIndex(
                name: "REQ_FACILITY",
                table: "REQUIREMENT",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "REQ_FIXED_ASSET",
                table: "REQUIREMENT",
                column: "FIXED_ASSET_ID");

            migrationBuilder.CreateIndex(
                name: "REQ_PRODUCT",
                table: "REQUIREMENT",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "REQ_STTS",
                table: "REQUIREMENT",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "REQ_TYPE",
                table: "REQUIREMENT",
                column: "REQUIREMENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "REQUIREMENT_TXCRTS",
                table: "REQUIREMENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "REQUIREMENT_TXSTMP",
                table: "REQUIREMENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "REQ_ATTR",
                table: "REQUIREMENT_ATTRIBUTE",
                column: "REQUIREMENT_ID");

            migrationBuilder.CreateIndex(
                name: "RQRMT_ATTRT_TXCRTS",
                table: "REQUIREMENT_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RQRMT_ATTRT_TXSTMP",
                table: "REQUIREMENT_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "REQ_BDGTAL_BITM",
                table: "REQUIREMENT_BUDGET_ALLOCATION",
                columns: new[] { "BUDGET_ID", "BUDGET_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "REQ_BDGTAL_REQ",
                table: "REQUIREMENT_BUDGET_ALLOCATION",
                column: "REQUIREMENT_ID");

            migrationBuilder.CreateIndex(
                name: "RQRT_BDT_ALLN_TXCS",
                table: "REQUIREMENT_BUDGET_ALLOCATION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RQRT_BDT_ALLN_TXSP",
                table: "REQUIREMENT_BUDGET_ALLOCATION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "REQ_CSREQ_CRITM",
                table: "REQUIREMENT_CUST_REQUEST",
                columns: new[] { "CUST_REQUEST_ID", "CUST_REQUEST_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "REQ_CSREQ_REQ",
                table: "REQUIREMENT_CUST_REQUEST",
                column: "REQUIREMENT_ID");

            migrationBuilder.CreateIndex(
                name: "RQRT_CST_RQT_TXCRS",
                table: "REQUIREMENT_CUST_REQUEST",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RQRT_CST_RQT_TXSTP",
                table: "REQUIREMENT_CUST_REQUEST",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "REQ_ROLE_PROLE",
                table: "REQUIREMENT_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "REQ_ROLE_PRTY",
                table: "REQUIREMENT_ROLE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "REQ_ROLE_REQ",
                table: "REQUIREMENT_ROLE",
                column: "REQUIREMENT_ID");

            migrationBuilder.CreateIndex(
                name: "RQRMNT_RL_TXCRTS",
                table: "REQUIREMENT_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RQRMNT_RL_TXSTMP",
                table: "REQUIREMENT_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "REQ_STTS_REQ",
                table: "REQUIREMENT_STATUS",
                column: "REQUIREMENT_ID");

            migrationBuilder.CreateIndex(
                name: "REQ_STTS_STTS",
                table: "REQUIREMENT_STATUS",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "REQ_STTS_USRLGN",
                table: "REQUIREMENT_STATUS",
                column: "CHANGE_BY_USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "RQRMNT_STTS_TXCRTS",
                table: "REQUIREMENT_STATUS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RQRMNT_STTS_TXSTMP",
                table: "REQUIREMENT_STATUS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "REQ_TYPE_PARENT",
                table: "REQUIREMENT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "RQRMNT_TP_TXCRTS",
                table: "REQUIREMENT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RQRMNT_TP_TXSTMP",
                table: "REQUIREMENT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "REQ_TYPE_ATTR",
                table: "REQUIREMENT_TYPE_ATTR",
                column: "REQUIREMENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "RQRMT_TP_ATR_TXCRS",
                table: "REQUIREMENT_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RQRMT_TP_ATR_TXSTP",
                table: "REQUIREMENT_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RESP_PTY_CMECH",
                table: "RESPONDING_PARTY",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "RESP_PTY_CSREQ",
                table: "RESPONDING_PARTY",
                column: "CUST_REQUEST_ID");

            migrationBuilder.CreateIndex(
                name: "RESP_PTY_PARTY",
                table: "RESPONDING_PARTY",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "RSPNDNG_PRT_TXCRTS",
                table: "RESPONDING_PARTY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RSPNDNG_PRT_TXSTMP",
                table: "RESPONDING_PARTY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RESPON_TYPE_PAR",
                table: "RESPONSIBILITY_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "RSPNSBLT_TP_TXCRTS",
                table: "RESPONSIBILITY_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RSPNSBLT_TP_TXSTMP",
                table: "RESPONSIBILITY_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RET_ADJ_RTN_TYPE",
                table: "RETURN_ADJUSTMENT",
                column: "RETURN_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "RETURN_ADJ_OGLA",
                table: "RETURN_ADJUSTMENT",
                column: "OVERRIDE_GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "RETURN_ADJ_ORDADJ",
                table: "RETURN_ADJUSTMENT",
                column: "ORDER_ADJUSTMENT_ID");

            migrationBuilder.CreateIndex(
                name: "RETURN_ADJ_PRGEO",
                table: "RETURN_ADJUSTMENT",
                column: "PRIMARY_GEO_ID");

            migrationBuilder.CreateIndex(
                name: "RETURN_ADJ_PROMO",
                table: "RETURN_ADJUSTMENT",
                column: "PRODUCT_PROMO_ID");

            migrationBuilder.CreateIndex(
                name: "RETURN_ADJ_RHEAD",
                table: "RETURN_ADJUSTMENT",
                column: "RETURN_ID");

            migrationBuilder.CreateIndex(
                name: "RETURN_ADJ_SCGEO",
                table: "RETURN_ADJUSTMENT",
                column: "SECONDARY_GEO_ID");

            migrationBuilder.CreateIndex(
                name: "RETURN_ADJ_TARP",
                table: "RETURN_ADJUSTMENT",
                column: "TAX_AUTHORITY_RATE_SEQ_ID");

            migrationBuilder.CreateIndex(
                name: "RETURN_ADJ_TXA",
                table: "RETURN_ADJUSTMENT",
                columns: new[] { "TAX_AUTH_GEO_ID", "TAX_AUTH_PARTY_ID" });

            migrationBuilder.CreateIndex(
                name: "RETURN_ADJ_TYPE",
                table: "RETURN_ADJUSTMENT",
                column: "RETURN_ADJUSTMENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "RETURN_ADJ_USERL",
                table: "RETURN_ADJUSTMENT",
                column: "CREATED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "RTN_ADJSTMT_TXCRTS",
                table: "RETURN_ADJUSTMENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RTN_ADJSTMT_TXSTMP",
                table: "RETURN_ADJUSTMENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RETURN_ADJ_TYPPAR",
                table: "RETURN_ADJUSTMENT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_ADJSTT_TP_TXCS",
                table: "RETURN_ADJUSTMENT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RTN_ADJSTT_TP_TXSP",
                table: "RETURN_ADJUSTMENT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RETURN_CMECH_CM",
                table: "RETURN_CONTACT_MECH",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "RETURN_CMECH_CMPT",
                table: "RETURN_CONTACT_MECH",
                column: "CONTACT_MECH_PURPOSE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "RETURN_CMECH_HDR",
                table: "RETURN_CONTACT_MECH",
                column: "RETURN_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_CNTT_MCH_TXCRS",
                table: "RETURN_CONTACT_MECH",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RTN_CNTT_MCH_TXSTP",
                table: "RETURN_CONTACT_MECH",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RTN_FROM_CTM",
                table: "RETURN_HEADER",
                column: "ORIGIN_CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_FROM_PARTY",
                table: "RETURN_HEADER",
                column: "FROM_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_HDR_CUOM",
                table: "RETURN_HEADER",
                column: "CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_HEAD_TYPE",
                table: "RETURN_HEADER",
                column: "RETURN_HEADER_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_STTS_ITEM",
                table: "RETURN_HEADER",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_TO_BACT",
                table: "RETURN_HEADER",
                column: "BILLING_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_TO_FACILITY",
                table: "RETURN_HEADER",
                column: "DESTINATION_FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_TO_FACT",
                table: "RETURN_HEADER",
                column: "FIN_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_TO_PARTY",
                table: "RETURN_HEADER",
                column: "TO_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_TO_PAYMETH",
                table: "RETURN_HEADER",
                column: "PAYMENT_METHOD_ID");

            migrationBuilder.CreateIndex(
                name: "RTRN_HDR_TXCRTS",
                table: "RETURN_HEADER",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RTRN_HDR_TXSTMP",
                table: "RETURN_HEADER",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RTHEAD_TYPE_PARENT",
                table: "RETURN_HEADER_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "RTRN_HDR_TP_TXCRTS",
                table: "RETURN_HEADER_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RTRN_HDR_TP_TXSTMP",
                table: "RETURN_HEADER_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RETURN_ITEM_TXCRTS",
                table: "RETURN_ITEM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RETURN_ITEM_TXSTMP",
                table: "RETURN_ITEM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RTN_ITEM_ITSTT",
                table: "RETURN_ITEM",
                column: "EXPECTED_ITEM_STATUS");

            migrationBuilder.CreateIndex(
                name: "RTN_ITEM_ODR",
                table: "RETURN_ITEM",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_ITEM_ODRIT",
                table: "RETURN_ITEM",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "RTN_ITEM_PROD",
                table: "RETURN_ITEM",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_ITEM_REASON",
                table: "RETURN_ITEM",
                column: "RETURN_REASON_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_ITEM_RESP",
                table: "RETURN_ITEM",
                column: "RETURN_ITEM_RESPONSE_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_ITEM_RTN",
                table: "RETURN_ITEM",
                column: "RETURN_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_ITEM_STTSIT",
                table: "RETURN_ITEM",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_ITEM_TYPE",
                table: "RETURN_ITEM",
                column: "RETURN_ITEM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_ITM_BYORDITM",
                table: "RETURN_ITEM",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "RTN_TYPE",
                table: "RETURN_ITEM",
                column: "RETURN_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "RETURN_ITBLNG_IITM",
                table: "RETURN_ITEM_BILLING",
                columns: new[] { "INVOICE_ID", "INVOICE_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "RITBL_SHIPRCPT",
                table: "RETURN_ITEM_BILLING",
                column: "SHIPMENT_RECEIPT_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_ITBLNG_RHDR",
                table: "RETURN_ITEM_BILLING",
                column: "RETURN_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_ITBLNG_RITM",
                table: "RETURN_ITEM_BILLING",
                columns: new[] { "RETURN_ID", "RETURN_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "RTN_ITM_BLLG_TXCRS",
                table: "RETURN_ITEM_BILLING",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RTN_ITM_BLLG_TXSTP",
                table: "RETURN_ITEM_BILLING",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RTN_ITM_RSPS_TXCRS",
                table: "RETURN_ITEM_RESPONSE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RTN_ITM_RSPS_TXSTP",
                table: "RETURN_ITEM_RESPONSE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RTN_PAY_BACT",
                table: "RETURN_ITEM_RESPONSE",
                column: "BILLING_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_PAY_FINACTTX",
                table: "RETURN_ITEM_RESPONSE",
                column: "FIN_ACCOUNT_TRANS_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_PAY_ORDPAYPF",
                table: "RETURN_ITEM_RESPONSE",
                column: "ORDER_PAYMENT_PREFERENCE_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_PAY_PAYMENT",
                table: "RETURN_ITEM_RESPONSE",
                column: "PAYMENT_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_RESP_NEWORD",
                table: "RETURN_ITEM_RESPONSE",
                column: "REPLACEMENT_ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "RIT_SHPMT_RHDR",
                table: "RETURN_ITEM_SHIPMENT",
                column: "RETURN_ID");

            migrationBuilder.CreateIndex(
                name: "RIT_SHPMT_RITM",
                table: "RETURN_ITEM_SHIPMENT",
                columns: new[] { "RETURN_ID", "RETURN_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "RIT_SHPMT_SHPITM",
                table: "RETURN_ITEM_SHIPMENT",
                columns: new[] { "SHIPMENT_ID", "SHIPMENT_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "RIT_SHPMT_SHPMT",
                table: "RETURN_ITEM_SHIPMENT",
                column: "SHIPMENT_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_ITM_SHPT_TXCRS",
                table: "RETURN_ITEM_SHIPMENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RTN_ITM_SHPT_TXSTP",
                table: "RETURN_ITEM_SHIPMENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RETURN_ITEM_TYPPAR",
                table: "RETURN_ITEM_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "RTRN_ITM_TP_TXCRTS",
                table: "RETURN_ITEM_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RTRN_ITM_TP_TXSTMP",
                table: "RETURN_ITEM_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RETITMMAP_RETTYP",
                table: "RETURN_ITEM_TYPE_MAP",
                column: "RETURN_HEADER_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_ITM_TP_MP_TXCS",
                table: "RETURN_ITEM_TYPE_MAP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RTN_ITM_TP_MP_TXSP",
                table: "RETURN_ITEM_TYPE_MAP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RTRN_RSN_TXCRTS",
                table: "RETURN_REASON",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RTRN_RSN_TXSTMP",
                table: "RETURN_REASON",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RTN_STTS_RTN",
                table: "RETURN_STATUS",
                column: "RETURN_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_STTS_STTS",
                table: "RETURN_STATUS",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "RTN_STTS_USRLGN",
                table: "RETURN_STATUS",
                column: "CHANGE_BY_USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "RTRN_STTS_TXCRTS",
                table: "RETURN_STATUS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RTRN_STTS_TXSTMP",
                table: "RETURN_STATUS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RETURN_TYPE_TXCRTS",
                table: "RETURN_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RETURN_TYPE_TXSTMP",
                table: "RETURN_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ROLE_TYPE_PAR",
                table: "ROLE_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "ROLE_TYPE_TXCRTS",
                table: "ROLE_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ROLE_TYPE_TXSTMP",
                table: "ROLE_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RL_TP_ATTR_TXCRTS",
                table: "ROLE_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RL_TP_ATTR_TXSTMP",
                table: "ROLE_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ROLE_TYPATR_RTYP",
                table: "ROLE_TYPE_ATTR",
                column: "ROLE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "RNTM_DT_TXCRTS",
                table: "RUNTIME_DATA",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "RNTM_DT_TXSTMP",
                table: "RUNTIME_DATA",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SLR_STP_NW_TXCRTS",
                table: "SALARY_STEP_NEW",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SLR_STP_NW_TXSTMP",
                table: "SALARY_STEP_NEW",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SLRY_STP_PGRD_NEW",
                table: "SALARY_STEP_NEW",
                column: "PAY_GRADE_ID");

            migrationBuilder.CreateIndex(
                name: "SALE_TYPE_TXCRTS",
                table: "SALE_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SALE_TYPE_TXSTMP",
                table: "SALE_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SALES4C_CRT_USER",
                table: "SALES_FORECAST",
                column: "CREATED_BY_USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "SALES4C_CUR_UOM",
                table: "SALES_FORECAST",
                column: "CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "SALES4C_INT_PARTY",
                table: "SALES_FORECAST",
                column: "INTERNAL_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "SALES4C_MOD_USER",
                table: "SALES_FORECAST",
                column: "MODIFIED_BY_USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "SALES4C_ORG_PARTY",
                table: "SALES_FORECAST",
                column: "ORGANIZATION_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "SALES4C_PARENT",
                table: "SALES_FORECAST",
                column: "PARENT_SALES_FORECAST_ID");

            migrationBuilder.CreateIndex(
                name: "SALES4C_TIME_PER",
                table: "SALES_FORECAST",
                column: "CUSTOM_TIME_PERIOD_ID");

            migrationBuilder.CreateIndex(
                name: "SLS_FRCST_TXCRTS",
                table: "SALES_FORECAST",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SLS_FRCST_TXSTMP",
                table: "SALES_FORECAST",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SALES4CDTL_PCTGRY",
                table: "SALES_FORECAST_DETAIL",
                column: "PRODUCT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "SALES4CDTL_PROD",
                table: "SALES_FORECAST_DETAIL",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "SALES4CDTL_QTY_UOM",
                table: "SALES_FORECAST_DETAIL",
                column: "QUANTITY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "SALES4CDTL_SALES4C",
                table: "SALES_FORECAST_DETAIL",
                column: "SALES_FORECAST_ID");

            migrationBuilder.CreateIndex(
                name: "SLS_FRCT_DTL_TXCRS",
                table: "SALES_FORECAST_DETAIL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SLS_FRCT_DTL_TXSTP",
                table: "SALES_FORECAST_DETAIL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SALES4CH_CUR_UOM",
                table: "SALES_FORECAST_HISTORY",
                column: "CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "SALES4CH_INT_PARTY",
                table: "SALES_FORECAST_HISTORY",
                column: "INTERNAL_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "SALES4CH_MOD_USER",
                table: "SALES_FORECAST_HISTORY",
                column: "MODIFIED_BY_USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "SALES4CH_ORG_PARTY",
                table: "SALES_FORECAST_HISTORY",
                column: "ORGANIZATION_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "SALES4CH_SALES4C",
                table: "SALES_FORECAST_HISTORY",
                column: "SALES_FORECAST_ID");

            migrationBuilder.CreateIndex(
                name: "SALES4CH_TIME_PER",
                table: "SALES_FORECAST_HISTORY",
                column: "CUSTOM_TIME_PERIOD_ID");

            migrationBuilder.CreateIndex(
                name: "SLS_FRCT_HSR_TXCRS",
                table: "SALES_FORECAST_HISTORY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SLS_FRCT_HSR_TXSTP",
                table: "SALES_FORECAST_HISTORY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SLS_OPPRTNT_TXCRTS",
                table: "SALES_OPPORTUNITY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SLS_OPPRTNT_TXSTMP",
                table: "SALES_OPPORTUNITY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SLSOPP_CRNCY_UOM",
                table: "SALES_OPPORTUNITY",
                column: "CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "SLSOPP_DTSRC",
                table: "SALES_OPPORTUNITY",
                column: "DATA_SOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "SLSOPP_MKTGCMPG",
                table: "SALES_OPPORTUNITY",
                column: "MARKETING_CAMPAIGN_ID");

            migrationBuilder.CreateIndex(
                name: "SLSOPP_STAGE",
                table: "SALES_OPPORTUNITY",
                column: "OPPORTUNITY_STAGE_ID");

            migrationBuilder.CreateIndex(
                name: "SLSOPP_TYP_ENUM",
                table: "SALES_OPPORTUNITY",
                column: "TYPE_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "SLSOPP_USRLGN",
                table: "SALES_OPPORTUNITY",
                column: "CREATED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "SLS_OPPRT_CMR_TXCS",
                table: "SALES_OPPORTUNITY_COMPETITOR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SLS_OPPRT_CMR_TXSP",
                table: "SALES_OPPORTUNITY_COMPETITOR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SOPPCOMP_SOPP",
                table: "SALES_OPPORTUNITY_COMPETITOR",
                column: "SALES_OPPORTUNITY_ID");

            migrationBuilder.CreateIndex(
                name: "SLOPHI_CRNCY_UOM",
                table: "SALES_OPPORTUNITY_HISTORY",
                column: "CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "SLOPHI_SLSOPP",
                table: "SALES_OPPORTUNITY_HISTORY",
                column: "SALES_OPPORTUNITY_ID");

            migrationBuilder.CreateIndex(
                name: "SLOPHI_STAGE",
                table: "SALES_OPPORTUNITY_HISTORY",
                column: "OPPORTUNITY_STAGE_ID");

            migrationBuilder.CreateIndex(
                name: "SLOPHI_USRLGN",
                table: "SALES_OPPORTUNITY_HISTORY",
                column: "MODIFIED_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "SLS_OPPRT_HSR_TXCS",
                table: "SALES_OPPORTUNITY_HISTORY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SLS_OPPRT_HSR_TXSP",
                table: "SALES_OPPORTUNITY_HISTORY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SLS_OPPRT_QT_TXCRS",
                table: "SALES_OPPORTUNITY_QUOTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SLS_OPPRT_QT_TXSTP",
                table: "SALES_OPPORTUNITY_QUOTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SOPPQTE_QTE",
                table: "SALES_OPPORTUNITY_QUOTE",
                column: "QUOTE_ID");

            migrationBuilder.CreateIndex(
                name: "SOPPQTE_SOPP",
                table: "SALES_OPPORTUNITY_QUOTE",
                column: "SALES_OPPORTUNITY_ID");

            migrationBuilder.CreateIndex(
                name: "SLS_OPPRT_RL_TXCRS",
                table: "SALES_OPPORTUNITY_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SLS_OPPRT_RL_TXSTP",
                table: "SALES_OPPORTUNITY_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SLSOPPRL_PARTY",
                table: "SALES_OPPORTUNITY_ROLE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "SLSOPPRL_PTYROLE",
                table: "SALES_OPPORTUNITY_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "SLSOPPRL_ROLETYPE",
                table: "SALES_OPPORTUNITY_ROLE",
                column: "ROLE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "SLSOPPRL_SLSOPP",
                table: "SALES_OPPORTUNITY_ROLE",
                column: "SALES_OPPORTUNITY_ID");

            migrationBuilder.CreateIndex(
                name: "SLS_OPPRT_STG_TXCS",
                table: "SALES_OPPORTUNITY_STAGE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SLS_OPPRT_STG_TXSP",
                table: "SALES_OPPORTUNITY_STAGE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SLS_OPT_TRK_CD_TXP",
                table: "SALES_OPPORTUNITY_TRCK_CODE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SLS_OPT_TRK_CD_TXS",
                table: "SALES_OPPORTUNITY_TRCK_CODE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SOPPTRKCD_SOPP",
                table: "SALES_OPPORTUNITY_TRCK_CODE",
                column: "SALES_OPPORTUNITY_ID");

            migrationBuilder.CreateIndex(
                name: "SLS_OPT_WRK_EFT_TP",
                table: "SALES_OPPORTUNITY_WORK_EFFORT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SLS_OPT_WRK_EFT_TS",
                table: "SALES_OPPORTUNITY_WORK_EFFORT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SOPPWEFF_SOPP",
                table: "SALES_OPPORTUNITY_WORK_EFFORT",
                column: "SALES_OPPORTUNITY_ID");

            migrationBuilder.CreateIndex(
                name: "SOPPWEFF_WEFF",
                table: "SALES_OPPORTUNITY_WORK_EFFORT",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "SCRT_GRP_TXCRTS",
                table: "SECURITY_GROUP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SCRT_GRP_TXSTMP",
                table: "SECURITY_GROUP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SCT_GRP_PRMN_TXCRS",
                table: "SECURITY_GROUP_PERMISSION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SCT_GRP_PRMN_TXSTP",
                table: "SECURITY_GROUP_PERMISSION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SEC_GRP_PERM_GRP",
                table: "SECURITY_GROUP_PERMISSION",
                column: "GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "SCRT_PRMSSN_TXCRTS",
                table: "SECURITY_PERMISSION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SCRT_PRMSSN_TXSTMP",
                table: "SECURITY_PERMISSION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SGMNT_GRP_TXCRTS",
                table: "SEGMENT_GROUP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SGMNT_GRP_TXSTMP",
                table: "SEGMENT_GROUP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SGMTGRP_PRST",
                table: "SEGMENT_GROUP",
                column: "PRODUCT_STORE_ID");

            migrationBuilder.CreateIndex(
                name: "SGMTGRP_TYPE",
                table: "SEGMENT_GROUP",
                column: "SEGMENT_GROUP_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "SGMTGRPCLS_PCGP",
                table: "SEGMENT_GROUP_CLASSIFICATION",
                column: "PARTY_CLASSIFICATION_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "SGMTGRPCLS_SGGP",
                table: "SEGMENT_GROUP_CLASSIFICATION",
                column: "SEGMENT_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "SGT_GRP_CLSSN_TXCS",
                table: "SEGMENT_GROUP_CLASSIFICATION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SGT_GRP_CLSSN_TXSP",
                table: "SEGMENT_GROUP_CLASSIFICATION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SGMNT_GRP_G_TXCRTS",
                table: "SEGMENT_GROUP_GEO",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SGMNT_GRP_G_TXSTMP",
                table: "SEGMENT_GROUP_GEO",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SGMTGRPGEO_GEO",
                table: "SEGMENT_GROUP_GEO",
                column: "GEO_ID");

            migrationBuilder.CreateIndex(
                name: "SGMTGRPGEO_SGGP",
                table: "SEGMENT_GROUP_GEO",
                column: "SEGMENT_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "SGMT_GRP_RL_TXCRTS",
                table: "SEGMENT_GROUP_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SGMT_GRP_RL_TXSTMP",
                table: "SEGMENT_GROUP_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SGMTGRPRL_PRLE",
                table: "SEGMENT_GROUP_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "SGMTGRPRL_SGGP",
                table: "SEGMENT_GROUP_ROLE",
                column: "SEGMENT_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "SGMT_GRP_TP_TXCRTS",
                table: "SEGMENT_GROUP_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SGMT_GRP_TP_TXSTMP",
                table: "SEGMENT_GROUP_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SQNC_VL_ITM_TXCRTS",
                table: "SEQUENCE_VALUE_ITEM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SQNC_VL_ITM_TXSTMP",
                table: "SEQUENCE_VALUE_ITEM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SERVER_HIT_SHTYP",
                table: "SERVER_HIT",
                column: "HIT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "SERVER_HIT_VISIT",
                table: "SERVER_HIT",
                column: "VISIT_ID");

            migrationBuilder.CreateIndex(
                name: "SERVER_HBIN_TYPE",
                table: "SERVER_HIT_BIN",
                column: "HIT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "SRVR_HT_TP_TXCRTS",
                table: "SERVER_HIT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRVR_HT_TP_TXSTMP",
                table: "SERVER_HIT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "IX_SERVICE_RATES_MakeId",
                table: "SERVICE_RATES",
                column: "MakeId");

            migrationBuilder.CreateIndex(
                name: "IX_SERVICE_RATES_ModelId",
                table: "SERVICE_RATES",
                column: "ModelId");

            migrationBuilder.CreateIndex(
                name: "IX_SERVICE_RATES_ProductStoreId",
                table: "SERVICE_RATES",
                column: "ProductStoreId");

            migrationBuilder.CreateIndex(
                name: "SRVC_SMPHR_TXCRTS",
                table: "SERVICE_SEMAPHORE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRVC_SMPHR_TXSTMP",
                table: "SERVICE_SEMAPHORE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "IX_SERVICE_SPECIFICATION_MakeId",
                table: "SERVICE_SPECIFICATION",
                column: "MakeId");

            migrationBuilder.CreateIndex(
                name: "IX_SERVICE_SPECIFICATION_ModelId",
                table: "SERVICE_SPECIFICATION",
                column: "ModelId");

            migrationBuilder.CreateIndex(
                name: "IX_SERVICE_SPECIFICATION_ProductId",
                table: "SERVICE_SPECIFICATION",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "STTLMNT_TRM_TXCRTS",
                table: "SETTLEMENT_TERM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "STTLMNT_TRM_TXSTMP",
                table: "SETTLEMENT_TERM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHIPMENT_TXCRTS",
                table: "SHIPMENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHIPMENT_TXSTMP",
                table: "SHIPMENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_CUOM",
                table: "SHIPMENT",
                column: "CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_DFAC",
                table: "SHIPMENT",
                column: "DESTINATION_FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_DPAD",
                table: "SHIPMENT",
                column: "DESTINATION_CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_DTCN",
                table: "SHIPMENT",
                column: "DESTINATION_TELECOM_NUMBER_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_EARRWEFF",
                table: "SHIPMENT",
                column: "ESTIMATED_ARRIVAL_WORK_EFF_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_ESHWEFF",
                table: "SHIPMENT",
                column: "ESTIMATED_SHIP_WORK_EFF_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_OFAC",
                table: "SHIPMENT",
                column: "ORIGIN_FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_OPAD",
                table: "SHIPMENT",
                column: "ORIGIN_CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_OTCN",
                table: "SHIPMENT",
                column: "ORIGIN_TELECOM_NUMBER_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_PKLSTBIN",
                table: "SHIPMENT",
                column: "PICKLIST_BIN_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_PODR",
                table: "SHIPMENT",
                column: "PRIMARY_ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_PRTNHDR",
                table: "SHIPMENT",
                column: "PRIMARY_RETURN_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_PRTYFM",
                table: "SHIPMENT",
                column: "PARTY_ID_FROM");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_PRTYTO",
                table: "SHIPMENT",
                column: "PARTY_ID_TO");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_STTS",
                table: "SHIPMENT",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_TYPE",
                table: "SHIPMENT",
                column: "SHIPMENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_ATTR",
                table: "SHIPMENT_ATTRIBUTE",
                column: "SHIPMENT_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMT_ATTRT_TXCRTS",
                table: "SHIPMENT_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPMT_ATTRT_TXSTMP",
                table: "SHIPMENT_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHMT_BXTP_DUOM",
                table: "SHIPMENT_BOX_TYPE",
                column: "DIMENSION_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "SHMT_BXTP_WUOM",
                table: "SHIPMENT_BOX_TYPE",
                column: "WEIGHT_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMT_BX_TP_TXCRTS",
                table: "SHIPMENT_BOX_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPMT_BX_TP_TXSTMP",
                table: "SHIPMENT_BOX_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPMT_CMECH",
                table: "SHIPMENT_CONTACT_MECH",
                column: "SHIPMENT_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMT_CMECH_CM",
                table: "SHIPMENT_CONTACT_MECH",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMT_CMECH_TYPE",
                table: "SHIPMENT_CONTACT_MECH",
                column: "SHIPMENT_CONTACT_MECH_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "SHPT_CNT_MCH_TXCRS",
                table: "SHIPMENT_CONTACT_MECH",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPT_CNT_MCH_TXSTP",
                table: "SHIPMENT_CONTACT_MECH",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHT_CNT_MCH_TP_TXP",
                table: "SHIPMENT_CONTACT_MECH_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHT_CNT_MCH_TP_TXS",
                table: "SHIPMENT_CONTACT_MECH_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_CE_CSHMTH",
                table: "SHIPMENT_COST_ESTIMATE",
                columns: new[] { "SHIPMENT_METHOD_TYPE_ID", "CARRIER_PARTY_ID", "CARRIER_ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "SHPMNT_CE_FGEO",
                table: "SHIPMENT_COST_ESTIMATE",
                column: "GEO_ID_FROM");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_CE_PARTY",
                table: "SHIPMENT_COST_ESTIMATE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_CE_PRC_QB",
                table: "SHIPMENT_COST_ESTIMATE",
                column: "PRICE_BREAK_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_CE_PUOM",
                table: "SHIPMENT_COST_ESTIMATE",
                column: "PRICE_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_CE_QNT_QB",
                table: "SHIPMENT_COST_ESTIMATE",
                column: "QUANTITY_BREAK_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_CE_QUOM",
                table: "SHIPMENT_COST_ESTIMATE",
                column: "QUANTITY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_CE_ROLET",
                table: "SHIPMENT_COST_ESTIMATE",
                column: "ROLE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_CE_TGEO",
                table: "SHIPMENT_COST_ESTIMATE",
                column: "GEO_ID_TO");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_CE_WHT_QB",
                table: "SHIPMENT_COST_ESTIMATE",
                column: "WEIGHT_BREAK_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_CE_WUOM",
                table: "SHIPMENT_COST_ESTIMATE",
                column: "WEIGHT_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_PS_SH_METH",
                table: "SHIPMENT_COST_ESTIMATE",
                column: "PRODUCT_STORE_SHIP_METH_ID");

            migrationBuilder.CreateIndex(
                name: "SHPT_CST_EST_TXCRS",
                table: "SHIPMENT_COST_ESTIMATE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPT_CST_EST_TXSTP",
                table: "SHIPMENT_COST_ESTIMATE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SGC_SGCT",
                table: "SHIPMENT_GATEWAY_CONFIG",
                column: "SHIPMENT_GATEWAY_CONF_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "SHPT_GTW_CNG_TXCRS",
                table: "SHIPMENT_GATEWAY_CONFIG",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPT_GTW_CNG_TXSTP",
                table: "SHIPMENT_GATEWAY_CONFIG",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SGCT_PAR",
                table: "SHIPMENT_GATEWAY_CONFIG_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "SHT_GTW_CNG_TP_TXP",
                table: "SHIPMENT_GATEWAY_CONFIG_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHT_GTW_CNG_TP_TXS",
                table: "SHIPMENT_GATEWAY_CONFIG_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SGDHL_SGC",
                table: "SHIPMENT_GATEWAY_DHL",
                column: "SHIPMENT_GATEWAY_CONFIG_ID");

            migrationBuilder.CreateIndex(
                name: "SHPT_GTW_DHL_TXCRS",
                table: "SHIPMENT_GATEWAY_DHL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPT_GTW_DHL_TXSTP",
                table: "SHIPMENT_GATEWAY_DHL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SGFED_SGC",
                table: "SHIPMENT_GATEWAY_FEDEX",
                column: "SHIPMENT_GATEWAY_CONFIG_ID");

            migrationBuilder.CreateIndex(
                name: "SHPT_GTW_FDX_TXCRS",
                table: "SHIPMENT_GATEWAY_FEDEX",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPT_GTW_FDX_TXSTP",
                table: "SHIPMENT_GATEWAY_FEDEX",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SGUPS_SGC",
                table: "SHIPMENT_GATEWAY_UPS",
                column: "SHIPMENT_GATEWAY_CONFIG_ID");

            migrationBuilder.CreateIndex(
                name: "SHPT_GTW_UPS_TXCRS",
                table: "SHIPMENT_GATEWAY_UPS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPT_GTW_UPS_TXSTP",
                table: "SHIPMENT_GATEWAY_UPS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SGUSPS_SGC",
                table: "SHIPMENT_GATEWAY_USPS",
                column: "SHIPMENT_GATEWAY_CONFIG_ID");

            migrationBuilder.CreateIndex(
                name: "SHPT_GTW_USS_TXCRS",
                table: "SHIPMENT_GATEWAY_USPS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPT_GTW_USS_TXSTP",
                table: "SHIPMENT_GATEWAY_USPS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_ITM_PROD",
                table: "SHIPMENT_ITEM",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_ITM_SHPMT",
                table: "SHIPMENT_ITEM",
                column: "SHIPMENT_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_ITM_TXCRTS",
                table: "SHIPMENT_ITEM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_ITM_TXSTMP",
                table: "SHIPMENT_ITEM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_ITBL_INIM",
                table: "SHIPMENT_ITEM_BILLING",
                columns: new[] { "INVOICE_ID", "INVOICE_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "SHPMNT_ITBL_SPIM",
                table: "SHIPMENT_ITEM_BILLING",
                columns: new[] { "SHIPMENT_ID", "SHIPMENT_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "SHPT_ITM_BLG_TXCRS",
                table: "SHIPMENT_ITEM_BILLING",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPT_ITM_BLG_TXSTP",
                table: "SHIPMENT_ITEM_BILLING",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_ITFT_FEAT",
                table: "SHIPMENT_ITEM_FEATURE",
                column: "PRODUCT_FEATURE_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_ITFT_SPIM",
                table: "SHIPMENT_ITEM_FEATURE",
                columns: new[] { "SHIPMENT_ID", "SHIPMENT_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "SHPT_ITM_FTR_TXCRS",
                table: "SHIPMENT_ITEM_FEATURE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPT_ITM_FTR_TXSTP",
                table: "SHIPMENT_ITEM_FEATURE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPMT_MTD_TP_TXCRS",
                table: "SHIPMENT_METHOD_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPMT_MTD_TP_TXSTP",
                table: "SHIPMENT_METHOD_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPKG_BXTYP",
                table: "SHIPMENT_PACKAGE",
                column: "SHIPMENT_BOX_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "SHPKG_DUOM",
                table: "SHIPMENT_PACKAGE",
                column: "DIMENSION_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "SHPKG_SHPMNT",
                table: "SHIPMENT_PACKAGE",
                column: "SHIPMENT_ID");

            migrationBuilder.CreateIndex(
                name: "SHPKG_WUOM",
                table: "SHIPMENT_PACKAGE",
                column: "WEIGHT_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_PCKG_TXCRTS",
                table: "SHIPMENT_PACKAGE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_PCKG_TXSTMP",
                table: "SHIPMENT_PACKAGE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "PCK_CNTNT_PROD",
                table: "SHIPMENT_PACKAGE_CONTENT",
                column: "SUB_PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "PCK_CNTNT_SHITM",
                table: "SHIPMENT_PACKAGE_CONTENT",
                columns: new[] { "SHIPMENT_ID", "SHIPMENT_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "PCK_CNTNT_SHPKG",
                table: "SHIPMENT_PACKAGE_CONTENT",
                columns: new[] { "SHIPMENT_ID", "SHIPMENT_PACKAGE_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "SHPT_PCG_CNT_TXCRS",
                table: "SHIPMENT_PACKAGE_CONTENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPT_PCG_CNT_TXSTP",
                table: "SHIPMENT_PACKAGE_CONTENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPKRTSG_CUOM",
                table: "SHIPMENT_PACKAGE_ROUTE_SEG",
                column: "CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "SHPKRTSG_RTSG",
                table: "SHIPMENT_PACKAGE_ROUTE_SEG",
                columns: new[] { "SHIPMENT_ID", "SHIPMENT_ROUTE_SEGMENT_ID" });

            migrationBuilder.CreateIndex(
                name: "SHPKRTSG_SHPKG",
                table: "SHIPMENT_PACKAGE_ROUTE_SEG",
                columns: new[] { "SHIPMENT_ID", "SHIPMENT_PACKAGE_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "SHT_PCG_RT_SG_TXCS",
                table: "SHIPMENT_PACKAGE_ROUTE_SEG",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHT_PCG_RT_SG_TXSP",
                table: "SHIPMENT_PACKAGE_ROUTE_SEG",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHP_RCPT_INVITM",
                table: "SHIPMENT_RECEIPT",
                column: "INVENTORY_ITEM_ID");

            migrationBuilder.CreateIndex(
                name: "SHP_RCPT_ORDITM",
                table: "SHIPMENT_RECEIPT",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "SHP_RCPT_PROD",
                table: "SHIPMENT_RECEIPT",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "SHP_RCPT_REJRSN",
                table: "SHIPMENT_RECEIPT",
                column: "REJECTION_ID");

            migrationBuilder.CreateIndex(
                name: "SHP_RCPT_RETINVITM",
                table: "SHIPMENT_RECEIPT",
                columns: new[] { "RETURN_ID", "RETURN_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "SHP_RCPT_SHPKG",
                table: "SHIPMENT_RECEIPT",
                columns: new[] { "SHIPMENT_ID", "SHIPMENT_PACKAGE_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "SHP_RCPT_USERLGN",
                table: "SHIPMENT_RECEIPT",
                column: "RECEIVED_BY_USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_RCPT_TXCRTS",
                table: "SHIPMENT_RECEIPT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_RCPT_TXSTMP",
                table: "SHIPMENT_RECEIPT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHP_RCPTRL_PTRL",
                table: "SHIPMENT_RECEIPT_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "SHP_RCPTRL_PTY",
                table: "SHIPMENT_RECEIPT_ROLE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "SHP_RCPTRL_RCPT",
                table: "SHIPMENT_RECEIPT_ROLE",
                column: "RECEIPT_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMT_RCT_RL_TXCRS",
                table: "SHIPMENT_RECEIPT_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPMT_RCT_RL_TXSTP",
                table: "SHIPMENT_RECEIPT_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPKRTSG_BWUOM",
                table: "SHIPMENT_ROUTE_SEGMENT",
                column: "BILLING_WEIGHT_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "SHPKRTSG_CSSTS",
                table: "SHIPMENT_ROUTE_SEGMENT",
                column: "CARRIER_SERVICE_STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMT_RT_SGT_TXCRS",
                table: "SHIPMENT_ROUTE_SEGMENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPMT_RT_SGT_TXSTP",
                table: "SHIPMENT_ROUTE_SEGMENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPMT_RTSEG_CPTY",
                table: "SHIPMENT_ROUTE_SEGMENT",
                column: "CARRIER_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMT_RTSEG_CUOM",
                table: "SHIPMENT_ROUTE_SEGMENT",
                column: "CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMT_RTSEG_DEL",
                table: "SHIPMENT_ROUTE_SEGMENT",
                column: "DELIVERY_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMT_RTSEG_DFAC",
                table: "SHIPMENT_ROUTE_SEGMENT",
                column: "DEST_FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMT_RTSEG_DPAD",
                table: "SHIPMENT_ROUTE_SEGMENT",
                column: "DEST_CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMT_RTSEG_DTCN",
                table: "SHIPMENT_ROUTE_SEGMENT",
                column: "DEST_TELECOM_NUMBER_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMT_RTSEG_OFAC",
                table: "SHIPMENT_ROUTE_SEGMENT",
                column: "ORIGIN_FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMT_RTSEG_OPAD",
                table: "SHIPMENT_ROUTE_SEGMENT",
                column: "ORIGIN_CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMT_RTSEG_OTCN",
                table: "SHIPMENT_ROUTE_SEGMENT",
                column: "ORIGIN_TELECOM_NUMBER_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMT_RTSEG_SHMT",
                table: "SHIPMENT_ROUTE_SEGMENT",
                column: "SHIPMENT_METHOD_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMT_RTSEG_SHPMT",
                table: "SHIPMENT_ROUTE_SEGMENT",
                column: "SHIPMENT_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_STTS_SHMT",
                table: "SHIPMENT_STATUS",
                column: "SHIPMENT_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_STTS_STTS",
                table: "SHIPMENT_STATUS",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_STTS_TXCRTS",
                table: "SHIPMENT_STATUS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_STTS_TXSTMP",
                table: "SHIPMENT_STATUS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_STTS_USRLGN",
                table: "SHIPMENT_STATUS",
                column: "CHANGE_BY_USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "SHIPT_EST_GEO_FROM",
                table: "SHIPMENT_TIME_ESTIMATE",
                column: "GEO_ID_FROM");

            migrationBuilder.CreateIndex(
                name: "SHIPT_EST_GEO_TO",
                table: "SHIPMENT_TIME_ESTIMATE",
                column: "GEO_ID_TO");

            migrationBuilder.CreateIndex(
                name: "SHIPT_EST_METHOD",
                table: "SHIPMENT_TIME_ESTIMATE",
                columns: new[] { "SHIPMENT_METHOD_TYPE_ID", "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "SHIPT_EST_UOM",
                table: "SHIPMENT_TIME_ESTIMATE",
                column: "LEAD_TIME_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMT_TM_EST_TXCRS",
                table: "SHIPMENT_TIME_ESTIMATE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPMT_TM_EST_TXSTP",
                table: "SHIPMENT_TIME_ESTIMATE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_TP_TXCRTS",
                table: "SHIPMENT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_TP_TXSTMP",
                table: "SHIPMENT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_TYPPAR",
                table: "SHIPMENT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMNT_TYPATR",
                table: "SHIPMENT_TYPE_ATTR",
                column: "SHIPMENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "SHPMT_TP_ATR_TXCRS",
                table: "SHIPMENT_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPMT_TP_ATR_TXSTP",
                table: "SHIPMENT_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPNG_DOC_DOC",
                table: "SHIPPING_DOCUMENT",
                column: "DOCUMENT_ID");

            migrationBuilder.CreateIndex(
                name: "SHPNG_DOC_SHPKG",
                table: "SHIPPING_DOCUMENT",
                columns: new[] { "SHIPMENT_ID", "SHIPMENT_PACKAGE_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "SHPNG_DOC_SMITM",
                table: "SHIPPING_DOCUMENT",
                columns: new[] { "SHIPMENT_ID", "SHIPMENT_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "SHPPNG_DCMT_TXCRTS",
                table: "SHIPPING_DOCUMENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPPNG_DCMT_TXSTMP",
                table: "SHIPPING_DOCUMENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHLIST_CMECH",
                table: "SHOPPING_LIST",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "SHLIST_CSSM",
                table: "SHOPPING_LIST",
                columns: new[] { "SHIPMENT_METHOD_TYPE_ID", "CARRIER_PARTY_ID", "CARRIER_ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "SHLIST_PARENT",
                table: "SHOPPING_LIST",
                column: "PARENT_SHOPPING_LIST_ID");

            migrationBuilder.CreateIndex(
                name: "SHLIST_PRDS",
                table: "SHOPPING_LIST",
                column: "PRODUCT_STORE_ID");

            migrationBuilder.CreateIndex(
                name: "SHLIST_PRMCD",
                table: "SHOPPING_LIST",
                column: "PRODUCT_PROMO_CODE_ID");

            migrationBuilder.CreateIndex(
                name: "SHLIST_PTY",
                table: "SHOPPING_LIST",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "SHLIST_PYMETH",
                table: "SHOPPING_LIST",
                column: "PAYMENT_METHOD_ID");

            migrationBuilder.CreateIndex(
                name: "SHLIST_RECINFO",
                table: "SHOPPING_LIST",
                column: "RECURRENCE_INFO_ID");

            migrationBuilder.CreateIndex(
                name: "SHLIST_TYPE",
                table: "SHOPPING_LIST",
                column: "SHOPPING_LIST_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "SHPPNG_LST_TXCRTS",
                table: "SHOPPING_LIST",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPPNG_LST_TXSTMP",
                table: "SHOPPING_LIST",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHLIST_ITEM_LIST",
                table: "SHOPPING_LIST_ITEM",
                column: "SHOPPING_LIST_ID");

            migrationBuilder.CreateIndex(
                name: "SHLIST_ITEM_PROD",
                table: "SHOPPING_LIST_ITEM",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "SHPG_LST_ITM_TXCRS",
                table: "SHOPPING_LIST_ITEM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPG_LST_ITM_TXSTP",
                table: "SHOPPING_LIST_ITEM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHG_LST_ITM_SRV_TP",
                table: "SHOPPING_LIST_ITEM_SURVEY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHG_LST_ITM_SRV_TS",
                table: "SHOPPING_LIST_ITEM_SURVEY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHLIST_ITSUR_ITEM",
                table: "SHOPPING_LIST_ITEM_SURVEY",
                columns: new[] { "SHOPPING_LIST_ID", "SHOPPING_LIST_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "SHLIST_ITSUR_LIST",
                table: "SHOPPING_LIST_ITEM_SURVEY",
                column: "SHOPPING_LIST_ID");

            migrationBuilder.CreateIndex(
                name: "SHLIST_ITSUR_RESP",
                table: "SHOPPING_LIST_ITEM_SURVEY",
                column: "SURVEY_RESPONSE_ID");

            migrationBuilder.CreateIndex(
                name: "SHPPG_LST_TP_TXCRS",
                table: "SHOPPING_LIST_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHPPG_LST_TP_TXSTP",
                table: "SHOPPING_LIST_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHG_LST_WRK_EFT_TP",
                table: "SHOPPING_LIST_WORK_EFFORT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHG_LST_WRK_EFT_TS",
                table: "SHOPPING_LIST_WORK_EFFORT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SHLISTWE_SHLST",
                table: "SHOPPING_LIST_WORK_EFFORT",
                column: "SHOPPING_LIST_ID");

            migrationBuilder.CreateIndex(
                name: "SHLISTWE_WEFF",
                table: "SHOPPING_LIST_WORK_EFFORT",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "PARNT_SKILL_TYPE",
                table: "SKILL_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "SKILL_TYPE_TXCRTS",
                table: "SKILL_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SKILL_TYPE_TXSTMP",
                table: "SKILL_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "STNDRD_LNGG_TXCRTS",
                table: "STANDARD_LANGUAGE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "STNDRD_LNGG_TXSTMP",
                table: "STANDARD_LANGUAGE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "STATUS_ITEM_TXCRTS",
                table: "STATUS_ITEM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "STATUS_ITEM_TXSTMP",
                table: "STATUS_ITEM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "STATUS_TO_TYPE",
                table: "STATUS_ITEM",
                column: "STATUS_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "STATUS_TYPE_PARENT",
                table: "STATUS_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "STATUS_TYPE_TXCRTS",
                table: "STATUS_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "STATUS_TYPE_TXSTMP",
                table: "STATUS_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "STATUS_CHG_MAIN",
                table: "STATUS_VALID_CHANGE",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "STATUS_CHG_TO",
                table: "STATUS_VALID_CHANGE",
                column: "STATUS_ID_TO");

            migrationBuilder.CreateIndex(
                name: "STS_VLD_CHG_TXCRTS",
                table: "STATUS_VALID_CHANGE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "STS_VLD_CHG_TXSTMP",
                table: "STATUS_VALID_CHANGE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SBSCRPTN_TXCRTS",
                table: "SUBSCRIPTION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SBSCRPTN_TXSTMP",
                table: "SUBSCRIPTION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SUBSC_ATU",
                table: "SUBSCRIPTION",
                column: "AVAILABLE_TIME_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "SUBSC_CONT_MECH",
                table: "SUBSCRIPTION",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "SUBSC_CTU",
                table: "SUBSCRIPTION",
                column: "CANCL_AUTM_EXT_TIME_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "SUBSC_GTU",
                table: "SUBSCRIPTION",
                column: "GRACE_PERIOD_ON_EXPIRY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "SUBSC_INV_ITM",
                table: "SUBSCRIPTION",
                column: "INVENTORY_ITEM_ID");

            migrationBuilder.CreateIndex(
                name: "SUBSC_MTU",
                table: "SUBSCRIPTION",
                column: "MAX_LIFE_TIME_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "SUBSC_NEED_TYPE",
                table: "SUBSCRIPTION",
                column: "NEED_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "SUBSC_OPARTY",
                table: "SUBSCRIPTION",
                column: "ORIGINATED_FROM_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "SUBSC_ORDERITM",
                table: "SUBSCRIPTION",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "SUBSC_OROLE_TYPE",
                table: "SUBSCRIPTION",
                column: "ORIGINATED_FROM_ROLE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "SUBSC_PARTY",
                table: "SUBSCRIPTION",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "SUBSC_PROD_CAT",
                table: "SUBSCRIPTION",
                column: "PRODUCT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "SUBSC_PRODUCT",
                table: "SUBSCRIPTION",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "SUBSC_ROLE_TYPE",
                table: "SUBSCRIPTION",
                column: "ROLE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "SUBSC_SRESRC",
                table: "SUBSCRIPTION",
                column: "SUBSCRIPTION_RESOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "SUBSC_TO_TYPE",
                table: "SUBSCRIPTION",
                column: "SUBSCRIPTION_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "SUBSC_UTU",
                table: "SUBSCRIPTION",
                column: "USE_TIME_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "SBSCRPN_ACTT_TXCRS",
                table: "SUBSCRIPTION_ACTIVITY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SBSCRPN_ACTT_TXSTP",
                table: "SUBSCRIPTION_ACTIVITY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SBSCRPN_ATTT_TXCRS",
                table: "SUBSCRIPTION_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SBSCRPN_ATTT_TXSTP",
                table: "SUBSCRIPTION_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SUBSC_ATTR",
                table: "SUBSCRIPTION_ATTRIBUTE",
                column: "SUBSCRIPTION_ID");

            migrationBuilder.CreateIndex(
                name: "SBSCN_CMM_EVT_TXCS",
                table: "SUBSCRIPTION_COMM_EVENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SBSCN_CMM_EVT_TXSP",
                table: "SUBSCRIPTION_COMM_EVENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SUBSC_COM_EVENT",
                table: "SUBSCRIPTION_COMM_EVENT",
                column: "COMMUNICATION_EVENT_ID");

            migrationBuilder.CreateIndex(
                name: "SUBSC_SUBSC",
                table: "SUBSCRIPTION_COMM_EVENT",
                column: "SUBSCRIPTION_ID");

            migrationBuilder.CreateIndex(
                name: "SBSCN_FLFLT_PC_TXP",
                table: "SUBSCRIPTION_FULFILLMENT_PIECE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SBSCN_FLFLT_PC_TXS",
                table: "SUBSCRIPTION_FULFILLMENT_PIECE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SUBSC_FP",
                table: "SUBSCRIPTION_FULFILLMENT_PIECE",
                column: "SUBSCRIPTION_ID");

            migrationBuilder.CreateIndex(
                name: "SUBSC_FP_ACT",
                table: "SUBSCRIPTION_FULFILLMENT_PIECE",
                column: "SUBSCRIPTION_ACTIVITY_ID");

            migrationBuilder.CreateIndex(
                name: "SBSCRPN_RSC_TXCRTS",
                table: "SUBSCRIPTION_RESOURCE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SBSCRPN_RSC_TXSTMP",
                table: "SUBSCRIPTION_RESOURCE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SUBSC_RES_CNTNT",
                table: "SUBSCRIPTION_RESOURCE",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "SUBSC_RES_PARENT",
                table: "SUBSCRIPTION_RESOURCE",
                column: "PARENT_RESOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "SUBSC_RES_WBSITE",
                table: "SUBSCRIPTION_RESOURCE",
                column: "WEB_SITE_ID");

            migrationBuilder.CreateIndex(
                name: "SBSCRPTN_TP_TXCRTS",
                table: "SUBSCRIPTION_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SBSCRPTN_TP_TXSTMP",
                table: "SUBSCRIPTION_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SUBSC_TYPE_PARENT",
                table: "SUBSCRIPTION_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "SBSCRN_TP_ATR_TXCS",
                table: "SUBSCRIPTION_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SBSCRN_TP_ATR_TXSP",
                table: "SUBSCRIPTION_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SUBSC_TYPE_ATTR",
                table: "SUBSCRIPTION_TYPE_ATTR",
                column: "SUBSCRIPTION_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "SPPR_PRF_ORR_TXCRS",
                table: "SUPPLIER_PREF_ORDER",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SPPR_PRF_ORR_TXSTP",
                table: "SUPPLIER_PREF_ORDER",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SPPLR_PRDCT_TXCRTS",
                table: "SUPPLIER_PRODUCT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SPPLR_PRDCT_TXSTMP",
                table: "SUPPLIER_PRODUCT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SUPPL_PROD_AGRIT",
                table: "SUPPLIER_PRODUCT",
                columns: new[] { "AGREEMENT_ID", "AGREEMENT_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "SUPPL_PROD_CUOM",
                table: "SUPPLIER_PRODUCT",
                column: "CURRENCY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "SUPPL_PROD_PARTY",
                table: "SUPPLIER_PRODUCT",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "SUPPL_PROD_PROD",
                table: "SUPPLIER_PRODUCT",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "SUPPL_PROD_QUOM",
                table: "SUPPLIER_PRODUCT",
                column: "QUANTITY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "SUPPL_PROD_SPORD",
                table: "SUPPLIER_PRODUCT",
                column: "SUPPLIER_PREF_ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "SUPPL_PROD_SRTPE",
                table: "SUPPLIER_PRODUCT",
                column: "SUPPLIER_RATING_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "SPPR_PRT_FTR_TXCRS",
                table: "SUPPLIER_PRODUCT_FEATURE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SPPR_PRT_FTR_TXSTP",
                table: "SUPPLIER_PRODUCT_FEATURE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SUPPL_FEAT_FEAT",
                table: "SUPPLIER_PRODUCT_FEATURE",
                column: "PRODUCT_FEATURE_ID");

            migrationBuilder.CreateIndex(
                name: "SUPPL_FEAT_PARTY",
                table: "SUPPLIER_PRODUCT_FEATURE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "SUPPL_FEAT_UOM",
                table: "SUPPLIER_PRODUCT_FEATURE",
                column: "UOM_ID");

            migrationBuilder.CreateIndex(
                name: "SPPR_RTG_TP_TXCRTS",
                table: "SUPPLIER_RATING_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SPPR_RTG_TP_TXSTMP",
                table: "SUPPLIER_RATING_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SURVEY_TXCRTS",
                table: "SURVEY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SURVEY_TXSTMP",
                table: "SURVEY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRV_APPL_TP_TXCRTS",
                table: "SURVEY_APPL_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRV_APPL_TP_TXSTMP",
                table: "SURVEY_APPL_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRV_MLT_RSP_TXCRTS",
                table: "SURVEY_MULTI_RESP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRV_MLT_RSP_TXSTMP",
                table: "SURVEY_MULTI_RESP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRVYMRSP_SRVY",
                table: "SURVEY_MULTI_RESP",
                column: "SURVEY_ID");

            migrationBuilder.CreateIndex(
                name: "SRV_MLT_RSP_CLN_TP",
                table: "SURVEY_MULTI_RESP_COLUMN",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRV_MLT_RSP_CLN_TS",
                table: "SURVEY_MULTI_RESP_COLUMN",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRVYMRSPCL_SMRESP",
                table: "SURVEY_MULTI_RESP_COLUMN",
                columns: new[] { "SURVEY_ID", "SURVEY_MULTI_RESP_ID" });

            migrationBuilder.CreateIndex(
                name: "SRVYPAGE_SRVY",
                table: "SURVEY_PAGE",
                column: "SURVEY_ID");

            migrationBuilder.CreateIndex(
                name: "SURVEY_PAGE_TXCRTS",
                table: "SURVEY_PAGE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SURVEY_PAGE_TXSTMP",
                table: "SURVEY_PAGE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRV_QSTN_TXCRTS",
                table: "SURVEY_QUESTION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRV_QSTN_TXSTMP",
                table: "SURVEY_QUESTION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRVYQST_GEO",
                table: "SURVEY_QUESTION",
                column: "GEO_ID");

            migrationBuilder.CreateIndex(
                name: "SRVYQST_SRVYQTCT",
                table: "SURVEY_QUESTION",
                column: "SURVEY_QUESTION_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "SRVYQST_SRVYQTP",
                table: "SURVEY_QUESTION",
                column: "SURVEY_QUESTION_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "SRV_QSN_APL_TXCRTS",
                table: "SURVEY_QUESTION_APPL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRV_QSN_APL_TXSTMP",
                table: "SURVEY_QUESTION_APPL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRVYQSTAPL_SRVY",
                table: "SURVEY_QUESTION_APPL",
                column: "SURVEY_ID");

            migrationBuilder.CreateIndex(
                name: "SRVYQSTAPL_SRVYQ",
                table: "SURVEY_QUESTION_APPL",
                column: "SURVEY_QUESTION_ID");

            migrationBuilder.CreateIndex(
                name: "SRVYQSTAPL_SVQO",
                table: "SURVEY_QUESTION_APPL",
                columns: new[] { "WITH_SURVEY_QUESTION_ID", "WITH_SURVEY_OPTION_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "SRV_QSN_CTR_TXCRTS",
                table: "SURVEY_QUESTION_CATEGORY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRV_QSN_CTR_TXSTMP",
                table: "SURVEY_QUESTION_CATEGORY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRVYQSTCT_PAR",
                table: "SURVEY_QUESTION_CATEGORY",
                column: "PARENT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "SRV_QSN_OPN_TXCRTS",
                table: "SURVEY_QUESTION_OPTION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRV_QSN_OPN_TXSTMP",
                table: "SURVEY_QUESTION_OPTION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRVYQSTOP_SRVYQ",
                table: "SURVEY_QUESTION_OPTION",
                column: "SURVEY_QUESTION_ID");

            migrationBuilder.CreateIndex(
                name: "SRV_QSTN_TP_TXCRTS",
                table: "SURVEY_QUESTION_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRV_QSTN_TP_TXSTMP",
                table: "SURVEY_QUESTION_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRV_RSPNS_TXCRTS",
                table: "SURVEY_RESPONSE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRV_RSPNS_TXSTMP",
                table: "SURVEY_RESPONSE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRVYRSP_SRVY",
                table: "SURVEY_RESPONSE",
                column: "SURVEY_ID");

            migrationBuilder.CreateIndex(
                name: "SRVYRSP_STTS",
                table: "SURVEY_RESPONSE",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "SRV_RSPS_ANR_TXCRS",
                table: "SURVEY_RESPONSE_ANSWER",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRV_RSPS_ANR_TXSTP",
                table: "SURVEY_RESPONSE_ANSWER",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRVYRSPA_CONT",
                table: "SURVEY_RESPONSE_ANSWER",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "SRVYRSPA_OPT",
                table: "SURVEY_RESPONSE_ANSWER",
                columns: new[] { "SURVEY_QUESTION_ID", "SURVEY_OPTION_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "SRVYRSPA_SVQU",
                table: "SURVEY_RESPONSE_ANSWER",
                column: "SURVEY_QUESTION_ID");

            migrationBuilder.CreateIndex(
                name: "SRVYRSPA_SVRSP",
                table: "SURVEY_RESPONSE_ANSWER",
                column: "SURVEY_RESPONSE_ID");

            migrationBuilder.CreateIndex(
                name: "SRV_TRGGR_TXCRTS",
                table: "SURVEY_TRIGGER",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRV_TRGGR_TXSTMP",
                table: "SURVEY_TRIGGER",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SRVYTRG_SRVY",
                table: "SURVEY_TRIGGER",
                column: "SURVEY_ID");

            migrationBuilder.CreateIndex(
                name: "SRVYTRG_SRVYAPT",
                table: "SURVEY_TRIGGER",
                column: "SURVEY_APPL_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "SSTM_PRPRT_TXCRTS",
                table: "SYSTEM_PROPERTY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "SSTM_PRPRT_TXSTMP",
                table: "SYSTEM_PROPERTY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TRPTD_LGN_VW_TXCRS",
                table: "TARPITTED_LOGIN_VIEW",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TRPTD_LGN_VW_TXSTP",
                table: "TARPITTED_LOGIN_VIEW",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TAXAUTH_TAGEO",
                table: "TAX_AUTHORITY",
                column: "TAX_AUTH_GEO_ID");

            migrationBuilder.CreateIndex(
                name: "TAXAUTH_TAPARTY",
                table: "TAX_AUTHORITY",
                column: "TAX_AUTH_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "TX_ATHRT_TXCRTS",
                table: "TAX_AUTHORITY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TX_ATHRT_TXSTMP",
                table: "TAX_AUTHORITY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TAXAUTHASC_ASTP",
                table: "TAX_AUTHORITY_ASSOC",
                column: "TAX_AUTHORITY_ASSOC_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "TAXAUTHASC_TOTXA",
                table: "TAX_AUTHORITY_ASSOC",
                columns: new[] { "TO_TAX_AUTH_GEO_ID", "TO_TAX_AUTH_PARTY_ID" });

            migrationBuilder.CreateIndex(
                name: "TAXAUTHASC_TXA",
                table: "TAX_AUTHORITY_ASSOC",
                columns: new[] { "TAX_AUTH_GEO_ID", "TAX_AUTH_PARTY_ID" });

            migrationBuilder.CreateIndex(
                name: "TX_ATHT_ASC_TXCRTS",
                table: "TAX_AUTHORITY_ASSOC",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TX_ATHT_ASC_TXSTMP",
                table: "TAX_AUTHORITY_ASSOC",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TX_ATT_ASC_TP_TXCS",
                table: "TAX_AUTHORITY_ASSOC_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TX_ATT_ASC_TP_TXSP",
                table: "TAX_AUTHORITY_ASSOC_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TAXAUTHCAT_CAT",
                table: "TAX_AUTHORITY_CATEGORY",
                column: "PRODUCT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "TAXAUTHCAT_TXA",
                table: "TAX_AUTHORITY_CATEGORY",
                columns: new[] { "TAX_AUTH_GEO_ID", "TAX_AUTH_PARTY_ID" });

            migrationBuilder.CreateIndex(
                name: "TX_ATHT_CTR_TXCRTS",
                table: "TAX_AUTHORITY_CATEGORY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TX_ATHT_CTR_TXSTMP",
                table: "TAX_AUTHORITY_CATEGORY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TAXAUTHGLA_GLA",
                table: "TAX_AUTHORITY_GL_ACCOUNT",
                column: "GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "TAXAUTHGLA_OPTY",
                table: "TAX_AUTHORITY_GL_ACCOUNT",
                column: "ORGANIZATION_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "TAXAUTHGLA_TXA",
                table: "TAX_AUTHORITY_GL_ACCOUNT",
                columns: new[] { "TAX_AUTH_GEO_ID", "TAX_AUTH_PARTY_ID" });

            migrationBuilder.CreateIndex(
                name: "TX_ATT_GL_ACT_TXCS",
                table: "TAX_AUTHORITY_GL_ACCOUNT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TX_ATT_GL_ACT_TXSP",
                table: "TAX_AUTHORITY_GL_ACCOUNT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TAXAUTHRTEP_PCAT",
                table: "TAX_AUTHORITY_RATE_PRODUCT",
                column: "PRODUCT_CATEGORY_ID");

            migrationBuilder.CreateIndex(
                name: "TAXAUTHRTEP_PSTR",
                table: "TAX_AUTHORITY_RATE_PRODUCT",
                column: "PRODUCT_STORE_ID");

            migrationBuilder.CreateIndex(
                name: "TAXAUTHRTEP_RTTP",
                table: "TAX_AUTHORITY_RATE_PRODUCT",
                column: "TAX_AUTHORITY_RATE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "TAXAUTHRTEP_TXA",
                table: "TAX_AUTHORITY_RATE_PRODUCT",
                columns: new[] { "TAX_AUTH_GEO_ID", "TAX_AUTH_PARTY_ID" });

            migrationBuilder.CreateIndex(
                name: "TX_ATT_RT_PRT_TXCS",
                table: "TAX_AUTHORITY_RATE_PRODUCT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TX_ATT_RT_PRT_TXSP",
                table: "TAX_AUTHORITY_RATE_PRODUCT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TX_ATT_RT_TP_TXCRS",
                table: "TAX_AUTHORITY_RATE_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TX_ATT_RT_TP_TXSTP",
                table: "TAX_AUTHORITY_RATE_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CALENDAR_WEEK",
                table: "TECH_DATA_CALENDAR",
                column: "CALENDAR_WEEK_ID");

            migrationBuilder.CreateIndex(
                name: "TCH_DT_CLNR_TXCRTS",
                table: "TECH_DATA_CALENDAR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TCH_DT_CLNR_TXSTMP",
                table: "TECH_DATA_CALENDAR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EXC_DAY_CALENDAR",
                table: "TECH_DATA_CALENDAR_EXC_DAY",
                column: "CALENDAR_ID");

            migrationBuilder.CreateIndex(
                name: "TCH_CLR_EXC_D_TP",
                table: "TECH_DATA_CALENDAR_EXC_DAY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TCH_CLR_EXC_D_TS",
                table: "TECH_DATA_CALENDAR_EXC_DAY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "EXC_WEEK_CALENDAR",
                table: "TECH_DATA_CALENDAR_EXC_WEEK",
                column: "CALENDAR_ID");

            migrationBuilder.CreateIndex(
                name: "EXC_WEEK_WEEK",
                table: "TECH_DATA_CALENDAR_EXC_WEEK",
                column: "CALENDAR_WEEK_ID");

            migrationBuilder.CreateIndex(
                name: "TCH_CLR_EXC_WK_TP",
                table: "TECH_DATA_CALENDAR_EXC_WEEK",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TCH_CLR_EXC_WK_TS",
                table: "TECH_DATA_CALENDAR_EXC_WEEK",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TCH_DT_CLR_WK_TXCS",
                table: "TECH_DATA_CALENDAR_WEEK",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TCH_DT_CLR_WK_TXSP",
                table: "TECH_DATA_CALENDAR_WEEK",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TLM_GTW_CNG_TXCRTS",
                table: "TELECOM_GATEWAY_CONFIG",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TLM_GTW_CNG_TXSTMP",
                table: "TELECOM_GATEWAY_CONFIG",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TLCM_MTD_TP_TXCRTS",
                table: "TELECOM_METHOD_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TLCM_MTD_TP_TXSTMP",
                table: "TELECOM_METHOD_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "AREA_CODE_IDX",
                table: "TELECOM_NUMBER",
                column: "AREA_CODE");

            migrationBuilder.CreateIndex(
                name: "CONTACT_NUMBER_IDX",
                table: "TELECOM_NUMBER",
                column: "CONTACT_NUMBER");

            migrationBuilder.CreateIndex(
                name: "COUNTRY_CODE_IDX",
                table: "TELECOM_NUMBER",
                column: "COUNTRY_CODE");

            migrationBuilder.CreateIndex(
                name: "TEL_NUM_CMECH",
                table: "TELECOM_NUMBER",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "TLCM_NMBR_TXCRTS",
                table: "TELECOM_NUMBER",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TLCM_NMBR_TXSTMP",
                table: "TELECOM_NUMBER",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TMPL_EXPRSN_TXCRTS",
                table: "TEMPORAL_EXPRESSION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TMPL_EXPRSN_TXSTMP",
                table: "TEMPORAL_EXPRESSION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TEMP_EXPR_FROM",
                table: "TEMPORAL_EXPRESSION_ASSOC",
                column: "FROM_TEMP_EXPR_ID");

            migrationBuilder.CreateIndex(
                name: "TEMP_EXPR_TO",
                table: "TEMPORAL_EXPRESSION_ASSOC",
                column: "TO_TEMP_EXPR_ID");

            migrationBuilder.CreateIndex(
                name: "TML_EXPRN_ASC_TXCS",
                table: "TEMPORAL_EXPRESSION_ASSOC",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TML_EXPRN_ASC_TXSP",
                table: "TEMPORAL_EXPRESSION_ASSOC",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TENANT_TXCRTS",
                table: "TENANT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TENANT_TXSTMP",
                table: "TENANT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "COMP_CNT",
                table: "TENANT_COMPONENT",
                column: "COMPONENT_NAME");

            migrationBuilder.CreateIndex(
                name: "TNNT_CMPNNT_TXCRTS",
                table: "TENANT_COMPONENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TNNT_CMPNNT_TXSTMP",
                table: "TENANT_COMPONENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TNTCOMP_TNT",
                table: "TENANT_COMPONENT",
                column: "TENANT_ID");

            migrationBuilder.CreateIndex(
                name: "TNNT_DT_SRC_TXCRTS",
                table: "TENANT_DATA_SOURCE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TNNT_DT_SRC_TXSTMP",
                table: "TENANT_DATA_SOURCE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TNTDTSRC_TNT",
                table: "TENANT_DATA_SOURCE",
                column: "TENANT_ID");

            migrationBuilder.CreateIndex(
                name: "TNNT_DMN_NM_TXCRTS",
                table: "TENANT_DOMAIN_NAME",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TNNT_DMN_NM_TXSTMP",
                table: "TENANT_DOMAIN_NAME",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TNNT_DMNAM",
                table: "TENANT_DOMAIN_NAME",
                column: "TENANT_ID");

            migrationBuilder.CreateIndex(
                name: "TNT_K_ENCRG_K_TXCS",
                table: "TENANT_KEY_ENCRYPTING_KEY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TNT_K_ENCRG_K_TXSP",
                table: "TENANT_KEY_ENCRYPTING_KEY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TNTKEK_TNT",
                table: "TENANT_KEY_ENCRYPTING_KEY",
                column: "TENANT_ID");

            migrationBuilder.CreateIndex(
                name: "TERM_TYPE_PAR",
                table: "TERM_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "TERM_TYPE_TXCRTS",
                table: "TERM_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TERM_TYPE_TXSTMP",
                table: "TERM_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TERM_TYPATR_TTYP",
                table: "TERM_TYPE_ATTR",
                column: "TERM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "TRM_TP_ATTR_TXCRTS",
                table: "TERM_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TRM_TP_ATTR_TXSTMP",
                table: "TERM_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TRMNTN_RSN_TXCRTS",
                table: "TERMINATION_REASON",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TRMNTN_RSN_TXSTMP",
                table: "TERMINATION_REASON",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TERM_TYP_PAR",
                table: "TERMINATION_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "TRMNTN_TP_TXCRTS",
                table: "TERMINATION_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TRMNTN_TP_TXSTMP",
                table: "TERMINATION_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TST_FLD_TP_TXCRTS",
                table: "TEST_FIELD_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TST_FLD_TP_TXSTMP",
                table: "TEST_FIELD_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ENTITY_ENTY_TYP",
                table: "TESTING",
                column: "TESTING_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "TESTING_TXCRTS",
                table: "TESTING",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TESTING_TXSTMP",
                table: "TESTING",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TSTNG_CRPT_TXCRTS",
                table: "TESTING_CRYPTO",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TSTNG_CRPT_TXSTMP",
                table: "TESTING_CRYPTO",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TESTING_IT_TEST",
                table: "TESTING_ITEM",
                column: "TESTING_ID");

            migrationBuilder.CreateIndex(
                name: "TSTNG_ITM_TXCRTS",
                table: "TESTING_ITEM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TSTNG_ITM_TXSTMP",
                table: "TESTING_ITEM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TESTNG_NDE_PARNT",
                table: "TESTING_NODE",
                column: "PRIMARY_PARENT_NODE_ID");

            migrationBuilder.CreateIndex(
                name: "TSTNG_ND_TXCRTS",
                table: "TESTING_NODE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TSTNG_ND_TXSTMP",
                table: "TESTING_NODE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TEST_NMBR_NODE",
                table: "TESTING_NODE_MEMBER",
                column: "TESTING_NODE_ID");

            migrationBuilder.CreateIndex(
                name: "TESTING_NMBR_TEST",
                table: "TESTING_NODE_MEMBER",
                column: "TESTING_ID");

            migrationBuilder.CreateIndex(
                name: "TSTG_ND_MMR_TXCRTS",
                table: "TESTING_NODE_MEMBER",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TSTG_ND_MMR_TXSTMP",
                table: "TESTING_NODE_MEMBER",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TSTG_RMV_ALL_TXCRS",
                table: "TESTING_REMOVE_ALL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TSTG_RMV_ALL_TXSTP",
                table: "TESTING_REMOVE_ALL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TEST_STA_STSITM",
                table: "TESTING_STATUS",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "TEST_STA_USRLGN",
                table: "TESTING_STATUS",
                column: "CHANGE_BY_USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "TSTNG_STTS_TXCRTS",
                table: "TESTING_STATUS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TSTNG_STTS_TXSTMP",
                table: "TESTING_STATUS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TSTNG_SBTP_TXCRTS",
                table: "TESTING_SUBTYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TSTNG_SBTP_TXSTMP",
                table: "TESTING_SUBTYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TSTNG_TP_TXCRTS",
                table: "TESTING_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TSTNG_TP_TXSTMP",
                table: "TESTING_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TIME_ENT_INVIT",
                table: "TIME_ENTRY",
                columns: new[] { "INVOICE_ID", "INVOICE_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "TIME_ENT_PRTY",
                table: "TIME_ENTRY",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "TIME_ENT_RTTP",
                table: "TIME_ENTRY",
                column: "RATE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "TIME_ENT_TSHT",
                table: "TIME_ENTRY",
                column: "TIMESHEET_ID");

            migrationBuilder.CreateIndex(
                name: "TIME_ENT_WEFF",
                table: "TIME_ENTRY",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "TIME_ENTRY_TXCRTS",
                table: "TIME_ENTRY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TIME_ENTRY_TXSTMP",
                table: "TIME_ENTRY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TIMESHEET_AB_UL",
                table: "TIMESHEET",
                column: "APPROVED_BY_USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "TIMESHEET_CPTY",
                table: "TIMESHEET",
                column: "CLIENT_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "TIMESHEET_PRTY",
                table: "TIMESHEET",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "TIMESHEET_STS",
                table: "TIMESHEET",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "TIMESHEET_TXCRTS",
                table: "TIMESHEET",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TIMESHEET_TXSTMP",
                table: "TIMESHEET",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TIMESHTRL_PRTY",
                table: "TIMESHEET_ROLE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "TIMESHTRL_PTRL",
                table: "TIMESHEET_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "TIMESHTRL_TSHT",
                table: "TIMESHEET_ROLE",
                column: "TIMESHEET_ID");

            migrationBuilder.CreateIndex(
                name: "TMSHT_RL_TXCRTS",
                table: "TIMESHEET_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TMSHT_RL_TXSTMP",
                table: "TIMESHEET_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TKNG_COD_MKCMPN",
                table: "TRACKING_CODE",
                column: "MARKETING_CAMPAIGN_ID");

            migrationBuilder.CreateIndex(
                name: "TKNG_COD_TYP",
                table: "TRACKING_CODE",
                column: "TRACKING_CODE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "TRCKNG_CD_TXCRTS",
                table: "TRACKING_CODE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TRCKNG_CD_TXSTMP",
                table: "TRACKING_CODE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TKNG_CODODR_ODR",
                table: "TRACKING_CODE_ORDER",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "TKNG_CODODR_TKCD",
                table: "TRACKING_CODE_ORDER",
                column: "TRACKING_CODE_ID");

            migrationBuilder.CreateIndex(
                name: "TKNG_CODODR_TYP",
                table: "TRACKING_CODE_ORDER",
                column: "TRACKING_CODE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "TRCKG_CD_ORR_TXCRS",
                table: "TRACKING_CODE_ORDER",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TRCKG_CD_ORR_TXSTP",
                table: "TRACKING_CODE_ORDER",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TKNG_CODODR_ODRTN",
                table: "TRACKING_CODE_ORDER_RETURN",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "TKNG_CODODR_RTN",
                table: "TRACKING_CODE_ORDER_RETURN",
                column: "RETURN_ID");

            migrationBuilder.CreateIndex(
                name: "TKNG_CODODR_RTNTCD",
                table: "TRACKING_CODE_ORDER_RETURN",
                column: "TRACKING_CODE_ID");

            migrationBuilder.CreateIndex(
                name: "TKNG_CODODR_RTNTYP",
                table: "TRACKING_CODE_ORDER_RETURN",
                column: "TRACKING_CODE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "TRG_CD_ORR_RTN_TXP",
                table: "TRACKING_CODE_ORDER_RETURN",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TRG_CD_ORR_RTN_TXS",
                table: "TRACKING_CODE_ORDER_RETURN",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TRCKG_CD_TP_TXCRTS",
                table: "TRACKING_CODE_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TRCKG_CD_TP_TXSTMP",
                table: "TRACKING_CODE_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TKNG_CODVST_SRCEM",
                table: "TRACKING_CODE_VISIT",
                column: "SOURCE_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "TKNG_CODVST_TKCD",
                table: "TRACKING_CODE_VISIT",
                column: "TRACKING_CODE_ID");

            migrationBuilder.CreateIndex(
                name: "TRCKG_CD_VST_TXCRS",
                table: "TRACKING_CODE_VISIT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TRCKG_CD_VST_TXSTP",
                table: "TRACKING_CODE_VISIT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TRAIN_TYPE_PAR",
                table: "TRAINING_CLASS_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "TRNG_CLS_TP_TXCRTS",
                table: "TRAINING_CLASS_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TRNG_CLS_TP_TXSTMP",
                table: "TRAINING_CLASS_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TRNNG_RQST_TXCRTS",
                table: "TRAINING_REQUEST",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "TRNNG_RQST_TXSTMP",
                table: "TRAINING_REQUEST",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "UNMPLMT_CLM_TXCRTS",
                table: "UNEMPLOYMENT_CLAIM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "UNMPLMT_CLM_TXSTMP",
                table: "UNEMPLOYMENT_CLAIM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "UOM_TO_TYPE",
                table: "UOM",
                column: "UOM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "UOM_TXCRTS",
                table: "UOM",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "UOM_TXSTMP",
                table: "UOM",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "UM_CNVRSN_TXCRTS",
                table: "UOM_CONVERSION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "UM_CNVRSN_TXSTMP",
                table: "UOM_CONVERSION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "UOM_CONV_MAIN",
                table: "UOM_CONVERSION",
                column: "UOM_ID");

            migrationBuilder.CreateIndex(
                name: "UOM_CONV_TO",
                table: "UOM_CONVERSION",
                column: "UOM_ID_TO");

            migrationBuilder.CreateIndex(
                name: "UOM_CUSTOM_METHOD",
                table: "UOM_CONVERSION",
                column: "CUSTOM_METHOD_ID");

            migrationBuilder.CreateIndex(
                name: "DATE_UOM_CONV_MAIN",
                table: "UOM_CONVERSION_DATED",
                column: "UOM_ID");

            migrationBuilder.CreateIndex(
                name: "DATE_UOM_CONV_TO",
                table: "UOM_CONVERSION_DATED",
                column: "UOM_ID_TO");

            migrationBuilder.CreateIndex(
                name: "UM_CNVRN_DTD_TXCRS",
                table: "UOM_CONVERSION_DATED",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "UM_CNVRN_DTD_TXSTP",
                table: "UOM_CONVERSION_DATED",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "UOMD_CUSTOM_METHOD",
                table: "UOM_CONVERSION_DATED",
                column: "CUSTOM_METHOD_ID");

            migrationBuilder.CreateIndex(
                name: "UOMD_PURPOSE_ENUM",
                table: "UOM_CONVERSION_DATED",
                column: "PURPOSE_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "UOM_GROUP_TXCRTS",
                table: "UOM_GROUP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "UOM_GROUP_TXSTMP",
                table: "UOM_GROUP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "UOM_GROUP_UOM",
                table: "UOM_GROUP",
                column: "UOM_ID");

            migrationBuilder.CreateIndex(
                name: "UOM_TYPE_PARENT",
                table: "UOM_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "UOM_TYPE_TXCRTS",
                table: "UOM_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "UOM_TYPE_TXSTMP",
                table: "UOM_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "UAGENT_BROWSER",
                table: "USER_AGENT",
                column: "BROWSER_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "UAGENT_METHOD",
                table: "USER_AGENT",
                column: "USER_AGENT_METHOD_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "UAGENT_PLATFORM",
                table: "USER_AGENT",
                column: "PLATFORM_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "UAGENT_PROTOCOL",
                table: "USER_AGENT",
                column: "PROTOCOL_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "UAGENT_TYPE",
                table: "USER_AGENT",
                column: "USER_AGENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "USER_AGENT_TXCRTS",
                table: "USER_AGENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "USER_AGENT_TXSTMP",
                table: "USER_AGENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "USR_AGT_MTD_TP_TXP",
                table: "USER_AGENT_METHOD_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "USR_AGT_MTD_TP_TXS",
                table: "USER_AGENT_METHOD_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "USR_AGNT_TP_TXCRTS",
                table: "USER_AGENT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "USR_AGNT_TP_TXSTMP",
                table: "USER_AGENT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "USER_LOGIN_TXCRTS",
                table: "USER_LOGIN",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "USER_LOGIN_TXSTMP",
                table: "USER_LOGIN",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "USER_PARTY",
                table: "USER_LOGIN",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "USER_LH_PARTY",
                table: "USER_LOGIN_HISTORY",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "USER_LH_USER",
                table: "USER_LOGIN_HISTORY",
                column: "USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "USR_LGN_HSR_TXCRTS",
                table: "USER_LOGIN_HISTORY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "USR_LGN_HSR_TXSTMP",
                table: "USER_LOGIN_HISTORY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "USER_LPH_USER",
                table: "USER_LOGIN_PASSWORD_HISTORY",
                column: "USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "USR_LGN_PSD_HSR_TP",
                table: "USER_LOGIN_PASSWORD_HISTORY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "USR_LGN_PSD_HSR_TS",
                table: "USER_LOGIN_PASSWORD_HISTORY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "USER_SECGRP_GRP",
                table: "USER_LOGIN_SECURITY_GROUP",
                column: "GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "USER_SECGRP_USER",
                table: "USER_LOGIN_SECURITY_GROUP",
                column: "USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "USR_LGN_SCT_GRP_TP",
                table: "USER_LOGIN_SECURITY_GROUP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "USR_LGN_SCT_GRP_TS",
                table: "USER_LOGIN_SECURITY_GROUP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "USER_SESSION_USER",
                table: "USER_LOGIN_SESSION",
                column: "USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "USR_LGN_SSN_TXCRTS",
                table: "USER_LOGIN_SESSION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "USR_LGN_SSN_TXSTMP",
                table: "USER_LOGIN_SESSION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "USR_PRF_GRP_TP_TXP",
                table: "USER_PREF_GROUP_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "USR_PRF_GRP_TP_TXS",
                table: "USER_PREF_GROUP_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "UP_USER_GROUP_TYPE",
                table: "USER_PREFERENCE",
                column: "USER_PREF_GROUP_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "USR_PRFRNC_TXCRTS",
                table: "USER_PREFERENCE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "USR_PRFRNC_TXSTMP",
                table: "USER_PREFERENCE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "VAL_CMRLE_CMTYPE",
                table: "VALID_CONTACT_MECH_ROLE",
                column: "CONTACT_MECH_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "VAL_CMRLE_ROLE",
                table: "VALID_CONTACT_MECH_ROLE",
                column: "ROLE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "VLD_CNT_MCH_RL_TXP",
                table: "VALID_CONTACT_MECH_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "VLD_CNT_MCH_RL_TXS",
                table: "VALID_CONTACT_MECH_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "VALID_RTY_EPSTP",
                table: "VALID_RESPONSIBILITY",
                column: "EMPL_POSITION_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "VALID_RTY_RYTP",
                table: "VALID_RESPONSIBILITY",
                column: "RESPONSIBILITY_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "VLD_RSPNSBT_TXCRTS",
                table: "VALID_RESPONSIBILITY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "VLD_RSPNSBT_TXSTMP",
                table: "VALID_RESPONSIBILITY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "VL_LNK_K_TXCRTS",
                table: "VALUE_LINK_KEY",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "VL_LNK_K_TXSTMP",
                table: "VALUE_LINK_KEY",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "VRNC_RSN_TXCRTS",
                table: "VARIANCE_REASON",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "VRNC_RSN_TXSTMP",
                table: "VARIANCE_REASON",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "VRC_RSN_GL_ACT_TXP",
                table: "VARIANCE_REASON_GL_ACCOUNT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "VRC_RSN_GL_ACT_TXS",
                table: "VARIANCE_REASON_GL_ACCOUNT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "VRGL_GLACCT",
                table: "VARIANCE_REASON_GL_ACCOUNT",
                column: "GL_ACCOUNT_ID");

            migrationBuilder.CreateIndex(
                name: "VRGL_PARTY",
                table: "VARIANCE_REASON_GL_ACCOUNT",
                column: "ORGANIZATION_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "VRGL_VREAS",
                table: "VARIANCE_REASON_GL_ACCOUNT",
                column: "VARIANCE_REASON_ID");

            migrationBuilder.CreateIndex(
                name: "IX_VEHICLE_ANNOTATIONS_AnnotationId",
                table: "VEHICLE_ANNOTATIONS",
                column: "AnnotationId");

            migrationBuilder.CreateIndex(
                name: "IX_VEHICLE_ANNOTATIONS_VehicleId",
                table: "VEHICLE_ANNOTATIONS",
                column: "VehicleId");

            migrationBuilder.CreateIndex(
                name: "IX_VEHICLE_CONTENTS_ContentId",
                table: "VEHICLE_CONTENTS",
                column: "ContentId");

            migrationBuilder.CreateIndex(
                name: "IX_VEHICLES_ExteriorColorId",
                table: "VEHICLES",
                column: "ExteriorColorId");

            migrationBuilder.CreateIndex(
                name: "IX_VEHICLES_FromPartyId",
                table: "VEHICLES",
                column: "FromPartyId");

            migrationBuilder.CreateIndex(
                name: "IX_VEHICLES_InteriorColorId",
                table: "VEHICLES",
                column: "InteriorColorId");

            migrationBuilder.CreateIndex(
                name: "IX_VEHICLES_MakeId",
                table: "VEHICLES",
                column: "MakeId");

            migrationBuilder.CreateIndex(
                name: "IX_VEHICLES_ModelId",
                table: "VEHICLES",
                column: "ModelId");

            migrationBuilder.CreateIndex(
                name: "IX_VEHICLES_TransmissionTypeId",
                table: "VEHICLES",
                column: "TransmissionTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_VEHICLES_VehicleTypeId",
                table: "VEHICLES",
                column: "VehicleTypeId");

            migrationBuilder.CreateIndex(
                name: "VENDOR_PARTY",
                table: "VENDOR",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "VENDOR_TXCRTS",
                table: "VENDOR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "VENDOR_TXSTMP",
                table: "VENDOR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "VENDPROD_PROD",
                table: "VENDOR_PRODUCT",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "VENDPROD_PSGRP",
                table: "VENDOR_PRODUCT",
                column: "PRODUCT_STORE_GROUP_ID");

            migrationBuilder.CreateIndex(
                name: "VENDPROD_VPTY",
                table: "VENDOR_PRODUCT",
                column: "VENDOR_PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "VNDR_PRDCT_TXCRTS",
                table: "VENDOR_PRODUCT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "VNDR_PRDCT_TXSTMP",
                table: "VENDOR_PRODUCT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "DATA_REC_VIDEO",
                table: "VIDEO_DATA_RESOURCE",
                column: "DATA_RESOURCE_ID");

            migrationBuilder.CreateIndex(
                name: "VD_DT_RSRC_TXCRTS",
                table: "VIDEO_DATA_RESOURCE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "VD_DT_RSRC_TXSTMP",
                table: "VIDEO_DATA_RESOURCE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "VISIT_THRU_IDX",
                table: "VISIT",
                column: "THRU_DATE");

            migrationBuilder.CreateIndex(
                name: "VISIT_USER_AGNT",
                table: "VISIT",
                column: "USER_AGENT_ID");

            migrationBuilder.CreateIndex(
                name: "VISIT_VISITOR",
                table: "VISIT",
                column: "VISITOR_ID");

            migrationBuilder.CreateIndex(
                name: "VISITOR_TXCRTS",
                table: "VISITOR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "VISITOR_TXSTMP",
                table: "VISITOR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "VSL_THM_TXCRTS",
                table: "VISUAL_THEME",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "VSL_THM_TXSTMP",
                table: "VISUAL_THEME",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "VT_THEME_SET",
                table: "VISUAL_THEME",
                column: "VISUAL_THEME_SET_ID");

            migrationBuilder.CreateIndex(
                name: "VSL_THM_RSC_TXCRTS",
                table: "VISUAL_THEME_RESOURCE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "VSL_THM_RSC_TXSTMP",
                table: "VISUAL_THEME_RESOURCE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "VT_RES_THEME",
                table: "VISUAL_THEME_RESOURCE",
                column: "VISUAL_THEME_ID");

            migrationBuilder.CreateIndex(
                name: "VT_RES_TYPE_ENUM",
                table: "VISUAL_THEME_RESOURCE",
                column: "RESOURCE_TYPE_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "VSL_THM_ST_TXCRTS",
                table: "VISUAL_THEME_SET",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "VSL_THM_ST_TXSTMP",
                table: "VISUAL_THEME_SET",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WB_ANLTS_CNG_TXCRS",
                table: "WEB_ANALYTICS_CONFIG",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WB_ANLTS_CNG_TXSTP",
                table: "WEB_ANALYTICS_CONFIG",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WANA_TYP_PARENT",
                table: "WEB_ANALYTICS_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "WB_ANLTS_TP_TXCRTS",
                table: "WEB_ANALYTICS_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WB_ANLTS_TP_TXSTMP",
                table: "WEB_ANALYTICS_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WEB_PAGE_CONTENT",
                table: "WEB_PAGE",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "WEB_PAGE_SITE",
                table: "WEB_PAGE",
                column: "WEB_SITE_ID");

            migrationBuilder.CreateIndex(
                name: "WEB_PAGE_TXCRTS",
                table: "WEB_PAGE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WEB_PAGE_TXSTMP",
                table: "WEB_PAGE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WB_PRFRC_TP_TXCRTS",
                table: "WEB_PREFERENCE_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WB_PRFRC_TP_TXSTMP",
                table: "WEB_PREFERENCE_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WEB_SITE_PRDS",
                table: "WEB_SITE",
                column: "PRODUCT_STORE_ID");

            migrationBuilder.CreateIndex(
                name: "WEB_SITE_THEME_SET",
                table: "WEB_SITE",
                column: "VISUAL_THEME_SET_ID");

            migrationBuilder.CreateIndex(
                name: "WEB_SITE_TXCRTS",
                table: "WEB_SITE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WEB_SITE_TXSTMP",
                table: "WEB_SITE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "CNTCT_LST_WEB_SITE",
                table: "WEB_SITE_CONTACT_LIST",
                column: "CONTACT_LIST_ID");

            migrationBuilder.CreateIndex(
                name: "WB_ST_CNT_LST_TXCS",
                table: "WEB_SITE_CONTACT_LIST",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WB_ST_CNT_LST_TXSP",
                table: "WEB_SITE_CONTACT_LIST",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WEB_SITE_CNTCT_LST",
                table: "WEB_SITE_CONTACT_LIST",
                column: "WEB_SITE_ID");

            migrationBuilder.CreateIndex(
                name: "WB_ST_CNTNT_TXCRTS",
                table: "WEB_SITE_CONTENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WB_ST_CNTNT_TXSTMP",
                table: "WEB_SITE_CONTENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WSCTNT_CONTENT",
                table: "WEB_SITE_CONTENT",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "WSCTNT_WEBSITE",
                table: "WEB_SITE_CONTENT",
                column: "WEB_SITE_ID");

            migrationBuilder.CreateIndex(
                name: "WSCTNT_WSCTTYPE",
                table: "WEB_SITE_CONTENT",
                column: "WEB_SITE_CONTENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "WB_ST_CNT_TP_TXCRS",
                table: "WEB_SITE_CONTENT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WB_ST_CNT_TP_TXSTP",
                table: "WEB_SITE_CONTENT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WSCT_TYPE_PARENT",
                table: "WEB_SITE_CONTENT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "WB_ST_PTH_ALS_TXCS",
                table: "WEB_SITE_PATH_ALIAS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WB_ST_PTH_ALS_TXSP",
                table: "WEB_SITE_PATH_ALIAS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WSPATH_CONTENT",
                table: "WEB_SITE_PATH_ALIAS",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "WSPATH_WEBSITE",
                table: "WEB_SITE_PATH_ALIAS",
                column: "WEB_SITE_ID");

            migrationBuilder.CreateIndex(
                name: "WB_ST_PBH_PNT_TXCS",
                table: "WEB_SITE_PUBLISH_POINT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WB_ST_PBH_PNT_TXSP",
                table: "WEB_SITE_PUBLISH_POINT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WBSTPP_CONTENT",
                table: "WEB_SITE_PUBLISH_POINT",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "WB_ST_RL_TXCRTS",
                table: "WEB_SITE_ROLE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WB_ST_RL_TXSTMP",
                table: "WEB_SITE_ROLE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WSRLE_PTYRLE",
                table: "WEB_SITE_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "WSRLE_WSITE",
                table: "WEB_SITE_ROLE",
                column: "WEB_SITE_ID");

            migrationBuilder.CreateIndex(
                name: "WB_USR_PRFRC_TXCRS",
                table: "WEB_USER_PREFERENCE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WB_USR_PRFRC_TXSTP",
                table: "WEB_USER_PREFERENCE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WEB_PREF_PARTY",
                table: "WEB_USER_PREFERENCE",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "WEB_PREF_TYPE",
                table: "WEB_USER_PREFERENCE",
                column: "WEB_PREFERENCE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "WEB_PREF_USER",
                table: "WEB_USER_PREFERENCE",
                column: "USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRT_ACC_MAP",
                table: "WORK_EFFORT",
                column: "ACCOMMODATION_MAP_ID");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRT_ACC_SPOT",
                table: "WORK_EFFORT",
                column: "ACCOMMODATION_SPOT_ID");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRT_CURSTTS",
                table: "WORK_EFFORT",
                column: "CURRENT_STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRT_CUS_MET",
                table: "WORK_EFFORT",
                column: "ESTIMATE_CALC_METHOD");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRT_FACILITY",
                table: "WORK_EFFORT",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRT_FXDASST",
                table: "WORK_EFFORT",
                column: "FIXED_ASSET_ID");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRT_MON_UOM",
                table: "WORK_EFFORT",
                column: "MONEY_UOM_ID");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRT_NOTE",
                table: "WORK_EFFORT",
                column: "NOTE_ID");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRT_PARENT",
                table: "WORK_EFFORT",
                column: "WORK_EFFORT_PARENT_ID");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRT_PRPTYP",
                table: "WORK_EFFORT",
                column: "WORK_EFFORT_PURPOSE_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRT_RECINFO",
                table: "WORK_EFFORT",
                column: "RECURRENCE_INFO_ID");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRT_RNTMDTA",
                table: "WORK_EFFORT",
                column: "RUNTIME_DATA_ID");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRT_SC_ENUM",
                table: "WORK_EFFORT",
                column: "SCOPE_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRT_TEMPEXPR",
                table: "WORK_EFFORT",
                column: "TEMP_EXPR_ID");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRT_TYPE",
                table: "WORK_EFFORT",
                column: "WORK_EFFORT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "WORK_EFFORT_TXCRTS",
                table: "WORK_EFFORT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WORK_EFFORT_TXSTMP",
                table: "WORK_EFFORT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRTASSC_FWE",
                table: "WORK_EFFORT_ASSOC",
                column: "WORK_EFFORT_ID_FROM");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRTASSC_TWE",
                table: "WORK_EFFORT_ASSOC",
                column: "WORK_EFFORT_ID_TO");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRTASSC_TYP",
                table: "WORK_EFFORT_ASSOC",
                column: "WORK_EFFORT_ASSOC_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_EFFT_ASC_TXCRS",
                table: "WORK_EFFORT_ASSOC",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFFT_ASC_TXSTP",
                table: "WORK_EFFORT_ASSOC",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRTASSC_ATTR",
                table: "WORK_EFFORT_ASSOC_ATTRIBUTE",
                columns: new[] { "WORK_EFFORT_ID_FROM", "WORK_EFFORT_ID_TO", "WORK_EFFORT_ASSOC_TYPE_ID", "FROM_DATE" });

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_ASC_ATT_TP",
                table: "WORK_EFFORT_ASSOC_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_ASC_ATT_TS",
                table: "WORK_EFFORT_ASSOC_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRTASSC_TPAR",
                table: "WORK_EFFORT_ASSOC_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_ASC_TP_TXP",
                table: "WORK_EFFORT_ASSOC_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_ASC_TP_TXS",
                table: "WORK_EFFORT_ASSOC_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRTASSC_TATR",
                table: "WORK_EFFORT_ASSOC_TYPE_ATTR",
                column: "WORK_EFFORT_ASSOC_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_ASC_TP_ATR_TP",
                table: "WORK_EFFORT_ASSOC_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_ASC_TP_ATR_TS",
                table: "WORK_EFFORT_ASSOC_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRT_ATTR_WE",
                table: "WORK_EFFORT_ATTRIBUTE",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_ATTT_TXCRS",
                table: "WORK_EFFORT_ATTRIBUTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_ATTT_TXSTP",
                table: "WORK_EFFORT_ATTRIBUTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WK_EFFBLNG_INVITM",
                table: "WORK_EFFORT_BILLING",
                columns: new[] { "INVOICE_ID", "INVOICE_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "WK_EFFBLNG_WEFF",
                table: "WORK_EFFORT_BILLING",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_EFFT_BLG_TXCRS",
                table: "WORK_EFFORT_BILLING",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFFT_BLG_TXSTP",
                table: "WORK_EFFORT_BILLING",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WKEFF_CMECH_CMECH",
                table: "WORK_EFFORT_CONTACT_MECH_NEW",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "WKEFF_CMECH_WKEFF",
                table: "WORK_EFFORT_CONTACT_MECH_NEW",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_CNT_MCH_NW_TP",
                table: "WORK_EFFORT_CONTACT_MECH_NEW",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_CNT_MCH_NW_TS",
                table: "WORK_EFFORT_CONTACT_MECH_NEW",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WKEFF_CNT_CNT",
                table: "WORK_EFFORT_CONTENT",
                column: "CONTENT_ID");

            migrationBuilder.CreateIndex(
                name: "WKEFF_CNT_WCTP",
                table: "WORK_EFFORT_CONTENT",
                column: "WORK_EFFORT_CONTENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "WKEFF_CNT_WKEFF",
                table: "WORK_EFFORT_CONTENT",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_EFFT_CNT_TXCRS",
                table: "WORK_EFFORT_CONTENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFFT_CNT_TXSTP",
                table: "WORK_EFFORT_CONTENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WEFFCTP_TP_PAR",
                table: "WORK_EFFORT_CONTENT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_CNT_TP_TXP",
                table: "WORK_EFFORT_CONTENT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_CNT_TP_TXS",
                table: "WORK_EFFORT_CONTENT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRT_COS_CCC",
                table: "WORK_EFFORT_COST_CALC",
                column: "COST_COMPONENT_CALC_ID");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRT_COS_CCT",
                table: "WORK_EFFORT_COST_CALC",
                column: "COST_COMPONENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRT_COS_WEF",
                table: "WORK_EFFORT_COST_CALC",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_CST_CLC_TP",
                table: "WORK_EFFORT_COST_CALC",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_CST_CLC_TS",
                table: "WORK_EFFORT_COST_CALC",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WKEFF_DELPRD_DEL",
                table: "WORK_EFFORT_DELIVERABLE_PROD",
                column: "DELIVERABLE_ID");

            migrationBuilder.CreateIndex(
                name: "WKEFF_DELPRD_WEFF",
                table: "WORK_EFFORT_DELIVERABLE_PROD",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_DLL_PRD_TP",
                table: "WORK_EFFORT_DELIVERABLE_PROD",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_DLL_PRD_TS",
                table: "WORK_EFFORT_DELIVERABLE_PROD",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WE_EVENT_REMIND_CM",
                table: "WORK_EFFORT_EVENT_REMINDER",
                column: "CONTACT_MECH_ID");

            migrationBuilder.CreateIndex(
                name: "WE_EVENT_REMIND_PY",
                table: "WORK_EFFORT_EVENT_REMINDER",
                column: "PARTY_ID");

            migrationBuilder.CreateIndex(
                name: "WE_EVENT_REMIND_WE",
                table: "WORK_EFFORT_EVENT_REMINDER",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_EVT_RMR_TP",
                table: "WORK_EFFORT_EVENT_REMINDER",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_EVT_RMR_TS",
                table: "WORK_EFFORT_EVENT_REMINDER",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WKEFF_FXDAA_AVAIL",
                table: "WORK_EFFORT_FIXED_ASSET_ASSIGN",
                column: "AVAILABILITY_STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "WKEFF_FXDAA_FXAS",
                table: "WORK_EFFORT_FIXED_ASSET_ASSIGN",
                column: "FIXED_ASSET_ID");

            migrationBuilder.CreateIndex(
                name: "WKEFF_FXDAA_STTS",
                table: "WORK_EFFORT_FIXED_ASSET_ASSIGN",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "WKEFF_FXDAA_WEFF",
                table: "WORK_EFFORT_FIXED_ASSET_ASSIGN",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_FXD_AST_ASN_TP",
                table: "WORK_EFFORT_FIXED_ASSET_ASSIGN",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_FXD_AST_ASN_TS",
                table: "WORK_EFFORT_FIXED_ASSET_ASSIGN",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WKEFF_FASTD_FAT",
                table: "WORK_EFFORT_FIXED_ASSET_STD",
                column: "FIXED_ASSET_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "WKEFF_FASTD_WEFF",
                table: "WORK_EFFORT_FIXED_ASSET_STD",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_FXD_AST_STD_TP",
                table: "WORK_EFFORT_FIXED_ASSET_STD",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_FXD_AST_STD_TS",
                table: "WORK_EFFORT_FIXED_ASSET_STD",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WKEFF_GDSTD_PROD",
                table: "WORK_EFFORT_GOOD_STANDARD",
                column: "PRODUCT_ID");

            migrationBuilder.CreateIndex(
                name: "WKEFF_GDSTD_STTS",
                table: "WORK_EFFORT_GOOD_STANDARD",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "WKEFF_GDSTD_TYPE",
                table: "WORK_EFFORT_GOOD_STANDARD",
                column: "WORK_EFFORT_GOOD_STD_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "WKEFF_GDSTD_WEFF",
                table: "WORK_EFFORT_GOOD_STANDARD",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_GD_STD_TXP",
                table: "WORK_EFFORT_GOOD_STANDARD",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_GD_STD_TXS",
                table: "WORK_EFFORT_GOOD_STANDARD",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WKEFF_GDSTD_TPAR",
                table: "WORK_EFFORT_GOOD_STANDARD_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_GD_STD_TP_TP",
                table: "WORK_EFFORT_GOOD_STANDARD_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_GD_STD_TP_TS",
                table: "WORK_EFFORT_GOOD_STANDARD_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WKEFF_ICAL_DATA",
                table: "WORK_EFFORT_ICAL_DATA",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_ICL_DT_TXP",
                table: "WORK_EFFORT_ICAL_DATA",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_ICL_DT_TXS",
                table: "WORK_EFFORT_ICAL_DATA",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WKEFF_INVAS_INVIT",
                table: "WORK_EFFORT_INVENTORY_ASSIGN",
                column: "INVENTORY_ITEM_ID");

            migrationBuilder.CreateIndex(
                name: "WKEFF_INVAS_STTS",
                table: "WORK_EFFORT_INVENTORY_ASSIGN",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "WKEFF_INVAS_WEFF",
                table: "WORK_EFFORT_INVENTORY_ASSIGN",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_INR_ASN_TP",
                table: "WORK_EFFORT_INVENTORY_ASSIGN",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_INR_ASN_TS",
                table: "WORK_EFFORT_INVENTORY_ASSIGN",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WKEFF_INVPD_INVIT",
                table: "WORK_EFFORT_INVENTORY_PRODUCED",
                column: "INVENTORY_ITEM_ID");

            migrationBuilder.CreateIndex(
                name: "WKEFF_INVPD_WEFF",
                table: "WORK_EFFORT_INVENTORY_PRODUCED",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_INR_PRD_TP",
                table: "WORK_EFFORT_INVENTORY_PRODUCED",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_INR_PRD_TS",
                table: "WORK_EFFORT_INVENTORY_PRODUCED",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WEFF_KWD_KWD",
                table: "WORK_EFFORT_KEYWORD",
                column: "KEYWORD");

            migrationBuilder.CreateIndex(
                name: "WEFF_KWD_WEFF",
                table: "WORK_EFFORT_KEYWORD",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_EFFT_KWD_TXCRS",
                table: "WORK_EFFORT_KEYWORD",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFFT_KWD_TXSTP",
                table: "WORK_EFFORT_KEYWORD",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WKEFF_NTE_NOTE",
                table: "WORK_EFFORT_NOTE",
                column: "NOTE_ID");

            migrationBuilder.CreateIndex(
                name: "WKEFF_NTE_WEFF",
                table: "WORK_EFFORT_NOTE",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_EFFT_NT_TXCRTS",
                table: "WORK_EFFORT_NOTE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFFT_NT_TXSTMP",
                table: "WORK_EFFORT_NOTE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WKEFF_PA_ABUSRLOG",
                table: "WORK_EFFORT_PARTY_ASSIGNMENT",
                column: "ASSIGNED_BY_USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "WKEFF_PA_AVSTTS",
                table: "WORK_EFFORT_PARTY_ASSIGNMENT",
                column: "AVAILABILITY_STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "WKEFF_PA_DELR_ENM",
                table: "WORK_EFFORT_PARTY_ASSIGNMENT",
                column: "DELEGATE_REASON_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "WKEFF_PA_EXP_ENUM",
                table: "WORK_EFFORT_PARTY_ASSIGNMENT",
                column: "EXPECTATION_ENUM_ID");

            migrationBuilder.CreateIndex(
                name: "WKEFF_PA_FACILITY",
                table: "WORK_EFFORT_PARTY_ASSIGNMENT",
                column: "FACILITY_ID");

            migrationBuilder.CreateIndex(
                name: "WKEFF_PA_PRTY_ROLE",
                table: "WORK_EFFORT_PARTY_ASSIGNMENT",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.CreateIndex(
                name: "WKEFF_PA_STTS",
                table: "WORK_EFFORT_PARTY_ASSIGNMENT",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "WKEFF_PA_WE",
                table: "WORK_EFFORT_PARTY_ASSIGNMENT",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_PRT_AST_TP",
                table: "WORK_EFFORT_PARTY_ASSIGNMENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_PRT_AST_TS",
                table: "WORK_EFFORT_PARTY_ASSIGNMENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRT_PTYPE_PAR",
                table: "WORK_EFFORT_PURPOSE_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_PRS_TP_TXP",
                table: "WORK_EFFORT_PURPOSE_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_PRS_TP_TXS",
                table: "WORK_EFFORT_PURPOSE_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WEFF_REVIEW_STTS",
                table: "WORK_EFFORT_REVIEW",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "WEFF_REVIEW_UL",
                table: "WORK_EFFORT_REVIEW",
                column: "USER_LOGIN_ID");

            migrationBuilder.CreateIndex(
                name: "WEFF_REVIEW_WEFF",
                table: "WORK_EFFORT_REVIEW",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_EFFT_RVW_TXCRS",
                table: "WORK_EFFORT_REVIEW",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFFT_RVW_TXSTP",
                table: "WORK_EFFORT_REVIEW",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WEFF_SCHRSI_RES",
                table: "WORK_EFFORT_SEARCH_CONSTRAINT",
                column: "WORK_EFFORT_SEARCH_RESULT_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_SRH_CNT_TP",
                table: "WORK_EFFORT_SEARCH_CONSTRAINT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_SRH_CNT_TS",
                table: "WORK_EFFORT_SEARCH_CONSTRAINT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_SRH_RST_TP",
                table: "WORK_EFFORT_SEARCH_RESULT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_SRH_RST_TS",
                table: "WORK_EFFORT_SEARCH_RESULT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WKEFF_SKLSTD_SKTP",
                table: "WORK_EFFORT_SKILL_STANDARD",
                column: "SKILL_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "WKEFF_SKLSTD_WEFF",
                table: "WORK_EFFORT_SKILL_STANDARD",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_SKL_STD_TP",
                table: "WORK_EFFORT_SKILL_STANDARD",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_SKL_STD_TS",
                table: "WORK_EFFORT_SKILL_STANDARD",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WKEFF_STTS_SB_UL",
                table: "WORK_EFFORT_STATUS",
                column: "SET_BY_USER_LOGIN");

            migrationBuilder.CreateIndex(
                name: "WKEFF_STTS_STTS",
                table: "WORK_EFFORT_STATUS",
                column: "STATUS_ID");

            migrationBuilder.CreateIndex(
                name: "WKEFF_STTS_WE",
                table: "WORK_EFFORT_STATUS",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_EFFT_STS_TXCRS",
                table: "WORK_EFFORT_STATUS",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFFT_STS_TXSTP",
                table: "WORK_EFFORT_STATUS",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WKEF_SURVAPL_PSSA",
                table: "WORK_EFFORT_SURVEY_APPL",
                column: "SURVEY_ID");

            migrationBuilder.CreateIndex(
                name: "WKEF_SURVAPL_SVY",
                table: "WORK_EFFORT_SURVEY_APPL",
                column: "SURVEY_ID");

            migrationBuilder.CreateIndex(
                name: "WKEF_SURVAPL_WKE",
                table: "WORK_EFFORT_SURVEY_APPL",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_SRV_APL_TP",
                table: "WORK_EFFORT_SURVEY_APPL",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_SRV_APL_TS",
                table: "WORK_EFFORT_SURVEY_APPL",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WKEFF_TXBX_WE",
                table: "WORK_EFFORT_TRANS_BOX",
                column: "PROCESS_WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_TRS_BX_TXP",
                table: "WORK_EFFORT_TRANS_BOX",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_TRS_BX_TXS",
                table: "WORK_EFFORT_TRANS_BOX",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRT_TYPE_PAR",
                table: "WORK_EFFORT_TYPE",
                column: "PARENT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_EFFT_TP_TXCRTS",
                table: "WORK_EFFORT_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFFT_TP_TXSTMP",
                table: "WORK_EFFORT_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WK_EFFRT_TYPE_ATR",
                table: "WORK_EFFORT_TYPE_ATTR",
                column: "WORK_EFFORT_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_TP_ATR_TXP",
                table: "WORK_EFFORT_TYPE_ATTR",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_EFT_TP_ATR_TXS",
                table: "WORK_EFFORT_TYPE_ATTR",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WORDER_ITFMT_OHDR",
                table: "WORK_ORDER_ITEM_FULFILLMENT",
                column: "ORDER_ID");

            migrationBuilder.CreateIndex(
                name: "WORDER_ITFMT_OITM",
                table: "WORK_ORDER_ITEM_FULFILLMENT",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.CreateIndex(
                name: "WORDER_ITFMT_WEFRT",
                table: "WORK_ORDER_ITEM_FULFILLMENT",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_ORR_ITM_FLT_TP",
                table: "WORK_ORDER_ITEM_FULFILLMENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_ORR_ITM_FLT_TS",
                table: "WORK_ORDER_ITEM_FULFILLMENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_RQ_FLF_TP_TXCS",
                table: "WORK_REQ_FULF_TYPE",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_RQ_FLF_TP_TXSP",
                table: "WORK_REQ_FULF_TYPE",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WORK_REQFL_REQ",
                table: "WORK_REQUIREMENT_FULFILLMENT",
                column: "REQUIREMENT_ID");

            migrationBuilder.CreateIndex(
                name: "WORK_REQFL_WEFF",
                table: "WORK_REQUIREMENT_FULFILLMENT",
                column: "WORK_EFFORT_ID");

            migrationBuilder.CreateIndex(
                name: "WORK_REQFL_WRFT",
                table: "WORK_REQUIREMENT_FULFILLMENT",
                column: "WORK_REQ_FULF_TYPE_ID");

            migrationBuilder.CreateIndex(
                name: "WRK_RQT_FLFLT_TXCS",
                table: "WORK_REQUIREMENT_FULFILLMENT",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "WRK_RQT_FLFLT_TXSP",
                table: "WORK_REQUIREMENT_FULFILLMENT",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "X59_ISR_PRVN_TXCRS",
                table: "X509_ISSUER_PROVISION",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "X59_ISR_PRVN_TXSTP",
                table: "X509_ISSUER_PROVISION",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ZP_SLS_RL_LKP_TXCS",
                table: "ZIP_SALES_RULE_LOOKUP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ZP_SLS_RL_LKP_TXSP",
                table: "ZIP_SALES_RULE_LOOKUP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ZP_SLS_TX_LKP_TXCS",
                table: "ZIP_SALES_TAX_LOOKUP",
                column: "CREATED_TX_STAMP");

            migrationBuilder.CreateIndex(
                name: "ZP_SLS_TX_LKP_TXSP",
                table: "ZIP_SALES_TAX_LOOKUP",
                column: "LAST_UPDATED_TX_STAMP");

            migrationBuilder.AddForeignKey(
                name: "ACMD_MAP_FA",
                table: "ACCOMMODATION_MAP",
                column: "FIXED_ASSET_ID",
                principalTable: "FIXED_ASSET",
                principalColumn: "FIXED_ASSET_ID");

            migrationBuilder.AddForeignKey(
                name: "SPOT_FA",
                table: "ACCOMMODATION_SPOT",
                column: "FIXED_ASSET_ID",
                principalTable: "FIXED_ASSET",
                principalColumn: "FIXED_ASSET_ID");

            migrationBuilder.AddForeignKey(
                name: "ACCTTX_FASSET",
                table: "ACCTG_TRANS",
                column: "FIXED_ASSET_ID",
                principalTable: "FIXED_ASSET",
                principalColumn: "FIXED_ASSET_ID");

            migrationBuilder.AddForeignKey(
                name: "ACCTTX_FNACTTR",
                table: "ACCTG_TRANS",
                column: "FIN_ACCOUNT_TRANS_ID",
                principalTable: "FIN_ACCOUNT_TRANS",
                principalColumn: "FIN_ACCOUNT_TRANS_ID");

            migrationBuilder.AddForeignKey(
                name: "ACCTTX_GLJRNL",
                table: "ACCTG_TRANS",
                column: "GL_JOURNAL_ID",
                principalTable: "GL_JOURNAL",
                principalColumn: "GL_JOURNAL_ID");

            migrationBuilder.AddForeignKey(
                name: "ACCTTX_INVITEM",
                table: "ACCTG_TRANS",
                column: "INVENTORY_ITEM_ID",
                principalTable: "INVENTORY_ITEM",
                principalColumn: "INVENTORY_ITEM_ID");

            migrationBuilder.AddForeignKey(
                name: "ACCTTX_INVITEMVAR",
                table: "ACCTG_TRANS",
                columns: new[] { "INVENTORY_ITEM_ID", "PHYSICAL_INVENTORY_ID" },
                principalTable: "INVENTORY_ITEM_VARIANCE",
                principalColumns: new[] { "INVENTORY_ITEM_ID", "PHYSICAL_INVENTORY_ID" });

            migrationBuilder.AddForeignKey(
                name: "ACCTTX_INVOICE",
                table: "ACCTG_TRANS",
                column: "INVOICE_ID",
                principalTable: "INVOICE",
                principalColumn: "INVOICE_ID");

            migrationBuilder.AddForeignKey(
                name: "ACCTTX_PARTY",
                table: "ACCTG_TRANS",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "ACCTTX_PAYMENT",
                table: "ACCTG_TRANS",
                column: "PAYMENT_ID",
                principalTable: "PAYMENT",
                principalColumn: "PAYMENT_ID");

            migrationBuilder.AddForeignKey(
                name: "ACCTTX_SHIPMENT",
                table: "ACCTG_TRANS",
                column: "SHIPMENT_ID",
                principalTable: "SHIPMENT",
                principalColumn: "SHIPMENT_ID");

            migrationBuilder.AddForeignKey(
                name: "ACCTTX_SHIPRCPT",
                table: "ACCTG_TRANS",
                column: "RECEIPT_ID",
                principalTable: "SHIPMENT_RECEIPT",
                principalColumn: "RECEIPT_ID");

            migrationBuilder.AddForeignKey(
                name: "ACCTTX_WEFF",
                table: "ACCTG_TRANS",
                column: "WORK_EFFORT_ID",
                principalTable: "WORK_EFFORT",
                principalColumn: "WORK_EFFORT_ID");

            migrationBuilder.AddForeignKey(
                name: "ACCTTXENT_GLACOG",
                table: "ACCTG_TRANS_ENTRY",
                columns: new[] { "GL_ACCOUNT_ID", "ORGANIZATION_PARTY_ID" },
                principalTable: "GL_ACCOUNT_ORGANIZATION",
                principalColumns: new[] { "GL_ACCOUNT_ID", "ORGANIZATION_PARTY_ID" });

            migrationBuilder.AddForeignKey(
                name: "ACCTTXENT_INVITEM",
                table: "ACCTG_TRANS_ENTRY",
                column: "INVENTORY_ITEM_ID",
                principalTable: "INVENTORY_ITEM",
                principalColumn: "INVENTORY_ITEM_ID");

            migrationBuilder.AddForeignKey(
                name: "ACCTTXENT_PARTY",
                table: "ACCTG_TRANS_ENTRY",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "ADDNDM_AGRMNT",
                table: "ADDENDUM",
                column: "AGREEMENT_ID",
                principalTable: "AGREEMENT",
                principalColumn: "AGREEMENT_ID");

            migrationBuilder.AddForeignKey(
                name: "ADDNDM_AGRMNT_ITM",
                table: "ADDENDUM",
                columns: new[] { "AGREEMENT_ID", "AGREEMENT_ITEM_SEQ_ID" },
                principalTable: "AGREEMENT_ITEM",
                principalColumns: new[] { "AGREEMENT_ID", "AGREEMENT_ITEM_SEQ_ID" });

            migrationBuilder.AddForeignKey(
                name: "AFFILIATE_PARTY",
                table: "AFFILIATE",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "AFFILIATE_PGRP",
                table: "AFFILIATE",
                column: "PARTY_ID",
                principalTable: "PARTY_GROUP",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "AGRMNT_FPRTYRLE",
                table: "AGREEMENT",
                columns: new[] { "PARTY_ID_FROM", "ROLE_TYPE_ID_FROM" },
                principalTable: "PARTY_ROLE",
                principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.AddForeignKey(
                name: "AGRMNT_TPRTYRLE",
                table: "AGREEMENT",
                columns: new[] { "PARTY_ID_TO", "ROLE_TYPE_ID_TO" },
                principalTable: "PARTY_ROLE",
                principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.AddForeignKey(
                name: "AGRMNT_PRODUCT",
                table: "AGREEMENT",
                column: "PRODUCT_ID",
                principalTable: "PRODUCT",
                principalColumn: "PRODUCT_ID");

            migrationBuilder.AddForeignKey(
                name: "AG_CNT_CNT",
                table: "AGREEMENT_CONTENT",
                column: "CONTENT_ID",
                principalTable: "CONTENT",
                principalColumn: "CONTENT_ID");

            migrationBuilder.AddForeignKey(
                name: "AGRMNT_EMPL_APPL",
                table: "AGREEMENT_EMPLOYMENT_APPL",
                columns: new[] { "ROLE_TYPE_ID_FROM", "ROLE_TYPE_ID_TO", "PARTY_ID_FROM", "PARTY_ID_TO", "FROM_DATE" },
                principalTable: "EMPLOYMENT",
                principalColumns: new[] { "ROLE_TYPE_ID_FROM", "ROLE_TYPE_ID_TO", "PARTY_ID_FROM", "PARTY_ID_TO", "FROM_DATE" });

            migrationBuilder.AddForeignKey(
                name: "AGRMNT_FACLT_PRD",
                table: "AGREEMENT_FACILITY_APPL",
                column: "FACILITY_ID",
                principalTable: "FACILITY",
                principalColumn: "FACILITY_ID");

            migrationBuilder.AddForeignKey(
                name: "AGRMNT_PTYA_PTY",
                table: "AGREEMENT_PARTY_APPLIC",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "AGRMNT_PRDA_PRD",
                table: "AGREEMENT_PRODUCT_APPL",
                column: "PRODUCT_ID",
                principalTable: "PRODUCT",
                principalColumn: "PRODUCT_ID");

            migrationBuilder.AddForeignKey(
                name: "AGRMNT_PROM_PRO",
                table: "AGREEMENT_PROMO_APPL",
                column: "PRODUCT_PROMO_ID",
                principalTable: "PRODUCT_PROMO",
                principalColumn: "PRODUCT_PROMO_ID");

            migrationBuilder.AddForeignKey(
                name: "AGRMNT_ROLE_PRLE",
                table: "AGREEMENT_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" },
                principalTable: "PARTY_ROLE",
                principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.AddForeignKey(
                name: "AGRMNT_ROLE_PTY",
                table: "AGREEMENT_ROLE",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "AGRMNT_STTS_USRLGN",
                table: "AGREEMENT_STATUS",
                column: "CHANGE_BY_USER_LOGIN_ID",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "AGRMNT_WEA_WE",
                table: "AGREEMENT_WORK_EFFORT_APPLIC",
                column: "WORK_EFFORT_ID",
                principalTable: "WORK_EFFORT",
                principalColumn: "WORK_EFFORT_ID");

            migrationBuilder.AddForeignKey(
                name: "ALC_PLN_HDR_CBUL",
                table: "ALLOCATION_PLAN_HEADER",
                column: "CREATED_BY_USER_LOGIN",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "ALC_PLN_HDR_LMUL",
                table: "ALLOCATION_PLAN_HEADER",
                column: "LAST_MODIFIED_BY_USER_LOGIN",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "ALC_PLN_ITM_CBUL",
                table: "ALLOCATION_PLAN_ITEM",
                column: "CREATED_BY_USER_LOGIN",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "ALC_PLN_ITM_LMUL",
                table: "ALLOCATION_PLAN_ITEM",
                column: "LAST_MODIFIED_BY_USER_LOGIN",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "ALC_PLN_ITM_ODRHDR",
                table: "ALLOCATION_PLAN_ITEM",
                column: "ORDER_ID",
                principalTable: "ORDER_HEADER",
                principalColumn: "ORDER_ID");

            migrationBuilder.AddForeignKey(
                name: "ALC_PLN_ITM_ODRITM",
                table: "ALLOCATION_PLAN_ITEM",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" },
                principalTable: "ORDER_ITEM",
                principalColumns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.AddForeignKey(
                name: "APP_SNDBX_WEPA",
                table: "APPLICATION_SANDBOX",
                columns: new[] { "WORK_EFFORT_ID", "PARTY_ID", "ROLE_TYPE_ID", "FROM_DATE" },
                principalTable: "WORK_EFFORT_PARTY_ASSIGNMENT",
                principalColumns: new[] { "WORK_EFFORT_ID", "PARTY_ID", "ROLE_TYPE_ID", "FROM_DATE" });

            migrationBuilder.AddForeignKey(
                name: "DATA_REC_AUDIO",
                table: "AUDIO_DATA_RESOURCE",
                column: "DATA_RESOURCE_ID",
                principalTable: "DATA_RESOURCE",
                principalColumn: "DATA_RESOURCE_ID");

            migrationBuilder.AddForeignKey(
                name: "BILLACCT_RL_PARTY",
                table: "BILLING_ACCOUNT_ROLE",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "BILLACCT_RL_PTRL",
                table: "BILLING_ACCOUNT_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" },
                principalTable: "PARTY_ROLE",
                principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.AddForeignKey(
                name: "BUDGET_CTP",
                table: "BUDGET",
                column: "CUSTOM_TIME_PERIOD_ID",
                principalTable: "CUSTOM_TIME_PERIOD",
                principalColumn: "CUSTOM_TIME_PERIOD_ID");

            migrationBuilder.AddForeignKey(
                name: "BUDGET_RVW_PARTY",
                table: "BUDGET_REVIEW",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "BUDGET_ROLE_PARTY",
                table: "BUDGET_ROLE",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "BUDGET_ROLE_PROLE",
                table: "BUDGET_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" },
                principalTable: "PARTY_ROLE",
                principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.AddForeignKey(
                name: "BUDGET_STTS_USRLGN",
                table: "BUDGET_STATUS",
                column: "CHANGE_BY_USER_LOGIN_ID",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "CARR_SHBX_PARTY",
                table: "CARRIER_SHIPMENT_BOX_TYPE",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "CARR_SHMETH_PARTY",
                table: "CARRIER_SHIPMENT_METHOD",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "CARR_SHMETH_PROLE",
                table: "CARRIER_SHIPMENT_METHOD",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" },
                principalTable: "PARTY_ROLE",
                principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.AddForeignKey(
                name: "CART_ABLN_PRD",
                table: "CART_ABANDONED_LINE",
                column: "PRODUCT_ID",
                principalTable: "PRODUCT",
                principalColumn: "PRODUCT_ID");

            migrationBuilder.AddForeignKey(
                name: "CACCT_PMETH",
                table: "CHECK_ACCOUNT",
                column: "PAYMENT_METHOD_ID",
                principalTable: "PAYMENT_METHOD",
                principalColumn: "PAYMENT_METHOD_ID");

            migrationBuilder.AddForeignKey(
                name: "COMMEV_CA_COMMEV",
                table: "COMM_EVENT_CONTENT_ASSOC",
                column: "COMMUNICATION_EVENT_ID",
                principalTable: "COMMUNICATION_EVENT",
                principalColumn: "COMMUNICATION_EVENT_ID");

            migrationBuilder.AddForeignKey(
                name: "COMMEV_CA_FROM",
                table: "COMM_EVENT_CONTENT_ASSOC",
                column: "CONTENT_ID",
                principalTable: "CONTENT",
                principalColumn: "CONTENT_ID");

            migrationBuilder.AddForeignKey(
                name: "COM_EVNT_CLST",
                table: "COMMUNICATION_EVENT",
                column: "CONTACT_LIST_ID",
                principalTable: "CONTACT_LIST",
                principalColumn: "CONTACT_LIST_ID");

            migrationBuilder.AddForeignKey(
                name: "COM_EVNT_FPTY",
                table: "COMMUNICATION_EVENT",
                column: "PARTY_ID_FROM",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "COM_EVNT_TPTY",
                table: "COMMUNICATION_EVENT",
                column: "PARTY_ID_TO",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "COMEV_ORDER_ORDER",
                table: "COMMUNICATION_EVENT_ORDER",
                column: "ORDER_ID",
                principalTable: "ORDER_HEADER",
                principalColumn: "ORDER_ID");

            migrationBuilder.AddForeignKey(
                name: "COMEV_PROD_PROD",
                table: "COMMUNICATION_EVENT_PRODUCT",
                column: "PRODUCT_ID",
                principalTable: "PRODUCT",
                principalColumn: "PRODUCT_ID");

            migrationBuilder.AddForeignKey(
                name: "COMEV_ORDER_RETURN",
                table: "COMMUNICATION_EVENT_RETURN",
                column: "RETURN_ID",
                principalTable: "RETURN_HEADER",
                principalColumn: "RETURN_ID");

            migrationBuilder.AddForeignKey(
                name: "COM_EVRL_PRLE",
                table: "COMMUNICATION_EVENT_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" },
                principalTable: "PARTY_ROLE",
                principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.AddForeignKey(
                name: "COM_EVRL_PTY",
                table: "COMMUNICATION_EVENT_ROLE",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "COMEV_WEFF_WEFF",
                table: "COMMUNICATION_EVENT_WORK_EFF",
                column: "WORK_EFFORT_ID",
                principalTable: "WORK_EFFORT",
                principalColumn: "WORK_EFFORT_ID");

            migrationBuilder.AddForeignKey(
                name: "PROD_OPTN_PROD",
                table: "CONFIG_OPTION_PRODUCT_OPTION",
                columns: new[] { "CONFIG_ITEM_ID", "CONFIG_OPTION_ID", "PRODUCT_ID" },
                principalTable: "PRODUCT_CONFIG_PRODUCT",
                principalColumns: new[] { "CONFIG_ITEM_ID", "CONFIG_OPTION_ID", "PRODUCT_ID" });

            migrationBuilder.AddForeignKey(
                name: "CNCT_LST_CBUL",
                table: "CONTACT_LIST",
                column: "CREATED_BY_USER_LOGIN",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "CNCT_LST_LMUL",
                table: "CONTACT_LIST",
                column: "LAST_MODIFIED_BY_USER_LOGIN",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "CNCT_LST_OPTY",
                table: "CONTACT_LIST",
                column: "OWNER_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "CNCT_LST_CST_PT",
                table: "CONTACT_LIST_COMM_STATUS",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "CNCT_LST_CST_ST_UL",
                table: "CONTACT_LIST_COMM_STATUS",
                column: "CHANGE_BY_USER_LOGIN_ID",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "CNCT_LSTPTY_PTY",
                table: "CONTACT_LIST_PARTY",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "CONTAINER_FACILITY",
                table: "CONTAINER",
                column: "FACILITY_ID",
                principalTable: "FACILITY",
                principalColumn: "FACILITY_ID");

            migrationBuilder.AddForeignKey(
                name: "CONTENT_CB_ULGN",
                table: "CONTENT",
                column: "CREATED_BY_USER_LOGIN",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "CONTENT_LMB_ULGN",
                table: "CONTENT",
                column: "LAST_MODIFIED_BY_USER_LOGIN",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "CONTENT_TO_DATA",
                table: "CONTENT",
                column: "DATA_RESOURCE_ID",
                principalTable: "DATA_RESOURCE",
                principalColumn: "DATA_RESOURCE_ID");

            migrationBuilder.AddForeignKey(
                name: "CONTENT_TO_TMPDATA",
                table: "CONTENT",
                column: "TEMPLATE_DATA_RESOURCE_ID",
                principalTable: "DATA_RESOURCE",
                principalColumn: "DATA_RESOURCE_ID");

            migrationBuilder.AddForeignKey(
                name: "CNTNTAPPR_PTY",
                table: "CONTENT_APPROVAL",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "CONTENTASSC_CBUSR",
                table: "CONTENT_ASSOC",
                column: "CREATED_BY_USER_LOGIN",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "CONTENTASSC_LMBUR",
                table: "CONTENT_ASSOC",
                column: "LAST_MODIFIED_BY_USER_LOGIN",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "CNTNTREV_CBPTY",
                table: "CONTENT_REVISION",
                column: "COMMITTED_BY_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "CNTNTREVIT_NEWDR",
                table: "CONTENT_REVISION_ITEM",
                column: "NEW_DATA_RESOURCE_ID",
                principalTable: "DATA_RESOURCE",
                principalColumn: "DATA_RESOURCE_ID");

            migrationBuilder.AddForeignKey(
                name: "CNTNTREVIT_OLDDR",
                table: "CONTENT_REVISION_ITEM",
                column: "OLD_DATA_RESOURCE_ID",
                principalTable: "DATA_RESOURCE",
                principalColumn: "DATA_RESOURCE_ID");

            migrationBuilder.AddForeignKey(
                name: "CNTNT_RL_PTRL",
                table: "CONTENT_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" },
                principalTable: "PARTY_ROLE",
                principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.AddForeignKey(
                name: "COST_COMP_FXADSST",
                table: "COST_COMPONENT",
                column: "FIXED_ASSET_ID",
                principalTable: "FIXED_ASSET",
                principalColumn: "FIXED_ASSET_ID");

            migrationBuilder.AddForeignKey(
                name: "COST_COMP_PARTY",
                table: "COST_COMPONENT",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "COST_COMP_PRODUCT",
                table: "COST_COMPONENT",
                column: "PRODUCT_ID",
                principalTable: "PRODUCT",
                principalColumn: "PRODUCT_ID");

            migrationBuilder.AddForeignKey(
                name: "COST_COMP_WEFF",
                table: "COST_COMPONENT",
                column: "WORK_EFFORT_ID",
                principalTable: "WORK_EFFORT",
                principalColumn: "WORK_EFFORT_ID");

            migrationBuilder.AddForeignKey(
                name: "CREDCARD_PMNTMETH",
                table: "CREDIT_CARD",
                column: "PAYMENT_METHOD_ID",
                principalTable: "PAYMENT_METHOD",
                principalColumn: "PAYMENT_METHOD_ID");

            migrationBuilder.AddForeignKey(
                name: "CUST_REQ_CAT",
                table: "CUST_REQUEST",
                column: "CUST_REQUEST_CATEGORY_ID",
                principalTable: "CUST_REQUEST_CATEGORY",
                principalColumn: "CUST_REQUEST_CATEGORY_ID");

            migrationBuilder.AddForeignKey(
                name: "CUST_REQ_FRMPTY",
                table: "CUST_REQUEST",
                column: "FROM_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "CUST_REQ_PRDS",
                table: "CUST_REQUEST",
                column: "PRODUCT_STORE_ID",
                principalTable: "PRODUCT_STORE",
                principalColumn: "PRODUCT_STORE_ID");

            migrationBuilder.AddForeignKey(
                name: "CUST_REQ_TYPE",
                table: "CUST_REQUEST",
                column: "CUST_REQUEST_TYPE_ID",
                principalTable: "CUST_REQUEST_TYPE",
                principalColumn: "CUST_REQUEST_TYPE_ID");

            migrationBuilder.AddForeignKey(
                name: "CUST_RQCT_TYPE",
                table: "CUST_REQUEST_CATEGORY",
                column: "CUST_REQUEST_TYPE_ID",
                principalTable: "CUST_REQUEST_TYPE",
                principalColumn: "CUST_REQUEST_TYPE_ID");

            migrationBuilder.AddForeignKey(
                name: "CUST_REQITM_PRD",
                table: "CUST_REQUEST_ITEM",
                column: "PRODUCT_ID",
                principalTable: "PRODUCT",
                principalColumn: "PRODUCT_ID");

            migrationBuilder.AddForeignKey(
                name: "CUST_REQITM_RES",
                table: "CUST_REQUEST_ITEM",
                column: "CUST_REQUEST_RESOLUTION_ID",
                principalTable: "CUST_REQUEST_RESOLUTION",
                principalColumn: "CUST_REQUEST_RESOLUTION_ID");

            migrationBuilder.AddForeignKey(
                name: "CUST_REQ_NOTE",
                table: "CUST_REQUEST_ITEM_NOTE",
                column: "NOTE_ID",
                principalTable: "NOTE_DATA",
                principalColumn: "NOTE_ID");

            migrationBuilder.AddForeignKey(
                name: "CUST_REQ_WEFF",
                table: "CUST_REQUEST_ITEM_WORK_EFFORT",
                column: "WORK_EFFORT_ID",
                principalTable: "WORK_EFFORT",
                principalColumn: "WORK_EFFORT_ID");

            migrationBuilder.AddForeignKey(
                name: "CRQ_NOTE",
                table: "CUST_REQUEST_NOTE",
                column: "NOTE_ID",
                principalTable: "NOTE_DATA",
                principalColumn: "NOTE_ID");

            migrationBuilder.AddForeignKey(
                name: "CREQ_RL_PARTY",
                table: "CUST_REQUEST_PARTY",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "CREQ_RL_PROLE",
                table: "CUST_REQUEST_PARTY",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" },
                principalTable: "PARTY_ROLE",
                principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.AddForeignKey(
                name: "CUST_RQRS_TYPE",
                table: "CUST_REQUEST_RESOLUTION",
                column: "CUST_REQUEST_TYPE_ID",
                principalTable: "CUST_REQUEST_TYPE",
                principalColumn: "CUST_REQUEST_TYPE_ID");

            migrationBuilder.AddForeignKey(
                name: "CUST_RQSTTS_USRLGN",
                table: "CUST_REQUEST_STATUS",
                column: "CHANGE_BY_USER_LOGIN_ID",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "CUST_PTY_PARTY",
                table: "CUST_REQUEST_TYPE",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "CSTREQ_WF_WEFF",
                table: "CUST_REQUEST_WORK_EFFORT",
                column: "WORK_EFFORT_ID",
                principalTable: "WORK_EFFORT",
                principalColumn: "WORK_EFFORT_ID");

            migrationBuilder.AddForeignKey(
                name: "ORG_PRD_PARTY",
                table: "CUSTOM_TIME_PERIOD",
                column: "ORGANIZATION_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "DATA_REC_CB_ULGN",
                table: "DATA_RESOURCE",
                column: "CREATED_BY_USER_LOGIN",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "DATA_REC_LMB_ULGN",
                table: "DATA_RESOURCE",
                column: "LAST_MODIFIED_BY_USER_LOGIN",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "DATARECRL_PTRL",
                table: "DATA_RESOURCE_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" },
                principalTable: "PARTY_ROLE",
                principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.AddForeignKey(
                name: "DEDCTN_PMNT",
                table: "DEDUCTION",
                column: "PAYMENT_ID",
                principalTable: "PAYMENT",
                principalColumn: "PAYMENT_ID");

            migrationBuilder.AddForeignKey(
                name: "DELIV_DFAC",
                table: "DELIVERY",
                column: "DEST_FACILITY_ID",
                principalTable: "FACILITY",
                principalColumn: "FACILITY_ID");

            migrationBuilder.AddForeignKey(
                name: "DELIV_OFAC",
                table: "DELIVERY",
                column: "ORIGIN_FACILITY_ID",
                principalTable: "FACILITY",
                principalColumn: "FACILITY_ID");

            migrationBuilder.AddForeignKey(
                name: "DELIV_FXAS",
                table: "DELIVERY",
                column: "FIXED_ASSET_ID",
                principalTable: "FIXED_ASSET",
                principalColumn: "FIXED_ASSET_ID");

            migrationBuilder.AddForeignKey(
                name: "DES_FEAT_REQ",
                table: "DESIRED_FEATURE",
                column: "REQUIREMENT_ID",
                principalTable: "REQUIREMENT",
                principalColumn: "REQUIREMENT_ID");

            migrationBuilder.AddForeignKey(
                name: "EFTACCT_PMETH",
                table: "EFT_ACCOUNT",
                column: "PAYMENT_METHOD_ID",
                principalTable: "PAYMENT_METHOD",
                principalColumn: "PAYMENT_METHOD_ID");

            migrationBuilder.AddForeignKey(
                name: "EMPL_LEAVE_APPR",
                table: "EMPL_LEAVE",
                column: "APPROVER_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "EMPL_LEAVE_PRTY",
                table: "EMPL_LEAVE",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "EMPL_POS_PRTY",
                table: "EMPL_POSITION",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "EMPL_PSFLMT_PRTY",
                table: "EMPL_POSITION_FULFILLMENT",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "EMPLMNT_FPTRL",
                table: "EMPLOYMENT",
                columns: new[] { "PARTY_ID_FROM", "ROLE_TYPE_ID_FROM" },
                principalTable: "PARTY_ROLE",
                principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.AddForeignKey(
                name: "EMPLMNT_TPTRL",
                table: "EMPLOYMENT",
                columns: new[] { "PARTY_ID_TO", "ROLE_TYPE_ID_TO" },
                principalTable: "PARTY_ROLE",
                principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.AddForeignKey(
                name: "EMPLMNT_FPTY",
                table: "EMPLOYMENT",
                column: "PARTY_ID_FROM",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "EMPLMNT_TPTY",
                table: "EMPLOYMENT",
                column: "PARTY_ID_TO",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "EMPLMNT_APP_APER",
                table: "EMPLOYMENT_APP",
                column: "APPROVER_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "FACILITY_OWNER",
                table: "FACILITY",
                column: "OWNER_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "FACILITY_CSH_PTY",
                table: "FACILITY_CARRIER_SHIPMENT",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "FGROUP_RLE_PTRLE",
                table: "FACILITY_GROUP_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" },
                principalTable: "PARTY_ROLE",
                principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.AddForeignKey(
                name: "FACILITY_PRTY_ROLE",
                table: "FACILITY_PARTY",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" },
                principalTable: "PARTY_ROLE",
                principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.AddForeignKey(
                name: "FACILITY_RLE_PRT",
                table: "FACILITY_PARTY",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "FINACCT_ORGPTY",
                table: "FIN_ACCOUNT",
                column: "ORGANIZATION_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "FINACCT_OWNPTY",
                table: "FIN_ACCOUNT",
                column: "OWNER_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "FINACCT_PAYMETH",
                table: "FIN_ACCOUNT",
                column: "REPLENISH_PAYMENT_ID",
                principalTable: "PAYMENT_METHOD",
                principalColumn: "PAYMENT_METHOD_ID");

            migrationBuilder.AddForeignKey(
                name: "FIN_ACT_RL_RTRL",
                table: "FIN_ACCOUNT_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" },
                principalTable: "PARTY_ROLE",
                principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.AddForeignKey(
                name: "FINACT_STTS_USER",
                table: "FIN_ACCOUNT_STATUS",
                column: "CHANGE_BY_USER_LOGIN_ID",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "FIN_ACT_TX_GLREC",
                table: "FIN_ACCOUNT_TRANS",
                column: "GL_RECONCILIATION_ID",
                principalTable: "GL_RECONCILIATION",
                principalColumn: "GL_RECONCILIATION_ID");

            migrationBuilder.AddForeignKey(
                name: "FIN_ACT_TX_ODITM",
                table: "FIN_ACCOUNT_TRANS",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" },
                principalTable: "ORDER_ITEM",
                principalColumns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.AddForeignKey(
                name: "FIN_ACT_TX_PARTY",
                table: "FIN_ACCOUNT_TRANS",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "FIN_ACT_TX_PBPTY",
                table: "FIN_ACCOUNT_TRANS",
                column: "PERFORMED_BY_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "FIN_ACT_TX_PMT",
                table: "FIN_ACCOUNT_TRANS",
                column: "PAYMENT_ID",
                principalTable: "PAYMENT",
                principalColumn: "PAYMENT_ID");

            migrationBuilder.AddForeignKey(
                name: "FINACCT_TGA_OPTY",
                table: "FIN_ACCOUNT_TYPE_GL_ACCOUNT",
                column: "ORGANIZATION_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "FIXEDAST_IOPROD",
                table: "FIXED_ASSET",
                column: "INSTANCE_OF_PRODUCT_ID",
                principalTable: "PRODUCT",
                principalColumn: "PRODUCT_ID");

            migrationBuilder.AddForeignKey(
                name: "FIXEDAST_ORDHDR",
                table: "FIXED_ASSET",
                column: "ACQUIRE_ORDER_ID",
                principalTable: "ORDER_HEADER",
                principalColumn: "ORDER_ID");

            migrationBuilder.AddForeignKey(
                name: "FIXEDAST_ORDITM",
                table: "FIXED_ASSET",
                columns: new[] { "ACQUIRE_ORDER_ID", "ACQUIRE_ORDER_ITEM_SEQ_ID" },
                principalTable: "ORDER_ITEM",
                principalColumns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.AddForeignKey(
                name: "FIXEDAST_PARTY",
                table: "FIXED_ASSET",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "FXDASTMNT_PURORD",
                table: "FIXED_ASSET_MAINT",
                column: "PURCHASE_ORDER_ID",
                principalTable: "ORDER_HEADER",
                principalColumn: "ORDER_ID");

            migrationBuilder.AddForeignKey(
                name: "FXDASTMNT_SCHWE",
                table: "FIXED_ASSET_MAINT",
                column: "SCHEDULE_WORK_EFFORT_ID",
                principalTable: "WORK_EFFORT",
                principalColumn: "WORK_EFFORT_ID");

            migrationBuilder.AddForeignKey(
                name: "FXDASTMNT_ORD",
                table: "FIXED_ASSET_MAINT_ORDER",
                column: "ORDER_ID",
                principalTable: "ORDER_HEADER",
                principalColumn: "ORDER_ID");

            migrationBuilder.AddForeignKey(
                name: "FIXDASTPRD_PRD",
                table: "FIXED_ASSET_PRODUCT",
                column: "PRODUCT_ID",
                principalTable: "PRODUCT",
                principalColumn: "PRODUCT_ID");

            migrationBuilder.AddForeignKey(
                name: "FIXDASTREG_GVAPTY",
                table: "FIXED_ASSET_REGISTRATION",
                column: "GOV_AGENCY_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "FATGL_OP",
                table: "FIXED_ASSET_TYPE_GL_ACCOUNT",
                column: "ORGANIZATION_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "GIFTCARD_PMNTMETH",
                table: "GIFT_CARD",
                column: "PAYMENT_METHOD_ID",
                principalTable: "PAYMENT_METHOD",
                principalColumn: "PAYMENT_METHOD_ID");

            migrationBuilder.AddForeignKey(
                name: "GC_FILL_ODRH",
                table: "GIFT_CARD_FULFILLMENT",
                column: "ORDER_ID",
                principalTable: "ORDER_HEADER",
                principalColumn: "ORDER_ID");

            migrationBuilder.AddForeignKey(
                name: "GC_FILL_ODRI",
                table: "GIFT_CARD_FULFILLMENT",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" },
                principalTable: "ORDER_ITEM",
                principalColumns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.AddForeignKey(
                name: "GC_FILL_PARTY",
                table: "GIFT_CARD_FULFILLMENT",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "GLACCT_HST_PARTY",
                table: "GL_ACCOUNT_HISTORY",
                column: "ORGANIZATION_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "GLACCT_ORG_PARTY",
                table: "GL_ACCOUNT_ORGANIZATION",
                column: "ORGANIZATION_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "GLACCT_RL_PTRLE",
                table: "GL_ACCOUNT_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" },
                principalTable: "PARTY_ROLE",
                principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.AddForeignKey(
                name: "GLACCT_TPDF_OPTY",
                table: "GL_ACCOUNT_TYPE_DEFAULT",
                column: "ORGANIZATION_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "GLJOURN_PARTY",
                table: "GL_JOURNAL",
                column: "ORGANIZATION_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "GLREC_GLPARTY",
                table: "GL_RECONCILIATION",
                column: "ORGANIZATION_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "GOOD_ID_PRODICT",
                table: "GOOD_IDENTIFICATION",
                column: "PRODUCT_ID",
                principalTable: "PRODUCT",
                principalColumn: "PRODUCT_ID");

            migrationBuilder.AddForeignKey(
                name: "INV_ITEM_OWNPARTY",
                table: "INVENTORY_ITEM",
                column: "OWNER_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "INV_ITEM_PARTY",
                table: "INVENTORY_ITEM",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "INV_ITEM_PRODUCT",
                table: "INVENTORY_ITEM",
                column: "PRODUCT_ID",
                principalTable: "PRODUCT",
                principalColumn: "PRODUCT_ID");

            migrationBuilder.AddForeignKey(
                name: "INV_ITDTL_ITMIS",
                table: "INVENTORY_ITEM_DETAIL",
                column: "ITEM_ISSUANCE_ID",
                principalTable: "ITEM_ISSUANCE",
                principalColumn: "ITEM_ISSUANCE_ID");

            migrationBuilder.AddForeignKey(
                name: "INV_ITDTL_SHRCT",
                table: "INVENTORY_ITEM_DETAIL",
                column: "RECEIPT_ID",
                principalTable: "SHIPMENT_RECEIPT",
                principalColumn: "RECEIPT_ID");

            migrationBuilder.AddForeignKey(
                name: "INV_ITDTL_WEFF",
                table: "INVENTORY_ITEM_DETAIL",
                column: "WORK_EFFORT_ID",
                principalTable: "WORK_EFFORT",
                principalColumn: "WORK_EFFORT_ID");

            migrationBuilder.AddForeignKey(
                name: "INV_ITEM_STTS_USER",
                table: "INVENTORY_ITEM_STATUS",
                column: "CHANGE_BY_USER_LOGIN_ID",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "INV_ITEM_TR_PRDS",
                table: "INVENTORY_ITEM_TEMP_RES",
                column: "PRODUCT_STORE_ID",
                principalTable: "PRODUCT_STORE",
                principalColumn: "PRODUCT_STORE_ID");

            migrationBuilder.AddForeignKey(
                name: "INV_ITEM_TR_PROD",
                table: "INVENTORY_ITEM_TEMP_RES",
                column: "PRODUCT_ID",
                principalTable: "PRODUCT",
                principalColumn: "PRODUCT_ID");

            migrationBuilder.AddForeignKey(
                name: "INV_XFER_ISSU",
                table: "INVENTORY_TRANSFER",
                column: "ITEM_ISSUANCE_ID",
                principalTable: "ITEM_ISSUANCE",
                principalColumn: "ITEM_ISSUANCE_ID");

            migrationBuilder.AddForeignKey(
                name: "INVOICE_PARTY",
                table: "INVOICE",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "INVOICE_PARTY_FRM",
                table: "INVOICE",
                column: "PARTY_ID_FROM",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "INVCE_ITM_OVRPTY",
                table: "INVOICE_ITEM",
                column: "OVERRIDE_ORG_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "INVCE_ITM_TAXPTY",
                table: "INVOICE_ITEM",
                column: "TAX_AUTH_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "INVCE_ITM_PROD",
                table: "INVOICE_ITEM",
                column: "PRODUCT_ID",
                principalTable: "PRODUCT",
                principalColumn: "PRODUCT_ID");

            migrationBuilder.AddForeignKey(
                name: "INVCE_ITM_SLSOPP",
                table: "INVOICE_ITEM",
                column: "SALES_OPPORTUNITY_ID",
                principalTable: "SALES_OPPORTUNITY",
                principalColumn: "SALES_OPPORTUNITY_ID");

            migrationBuilder.AddForeignKey(
                name: "INVOICE_ITM_TARP",
                table: "INVOICE_ITEM",
                column: "TAX_AUTHORITY_RATE_SEQ_ID",
                principalTable: "TAX_AUTHORITY_RATE_PRODUCT",
                principalColumn: "TAX_AUTHORITY_RATE_SEQ_ID");

            migrationBuilder.AddForeignKey(
                name: "INVOICE_ITGA_OPTY",
                table: "INVOICE_ITEM_TYPE_GL_ACCOUNT",
                column: "ORGANIZATION_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "INVOICE_NOTE_NOTE",
                table: "INVOICE_NOTE",
                column: "NOTE_ID",
                principalTable: "NOTE_DATA",
                principalColumn: "NOTE_ID");

            migrationBuilder.AddForeignKey(
                name: "INVCE_RLE_PARTY",
                table: "INVOICE_ROLE",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "INVCE_RLE_PTRL",
                table: "INVOICE_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" },
                principalTable: "PARTY_ROLE",
                principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.AddForeignKey(
                name: "INV_STTS_USRLGN",
                table: "INVOICE_STATUS",
                column: "CHANGE_BY_USER_LOGIN_ID",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "ITEM_ISS_IBUL",
                table: "ITEM_ISSUANCE",
                column: "ISSUED_BY_USER_LOGIN_ID",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "ITEM_ISS_ORITM",
                table: "ITEM_ISSUANCE",
                columns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" },
                principalTable: "ORDER_ITEM",
                principalColumns: new[] { "ORDER_ID", "ORDER_ITEM_SEQ_ID" });

            migrationBuilder.AddForeignKey(
                name: "ITEM_ISS_SHITM",
                table: "ITEM_ISSUANCE",
                columns: new[] { "SHIPMENT_ID", "SHIPMENT_ITEM_SEQ_ID" },
                principalTable: "SHIPMENT_ITEM",
                principalColumns: new[] { "SHIPMENT_ID", "SHIPMENT_ITEM_SEQ_ID" });

            migrationBuilder.AddForeignKey(
                name: "ITEM_ISSRL_PTRL",
                table: "ITEM_ISSUANCE_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" },
                principalTable: "PARTY_ROLE",
                principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.AddForeignKey(
                name: "ITEM_ISSRL_PTY",
                table: "ITEM_ISSUANCE_ROLE",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "JOB_INTW_IEPR",
                table: "JOB_INTERVIEW",
                column: "JOB_INTERVIEWEE_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "JOB_INTW_IRPR",
                table: "JOB_INTERVIEW",
                column: "JOB_INTERVIEWER_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "JOB_SNDBX_AUSRLGN",
                table: "JOB_SANDBOX",
                column: "AUTH_USER_LOGIN_ID",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "JOB_SNDBX_USRLGN",
                table: "JOB_SANDBOX",
                column: "RUN_AS_USER",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "MKTGCPN_NOTE_NOTE",
                table: "MARKETING_CAMPAIGN_NOTE",
                column: "NOTE_ID",
                principalTable: "NOTE_DATA",
                principalColumn: "NOTE_ID");

            migrationBuilder.AddForeignKey(
                name: "MKTGCPN_PROMO_PP",
                table: "MARKETING_CAMPAIGN_PROMO",
                column: "PRODUCT_PROMO_ID",
                principalTable: "PRODUCT_PROMO",
                principalColumn: "PRODUCT_PROMO_ID");

            migrationBuilder.AddForeignKey(
                name: "MKTGCPN_ROLE_PR",
                table: "MARKETING_CAMPAIGN_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" },
                principalTable: "PARTY_ROLE",
                principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.AddForeignKey(
                name: "MRPEV_PROD",
                table: "MRP_EVENT",
                column: "PRODUCT_ID",
                principalTable: "PRODUCT",
                principalColumn: "PRODUCT_ID");

            migrationBuilder.AddForeignKey(
                name: "NOTE_DATA_PTY",
                table: "NOTE_DATA",
                column: "NOTE_PARTY",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_ADJ_OHEAD",
                table: "ORDER_ADJUSTMENT",
                column: "ORDER_ID",
                principalTable: "ORDER_HEADER",
                principalColumn: "ORDER_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_ADJ_PROMO",
                table: "ORDER_ADJUSTMENT",
                column: "PRODUCT_PROMO_ID",
                principalTable: "PRODUCT_PROMO",
                principalColumn: "PRODUCT_PROMO_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_ADJ_TARP",
                table: "ORDER_ADJUSTMENT",
                column: "TAX_AUTHORITY_RATE_SEQ_ID",
                principalTable: "TAX_AUTHORITY_RATE_PRODUCT",
                principalColumn: "TAX_AUTHORITY_RATE_SEQ_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_ADJ_TXA",
                table: "ORDER_ADJUSTMENT",
                columns: new[] { "TAX_AUTH_GEO_ID", "TAX_AUTH_PARTY_ID" },
                principalTable: "TAX_AUTHORITY",
                principalColumns: new[] { "TAX_AUTH_GEO_ID", "TAX_AUTH_PARTY_ID" });

            migrationBuilder.AddForeignKey(
                name: "ORDER_ADJ_USERL",
                table: "ORDER_ADJUSTMENT",
                column: "CREATED_BY_USER_LOGIN",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_ATTR_HDR",
                table: "ORDER_ATTRIBUTE",
                column: "ORDER_ID",
                principalTable: "ORDER_HEADER",
                principalColumn: "ORDER_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_CMECH_HDR",
                table: "ORDER_CONTACT_MECH",
                column: "ORDER_ID",
                principalTable: "ORDER_HEADER",
                principalColumn: "ORDER_ID");

            migrationBuilder.AddForeignKey(
                name: "ORD_CNT_PROD",
                table: "ORDER_CONTENT",
                column: "ORDER_ID",
                principalTable: "ORDER_HEADER",
                principalColumn: "ORDER_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_DELSCH_OHDR",
                table: "ORDER_DELIVERY_SCHEDULE",
                column: "ORDER_ID",
                principalTable: "ORDER_HEADER",
                principalColumn: "ORDER_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_HDR_AOSHLST",
                table: "ORDER_HEADER",
                column: "AUTO_ORDER_SHOPPING_LIST_ID",
                principalTable: "SHOPPING_LIST",
                principalColumn: "SHOPPING_LIST_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_HDR_CBUL",
                table: "ORDER_HEADER",
                column: "CREATED_BY",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_HDR_PDSTR",
                table: "ORDER_HEADER",
                column: "PRODUCT_STORE_ID",
                principalTable: "PRODUCT_STORE",
                principalColumn: "PRODUCT_STORE_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_HDR_WS",
                table: "ORDER_HEADER",
                column: "WEB_SITE_ID",
                principalTable: "WEB_SITE",
                principalColumn: "WEB_SITE_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_VEHICLE",
                table: "ORDER_HEADER",
                column: "VEHICLE_ID",
                principalTable: "VEHICLES",
                principalColumn: "VEHICLE_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_ITEM_DCUL",
                table: "ORDER_ITEM",
                column: "DONT_CANCEL_SET_USER_LOGIN",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_ITEM_USRLGN",
                table: "ORDER_ITEM",
                column: "CHANGE_BY_USER_LOGIN_ID",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_ITEM_PRODUCT",
                table: "ORDER_ITEM",
                column: "PRODUCT_ID",
                principalTable: "PRODUCT",
                principalColumn: "PRODUCT_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_ITEM_QUIT",
                table: "ORDER_ITEM",
                columns: new[] { "QUOTE_ID", "QUOTE_ITEM_SEQ_ID" },
                principalTable: "QUOTE_ITEM",
                principalColumns: new[] { "QUOTE_ID", "QUOTE_ITEM_SEQ_ID" });

            migrationBuilder.AddForeignKey(
                name: "ORDER_ITEM_SLSOPP",
                table: "ORDER_ITEM",
                column: "SALES_OPPORTUNITY_ID",
                principalTable: "SALES_OPPORTUNITY",
                principalColumn: "SALES_OPPORTUNITY_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_ITBL_SHIPRCP",
                table: "ORDER_ITEM_BILLING",
                column: "SHIPMENT_RECEIPT_ID",
                principalTable: "SHIPMENT_RECEIPT",
                principalColumn: "RECEIPT_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_ITCH_USER",
                table: "ORDER_ITEM_CHANGE",
                column: "CHANGE_USER_LOGIN",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "OIGO_GROUP_ORDER",
                table: "ORDER_ITEM_GROUP_ORDER",
                column: "GROUP_ORDER_ID",
                principalTable: "PRODUCT_GROUP_ORDER",
                principalColumn: "GROUP_ORDER_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_ITRL_PARTY",
                table: "ORDER_ITEM_ROLE",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_ITRL_PTRLE",
                table: "ORDER_ITEM_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" },
                principalTable: "PARTY_ROLE",
                principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.AddForeignKey(
                name: "ORDER_ITSG_CPRLE",
                table: "ORDER_ITEM_SHIP_GROUP",
                columns: new[] { "CARRIER_PARTY_ID", "CARRIER_ROLE_TYPE_ID" },
                principalTable: "PARTY_ROLE",
                principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.AddForeignKey(
                name: "ORDER_ITSG_CPRTY",
                table: "ORDER_ITEM_SHIP_GROUP",
                column: "CARRIER_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_ITSG_SPRTY",
                table: "ORDER_ITEM_SHIP_GROUP",
                column: "SUPPLIER_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_ITSG_VPRTY",
                table: "ORDER_ITEM_SHIP_GROUP",
                column: "VENDOR_PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_PMPRF_PMETH",
                table: "ORDER_PAYMENT_PREFERENCE",
                column: "PAYMENT_METHOD_ID",
                principalTable: "PAYMENT_METHOD",
                principalColumn: "PAYMENT_METHOD_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_PMPRF_USRL",
                table: "ORDER_PAYMENT_PREFERENCE",
                column: "CREATED_BY_USER_LOGIN",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_PPCD_PPC",
                table: "ORDER_PRODUCT_PROMO_CODE",
                column: "PRODUCT_PROMO_CODE_ID",
                principalTable: "PRODUCT_PROMO_CODE",
                principalColumn: "PRODUCT_PROMO_CODE_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDREQ_CMT_REQ",
                table: "ORDER_REQUIREMENT_COMMITMENT",
                column: "REQUIREMENT_ID",
                principalTable: "REQUIREMENT",
                principalColumn: "REQUIREMENT_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_ROLE_PARTY",
                table: "ORDER_ROLE",
                column: "PARTY_ID",
                principalTable: "PARTY",
                principalColumn: "PARTY_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_ROLE_PROLE",
                table: "ORDER_ROLE",
                columns: new[] { "PARTY_ID", "ROLE_TYPE_ID" },
                principalTable: "PARTY_ROLE",
                principalColumns: new[] { "PARTY_ID", "ROLE_TYPE_ID" });

            migrationBuilder.AddForeignKey(
                name: "ORDER_SHPMT_SHPMT",
                table: "ORDER_SHIPMENT",
                column: "SHIPMENT_ID",
                principalTable: "SHIPMENT",
                principalColumn: "SHIPMENT_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_STTS_USER",
                table: "ORDER_STATUS",
                column: "STATUS_USER_LOGIN",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "ORDER_SMENT_PROD",
                table: "ORDER_SUMMARY_ENTRY",
                column: "PRODUCT_ID",
                principalTable: "PRODUCT",
                principalColumn: "PRODUCT_ID");

            migrationBuilder.AddForeignKey(
                name: "PARTY_CUL",
                table: "PARTY",
                column: "CREATED_BY_USER_LOGIN",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");

            migrationBuilder.AddForeignKey(
                name: "PARTY_LMCUL",
                table: "PARTY",
                column: "LAST_MODIFIED_BY_USER_LOGIN",
                principalTable: "USER_LOGIN",
                principalColumn: "USER_LOGIN_ID");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "ACMD_MAP_CLASS",
                table: "ACCOMMODATION_MAP");

            migrationBuilder.DropForeignKey(
                name: "ACCOM_CLASS",
                table: "ACCOMMODATION_SPOT");

            migrationBuilder.DropForeignKey(
                name: "ACMD_MAP_FA",
                table: "ACCOMMODATION_MAP");

            migrationBuilder.DropForeignKey(
                name: "SPOT_FA",
                table: "ACCOMMODATION_SPOT");

            migrationBuilder.DropForeignKey(
                name: "IYIM_FAST",
                table: "INVENTORY_ITEM");

            migrationBuilder.DropForeignKey(
                name: "WK_EFFRT_FXDASST",
                table: "WORK_EFFORT");

            migrationBuilder.DropForeignKey(
                name: "ACMD_MAP_TYPE",
                table: "ACCOMMODATION_MAP");

            migrationBuilder.DropForeignKey(
                name: "PAYMENT_FACTX",
                table: "PAYMENT");

            migrationBuilder.DropForeignKey(
                name: "PARTY_STATUSITM",
                table: "PARTY");

            migrationBuilder.DropForeignKey(
                name: "FINACCT_ORGPTY",
                table: "FIN_ACCOUNT");

            migrationBuilder.DropForeignKey(
                name: "FINACCT_OWNPTY",
                table: "FIN_ACCOUNT");

            migrationBuilder.DropForeignKey(
                name: "PAYMETH_PARTY",
                table: "PAYMENT_METHOD");

            migrationBuilder.DropForeignKey(
                name: "USER_PARTY",
                table: "USER_LOGIN");

            migrationBuilder.DropForeignKey(
                name: "FINACCT_CURUOM",
                table: "FIN_ACCOUNT");

            migrationBuilder.DropForeignKey(
                name: "FINACCT_GLAC",
                table: "FIN_ACCOUNT");

            migrationBuilder.DropForeignKey(
                name: "PAYMETH_GLACCT",
                table: "PAYMENT_METHOD");

            migrationBuilder.DropForeignKey(
                name: "PAYMENT_MTP_DGLAC",
                table: "PAYMENT_METHOD_TYPE");

            migrationBuilder.DropForeignKey(
                name: "FINACCT_TYPE_RENUM",
                table: "FIN_ACCOUNT_TYPE");

            migrationBuilder.DropForeignKey(
                name: "FINACCT_PAYMETH",
                table: "FIN_ACCOUNT");

            migrationBuilder.DropTable(
                name: "ACCTG_TRANS_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "ACCTG_TRANS_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "ADDENDUM");

            migrationBuilder.DropTable(
                name: "ADDRESS_MATCH_MAP");

            migrationBuilder.DropTable(
                name: "AFFILIATE");

            migrationBuilder.DropTable(
                name: "AGREEMENT_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "AGREEMENT_CONTENT");

            migrationBuilder.DropTable(
                name: "AGREEMENT_EMPLOYMENT_APPL");

            migrationBuilder.DropTable(
                name: "AGREEMENT_FACILITY_APPL");

            migrationBuilder.DropTable(
                name: "AGREEMENT_GEOGRAPHICAL_APPLIC");

            migrationBuilder.DropTable(
                name: "AGREEMENT_ITEM_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "AGREEMENT_ITEM_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "AGREEMENT_PARTY_APPLIC");

            migrationBuilder.DropTable(
                name: "AGREEMENT_PRODUCT_APPL");

            migrationBuilder.DropTable(
                name: "AGREEMENT_PROMO_APPL");

            migrationBuilder.DropTable(
                name: "AGREEMENT_ROLE");

            migrationBuilder.DropTable(
                name: "AGREEMENT_STATUS");

            migrationBuilder.DropTable(
                name: "AGREEMENT_TERM_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "AGREEMENT_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "AGREEMENT_WORK_EFFORT_APPLIC");

            migrationBuilder.DropTable(
                name: "ALLOCATION_PLAN_ITEM");

            migrationBuilder.DropTable(
                name: "APPLICATION_SANDBOX");

            migrationBuilder.DropTable(
                name: "AspNetRoleClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserLogins");

            migrationBuilder.DropTable(
                name: "AspNetUserRoles");

            migrationBuilder.DropTable(
                name: "AspNetUserTokens");

            migrationBuilder.DropTable(
                name: "AUDIO_DATA_RESOURCE");

            migrationBuilder.DropTable(
                name: "BILLING_ACCOUNT_ROLE");

            migrationBuilder.DropTable(
                name: "BILLING_ACCOUNT_TERM_ATTR");

            migrationBuilder.DropTable(
                name: "BUDGET_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "BUDGET_ITEM_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "BUDGET_ITEM_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "BUDGET_REVIEW");

            migrationBuilder.DropTable(
                name: "BUDGET_REVISION_IMPACT");

            migrationBuilder.DropTable(
                name: "BUDGET_ROLE");

            migrationBuilder.DropTable(
                name: "BUDGET_SCENARIO_APPLICATION");

            migrationBuilder.DropTable(
                name: "BUDGET_SCENARIO_RULE");

            migrationBuilder.DropTable(
                name: "BUDGET_STATUS");

            migrationBuilder.DropTable(
                name: "BUDGET_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "CARRIER_SHIPMENT_BOX_TYPE");

            migrationBuilder.DropTable(
                name: "CART_ABANDONED_LINE");

            migrationBuilder.DropTable(
                name: "CATALINA_SESSION");

            migrationBuilder.DropTable(
                name: "CHECK_ACCOUNT");

            migrationBuilder.DropTable(
                name: "COMM_EVENT_CONTENT_ASSOC");

            migrationBuilder.DropTable(
                name: "COMMUNICATION_EVENT_ORDER");

            migrationBuilder.DropTable(
                name: "COMMUNICATION_EVENT_PRODUCT");

            migrationBuilder.DropTable(
                name: "COMMUNICATION_EVENT_PURPOSE");

            migrationBuilder.DropTable(
                name: "COMMUNICATION_EVENT_RETURN");

            migrationBuilder.DropTable(
                name: "COMMUNICATION_EVENT_ROLE");

            migrationBuilder.DropTable(
                name: "COMMUNICATION_EVENT_WORK_EFF");

            migrationBuilder.DropTable(
                name: "CONFIG_OPTION_PRODUCT_OPTION");

            migrationBuilder.DropTable(
                name: "CONTACT_LIST_COMM_STATUS");

            migrationBuilder.DropTable(
                name: "CONTACT_LIST_PARTY_STATUS");

            migrationBuilder.DropTable(
                name: "CONTACT_MECH_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "CONTACT_MECH_LINK");

            migrationBuilder.DropTable(
                name: "CONTACT_MECH_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "CONTACT_MECH_TYPE_PURPOSE");

            migrationBuilder.DropTable(
                name: "CONTAINER_GEO_POINT");

            migrationBuilder.DropTable(
                name: "CONTENT_APPROVAL");

            migrationBuilder.DropTable(
                name: "CONTENT_ASSOC");

            migrationBuilder.DropTable(
                name: "CONTENT_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "CONTENT_KEYWORD");

            migrationBuilder.DropTable(
                name: "CONTENT_META_DATA");

            migrationBuilder.DropTable(
                name: "CONTENT_PURPOSE");

            migrationBuilder.DropTable(
                name: "CONTENT_PURPOSE_OPERATION");

            migrationBuilder.DropTable(
                name: "CONTENT_REVISION_ITEM");

            migrationBuilder.DropTable(
                name: "CONTENT_ROLE");

            migrationBuilder.DropTable(
                name: "CONTENT_SEARCH_CONSTRAINT");

            migrationBuilder.DropTable(
                name: "CONTENT_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "COST_COMPONENT_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "COST_COMPONENT_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "COUNTRY_ADDRESS_FORMAT");

            migrationBuilder.DropTable(
                name: "COUNTRY_CAPITAL");

            migrationBuilder.DropTable(
                name: "COUNTRY_TELE_CODE");

            migrationBuilder.DropTable(
                name: "CREDIT_CARD");

            migrationBuilder.DropTable(
                name: "CREDIT_CARD_TYPE_GL_ACCOUNT");

            migrationBuilder.DropTable(
                name: "CUST_REQUEST_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "CUST_REQUEST_COMM_EVENT");

            migrationBuilder.DropTable(
                name: "CUST_REQUEST_CONTENT");

            migrationBuilder.DropTable(
                name: "CUST_REQUEST_ITEM_NOTE");

            migrationBuilder.DropTable(
                name: "CUST_REQUEST_ITEM_WORK_EFFORT");

            migrationBuilder.DropTable(
                name: "CUST_REQUEST_NOTE");

            migrationBuilder.DropTable(
                name: "CUST_REQUEST_PARTY");

            migrationBuilder.DropTable(
                name: "CUST_REQUEST_STATUS");

            migrationBuilder.DropTable(
                name: "CUST_REQUEST_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "CUST_REQUEST_WORK_EFFORT");

            migrationBuilder.DropTable(
                name: "CUSTOM_SCREEN");

            migrationBuilder.DropTable(
                name: "DATA_RESOURCE_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "DATA_RESOURCE_META_DATA");

            migrationBuilder.DropTable(
                name: "DATA_RESOURCE_PURPOSE");

            migrationBuilder.DropTable(
                name: "DATA_RESOURCE_ROLE");

            migrationBuilder.DropTable(
                name: "DATA_RESOURCE_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "DEDUCTION");

            migrationBuilder.DropTable(
                name: "DESIRED_FEATURE");

            migrationBuilder.DropTable(
                name: "DOCUMENT_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "DOCUMENT_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "EFT_ACCOUNT");

            migrationBuilder.DropTable(
                name: "ELECTRONIC_TEXT");

            migrationBuilder.DropTable(
                name: "EMAIL_ADDRESS_VERIFICATION");

            migrationBuilder.DropTable(
                name: "EMAIL_TEMPLATE_SETTING");

            migrationBuilder.DropTable(
                name: "EMPL_LEAVE");

            migrationBuilder.DropTable(
                name: "EMPL_POSITION_FULFILLMENT");

            migrationBuilder.DropTable(
                name: "EMPL_POSITION_REPORTING_STRUCT");

            migrationBuilder.DropTable(
                name: "EMPL_POSITION_RESPONSIBILITY");

            migrationBuilder.DropTable(
                name: "EMPL_POSITION_TYPE_CLASS");

            migrationBuilder.DropTable(
                name: "EMPL_POSITION_TYPE_RATE_NEW");

            migrationBuilder.DropTable(
                name: "EMPLOYMENT_APP");

            migrationBuilder.DropTable(
                name: "EMPLOYMENT_APP_SOURCE_TYPE");

            migrationBuilder.DropTable(
                name: "ENTITY_AUDIT_LOG");

            migrationBuilder.DropTable(
                name: "ENTITY_GROUP_ENTRY");

            migrationBuilder.DropTable(
                name: "ENTITY_KEY_STORE");

            migrationBuilder.DropTable(
                name: "ENTITY_SYNC_HISTORY");

            migrationBuilder.DropTable(
                name: "ENTITY_SYNC_INCLUDE");

            migrationBuilder.DropTable(
                name: "ENTITY_SYNC_INCLUDE_GROUP");

            migrationBuilder.DropTable(
                name: "ENTITY_SYNC_REMOVE");

            migrationBuilder.DropTable(
                name: "FACILITY_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "FACILITY_CALENDAR");

            migrationBuilder.DropTable(
                name: "FACILITY_CARRIER_SHIPMENT");

            migrationBuilder.DropTable(
                name: "FACILITY_CONTACT_MECH");

            migrationBuilder.DropTable(
                name: "FACILITY_CONTACT_MECH_PURPOSE");

            migrationBuilder.DropTable(
                name: "FACILITY_CONTENT");

            migrationBuilder.DropTable(
                name: "FACILITY_GROUP_MEMBER");

            migrationBuilder.DropTable(
                name: "FACILITY_GROUP_ROLE");

            migrationBuilder.DropTable(
                name: "FACILITY_GROUP_ROLLUP");

            migrationBuilder.DropTable(
                name: "FACILITY_LOCATION_GEO_POINT");

            migrationBuilder.DropTable(
                name: "FACILITY_PARTY");

            migrationBuilder.DropTable(
                name: "FACILITY_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "FILE_EXTENSION");

            migrationBuilder.DropTable(
                name: "FIN_ACCOUNT_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "FIN_ACCOUNT_AUTH");

            migrationBuilder.DropTable(
                name: "FIN_ACCOUNT_ROLE");

            migrationBuilder.DropTable(
                name: "FIN_ACCOUNT_STATUS");

            migrationBuilder.DropTable(
                name: "FIN_ACCOUNT_TRANS_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "FIN_ACCOUNT_TRANS_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "FIN_ACCOUNT_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "FIN_ACCOUNT_TYPE_GL_ACCOUNT");

            migrationBuilder.DropTable(
                name: "FIXED_ASSET_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "FIXED_ASSET_DEP_METHOD");

            migrationBuilder.DropTable(
                name: "FIXED_ASSET_GEO_POINT");

            migrationBuilder.DropTable(
                name: "FIXED_ASSET_IDENT");

            migrationBuilder.DropTable(
                name: "FIXED_ASSET_MAINT_ORDER");

            migrationBuilder.DropTable(
                name: "FIXED_ASSET_METER");

            migrationBuilder.DropTable(
                name: "FIXED_ASSET_PRODUCT");

            migrationBuilder.DropTable(
                name: "FIXED_ASSET_REGISTRATION");

            migrationBuilder.DropTable(
                name: "FIXED_ASSET_STD_COST");

            migrationBuilder.DropTable(
                name: "FIXED_ASSET_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "FIXED_ASSET_TYPE_GL_ACCOUNT");

            migrationBuilder.DropTable(
                name: "FTP_ADDRESS");

            migrationBuilder.DropTable(
                name: "GEO_ASSOC");

            migrationBuilder.DropTable(
                name: "GIFT_CARD");

            migrationBuilder.DropTable(
                name: "GIFT_CARD_FULFILLMENT");

            migrationBuilder.DropTable(
                name: "GL_ACCOUNT_CATEGORY_MEMBER");

            migrationBuilder.DropTable(
                name: "GL_ACCOUNT_GROUP_MEMBER");

            migrationBuilder.DropTable(
                name: "GL_ACCOUNT_HISTORY");

            migrationBuilder.DropTable(
                name: "GL_ACCOUNT_ROLE");

            migrationBuilder.DropTable(
                name: "GL_ACCOUNT_TYPE_DEFAULT");

            migrationBuilder.DropTable(
                name: "GL_BUDGET_XREF");

            migrationBuilder.DropTable(
                name: "GL_RECONCILIATION_ENTRY");

            migrationBuilder.DropTable(
                name: "GOOD_IDENTIFICATION");

            migrationBuilder.DropTable(
                name: "IMAGE_DATA_RESOURCE");

            migrationBuilder.DropTable(
                name: "INVENTORY_ITEM_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "INVENTORY_ITEM_DETAIL");

            migrationBuilder.DropTable(
                name: "INVENTORY_ITEM_LABEL_APPL");

            migrationBuilder.DropTable(
                name: "INVENTORY_ITEM_STATUS");

            migrationBuilder.DropTable(
                name: "INVENTORY_ITEM_TEMP_RES");

            migrationBuilder.DropTable(
                name: "INVENTORY_ITEM_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "INVENTORY_TRANSFER");

            migrationBuilder.DropTable(
                name: "INVOICE_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "INVOICE_CONTACT_MECH");

            migrationBuilder.DropTable(
                name: "INVOICE_CONTENT");

            migrationBuilder.DropTable(
                name: "INVOICE_ITEM_ASSOC");

            migrationBuilder.DropTable(
                name: "INVOICE_ITEM_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "INVOICE_ITEM_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "INVOICE_ITEM_TYPE_GL_ACCOUNT");

            migrationBuilder.DropTable(
                name: "INVOICE_ITEM_TYPE_MAP");

            migrationBuilder.DropTable(
                name: "INVOICE_NOTE");

            migrationBuilder.DropTable(
                name: "INVOICE_ROLE");

            migrationBuilder.DropTable(
                name: "INVOICE_STATUS");

            migrationBuilder.DropTable(
                name: "INVOICE_TERM_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "INVOICE_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "ITEM_ISSUANCE_ROLE");

            migrationBuilder.DropTable(
                name: "JAVA_RESOURCE");

            migrationBuilder.DropTable(
                name: "JOB_INTERVIEW");

            migrationBuilder.DropTable(
                name: "JOB_MANAGER_LOCK");

            migrationBuilder.DropTable(
                name: "KEYWORD_THESAURUS");

            migrationBuilder.DropTable(
                name: "MARKET_INTEREST");

            migrationBuilder.DropTable(
                name: "MARKETING_CAMPAIGN_NOTE");

            migrationBuilder.DropTable(
                name: "MARKETING_CAMPAIGN_PRICE");

            migrationBuilder.DropTable(
                name: "MARKETING_CAMPAIGN_PROMO");

            migrationBuilder.DropTable(
                name: "MARKETING_CAMPAIGN_ROLE");

            migrationBuilder.DropTable(
                name: "MIME_TYPE_HTML_TEMPLATE");

            migrationBuilder.DropTable(
                name: "MRP_EVENT");

            migrationBuilder.DropTable(
                name: "ORDER_ADJUSTMENT_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "ORDER_ADJUSTMENT_BILLING");

            migrationBuilder.DropTable(
                name: "ORDER_ADJUSTMENT_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "ORDER_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "ORDER_BLACKLIST");

            migrationBuilder.DropTable(
                name: "ORDER_CONTACT_MECH");

            migrationBuilder.DropTable(
                name: "ORDER_CONTENT");

            migrationBuilder.DropTable(
                name: "ORDER_DELIVERY_SCHEDULE");

            migrationBuilder.DropTable(
                name: "ORDER_DENYLIST");

            migrationBuilder.DropTable(
                name: "ORDER_HEADER_NOTE");

            migrationBuilder.DropTable(
                name: "ORDER_HEADER_WORK_EFFORT");

            migrationBuilder.DropTable(
                name: "ORDER_ITEM_ASSOC");

            migrationBuilder.DropTable(
                name: "ORDER_ITEM_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "ORDER_ITEM_BILLING");

            migrationBuilder.DropTable(
                name: "ORDER_ITEM_CHANGE");

            migrationBuilder.DropTable(
                name: "ORDER_ITEM_CONTACT_MECH");

            migrationBuilder.DropTable(
                name: "ORDER_ITEM_GROUP_ORDER");

            migrationBuilder.DropTable(
                name: "ORDER_ITEM_PRICE_INFO");

            migrationBuilder.DropTable(
                name: "ORDER_ITEM_ROLE");

            migrationBuilder.DropTable(
                name: "ORDER_ITEM_SHIP_GROUP_ASSOC");

            migrationBuilder.DropTable(
                name: "ORDER_ITEM_SHIP_GRP_INV_RES");

            migrationBuilder.DropTable(
                name: "ORDER_ITEM_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "ORDER_NOTIFICATION");

            migrationBuilder.DropTable(
                name: "ORDER_PRODUCT_PROMO_CODE");

            migrationBuilder.DropTable(
                name: "ORDER_REQUIREMENT_COMMITMENT");

            migrationBuilder.DropTable(
                name: "ORDER_ROLE");

            migrationBuilder.DropTable(
                name: "ORDER_SHIPMENT");

            migrationBuilder.DropTable(
                name: "ORDER_STATUS");

            migrationBuilder.DropTable(
                name: "ORDER_SUMMARY_ENTRY");

            migrationBuilder.DropTable(
                name: "ORDER_TERM_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "ORDER_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "OTHER_DATA_RESOURCE");

            migrationBuilder.DropTable(
                name: "PARTY_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "PARTY_BENEFIT");

            migrationBuilder.DropTable(
                name: "PARTY_CARRIER_ACCOUNT");

            migrationBuilder.DropTable(
                name: "PARTY_CLASSIFICATION");

            migrationBuilder.DropTable(
                name: "PARTY_CONTACT_MECH");

            migrationBuilder.DropTable(
                name: "PARTY_CONTACT_MECH_PURPOSE");

            migrationBuilder.DropTable(
                name: "PARTY_CONTENT");

            migrationBuilder.DropTable(
                name: "PARTY_DATA_SOURCE");

            migrationBuilder.DropTable(
                name: "PARTY_FIXED_ASSET_ASSIGNMENT");

            migrationBuilder.DropTable(
                name: "PARTY_GEO_POINT");

            migrationBuilder.DropTable(
                name: "PARTY_GL_ACCOUNT");

            migrationBuilder.DropTable(
                name: "PARTY_ICS_AVS_OVERRIDE");

            migrationBuilder.DropTable(
                name: "PARTY_IDENTIFICATION");

            migrationBuilder.DropTable(
                name: "PARTY_INVITATION_GROUP_ASSOC");

            migrationBuilder.DropTable(
                name: "PARTY_INVITATION_ROLE_ASSOC");

            migrationBuilder.DropTable(
                name: "PARTY_NAME_HISTORY");

            migrationBuilder.DropTable(
                name: "PARTY_NEED");

            migrationBuilder.DropTable(
                name: "PARTY_NOTE");

            migrationBuilder.DropTable(
                name: "PARTY_PREF_DOC_TYPE_TPL");

            migrationBuilder.DropTable(
                name: "PARTY_PROFILE_DEFAULT");

            migrationBuilder.DropTable(
                name: "PARTY_QUAL");

            migrationBuilder.DropTable(
                name: "PARTY_RATE_NEW");

            migrationBuilder.DropTable(
                name: "PARTY_RELATIONSHIP");

            migrationBuilder.DropTable(
                name: "PARTY_RESUME");

            migrationBuilder.DropTable(
                name: "PARTY_SKILL");

            migrationBuilder.DropTable(
                name: "PARTY_STATUS");

            migrationBuilder.DropTable(
                name: "PARTY_TAX_AUTH_INFO");

            migrationBuilder.DropTable(
                name: "PARTY_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "PAY_HISTORY");

            migrationBuilder.DropTable(
                name: "PAY_PAL_PAYMENT_METHOD");

            migrationBuilder.DropTable(
                name: "PAYMENT_APPLICATION");

            migrationBuilder.DropTable(
                name: "PAYMENT_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "PAYMENT_BUDGET_ALLOCATION");

            migrationBuilder.DropTable(
                name: "PAYMENT_CONTENT");

            migrationBuilder.DropTable(
                name: "PAYMENT_GATEWAY_AUTHORIZE_NET");

            migrationBuilder.DropTable(
                name: "PAYMENT_GATEWAY_CLEAR_COMMERCE");

            migrationBuilder.DropTable(
                name: "PAYMENT_GATEWAY_CYBER_SOURCE");

            migrationBuilder.DropTable(
                name: "PAYMENT_GATEWAY_EWAY");

            migrationBuilder.DropTable(
                name: "PAYMENT_GATEWAY_ORBITAL");

            migrationBuilder.DropTable(
                name: "PAYMENT_GATEWAY_PAY_PAL");

            migrationBuilder.DropTable(
                name: "PAYMENT_GATEWAY_PAYFLOW_PRO");

            migrationBuilder.DropTable(
                name: "PAYMENT_GATEWAY_RESP_MSG");

            migrationBuilder.DropTable(
                name: "PAYMENT_GATEWAY_SAGE_PAY");

            migrationBuilder.DropTable(
                name: "PAYMENT_GATEWAY_SECURE_PAY");

            migrationBuilder.DropTable(
                name: "PAYMENT_GATEWAY_WORLD_PAY");

            migrationBuilder.DropTable(
                name: "PAYMENT_GL_ACCOUNT_TYPE_MAP");

            migrationBuilder.DropTable(
                name: "PAYMENT_GROUP_MEMBER");

            migrationBuilder.DropTable(
                name: "PAYMENT_METHOD_TYPE_GL_ACCOUNT");

            migrationBuilder.DropTable(
                name: "PAYMENT_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "PAYROLL_PREFERENCE");

            migrationBuilder.DropTable(
                name: "PERF_RATING_TYPE");

            migrationBuilder.DropTable(
                name: "PERF_REVIEW_ITEM");

            migrationBuilder.DropTable(
                name: "PERF_REVIEW_ITEM_TYPE");

            migrationBuilder.DropTable(
                name: "PERFORMANCE_NOTE");

            migrationBuilder.DropTable(
                name: "PERSON_TRAINING");

            migrationBuilder.DropTable(
                name: "Photos");

            migrationBuilder.DropTable(
                name: "PICKLIST_ITEM");

            migrationBuilder.DropTable(
                name: "PICKLIST_ROLE");

            migrationBuilder.DropTable(
                name: "PICKLIST_STATUS");

            migrationBuilder.DropTable(
                name: "PICKLIST_STATUS_HISTORY");

            migrationBuilder.DropTable(
                name: "PORTAL_PAGE_COLUMN");

            migrationBuilder.DropTable(
                name: "PORTAL_PAGE_PORTLET");

            migrationBuilder.DropTable(
                name: "PORTLET_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "PORTLET_PORTLET_CATEGORY");

            migrationBuilder.DropTable(
                name: "POSTAL_ADDRESS_BOUNDARY");

            migrationBuilder.DropTable(
                name: "PROD_CATALOG_CATEGORY");

            migrationBuilder.DropTable(
                name: "PROD_CATALOG_INV_FACILITY");

            migrationBuilder.DropTable(
                name: "PROD_CATALOG_ROLE");

            migrationBuilder.DropTable(
                name: "PROD_CONF_ITEM_CONTENT");

            migrationBuilder.DropTable(
                name: "PROD_PROMO_CODE_CONTACT_MECH");

            migrationBuilder.DropTable(
                name: "PRODUCT_ASSOC");

            migrationBuilder.DropTable(
                name: "PRODUCT_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "PRODUCT_AVERAGE_COST");

            migrationBuilder.DropTable(
                name: "PRODUCT_CALCULATED_INFO");

            migrationBuilder.DropTable(
                name: "PRODUCT_CATEGORY_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "PRODUCT_CATEGORY_CONTENT");

            migrationBuilder.DropTable(
                name: "PRODUCT_CATEGORY_GL_ACCOUNT");

            migrationBuilder.DropTable(
                name: "PRODUCT_CATEGORY_LINK");

            migrationBuilder.DropTable(
                name: "PRODUCT_CATEGORY_MEMBER");

            migrationBuilder.DropTable(
                name: "PRODUCT_CATEGORY_ROLE");

            migrationBuilder.DropTable(
                name: "PRODUCT_CATEGORY_ROLLUP");

            migrationBuilder.DropTable(
                name: "PRODUCT_CATEGORY_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "PRODUCT_CONFIG");

            migrationBuilder.DropTable(
                name: "PRODUCT_CONFIG_OPTION_IACTN");

            migrationBuilder.DropTable(
                name: "PRODUCT_CONFIG_STATS");

            migrationBuilder.DropTable(
                name: "PRODUCT_CONTENT");

            migrationBuilder.DropTable(
                name: "PRODUCT_COST_COMPONENT_CALC");

            migrationBuilder.DropTable(
                name: "PRODUCT_FACILITY");

            migrationBuilder.DropTable(
                name: "PRODUCT_FACILITY_ASSOC");

            migrationBuilder.DropTable(
                name: "PRODUCT_FACILITY_LOCATION");

            migrationBuilder.DropTable(
                name: "PRODUCT_FEATURE_APPL_ATTR");

            migrationBuilder.DropTable(
                name: "PRODUCT_FEATURE_CAT_GRP_APPL");

            migrationBuilder.DropTable(
                name: "PRODUCT_FEATURE_CATEGORY_APPL");

            migrationBuilder.DropTable(
                name: "PRODUCT_FEATURE_DATA_RESOURCE");

            migrationBuilder.DropTable(
                name: "PRODUCT_FEATURE_GROUP_APPL");

            migrationBuilder.DropTable(
                name: "PRODUCT_FEATURE_IACTN");

            migrationBuilder.DropTable(
                name: "PRODUCT_FEATURE_PRICE");

            migrationBuilder.DropTable(
                name: "PRODUCT_GEO");

            migrationBuilder.DropTable(
                name: "PRODUCT_GL_ACCOUNT");

            migrationBuilder.DropTable(
                name: "PRODUCT_KEYWORD_NEW");

            migrationBuilder.DropTable(
                name: "PRODUCT_MAINT");

            migrationBuilder.DropTable(
                name: "PRODUCT_MANUFACTURING_RULE");

            migrationBuilder.DropTable(
                name: "PRODUCT_METER");

            migrationBuilder.DropTable(
                name: "PRODUCT_ORDER_ITEM");

            migrationBuilder.DropTable(
                name: "PRODUCT_PAYMENT_METHOD_TYPE");

            migrationBuilder.DropTable(
                name: "PRODUCT_PRICE");

            migrationBuilder.DropTable(
                name: "PRODUCT_PRICE_AUTO_NOTICE");

            migrationBuilder.DropTable(
                name: "PRODUCT_PRICE_CHANGE");

            migrationBuilder.DropTable(
                name: "PRODUCT_PRICE_COND");

            migrationBuilder.DropTable(
                name: "PRODUCT_PROMO_ACTION");

            migrationBuilder.DropTable(
                name: "PRODUCT_PROMO_CATEGORY");

            migrationBuilder.DropTable(
                name: "PRODUCT_PROMO_CODE_EMAIL");

            migrationBuilder.DropTable(
                name: "PRODUCT_PROMO_CODE_PARTY");

            migrationBuilder.DropTable(
                name: "PRODUCT_PROMO_COND");

            migrationBuilder.DropTable(
                name: "PRODUCT_PROMO_CONTENT");

            migrationBuilder.DropTable(
                name: "PRODUCT_PROMO_PRODUCT");

            migrationBuilder.DropTable(
                name: "PRODUCT_PROMO_USE");

            migrationBuilder.DropTable(
                name: "PRODUCT_REVIEW");

            migrationBuilder.DropTable(
                name: "PRODUCT_ROLE");

            migrationBuilder.DropTable(
                name: "PRODUCT_SEARCH_CONSTRAINT");

            migrationBuilder.DropTable(
                name: "PRODUCT_STORE_CATALOG");

            migrationBuilder.DropTable(
                name: "PRODUCT_STORE_EMAIL_SETTING");

            migrationBuilder.DropTable(
                name: "PRODUCT_STORE_FACILITY");

            migrationBuilder.DropTable(
                name: "PRODUCT_STORE_FIN_ACT_SETTING");

            migrationBuilder.DropTable(
                name: "PRODUCT_STORE_GROUP_MEMBER");

            migrationBuilder.DropTable(
                name: "PRODUCT_STORE_GROUP_ROLE");

            migrationBuilder.DropTable(
                name: "PRODUCT_STORE_GROUP_ROLLUP");

            migrationBuilder.DropTable(
                name: "PRODUCT_STORE_KEYWORD_OVRD");

            migrationBuilder.DropTable(
                name: "PRODUCT_STORE_PAYMENT_SETTING");

            migrationBuilder.DropTable(
                name: "PRODUCT_STORE_PROMO_APPL");

            migrationBuilder.DropTable(
                name: "PRODUCT_STORE_ROLE");

            migrationBuilder.DropTable(
                name: "PRODUCT_STORE_TELECOM_SETTING");

            migrationBuilder.DropTable(
                name: "PRODUCT_STORE_VENDOR_PAYMENT");

            migrationBuilder.DropTable(
                name: "PRODUCT_STORE_VENDOR_SHIPMENT");

            migrationBuilder.DropTable(
                name: "PRODUCT_SUBSCRIPTION_RESOURCE");

            migrationBuilder.DropTable(
                name: "PRODUCT_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "PROTECTED_VIEW");

            migrationBuilder.DropTable(
                name: "QUOTE_ADJUSTMENT");

            migrationBuilder.DropTable(
                name: "QUOTE_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "QUOTE_COEFFICIENT");

            migrationBuilder.DropTable(
                name: "QUOTE_NOTE");

            migrationBuilder.DropTable(
                name: "QUOTE_ROLE");

            migrationBuilder.DropTable(
                name: "QUOTE_TERM_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "QUOTE_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "QUOTE_WORK_EFFORT");

            migrationBuilder.DropTable(
                name: "RATE_AMOUNT");

            migrationBuilder.DropTable(
                name: "REORDER_GUIDELINE");

            migrationBuilder.DropTable(
                name: "REQUIREMENT_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "REQUIREMENT_BUDGET_ALLOCATION");

            migrationBuilder.DropTable(
                name: "REQUIREMENT_CUST_REQUEST");

            migrationBuilder.DropTable(
                name: "REQUIREMENT_ROLE");

            migrationBuilder.DropTable(
                name: "REQUIREMENT_STATUS");

            migrationBuilder.DropTable(
                name: "REQUIREMENT_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "RESPONDING_PARTY");

            migrationBuilder.DropTable(
                name: "RETURN_ADJUSTMENT");

            migrationBuilder.DropTable(
                name: "RETURN_CONTACT_MECH");

            migrationBuilder.DropTable(
                name: "RETURN_ITEM_BILLING");

            migrationBuilder.DropTable(
                name: "RETURN_ITEM_SHIPMENT");

            migrationBuilder.DropTable(
                name: "RETURN_ITEM_TYPE_MAP");

            migrationBuilder.DropTable(
                name: "RETURN_STATUS");

            migrationBuilder.DropTable(
                name: "ROLE_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "SALARY_STEP_NEW");

            migrationBuilder.DropTable(
                name: "SALE_TYPE");

            migrationBuilder.DropTable(
                name: "SALES_FORECAST_DETAIL");

            migrationBuilder.DropTable(
                name: "SALES_FORECAST_HISTORY");

            migrationBuilder.DropTable(
                name: "SALES_OPPORTUNITY_COMPETITOR");

            migrationBuilder.DropTable(
                name: "SALES_OPPORTUNITY_HISTORY");

            migrationBuilder.DropTable(
                name: "SALES_OPPORTUNITY_QUOTE");

            migrationBuilder.DropTable(
                name: "SALES_OPPORTUNITY_ROLE");

            migrationBuilder.DropTable(
                name: "SALES_OPPORTUNITY_TRCK_CODE");

            migrationBuilder.DropTable(
                name: "SALES_OPPORTUNITY_WORK_EFFORT");

            migrationBuilder.DropTable(
                name: "SECURITY_GROUP_PERMISSION");

            migrationBuilder.DropTable(
                name: "SECURITY_PERMISSION");

            migrationBuilder.DropTable(
                name: "SEGMENT_GROUP_CLASSIFICATION");

            migrationBuilder.DropTable(
                name: "SEGMENT_GROUP_GEO");

            migrationBuilder.DropTable(
                name: "SEGMENT_GROUP_ROLE");

            migrationBuilder.DropTable(
                name: "SEQUENCE_VALUE_ITEM");

            migrationBuilder.DropTable(
                name: "SERVER_HIT");

            migrationBuilder.DropTable(
                name: "SERVER_HIT_BIN");

            migrationBuilder.DropTable(
                name: "SERVICE_RATES");

            migrationBuilder.DropTable(
                name: "SERVICE_SEMAPHORE");

            migrationBuilder.DropTable(
                name: "SERVICE_SPECIFICATION");

            migrationBuilder.DropTable(
                name: "SHIPMENT_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "SHIPMENT_CONTACT_MECH");

            migrationBuilder.DropTable(
                name: "SHIPMENT_COST_ESTIMATE");

            migrationBuilder.DropTable(
                name: "SHIPMENT_GATEWAY_DHL");

            migrationBuilder.DropTable(
                name: "SHIPMENT_GATEWAY_FEDEX");

            migrationBuilder.DropTable(
                name: "SHIPMENT_GATEWAY_UPS");

            migrationBuilder.DropTable(
                name: "SHIPMENT_GATEWAY_USPS");

            migrationBuilder.DropTable(
                name: "SHIPMENT_ITEM_BILLING");

            migrationBuilder.DropTable(
                name: "SHIPMENT_ITEM_FEATURE");

            migrationBuilder.DropTable(
                name: "SHIPMENT_PACKAGE_CONTENT");

            migrationBuilder.DropTable(
                name: "SHIPMENT_PACKAGE_ROUTE_SEG");

            migrationBuilder.DropTable(
                name: "SHIPMENT_RECEIPT_ROLE");

            migrationBuilder.DropTable(
                name: "SHIPMENT_STATUS");

            migrationBuilder.DropTable(
                name: "SHIPMENT_TIME_ESTIMATE");

            migrationBuilder.DropTable(
                name: "SHIPMENT_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "SHIPPING_DOCUMENT");

            migrationBuilder.DropTable(
                name: "SHOPPING_LIST_ITEM_SURVEY");

            migrationBuilder.DropTable(
                name: "SHOPPING_LIST_WORK_EFFORT");

            migrationBuilder.DropTable(
                name: "STANDARD_LANGUAGE");

            migrationBuilder.DropTable(
                name: "SUBSCRIPTION_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "SUBSCRIPTION_COMM_EVENT");

            migrationBuilder.DropTable(
                name: "SUBSCRIPTION_FULFILLMENT_PIECE");

            migrationBuilder.DropTable(
                name: "SUBSCRIPTION_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "SUPPLIER_PRODUCT");

            migrationBuilder.DropTable(
                name: "SUPPLIER_PRODUCT_FEATURE");

            migrationBuilder.DropTable(
                name: "SURVEY_MULTI_RESP_COLUMN");

            migrationBuilder.DropTable(
                name: "SURVEY_PAGE");

            migrationBuilder.DropTable(
                name: "SURVEY_QUESTION_APPL");

            migrationBuilder.DropTable(
                name: "SURVEY_RESPONSE_ANSWER");

            migrationBuilder.DropTable(
                name: "SURVEY_TRIGGER");

            migrationBuilder.DropTable(
                name: "SYSTEM_PROPERTY");

            migrationBuilder.DropTable(
                name: "TARPITTED_LOGIN_VIEW");

            migrationBuilder.DropTable(
                name: "TAX_AUTHORITY_ASSOC");

            migrationBuilder.DropTable(
                name: "TAX_AUTHORITY_CATEGORY");

            migrationBuilder.DropTable(
                name: "TAX_AUTHORITY_GL_ACCOUNT");

            migrationBuilder.DropTable(
                name: "TECH_DATA_CALENDAR_EXC_DAY");

            migrationBuilder.DropTable(
                name: "TECH_DATA_CALENDAR_EXC_WEEK");

            migrationBuilder.DropTable(
                name: "TEMPORAL_EXPRESSION_ASSOC");

            migrationBuilder.DropTable(
                name: "TENANT_COMPONENT");

            migrationBuilder.DropTable(
                name: "TENANT_DATA_SOURCE");

            migrationBuilder.DropTable(
                name: "TENANT_DOMAIN_NAME");

            migrationBuilder.DropTable(
                name: "TENANT_KEY_ENCRYPTING_KEY");

            migrationBuilder.DropTable(
                name: "TERM_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "TERMINATION_REASON");

            migrationBuilder.DropTable(
                name: "TERMINATION_TYPE");

            migrationBuilder.DropTable(
                name: "TEST_FIELD_TYPE");

            migrationBuilder.DropTable(
                name: "TESTING_CRYPTO");

            migrationBuilder.DropTable(
                name: "TESTING_ITEM");

            migrationBuilder.DropTable(
                name: "TESTING_NODE_MEMBER");

            migrationBuilder.DropTable(
                name: "TESTING_REMOVE_ALL");

            migrationBuilder.DropTable(
                name: "TESTING_STATUS");

            migrationBuilder.DropTable(
                name: "TESTING_SUBTYPE");

            migrationBuilder.DropTable(
                name: "TIME_ENTRY");

            migrationBuilder.DropTable(
                name: "TIMESHEET_ROLE");

            migrationBuilder.DropTable(
                name: "TRACKING_CODE_ORDER");

            migrationBuilder.DropTable(
                name: "TRACKING_CODE_ORDER_RETURN");

            migrationBuilder.DropTable(
                name: "TRACKING_CODE_VISIT");

            migrationBuilder.DropTable(
                name: "UNEMPLOYMENT_CLAIM");

            migrationBuilder.DropTable(
                name: "UOM_CONVERSION");

            migrationBuilder.DropTable(
                name: "UOM_CONVERSION_DATED");

            migrationBuilder.DropTable(
                name: "UOM_GROUP");

            migrationBuilder.DropTable(
                name: "USER_LOGIN_HISTORY");

            migrationBuilder.DropTable(
                name: "USER_LOGIN_PASSWORD_HISTORY");

            migrationBuilder.DropTable(
                name: "USER_LOGIN_SECURITY_GROUP");

            migrationBuilder.DropTable(
                name: "USER_LOGIN_SESSION");

            migrationBuilder.DropTable(
                name: "USER_PREFERENCE");

            migrationBuilder.DropTable(
                name: "VALID_CONTACT_MECH_ROLE");

            migrationBuilder.DropTable(
                name: "VALID_RESPONSIBILITY");

            migrationBuilder.DropTable(
                name: "VALUE_LINK_KEY");

            migrationBuilder.DropTable(
                name: "VARIANCE_REASON_GL_ACCOUNT");

            migrationBuilder.DropTable(
                name: "VEHICLE_ANNOTATIONS");

            migrationBuilder.DropTable(
                name: "VEHICLE_CONTENTS");

            migrationBuilder.DropTable(
                name: "VENDOR");

            migrationBuilder.DropTable(
                name: "VENDOR_PRODUCT");

            migrationBuilder.DropTable(
                name: "VIDEO_DATA_RESOURCE");

            migrationBuilder.DropTable(
                name: "VISUAL_THEME_RESOURCE");

            migrationBuilder.DropTable(
                name: "WEB_ANALYTICS_CONFIG");

            migrationBuilder.DropTable(
                name: "WEB_ANALYTICS_TYPE");

            migrationBuilder.DropTable(
                name: "WEB_PAGE");

            migrationBuilder.DropTable(
                name: "WEB_SITE_CONTACT_LIST");

            migrationBuilder.DropTable(
                name: "WEB_SITE_CONTENT");

            migrationBuilder.DropTable(
                name: "WEB_SITE_PATH_ALIAS");

            migrationBuilder.DropTable(
                name: "WEB_SITE_PUBLISH_POINT");

            migrationBuilder.DropTable(
                name: "WEB_SITE_ROLE");

            migrationBuilder.DropTable(
                name: "WEB_USER_PREFERENCE");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_ASSOC_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_ASSOC_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_ATTRIBUTE");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_BILLING");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_CONTACT_MECH_NEW");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_CONTENT");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_COST_CALC");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_DELIVERABLE_PROD");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_EVENT_REMINDER");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_FIXED_ASSET_ASSIGN");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_FIXED_ASSET_STD");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_GOOD_STANDARD");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_ICAL_DATA");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_INVENTORY_ASSIGN");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_INVENTORY_PRODUCED");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_KEYWORD");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_NOTE");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_REVIEW");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_SEARCH_CONSTRAINT");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_SKILL_STANDARD");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_STATUS");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_SURVEY_APPL");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_TRANS_BOX");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_TYPE_ATTR");

            migrationBuilder.DropTable(
                name: "WORK_ORDER_ITEM_FULFILLMENT");

            migrationBuilder.DropTable(
                name: "WORK_REQUIREMENT_FULFILLMENT");

            migrationBuilder.DropTable(
                name: "X509_ISSUER_PROVISION");

            migrationBuilder.DropTable(
                name: "ZIP_SALES_RULE_LOOKUP");

            migrationBuilder.DropTable(
                name: "ZIP_SALES_TAX_LOOKUP");

            migrationBuilder.DropTable(
                name: "AGREEMENT_CONTENT_TYPE");

            migrationBuilder.DropTable(
                name: "AGREEMENT_TERM");

            migrationBuilder.DropTable(
                name: "ALLOCATION_PLAN_HEADER");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_PARTY_ASSIGNMENT");

            migrationBuilder.DropTable(
                name: "AspNetRoles");

            migrationBuilder.DropTable(
                name: "BILLING_ACCOUNT_TERM");

            migrationBuilder.DropTable(
                name: "BUDGET_REVIEW_RESULT_TYPE");

            migrationBuilder.DropTable(
                name: "BUDGET_REVISION");

            migrationBuilder.DropTable(
                name: "BUDGET_SCENARIO");

            migrationBuilder.DropTable(
                name: "COMM_CONTENT_ASSOC_TYPE");

            migrationBuilder.DropTable(
                name: "COMMUNICATION_EVENT_PRP_TYP");

            migrationBuilder.DropTable(
                name: "PRODUCT_CONFIG_CONFIG");

            migrationBuilder.DropTable(
                name: "PRODUCT_CONFIG_PRODUCT");

            migrationBuilder.DropTable(
                name: "CONTACT_LIST_PARTY");

            migrationBuilder.DropTable(
                name: "CONTENT_ASSOC_PREDICATE");

            migrationBuilder.DropTable(
                name: "CONTENT_ASSOC_TYPE");

            migrationBuilder.DropTable(
                name: "CONTENT_OPERATION");

            migrationBuilder.DropTable(
                name: "CONTENT_REVISION");

            migrationBuilder.DropTable(
                name: "CONTENT_SEARCH_RESULT");

            migrationBuilder.DropTable(
                name: "COST_COMPONENT");

            migrationBuilder.DropTable(
                name: "COUNTRY_CODE");

            migrationBuilder.DropTable(
                name: "CUSTOM_SCREEN_TYPE");

            migrationBuilder.DropTable(
                name: "META_DATA_PREDICATE");

            migrationBuilder.DropTable(
                name: "CONTENT_PURPOSE_TYPE");

            migrationBuilder.DropTable(
                name: "DEDUCTION_TYPE");

            migrationBuilder.DropTable(
                name: "EMPL_LEAVE_TYPE");

            migrationBuilder.DropTable(
                name: "EMPL_LEAVE_REASON_TYPE");

            migrationBuilder.DropTable(
                name: "EMPL_POSITION");

            migrationBuilder.DropTable(
                name: "EMPL_POSITION_CLASS_TYPE");

            migrationBuilder.DropTable(
                name: "ENTITY_GROUP");

            migrationBuilder.DropTable(
                name: "ENTITY_SYNC");

            migrationBuilder.DropTable(
                name: "FACILITY_CALENDAR_TYPE");

            migrationBuilder.DropTable(
                name: "FIXED_ASSET_IDENT_TYPE");

            migrationBuilder.DropTable(
                name: "FIXED_ASSET_PRODUCT_TYPE");

            migrationBuilder.DropTable(
                name: "FIXED_ASSET_STD_COST_TYPE");

            migrationBuilder.DropTable(
                name: "GEO_ASSOC_TYPE");

            migrationBuilder.DropTable(
                name: "GL_ACCOUNT_CATEGORY");

            migrationBuilder.DropTable(
                name: "GL_ACCOUNT_GROUP");

            migrationBuilder.DropTable(
                name: "ACCTG_TRANS_ENTRY");

            migrationBuilder.DropTable(
                name: "GOOD_IDENTIFICATION_TYPE");

            migrationBuilder.DropTable(
                name: "INVENTORY_ITEM_LABEL");

            migrationBuilder.DropTable(
                name: "INVOICE_CONTENT_TYPE");

            migrationBuilder.DropTable(
                name: "INVOICE_ITEM_ASSOC_TYPE");

            migrationBuilder.DropTable(
                name: "INVOICE_TERM");

            migrationBuilder.DropTable(
                name: "JOB_INTERVIEW_TYPE");

            migrationBuilder.DropTable(
                name: "JOB_REQUISITION");

            migrationBuilder.DropTable(
                name: "MRP_EVENT_TYPE");

            migrationBuilder.DropTable(
                name: "ORDER_BLACKLIST_TYPE");

            migrationBuilder.DropTable(
                name: "ORDER_CONTENT_TYPE");

            migrationBuilder.DropTable(
                name: "ORDER_DENYLIST_TYPE");

            migrationBuilder.DropTable(
                name: "ORDER_ITEM_ASSOC_TYPE");

            migrationBuilder.DropTable(
                name: "ITEM_ISSUANCE");

            migrationBuilder.DropTable(
                name: "PRODUCT_GROUP_ORDER");

            migrationBuilder.DropTable(
                name: "PRODUCT_PRICE_ACTION");

            migrationBuilder.DropTable(
                name: "ORDER_TERM");

            migrationBuilder.DropTable(
                name: "BENEFIT_TYPE");

            migrationBuilder.DropTable(
                name: "PARTY_CONTENT_TYPE");

            migrationBuilder.DropTable(
                name: "PARTY_IDENTIFICATION_TYPE");

            migrationBuilder.DropTable(
                name: "PARTY_GROUP");

            migrationBuilder.DropTable(
                name: "PARTY_INVITATION");

            migrationBuilder.DropTable(
                name: "PARTY_ACCTG_PREFERENCE");

            migrationBuilder.DropTable(
                name: "PARTY_QUAL_TYPE");

            migrationBuilder.DropTable(
                name: "PRIORITY_TYPE");

            migrationBuilder.DropTable(
                name: "PARTY_RELATIONSHIP_TYPE");

            migrationBuilder.DropTable(
                name: "EMPLOYMENT");

            migrationBuilder.DropTable(
                name: "PAYMENT_CONTENT_TYPE");

            migrationBuilder.DropTable(
                name: "PAYMENT_GROUP");

            migrationBuilder.DropTable(
                name: "PERF_REVIEW");

            migrationBuilder.DropTable(
                name: "PERSON");

            migrationBuilder.DropTable(
                name: "TRAINING_CLASS_TYPE");

            migrationBuilder.DropTable(
                name: "TRAINING_REQUEST");

            migrationBuilder.DropTable(
                name: "AspNetUsers");

            migrationBuilder.DropTable(
                name: "STATUS_VALID_CHANGE");

            migrationBuilder.DropTable(
                name: "PORTAL_PAGE");

            migrationBuilder.DropTable(
                name: "PORTLET_CATEGORY");

            migrationBuilder.DropTable(
                name: "PORTAL_PORTLET");

            migrationBuilder.DropTable(
                name: "PROD_CATALOG_CATEGORY_TYPE");

            migrationBuilder.DropTable(
                name: "PROD_CONF_ITEM_CONTENT_TYPE");

            migrationBuilder.DropTable(
                name: "PRODUCT_ASSOC_TYPE");

            migrationBuilder.DropTable(
                name: "PRODUCT_AVERAGE_COST_TYPE");

            migrationBuilder.DropTable(
                name: "PRODUCT_CATEGORY_CONTENT_TYPE");

            migrationBuilder.DropTable(
                name: "FACILITY_ASSOC_TYPE");

            migrationBuilder.DropTable(
                name: "FACILITY_LOCATION");

            migrationBuilder.DropTable(
                name: "PRODUCT_FEATURE_APPL");

            migrationBuilder.DropTable(
                name: "PRODUCT_FEATURE_GROUP");

            migrationBuilder.DropTable(
                name: "PRODUCT_FEATURE_IACTN_TYPE");

            migrationBuilder.DropTable(
                name: "PRODUCT_PRICE_TYPE");

            migrationBuilder.DropTable(
                name: "PRODUCT_PROMO_RULE");

            migrationBuilder.DropTable(
                name: "PRODUCT_CONTENT_TYPE");

            migrationBuilder.DropTable(
                name: "PRODUCT_SEARCH_RESULT");

            migrationBuilder.DropTable(
                name: "PROD_CATALOG");

            migrationBuilder.DropTable(
                name: "PAYMENT_GATEWAY_CONFIG");

            migrationBuilder.DropTable(
                name: "TELECOM_GATEWAY_CONFIG");

            migrationBuilder.DropTable(
                name: "TELECOM_METHOD_TYPE");

            migrationBuilder.DropTable(
                name: "QUOTE_TERM");

            migrationBuilder.DropTable(
                name: "BUDGET_ITEM");

            migrationBuilder.DropTable(
                name: "ORDER_ADJUSTMENT");

            migrationBuilder.DropTable(
                name: "RETURN_ADJUSTMENT_TYPE");

            migrationBuilder.DropTable(
                name: "CONTACT_MECH_PURPOSE_TYPE");

            migrationBuilder.DropTable(
                name: "PAY_GRADE");

            migrationBuilder.DropTable(
                name: "SALES_FORECAST");

            migrationBuilder.DropTable(
                name: "PARTY_CLASSIFICATION_GROUP");

            migrationBuilder.DropTable(
                name: "SEGMENT_GROUP");

            migrationBuilder.DropTable(
                name: "VISIT");

            migrationBuilder.DropTable(
                name: "SERVER_HIT_TYPE");

            migrationBuilder.DropTable(
                name: "SHIPMENT_CONTACT_MECH_TYPE");

            migrationBuilder.DropTable(
                name: "QUANTITY_BREAK");

            migrationBuilder.DropTable(
                name: "PRODUCT_STORE_SHIPMENT_METH");

            migrationBuilder.DropTable(
                name: "SHIPMENT_ROUTE_SEGMENT");

            migrationBuilder.DropTable(
                name: "DOCUMENT");

            migrationBuilder.DropTable(
                name: "SHOPPING_LIST_ITEM");

            migrationBuilder.DropTable(
                name: "COMMUNICATION_EVENT");

            migrationBuilder.DropTable(
                name: "SUBSCRIPTION");

            migrationBuilder.DropTable(
                name: "SUBSCRIPTION_ACTIVITY");

            migrationBuilder.DropTable(
                name: "SUPPLIER_PREF_ORDER");

            migrationBuilder.DropTable(
                name: "SUPPLIER_RATING_TYPE");

            migrationBuilder.DropTable(
                name: "SURVEY_MULTI_RESP");

            migrationBuilder.DropTable(
                name: "SURVEY_QUESTION_OPTION");

            migrationBuilder.DropTable(
                name: "TAX_AUTHORITY_ASSOC_TYPE");

            migrationBuilder.DropTable(
                name: "COMPONENT");

            migrationBuilder.DropTable(
                name: "TENANT");

            migrationBuilder.DropTable(
                name: "TESTING");

            migrationBuilder.DropTable(
                name: "TESTING_NODE");

            migrationBuilder.DropTable(
                name: "RATE_TYPE");

            migrationBuilder.DropTable(
                name: "TIMESHEET");

            migrationBuilder.DropTable(
                name: "TRACKING_CODE");

            migrationBuilder.DropTable(
                name: "USER_PREF_GROUP_TYPE");

            migrationBuilder.DropTable(
                name: "EMPL_POSITION_TYPE");

            migrationBuilder.DropTable(
                name: "RESPONSIBILITY_TYPE");

            migrationBuilder.DropTable(
                name: "ANNOTATIONS");

            migrationBuilder.DropTable(
                name: "VISUAL_THEME");

            migrationBuilder.DropTable(
                name: "WEB_SITE_CONTENT_TYPE");

            migrationBuilder.DropTable(
                name: "WEB_PREFERENCE_TYPE");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_ASSOC");

            migrationBuilder.DropTable(
                name: "INVOICE_ITEM");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_CONTENT_TYPE");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_GOOD_STANDARD_TYPE");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_SEARCH_RESULT");

            migrationBuilder.DropTable(
                name: "PRODUCT_STORE_SURVEY_APPL");

            migrationBuilder.DropTable(
                name: "REQUIREMENT");

            migrationBuilder.DropTable(
                name: "WORK_REQ_FULF_TYPE");

            migrationBuilder.DropTable(
                name: "AGREEMENT_ITEM");

            migrationBuilder.DropTable(
                name: "ALLOCATION_PLAN_TYPE");

            migrationBuilder.DropTable(
                name: "PRODUCT_CONFIG_OPTION");

            migrationBuilder.DropTable(
                name: "COST_COMPONENT_CALC");

            migrationBuilder.DropTable(
                name: "COST_COMPONENT_TYPE");

            migrationBuilder.DropTable(
                name: "GL_ACCOUNT_CATEGORY_TYPE");

            migrationBuilder.DropTable(
                name: "GL_ACCOUNT_GROUP_TYPE");

            migrationBuilder.DropTable(
                name: "ACCTG_TRANS");

            migrationBuilder.DropTable(
                name: "ACCTG_TRANS_ENTRY_TYPE");

            migrationBuilder.DropTable(
                name: "GL_ACCOUNT_ORGANIZATION");

            migrationBuilder.DropTable(
                name: "SETTLEMENT_TERM");

            migrationBuilder.DropTable(
                name: "INVENTORY_ITEM_LABEL_TYPE");

            migrationBuilder.DropTable(
                name: "FIXED_ASSET_MAINT");

            migrationBuilder.DropTable(
                name: "SHIPMENT_ITEM");

            migrationBuilder.DropTable(
                name: "JOB_SANDBOX");

            migrationBuilder.DropTable(
                name: "PRODUCT_PRICE_RULE");

            migrationBuilder.DropTable(
                name: "PRODUCT_PRICE_ACTION_TYPE");

            migrationBuilder.DropTable(
                name: "PAYMENT_GROUP_TYPE");

            migrationBuilder.DropTable(
                name: "SECURITY_GROUP");

            migrationBuilder.DropTable(
                name: "PRODUCT_FEATURE_APPL_TYPE");

            migrationBuilder.DropTable(
                name: "PAYMENT_GATEWAY_CONFIG_TYPE");

            migrationBuilder.DropTable(
                name: "TERM_TYPE");

            migrationBuilder.DropTable(
                name: "BUDGET");

            migrationBuilder.DropTable(
                name: "BUDGET_ITEM_TYPE");

            migrationBuilder.DropTable(
                name: "ORDER_ADJUSTMENT_TYPE");

            migrationBuilder.DropTable(
                name: "PARTY_CLASSIFICATION_TYPE");

            migrationBuilder.DropTable(
                name: "SEGMENT_GROUP_TYPE");

            migrationBuilder.DropTable(
                name: "USER_AGENT");

            migrationBuilder.DropTable(
                name: "VISITOR");

            migrationBuilder.DropTable(
                name: "QUANTITY_BREAK_TYPE");

            migrationBuilder.DropTable(
                name: "SHIPMENT_GATEWAY_CONFIG");

            migrationBuilder.DropTable(
                name: "DELIVERY");

            migrationBuilder.DropTable(
                name: "DOCUMENT_TYPE");

            migrationBuilder.DropTable(
                name: "CONTACT_LIST");

            migrationBuilder.DropTable(
                name: "MIME_TYPE");

            migrationBuilder.DropTable(
                name: "COMMUNICATION_EVENT_TYPE");

            migrationBuilder.DropTable(
                name: "NEED_TYPE");

            migrationBuilder.DropTable(
                name: "SUBSCRIPTION_RESOURCE");

            migrationBuilder.DropTable(
                name: "SUBSCRIPTION_TYPE");

            migrationBuilder.DropTable(
                name: "SURVEY_QUESTION");

            migrationBuilder.DropTable(
                name: "TESTING_TYPE");

            migrationBuilder.DropTable(
                name: "TRACKING_CODE_TYPE");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_ASSOC_TYPE");

            migrationBuilder.DropTable(
                name: "INVOICE_ITEM_TYPE");

            migrationBuilder.DropTable(
                name: "TAX_AUTHORITY_RATE_PRODUCT");

            migrationBuilder.DropTable(
                name: "SURVEY_APPL_TYPE");

            migrationBuilder.DropTable(
                name: "DELIVERABLE");

            migrationBuilder.DropTable(
                name: "REQUIREMENT_TYPE");

            migrationBuilder.DropTable(
                name: "AGREEMENT_ITEM_TYPE");

            migrationBuilder.DropTable(
                name: "PRODUCT_CONFIG_ITEM");

            migrationBuilder.DropTable(
                name: "GL_FISCAL_TYPE");

            migrationBuilder.DropTable(
                name: "GL_JOURNAL");

            migrationBuilder.DropTable(
                name: "INVENTORY_ITEM_VARIANCE");

            migrationBuilder.DropTable(
                name: "INVOICE");

            migrationBuilder.DropTable(
                name: "SHIPMENT_RECEIPT");

            migrationBuilder.DropTable(
                name: "ACCTG_TRANS_TYPE");

            migrationBuilder.DropTable(
                name: "PRODUCT_METER_TYPE");

            migrationBuilder.DropTable(
                name: "PRODUCT_MAINT_TYPE");

            migrationBuilder.DropTable(
                name: "BUDGET_TYPE");

            migrationBuilder.DropTable(
                name: "CUSTOM_TIME_PERIOD");

            migrationBuilder.DropTable(
                name: "BROWSER_TYPE");

            migrationBuilder.DropTable(
                name: "USER_AGENT_METHOD_TYPE");

            migrationBuilder.DropTable(
                name: "PLATFORM_TYPE");

            migrationBuilder.DropTable(
                name: "PROTOCOL_TYPE");

            migrationBuilder.DropTable(
                name: "USER_AGENT_TYPE");

            migrationBuilder.DropTable(
                name: "SHIPMENT_GATEWAY_CONFIG_TYPE");

            migrationBuilder.DropTable(
                name: "CONTACT_LIST_TYPE");

            migrationBuilder.DropTable(
                name: "CONTENT");

            migrationBuilder.DropTable(
                name: "SURVEY_QUESTION_CATEGORY");

            migrationBuilder.DropTable(
                name: "SURVEY_QUESTION_TYPE");

            migrationBuilder.DropTable(
                name: "TAX_AUTHORITY_RATE_TYPE");

            migrationBuilder.DropTable(
                name: "PHYSICAL_INVENTORY");

            migrationBuilder.DropTable(
                name: "VARIANCE_REASON");

            migrationBuilder.DropTable(
                name: "INVOICE_TYPE");

            migrationBuilder.DropTable(
                name: "REJECTION_REASON");

            migrationBuilder.DropTable(
                name: "RETURN_ITEM");

            migrationBuilder.DropTable(
                name: "SHIPMENT_PACKAGE");

            migrationBuilder.DropTable(
                name: "PERIOD_TYPE");

            migrationBuilder.DropTable(
                name: "DATA_RESOURCE");

            migrationBuilder.DropTable(
                name: "CONTENT_TYPE");

            migrationBuilder.DropTable(
                name: "RETURN_REASON");

            migrationBuilder.DropTable(
                name: "RETURN_ITEM_RESPONSE");

            migrationBuilder.DropTable(
                name: "RETURN_ITEM_TYPE");

            migrationBuilder.DropTable(
                name: "RETURN_TYPE");

            migrationBuilder.DropTable(
                name: "SHIPMENT");

            migrationBuilder.DropTable(
                name: "CHARACTER_SET");

            migrationBuilder.DropTable(
                name: "SURVEY_RESPONSE");

            migrationBuilder.DropTable(
                name: "DATA_CATEGORY");

            migrationBuilder.DropTable(
                name: "DATA_TEMPLATE_TYPE");

            migrationBuilder.DropTable(
                name: "DATA_RESOURCE_TYPE");

            migrationBuilder.DropTable(
                name: "PICKLIST_BIN");

            migrationBuilder.DropTable(
                name: "RETURN_HEADER");

            migrationBuilder.DropTable(
                name: "SHIPMENT_TYPE");

            migrationBuilder.DropTable(
                name: "SURVEY");

            migrationBuilder.DropTable(
                name: "ORDER_ITEM_SHIP_GROUP");

            migrationBuilder.DropTable(
                name: "PICKLIST");

            migrationBuilder.DropTable(
                name: "RETURN_HEADER_TYPE");

            migrationBuilder.DropTable(
                name: "AGREEMENT");

            migrationBuilder.DropTable(
                name: "TELECOM_NUMBER");

            migrationBuilder.DropTable(
                name: "AGREEMENT_TYPE");

            migrationBuilder.DropTable(
                name: "ACCOMMODATION_CLASS");

            migrationBuilder.DropTable(
                name: "FIXED_ASSET");

            migrationBuilder.DropTable(
                name: "TECH_DATA_CALENDAR");

            migrationBuilder.DropTable(
                name: "FIXED_ASSET_TYPE");

            migrationBuilder.DropTable(
                name: "TECH_DATA_CALENDAR_WEEK");

            migrationBuilder.DropTable(
                name: "ACCOMMODATION_MAP_TYPE");

            migrationBuilder.DropTable(
                name: "FIN_ACCOUNT_TRANS");

            migrationBuilder.DropTable(
                name: "FIN_ACCOUNT_TRANS_TYPE");

            migrationBuilder.DropTable(
                name: "GL_RECONCILIATION");

            migrationBuilder.DropTable(
                name: "ORDER_ITEM");

            migrationBuilder.DropTable(
                name: "PAYMENT");

            migrationBuilder.DropTable(
                name: "INVENTORY_ITEM");

            migrationBuilder.DropTable(
                name: "ORDER_ITEM_GROUP");

            migrationBuilder.DropTable(
                name: "ORDER_ITEM_TYPE");

            migrationBuilder.DropTable(
                name: "QUOTE_ITEM");

            migrationBuilder.DropTable(
                name: "SALES_OPPORTUNITY");

            migrationBuilder.DropTable(
                name: "PAYMENT_GATEWAY_RESPONSE");

            migrationBuilder.DropTable(
                name: "PAYMENT_TYPE");

            migrationBuilder.DropTable(
                name: "CONTAINER");

            migrationBuilder.DropTable(
                name: "LOT");

            migrationBuilder.DropTable(
                name: "CUST_REQUEST_ITEM");

            migrationBuilder.DropTable(
                name: "DELIVERABLE_TYPE");

            migrationBuilder.DropTable(
                name: "PRODUCT_FEATURE");

            migrationBuilder.DropTable(
                name: "QUOTE");

            migrationBuilder.DropTable(
                name: "SKILL_TYPE");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT");

            migrationBuilder.DropTable(
                name: "MARKETING_CAMPAIGN");

            migrationBuilder.DropTable(
                name: "SALES_OPPORTUNITY_STAGE");

            migrationBuilder.DropTable(
                name: "ORDER_PAYMENT_PREFERENCE");

            migrationBuilder.DropTable(
                name: "CONTAINER_TYPE");

            migrationBuilder.DropTable(
                name: "CUST_REQUEST");

            migrationBuilder.DropTable(
                name: "PRODUCT");

            migrationBuilder.DropTable(
                name: "CUST_REQUEST_RESOLUTION");

            migrationBuilder.DropTable(
                name: "PRODUCT_FEATURE_CATEGORY");

            migrationBuilder.DropTable(
                name: "PRODUCT_FEATURE_TYPE");

            migrationBuilder.DropTable(
                name: "QUOTE_TYPE");

            migrationBuilder.DropTable(
                name: "ACCOMMODATION_MAP");

            migrationBuilder.DropTable(
                name: "ACCOMMODATION_SPOT");

            migrationBuilder.DropTable(
                name: "CUSTOM_METHOD");

            migrationBuilder.DropTable(
                name: "NOTE_DATA");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_PURPOSE_TYPE");

            migrationBuilder.DropTable(
                name: "RUNTIME_DATA");

            migrationBuilder.DropTable(
                name: "TEMPORAL_EXPRESSION");

            migrationBuilder.DropTable(
                name: "WORK_EFFORT_TYPE");

            migrationBuilder.DropTable(
                name: "ORDER_HEADER");

            migrationBuilder.DropTable(
                name: "PRODUCT_PRICE_PURPOSE");

            migrationBuilder.DropTable(
                name: "CUST_REQUEST_CATEGORY");

            migrationBuilder.DropTable(
                name: "SHIPMENT_BOX_TYPE");

            migrationBuilder.DropTable(
                name: "PRODUCT_TYPE");

            migrationBuilder.DropTable(
                name: "CUSTOM_METHOD_TYPE");

            migrationBuilder.DropTable(
                name: "SHOPPING_LIST");

            migrationBuilder.DropTable(
                name: "BILLING_ACCOUNT");

            migrationBuilder.DropTable(
                name: "ORDER_TYPE");

            migrationBuilder.DropTable(
                name: "WEB_SITE");

            migrationBuilder.DropTable(
                name: "VEHICLES");

            migrationBuilder.DropTable(
                name: "CUST_REQUEST_TYPE");

            migrationBuilder.DropTable(
                name: "CARRIER_SHIPMENT_METHOD");

            migrationBuilder.DropTable(
                name: "PRODUCT_PROMO_CODE");

            migrationBuilder.DropTable(
                name: "RECURRENCE_INFO");

            migrationBuilder.DropTable(
                name: "SHOPPING_LIST_TYPE");

            migrationBuilder.DropTable(
                name: "POSTAL_ADDRESS");

            migrationBuilder.DropTable(
                name: "PRODUCT_STORE");

            migrationBuilder.DropTable(
                name: "VISUAL_THEME_SET");

            migrationBuilder.DropTable(
                name: "PRODUCT_CATEGORY");

            migrationBuilder.DropTable(
                name: "PARTY_ROLE");

            migrationBuilder.DropTable(
                name: "SHIPMENT_METHOD_TYPE");

            migrationBuilder.DropTable(
                name: "PRODUCT_PROMO");

            migrationBuilder.DropTable(
                name: "RECURRENCE_RULE");

            migrationBuilder.DropTable(
                name: "CONTACT_MECH");

            migrationBuilder.DropTable(
                name: "FACILITY");

            migrationBuilder.DropTable(
                name: "PRODUCT_STORE_GROUP");

            migrationBuilder.DropTable(
                name: "TAX_AUTHORITY");

            migrationBuilder.DropTable(
                name: "PRODUCT_CATEGORY_TYPE");

            migrationBuilder.DropTable(
                name: "ROLE_TYPE");

            migrationBuilder.DropTable(
                name: "CONTACT_MECH_TYPE");

            migrationBuilder.DropTable(
                name: "FACILITY_TYPE");

            migrationBuilder.DropTable(
                name: "GEO_POINT");

            migrationBuilder.DropTable(
                name: "FACILITY_GROUP");

            migrationBuilder.DropTable(
                name: "INVENTORY_ITEM_TYPE");

            migrationBuilder.DropTable(
                name: "PRODUCT_STORE_GROUP_TYPE");

            migrationBuilder.DropTable(
                name: "GEO");

            migrationBuilder.DropTable(
                name: "FACILITY_GROUP_TYPE");

            migrationBuilder.DropTable(
                name: "GEO_TYPE");

            migrationBuilder.DropTable(
                name: "STATUS_ITEM");

            migrationBuilder.DropTable(
                name: "STATUS_TYPE");

            migrationBuilder.DropTable(
                name: "PARTY");

            migrationBuilder.DropTable(
                name: "USER_LOGIN");

            migrationBuilder.DropTable(
                name: "DATA_SOURCE");

            migrationBuilder.DropTable(
                name: "PARTY_TYPE");

            migrationBuilder.DropTable(
                name: "DATA_SOURCE_TYPE");

            migrationBuilder.DropTable(
                name: "UOM");

            migrationBuilder.DropTable(
                name: "UOM_TYPE");

            migrationBuilder.DropTable(
                name: "GL_ACCOUNT");

            migrationBuilder.DropTable(
                name: "GL_ACCOUNT_CLASS");

            migrationBuilder.DropTable(
                name: "GL_RESOURCE_TYPE");

            migrationBuilder.DropTable(
                name: "GL_ACCOUNT_TYPE");

            migrationBuilder.DropTable(
                name: "GL_XBRL_CLASS");

            migrationBuilder.DropTable(
                name: "ENUMERATION");

            migrationBuilder.DropTable(
                name: "ENUMERATION_TYPE");

            migrationBuilder.DropTable(
                name: "PAYMENT_METHOD");

            migrationBuilder.DropTable(
                name: "FIN_ACCOUNT");

            migrationBuilder.DropTable(
                name: "PAYMENT_METHOD_TYPE");

            migrationBuilder.DropTable(
                name: "FIN_ACCOUNT_TYPE");
        }
    }
}
